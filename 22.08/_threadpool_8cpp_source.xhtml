<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/Threadpool.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_threadpool_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Threadpool.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_threadpool_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2021 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#if !defined(ARMNN_DISABLE_THREADS)</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_threadpool_8hpp.xhtml">armnn/Threadpool.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_timer_8hpp.xhtml">armnn/utility/Timer.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;{</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span>experimental</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="classarmnn_1_1experimental_1_1_threadpool.xhtml#a22944b5254612236c06e24865262e1d5">   16</a></span>&#160;<a class="code" href="classarmnn_1_1experimental_1_1_threadpool.xhtml#a22944b5254612236c06e24865262e1d5">Threadpool::Threadpool</a>(std::size_t numThreads,</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;                       <a class="code" href="classarmnn_1_1_i_runtime.xhtml">IRuntime</a>* runtimePtr,</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;                       std::vector&lt;std::shared_ptr&lt;IWorkingMemHandle&gt;&gt; memHandles)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    : m_RuntimePtr(runtimePtr)</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0u; i &lt; numThreads; ++i)</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    {</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        m_Threads.emplace_back(std::make_unique&lt;std::thread&gt;(&amp;Threadpool::ProcessExecPriorities, <span class="keyword">this</span>, i));</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    }</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <a class="code" href="classarmnn_1_1experimental_1_1_threadpool.xhtml#ac54bebf6abec4a11e033d703f6441df8">LoadMemHandles</a>(memHandles);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;}</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="classarmnn_1_1experimental_1_1_threadpool.xhtml#ac54bebf6abec4a11e033d703f6441df8">   29</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1experimental_1_1_threadpool.xhtml#ac54bebf6abec4a11e033d703f6441df8">Threadpool::LoadMemHandles</a>(std::vector&lt;std::shared_ptr&lt;IWorkingMemHandle&gt;&gt; memHandles)</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">if</span> (memHandles.size() == 0)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a>(<span class="stringliteral">&quot;Threadpool::UnloadMemHandles: Size of memHandles vector must be greater than 0&quot;</span>);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    }</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">if</span> (memHandles.size() != m_Threads.size())</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a>(</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                <span class="stringliteral">&quot;Threadpool::UnloadMemHandles: Size of memHandles vector must match the number of threads&quot;</span>);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> networkId = memHandles[0]-&gt;GetNetworkId();</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 1; i &lt; memHandles.size(); ++i)</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">if</span> (networkId != memHandles[i]-&gt;GetNetworkId())</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a>(</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                    <span class="stringliteral">&quot;Threadpool::UnloadMemHandles: All network ids must be identical in memHandles&quot;</span>);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    std::pair&lt;NetworkId, std::vector&lt;std::shared_ptr&lt;IWorkingMemHandle&gt;&gt;&gt; pair {networkId, memHandles};</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    m_WorkingMemHandleMap.insert(pair);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classarmnn_1_1experimental_1_1_threadpool.xhtml#a11f8027065067f9f77f54fe2400479d2">   57</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1experimental_1_1_threadpool.xhtml#a11f8027065067f9f77f54fe2400479d2">Threadpool::UnloadMemHandles</a>(<a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> networkId)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">if</span> (m_WorkingMemHandleMap.find(networkId) != m_WorkingMemHandleMap.end())</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        m_WorkingMemHandleMap.erase(networkId);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;       <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a>(<span class="stringliteral">&quot;Threadpool::UnloadMemHandles: Unknown NetworkId&quot;</span>);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classarmnn_1_1experimental_1_1_threadpool.xhtml#ab38a8efb11e2dfeeb5a3709644985748">   69</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1experimental_1_1_threadpool.xhtml#ab38a8efb11e2dfeeb5a3709644985748">Threadpool::Schedule</a>(<a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> networkId,</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                          <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a>&amp; inputTensors,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                          <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a>&amp; outputTensors,</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                          <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a8e72227ebe5ac505cf44790f2e6eb488">QosExecPriority</a> priority,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                          std::shared_ptr&lt;IAsyncExecutionCallback&gt; cb)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">if</span> (m_WorkingMemHandleMap.find(networkId) == m_WorkingMemHandleMap.end())</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a>(<span class="stringliteral">&quot;Threadpool::UnloadMemHandles: Unknown NetworkId&quot;</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="comment">// Group execution parameters so that they can be easily added to the queue</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    ExecutionTuple groupExecParams = std::make_tuple(networkId, inputTensors, outputTensors, cb);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    std::shared_ptr&lt;ExecutionTuple&gt; operation = std::make_shared&lt;ExecutionTuple&gt;(groupExecParams);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// Add a message to the queue and notify the request thread</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    std::unique_lock&lt;std::mutex&gt; lock(m_ThreadPoolMutex);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">switch</span> (priority)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a8e72227ebe5ac505cf44790f2e6eb488a655d20c1ca69519ca647684edbb2db35">QosExecPriority::High</a>:</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            m_HighPriorityQueue.push(operation);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a8e72227ebe5ac505cf44790f2e6eb488a28d0edd045e05cf5af64e35ae0c4c6ef">QosExecPriority::Low</a>:</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            m_LowPriorityQueue.push(operation);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a8e72227ebe5ac505cf44790f2e6eb488a87f8a6ab85c9ced3702b4ea641ad4bb5">QosExecPriority::Medium</a>:</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            m_MediumPriorityQueue.push(operation);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    m_ThreadPoolEvent.notify_one();</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="classarmnn_1_1experimental_1_1_threadpool.xhtml#a3be6ab6132ee76b0b36149f70f842f61">  102</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1experimental_1_1_threadpool.xhtml#a3be6ab6132ee76b0b36149f70f842f61">Threadpool::TerminateThreadPool</a>() noexcept</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        std::unique_lock&lt;std::mutex&gt; threadPoolLock(m_ThreadPoolMutex);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        m_TerminatePool = <span class="keyword">true</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    m_ThreadPoolEvent.notify_all();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;thread : m_Threads)</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        thread-&gt;join();</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="keywordtype">void</span> Threadpool::ProcessExecPriorities(uint32_t index)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordtype">int</span> expireRate = <a class="code" href="namespacearmnn.xhtml#a61d2390e44601830cdc9b400b9910bbf">EXPIRE_RATE</a>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordtype">int</span> highPriorityCount = 0;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordtype">int</span> mediumPriorityCount = 0;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        std::shared_ptr&lt;ExecutionTuple&gt; currentExecInProgress(<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="comment">// Wait for a message to be added to the queue</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="comment">// This is in a separate scope to minimise the lifetime of the lock</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            std::unique_lock&lt;std::mutex&gt; lock(m_ThreadPoolMutex);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            m_ThreadPoolEvent.wait(lock,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                                   [=]</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                                   {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                       <span class="keywordflow">return</span> m_TerminatePool || !m_HighPriorityQueue.empty() ||</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                              !m_MediumPriorityQueue.empty() || !m_LowPriorityQueue.empty();</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                                   });</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">if</span> (m_TerminatePool &amp;&amp; m_HighPriorityQueue.empty() &amp;&amp; m_MediumPriorityQueue.empty() &amp;&amp;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                m_LowPriorityQueue.empty())</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="comment">// Get the message to process from the front of each queue based on priority from high to low</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="comment">// Get high priority first if it does not exceed the expire rate</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keywordflow">if</span> (!m_HighPriorityQueue.empty() &amp;&amp; highPriorityCount &lt; expireRate)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                currentExecInProgress = m_HighPriorityQueue.front();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                m_HighPriorityQueue.pop();</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                highPriorityCount += 1;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <span class="comment">// If high priority queue is empty or the count exceeds the expire rate, get medium priority message</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!m_MediumPriorityQueue.empty() &amp;&amp; mediumPriorityCount &lt; expireRate)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                currentExecInProgress = m_MediumPriorityQueue.front();</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                m_MediumPriorityQueue.pop();</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                mediumPriorityCount += 1;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                <span class="comment">// Reset high priority count</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                highPriorityCount = 0;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="comment">// If medium priority queue is empty or the count exceeds the expire rate, get low priority message</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!m_LowPriorityQueue.empty())</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                currentExecInProgress = m_LowPriorityQueue.front();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                m_LowPriorityQueue.pop();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                <span class="comment">// Reset high and medium priority count</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                highPriorityCount = 0;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                mediumPriorityCount = 0;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="comment">// Reset high and medium priority count</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                highPriorityCount = 0;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                mediumPriorityCount = 0;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="comment">// invoke the asynchronous execution method</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keyword">auto</span> networkId = std::get&lt;0&gt;(*currentExecInProgress);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keyword">auto</span> inputTensors = std::get&lt;1&gt;(*currentExecInProgress);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keyword">auto</span> outputTensors = std::get&lt;2&gt;(*currentExecInProgress);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keyword">auto</span> cb = std::get&lt;3&gt;(*currentExecInProgress);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="comment">// Get time at start of inference</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a4b3cb628c15e1eea1b09ec848e9ae8c4">HighResolutionClock</a> startTime = <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">try</span> <span class="comment">// executing the inference</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <a class="code" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a>&amp; memHandle = *(m_WorkingMemHandleMap.at(networkId))[index];</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="comment">// Execute and populate the time at end of inference in the callback</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            m_RuntimePtr-&gt;<a class="code" href="classarmnn_1_1_i_runtime.xhtml#a27f91ba619c3c6fd5e640df91b3fd080">Execute</a>(memHandle, inputTensors, outputTensors) == <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">Status::Success</a> ?</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            cb-&gt;Notify(<a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">Status::Success</a>, std::make_pair(startTime, <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>())) :</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            cb-&gt;Notify(<a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">Status::Failure</a>, std::make_pair(startTime, <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>()));</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">RuntimeException</a>&amp;)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            cb-&gt;Notify(<a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">Status::Failure</a>, std::make_pair(startTime, <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>()));</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;} <span class="comment">// namespace experimental</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="classarmnn_1_1experimental_1_1_threadpool_xhtml_ac54bebf6abec4a11e033d703f6441df8"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_threadpool.xhtml#ac54bebf6abec4a11e033d703f6441df8">armnn::experimental::Threadpool::LoadMemHandles</a></div><div class="ttdeci">void LoadMemHandles(std::vector&lt; std::shared_ptr&lt; IWorkingMemHandle &gt;&gt; memHandles)</div><div class="ttdef"><b>Definition:</b> <a href="_threadpool_8cpp_source.xhtml#l00029">Threadpool.cpp:29</a></div></div>
<div class="ttc" id="_threadpool_8hpp_xhtml"><div class="ttname"><a href="_threadpool_8hpp.xhtml">Threadpool.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4b3cb628c15e1eea1b09ec848e9ae8c4"><div class="ttname"><a href="namespacearmnn.xhtml#a4b3cb628c15e1eea1b09ec848e9ae8c4">armnn::HighResolutionClock</a></div><div class="ttdeci">std::chrono::high_resolution_clock::time_point HighResolutionClock</div><div class="ttdoc">Define a timer and associated inference ID for recording execution times. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00382">Types.hpp:382</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a61d2390e44601830cdc9b400b9910bbf"><div class="ttname"><a href="namespacearmnn.xhtml#a61d2390e44601830cdc9b400b9910bbf">armnn::EXPIRE_RATE</a></div><div class="ttdeci">constexpr unsigned int EXPIRE_RATE</div><div class="ttdoc">Variable to control expire rate of priority queue. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00037">Types.hpp:37</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac895f6f6897ce335b7b433201bae0b48"><div class="ttname"><a href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a></div><div class="ttdeci">std::chrono::high_resolution_clock::time_point GetTimeNow()</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00014">Timer.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_runtime_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00074">IRuntime.hpp:74</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_threadpool_xhtml_a3be6ab6132ee76b0b36149f70f842f61"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_threadpool.xhtml#a3be6ab6132ee76b0b36149f70f842f61">armnn::experimental::Threadpool::TerminateThreadPool</a></div><div class="ttdeci">void TerminateThreadPool() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_threadpool_8cpp_source.xhtml#l00102">Threadpool.cpp:102</a></div></div>
<div class="ttc" id="_timer_8hpp_xhtml"><div class="ttname"><a href="_timer_8hpp.xhtml">Timer.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_threadpool_xhtml_ab38a8efb11e2dfeeb5a3709644985748"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_threadpool.xhtml#ab38a8efb11e2dfeeb5a3709644985748">armnn::experimental::Threadpool::Schedule</a></div><div class="ttdeci">void Schedule(NetworkId networkId, const InputTensors &amp;inputTensors, const OutputTensors &amp;outputTensors, const QosExecPriority priority, std::shared_ptr&lt; IAsyncExecutionCallback &gt; cb)</div><div class="ttdoc">Schedule an asynchronous execution on the loaded network. </div><div class="ttdef"><b>Definition:</b> <a href="_threadpool_8cpp_source.xhtml#l00069">Threadpool.cpp:69</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0d8160388a127c1a23b37bc88dc6e2ec"><div class="ttname"><a href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00027">IRuntime.hpp:27</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_threadpool_xhtml_a22944b5254612236c06e24865262e1d5"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_threadpool.xhtml#a22944b5254612236c06e24865262e1d5">armnn::experimental::Threadpool::Threadpool</a></div><div class="ttdeci">Threadpool(std::size_t numThreads, IRuntime *runtimePtr, std::vector&lt; std::shared_ptr&lt; IWorkingMemHandle &gt;&gt; memHandles)</div><div class="ttdef"><b>Definition:</b> <a href="_threadpool_8cpp_source.xhtml#l00016">Threadpool.cpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_i_working_mem_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">armnn::experimental::IWorkingMemHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_working_mem_handle_8hpp_source.xhtml#l00020">IWorkingMemHandle.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_a27f91ba619c3c6fd5e640df91b3fd080"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#a27f91ba619c3c6fd5e640df91b3fd080">armnn::IRuntime::Execute</a></div><div class="ttdeci">Status Execute(IWorkingMemHandle &amp;workingMemHandle, const InputTensors &amp;inputTensors, const OutputTensors &amp;outputTensors, std::vector&lt; ImportedInputId &gt; preImportedInputs={}, std::vector&lt; ImportedOutputId &gt; preImportedOutputs={})</div><div class="ttdoc">This is an experimental function. </div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00120">Runtime.cpp:120</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_threadpool_xhtml_a11f8027065067f9f77f54fe2400479d2"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_threadpool.xhtml#a11f8027065067f9f77f54fe2400479d2">armnn::experimental::Threadpool::UnloadMemHandles</a></div><div class="ttdeci">void UnloadMemHandles(NetworkId networkId)</div><div class="ttdef"><b>Definition:</b> <a href="_threadpool_8cpp_source.xhtml#l00057">Threadpool.cpp:57</a></div></div>
<div class="ttc" id="classarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8e72227ebe5ac505cf44790f2e6eb488a655d20c1ca69519ca647684edbb2db35"><div class="ttname"><a href="namespacearmnn.xhtml#a8e72227ebe5ac505cf44790f2e6eb488a655d20c1ca69519ca647684edbb2db35">armnn::QosExecPriority::High</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8e72227ebe5ac505cf44790f2e6eb488"><div class="ttname"><a href="namespacearmnn.xhtml#a8e72227ebe5ac505cf44790f2e6eb488">armnn::QosExecPriority</a></div><div class="ttdeci">QosExecPriority</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00079">Types.hpp:79</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8e72227ebe5ac505cf44790f2e6eb488a28d0edd045e05cf5af64e35ae0c4c6ef"><div class="ttname"><a href="namespacearmnn.xhtml#a8e72227ebe5ac505cf44790f2e6eb488a28d0edd045e05cf5af64e35ae0c4c6ef">armnn::QosExecPriority::Low</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8e72227ebe5ac505cf44790f2e6eb488a87f8a6ab85c9ced3702b4ea641ad4bb5"><div class="ttname"><a href="namespacearmnn.xhtml#a8e72227ebe5ac505cf44790f2e6eb488a87f8a6ab85c9ced3702b4ea641ad4bb5">armnn::QosExecPriority::Medium</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_threadpool_8cpp.xhtml">Threadpool.cpp</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:27 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
