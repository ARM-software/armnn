<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/ethosnref/workloads/EthosnRefTransposeConvolutionImpl.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_ethosn_ref_transpose_convolution_impl_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">EthosnRefTransposeConvolutionImpl.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_ethosn_ref_transpose_convolution_impl_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_ethosn_ref_workload_utils_8hpp.xhtml">EthosnRefWorkloadUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="ethosnref_2workloads_2_tensor_buffer_array_view_8hpp.xhtml">TensorBufferArrayView.hpp</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_8hpp.xhtml">armnn/Tensor.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_data_layout_indexed_8hpp.xhtml">armnnUtils/DataLayoutIndexed.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_numeric_cast_8hpp.xhtml">armnn/utility/NumericCast.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_ethosn_ref_conv_impl_8hpp.xhtml">EthosnRefConvImpl.hpp</a>&quot;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> TransConvData, <span class="keyword">typename</span> InputType, <span class="keyword">typename</span> FilterType, <span class="keyword">typename</span> BiasType, <span class="keyword">typename</span> AccumulatorType&gt;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> EthosnRefTransposeConvolutionImpl(TransConvData data,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                                        <span class="keyword">const</span> InputType* inputData,</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                                        <span class="keywordtype">float</span> inputScale,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                                        int32_t inputOffset,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                                        <span class="keyword">const</span> FilterType* filterData,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                                        <span class="keywordtype">float</span> filterScale,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                                        int32_t filterOffset,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                                        <span class="keyword">const</span> BiasType* biasData,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                                        <span class="keywordtype">float</span> outputScale,</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                                        int32_t outputOffset,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                                        <span class="keyword">const</span> TensorInfo&amp; filterInfo)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">if</span> (data.m_Parameters.m_BiasEnabled &amp;&amp; !biasData)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Biases enabled but no bias data provided&quot;</span>);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    }</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> TensorInfo&amp; inputInfo  = <a class="code" href="namespacearmnn_1_1ethosnref.xhtml#a0781fc227cbcb3e82fd137bc0f6638cd">armnn::ethosnref::GetTensorInfo</a>(data.m_Inputs[0]);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> TensorInfo&amp; outputInfo = <a class="code" href="namespacearmnn_1_1ethosnref.xhtml#a0781fc227cbcb3e82fd137bc0f6638cd">armnn::ethosnref::GetTensorInfo</a>(data.m_Outputs[0]);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    TensorBufferArrayView&lt;InputType&gt; output(outputInfo.GetShape(),</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                            armnn::ethosnref::GetOutputTensorData&lt;InputType&gt;(0, data),</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                                            data.m_Parameters.m_DataLayout);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml">armnnUtils::DataLayoutIndexed</a> dataLayoutIndexed(data.m_Parameters.m_DataLayout);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channelsIndex = dataLayoutIndexed.GetChannelsIndex();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> heightIndex   = dataLayoutIndexed.GetHeightIndex();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> widthIndex    = dataLayoutIndexed.GetWidthIndex();</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numBatches = inputInfo.GetShape()[0];</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth  = inputInfo.GetShape()[widthIndex];</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight = inputInfo.GetShape()[heightIndex];</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputDepth  = inputInfo.GetShape()[channelsIndex];</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> filterHeight = filterInfo.GetShape()[heightIndex];</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> filterWidth  = filterInfo.GetShape()[widthIndex];</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputHeight = outputInfo.GetShape()[heightIndex];</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputWidth  = outputInfo.GetShape()[widthIndex];</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputDepth  = outputInfo.GetShape()[channelsIndex];</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> paddingLeft = data.m_Parameters.m_PadLeft;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> paddingTop  = data.m_Parameters.m_PadTop;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> strideX = data.m_Parameters.m_StrideX;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> strideY = data.m_Parameters.m_StrideY;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    std::vector&lt;AccumulatorType&gt; outputBuffer(outputInfo.GetShape().GetNumElements(), 0);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch = 0u; batch &lt; numBatches; ++batch)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> yInput = 0u; yInput &lt; inputHeight; ++yInput)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xInput = 0u; xInput &lt; inputWidth; ++xInput)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xOutputOrigin = xInput * strideX - paddingLeft;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> yOutputOrigin = yInput * strideY - paddingTop;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dOutput = 0u; dOutput &lt; outputDepth; ++dOutput)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> yFilters = 0u; yFilters &lt; filterHeight; ++yFilters)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xFilters = 0u; xFilters &lt; filterWidth; ++xFilters)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                        {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> yOutput = yOutputOrigin + yFilters;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xOutput = xOutputOrigin + xFilters;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                            <span class="keywordflow">if</span> (yOutput &lt; outputHeight &amp;&amp; xOutput&lt; outputWidth)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                            {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dInput = 0u; dInput &lt; inputDepth; dInput++)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputIndex =</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                        dataLayoutIndexed.GetIndex(inputInfo.GetShape(), batch, dInput, yInput, xInput);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> filterIndex =</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                        dataLayoutIndexed.GetIndex(filterInfo.GetShape(), dOutput, dInput, yFilters, xFilters);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIndex = batch * outputDepth * outputHeight * outputWidth +</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                                                     dOutput * outputHeight * outputWidth +</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                                                     yOutput * outputWidth +</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                                                     xOutput;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                    outputBuffer[outputIndex] += (inputData[inputIndex] - <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">numeric_cast</a>&lt;AccumulatorType&gt;(inputOffset)) * (filterData[filterIndex] - <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">numeric_cast</a>&lt;AccumulatorType&gt;(filterOffset));</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                            }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                        }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">// Apply bias (if enabled)</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch = 0u; batch &lt; numBatches; ++batch)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dOutput = 0u; dOutput &lt; outputDepth; ++dOutput)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> yOutput = 0u; yOutput &lt; outputHeight; ++yOutput)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xOutput = 0u; xOutput &lt; outputWidth; ++xOutput)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> biaspass_outputIndex = batch * outputDepth * outputHeight * outputWidth +</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                                                              dOutput * outputHeight * outputWidth +</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                                                              yOutput * outputWidth +</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                                              xOutput;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    <span class="keywordflow">if</span> (data.m_Parameters.m_BiasEnabled)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        outputBuffer[biaspass_outputIndex] += biasData[dOutput];</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                    <span class="keywordflow">if</span> (outputScale != 0.0f)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                    {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        <span class="keywordtype">float</span> multiplier = (inputScale * filterScale) / outputScale;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                        outputBuffer[biaspass_outputIndex] = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">numeric_cast</a>&lt;AccumulatorType&gt;(EthosnRefQuantizedMultiplierSmallerThanOne(multiplier) * outputBuffer[biaspass_outputIndex])</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                              + numeric_cast&lt;AccumulatorType&gt;(outputOffset);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                        outputBuffer[biaspass_outputIndex] = std::min&lt;AccumulatorType&gt;(std::max&lt;AccumulatorType&gt;(outputBuffer[biaspass_outputIndex], std::numeric_limits&lt;InputType&gt;::min()), std::numeric_limits&lt;InputType&gt;::max());</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    output.Get(batch, dOutput, yOutput, xOutput) = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">numeric_cast</a>&lt;InputType&gt;( outputBuffer[biaspass_outputIndex] );</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;} <span class="comment">// namespace arm</span></div><div class="ttc" id="_data_layout_indexed_8hpp_xhtml"><div class="ttname"><a href="_data_layout_indexed_8hpp.xhtml">DataLayoutIndexed.hpp</a></div></div>
<div class="ttc" id="_tensor_8hpp_xhtml"><div class="ttname"><a href="_tensor_8hpp.xhtml">Tensor.hpp</a></div></div>
<div class="ttc" id="_ethosn_ref_workload_utils_8hpp_xhtml"><div class="ttname"><a href="_ethosn_ref_workload_utils_8hpp.xhtml">EthosnRefWorkloadUtils.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="ethosnref_2workloads_2_tensor_buffer_array_view_8hpp_xhtml"><div class="ttname"><a href="ethosnref_2workloads_2_tensor_buffer_array_view_8hpp.xhtml">TensorBufferArrayView.hpp</a></div></div>
<div class="ttc" id="_numeric_cast_8hpp_xhtml"><div class="ttname"><a href="_numeric_cast_8hpp.xhtml">NumericCast.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_1_1ethosnref_xhtml_a0781fc227cbcb3e82fd137bc0f6638cd"><div class="ttname"><a href="namespacearmnn_1_1ethosnref.xhtml#a0781fc227cbcb3e82fd137bc0f6638cd">armnn::ethosnref::GetTensorInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetTensorInfo(const ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_ethosn_ref_workload_utils_8hpp_source.xhtml#l00029">EthosnRefWorkloadUtils.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_utils_1_1_data_layout_indexed_xhtml"><div class="ttname"><a href="classarmnn_utils_1_1_data_layout_indexed.xhtml">armnnUtils::DataLayoutIndexed</a></div><div class="ttdoc">Provides access to the appropriate indexes for Channels, Height and Width based on DataLayout...</div><div class="ttdef"><b>Definition:</b> <a href="_data_layout_indexed_8hpp_source.xhtml#l00017">DataLayoutIndexed.hpp:17</a></div></div>
<div class="ttc" id="_ethosn_ref_conv_impl_8hpp_xhtml"><div class="ttname"><a href="_ethosn_ref_conv_impl_8hpp.xhtml">EthosnRefConvImpl.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_79be26eedbf6c8f349c9502dc5f404e0.xhtml">ethosnref</a></li><li class="navelem"><a class="el" href="dir_d57d9adbd995db1fa77d5557ed93004c.xhtml">workloads</a></li><li class="navelem"><a class="el" href="_ethosn_ref_transpose_convolution_impl_8hpp.xhtml">EthosnRefTransposeConvolutionImpl.hpp</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:30 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
