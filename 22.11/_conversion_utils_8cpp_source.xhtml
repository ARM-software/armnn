<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: shim/sl/canonical/ConversionUtils.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_conversion_utils_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ConversionUtils.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_conversion_utils_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2022 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_conversion_utils_8hpp.xhtml">ConversionUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_permute_8hpp.xhtml">armnnUtils/Permute.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">/// Helper classes</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn__driver.xhtml">armnn_driver</a></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a1c6dcb68e814a2b2d92daba0d2496f53">   16</a></span>&#160;<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a1c6dcb68e814a2b2d92daba0d2496f53">LayerInputHandle::LayerInputHandle</a>()</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    : m_OutputSlot(nullptr)</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    , m_Valid(false)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{}</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac6d9705280746a44b2e869790e9aced5">   21</a></span>&#160;<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a1c6dcb68e814a2b2d92daba0d2496f53">LayerInputHandle::LayerInputHandle</a>(<span class="keywordtype">bool</span> valid, <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a>* outputSlot, <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo)</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    : m_OutputSlot(outputSlot)</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    , m_Valid(valid)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    , m_TensorInfo(tensorInfo)</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{}</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">   27</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">LayerInputHandle::IsValid</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordflow">return</span> m_Valid;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;}</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">   32</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">LayerInputHandle::Connect</a>(<a class="code" href="classarmnn_1_1_i_input_slot.xhtml">armnn::IInputSlot</a>&amp; inputSlot)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>());</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">if</span> (m_OutputSlot)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        m_OutputSlot-&gt;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(inputSlot);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    }</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_layer_input_handle.xhtml#abb3c829e926870907875474614fb0485">   41</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#abb3c829e926870907875474614fb0485">LayerInputHandle::Disconnect</a>(<a class="code" href="classarmnn_1_1_i_input_slot.xhtml">armnn::IInputSlot</a>&amp; inputSlot)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>());</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">if</span> (m_OutputSlot)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        m_OutputSlot-&gt;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ae16a4d0c56ca96e5d61785bd3e3e7992">Disconnect</a>(inputSlot);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">   50</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">LayerInputHandle::GetTensorInfo</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> m_TensorInfo;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a594af6896fa4bf3de9ee961fa8e2aade">   55</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a594af6896fa4bf3de9ee961fa8e2aade">LayerInputHandle::SanitizeQuantizationScale</a>(<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>&amp; weight, <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>&amp; input)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">if</span> (m_OutputSlot)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> weightInfo = weight.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputInfo = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> biasInfo = <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        SanitizeBiasQuantizationScale(biasInfo, weightInfo, inputInfo);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        m_TensorInfo = biasInfo;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        m_OutputSlot-&gt;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(biasInfo);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a7a886c1735beae3f31f2062e1b327ac4">   70</a></span>&#160;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a>* <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a7a886c1735beae3f31f2062e1b327ac4">LayerInputHandle::GetOutputSlot</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> m_OutputSlot;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a1a58af8dd8a4f17f11e50f18a4a96438">   75</a></span>&#160;<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a1a58af8dd8a4f17f11e50f18a4a96438">ConstTensorPin::ConstTensorPin</a>(<span class="keywordtype">bool</span> optional)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    : m_Optional(optional)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{}</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#afa8470e5c5e9392d59ce93f80252c1fb">   79</a></span>&#160;<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a1a58af8dd8a4f17f11e50f18a4a96438">ConstTensorPin::ConstTensorPin</a>(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; tensorInfo,</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                               <span class="keyword">const</span> <span class="keywordtype">void</span>* valueStart,</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                               uint32_t numBytes,</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a>&amp; mappings)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    : m_Optional(false)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(numBytes);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">if</span> (tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>() != numBytes)</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;The size of ConstTensor does not match its TensorInfo.&quot;</span>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> needsSwizzling = (mappings.<a class="code" href="classarmnn_1_1_permutation_vector.xhtml#a490ec6b59006d1fe1ec2ea30e69fb97c">GetSize</a>() &gt; 0);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">if</span> (needsSwizzling)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        m_SwizzledTensorData.resize(tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a5665b88a0b22c6341dd8075048981689">SwizzleAndroidNn4dTensorToArmNn</a>(tensorInfo, valueStart, m_SwizzledTensorData.data(), mappings);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        m_ConstTensor = <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(tensorInfo, m_SwizzledTensorData.data());</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        m_ConstTensor = <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(tensorInfo, valueStart);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">  105</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">ConstTensorPin::IsValid</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">return</span> m_ConstTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">GetMemoryArea</a>() != <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">  110</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">ConstTensorPin::IsOptional</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">return</span> m_Optional;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a971023b9874b0d773e8aa4c6d6744a2b">  115</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>&amp; <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a971023b9874b0d773e8aa4c6d6744a2b">ConstTensorPin::GetConstTensor</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> m_ConstTensor;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">  120</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>* <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">ConstTensorPin::GetConstTensorPtr</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; m_ConstTensor.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>() &gt; 0)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">return</span> &amp;m_ConstTensor;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">// tensor is either invalid, or has no elements (indicating an optional tensor that was not provided)</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">/// Utility functions</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#a56e87ad879b142327b822beff44ca171">  134</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn__driver.xhtml#a56e87ad879b142327b822beff44ca171">IsWeightsValid</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    uint32_t inputIndex,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;{</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* operand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, inputIndex, model);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">if</span> (!operand)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        Fail(<span class="stringliteral">&quot;%s: failed to get input operand %i&quot;</span>, __func__, inputIndex);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">if</span> (operand-&gt;lifetime    != OperandLifeTime::CONSTANT_COPY</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        &amp;&amp; operand-&gt;lifetime != OperandLifeTime::CONSTANT_REFERENCE</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        &amp;&amp; operand-&gt;lifetime != OperandLifeTime::NO_VALUE)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#a82e85436d5f7cbfa90e8ab521bddae31">  154</a></span>&#160;<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> <a class="code" href="namespacearmnn__driver.xhtml#a82e85436d5f7cbfa90e8ab521bddae31">ConvertOperandToConstTensorPin</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>&amp; operand,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a>&amp; dimensionMappings,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>* overrideTensorShape,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                              <span class="keywordtype">bool</span> optional,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a>* overrideDataType)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">if</span> (!IsOperandTypeSupportedForTensors(operand.type))</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        VLOG(DRIVER) &lt;&lt; __func__ &lt;&lt; <span class="stringliteral">&quot;: unsupported operand type for tensor&quot;</span> &lt;&lt; operand.type;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a1a58af8dd8a4f17f11e50f18a4a96438">ConstTensorPin</a>();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">if</span> (!optional &amp;&amp; !<a class="code" href="namespacearmnn__driver.xhtml#a9ddfceb499ef7b3d01053399bc79b852">IsOperandConstant</a>(operand))</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        VLOG(DRIVER) &lt;&lt; __func__ &lt;&lt; <span class="stringliteral">&quot;: lifetime for input tensor: r&quot;</span> &lt;&lt; operand.lifetime;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a1a58af8dd8a4f17f11e50f18a4a96438">ConstTensorPin</a>();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span>* <span class="keyword">const</span> valueStart = <a class="code" href="namespacearmnn__driver.xhtml#a8d20245b5ca3cbb0b132064ab44f2682">GetOperandValueReadOnlyAddress</a>(operand, model, data, optional);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordflow">if</span> (!valueStart)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">if</span> (optional)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="comment">// optional tensor with no values is not really an error; return it as invalid, but marked as optional</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a1a58af8dd8a4f17f11e50f18a4a96438">ConstTensorPin</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="comment">// mandatory tensor with no values</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        Fail(<span class="stringliteral">&quot;%s: failed to get operand address&quot;</span>, __func__);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a1a58af8dd8a4f17f11e50f18a4a96438">ConstTensorPin</a>();</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(operand);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">if</span> (overrideTensorShape)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(*overrideTensorShape);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">if</span> (overrideDataType)</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">SetDataType</a>(*overrideDataType);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">// Make sure isConstant flag is set.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">SetConstant</a>();</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a1a58af8dd8a4f17f11e50f18a4a96438">ConstTensorPin</a>(tensorInfo, valueStart, operand.location.length, dimensionMappings);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">  204</a></span>&#160;<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                           uint32_t inputIndex,</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                           <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a>&amp; dimensionMappings,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>* inputHandle)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;{</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* operand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, inputIndex, model);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">if</span> (!operand)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        Fail(<span class="stringliteral">&quot;%s: failed to get input operand %i&quot;</span>, __func__, inputIndex);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>();</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">if</span> (!IsOperandTypeSupportedForTensors(operand-&gt;type))</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        VLOG(DRIVER) &lt;&lt; __func__ &lt;&lt; <span class="stringliteral">&quot;: unsupported operand type for tensor: &quot;</span> &lt;&lt; operand-&gt;type;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>();</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> operandTensorInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*operand);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(operandTensorInfo))</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a094e06eb84b3b80533c0f961f0f472de">m_DynamicInputsEncountered</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="keyword">const</span> uint32_t operandIndex = operation.inputs[inputIndex];</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            <span class="comment">// Check if the dynamic input tensors have been inferred by one of the previous layers</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="comment">// If not we can&#39;t support them</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            <span class="keywordflow">if</span> (data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a4df0c61eb897ecc9271a4a85604066ea">m_OutputSlotForOperand</a>.size() &gt;= operandIndex &amp;&amp; data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a4df0c61eb897ecc9271a4a85604066ea">m_OutputSlotForOperand</a>[operandIndex])</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                operandTensorInfo = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a4df0c61eb897ecc9271a4a85604066ea">m_OutputSlotForOperand</a>[operandIndex]-&gt;GetTensorInfo();</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                Fail(<span class="stringliteral">&quot;%s: Type 2 dynamic input tensors are not supported&quot;</span>, __func__);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>();</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        }</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">switch</span> (operand-&gt;lifetime)</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <span class="keywordflow">case</span> OperandLifeTime::SUBGRAPH_INPUT:</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            {</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                <span class="comment">// NOTE: We must check whether we can support the input tensor on at least one</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                <span class="comment">// of the provided backends; otherwise we cannot convert the operation</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                <span class="keywordtype">bool</span> isInputSupported = <span class="keyword">false</span>;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                <a class="code" href="_conversion_utils_8hpp.xhtml#a6f98cfbf3171f950d1f0df30d60691a7">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#a3512b2f24950886288c5d01df1488f15">IsInputSupported</a>,</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                           data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                                           isInputSupported,</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                                           operandTensorInfo);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                <span class="keywordflow">if</span> (!isInputSupported)</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                    Fail(<span class="stringliteral">&quot;%s: unsupported input tensor&quot;</span>, __func__);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>();</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                [[clang::fallthrough]]; <span class="comment">// intentional fallthrough</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            }</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="keywordflow">case</span> OperandLifeTime::TEMPORARY_VARIABLE: <span class="comment">// intentional fallthrough</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            <span class="keywordflow">case</span> OperandLifeTime::SUBGRAPH_OUTPUT:</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                <span class="comment">// The tensor is either an operand internal to the model, or a model input.</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                <span class="comment">// It can be associated with an ArmNN output slot for an existing layer.</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                <span class="comment">// m_OutputSlotForOperand[...] can be nullptr if the previous layer could not be converted</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                <span class="keyword">const</span> uint32_t operandIndex = operation.inputs[inputIndex];</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>(<span class="keyword">true</span>, data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a4df0c61eb897ecc9271a4a85604066ea">m_OutputSlotForOperand</a>[operandIndex], operandTensorInfo);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            <span class="keywordflow">case</span> OperandLifeTime::CONSTANT_COPY: <span class="comment">// intentional fallthrough</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="keywordflow">case</span> OperandLifeTime::POINTER:</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            <span class="keywordflow">case</span> OperandLifeTime::CONSTANT_REFERENCE:</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            {</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                <span class="keyword">auto</span> constantTensorDataType = operandTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>();</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                <span class="comment">// The tensor has an already known constant value, and can be converted into an ArmNN Constant layer.</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> tensorPin = <a class="code" href="namespacearmnn__driver.xhtml#a82e85436d5f7cbfa90e8ab521bddae31">ConvertOperandToConstTensorPin</a>(*operand,</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                                                                          model,</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                                                                          data,</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                                                          dimensionMappings,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                                                          <span class="keyword">nullptr</span>,</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                                                          <span class="keyword">false</span>,</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                                                          &amp;constantTensorDataType);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                <span class="keywordflow">if</span> (tensorPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                    <a class="code" href="_conversion_utils_8hpp.xhtml#a6f98cfbf3171f950d1f0df30d60691a7">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                               <a class="code" href="namespacearmnn.xhtml#a0d2ad1212c8773f36160ef6e5e7db61f">IsConstantSupported</a>,</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                               data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                               isSupported,</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                               tensorPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a971023b9874b0d773e8aa4c6d6744a2b">GetConstTensor</a>().<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                    <span class="keywordflow">if</span> (!isSupported)</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                        <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>();</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* constantLayer =</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                        data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddConstantLayer(tensorPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a971023b9874b0d773e8aa4c6d6744a2b">GetConstTensor</a>());</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                    <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a>&amp; outputSlot = constantLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> constantTensorInfo = tensorPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a971023b9874b0d773e8aa4c6d6744a2b">GetConstTensor</a>().<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>();</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                    outputSlot.<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(constantTensorInfo);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>(<span class="keyword">true</span>, &amp;outputSlot, constantTensorInfo);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                }</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                {</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                    Fail(<span class="stringliteral">&quot;%s: invalid operand tensor&quot;</span>, __func__);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                    <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>();</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            {</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                VLOG(DRIVER) &lt;&lt; __func__ &lt;&lt; <span class="stringliteral">&quot;: unsupported lifetime for input tensor: &quot;</span> &lt;&lt; operand-&gt;lifetime;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>();</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            }</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        }</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">catch</span> (<a class="code" href="classarmnn__driver_1_1_unsupported_operand.xhtml">UnsupportedOperand&lt;OperandType&gt;</a>&amp; e)</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    {</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        VLOG(DRIVER) &lt;&lt; __func__ &lt;&lt; <span class="stringliteral">&quot;: Operand type: &quot;</span> &lt;&lt; e.<a class="code" href="classarmnn__driver_1_1_unsupported_operand.xhtml#adbccd9c087443cf759711a3e62da9a84">m_type</a> &lt;&lt; <span class="stringliteral">&quot; not supported in ArmnnDriver&quot;</span>;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>();</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    }</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;}</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#a8d4f662a4fb5b9272724bdaeacbd370a">  334</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn__driver.xhtml#a8d4f662a4fb5b9272724bdaeacbd370a">ConvertPaddings</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                     <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                     <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data,</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rank,</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                     <a class="code" href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a>&amp; padDescriptor)</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;{</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* paddingsOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 1, model);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">if</span> (!paddingsOperand)</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    {</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read paddings operand&quot;</span>, __func__);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    }</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> paddingsOperandShape = GetTensorShapeForOperand(*paddingsOperand);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordflow">if</span> (paddingsOperandShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() != 2 || paddingsOperandShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>() != rank * 2)</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    {</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid paddings operand: expected shape [%d, 2]&quot;</span>,  __func__, rank);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    }</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    std::vector&lt;int32_t&gt; paddings;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#ac8643aaee3eafc54336c5462b51bd53f">GetTensorInt32Values</a>(*paddingsOperand, paddings, model, data))</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    {</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid or unsupported paddings operand&quot;</span>, __func__);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    }</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="comment">// add padding for each dimension of input tensor.</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; paddings.size() - 1; i += 2)</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordtype">int</span> paddingBeforeInput = paddings[i];</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordtype">int</span> paddingAfterInput  = paddings[i + 1];</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">if</span> (paddingBeforeInput &lt; 0 || paddingAfterInput &lt; 0)</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        {</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid paddings operand, invalid padding values.&quot;</span>,  __func__);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        }</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        padDescriptor.<a class="code" href="structarmnn_1_1_pad_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">m_PadList</a>.emplace_back((<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>) paddingBeforeInput, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>) paddingAfterInput);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    }</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#a2eb75cb48464cf87c290503d7bea79a4">  376</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn__driver.xhtml#a2eb75cb48464cf87c290503d7bea79a4">ConvertPooling2d</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                      <span class="keyword">const</span> <span class="keywordtype">char</span>* operationName,</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                      <a class="code" href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718">armnn::PoolingAlgorithm</a> poolType,</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                      <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                      <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;{</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertL2Pool2d()&quot;</span>;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    {</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation Could not read input 0&quot;</span>, operationName);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    }</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keywordflow">if</span> (!output)</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    {</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    }</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo  = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a> desc;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a0031997bf43bd2747656c31e4977793a">m_PoolType</a> = poolType;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#affb5b68b3eba3ed45a06c7cde7781962">m_OutputShapeRounding</a> = <a class="code" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::OutputShapeRounding::Floor</a>;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    ActivationFn activation;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keyword">auto</span> inputSize = operation.inputs.size();</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordflow">if</span> (inputSize &gt;= 10)</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    {</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="comment">// one input, 9 parameters (padding l r t b, stridex, stridey, width, height, activation type)</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>, model, data) ||</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 2, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>, model, data) ||</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 3, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>, model, data) ||</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 4, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>, model, data) ||</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 5, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>, model, data) ||</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 6, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>, model, data) ||</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 7, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">m_PoolWidth</a>, model, data) ||</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 8, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">m_PoolHeight</a>, model, data) ||</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#ac092fff5c81f7938eea9a2479f014c66">GetInputActivationFunction</a>(operation, 9, activation, model, data))</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        {</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, operationName);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        }</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        <span class="keywordflow">if</span> (Is12OrLaterOperand(*output))</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        {</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(operation, 10, model, data);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        }</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    }</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    {</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        <span class="comment">// one input, 6 parameters (padding, stridex, stridey, width, height, activation type)</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        ::android::nn::PaddingScheme scheme;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#aa9ef723ace8562b9636e8387a120fbde">GetInputPaddingScheme</a>(operation, 1, scheme, model, data) ||</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 2, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>, model, data) ||</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 3, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>, model, data) ||</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 4, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">m_PoolWidth</a>, model, data) ||</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 5, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">m_PoolHeight</a>, model, data) ||</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#ac092fff5c81f7938eea9a2479f014c66">GetInputActivationFunction</a>(operation, 6, activation, model, data))</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        {</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, operationName);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        }</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <span class="keywordflow">if</span> (Is12OrLaterOperand(*output))</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        {</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(operation, 7, model, data);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        }</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml">armnnUtils::DataLayoutIndexed</a> dataLayout(desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth  = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[dataLayout.<a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a414e6f95548e6f7a01d5028b55ad3941">GetWidthIndex</a>()];</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[dataLayout.<a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a61c00316c443adc233c24e85c6c5b740">GetHeightIndex</a>()];</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        CalcPadding(inputWidth, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">m_PoolWidth</a>, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>, scheme);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        CalcPadding(inputHeight, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">m_PoolHeight</a>, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>, desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>, scheme);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    }</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    {</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a6f98cfbf3171f950d1f0df30d60691a7">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#af4f2d40a67380e91bd7ed0c1bcc4658f">IsPooling2dSupported</a>,</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                                   isSupported,</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                                   inputInfo,</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                                   outputInfo,</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                                   desc);</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    };</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    {</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    }</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    {</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        validateFunc(outputInfo, isSupported);</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    }</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    {</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    }</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* pooling2dLayer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddPooling2dLayer(desc);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordflow">if</span> (!pooling2dLayer)</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    {</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: AddPooling2dLayer failed&quot;</span>, __func__);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    }</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(pooling2dLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    {</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    }</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *pooling2dLayer, model,</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                                        data, <span class="keyword">nullptr</span>, validateFunc, activation);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;}</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#a3f6b313fd199d1552844f3f95fd25cd2">  502</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn__driver.xhtml#a3f6b313fd199d1552844f3f95fd25cd2">ConvertReduce</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                   <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                   <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data,</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                   <a class="code" href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0">armnn::ReduceOperation</a> reduceOperation)</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;{</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml">armnn::ReduceDescriptor</a> descriptor;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml#aa57c67b1da0011b1abb30170146e870f">m_ReduceOperation</a> = reduceOperation;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    {</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    }</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keywordflow">if</span> (!output)</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    {</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    }</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* axisOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 1, model);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keywordflow">if</span> (!axisOperand)</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    {</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 1&quot;</span>, __func__);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    }</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    std::vector&lt;int32_t&gt; axis;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#ac8643aaee3eafc54336c5462b51bd53f">GetTensorInt32Values</a>(*axisOperand, axis, model, data))</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    {</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Input 1 has invalid values&quot;</span>, __func__);</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    }</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="comment">// Convert the axis to unsigned int and remove duplicates.</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rank = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    std::set&lt;unsigned int&gt; uniqueAxis;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    std::transform(axis.begin(), axis.end(),</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                   std::inserter(uniqueAxis, uniqueAxis.begin()),</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                   [rank](<span class="keywordtype">int</span> i) -&gt; <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> { <span class="keywordflow">return</span> (i + rank) % rank; });</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml#aa1c6fc8c96404252f1072632fc5acb59">m_vAxis</a>.assign(uniqueAxis.begin(), uniqueAxis.end());</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="comment">// Get the &quot;keep dims&quot; flag.</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 2, OperandType::BOOL, descriptor.<a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml#a28e0548abfc4e79c48f29a3d11a062e9">m_KeepDims</a>, model, data))</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    {</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 2&quot;</span>, __func__);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    }</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    {</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a6f98cfbf3171f950d1f0df30d60691a7">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#aefa2e47c23dc8faac4b7edb12b5d1c2c">IsReduceSupported</a>,</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                                   isSupported,</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                                   inputInfo,</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                                   outputInfo,</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                                   descriptor);</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    };</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    {</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        validateFunc(outputInfo, isSupported);</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    }</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    {</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    }</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    {</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    }</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddReduceLayer(descriptor);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;}</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;</div><div class="line"><a name="l00583"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#a28243ca97e12ccb50e01f03d313ecc86">  583</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn__driver.xhtml#a28243ca97e12ccb50e01f03d313ecc86">ConvertToActivation</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                         <span class="keyword">const</span> <span class="keywordtype">char</span>* operationName,</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a>&amp; activationDesc,</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                         <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                         <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;{</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    {</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Input 0 is invalid&quot;</span>, operationName);</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    }</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* outputOperand = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keywordflow">if</span> (!outputOperand)</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    {</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    }</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*outputOperand);</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    {</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a6f98cfbf3171f950d1f0df30d60691a7">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a6e7dc8639c4b2f0a93031afff5182735">IsActivationSupported</a>,</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                                   isSupported,</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                                   input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                                   outInfo,</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                                   activationDesc);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    };</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outInfo))</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    {</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    }</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    {</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        validateFunc(outInfo, isSupported);</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    }</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    {</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    }</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddActivationLayer(activationDesc);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;}</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00637"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#a78a9a9f196810df6bc4795568f275c75">  637</a></span>&#160;<a class="code" href="namespacearmnn__driver.xhtml#a8932639a884a3dc698f29d4e8395ba49">DequantizeResult</a> <a class="code" href="namespacearmnn__driver.xhtml#a78a9a9f196810df6bc4795568f275c75">DequantizeIfRequired</a>(<span class="keywordtype">size_t</span> operand_index,</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;{</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* weightsOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, operand_index, model);</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <span class="keywordflow">if</span> (!weightsOperand)</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    {</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        <span class="keywordflow">return</span> { <span class="keyword">nullptr</span>, 0, <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(), <a class="code" href="namespacearmnn__driver.xhtml#a10c64daf22426af432d0a9ada03eee5ca6bf179afa8f7fba18cf39bc0ca6fe043">DequantizeStatus::INVALID_OPERAND</a> };</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    }</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn__driver.xhtml#a9ddfceb499ef7b3d01053399bc79b852">IsOperandConstant</a>(*weightsOperand))</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    {</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        <span class="comment">// Weights are already constant</span></div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        <span class="keywordflow">return</span> { <span class="keyword">nullptr</span>, 0, <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(), <a class="code" href="namespacearmnn__driver.xhtml#a10c64daf22426af432d0a9ada03eee5caaf655f85da1fc9b6a348b9893ee6aef7">DequantizeStatus::NOT_REQUIRED</a> };</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    }</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> weightsInputIndex = operation.inputs[operand_index];</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <span class="comment">// The weights are a non const tensor, this indicates they might be the output of a dequantize op.</span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="comment">// Iterate over the nodes and find the previous operation which should be DEQUANTIZE</span></div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="keywordflow">for</span> (uint32_t operationIdx = 0; operationIdx &lt; <a class="code" href="_conversion_utils_8hpp.xhtml#abcb5019b10b89cbd2b96118885a026d4">getMainModel</a>(model).operations.size(); ++operationIdx)</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    {</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        <span class="comment">// Search for the DEQUANTIZE op which has the operand with index equal to operandIndex</span></div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>&amp; operationIt = <a class="code" href="_conversion_utils_8hpp.xhtml#abcb5019b10b89cbd2b96118885a026d4">getMainModel</a>(model).operations[operationIdx];</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        <span class="keywordflow">if</span> (operationIt.type != OperationType::DEQUANTIZE)</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        {</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        }</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        <span class="keywordtype">size_t</span> outOpIndex = weightsInputIndex + 1;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; outOpIndex != weightsInputIndex &amp;&amp; i &lt; operationIt.outputs.size(); ++i)</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        {</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;            outOpIndex = operationIt.outputs[i];</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        }</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        <span class="keywordflow">if</span> (outOpIndex != weightsInputIndex)</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        {</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        }</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* operand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operationIt, 0, model);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(operand);</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#a267f6b68937e2126b6ca890a6b11ea9c">IsQSymm8</a>(*operand))</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        {</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;            <span class="comment">// Only supporting dequantize from QSYMM8 to FLOAT</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        }</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        <span class="comment">// Allocate a new buffer for the dequantized data and manually dequantize</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">void</span>* startValue = <a class="code" href="namespacearmnn__driver.xhtml#a8d20245b5ca3cbb0b132064ab44f2682">GetOperandValueReadOnlyAddress</a>(*operand, model, data);</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        <span class="keywordflow">if</span> (!startValue)</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        {</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            <span class="comment">// Failed to get the operand address</span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        }</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        <span class="keyword">const</span> uint8_t* quantizedBuffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t*<span class="keyword">&gt;</span>(startValue);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        <span class="keywordtype">size_t</span> dequantizedBufferLength = operand-&gt;location.length;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> quantizationScale  = operand-&gt;scale;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        <span class="keyword">auto</span> dequantizedBuffer = std::make_unique&lt;float[]&gt;(dequantizedBufferLength + 1);</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; dequantizedBufferLength; ++i)</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        {</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;            <span class="keywordtype">float</span>* dstPtr = dequantizedBuffer.get();</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(dstPtr);</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;            *dstPtr++ = quantizedBuffer[i] * quantizationScale;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        }</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        <span class="comment">// Construct tensor info for dequantized ConstTensor</span></div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo(operand-&gt;dimensions.size(),</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                                     operand-&gt;dimensions.data(),</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                                     <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        <span class="keywordflow">return</span> { std::move(dequantizedBuffer), dequantizedBufferLength * <span class="keyword">sizeof</span>(float),</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                 std::move(tensorInfo),</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                 <a class="code" href="namespacearmnn__driver.xhtml#a10c64daf22426af432d0a9ada03eee5cad0749aaba8b833466dfcbb0428e4f89c">DequantizeStatus::SUCCESS</a> };</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    }</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="keywordflow">return</span> { <span class="keyword">nullptr</span>, 0, <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>() , <a class="code" href="namespacearmnn__driver.xhtml#a10c64daf22426af432d0a9ada03eee5caaf655f85da1fc9b6a348b9893ee6aef7">DequantizeStatus::NOT_REQUIRED</a>};</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;}</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;</div><div class="line"><a name="l00720"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">  720</a></span>&#160;<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> <a class="code" href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">DequantizeAndMakeConstTensorPin</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data,</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                                               <span class="keywordtype">size_t</span> operandIndex,</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                                               <span class="keywordtype">bool</span> optional)</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;{</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a8932639a884a3dc698f29d4e8395ba49">DequantizeResult</a> dequantized = <a class="code" href="namespacearmnn__driver.xhtml#a78a9a9f196810df6bc4795568f275c75">DequantizeIfRequired</a>(operandIndex,operation, model, data);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a10c64daf22426af432d0a9ada03eee5c">DequantizeStatus</a> status = std::get&lt;3&gt;(dequantized);</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <span class="keywordflow">switch</span> (status)</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    {</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn__driver.xhtml#a10c64daf22426af432d0a9ada03eee5ca6bf179afa8f7fba18cf39bc0ca6fe043">DequantizeStatus::INVALID_OPERAND</a>:</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        {</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            <span class="comment">// return invalid const tensor pin</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a1a58af8dd8a4f17f11e50f18a4a96438">ConstTensorPin</a>();</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        }</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn__driver.xhtml#a10c64daf22426af432d0a9ada03eee5caaf655f85da1fc9b6a348b9893ee6aef7">DequantizeStatus::NOT_REQUIRED</a>:</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        {</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                operation, operandIndex, model, data, <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>, <span class="keyword">nullptr</span>, optional);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        }</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn__driver.xhtml#a10c64daf22426af432d0a9ada03eee5cad0749aaba8b833466dfcbb0428e4f89c">DequantizeStatus::SUCCESS</a>:</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        {</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a1a58af8dd8a4f17f11e50f18a4a96438">ConstTensorPin</a>(</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                std::get&lt;2&gt;(dequantized), std::get&lt;0&gt;(dequantized).<span class="keyword">get</span>(), std::get&lt;1&gt;(dequantized), <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>);</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        }</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    }</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;}</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;</div><div class="line"><a name="l00750"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#aa9ef723ace8562b9636e8387a120fbde">  750</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9ef723ace8562b9636e8387a120fbde">GetInputPaddingScheme</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                           uint32_t inputIndex,</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                           PaddingScheme&amp; outPaddingScheme,</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                           <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                           <span class="keyword">const</span> <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;{</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    int32_t paddingSchemeAsInt;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#aa43f9c81f830559c15e5af86f8e11482">GetInputInt32</a>(operation, inputIndex, paddingSchemeAsInt, model, data))</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    {</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: failed to get padding scheme input value&quot;</span>, __func__);</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    }</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    outPaddingScheme = <span class="keyword">static_cast&lt;</span>::android::nn::PaddingScheme<span class="keyword">&gt;</span>(paddingSchemeAsInt);</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;}</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div><div class="line"><a name="l00766"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#a8d20245b5ca3cbb0b132064ab44f2682">  766</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">void</span>* <a class="code" href="namespacearmnn__driver.xhtml#a8d20245b5ca3cbb0b132064ab44f2682">GetOperandValueReadOnlyAddress</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>&amp; operand,</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data,</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                                           <span class="keywordtype">bool</span> optional)</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;{</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span>* valueStart = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    <span class="keywordflow">switch</span> (operand.lifetime)</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    {</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        <span class="keywordflow">case</span> OperandLifeTime::CONSTANT_COPY:</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        {</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;            valueStart = model.operandValues.data() + operand.location.offset;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        }</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        <span class="keywordflow">case</span> OperandLifeTime::POINTER:</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        {</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;            <span class="comment">// Pointer specified in the model</span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;            valueStart = std::get&lt;const void*&gt;(operand.location.pointer);</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        }</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        <span class="keywordflow">case</span> OperandLifeTime::CONSTANT_REFERENCE:</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        {</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;            <span class="comment">// Constant specified via a Memory object</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;            valueStart = <a class="code" href="namespacearmnn__driver.xhtml#a96666c2945d7fe8c34aee30a449287d5">GetMemoryFromPool</a>(operand.location, data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#acb740de896710dbc576f5eaf7a9cfeaa">m_MemPools</a>);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        }</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        <span class="keywordflow">case</span> OperandLifeTime::NO_VALUE:</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        {</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;            <span class="comment">// An optional input tensor with no values is not an error so should not register as a fail</span></div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;            <span class="keywordflow">if</span> (optional)</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;            {</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                valueStart = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;            }</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;            [[fallthrough]];</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        }</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;        {</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            VLOG(DRIVER) &lt;&lt; __func__ &lt;&lt; <span class="stringliteral">&quot;: unsupported/invalid operand lifetime:: &quot;</span> &lt;&lt; operand.lifetime;</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;            valueStart = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        }</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    }</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    <span class="keywordflow">return</span> valueStart;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;}</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;</div><div class="line"><a name="l00811"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#ac8643aaee3eafc54336c5462b51bd53f">  811</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn__driver.xhtml#ac8643aaee3eafc54336c5462b51bd53f">GetTensorInt32Values</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>&amp; operand,</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                                 std::vector&lt;int32_t&gt;&amp; outValues,</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;{</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    <span class="keywordflow">if</span> (operand.type != OperandType::TENSOR_INT32)</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    {</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        VLOG(DRIVER) &lt;&lt; __func__ &lt;&lt; <span class="stringliteral">&quot;: invalid operand type: &quot;</span> &lt;&lt; operand.type;</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    }</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span>* startAddress = <a class="code" href="namespacearmnn__driver.xhtml#a8d20245b5ca3cbb0b132064ab44f2682">GetOperandValueReadOnlyAddress</a>(operand, model, data);</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    <span class="keywordflow">if</span> (!startAddress)</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    {</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        VLOG(DRIVER) &lt;&lt; __func__ &lt;&lt; <span class="stringliteral">&quot;: failed to get operand address &quot;</span> &lt;&lt; operand.type;</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    }</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <span class="comment">// Check number of bytes is sensible</span></div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <span class="keyword">const</span> uint32_t numBytes = operand.location.length;</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    <span class="keywordflow">if</span> (numBytes % <span class="keyword">sizeof</span>(int32_t) != 0)</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    {</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: invalid number of bytes: %i, expected to be a multiple of %i&quot;</span>,</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                    __func__, numBytes, <span class="keyword">sizeof</span>(int32_t));</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    }</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    outValues.resize(numBytes / <span class="keyword">sizeof</span>(int32_t));</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    memcpy(outValues.data(), startAddress, numBytes);</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;}</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;</div><div class="line"><a name="l00842"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">  842</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a> <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                                     uint32_t inputIndex,</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;                                     <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;{</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* operand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, inputIndex, model);</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    <span class="keywordflow">if</span> (!operand)</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    {</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    }</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <span class="keywordflow">if</span> (!IsBool(*operand))</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    {</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>;</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    }</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span>* valueAddress = <a class="code" href="namespacearmnn__driver.xhtml#a8d20245b5ca3cbb0b132064ab44f2682">GetOperandValueReadOnlyAddress</a>(*operand, model, data);</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <span class="keywordflow">if</span> (!valueAddress)</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    {</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    }</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    <span class="keywordflow">if</span> (*(static_cast&lt;const bool*&gt;(valueAddress)))</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    {</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>;</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    }</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    {</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>;</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    }</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;}</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;</div><div class="line"><a name="l00874"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#aac972ee73e8bd2374bc40ab844a7d894">  874</a></span>&#160;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <a class="code" href="namespacearmnn__driver.xhtml#aac972ee73e8bd2374bc40ab844a7d894">ProcessActivation</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; tensorInfo,</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                                            ActivationFn activation,</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                                            <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* prevLayer,</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                                            <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;{</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(prevLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">GetNumOutputSlots</a>() == 1);</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    prevLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(tensorInfo);</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* activationLayer = prevLayer;</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    <span class="keywordflow">if</span> (activation != ActivationFn::kActivationNone)</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    {</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;        <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a> activationDesc;</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;        <span class="keywordflow">switch</span> (activation)</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;        {</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;            <span class="keywordflow">case</span> ActivationFn::kActivationRelu:</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;            {</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;                activationDesc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559">armnn::ActivationFunction::ReLu</a>;</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;            }</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;            <span class="keywordflow">case</span> ActivationFn::kActivationRelu1:</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;            {</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;                activationDesc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a>;</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;                activationDesc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a> = 1.0f;</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;                activationDesc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">m_B</a> = -1.0f;</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;            }</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;            <span class="keywordflow">case</span> ActivationFn::kActivationRelu6:</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;            {</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;                activationDesc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a>;</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;                activationDesc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a> = 6.0f;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;            }</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;            <span class="keywordflow">case</span> ActivationFn::kActivationSigmoid:</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;            {</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;                activationDesc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">armnn::ActivationFunction::Sigmoid</a>;</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;            }</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;            <span class="keywordflow">case</span> ActivationFn::kActivationTanh:</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;            {</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;                activationDesc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e">armnn::ActivationFunction::TanH</a>;</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;                activationDesc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a> = 1.0f;</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;                activationDesc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">m_B</a> = 1.0f;</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;            }</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;            {</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;                Fail(<span class="stringliteral">&quot;%s: Invalid activation enum value %i&quot;</span>, __func__, activation);</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;            }</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;        }</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;        <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a6f98cfbf3171f950d1f0df30d60691a7">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a6e7dc8639c4b2f0a93031afff5182735">IsActivationSupported</a>,</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;                                   isSupported,</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;                                   prevLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>(),</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;                                   tensorInfo,</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                                   activationDesc);</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;        <span class="keywordflow">if</span> (!isSupported)</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;        {</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;        }</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;        activationLayer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddActivationLayer(activationDesc);</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;        prevLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(activationLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;        activationLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(tensorInfo);</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    }</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    <span class="keywordflow">return</span> activationLayer;</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;}</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;</div><div class="line"><a name="l00949"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">  949</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;                                  uint32_t operationOutputIndex,</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                                  <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>&amp; layer,</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                                  uint32_t layerOutputIndex,</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                                  <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data,</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>* overrideOutputInfo,</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                                  <span class="keyword">const</span> std::function &lt;<span class="keywordtype">void</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp;, <span class="keywordtype">bool</span>&amp;)&gt;&amp; validateFunc,</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                                  <span class="keyword">const</span> ActivationFn&amp; activationFunction,</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                                  <span class="keywordtype">bool</span> inferOutputShapes)</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;{</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* outputOperand = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, operationOutputIndex, model);</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    <span class="keywordflow">if</span> ((outputOperand == <span class="keyword">nullptr</span>) || (operationOutputIndex &gt;= layer.<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">GetNumOutputSlots</a>()))</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    {</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;    }</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a>&amp; outputSlot = layer.<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(layerOutputIndex);</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    <span class="keywordflow">if</span> (overrideOutputInfo == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    {</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        outputSlot.<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(<a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*outputOperand));</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    }</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    {</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;        outputSlot.<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(*overrideOutputInfo);</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    }</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    <span class="keywordflow">if</span> (validateFunc &amp;&amp; (<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputSlot.<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>()) || inferOutputShapes))</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    {</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;        <span class="comment">// Type one dynamic tensors require the previous layer&#39;s output shape for inference</span></div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSlotIndex = 0; inputSlotIndex &lt; layer.<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">GetNumInputSlots</a>(); ++inputSlotIndex)</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;        {</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;            <span class="keywordflow">if</span>(!layer.<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(inputSlotIndex).<a class="code" href="classarmnn_1_1_i_input_slot.xhtml#a81fbf6103761e55061b62ba989b00f10">GetConnection</a>())</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;            {</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;            }</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;        }</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;        <span class="comment">// IsTensorInfoSet will infer the dynamic output shape</span></div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;        outputSlot.<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ab4e57caf059794897b17266090ebcb39">IsTensorInfoSet</a>();</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;        <span class="comment">// Once the shape is inferred we can validate it</span></div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;        validateFunc(outputSlot.<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>(), isSupported);</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;        <span class="keywordflow">if</span>(!isSupported)</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;        {</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSlotIndex = 0; inputSlotIndex &lt; layer.<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">GetNumInputSlots</a>(); ++inputSlotIndex)</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;            {</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;                layer.<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(inputSlotIndex).<a class="code" href="classarmnn_1_1_i_input_slot.xhtml#a81fbf6103761e55061b62ba989b00f10">GetConnection</a>()-&gt;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ae16a4d0c56ca96e5d61785bd3e3e7992">Disconnect</a>(layer.<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(inputSlotIndex));</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;            }</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;        }</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;    }</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    <span class="keyword">const</span> uint32_t operandIndex = operation.outputs[operationOutputIndex];</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    <span class="keywordflow">if</span> (activationFunction != ActivationFn::kActivationNone)</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;    {</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; activationOutputInfo = outputSlot.<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>();</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;        <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> endLayer = <a class="code" href="namespacearmnn__driver.xhtml#aac972ee73e8bd2374bc40ab844a7d894">ProcessActivation</a>(activationOutputInfo, activationFunction,</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;                                                                     &amp;layer, data);</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;        <span class="keywordflow">if</span> (!endLayer)</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;        {</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: ProcessActivation failed&quot;</span>, __func__);</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;        }</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;        <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a>&amp; activationOutputSlot = endLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(layerOutputIndex);</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;        data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a4df0c61eb897ecc9271a4a85604066ea">m_OutputSlotForOperand</a>[operandIndex] = &amp;activationOutputSlot;</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    }</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    {</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;        data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a4df0c61eb897ecc9271a4a85604066ea">m_OutputSlotForOperand</a>[operandIndex] = &amp;outputSlot;</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    }</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;}</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;</div><div class="line"><a name="l01026"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#a7bf2bd59bc8ca21e0dd906044bfc2faf"> 1026</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn__driver.xhtml#a7bf2bd59bc8ca21e0dd906044bfc2faf">IsConnectedToDequantize</a>(<a class="code" href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a>* ioutputSlot)</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;{</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ConversionUtils::IsConnectedToDequantize()&quot;</span>;</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    <span class="keywordflow">if</span> (!ioutputSlot)</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    {</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;    }</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ConversionUtils::IsConnectedToDequantize() ioutputSlot is valid.&quot;</span>;</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    <span class="comment">// Find the connections and layers..</span></div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>&amp; owningLayer = ioutputSlot-&gt;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a22b3f11f56aa924c0c1b6ee4d6cc90e1">GetOwningIConnectableLayer</a>();</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    <span class="keywordflow">if</span> (owningLayer.<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">armnn::LayerType::Dequantize</a>)</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    {</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ConversionUtils::IsConnectedToDequantize() connected to Dequantize Layer.&quot;</span>;</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;        <a class="code" href="classarmnn_1_1_i_input_slot.xhtml">armnn::IInputSlot</a>&amp; inputSlot = owningLayer.<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0);</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;        <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a>* connection = inputSlot.<a class="code" href="classarmnn_1_1_i_input_slot.xhtml#a81fbf6103761e55061b62ba989b00f10">GetConnection</a>();</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;        <span class="keywordflow">if</span> (connection)</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;        {</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;            VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ConversionUtils::IsConnectedToDequantize() Dequantize Layer has a connection.&quot;</span>;</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;            <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>&amp; connectedLayer =</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;                    connection-&gt;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a22b3f11f56aa924c0c1b6ee4d6cc90e1">GetOwningIConnectableLayer</a>();</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;            <span class="keywordflow">if</span> (connectedLayer.<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">GetType</a>() == <a class="code" href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::LayerType::Constant</a>)</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;            {</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;                VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ConversionUtils::IsConnectedToDequantize() Dequantize Layer connected to Constant&quot;</span>;</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;            }</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;        }</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;    }</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;}</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;} <span class="comment">// namespace armnn_driver</span></div><div class="ttc" id="structarmnn__driver_1_1_conversion_data_xhtml"><div class="ttname"><a href="structarmnn__driver_1_1_conversion_data.xhtml">armnn_driver::ConversionData</a></div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00051">ConversionUtils.hpp:51</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorShape::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdoc">Function that calculates the tensor elements by multiplying all dimension size which are Specified...</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00181">Tensor.cpp:181</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a5890dee5ebd8c09d4b3787136d8170d8"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">armnn_driver::GetOutputOperand</a></div><div class="ttdeci">const Operand * GetOutputOperand(const Operation &amp;operation, uint32_t outputIndex, const Model &amp;model)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00652">ConversionUtils.hpp:652</a></div></div>
<div class="ttc" id="structarmnn__driver_1_1_conversion_data_xhtml_acb740de896710dbc576f5eaf7a9cfeaa"><div class="ttname"><a href="structarmnn__driver_1_1_conversion_data.xhtml#acb740de896710dbc576f5eaf7a9cfeaa">armnn_driver::ConversionData::m_MemPools</a></div><div class="ttdeci">std::vector&lt;::android::nn::RunTimePoolInfo &gt; m_MemPools</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00062">ConversionUtils.hpp:62</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559">armnn::ActivationFunction::ReLu</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_ac2dac3b61c94de52093616be4ab17f8d"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">armnn::IConnectableLayer::GetNumOutputSlots</a></div><div class="ttdeci">virtual unsigned int GetNumOutputSlots() const =0</div><div class="ttdoc">Returns the number of connectable output slots. </div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00068">INetwork.hpp:68</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a267f6b68937e2126b6ca890a6b11ea9c"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a267f6b68937e2126b6ca890a6b11ea9c">armnn_driver::IsQSymm8</a></div><div class="ttdeci">bool IsQSymm8(const Operand &amp;operand)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00992">ConversionUtils.hpp:992</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::Pooling2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00374">Descriptors.hpp:374</a></div></div>
<div class="ttc" id="structarmnn__driver_1_1_conversion_data_xhtml_a4df0c61eb897ecc9271a4a85604066ea"><div class="ttname"><a href="structarmnn__driver_1_1_conversion_data.xhtml#a4df0c61eb897ecc9271a4a85604066ea">armnn_driver::ConversionData::m_OutputSlotForOperand</a></div><div class="ttdeci">std::vector&lt; armnn::IOutputSlot * &gt; m_OutputSlotForOperand</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00061">ConversionUtils.hpp:61</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a9c2cba04b6d7ace4fc2a2436b82a5a63"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">armnn::IConnectableLayer::GetNumInputSlots</a></div><div class="ttdeci">virtual unsigned int GetNumInputSlots() const =0</div><div class="ttdoc">Returns the number of connectable input slots. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00062">Types.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_utils_1_1_data_layout_indexed_xhtml_a414e6f95548e6f7a01d5028b55ad3941"><div class="ttname"><a href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a414e6f95548e6f7a01d5028b55ad3941">armnnUtils::DataLayoutIndexed::GetWidthIndex</a></div><div class="ttdeci">unsigned int GetWidthIndex() const</div><div class="ttdef"><b>Definition:</b> <a href="_data_layout_indexed_8hpp_source.xhtml#l00025">DataLayoutIndexed.hpp:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::Pooling2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00368">Descriptors.hpp:368</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a10c64daf22426af432d0a9ada03eee5caaf655f85da1fc9b6a348b9893ee6aef7"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a10c64daf22426af432d0a9ada03eee5caaf655f85da1fc9b6a348b9893ee6aef7">armnn_driver::DequantizeStatus::NOT_REQUIRED</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3"><div class="ttname"><a href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::OutputShapeRounding::Floor</a></div></div>
<div class="ttc" id="structarmnn__driver_1_1_conversion_data_xhtml_af3239731a47cf4c08a040c42ee855edc"><div class="ttname"><a href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">armnn_driver::ConversionData::m_Backends</a></div><div class="ttdeci">const std::vector&lt; armnn::BackendId &gt; m_Backends</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00059">ConversionUtils.hpp:59</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_ac092fff5c81f7938eea9a2479f014c66"><div class="ttname"><a href="namespacearmnn__driver.xhtml#ac092fff5c81f7938eea9a2479f014c66">armnn_driver::GetInputActivationFunction</a></div><div class="ttdeci">bool GetInputActivationFunction(const Operation &amp;operation, uint32_t inputIndex, ActivationFn &amp;outActivationFunction, const Model &amp;model, const ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00813">ConversionUtils.hpp:813</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a6d8fb685cc1ff224f25aa127fcf62c86"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">armnn::Pooling2dDescriptor::m_PoolWidth</a></div><div class="ttdeci">uint32_t m_PoolWidth</div><div class="ttdoc">Pooling width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00376">Descriptors.hpp:376</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a3f6b313fd199d1552844f3f95fd25cd2"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a3f6b313fd199d1552844f3f95fd25cd2">armnn_driver::ConvertReduce</a></div><div class="ttdeci">bool ConvertReduce(const Operation &amp;operation, const Model &amp;model, ConversionData &amp;data, armnn::ReduceOperation reduceOperation)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00502">ConversionUtils.cpp:502</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_layer_input_handle_xhtml_a7a886c1735beae3f31f2062e1b327ac4"><div class="ttname"><a href="classarmnn__driver_1_1_layer_input_handle.xhtml#a7a886c1735beae3f31f2062e1b327ac4">armnn_driver::LayerInputHandle::GetOutputSlot</a></div><div class="ttdeci">armnn::IOutputSlot * GetOutputSlot() const</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00070">ConversionUtils.cpp:70</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_ad3a9c1424b37970a54624f514196b985"><div class="ttname"><a href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">armnn_driver::Operation</a></div><div class="ttdeci">::android::nn::Operation Operation</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00047">ConversionUtils.hpp:47</a></div></div>
<div class="ttc" id="structarmnn_1_1_reduce_descriptor_xhtml_a28e0548abfc4e79c48f29a3d11a062e9"><div class="ttname"><a href="structarmnn_1_1_reduce_descriptor.xhtml#a28e0548abfc4e79c48f29a3d11a062e9">armnn::ReduceDescriptor::m_KeepDims</a></div><div class="ttdeci">bool m_KeepDims</div><div class="ttdoc">if true then output shape has no change. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01487">Descriptors.hpp:1487</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a96666c2945d7fe8c34aee30a449287d5"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a96666c2945d7fe8c34aee30a449287d5">armnn_driver::GetMemoryFromPool</a></div><div class="ttdeci">void * GetMemoryFromPool(DataLocation location, const std::vector&lt; android::nn::RunTimePoolInfo &gt; &amp;memPools)</div><div class="ttdoc">Returns a pointer to a specific location in a pool`. </div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00066">CanonicalUtils.cpp:66</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abcbdfb544ece4c31d0b37715ad0f3be0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">armnn::TensorInfo::GetNumBytes</a></div><div class="ttdeci">unsigned int GetNumBytes() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00427">Tensor.cpp:427</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_const_tensor_pin_xhtml_a4103db28319d5fc58ba0b7ee20b5da22"><div class="ttname"><a href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">armnn_driver::ConstTensorPin::GetConstTensorPtr</a></div><div class="ttdeci">const armnn::ConstTensor * GetConstTensorPtr() const</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00120">ConversionUtils.cpp:120</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a82e85436d5f7cbfa90e8ab521bddae31"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a82e85436d5f7cbfa90e8ab521bddae31">armnn_driver::ConvertOperandToConstTensorPin</a></div><div class="ttdeci">ConstTensorPin ConvertOperandToConstTensorPin(const Operand &amp;operand, const Model &amp;model, const ConversionData &amp;data, const armnn::PermutationVector &amp;dimensionMappings, const armnn::TensorShape *overrideTensorShape, bool optional, const armnn::DataType *overrideDataType)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00154">ConversionUtils.cpp:154</a></div></div>
<div class="ttc" id="_conversion_utils_8hpp_xhtml"><div class="ttname"><a href="_conversion_utils_8hpp.xhtml">ConversionUtils.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::BaseTensor::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00303">Tensor.hpp:303</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_layer_input_handle_xhtml_a9b63bdf08709bc5302b3c1a9198d06a3"><div class="ttname"><a href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">armnn_driver::LayerInputHandle::Connect</a></div><div class="ttdeci">void Connect(armnn::IInputSlot &amp;inputSlot)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00032">ConversionUtils.cpp:32</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::Pooling2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00372">Descriptors.hpp:372</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">armnn::ActivationFunction::Sigmoid</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_aa81f67ac64f0c249e26499600c45d996"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">armnn::BaseTensor::GetMemoryArea</a></div><div class="ttdeci">MemoryType GetMemoryArea() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00305">Tensor.hpp:305</a></div></div>
<div class="ttc" id="structarmnn_1_1_pad_descriptor_xhtml_a85f98c94e11f65a6b73f831735c040f3"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">armnn::PadDescriptor::m_PadList</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; m_PadList</div><div class="ttdoc">Specifies the padding for input dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01158">Descriptors.hpp:1158</a></div></div>
<div class="ttc" id="structarmnn_1_1_reduce_descriptor_xhtml_aa57c67b1da0011b1abb30170146e870f"><div class="ttname"><a href="structarmnn_1_1_reduce_descriptor.xhtml#aa57c67b1da0011b1abb30170146e870f">armnn::ReduceDescriptor::m_ReduceOperation</a></div><div class="ttdeci">ReduceOperation m_ReduceOperation</div><div class="ttdoc">Specifies the reduction operation to execute. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01491">Descriptors.hpp:1491</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_const_tensor_pin_xhtml"><div class="ttname"><a href="classarmnn__driver_1_1_const_tensor_pin.xhtml">armnn_driver::ConstTensorPin</a></div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00090">ConversionUtils.hpp:90</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_unsupported_operand_xhtml_adbccd9c087443cf759711a3e62da9a84"><div class="ttname"><a href="classarmnn__driver_1_1_unsupported_operand.xhtml#adbccd9c087443cf759711a3e62da9a84">armnn_driver::UnsupportedOperand::m_type</a></div><div class="ttdeci">OperandType m_type</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8hpp_source.xhtml#l00035">CanonicalUtils.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_unsupported_operand_xhtml"><div class="ttname"><a href="classarmnn__driver_1_1_unsupported_operand.xhtml">armnn_driver::UnsupportedOperand</a></div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8hpp_source.xhtml#l00027">CanonicalUtils.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_permutation_vector_xhtml_a490ec6b59006d1fe1ec2ea30e69fb97c"><div class="ttname"><a href="classarmnn_1_1_permutation_vector.xhtml#a490ec6b59006d1fe1ec2ea30e69fb97c">armnn::PermutationVector::GetSize</a></div><div class="ttdeci">SizeType GetSize() const</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00338">Types.hpp:338</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a961bbfe1db71a848eff5a1f0ab775718"><div class="ttname"><a href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718">armnn::PoolingAlgorithm</a></div><div class="ttdeci">PoolingAlgorithm</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00136">Types.hpp:136</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_layer_input_handle_xhtml_ac532c4b500b1a85ea22217f2c65a70ed"><div class="ttname"><a href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">armnn_driver::LayerInputHandle::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00027">ConversionUtils.cpp:27</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a10c64daf22426af432d0a9ada03eee5cad0749aaba8b833466dfcbb0428e4f89c"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a10c64daf22426af432d0a9ada03eee5cad0749aaba8b833466dfcbb0428e4f89c">armnn_driver::DequantizeStatus::SUCCESS</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::Pooling2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00380">Descriptors.hpp:380</a></div></div>
<div class="ttc" id="structarmnn__driver_1_1_conversion_data_xhtml_a094e06eb84b3b80533c0f961f0f472de"><div class="ttname"><a href="structarmnn__driver_1_1_conversion_data.xhtml#a094e06eb84b3b80533c0f961f0f472de">armnn_driver::ConversionData::m_DynamicInputsEncountered</a></div><div class="ttdeci">bool m_DynamicInputsEncountered</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00063">ConversionUtils.hpp:63</a></div></div>
<div class="ttc" id="classarmnn_utils_1_1_data_layout_indexed_xhtml_a61c00316c443adc233c24e85c6c5b740"><div class="ttname"><a href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a61c00316c443adc233c24e85c6c5b740">armnnUtils::DataLayoutIndexed::GetHeightIndex</a></div><div class="ttdeci">unsigned int GetHeightIndex() const</div><div class="ttdef"><b>Definition:</b> <a href="_data_layout_indexed_8hpp_source.xhtml#l00024">DataLayoutIndexed.hpp:24</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00193">Tensor.hpp:193</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_ae059aea66ee0867a204aa2f2d9abb42c"><div class="ttname"><a href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">armnn_driver::g_DontPermute</a></div><div class="ttdeci">const armnn::PermutationVector g_DontPermute</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00038">CanonicalUtils.cpp:38</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a14977f94479f2f7e13bdf915ac8ce8d0"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">armnn_driver::GetInputOperand</a></div><div class="ttdeci">const Operand * GetInputOperand(const Operation &amp;operation, uint32_t inputIndex, const Model &amp;model, bool failOnIndexOutOfBounds=true)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00633">ConversionUtils.hpp:633</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a5665b88a0b22c6341dd8075048981689"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a5665b88a0b22c6341dd8075048981689">armnn_driver::SwizzleAndroidNn4dTensorToArmNn</a></div><div class="ttdeci">void SwizzleAndroidNn4dTensorToArmNn(armnn::TensorInfo &amp;tensorInfo, const void *input, void *output, const armnn::PermutationVector &amp;mappings)</div><div class="ttdoc">Swizzles tensor data in input according to the dimension mappings. </div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00040">CanonicalUtils.cpp:40</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a5699e8606c37d18c03910b242cd1b010"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">armnn::Pooling2dDescriptor::m_PoolHeight</a></div><div class="ttdeci">uint32_t m_PoolHeight</div><div class="ttdoc">Pooling height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00378">Descriptors.hpp:378</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a85d53debffd9611a3b5bc6031afd5073"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">armnn_driver::AreDynamicTensorsSupported</a></div><div class="ttdeci">bool AreDynamicTensorsSupported()</div><div class="ttdoc">Checks for ArmNN support of dynamic tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00500">CanonicalUtils.cpp:500</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_layer_input_handle_xhtml_abb3c829e926870907875474614fb0485"><div class="ttname"><a href="classarmnn__driver_1_1_layer_input_handle.xhtml#abb3c829e926870907875474614fb0485">armnn_driver::LayerInputHandle::Disconnect</a></div><div class="ttdeci">void Disconnect(armnn::IInputSlot &amp;inputSlot)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00041">ConversionUtils.cpp:41</a></div></div>
<div class="ttc" id="structarmnn_1_1_pad_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a></div><div class="ttdoc">A PadDescriptor for the PadLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01136">Descriptors.hpp:1136</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a10c64daf22426af432d0a9ada03eee5ca6bf179afa8f7fba18cf39bc0ca6fe043"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a10c64daf22426af432d0a9ada03eee5ca6bf179afa8f7fba18cf39bc0ca6fe043">armnn_driver::DequantizeStatus::INVALID_OPERAND</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a2eb75cb48464cf87c290503d7bea79a4"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a2eb75cb48464cf87c290503d7bea79a4">armnn_driver::ConvertPooling2d</a></div><div class="ttdeci">bool ConvertPooling2d(const Operation &amp;operation, const char *operationName, armnn::PoolingAlgorithm poolType, const Model &amp;model, ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00376">ConversionUtils.cpp:376</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a8c749c18e62c59a5c1254aac342c995a"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">armnn_driver::ConvertOperationInputToConstTensorPin</a></div><div class="ttdeci">ConstTensorPin ConvertOperationInputToConstTensorPin(const Operation &amp;operation, uint32_t inputIndex, const Model &amp;model, const ConversionData &amp;data, const armnn::PermutationVector &amp;dimensionMappings=g_DontPermute, const armnn::TensorShape *overrideTensorShape=nullptr, bool optional=false)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00708">ConversionUtils.hpp:708</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abc05539fc6e7907f32ef0fb242e3b3b0"><div class="ttname"><a href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0">armnn::ReduceOperation</a></div><div class="ttdeci">ReduceOperation</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00143">Types.hpp:143</a></div></div>
<div class="ttc" id="_permute_8hpp_xhtml"><div class="ttname"><a href="_permute_8hpp.xhtml">Permute.hpp</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a923b39ec5f83672f50289cbaf5de6798"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">armnn_driver::Model</a></div><div class="ttdeci">::android::nn::Model Model</div><div class="ttdoc">Helper classes. </div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00043">ConversionUtils.hpp:43</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00048">Types.hpp:48</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::Pooling2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00370">Descriptors.hpp:370</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_abf92490dc588f48af86fc12184841fd5"><div class="ttname"><a href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">armnn_driver::GetInputScalar</a></div><div class="ttdeci">bool GetInputScalar(const Operation &amp;operation, uint32_t inputIndex, OperandType type, OutputType &amp;outValue, const Model &amp;model, const ConversionData &amp;data, bool optional=false)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00732">ConversionUtils.hpp:732</a></div></div>
<div class="ttc" id="structarmnn__driver_1_1_conversion_data_xhtml_a2db3ae8d422f17d455e0ba0cb6291d2a"><div class="ttname"><a href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">armnn_driver::ConversionData::m_Network</a></div><div class="ttdeci">armnn::INetworkPtr m_Network</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00060">ConversionUtils.hpp:60</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a></div><div class="ttdoc">An output connection slot for a layer. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00041">INetwork.hpp:41</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_layer_input_handle_xhtml_acbafd23115b06f0a82eab45bd1e3cff9"><div class="ttname"><a href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">armnn_driver::LayerInputHandle::GetTensorInfo</a></div><div class="ttdeci">const armnn::TensorInfo &amp; GetTensorInfo() const</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00050">ConversionUtils.cpp:50</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a3f3a756df9dee4b33566cddd786b83c9"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">armnn_driver::OptionalDataLayout</a></div><div class="ttdeci">armnn::DataLayout OptionalDataLayout(const Operation &amp;operation, uint32_t inputIndex, const Model &amp;model, ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00842">ConversionUtils.cpp:842</a></div></div>
<div class="ttc" id="classarmnn_utils_1_1_data_layout_indexed_xhtml"><div class="ttname"><a href="classarmnn_utils_1_1_data_layout_indexed.xhtml">armnnUtils::DataLayoutIndexed</a></div><div class="ttdoc">Provides access to the appropriate indexes for Channels, Height and Width based on DataLayout...</div><div class="ttdef"><b>Definition:</b> <a href="_data_layout_indexed_8hpp_source.xhtml#l00017">DataLayoutIndexed.hpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="structarmnn_1_1_reduce_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reduce_descriptor.xhtml">armnn::ReduceDescriptor</a></div><div class="ttdoc">A ReduceDescriptor for the REDUCE operators. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01471">Descriptors.hpp:1471</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a93f4874062e34819806d36b74c73dc61"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">armnn_driver::GetTensorInfoForOperand</a></div><div class="ttdeci">armnn::TensorInfo GetTensorInfoForOperand(const Operand &amp;operand)</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00097">CanonicalUtils.cpp:97</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ae16a4d0c56ca96e5d61785bd3e3e7992"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ae16a4d0c56ca96e5d61785bd3e3e7992">armnn::IOutputSlot::Disconnect</a></div><div class="ttdeci">virtual void Disconnect(IInputSlot &amp;slot)=0</div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a8d4f662a4fb5b9272724bdaeacbd370a"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a8d4f662a4fb5b9272724bdaeacbd370a">armnn_driver::ConvertPaddings</a></div><div class="ttdeci">bool ConvertPaddings(const Operation &amp;operation, const Model &amp;model, ConversionData &amp;data, unsigned int rank, armnn::PadDescriptor &amp;padDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00334">ConversionUtils.cpp:334</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a10c64daf22426af432d0a9ada03eee5c"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a10c64daf22426af432d0a9ada03eee5c">armnn_driver::DequantizeStatus</a></div><div class="ttdeci">DequantizeStatus</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00997">ConversionUtils.hpp:997</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a8d20245b5ca3cbb0b132064ab44f2682"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a8d20245b5ca3cbb0b132064ab44f2682">armnn_driver::GetOperandValueReadOnlyAddress</a></div><div class="ttdeci">const void * GetOperandValueReadOnlyAddress(const Operand &amp;operand, const Model &amp;model, const ConversionData &amp;data, bool optional)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00766">ConversionUtils.cpp:766</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a22b3f11f56aa924c0c1b6ee4d6cc90e1"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a22b3f11f56aa924c0c1b6ee4d6cc90e1">armnn::IOutputSlot::GetOwningIConnectableLayer</a></div><div class="ttdeci">virtual const IConnectableLayer &amp; GetOwningIConnectableLayer() const =0</div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00036">Descriptors.hpp:36</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">armnn::LayerType::Dequantize</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_tensor_xhtml_a8aeddebdcf02e1832b22203c08a6b678"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">armnn::BaseTensor::GetInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetInfo() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00295">Tensor.hpp:295</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a></div><div class="ttdoc">min(a, max(b, input)) ReLu1 &amp; ReLu6. </div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a71975fcec1464d639f1a78f73164d1bd"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a71975fcec1464d639f1a78f73164d1bd">armnn::TensorInfo::SetDataType</a></div><div class="ttdeci">void SetDataType(DataType type)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00199">Tensor.hpp:199</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_layer_input_handle_xhtml"><div class="ttname"><a href="classarmnn__driver_1_1_layer_input_handle.xhtml">armnn_driver::LayerInputHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00066">ConversionUtils.hpp:66</a></div></div>
<div class="ttc" id="classarmnn_1_1_permutation_vector_xhtml"><div class="ttname"><a href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a></div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00295">Types.hpp:295</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_const_tensor_pin_xhtml_a1a58af8dd8a4f17f11e50f18a4a96438"><div class="ttname"><a href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a1a58af8dd8a4f17f11e50f18a4a96438">armnn_driver::ConstTensorPin::ConstTensorPin</a></div><div class="ttdeci">ConstTensorPin(bool optional=false)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00075">ConversionUtils.cpp:75</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_adceb04ae84c524e4d01881e3754a4d59"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">armnn::IConnectableLayer::GetType</a></div><div class="ttdeci">virtual LayerType GetType() const =0</div><div class="ttdoc">Returns the armnn::LayerType of this layer. </div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_ac8643aaee3eafc54336c5462b51bd53f"><div class="ttname"><a href="namespacearmnn__driver.xhtml#ac8643aaee3eafc54336c5462b51bd53f">armnn_driver::GetTensorInt32Values</a></div><div class="ttdeci">bool GetTensorInt32Values(const Operand &amp;operand, std::vector&lt; int32_t &gt; &amp;outValues, const Model &amp;model, const ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00811">ConversionUtils.cpp:811</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a208149d5c08f84debf8b265bb508fe02"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">armnn_driver::IsDynamicTensor</a></div><div class="ttdeci">bool IsDynamicTensor(const armnn::TensorInfo &amp;tensorInfo)</div><div class="ttdoc">Checks if a tensor info represents a dynamic tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00486">CanonicalUtils.cpp:486</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::Pooling2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00388">Descriptors.hpp:388</a></div></div>
<div class="ttc" id="structarmnn_1_1_reduce_descriptor_xhtml_aa1c6fc8c96404252f1072632fc5acb59"><div class="ttname"><a href="structarmnn_1_1_reduce_descriptor.xhtml#aa1c6fc8c96404252f1072632fc5acb59">armnn::ReduceDescriptor::m_vAxis</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; m_vAxis</div><div class="ttdoc">The indices of the dimensions to reduce. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01489">Descriptors.hpp:1489</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_layer_input_handle_xhtml_a1c6dcb68e814a2b2d92daba0d2496f53"><div class="ttname"><a href="classarmnn__driver_1_1_layer_input_handle.xhtml#a1c6dcb68e814a2b2d92daba0d2496f53">armnn_driver::LayerInputHandle::LayerInputHandle</a></div><div class="ttdeci">LayerInputHandle()</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00016">ConversionUtils.cpp:16</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a56e87ad879b142327b822beff44ca171"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a56e87ad879b142327b822beff44ca171">armnn_driver::IsWeightsValid</a></div><div class="ttdeci">bool IsWeightsValid(const Operation &amp;operation, uint32_t inputIndex, const Model &amp;model)</div><div class="ttdoc">Utility functions. </div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00134">ConversionUtils.cpp:134</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a8932639a884a3dc698f29d4e8395ba49"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a8932639a884a3dc698f29d4e8395ba49">armnn_driver::DequantizeResult</a></div><div class="ttdeci">std::tuple&lt; std::unique_ptr&lt; float[]&gt;, size_t, armnn::TensorInfo, DequantizeStatus &gt; DequantizeResult</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l01004">ConversionUtils.hpp:1004</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a3512b2f24950886288c5d01df1488f15"><div class="ttname"><a href="namespacearmnn.xhtml#a3512b2f24950886288c5d01df1488f15">armnn::IsInputSupported</a></div><div class="ttdeci">bool IsInputSupported(const BackendId &amp;backend, const TensorInfo &amp;input, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces. </div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a017b2990003a014234f13e999dc7c689"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">armnn::ActivationDescriptor::m_A</a></div><div class="ttdeci">float m_A</div><div class="ttdoc">Alpha upper bound value used by the activation functions. (BoundedReLu, Linear, TanH, Elu). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00061">Descriptors.hpp:61</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a1f6b85ab26d684241babcde2d659116b"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">armnn_driver::ConvertToLayerInputHandle</a></div><div class="ttdeci">LayerInputHandle ConvertToLayerInputHandle(const Operation &amp;operation, uint32_t inputIndex, const Model &amp;model, ConversionData &amp;data, const armnn::PermutationVector &amp;dimensionMappings, const LayerInputHandle *inputHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00204">ConversionUtils.cpp:204</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_aa9b4bc8d4cfb04be14771dbb1bc1a1ac"><div class="ttname"><a href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">armnn_driver::Operand</a></div><div class="ttdeci">::android::nn::Operand Operand</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00044">ConversionUtils.hpp:44</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a5378da53b59c1c826e6320383ca0257e"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">armnn_driver::SetupAndTrackLayerOutputSlot</a></div><div class="ttdeci">bool SetupAndTrackLayerOutputSlot(const Operation &amp;operation, uint32_t operationOutputIndex, armnn::IConnectableLayer &amp;layer, uint32_t layerOutputIndex, const Model &amp;model, ConversionData &amp;data, const armnn::TensorInfo *overrideOutputInfo, const std::function&lt; void(const armnn::TensorInfo &amp;, bool &amp;)&gt; &amp;validateFunc, const ActivationFn &amp;activationFunction, bool inferOutputShapes)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00949">ConversionUtils.cpp:949</a></div></div>
<div class="ttc" id="_conversion_utils_8hpp_xhtml_abcb5019b10b89cbd2b96118885a026d4"><div class="ttname"><a href="_conversion_utils_8hpp.xhtml#abcb5019b10b89cbd2b96118885a026d4">getMainModel</a></div><div class="ttdeci">const android::nn::Model::Subgraph &amp; getMainModel(const android::nn::Model &amp;model)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00028">ConversionUtils.hpp:28</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a0031997bf43bd2747656c31e4977793a"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a0031997bf43bd2747656c31e4977793a">armnn::Pooling2dDescriptor::m_PoolType</a></div><div class="ttdeci">PoolingAlgorithm m_PoolType</div><div class="ttdoc">The pooling algorithm to use (Max. Average, L2). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00366">Descriptors.hpp:366</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_aa9ef723ace8562b9636e8387a120fbde"><div class="ttname"><a href="namespacearmnn__driver.xhtml#aa9ef723ace8562b9636e8387a120fbde">armnn_driver::GetInputPaddingScheme</a></div><div class="ttdeci">bool GetInputPaddingScheme(const Operation &amp;operation, uint32_t inputIndex, PaddingScheme &amp;outPaddingScheme, const Model &amp;model, const ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00750">ConversionUtils.cpp:750</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a28243ca97e12ccb50e01f03d313ecc86"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a28243ca97e12ccb50e01f03d313ecc86">armnn_driver::ConvertToActivation</a></div><div class="ttdeci">bool ConvertToActivation(const Operation &amp;operation, const char *operationName, const armnn::ActivationDescriptor &amp;activationDesc, const Model &amp;model, ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00583">ConversionUtils.cpp:583</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a37ca67c646393225921543233a873803"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">armnn_driver::DequantizeAndMakeConstTensorPin</a></div><div class="ttdeci">ConstTensorPin DequantizeAndMakeConstTensorPin(const Operation &amp;operation, const Model &amp;model, const ConversionData &amp;data, size_t operandIndex, bool optional)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00720">ConversionUtils.cpp:720</a></div></div>
<div class="ttc" id="_conversion_utils_8hpp_xhtml_a6f98cfbf3171f950d1f0df30d60691a7"><div class="ttname"><a href="_conversion_utils_8hpp.xhtml#a6f98cfbf3171f950d1f0df30d60691a7">FORWARD_LAYER_SUPPORT_FUNC</a></div><div class="ttdeci">#define FORWARD_LAYER_SUPPORT_FUNC(funcName, func, backends, supported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00153">ConversionUtils.hpp:153</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_aa43f9c81f830559c15e5af86f8e11482"><div class="ttname"><a href="namespacearmnn__driver.xhtml#aa43f9c81f830559c15e5af86f8e11482">armnn_driver::GetInputInt32</a></div><div class="ttdeci">bool GetInputInt32(const Operation &amp;operation, uint32_t inputIndex, int32_t &amp;outValue, const Model &amp;model, const ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00772">ConversionUtils.hpp:772</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdoc">Function that returns the tensor rank. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00174">Tensor.cpp:174</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_const_tensor_pin_xhtml_a0325a5d8b692252432a6bf2069cefebf"><div class="ttname"><a href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">armnn_driver::ConstTensorPin::IsOptional</a></div><div class="ttdeci">bool IsOptional() const</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00110">ConversionUtils.cpp:110</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a7bf2bd59bc8ca21e0dd906044bfc2faf"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a7bf2bd59bc8ca21e0dd906044bfc2faf">armnn_driver::IsConnectedToDequantize</a></div><div class="ttdeci">bool IsConnectedToDequantize(armnn::IOutputSlot *ioutputSlot)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l01026">ConversionUtils.cpp:1026</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_const_tensor_pin_xhtml_a971023b9874b0d773e8aa4c6d6744a2b"><div class="ttname"><a href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a971023b9874b0d773e8aa4c6d6744a2b">armnn_driver::ConstTensorPin::GetConstTensor</a></div><div class="ttdeci">const armnn::ConstTensor &amp; GetConstTensor() const</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00115">ConversionUtils.cpp:115</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_affb5b68b3eba3ed45a06c7cde7781962"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#affb5b68b3eba3ed45a06c7cde7781962">armnn::Pooling2dDescriptor::m_OutputShapeRounding</a></div><div class="ttdeci">OutputShapeRounding m_OutputShapeRounding</div><div class="ttdoc">The rounding method for the output shape. (Floor, Ceiling). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00384">Descriptors.hpp:384</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_const_tensor_pin_xhtml_ac532c4b500b1a85ea22217f2c65a70ed"><div class="ttname"><a href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">armnn_driver::ConstTensorPin::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00105">ConversionUtils.cpp:105</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ab4e57caf059794897b17266090ebcb39"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ab4e57caf059794897b17266090ebcb39">armnn::IOutputSlot::IsTensorInfoSet</a></div><div class="ttdeci">virtual bool IsTensorInfoSet() const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8ffca1e21bdfa7f945617acd606aac91"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">armnn::TensorInfo::SetConstant</a></div><div class="ttdeci">void SetConstant(const bool IsConstant=true)</div><div class="ttdoc">Marks the data corresponding to this tensor info as constant. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00514">Tensor.cpp:514</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_input_slot_xhtml_a81fbf6103761e55061b62ba989b00f10"><div class="ttname"><a href="classarmnn_1_1_i_input_slot.xhtml#a81fbf6103761e55061b62ba989b00f10">armnn::IInputSlot::GetConnection</a></div><div class="ttdeci">virtual const IOutputSlot * GetConnection() const =0</div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_aac972ee73e8bd2374bc40ab844a7d894"><div class="ttname"><a href="namespacearmnn__driver.xhtml#aac972ee73e8bd2374bc40ab844a7d894">armnn_driver::ProcessActivation</a></div><div class="ttdeci">armnn::IConnectableLayer * ProcessActivation(const armnn::TensorInfo &amp;tensorInfo, ActivationFn activation, armnn::IConnectableLayer *prevLayer, ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00874">ConversionUtils.cpp:874</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a9ddfceb499ef7b3d01053399bc79b852"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a9ddfceb499ef7b3d01053399bc79b852">armnn_driver::IsOperandConstant</a></div><div class="ttdeci">bool IsOperandConstant(const Operand &amp;operand)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00688">ConversionUtils.hpp:688</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a9943775a364fc4ab53b85ac88f311886"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">armnn::IOutputSlot::GetTensorInfo</a></div><div class="ttdeci">virtual const TensorInfo &amp; GetTensorInfo() const =0</div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a78a9a9f196810df6bc4795568f275c75"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a78a9a9f196810df6bc4795568f275c75">armnn_driver::DequantizeIfRequired</a></div><div class="ttdeci">DequantizeResult DequantizeIfRequired(size_t operand_index, const Operation &amp;operation, const Model &amp;model, const ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00637">ConversionUtils.cpp:637</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aefa2e47c23dc8faac4b7edb12b5d1c2c"><div class="ttname"><a href="namespacearmnn.xhtml#aefa2e47c23dc8faac4b7edb12b5d1c2c">armnn::IsReduceSupported</a></div><div class="ttdeci">bool IsReduceSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const ReduceDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0d2ad1212c8773f36160ef6e5e7db61f"><div class="ttname"><a href="namespacearmnn.xhtml#a0d2ad1212c8773f36160ef6e5e7db61f">armnn::IsConstantSupported</a></div><div class="ttdeci">bool IsConstantSupported(const BackendId &amp;backend, const TensorInfo &amp;output, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces. </div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_af4f2d40a67380e91bd7ed0c1bcc4658f"><div class="ttname"><a href="namespacearmnn.xhtml#af4f2d40a67380e91bd7ed0c1bcc4658f">armnn::IsPooling2dSupported</a></div><div class="ttdeci">bool IsPooling2dSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling2dDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces. </div></div>
<div class="ttc" id="classarmnn__driver_1_1_layer_input_handle_xhtml_a594af6896fa4bf3de9ee961fa8e2aade"><div class="ttname"><a href="classarmnn__driver_1_1_layer_input_handle.xhtml#a594af6896fa4bf3de9ee961fa8e2aade">armnn_driver::LayerInputHandle::SanitizeQuantizationScale</a></div><div class="ttdeci">void SanitizeQuantizationScale(LayerInputHandle &amp;weight, LayerInputHandle &amp;input)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00055">ConversionUtils.cpp:55</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a></div><div class="ttdoc">A Pooling2dDescriptor for the Pooling2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00332">Descriptors.hpp:332</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255"><div class="ttname"><a href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::PaddingMode::Constant</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml"><div class="ttname"><a href="namespacearmnn__driver.xhtml">armnn_driver</a></div><div class="ttdoc">Helper classes. </div><div class="ttdef"><b>Definition:</b> <a href="_armnn_device_8cpp_source.xhtml#l00037">ArmnnDevice.cpp:37</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_a28c4c9cb15f6be3499abbc46b356060b"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">armnn::ActivationDescriptor::m_B</a></div><div class="ttdeci">float m_B</div><div class="ttdoc">Beta lower bound value used by the activation functions. (BoundedReLu, Linear, TanH). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00063">Descriptors.hpp:63</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a6e7dc8639c4b2f0a93031afff5182735"><div class="ttname"><a href="namespacearmnn.xhtml#a6e7dc8639c4b2f0a93031afff5182735">armnn::IsActivationSupported</a></div><div class="ttdeci">bool IsActivationSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces. </div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_af10fa7883e3579950f477bee92a64844"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">armnn::ActivationDescriptor::m_Function</a></div><div class="ttdeci">ActivationFunction m_Function</div><div class="ttdoc">The activation function to use (Sigmoid, TanH, Linear, ReLu, BoundedReLu, SoftReLu, LeakyReLu, Abs, Sqrt, Square, Elu). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00059">Descriptors.hpp:59</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_input_slot_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_input_slot.xhtml">armnn::IInputSlot</a></div><div class="ttdoc">An input connection slot for a layer. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00025">INetwork.hpp:25</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::Pooling2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00382">Descriptors.hpp:382</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e">armnn::ActivationFunction::TanH</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_b4dbf96392bc72a402a7206cbda88a03.xhtml">shim</a></li><li class="navelem"><a class="el" href="dir_09eea26cf0279feb9fcfb9b796a3e57e.xhtml">sl</a></li><li class="navelem"><a class="el" href="dir_6de13b49022bb7cfc6557e28050d5cbe.xhtml">canonical</a></li><li class="navelem"><a class="el" href="_conversion_utils_8cpp.xhtml">ConversionUtils.cpp</a></li>
    <li class="footer">Generated on Wed Nov 23 2022 10:57:36 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
