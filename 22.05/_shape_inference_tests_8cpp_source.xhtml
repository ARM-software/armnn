<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/test/ShapeInferenceTests.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_shape_inference_tests_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ShapeInferenceTests.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_shape_inference_tests_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2020 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;doctest/doctest.h&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_8hpp.xhtml">armnn/Tensor.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_graph_8hpp.xhtml">Graph.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_internal_types_8hpp.xhtml">InternalTypes.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_fully_connected_layer_8hpp.xhtml">layers/FullyConnectedLayer.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_tensor_handle_8hpp.xhtml">armnn/backends/TensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_workload_data_8hpp.xhtml">armnn/backends/WorkloadData.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="_shape_inference_tests_8cpp.xhtml#aa15b378df025bb4bef59c44472b193d4">   17</a></span>&#160;<a class="code" href="_shape_inference_tests_8cpp.xhtml#aa15b378df025bb4bef59c44472b193d4">TEST_SUITE</a>(<span class="stringliteral">&quot;ShapeInferenceTests&quot;</span>)</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;constexpr <span class="keyword">const</span> <span class="keywordtype">bool</span> maskPermutations[6][4] = {{<span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>},</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;                                               {<span class="keyword">true</span>,  <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>},</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;                                               {<span class="keyword">false</span>, <span class="keyword">true</span>,  <span class="keyword">false</span>, <span class="keyword">false</span>},</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                                               {<span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>,  <span class="keyword">false</span>},</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                                               {<span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>,  <span class="keyword">true</span>},</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                                               {<span class="keyword">true</span>,  <span class="keyword">true</span>,  <span class="keyword">true</span>,  <span class="keyword">true</span>}};</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> LayerT, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;LayerT* BuildGraph(<a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>* graph, <span class="keyword">const</span> std::vector&lt;TensorShape&gt;&amp; inputShapes, Args &amp;&amp;... args)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keyword">auto</span> layer = graph-&gt;<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;LayerT&gt;(std::forward&lt;Args&gt;(args)...);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    uint32_t inputCount = 0;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> inputShape : inputShapes)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo(inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keyword">auto</span> input = graph-&gt;<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(inputCount), <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        input-&gt;GetOutputSlot().SetTensorInfo(inputTensorInfo);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        input-&gt;GetOutputSlot().Connect(layer-&gt;GetInputSlot(inputCount));</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        inputCount++;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">return</span> layer;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> LayerT&gt;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keywordtype">void</span> RunShapeInferenceTest(LayerT* <span class="keyword">const</span> layer,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                           <span class="keyword">const</span> std::vector&lt;std::initializer_list&lt;unsigned int&gt;&gt; dimensionSizeLists)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    std::vector&lt;unsigned int&gt; numDimensions;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    std::vector&lt;TensorShape&gt; expectedOutputShapes;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> dimensionSizeList : dimensionSizeLists)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        numDimensions.emplace_back(dimensionSizeList.size());</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        expectedOutputShapes.emplace_back(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(dimensionSizeList));</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputSize = layer-&gt;GetNumOutputSlots();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> runTestWithMask = [&amp;](<span class="keyword">const</span> <span class="keywordtype">bool</span> maskPermutations[])</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputSize; ++i)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            layer-&gt;GetOutputSlot(i).SetTensorInfo({{numDimensions[i], dimensionSizeLists[i].begin(), maskPermutations},</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                                                  <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>});</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        layer-&gt;ValidateTensorShapesFromInputs();</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputSize; ++i)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            CHECK(layer-&gt;GetOutputSlot(i).GetTensorInfo().GetShape() == expectedOutputShapes[i]);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    };</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="comment">// Test inference with Dimensionality::NotSpecified</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; outputSize; ++j)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        layer-&gt;GetOutputSlot(j).SetTensorInfo({<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">Dimensionality::NotSpecified</a>), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>});</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    layer-&gt;SetShapeInferenceMethod(<a class="code" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">ShapeInferenceMethod::ValidateOnly</a>);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    CHECK_THROWS_AS(layer-&gt;ValidateTensorShapesFromInputs(), <a class="code" href="classarmnn_1_1_layer_validation_exception.xhtml">LayerValidationException</a>);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    layer-&gt;SetShapeInferenceMethod(<a class="code" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb">ShapeInferenceMethod::InferAndValidate</a>);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    layer-&gt;ValidateTensorShapesFromInputs();</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputSize; ++i)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        CHECK(layer-&gt;GetOutputSlot(i).GetTensorInfo().GetShape() == expectedOutputShapes[i]);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Test inference with Dimensionality::Specified and various combinations of dimensions of unknown size</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numDimensions[0]; ++i)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        runTestWithMask(maskPermutations[i]);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="comment">// maskPermutations[5] equates to all dimensions being known</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    runTestWithMask(maskPermutations[5]);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> LayerT, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keywordtype">void</span> CreateGraphAndRunTest(<span class="keyword">const</span> std::vector&lt;TensorShape&gt;&amp; inputShapes,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                           <span class="keyword">const</span> std::vector&lt;std::initializer_list&lt;unsigned int&gt;&gt; dimensionSizeLists,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                           Args &amp;&amp;... args)</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;{</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph(<span class="keyword">true</span>);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">auto</span> layer = BuildGraph&lt;LayerT&gt;(&amp;graph, inputShapes, std::forward&lt;Args&gt;(args)...);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    RunShapeInferenceTest&lt;LayerT&gt;(layer, dimensionSizeLists);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;TEST_CASE(<span class="stringliteral">&quot;NetworkOptionsTest&quot;</span>)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;     <a class="code" href="structarmnn_1_1_backend_options.xhtml">BackendOptions</a> ShapeInferenceMethodOption(<span class="stringliteral">&quot;ShapeInferenceMethod&quot;</span>,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;     {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        { <span class="stringliteral">&quot;InferAndValidate&quot;</span>, <span class="keyword">true</span> }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;     });</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> network = <a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>({ShapeInferenceMethodOption});</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> tensorInfo({ 5, 7, 6, 2 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">auto</span> inputLayer = network-&gt;AddInputLayer(1, <span class="stringliteral">&quot;inputLayer&quot;</span>);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    inputLayer-&gt;GetOutputSlot(0).SetTensorInfo(tensorInfo);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> descriptor;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">ActivationFunction::Abs</a>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">auto</span> activationLayer = network-&gt;AddActivationLayer(descriptor, <span class="stringliteral">&quot;activation&quot;</span>);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    inputLayer-&gt;GetOutputSlot(0).Connect(activationLayer-&gt;GetInputSlot(0));</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    activationLayer-&gt;GetOutputSlot(0).SetTensorInfo({<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>{<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">Dimensionality::NotSpecified</a>}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>});</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    CHECK_NOTHROW(activationLayer-&gt;GetOutputSlot(0).IsTensorInfoSet());</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    CHECK(activationLayer-&gt;GetOutputSlot(0).GetTensorInfo() == tensorInfo);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    ShapeInferenceMethodOption = <a class="code" href="structarmnn_1_1_backend_options.xhtml">BackendOptions</a>(<span class="stringliteral">&quot;ShapeInferenceMethod&quot;</span>,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                               {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                                       { <span class="stringliteral">&quot;InferAndValidate&quot;</span>, <span class="keyword">false</span> }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                                               });</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    network = <a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>({ShapeInferenceMethodOption});</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    inputLayer = network-&gt;AddInputLayer(1, <span class="stringliteral">&quot;inputLayer&quot;</span>);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    inputLayer-&gt;GetOutputSlot(0).SetTensorInfo(tensorInfo);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    activationLayer = network-&gt;AddActivationLayer(descriptor, <span class="stringliteral">&quot;activation&quot;</span>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    inputLayer-&gt;GetOutputSlot(0).Connect(activationLayer-&gt;GetInputSlot(0));</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    activationLayer-&gt;GetOutputSlot(0).SetTensorInfo({<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>{<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">Dimensionality::NotSpecified</a>}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>});</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    CHECK_NOTHROW(activationLayer-&gt;GetOutputSlot(0).IsTensorInfoSet());</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    network = <a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    inputLayer = network-&gt;AddInputLayer(1, <span class="stringliteral">&quot;inputLayer&quot;</span>);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    inputLayer-&gt;GetOutputSlot(0).SetTensorInfo(tensorInfo);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    activationLayer = network-&gt;AddActivationLayer(descriptor, <span class="stringliteral">&quot;activation&quot;</span>);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    inputLayer-&gt;GetOutputSlot(0).Connect(activationLayer-&gt;GetInputSlot(0));</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    activationLayer-&gt;GetOutputSlot(0).SetTensorInfo({<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>{<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">Dimensionality::NotSpecified</a>}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>});</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    CHECK_NOTHROW(activationLayer-&gt;GetOutputSlot(0).IsTensorInfoSet());</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;TEST_CASE(<span class="stringliteral">&quot;AbsTest&quot;</span>)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;{</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> descriptor;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">ActivationFunction::Abs</a>;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    CreateGraphAndRunTest&lt;ActivationLayer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }}, descriptor, <span class="stringliteral">&quot;activation&quot;</span>);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;TEST_CASE(<span class="stringliteral">&quot;AdditionTest&quot;</span>)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;{</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    CreateGraphAndRunTest&lt;AdditionLayer&gt;({{ 5, 7, 6, 2 }, { 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }}, <span class="stringliteral">&quot;add&quot;</span>);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;TEST_CASE(<span class="stringliteral">&quot;ArgMinMaxTest&quot;</span>)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">armnn::ArgMinMaxDescriptor</a> descriptor;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml#ab1ae6f520bb1a4da191a0ae907477f23">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#ae7e8cbf71db6a490789ca6dcaa8deeaea78d811e98514cd165dda532286610fd2">ArgMinMaxFunction::Min</a>;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">m_Axis</a> = 1;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    CreateGraphAndRunTest&lt;ArgMinMaxLayer&gt;({{ 1, 3, 2, 4 }}, {{ 1, 2, 4 }}, descriptor, <span class="stringliteral">&quot;argMinMax&quot;</span>);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;TEST_CASE(<span class="stringliteral">&quot;BatchNormalizationTest&quot;</span>)</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> descriptor;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    CreateGraphAndRunTest&lt;BatchNormalizationLayer&gt;({{ 1, 2, 3, 2 }}, {{ 1, 2, 3, 2 }}, descriptor, <span class="stringliteral">&quot;batchNorm&quot;</span>);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;}</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;TEST_CASE(<span class="stringliteral">&quot;BatchToSpaceNdTest&quot;</span>)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> descriptor;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    std::vector&lt;unsigned int&gt; blockShape {2, 2};</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; crops = {{0, 0}, {0, 0}};</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">m_BlockShape</a> = blockShape;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a3941f674c071c9503e00d2b59e92e454">m_Crops</a> = crops;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    CreateGraphAndRunTest&lt;BatchToSpaceNdLayer&gt;({{ 4, 2, 2, 1 }}, {{ 1, 4, 4, 1 }}, descriptor, <span class="stringliteral">&quot;batchtospacend&quot;</span>);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;TEST_CASE(<span class="stringliteral">&quot;ComparisionTest&quot;</span>)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;{</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> descriptor;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_comparison_descriptor.xhtml#a865dc4f43cb0ff01a1dcf78036912fd1">m_Operation</a> = <a class="code" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a>;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    CreateGraphAndRunTest&lt;ComparisonLayer&gt;({{ 5, 7, 6, 2 }, { 5, 7, 6, 2 }},</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                           {{ 5, 7, 6, 2 }},</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                           descriptor,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                           <span class="stringliteral">&quot;comparision&quot;</span>);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;TEST_CASE(<span class="stringliteral">&quot;ConcatTest&quot;</span>)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;{</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <a class="code" href="structarmnn_1_1_origins_descriptor.xhtml">ConcatDescriptor</a> descriptor(2, 3);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a2b125117aa61f9baf3a9cb8658aa61a2">SetViewOriginCoord</a>(0, 0, 0);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a2b125117aa61f9baf3a9cb8658aa61a2">SetViewOriginCoord</a>(1, 0, 1);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    CreateGraphAndRunTest&lt;ConcatLayer&gt;({{ 1, 2, 1 }, { 1, 2, 1 }}, {{ 2, 2, 1 }}, descriptor, <span class="stringliteral">&quot;concat&quot;</span>);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;}</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;TEST_CASE(<span class="stringliteral">&quot;ConstantTest&quot;</span>)</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;{</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape{ 1, 1, 3, 3 };</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">auto</span> layer = BuildGraph&lt;ConstantLayer&gt;(&amp;graph, {}, <span class="stringliteral">&quot;constant&quot;</span>);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> Datum = 0.0f;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> output0({outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>}, &amp;Datum);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    layer-&gt;m_LayerOutput = std::make_unique&lt;ScopedTensorHandle&gt;(output0);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    layer-&gt;GetOutputSlot(0).SetTensorInfo({{1, 1, 3, 3}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>});</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    layer-&gt;ValidateTensorShapesFromInputs();</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    CHECK(layer-&gt;GetOutputSlot(0).GetTensorInfo().GetShape() == outputShape);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;TEST_CASE(<span class="stringliteral">&quot;ConvertBf16ToFp32Test&quot;</span>)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;{</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    CreateGraphAndRunTest&lt;ConvertBf16ToFp32Layer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }}, <span class="stringliteral">&quot;floor&quot;</span>);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;}</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;TEST_CASE(<span class="stringliteral">&quot;ConvertFp16ToBf16Test&quot;</span>)</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;{</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> tensorShape{5, 7, 6, 2};</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    CreateGraphAndRunTest&lt;ConvertFp32ToBf16Layer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }}, <span class="stringliteral">&quot;floor&quot;</span>);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;}</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;TEST_CASE(<span class="stringliteral">&quot;ConvertFp16ToFp32Test&quot;</span>)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;{</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    CreateGraphAndRunTest&lt;ConvertFp16ToFp32Layer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }}, <span class="stringliteral">&quot;floor&quot;</span>);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;}</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;TEST_CASE(<span class="stringliteral">&quot;ConvertFp32ToFp16Test&quot;</span>)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    CreateGraphAndRunTest&lt;ConvertFp32ToFp16Layer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }}, <span class="stringliteral">&quot;floor&quot;</span>);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;TEST_CASE(<span class="stringliteral">&quot;Convolution2dTest&quot;</span>)</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;{</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputShape{1, 1, 10, 10};</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> descriptor;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a> = 0;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a> = 0;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a> = 0;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a> = 0;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a> = 1;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a> = 1;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa3c6a77a963a98ccb8ea7b8fd008a8c1">m_DilationX</a> = 3;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a302b688d88dd73cde0fb1faef6679907">m_DilationY</a> = 3;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    CreateGraphAndRunTest&lt;Convolution2dLayer&gt;({ inputShape, { 1, 1, 3, 3 } },</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                              { { 1, 1, 4, 4 } }, descriptor,</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                              <span class="stringliteral">&quot;convd&quot;</span>);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;}</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;TEST_CASE(<span class="stringliteral">&quot;DebugLayerTest&quot;</span>)</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;{</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> tensorShape;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    CreateGraphAndRunTest&lt;DebugLayer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }}, <span class="stringliteral">&quot;debug&quot;</span>);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;}</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;TEST_CASE(<span class="stringliteral">&quot;DepthToSpaceTest&quot;</span>)</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;{</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">DepthToSpaceDescriptor</a> descriptor;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6c6b8957f1e176867e5fb05b1a1a1486">m_BlockSize</a> = 2;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    CreateGraphAndRunTest&lt;DepthToSpaceLayer&gt;({{ 1, 1, 1, 8}}, {{ 1, 2, 2, 2 }}, descriptor, <span class="stringliteral">&quot;depthtospace&quot;</span>);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;}</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;TEST_CASE(<span class="stringliteral">&quot;DepthwiseConvolutionTest&quot;</span>)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;{</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> descriptor;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a> = 2;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a> = 1;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a> = 0;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a> = 0;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a> = 1;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a> = 1;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aa3c6a77a963a98ccb8ea7b8fd008a8c1">m_DilationX</a> = 0;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a302b688d88dd73cde0fb1faef6679907">m_DilationY</a> = 0;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    CreateGraphAndRunTest&lt;DepthwiseConvolution2dLayer&gt;({{ 8, 16, 2, 1 },   <span class="comment">// input</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                                                        { 2, 5, 3, 2 }},   <span class="comment">// weights</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                                                       {{ 8, 18, 1, 2 }}, <span class="comment">// output</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                                                       descriptor,</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                                                       <span class="stringliteral">&quot;conv2d&quot;</span>);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;}</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;TEST_CASE(<span class="stringliteral">&quot;DequantizeTest&quot;</span>)</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;{</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> tensorShape{5, 7, 6, 2};</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    CreateGraphAndRunTest&lt;DequantizeLayer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }}, <span class="stringliteral">&quot;dequantize&quot;</span>);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;}</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;TEST_CASE(<span class="stringliteral">&quot;DetectionPostProcessTest&quot;</span>)</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;{</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> detectionBoxesInfo{ 1, 3, 4 };</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> detectionScoresInfo{ 1, 3, 4 };</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> detectionClassesInfo{ 1, 3, 4 };</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a> descriptor;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">m_UseRegularNms</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">m_MaxDetections</a> = 3;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a9ae2c9796692ebeafe19a4d3f09c8ea8">m_MaxClassesPerDetection</a> = 1;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7e2f87544b8bc7e497e1dec8d3ca4055">m_DetectionsPerClass</a> =1;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a4392dd6b4862cc9cf95ae8f1001ba592">m_NmsScoreThreshold</a> = 0.0;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a53c8a7f33a40e1e240256bcfcf41b101">m_NmsIouThreshold</a> = 0.5;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">m_NumClasses</a> = 2;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7a2156ec7d9c012ce00bbcc6afcb9028">m_ScaleY</a> = 10.0;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae64523937ea910030ad66fee6fddd51f">m_ScaleX</a> = 10.0;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#aa61510cbd529870182e918ac6e8b9d72">m_ScaleH</a> = 5.0;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ab509802c659de19929f18bad14a35c58">m_ScaleW</a> = 5.0;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> Datum = 0.0f;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> anchorsTensor({{1, 1, 3, 3}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>}, &amp;Datum);</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keyword">auto</span> layer = BuildGraph&lt;DetectionPostProcessLayer&gt;(&amp;graph,</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                                                       {detectionBoxesInfo, detectionScoresInfo},</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                                       descriptor,</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                                                       <span class="stringliteral">&quot;detectionpostprocess&quot;</span>);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    layer-&gt;m_Anchors = std::make_unique&lt;ScopedTensorHandle&gt;(anchorsTensor);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    RunShapeInferenceTest&lt;DetectionPostProcessLayer&gt;(layer, {{ 1, 3, 4 }, { 1, 3  }, { 1, 3 }, { 1 }});</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;}</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;TEST_CASE(<span class="stringliteral">&quot;FakeQuantizationTest&quot;</span>)</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;{</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <a class="code" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a> descriptor;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_fake_quantization_descriptor.xhtml#ad3729c591f7bfda7ad9ef9927d8a1bd6">m_Max</a> = 1;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_fake_quantization_descriptor.xhtml#a4c14a8e0d126891dd0c38e7584312bfd">m_Min</a> = 1;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    CreateGraphAndRunTest&lt;FakeQuantizationLayer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }}, descriptor, <span class="stringliteral">&quot;fakequantization&quot;</span>);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;}</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;TEST_CASE(<span class="stringliteral">&quot;FloorTest&quot;</span>)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;{</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> tensorShape{5, 7, 6, 2};</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    CreateGraphAndRunTest&lt;FloorLayer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }}, <span class="stringliteral">&quot;floor&quot;</span>);</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;}</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;TEST_CASE(<span class="stringliteral">&quot;FullyConnectedTest&quot;</span>)</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;{</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputWidth = 3u;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputHeight = 2u;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputChannels = 1u;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputChannels = 2u;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    CreateGraphAndRunTest&lt;FullyConnectedLayer&gt;({{ 1, inputChannels, inputHeight, inputWidth }, <span class="comment">// input</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                                { inputChannels, outputChannels }},            <span class="comment">// weights</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                               {{ 1, outputChannels }},                        <span class="comment">// output</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                                               <a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a>(),</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                                               <span class="stringliteral">&quot;fc&quot;</span>);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;}</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;TEST_CASE(<span class="stringliteral">&quot;GatherTest&quot;</span>)</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;{</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    CreateGraphAndRunTest&lt;GatherLayer&gt;({{ 7, 6, 2}, {2,3}}, {{ 2, 3, 6, 2 }}, <a class="code" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a>(), <span class="stringliteral">&quot;gather&quot;</span>);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;}</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;TEST_CASE(<span class="stringliteral">&quot;InstanceNormalizationTest&quot;</span>)</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;{</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> tensorShape{5, 7, 6, 2};</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    CreateGraphAndRunTest&lt;InstanceNormalizationLayer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }},</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                                                      <a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a>(),</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                                                      <span class="stringliteral">&quot;instancenorm&quot;</span>);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;}</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;TEST_CASE(<span class="stringliteral">&quot;L2NormalizationTest&quot;</span>)</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;{</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> tensorShape{5, 7, 6, 2};</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    CreateGraphAndRunTest&lt;L2NormalizationLayer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }},</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                                <a class="code" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a>(),</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                                <span class="stringliteral">&quot;l2norm&quot;</span>);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;}</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;TEST_CASE(<span class="stringliteral">&quot;LogSoftMaxTest&quot;</span>)</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;{</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> tensorShape{5, 7, 6, 2};</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    CreateGraphAndRunTest&lt;LogSoftmaxLayer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }}, <a class="code" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a>(), <span class="stringliteral">&quot;logsoftmax&quot;</span>);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;}</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;TEST_CASE(<span class="stringliteral">&quot;LstmTest&quot;</span>)</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;{</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputShape{2, 5};</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputCellState{2, 20};</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> expectedOutputShape{2, 20};</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> descriptor;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> = 4;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keyword">auto</span> layer = BuildGraph&lt;LstmLayer&gt;(&amp;graph, {inputShape, inputCellState, inputCellState}, descriptor, <span class="stringliteral">&quot;lstm&quot;</span>);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keywordtype">float</span> Datum = 0.0f;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> constTensor({{ 2, 5, 3, 2 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>}, &amp;Datum);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    layer-&gt;m_BasicParameters.m_InputToCellWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    layer-&gt;m_BasicParameters.m_InputToForgetWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    layer-&gt;m_BasicParameters.m_CellBias = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    layer-&gt;m_BasicParameters.m_ForgetGateBias = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    layer-&gt;m_CifgParameters.m_InputGateBias = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    layer-&gt;m_BasicParameters.m_OutputGateBias = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    layer-&gt;m_BasicParameters.m_RecurrentToForgetWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    layer-&gt;m_BasicParameters.m_RecurrentToCellWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    layer-&gt;m_BasicParameters.m_InputToOutputWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    layer-&gt;m_BasicParameters.m_RecurrentToOutputWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    layer-&gt;m_CifgParameters.m_RecurrentToInputWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    layer-&gt;m_CifgParameters.m_InputToInputWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    RunShapeInferenceTest&lt;LstmLayer&gt;(layer, {{2, 80}, {2, 20}, {2, 20}, {2, 20}});</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;}</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;TEST_CASE(<span class="stringliteral">&quot;MeanLayerTest&quot;</span>)</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;{</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <a class="code" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> descriptor;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_mean_descriptor.xhtml#a1f0d67b087c491248bd1cde3ff995a95">m_Axis</a> = {0};</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    CreateGraphAndRunTest&lt;MeanLayer&gt;({{ 5, 7, 6, 2 }}, {{ 7, 6, 2 }}, descriptor, <span class="stringliteral">&quot;mean&quot;</span>);</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;}</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;TEST_CASE(<span class="stringliteral">&quot;MemCopyTest&quot;</span>)</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;{</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    CreateGraphAndRunTest&lt;MemCopyLayer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }}, <span class="stringliteral">&quot;memcopy&quot;</span>);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;}</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;TEST_CASE(<span class="stringliteral">&quot;MemImportTest&quot;</span>)</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;{</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    CreateGraphAndRunTest&lt;MemImportLayer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }}, <span class="stringliteral">&quot;memomport&quot;</span>);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;}</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;TEST_CASE(<span class="stringliteral">&quot;MergeTest&quot;</span>)</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;{</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> tensorShape{ 5, 7, 6, 2 };</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    CreateGraphAndRunTest&lt;MergeLayer&gt;({ { 5, 7, 6, 2 }, { 5, 7, 6, 2 } }, {{ 5, 7, 6, 2 }}, <span class="stringliteral">&quot;merge&quot;</span>);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;}</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;TEST_CASE(<span class="stringliteral">&quot;NormalizationTest&quot;</span>)</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;{</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> tensorShape{5, 7, 6, 2};</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    CreateGraphAndRunTest&lt;NormalizationLayer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }}, <a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a>(), <span class="stringliteral">&quot;l2norm&quot;</span>);</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;}</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PermuteTest&quot;</span>)</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> descriptor;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_permute_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">m_DimMappings</a> = {0U, 2U, 3U, 1U};</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    CreateGraphAndRunTest&lt;PermuteLayer&gt;({{ 1, 2, 2, 3 }}, {{ 1, 3, 2, 2 }}, descriptor, <span class="stringliteral">&quot;permute&quot;</span>);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;}</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;TEST_CASE(<span class="stringliteral">&quot;Pooling2dTest&quot;</span>)</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;{</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a> descriptor;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a0031997bf43bd2747656c31e4977793a">m_PoolType</a> = <a class="code" href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718a6a061313d22e51e0f25b7cd4dc065233">armnn::PoolingAlgorithm::Max</a>;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">m_PoolWidth</a> = descriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">m_PoolHeight</a> = 3;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a> = 2;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a> = 4;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a> = descriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a> = 3;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a> = descriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a> = 0;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#affb5b68b3eba3ed45a06c7cde7781962">m_OutputShapeRounding</a> = <a class="code" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::OutputShapeRounding::Floor</a>;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a8c29d6ea9b4186d69aad5961c910939c">m_PaddingMethod</a> = <a class="code" href="namespacearmnn.xhtml#a3888429b6ebc79f9a7df549e5e4d9a2fa843f2812f595e7ec7c5036e89fde02d6">armnn::PaddingMethod::Exclude</a>;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    CreateGraphAndRunTest&lt;Pooling2dLayer&gt;({{ 1, 2, 8, 13 }}, {{ 1, 2, 2, 8 }}, descriptor, <span class="stringliteral">&quot;pooling2d&quot;</span>);</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;}</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;TEST_CASE(<span class="stringliteral">&quot;QLstmTest&quot;</span>)</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;{</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputShape{2, 5};</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputCellState{2, 20};</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> expectedOutputShape{2, 20};</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> descriptor;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keyword">auto</span> layer = BuildGraph&lt;QLstmLayer&gt;(&amp;graph, {inputShape, inputCellState, inputCellState}, descriptor, <span class="stringliteral">&quot;qlstm&quot;</span>);</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <span class="keywordtype">float</span> Datum = 0.0f;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> constTensor({{ 2, 5, 3, 2 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>}, &amp;Datum);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    layer-&gt;m_BasicParameters.m_InputToCellWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    layer-&gt;m_BasicParameters.m_InputToForgetWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    layer-&gt;m_BasicParameters.m_CellBias = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    layer-&gt;m_BasicParameters.m_ForgetGateBias = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    layer-&gt;m_CifgParameters.m_InputGateBias = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    layer-&gt;m_BasicParameters.m_OutputGateBias = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    layer-&gt;m_BasicParameters.m_RecurrentToForgetWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    layer-&gt;m_BasicParameters.m_RecurrentToCellWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    layer-&gt;m_BasicParameters.m_InputToOutputWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    layer-&gt;m_BasicParameters.m_RecurrentToOutputWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    layer-&gt;m_CifgParameters.m_RecurrentToInputWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    layer-&gt;m_CifgParameters.m_InputToInputWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    RunShapeInferenceTest&lt;QLstmLayer&gt;(layer, {{2, 20}, {2, 20}, {2, 20}});</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;}</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;TEST_CASE(<span class="stringliteral">&quot;QuantizedLstmTest&quot;</span>)</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;{</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputShape{2, 5};</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputCellState{2, 20};</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> expectedOutputShape{2, 20};</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <span class="keyword">auto</span> layer = BuildGraph&lt;QuantizedLstmLayer&gt;(&amp;graph, {inputShape, inputCellState, inputCellState},  <span class="stringliteral">&quot;quatizedlstm&quot;</span>);</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="keywordtype">float</span> Datum = 0.0f;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> constTensor({{ 2, 5, 3, 2 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>}, &amp;Datum);</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_InputToCellWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_InputToForgetWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_CellBias = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_ForgetGateBias = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_InputGateBias = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_OutputGateBias = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_RecurrentToForgetWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_RecurrentToCellWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_InputToOutputWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_RecurrentToOutputWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_RecurrentToInputWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    layer-&gt;m_QuantizedLstmParameters.m_InputToInputWeights = std::make_unique&lt;ScopedTensorHandle&gt;(constTensor);</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    RunShapeInferenceTest&lt;QuantizedLstmLayer&gt;(layer, {{2, 20}, {2, 20}, {2, 20}});</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;}</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;TEST_CASE(<span class="stringliteral">&quot;QuantizeTest&quot;</span>)</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;{</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> tensorShape { 5, 4, 7, 6 };</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    CreateGraphAndRunTest&lt;QuantizeLayer&gt;({{ 5, 7, 6, 2 }}, {{ 5, 7, 6, 2 }}, <span class="stringliteral">&quot;mean&quot;</span>);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;}</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;TEST_CASE(<span class="stringliteral">&quot;RankTest&quot;</span>)</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;{</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;   <span class="comment">// due to rank having a scalar output we need a custom test</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> expectedOutputs(<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681af60357a8d17e45793298323f1b372a74">Dimensionality::Scalar</a>);</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;   <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;   <span class="keyword">auto</span> layer = BuildGraph&lt;RankLayer&gt;(&amp;graph, {{ 1, 1, 1, 1 }},  <span class="stringliteral">&quot;rank&quot;</span>);</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;   layer-&gt;GetOutputSlot(0).SetTensorInfo({<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">Dimensionality::NotSpecified</a>), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>});</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;   CHECK_THROWS_AS(</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;           layer-&gt;ValidateTensorShapesFromInputs(), <a class="code" href="classarmnn_1_1_layer_validation_exception.xhtml">LayerValidationException</a>);</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;   layer-&gt;SetShapeInferenceMethod(<a class="code" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb">ShapeInferenceMethod::InferAndValidate</a>);</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    layer-&gt;ValidateTensorShapesFromInputs();</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;   CHECK(layer-&gt;GetOutputSlot(0).GetTensorInfo().GetShape() == expectedOutputs);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;   layer-&gt;GetOutputSlot(0).SetTensorInfo({<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(<a class="code" href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681af60357a8d17e45793298323f1b372a74">Dimensionality::Scalar</a>), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>});</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    layer-&gt;ValidateTensorShapesFromInputs();</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;   CHECK(layer-&gt;GetOutputSlot(0).GetTensorInfo().GetShape() == expectedOutputs);</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;}</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;TEST_CASE(<span class="stringliteral">&quot;ReshapeTest&quot;</span>)</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;{</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> descriptor;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml#a1178f4dafdda81f59c15145ec327f7d9">m_TargetShape</a> = { 1, 1, 1, 8 };</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    CreateGraphAndRunTest&lt;ReshapeLayer&gt;({{ 2, 2, 2, 2 }}, {{ 1, 1, 1, 8 }}, descriptor, <span class="stringliteral">&quot;reshape&quot;</span>);</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;}</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;TEST_CASE(<span class="stringliteral">&quot;ResizeTest&quot;</span>)</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;{</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <a class="code" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> descriptor;</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">m_TargetHeight</a> = 6;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">m_TargetWidth</a> = 2;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    CreateGraphAndRunTest&lt;ResizeLayer&gt;({{ 1, 7, 6, 2 }}, {{ 1, 7, 6, 2 }}, descriptor, <span class="stringliteral">&quot;resize&quot;</span>);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;}</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SliceTest&quot;</span>)</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;{</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <a class="code" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> descriptor;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_slice_descriptor.xhtml#a4939f00778f08d6c6fec6f74c0a59b7e">m_Begin</a>  = { 1, 0, 1, 2 };</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_slice_descriptor.xhtml#ab52cabf19232290fa6b49828ba957ac0">m_Size</a>   = { 2, 1, 2, 3 };</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    CreateGraphAndRunTest&lt;SliceLayer&gt;({{ 3, 2, 3, 5 }}, {{ 2, 1, 2, 3 }}, descriptor, <span class="stringliteral">&quot;mean&quot;</span>);</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;}</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SpaceToBatchNdTest&quot;</span>)</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;{</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> descriptor;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    std::vector&lt;unsigned int&gt; blockShape {2, 2};</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; padlist = {{0, 0}, {0, 0}};</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">m_BlockShape</a> = blockShape;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">m_PadList</a> = padlist;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    CreateGraphAndRunTest&lt;SpaceToBatchNdLayer&gt;({{ 1, 4, 4, 1 }}, {{ 4, 2, 2, 1 }}, descriptor, <span class="stringliteral">&quot;spacetobatchnd&quot;</span>);</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;}</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SpaceToDepth&quot;</span>)</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;{</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> descriptor;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6c6b8957f1e176867e5fb05b1a1a1486">m_BlockSize</a> = 2;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    CreateGraphAndRunTest&lt;SpaceToDepthLayer&gt;({{ 1, 2, 2, 2 }}, {{ 1, 1, 1, 8}}, descriptor, <span class="stringliteral">&quot;spacetodepth&quot;</span>);</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;}</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;TEST_CASE(<span class="stringliteral">&quot;SplitterTest&quot;</span>)</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;{</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <a class="code" href="structarmnn_1_1_views_descriptor.xhtml">SplitterDescriptor</a> descriptor(2, 3);</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#aae0893695f5803a3517985c7cb1ccb2e">SetViewSize</a>(0, 0, 1);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#aae0893695f5803a3517985c7cb1ccb2e">SetViewSize</a>(0, 1, 2);</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#aae0893695f5803a3517985c7cb1ccb2e">SetViewSize</a>(0, 2, 2);</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#aae0893695f5803a3517985c7cb1ccb2e">SetViewSize</a>(1, 0, 1);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#aae0893695f5803a3517985c7cb1ccb2e">SetViewSize</a>(1, 1, 2);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#aae0893695f5803a3517985c7cb1ccb2e">SetViewSize</a>(1, 2, 2);</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    CreateGraphAndRunTest&lt;SplitterLayer&gt;({{ 2, 2, 2 }}, {{ 1, 2, 2 }, { 1, 2, 2 }}, descriptor, <span class="stringliteral">&quot;splitter&quot;</span>);</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;}</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;TEST_CASE(<span class="stringliteral">&quot;StackTest&quot;</span>)</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;{</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <a class="code" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> descriptor;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_stack_descriptor.xhtml#ab218de7805899c8412d75d1fd1d846d2">m_Axis</a> = 0;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_stack_descriptor.xhtml#aed6086070440ceb94129bef06f70173f">m_NumInputs</a> = 2;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_stack_descriptor.xhtml#a2bea87b470268bb0b73457c3733dbc04">m_InputShape</a> = { 3, 2, 3 };</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    CreateGraphAndRunTest&lt;StackLayer&gt;({{ 3, 2, 3 }, { 3, 2, 3 }}, {{ 2, 3, 2, 3 }}, descriptor, <span class="stringliteral">&quot;stack&quot;</span>);</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;}</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;TEST_CASE(<span class="stringliteral">&quot;StridedSliceTest&quot;</span>)</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;{</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> descriptor;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a118fe06b7c2599da60398ee311ede923">m_Begin</a>  = {0, 0, 0, 0};</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#aa68194dd6258ab5b04123005a066ea25">m_End</a>    = {3, 2, 3, 1};</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a0d53caff836b84204adbd1c28752a201">m_Stride</a> = {2, 2, 2, 1};</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    CreateGraphAndRunTest&lt;StridedSliceLayer&gt;({{ 3, 2, 3, 1 }}, {{ 2, 1, 2, 1 }}, descriptor, <span class="stringliteral">&quot;stridedslice&quot;</span>);</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;}</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;TEST_CASE(<span class="stringliteral">&quot;Switchtest&quot;</span>)</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;{</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    CreateGraphAndRunTest&lt;SwitchLayer&gt;({{ 3, 2, 3, 1 }, { 3, 2, 3, 1 }}, {{ 3, 2, 3, 1 }, { 3, 2, 3, 1 }}, <span class="stringliteral">&quot;switch&quot;</span>);</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;}</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;TEST_CASE(<span class="stringliteral">&quot;TransposeConvolution2dTest&quot;</span>)</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;{</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> descriptor;</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a118fe06b7c2599da60398ee311ede923">m_Begin</a>  = {0, 0, 0, 0};</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#aa68194dd6258ab5b04123005a066ea25">m_End</a>    = {3, 2, 3, 1};</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a0d53caff836b84204adbd1c28752a201">m_Stride</a> = {2, 2, 2, 1};</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    CreateGraphAndRunTest&lt;StridedSliceLayer&gt;({{ 3, 2, 3, 1 }}, {{ 2, 1, 2, 1 }}, descriptor, <span class="stringliteral">&quot;t&quot;</span>);</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;}</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;TEST_CASE(<span class="stringliteral">&quot;TransposeTest&quot;</span>)</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;{</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a> descriptor;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">m_DimMappings</a> = {0U, 3U, 1U, 2U};</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    CreateGraphAndRunTest&lt;TransposeLayer&gt;({{ 1, 2, 2, 3 }}, {{ 1, 3, 2, 2 }}, descriptor, <span class="stringliteral">&quot;stridedslice&quot;</span>);</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;}</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;}</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::Convolution2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00537">Descriptors.hpp:537</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a6c9de81fc65b3c4924cab11907075a17"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">armnn::LstmDescriptor::m_ProjectionEnabled</a></div><div class="ttdeci">bool m_ProjectionEnabled</div><div class="ttdoc">Enable/disable the projection layer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01131">Descriptors.hpp:1131</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml_ab218de7805899c8412d75d1fd1d846d2"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml#ab218de7805899c8412d75d1fd1d846d2">armnn::StackDescriptor::m_Axis</a></div><div class="ttdeci">uint32_t m_Axis</div><div class="ttdoc">0-based axis along which to stack the input tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01254">Descriptors.hpp:1254</a></div></div>
<div class="ttc" id="structarmnn_1_1_views_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml">armnn::ViewsDescriptor</a></div><div class="ttdoc">A ViewsDescriptor for the SplitterLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00217">Descriptors.hpp:217</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ab509802c659de19929f18bad14a35c58"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ab509802c659de19929f18bad14a35c58">armnn::DetectionPostProcessDescriptor::m_ScaleW</a></div><div class="ttdeci">float m_ScaleW</div><div class="ttdoc">Center size encoding scale weight. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00728">Descriptors.hpp:728</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::Pooling2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00374">Descriptors.hpp:374</a></div></div>
<div class="ttc" id="_shape_inference_tests_8cpp_xhtml_aa15b378df025bb4bef59c44472b193d4"><div class="ttname"><a href="_shape_inference_tests_8cpp.xhtml#aa15b378df025bb4bef59c44472b193d4">TEST_SUITE</a></div><div class="ttdeci">TEST_SUITE(&quot;ShapeInferenceTests&quot;)</div><div class="ttdef"><b>Definition:</b> <a href="_shape_inference_tests_8cpp_source.xhtml#l00017">ShapeInferenceTests.cpp:17</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::DepthwiseConvolution2dDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00673">Descriptors.hpp:673</a></div></div>
<div class="ttc" id="_tensor_8hpp_xhtml"><div class="ttname"><a href="_tensor_8hpp.xhtml">Tensor.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::DepthwiseConvolution2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00663">Descriptors.hpp:663</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::Pooling2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00368">Descriptors.hpp:368</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc"><div class="ttname"><a href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681a4b7d504abac49ba24b4df86c129d3cbc">armnn::Dimensionality::NotSpecified</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5"><div class="ttname"><a href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">armnn::ComparisonOperation::Equal</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3"><div class="ttname"><a href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::OutputShapeRounding::Floor</a></div></div>
<div class="ttc" id="structarmnn_1_1_reshape_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a></div><div class="ttdoc">A ReshapeDescriptor for the ReshapeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01004">Descriptors.hpp:1004</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a118fe06b7c2599da60398ee311ede923"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a118fe06b7c2599da60398ee311ede923">armnn::StridedSliceDescriptor::m_Begin</a></div><div class="ttdeci">std::vector&lt; int &gt; m_Begin</div><div class="ttdoc">Begin values for the input that will be sliced. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01323">Descriptors.hpp:1323</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::DepthwiseConvolution2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00675">Descriptors.hpp:675</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="structarmnn_1_1_comparison_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_comparison_descriptor.xhtml">armnn::ComparisonDescriptor</a></div><div class="ttdoc">A ComparisonDescriptor for the ComparisonLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00089">Descriptors.hpp:89</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ae64523937ea910030ad66fee6fddd51f"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae64523937ea910030ad66fee6fddd51f">armnn::DetectionPostProcessDescriptor::m_ScaleX</a></div><div class="ttdeci">float m_ScaleX</div><div class="ttdoc">Center size encoding scale x. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00724">Descriptors.hpp:724</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml_a2bea87b470268bb0b73457c3733dbc04"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml#a2bea87b470268bb0b73457c3733dbc04">armnn::StackDescriptor::m_InputShape</a></div><div class="ttdeci">TensorShape m_InputShape</div><div class="ttdoc">Required shape of all input tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01258">Descriptors.hpp:1258</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_a7563c5b899e7d0ada08fd0fdb202f205"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">armnn::Graph::AddLayer</a></div><div class="ttdeci">LayerT * AddLayer(Args &amp;&amp;... args)</div><div class="ttdoc">Adds a new layer, of type LayerType, to the graph constructed with the arguments passed. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00425">Graph.hpp:425</a></div></div>
<div class="ttc" id="structarmnn_1_1_fake_quantization_descriptor_xhtml_a4c14a8e0d126891dd0c38e7584312bfd"><div class="ttname"><a href="structarmnn_1_1_fake_quantization_descriptor.xhtml#a4c14a8e0d126891dd0c38e7584312bfd">armnn::FakeQuantizationDescriptor::m_Min</a></div><div class="ttdeci">float m_Min</div><div class="ttdoc">Minimum value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00884">Descriptors.hpp:884</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a6d8fb685cc1ff224f25aa127fcf62c86"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">armnn::Pooling2dDescriptor::m_PoolWidth</a></div><div class="ttdeci">uint32_t m_PoolWidth</div><div class="ttdoc">Pooling width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00376">Descriptors.hpp:376</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a2837b4396f20c956952d1a7286cab5f8"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">armnn::QLstmDescriptor::m_PeepholeEnabled</a></div><div class="ttdeci">bool m_PeepholeEnabled</div><div class="ttdoc">Enable/disable peephole. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01401">Descriptors.hpp:1401</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a></div><div class="ttdoc">A Convolution2dDescriptor for the Convolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00499">Descriptors.hpp:499</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::DepthwiseConvolution2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00657">Descriptors.hpp:657</a></div></div>
<div class="ttc" id="structarmnn_1_1_slice_descriptor_xhtml_ab52cabf19232290fa6b49828ba957ac0"><div class="ttname"><a href="structarmnn_1_1_slice_descriptor.xhtml#ab52cabf19232290fa6b49828ba957ac0">armnn::SliceDescriptor::m_Size</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_Size</div><div class="ttdoc">Size of the slice in each dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01228">Descriptors.hpp:1228</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a3888429b6ebc79f9a7df549e5e4d9a2fa843f2812f595e7ec7c5036e89fde02d6"><div class="ttname"><a href="namespacearmnn.xhtml#a3888429b6ebc79f9a7df549e5e4d9a2fa843f2812f595e7ec7c5036e89fde02d6">armnn::PaddingMethod::Exclude</a></div><div class="ttdoc">The padding fields don&amp;#39;t count and are ignored. </div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a8c29d6ea9b4186d69aad5961c910939c"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a8c29d6ea9b4186d69aad5961c910939c">armnn::Pooling2dDescriptor::m_PaddingMethod</a></div><div class="ttdeci">PaddingMethod m_PaddingMethod</div><div class="ttdoc">The padding method to be used. (Exclude, IgnoreValue). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00386">Descriptors.hpp:386</a></div></div>
<div class="ttc" id="structarmnn_1_1_arg_min_max_descriptor_xhtml_ab1ae6f520bb1a4da191a0ae907477f23"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_descriptor.xhtml#ab1ae6f520bb1a4da191a0ae907477f23">armnn::ArgMinMaxDescriptor::m_Function</a></div><div class="ttdeci">ArgMinMaxFunction m_Function</div><div class="ttdoc">Specify if the function is to find Min or Max. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00081">Descriptors.hpp:81</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7e2f87544b8bc7e497e1dec8d3ca4055"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7e2f87544b8bc7e497e1dec8d3ca4055">armnn::DetectionPostProcessDescriptor::m_DetectionsPerClass</a></div><div class="ttdeci">uint32_t m_DetectionsPerClass</div><div class="ttdoc">Detections per classes, used in Regular NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00714">Descriptors.hpp:714</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::BatchToSpaceNdDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00867">Descriptors.hpp:867</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::Pooling2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00372">Descriptors.hpp:372</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::Convolution2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00533">Descriptors.hpp:533</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_a302b688d88dd73cde0fb1faef6679907"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a302b688d88dd73cde0fb1faef6679907">armnn::Convolution2dDescriptor::m_DilationY</a></div><div class="ttdeci">uint32_t m_DilationY</div><div class="ttdoc">Dilation along y axis. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00545">Descriptors.hpp:545</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::SpaceToDepthDescriptor</a></div><div class="ttdoc">A SpaceToDepthDescriptor for the SpaceToDepthLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01056">Descriptors.hpp:1056</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml_a85f98c94e11f65a6b73f831735c040f3"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">armnn::SpaceToBatchNdDescriptor::m_PadList</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; m_PadList</div><div class="ttdoc">Specifies the padding values for the input dimension: heightPad{top, bottom} widthPad{left, right}. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01050">Descriptors.hpp:1050</a></div></div>
<div class="ttc" id="_internal_types_8hpp_xhtml"><div class="ttname"><a href="_internal_types_8hpp.xhtml">InternalTypes.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_a302b688d88dd73cde0fb1faef6679907"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a302b688d88dd73cde0fb1faef6679907">armnn::DepthwiseConvolution2dDescriptor::m_DilationY</a></div><div class="ttdeci">uint32_t m_DilationY</div><div class="ttdoc">Dilation factor value for height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00671">Descriptors.hpp:671</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a></div><div class="ttdoc">A BatchToSpaceNdDescriptor for the BatchToSpaceNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00840">Descriptors.hpp:840</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::Pooling2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00380">Descriptors.hpp:380</a></div></div>
<div class="ttc" id="structarmnn_1_1_permute_descriptor_xhtml_a14433af2b223695b40d8c8f8ba2ebb8f"><div class="ttname"><a href="structarmnn_1_1_permute_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">armnn::PermuteDescriptor::m_DimMappings</a></div><div class="ttdeci">PermutationVector m_DimMappings</div><div class="ttdoc">Indicates how to translate tensor elements from a given source into the target destination, when source and target potentially have different memory layouts e.g. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00146">Descriptors.hpp:146</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a></div><div class="ttdoc">A ResizeBilinearDescriptor for the ResizeBilinearLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00966">Descriptors.hpp:966</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a9ae2c9796692ebeafe19a4d3f09c8ea8"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a9ae2c9796692ebeafe19a4d3f09c8ea8">armnn::DetectionPostProcessDescriptor::m_MaxClassesPerDetection</a></div><div class="ttdeci">uint32_t m_MaxClassesPerDetection</div><div class="ttdoc">Maximum numbers of classes per detection, used in Fast NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00712">Descriptors.hpp:712</a></div></div>
<div class="ttc" id="structarmnn_1_1_mean_descriptor_xhtml_a1f0d67b087c491248bd1cde3ff995a95"><div class="ttname"><a href="structarmnn_1_1_mean_descriptor.xhtml#a1f0d67b087c491248bd1cde3ff995a95">armnn::MeanDescriptor::m_Axis</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_Axis</div><div class="ttdoc">Values for the dimensions to reduce. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01171">Descriptors.hpp:1171</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml">armnn::StackDescriptor</a></div><div class="ttdoc">A StackDescriptor for the StackLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01232">Descriptors.hpp:1232</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::SpaceToBatchNdDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01052">Descriptors.hpp:1052</a></div></div>
<div class="ttc" id="structarmnn_1_1_reshape_descriptor_xhtml_a1178f4dafdda81f59c15145ec327f7d9"><div class="ttname"><a href="structarmnn_1_1_reshape_descriptor.xhtml#a1178f4dafdda81f59c15145ec327f7d9">armnn::ReshapeDescriptor::m_TargetShape</a></div><div class="ttdeci">TensorShape m_TargetShape</div><div class="ttdoc">Target shape value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01020">Descriptors.hpp:1020</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a5699e8606c37d18c03910b242cd1b010"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">armnn::Pooling2dDescriptor::m_PoolHeight</a></div><div class="ttdeci">uint32_t m_PoolHeight</div><div class="ttdoc">Pooling height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00378">Descriptors.hpp:378</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::Convolution2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00535">Descriptors.hpp:535</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ae72089bcab60ac175557f4241b16a014"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">armnn::DetectionPostProcessDescriptor::m_MaxDetections</a></div><div class="ttdeci">uint32_t m_MaxDetections</div><div class="ttdoc">Maximum numbers of detections. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00710">Descriptors.hpp:710</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::Convolution2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00539">Descriptors.hpp:539</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::DepthwiseConvolution2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00665">Descriptors.hpp:665</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a53c8a7f33a40e1e240256bcfcf41b101"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a53c8a7f33a40e1e240256bcfcf41b101">armnn::DetectionPostProcessDescriptor::m_NmsIouThreshold</a></div><div class="ttdeci">float m_NmsIouThreshold</div><div class="ttdoc">Intersection over union threshold. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00718">Descriptors.hpp:718</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::LstmDescriptor</a></div><div class="ttdoc">An LstmDescriptor for the LstmLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01083">Descriptors.hpp:1083</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::Pooling2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00370">Descriptors.hpp:370</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_aa3c6a77a963a98ccb8ea7b8fd008a8c1"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aa3c6a77a963a98ccb8ea7b8fd008a8c1">armnn::DepthwiseConvolution2dDescriptor::m_DilationX</a></div><div class="ttdeci">uint32_t m_DilationX</div><div class="ttdoc">Dilation factor value for width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00669">Descriptors.hpp:669</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::DepthwiseConvolution2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00661">Descriptors.hpp:661</a></div></div>
<div class="ttc" id="structarmnn_1_1_views_descriptor_xhtml_aae0893695f5803a3517985c7cb1ccb2e"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml#aae0893695f5803a3517985c7cb1ccb2e">armnn::ViewsDescriptor::SetViewSize</a></div><div class="ttdeci">Status SetViewSize(uint32_t view, uint32_t coord, uint32_t value)</div><div class="ttdoc">Set the size of the views. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00315">Descriptors.cpp:315</a></div></div>
<div class="ttc" id="structarmnn_1_1_slice_descriptor_xhtml_a4939f00778f08d6c6fec6f74c0a59b7e"><div class="ttname"><a href="structarmnn_1_1_slice_descriptor.xhtml#a4939f00778f08d6c6fec6f74c0a59b7e">armnn::SliceDescriptor::m_Begin</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_Begin</div><div class="ttdoc">Beginning indices of the slice in each dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01225">Descriptors.hpp:1225</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml_a02e143524aefddd40b485fcf7dea6696"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">armnn::BatchToSpaceNdDescriptor::m_BlockShape</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_BlockShape</div><div class="ttdoc">Block shape values. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00863">Descriptors.hpp:863</a></div></div>
<div class="ttc" id="structarmnn_1_1_l2_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_l2_normalization_descriptor.xhtml">armnn::L2NormalizationDescriptor</a></div><div class="ttdoc">A L2NormalizationDescriptor for the L2NormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00774">Descriptors.hpp:774</a></div></div>
<div class="ttc" id="_graph_8hpp_xhtml"><div class="ttname"><a href="_graph_8hpp.xhtml">Graph.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_arg_min_max_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_descriptor.xhtml">armnn::ArgMinMaxDescriptor</a></div><div class="ttdoc">An ArgMinMaxDescriptor for ArgMinMaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00067">Descriptors.hpp:67</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml">armnn::OriginsDescriptor</a></div><div class="ttdoc">An OriginsDescriptor for the ConcatLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00174">Descriptors.hpp:174</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a></div><div class="ttdoc">A FullyConnectedDescriptor for the FullyConnectedLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00468">Descriptors.hpp:468</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_validation_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer_validation_exception.xhtml">armnn::LayerValidationException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00105">Exceptions.hpp:105</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="structarmnn_1_1_fake_quantization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fake_quantization_descriptor.xhtml">armnn::FakeQuantizationDescriptor</a></div><div class="ttdoc">A FakeQuantizationDescriptor for the FakeQuantizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00871">Descriptors.hpp:871</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1"><div class="ttname"><a href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">armnn::ShapeInferenceMethod::ValidateOnly</a></div><div class="ttdoc">Validate all output shapes. </div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_adcf5037208faac36c0788239a073f75c"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">armnn::ResizeDescriptor::m_TargetWidth</a></div><div class="ttdeci">uint32_t m_TargetWidth</div><div class="ttdoc">Target width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00988">Descriptors.hpp:988</a></div></div>
<div class="ttc" id="structarmnn_1_1_gather_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_gather_descriptor.xhtml">armnn::GatherDescriptor</a></div><div class="ttdoc">A GatherDescriptor for the GatherLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00909">Descriptors.hpp:909</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a2837b4396f20c956952d1a7286cab5f8"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">armnn::LstmDescriptor::m_PeepholeEnabled</a></div><div class="ttdeci">bool m_PeepholeEnabled</div><div class="ttdoc">Enable/disable peephole. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01129">Descriptors.hpp:1129</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a3a04b0ccee4bb2f21721ee5045e83df4"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">armnn::DetectionPostProcessDescriptor::m_NumClasses</a></div><div class="ttdeci">uint32_t m_NumClasses</div><div class="ttdoc">Number of classes. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00720">Descriptors.hpp:720</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml">armnn::QLstmDescriptor</a></div><div class="ttdoc">A QLstmDescriptor for the QLstmLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01361">Descriptors.hpp:1361</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_tensor_handle_8hpp.xhtml">TensorHandle.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7ed9bc7c26df67d274d5dd4cd83adf0f"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">armnn::DetectionPostProcessDescriptor::m_UseRegularNms</a></div><div class="ttdeci">bool m_UseRegularNms</div><div class="ttdoc">Use Regular NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00722">Descriptors.hpp:722</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml_a02e143524aefddd40b485fcf7dea6696"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">armnn::SpaceToBatchNdDescriptor::m_BlockShape</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_BlockShape</div><div class="ttdoc">Block shape value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01047">Descriptors.hpp:1047</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a0d53caff836b84204adbd1c28752a201"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a0d53caff836b84204adbd1c28752a201">armnn::StridedSliceDescriptor::m_Stride</a></div><div class="ttdeci">std::vector&lt; int &gt; m_Stride</div><div class="ttdoc">Stride values for the input that will be sliced. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01327">Descriptors.hpp:1327</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00036">Descriptors.hpp:36</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml_aed6086070440ceb94129bef06f70173f"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml#aed6086070440ceb94129bef06f70173f">armnn::StackDescriptor::m_NumInputs</a></div><div class="ttdeci">uint32_t m_NumInputs</div><div class="ttdoc">Number of input tensors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01256">Descriptors.hpp:1256</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a46c3fa15c46fb0d1dcdc24d0ea5cb5cd"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">armnn::ResizeDescriptor::m_TargetHeight</a></div><div class="ttdeci">uint32_t m_TargetHeight</div><div class="ttdoc">Target height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00990">Descriptors.hpp:990</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_ae1b07ed928036004bd257169e5aeeef4"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">armnn::LstmDescriptor::m_ActivationFunc</a></div><div class="ttdeci">uint32_t m_ActivationFunc</div><div class="ttdoc">The activation function to use. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01121">Descriptors.hpp:1121</a></div></div>
<div class="ttc" id="structarmnn_1_1_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_slice_descriptor.xhtml">armnn::SliceDescriptor</a></div><div class="ttdoc">A SliceDescriptor for the SliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01209">Descriptors.hpp:1209</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::Convolution2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00541">Descriptors.hpp:541</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_descriptor_xhtml_a6c6b8957f1e176867e5fb05b1a1a1486"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6c6b8957f1e176867e5fb05b1a1a1486">armnn::SpaceToDepthDescriptor::m_BlockSize</a></div><div class="ttdeci">unsigned int m_BlockSize</div><div class="ttdoc">Scalar specifying the input block size. It must be &gt;= 1. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01073">Descriptors.hpp:1073</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_aa61510cbd529870182e918ac6e8b9d72"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#aa61510cbd529870182e918ac6e8b9d72">armnn::DetectionPostProcessDescriptor::m_ScaleH</a></div><div class="ttdeci">float m_ScaleH</div><div class="ttdoc">Center size encoding scale height. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00730">Descriptors.hpp:730</a></div></div>
<div class="ttc" id="structarmnn_1_1_comparison_descriptor_xhtml_a865dc4f43cb0ff01a1dcf78036912fd1"><div class="ttname"><a href="structarmnn_1_1_comparison_descriptor.xhtml#a865dc4f43cb0ff01a1dcf78036912fd1">armnn::ComparisonDescriptor::m_Operation</a></div><div class="ttdeci">ComparisonOperation m_Operation</div><div class="ttdoc">Specifies the comparison operation to execute. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00105">Descriptors.hpp:105</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_aa68194dd6258ab5b04123005a066ea25"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#aa68194dd6258ab5b04123005a066ea25">armnn::StridedSliceDescriptor::m_End</a></div><div class="ttdeci">std::vector&lt; int &gt; m_End</div><div class="ttdoc">End values for the input that will be sliced. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01325">Descriptors.hpp:1325</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">armnn::SpaceToBatchNdDescriptor</a></div><div class="ttdoc">A SpaceToBatchNdDescriptor for the SpaceToBatchNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01024">Descriptors.hpp:1024</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a></div><div class="ttdoc">Struct for the users to pass backend specific options. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00022">BackendOptions.hpp:22</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8e1f31031ad31cd8cc22d7c9daa32681af60357a8d17e45793298323f1b372a74"><div class="ttname"><a href="namespacearmnn.xhtml#a8e1f31031ad31cd8cc22d7c9daa32681af60357a8d17e45793298323f1b372a74">armnn::Dimensionality::Scalar</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_aa3c6a77a963a98ccb8ea7b8fd008a8c1"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa3c6a77a963a98ccb8ea7b8fd008a8c1">armnn::Convolution2dDescriptor::m_DilationX</a></div><div class="ttdeci">uint32_t m_DilationX</div><div class="ttdoc">Dilation along x axis. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00543">Descriptors.hpp:543</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::SpaceToDepthDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01076">Descriptors.hpp:1076</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_ad474e5c51a0b194ef32e812b86c0cbdb"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">armnn::LstmDescriptor::m_CifgEnabled</a></div><div class="ttdeci">bool m_CifgEnabled</div><div class="ttdoc">Enable/disable cifg (coupled input &amp; forget gate). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01127">Descriptors.hpp:1127</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac14705405cbcdd580df613de6766fe65"><div class="ttname"><a href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">armnn::LogSoftmaxDescriptor</a></div><div class="ttdeci">SoftmaxDescriptor LogSoftmaxDescriptor</div><div class="ttdoc">A LogSoftmaxDescriptor for the LogSoftmaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00169">Descriptors.hpp:169</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a0031997bf43bd2747656c31e4977793a"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a0031997bf43bd2747656c31e4977793a">armnn::Pooling2dDescriptor::m_PoolType</a></div><div class="ttdeci">PoolingAlgorithm m_PoolType</div><div class="ttdoc">The pooling algorithm to use (Max. Average, L2). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00366">Descriptors.hpp:366</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::DepthwiseConvolution2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00667">Descriptors.hpp:667</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml_a3941f674c071c9503e00d2b59e92e454"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a3941f674c071c9503e00d2b59e92e454">armnn::BatchToSpaceNdDescriptor::m_Crops</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; m_Crops</div><div class="ttdoc">The values to crop from the input dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00865">Descriptors.hpp:865</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_a6c9de81fc65b3c4924cab11907075a17"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">armnn::QLstmDescriptor::m_ProjectionEnabled</a></div><div class="ttdeci">bool m_ProjectionEnabled</div><div class="ttdoc">Enable/disable the projection layer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01403">Descriptors.hpp:1403</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_affb5b68b3eba3ed45a06c7cde7781962"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#affb5b68b3eba3ed45a06c7cde7781962">armnn::Pooling2dDescriptor::m_OutputShapeRounding</a></div><div class="ttdeci">OutputShapeRounding m_OutputShapeRounding</div><div class="ttdoc">The rounding method for the output shape. (Floor, Ceiling). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00384">Descriptors.hpp:384</a></div></div>
<div class="ttc" id="classarmnn_1_1_input_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_input_layer.xhtml">armnn::InputLayer</a></div><div class="ttdoc">A layer user-provided data can be bound to (e.g. inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_input_layer_8hpp_source.xhtml#l00013">InputLayer.hpp:13</a></div></div>
<div class="ttc" id="_fully_connected_layer_8hpp_xhtml"><div class="ttname"><a href="_fully_connected_layer_8hpp.xhtml">FullyConnectedLayer.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_mean_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mean_descriptor.xhtml">armnn::MeanDescriptor</a></div><div class="ttdoc">A MeanDescriptor for the MeanLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01153">Descriptors.hpp:1153</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb"><div class="ttname"><a href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb">armnn::ShapeInferenceMethod::InferAndValidate</a></div><div class="ttdoc">Infer missing output shapes and validate all output shapes. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_a961bbfe1db71a848eff5a1f0ab775718a6a061313d22e51e0f25b7cd4dc065233"><div class="ttname"><a href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718a6a061313d22e51e0f25b7cd4dc065233">armnn::PoolingAlgorithm::Max</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a></div><div class="ttdoc">A TransposeDescriptor for the TransposeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01471">Descriptors.hpp:1471</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a></div><div class="ttdoc">A StridedSliceDescriptor for the StridedSliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01284">Descriptors.hpp:1284</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="structarmnn_1_1_arg_min_max_descriptor_xhtml_a214c3636fdf0ea5bac8edb42d0e6c7f0"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">armnn::ArgMinMaxDescriptor::m_Axis</a></div><div class="ttdeci">int m_Axis</div><div class="ttdoc">Axis to reduce across the input tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00083">Descriptors.hpp:83</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7a2156ec7d9c012ce00bbcc6afcb9028"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7a2156ec7d9c012ce00bbcc6afcb9028">armnn::DetectionPostProcessDescriptor::m_ScaleY</a></div><div class="ttdeci">float m_ScaleY</div><div class="ttdoc">Center size encoding scale y. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00726">Descriptors.hpp:726</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a4392dd6b4862cc9cf95ae8f1001ba592"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a4392dd6b4862cc9cf95ae8f1001ba592">armnn::DetectionPostProcessDescriptor::m_NmsScoreThreshold</a></div><div class="ttdeci">float m_NmsScoreThreshold</div><div class="ttdoc">NMS score threshold. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00716">Descriptors.hpp:716</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00241">INetwork.hpp:241</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a></div><div class="ttdoc">A Pooling2dDescriptor for the Pooling2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00332">Descriptors.hpp:332</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a></div><div class="ttdoc">A NormalizationDescriptor for the NormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00734">Descriptors.hpp:734</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00678">Descriptors.hpp:678</a></div></div>
<div class="ttc" id="structarmnn_1_1_instance_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml">armnn::InstanceNormalizationDescriptor</a></div><div class="ttdoc">An InstanceNormalizationDescriptor for InstanceNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00812">Descriptors.hpp:812</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00476">Network.cpp:476</a></div></div>
<div class="ttc" id="structarmnn_1_1_fake_quantization_descriptor_xhtml_ad3729c591f7bfda7ad9ef9927d8a1bd6"><div class="ttname"><a href="structarmnn_1_1_fake_quantization_descriptor.xhtml#ad3729c591f7bfda7ad9ef9927d8a1bd6">armnn::FakeQuantizationDescriptor::m_Max</a></div><div class="ttdeci">float m_Max</div><div class="ttdoc">Maximum value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00886">Descriptors.hpp:886</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml_ad474e5c51a0b194ef32e812b86c0cbdb"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">armnn::QLstmDescriptor::m_CifgEnabled</a></div><div class="ttdeci">bool m_CifgEnabled</div><div class="ttdoc">Enable/disable CIFG (coupled input &amp; forget gate). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01399">Descriptors.hpp:1399</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_descriptor_xhtml_a14433af2b223695b40d8c8f8ba2ebb8f"><div class="ttname"><a href="structarmnn_1_1_transpose_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">armnn::TransposeDescriptor::m_DimMappings</a></div><div class="ttdeci">PermutationVector m_DimMappings</div><div class="ttdoc">Indicates how to translate tensor elements from a given source into the target destination, when source and target potentially have different memory layouts e.g. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01488">Descriptors.hpp:1488</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_af10fa7883e3579950f477bee92a64844"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">armnn::ActivationDescriptor::m_Function</a></div><div class="ttdeci">ActivationFunction m_Function</div><div class="ttdoc">The activation function to use (Sigmoid, TanH, Linear, ReLu, BoundedReLu, SoftReLu, LeakyReLu, Abs, Sqrt, Square, Elu). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00059">Descriptors.hpp:59</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::Pooling2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00382">Descriptors.hpp:382</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a></div><div class="ttdoc">A DepthwiseConvolution2dDescriptor for the DepthwiseConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00624">Descriptors.hpp:624</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a></div><div class="ttdoc">A BatchNormalizationDescriptor for the BatchNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00793">Descriptors.hpp:793</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::Convolution2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00531">Descriptors.hpp:531</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_workload_data_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_workload_data_8hpp.xhtml">WorkloadData.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml_a2b125117aa61f9baf3a9cb8658aa61a2"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml#a2b125117aa61f9baf3a9cb8658aa61a2">armnn::OriginsDescriptor::SetViewOriginCoord</a></div><div class="ttdeci">Status SetViewOriginCoord(uint32_t view, uint32_t coord, uint32_t value)</div><div class="ttdoc">Set the view origin coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00167">Descriptors.cpp:167</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae7e8cbf71db6a490789ca6dcaa8deeaea78d811e98514cd165dda532286610fd2"><div class="ttname"><a href="namespacearmnn.xhtml#ae7e8cbf71db6a490789ca6dcaa8deeaea78d811e98514cd165dda532286610fd2">armnn::ArgMinMaxFunction::Min</a></div></div>
<div class="ttc" id="structarmnn_1_1_permute_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a></div><div class="ttdoc">A PermuteDescriptor for the PermuteLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00129">Descriptors.hpp:129</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::DepthwiseConvolution2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00659">Descriptors.hpp:659</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_9d86fd1fbecbedf5bdb69c7e7235fe5f.xhtml">test</a></li><li class="navelem"><a class="el" href="_shape_inference_tests_8cpp.xhtml">ShapeInferenceTests.cpp</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:26:33 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
