<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: SampleDynamicWorkloadFactory Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classsdb_1_1_sample_dynamic_workload_factory.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classsdb_1_1_sample_dynamic_workload_factory-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SampleDynamicWorkloadFactory Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml">SampleDynamicWorkloadFactory.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for SampleDynamicWorkloadFactory:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsdb_1_1_sample_dynamic_workload_factory.png" usemap="#SampleDynamicWorkloadFactory_map" alt=""/>
  <map id="SampleDynamicWorkloadFactory_map" name="SampleDynamicWorkloadFactory_map">
<area href="classarmnn_1_1_i_workload_factory.xhtml" alt="IWorkloadFactory" shape="rect" coords="0,0,199,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a45ed6052be045e15e81d1377b1a92f24"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a45ed6052be045e15e81d1377b1a92f24">SampleDynamicWorkloadFactory</a> (const std::shared_ptr&lt; <a class="el" href="classsdb_1_1_sample_memory_manager.xhtml">SampleMemoryManager</a> &gt; &amp;memoryManager)</td></tr>
<tr class="separator:a45ed6052be045e15e81d1377b1a92f24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95614d4751bdcb17307e50a091635efb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a95614d4751bdcb17307e50a091635efb">SampleDynamicWorkloadFactory</a> ()</td></tr>
<tr class="separator:a95614d4751bdcb17307e50a091635efb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1be7b0504ec103774af49b1ff1fbb6f5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a1be7b0504ec103774af49b1ff1fbb6f5">~SampleDynamicWorkloadFactory</a> ()</td></tr>
<tr class="separator:a1be7b0504ec103774af49b1ff1fbb6f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5dac93c38aa9f9108f89b7f4acc2beb"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#ae5dac93c38aa9f9108f89b7f4acc2beb">GetBackendId</a> () const override</td></tr>
<tr class="separator:ae5dac93c38aa9f9108f89b7f4acc2beb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed0a782f32856bde72bc10d9381dc11e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">SupportsSubTensors</a> () const override</td></tr>
<tr class="separator:aed0a782f32856bde72bc10d9381dc11e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a803d8d97e76968a19caa6ca110af8bb7"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a803d8d97e76968a19caa6ca110af8bb7">CreateSubTensorHandle</a> (<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a> &amp;parent, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> const &amp;subTensorShape, unsigned int const *subTensorOrigin) const override</td></tr>
<tr class="separator:a803d8d97e76968a19caa6ca110af8bb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afeebce3ac305675b16d1065d0cb5a362"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#afeebce3ac305675b16d1065d0cb5a362">CreateTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;tensorInfo, const bool IsMemoryManaged=true) const override</td></tr>
<tr class="separator:afeebce3ac305675b16d1065d0cb5a362"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a729d5c6a0304731cb12830c69d25ec6a"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a729d5c6a0304731cb12830c69d25ec6a">CreateTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;tensorInfo, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a> dataLayout, const bool IsMemoryManaged=true) const override</td></tr>
<tr class="separator:a729d5c6a0304731cb12830c69d25ec6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73ac5e3f91727655f742643013215a2b"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">armnn::IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a73ac5e3f91727655f742643013215a2b">CreateAddition</a> (const <a class="el" href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> &amp;info) const override</td></tr>
<tr class="separator:a73ac5e3f91727655f742643013215a2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e7b63e791ca559838c81aec0e18fb46"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">armnn::IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a3e7b63e791ca559838c81aec0e18fb46">CreateInput</a> (const <a class="el" href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">armnn::InputQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> &amp;info) const override</td></tr>
<tr class="separator:a3e7b63e791ca559838c81aec0e18fb46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8ea7b9d330f8828aedb2374914808c3"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">armnn::IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#ac8ea7b9d330f8828aedb2374914808c3">CreateOutput</a> (const <a class="el" href="namespacearmnn.xhtml#a37a1a6b381ccc76df203fee023234996">armnn::OutputQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> &amp;info) const override</td></tr>
<tr class="separator:ac8ea7b9d330f8828aedb2374914808c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_workload_factory"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_workload_factory')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td></tr>
<tr class="memitem:aab62208f96483015c29ad58549efedd8 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aab62208f96483015c29ad58549efedd8">~IWorkloadFactory</a> ()</td></tr>
<tr class="separator:aab62208f96483015c29ad58549efedd8 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54a596adc0162c80f33a6cda4f33a6ef inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a54a596adc0162c80f33a6cda4f33a6ef">AfterWorkloadsCreated</a> ()</td></tr>
<tr class="separator:a54a596adc0162c80f33a6cda4f33a6ef inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13060ebb89d2c21a7a5d897e99cccf72 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a> (<a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> type, const <a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a13060ebb89d2c21a7a5d897e99cccf72 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a58a47e731eae3f09651e3f2451920f0a"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a58a47e731eae3f09651e3f2451920f0a">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a58a47e731eae3f09651e3f2451920f0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classarmnn_1_1_i_workload_factory"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classarmnn_1_1_i_workload_factory')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td></tr>
<tr class="memitem:a74dc9ec1a223eab8b072368b2dacee87 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;backendId, const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a74dc9ec1a223eab8b072368b2dacee87 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d94ea841143b76fe08ccb308839bfd7 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a7d94ea841143b76fe08ccb308839bfd7">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a7d94ea841143b76fe08ccb308839bfd7 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaff50773427132e1066a7de56a53db1 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aeaff50773427132e1066a7de56a53db1">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions)</td></tr>
<tr class="separator:aeaff50773427132e1066a7de56a53db1 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52ba8d60c6582a847ef7bc914116d394 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a52ba8d60c6582a847ef7bc914116d394">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;backendId, const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions)</td></tr>
<tr class="separator:a52ba8d60c6582a847ef7bc914116d394 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00016">16</a> of file <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml">SampleDynamicWorkloadFactory.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a45ed6052be045e15e81d1377b1a92f24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45ed6052be045e15e81d1377b1a92f24">&#9670;&nbsp;</a></span>SampleDynamicWorkloadFactory() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a> </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classsdb_1_1_sample_memory_manager.xhtml">SampleMemoryManager</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00022">22</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    : m_MemoryManager(memoryManager)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a95614d4751bdcb17307e50a091635efb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95614d4751bdcb17307e50a091635efb">&#9670;&nbsp;</a></span>SampleDynamicWorkloadFactory() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00027">27</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    : m_MemoryManager(<span class="keyword">new</span> SampleMemoryManager())</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1be7b0504ec103774af49b1ff1fbb6f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1be7b0504ec103774af49b1ff1fbb6f5">&#9670;&nbsp;</a></span>~SampleDynamicWorkloadFactory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00022">22</a> of file <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml">SampleDynamicWorkloadFactory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00032">SampleDynamicWorkloadFactory::GetBackendId()</a>, and <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00037">SampleDynamicWorkloadFactory::IsLayerSupported()</a>.</p>
<div class="fragment"><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a73ac5e3f91727655f742643013215a2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73ac5e3f91727655f742643013215a2b">&#9670;&nbsp;</a></span>CreateAddition()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">armnn::IWorkload</a> &gt; CreateAddition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00059">59</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00033">SampleDynamicWorkloadFactory::CreateSubTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;SampleDynamicAdditionWorkload&gt;(descriptor, info);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a3e7b63e791ca559838c81aec0e18fb46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e7b63e791ca559838c81aec0e18fb46">&#9670;&nbsp;</a></span>CreateInput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">armnn::IWorkload</a> &gt; CreateInput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">armnn::InputQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00066">66</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00033">SampleDynamicWorkloadFactory::CreateSubTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;armnn::CopyMemGenericWorkload&gt;(descriptor, info);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac8ea7b9d330f8828aedb2374914808c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8ea7b9d330f8828aedb2374914808c3">&#9670;&nbsp;</a></span>CreateOutput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">armnn::IWorkload</a> &gt; CreateOutput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a37a1a6b381ccc76df203fee023234996">armnn::OutputQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00073">73</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00033">SampleDynamicWorkloadFactory::CreateSubTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;armnn::CopyMemGenericWorkload&gt;(descriptor, info);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a803d8d97e76968a19caa6ca110af8bb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a803d8d97e76968a19caa6ca110af8bb7">&#9670;&nbsp;</a></span>CreateSubTensorHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a>&gt; CreateSubTensorHandle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a> &amp;&#160;</td>
          <td class="paramname"><em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> const &amp;&#160;</td>
          <td class="paramname"><em>subTensorShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int const *&#160;</td>
          <td class="paramname"><em>subTensorOrigin</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac043991b839903b2ba9da884e4020848">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00033">33</a> of file <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml">SampleDynamicWorkloadFactory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00043">ARMNN_DEPRECATED_MSG</a>, <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00059">SampleDynamicWorkloadFactory::CreateAddition()</a>, <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00066">SampleDynamicWorkloadFactory::CreateInput()</a>, <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00073">SampleDynamicWorkloadFactory::CreateOutput()</a>, <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00044">SampleDynamicWorkloadFactory::CreateTensorHandle()</a>, and <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(parent, subTensorShape, subTensorOrigin);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afeebce3ac305675b16d1065d0cb5a362"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afeebce3ac305675b16d1065d0cb5a362">&#9670;&nbsp;</a></span>CreateTensorHandle() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a> &gt; CreateTensorHandle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>IsMemoryManaged</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00044">44</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00033">SampleDynamicWorkloadFactory::CreateSubTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;armnn::ScopedTensorHandle&gt;(tensorInfo);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a729d5c6a0304731cb12830c69d25ec6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a729d5c6a0304731cb12830c69d25ec6a">&#9670;&nbsp;</a></span>CreateTensorHandle() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a> &gt; CreateTensorHandle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a>&#160;</td>
          <td class="paramname"><em>dataLayout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>IsMemoryManaged</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af0b0226f767fd570877710b84c7caa2a">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;armnn::ScopedTensorHandle&gt;(tensorInfo);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae5dac93c38aa9f9108f89b7f4acc2beb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5dac93c38aa9f9108f89b7f4acc2beb">&#9670;&nbsp;</a></span>GetBackendId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &amp; GetBackendId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9f7e4296485d2812e7996089149c96d1">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00022">SampleDynamicWorkloadFactory::~SampleDynamicWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">return</span> s_Id;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a58a47e731eae3f09651e3f2451920f0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58a47e731eae3f09651e3f2451920f0a">&#9670;&nbsp;</a></span>IsLayerSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> &amp;&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> &gt;&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>outReasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_mock_backend_8cpp_source.xhtml#l00060">armnn::IsLayerSupported()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00022">SampleDynamicWorkloadFactory::~SampleDynamicWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a138ca3929b888fa8d9088c076e9de48c">IWorkloadFactory::IsLayerSupported</a>(s_Id, layer, dataType, outReasonIfUnsupported);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a138ca3929b888fa8d9088c076e9de48c"><div class="ttname"><a href="namespacearmnn.xhtml#a138ca3929b888fa8d9088c076e9de48c">armnn::IsLayerSupported</a></div><div class="ttdeci">bool IsLayerSupported(const armnn::Layer *layer)</div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_8cpp_source.xhtml#l00060">MockBackend.cpp:60</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aed0a782f32856bde72bc10d9381dc11e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed0a782f32856bde72bc10d9381dc11e">&#9670;&nbsp;</a></span>SupportsSubTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SupportsSubTensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a37f4eba7877deb34f4d8d64c9bcb9ab5">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml#l00030">30</a> of file <a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml">SampleDynamicWorkloadFactory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00043">ARMNN_DEPRECATED_MSG</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/dynamic/sample/<a class="el" href="_sample_dynamic_workload_factory_8hpp_source.xhtml">SampleDynamicWorkloadFactory.hpp</a></li>
<li>src/dynamic/sample/<a class="el" href="_sample_dynamic_workload_factory_8cpp_source.xhtml">SampleDynamicWorkloadFactory.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacesdb.xhtml">sdb</a></li><li class="navelem"><a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml">SampleDynamicWorkloadFactory</a></li>
    <li class="footer">Generated on Fri Feb 24 2023 10:24:34 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
