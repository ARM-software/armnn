<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: BatchMatMulQueueDescriptor Struct Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('structarmnn_1_1_batch_mat_mul_queue_descriptor.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="structarmnn_1_1_batch_mat_mul_queue_descriptor-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">BatchMatMulQueueDescriptor Struct Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml">WorkloadData.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for BatchMatMulQueueDescriptor:</div>
<div class="dyncontent">
 <div class="center">
  <img src="structarmnn_1_1_batch_mat_mul_queue_descriptor.png" usemap="#BatchMatMulQueueDescriptor_map" alt=""/>
  <map id="BatchMatMulQueueDescriptor_map" name="BatchMatMulQueueDescriptor_map">
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; BatchMatMulDescriptor &gt;" shape="rect" coords="0,56,354,80"/>
<area href="structarmnn_1_1_queue_descriptor.xhtml" alt="QueueDescriptor" shape="rect" coords="0,0,354,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a041e495449e22774a34d92b0904c10bf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_batch_mat_mul_queue_descriptor.xhtml#a041e495449e22774a34d92b0904c10bf">Validate</a> (const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;workloadInfo) const</td></tr>
<tr class="separator:a041e495449e22774a34d92b0904c10bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_structarmnn_1_1_queue_descriptor_with_parameters"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_structarmnn_1_1_queue_descriptor_with_parameters')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml">QueueDescriptorWithParameters&lt; BatchMatMulDescriptor &gt;</a></td></tr>
<tr class="memitem:aceed736aeebb38dea25ee734a6bacba5 inherit pub_methods_structarmnn_1_1_queue_descriptor_with_parameters"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aceed736aeebb38dea25ee734a6bacba5">~QueueDescriptorWithParameters</a> ()=default</td></tr>
<tr class="separator:aceed736aeebb38dea25ee734a6bacba5 inherit pub_methods_structarmnn_1_1_queue_descriptor_with_parameters"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_structarmnn_1_1_queue_descriptor"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_structarmnn_1_1_queue_descriptor')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a></td></tr>
<tr class="memitem:a4cb2ebdad75dcaac215c8a1a3d62f315 inherit pub_methods_structarmnn_1_1_queue_descriptor"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a4cb2ebdad75dcaac215c8a1a3d62f315">~QueueDescriptor</a> ()=default</td></tr>
<tr class="separator:a4cb2ebdad75dcaac215c8a1a3d62f315 inherit pub_methods_structarmnn_1_1_queue_descriptor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a089f647d882d65f657d7984e5f505f7c inherit pub_methods_structarmnn_1_1_queue_descriptor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a089f647d882d65f657d7984e5f505f7c">ValidateTensorNumDimensions</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensor, std::string const &amp;descName, unsigned int numDimensions, std::string const &amp;tensorName) const</td></tr>
<tr class="separator:a089f647d882d65f657d7984e5f505f7c inherit pub_methods_structarmnn_1_1_queue_descriptor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a30194ce14c088a2625ccc8c3e9d155 inherit pub_methods_structarmnn_1_1_queue_descriptor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a8a30194ce14c088a2625ccc8c3e9d155">ValidateTensorNumDimNumElem</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, unsigned int numDimension, unsigned int numElements, std::string const &amp;tensorName) const</td></tr>
<tr class="separator:a8a30194ce14c088a2625ccc8c3e9d155 inherit pub_methods_structarmnn_1_1_queue_descriptor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a765d2cee4ccce5b9467e0c2b6d25b84a inherit pub_methods_structarmnn_1_1_queue_descriptor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a765d2cee4ccce5b9467e0c2b6d25b84a">ValidateInputsOutputs</a> (const std::string &amp;descName, unsigned int numExpectedIn, unsigned int numExpectedOut) const</td></tr>
<tr class="separator:a765d2cee4ccce5b9467e0c2b6d25b84a inherit pub_methods_structarmnn_1_1_queue_descriptor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0428f0a7927f8c29264d9c9a287840da inherit pub_methods_structarmnn_1_1_queue_descriptor"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0428f0a7927f8c29264d9c9a287840da inherit pub_methods_structarmnn_1_1_queue_descriptor"><td class="memTemplItemLeft" align="right" valign="top">const T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a0428f0a7927f8c29264d9c9a287840da">GetAdditionalInformation</a> () const</td></tr>
<tr class="separator:a0428f0a7927f8c29264d9c9a287840da inherit pub_methods_structarmnn_1_1_queue_descriptor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_attribs_structarmnn_1_1_queue_descriptor_with_parameters"><td colspan="2" onclick="javascript:toggleInherit('pub_attribs_structarmnn_1_1_queue_descriptor_with_parameters')"><img src="closed.png" alt="-"/>&#160;Public Attributes inherited from <a class="el" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml">QueueDescriptorWithParameters&lt; BatchMatMulDescriptor &gt;</a></td></tr>
<tr class="memitem:aad91b9bbf7aa365d304febe79a3d1333 inherit pub_attribs_structarmnn_1_1_queue_descriptor_with_parameters"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml">BatchMatMulDescriptor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a></td></tr>
<tr class="separator:aad91b9bbf7aa365d304febe79a3d1333 inherit pub_attribs_structarmnn_1_1_queue_descriptor_with_parameters"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_attribs_structarmnn_1_1_queue_descriptor"><td colspan="2" onclick="javascript:toggleInherit('pub_attribs_structarmnn_1_1_queue_descriptor')"><img src="closed.png" alt="-"/>&#160;Public Attributes inherited from <a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a></td></tr>
<tr class="memitem:a4b50e46a6810018f3edecfb68b2a76b3 inherit pub_attribs_structarmnn_1_1_queue_descriptor"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a></td></tr>
<tr class="separator:a4b50e46a6810018f3edecfb68b2a76b3 inherit pub_attribs_structarmnn_1_1_queue_descriptor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6abd491bb99ffe88bd472c1ae5a1ed1a inherit pub_attribs_structarmnn_1_1_queue_descriptor"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a></td></tr>
<tr class="separator:a6abd491bb99ffe88bd472c1ae5a1ed1a inherit pub_attribs_structarmnn_1_1_queue_descriptor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f2e6134cabedfc58aa53fe38a2b8a67 inherit pub_attribs_structarmnn_1_1_queue_descriptor"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a2f2e6134cabedfc58aa53fe38a2b8a67">m_AdditionalInfoObject</a></td></tr>
<tr class="separator:a2f2e6134cabedfc58aa53fe38a2b8a67 inherit pub_attribs_structarmnn_1_1_queue_descriptor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ef8ddbeee4b869e4c68eb2ed278b8d9 inherit pub_attribs_structarmnn_1_1_queue_descriptor"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a9ef8ddbeee4b869e4c68eb2ed278b8d9">m_AllowExpandedDims</a> = false</td></tr>
<tr class="separator:a9ef8ddbeee4b869e4c68eb2ed278b8d9 inherit pub_attribs_structarmnn_1_1_queue_descriptor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_structarmnn_1_1_queue_descriptor_with_parameters"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_structarmnn_1_1_queue_descriptor_with_parameters')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml">QueueDescriptorWithParameters&lt; BatchMatMulDescriptor &gt;</a></td></tr>
<tr class="memitem:a6f269eb32757efa5b203091c52e985fd inherit pro_methods_structarmnn_1_1_queue_descriptor_with_parameters"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#a6f269eb32757efa5b203091c52e985fd">QueueDescriptorWithParameters</a> ()=default</td></tr>
<tr class="separator:a6f269eb32757efa5b203091c52e985fd inherit pro_methods_structarmnn_1_1_queue_descriptor_with_parameters"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cbdcaa9cab857077a3810788e2cf489 inherit pro_methods_structarmnn_1_1_queue_descriptor_with_parameters"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#a6cbdcaa9cab857077a3810788e2cf489">QueueDescriptorWithParameters</a> (<a class="el" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml">QueueDescriptorWithParameters</a> const &amp;)=default</td></tr>
<tr class="separator:a6cbdcaa9cab857077a3810788e2cf489 inherit pro_methods_structarmnn_1_1_queue_descriptor_with_parameters"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa86bd03df9faf133a34e263f16486707 inherit pro_methods_structarmnn_1_1_queue_descriptor_with_parameters"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml">QueueDescriptorWithParameters</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aa86bd03df9faf133a34e263f16486707">operator=</a> (<a class="el" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml">QueueDescriptorWithParameters</a> const &amp;)=default</td></tr>
<tr class="separator:aa86bd03df9faf133a34e263f16486707 inherit pro_methods_structarmnn_1_1_queue_descriptor_with_parameters"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_structarmnn_1_1_queue_descriptor"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_structarmnn_1_1_queue_descriptor')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a></td></tr>
<tr class="memitem:ab088ef357662bcea45cbd49674ad0ff7 inherit pro_methods_structarmnn_1_1_queue_descriptor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#ab088ef357662bcea45cbd49674ad0ff7">QueueDescriptor</a> ()</td></tr>
<tr class="separator:ab088ef357662bcea45cbd49674ad0ff7 inherit pro_methods_structarmnn_1_1_queue_descriptor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75d3b85e1e50b1dff74ee84a593d089e inherit pro_methods_structarmnn_1_1_queue_descriptor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a75d3b85e1e50b1dff74ee84a593d089e">QueueDescriptor</a> (<a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> const &amp;)=default</td></tr>
<tr class="separator:a75d3b85e1e50b1dff74ee84a593d089e inherit pro_methods_structarmnn_1_1_queue_descriptor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c928b975a0de05cf2536c721ba6b521 inherit pro_methods_structarmnn_1_1_queue_descriptor"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a1c928b975a0de05cf2536c721ba6b521">operator=</a> (<a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> const &amp;)=default</td></tr>
<tr class="separator:a1c928b975a0de05cf2536c721ba6b521 inherit pro_methods_structarmnn_1_1_queue_descriptor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00788">788</a> of file <a class="el" href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml">WorkloadData.hpp</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a041e495449e22774a34d92b0904c10bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a041e495449e22774a34d92b0904c10bf">&#9670;&nbsp;</a></span>Validate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>workloadInfo</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_data_8cpp_source.xhtml#l04146">4146</a> of file <a class="el" href="_workload_data_8cpp_source.xhtml">WorkloadData.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::BFloat16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::Float16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00508">BatchMatMulDescriptor::GetAxesNotMul()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00459">BatchMatMulDescriptor::GetAxesToMul()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00018">WorkloadInfo::m_InputTensorInfos</a>, <a class="el" href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00019">WorkloadInfo::m_OutputTensorInfos</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015">armnn::NCDHW</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">armnn::NDHWC</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, and <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::QSymmS16</a>.</p>
<div class="fragment"><div class="line"><a name="l04147"></a><span class="lineno"> 4147</span>&#160;{</div><div class="line"><a name="l04148"></a><span class="lineno"> 4148</span>&#160;    <span class="keyword">const</span> std::string descriptorName{<span class="stringliteral">&quot;BatchMatMulDescriptor&quot;</span>};</div><div class="line"><a name="l04149"></a><span class="lineno"> 4149</span>&#160;</div><div class="line"><a name="l04150"></a><span class="lineno"> 4150</span>&#160;    ValidateNumInputs(workloadInfo,  descriptorName, 2);</div><div class="line"><a name="l04151"></a><span class="lineno"> 4151</span>&#160;    ValidateNumOutputs(workloadInfo, descriptorName, 1);</div><div class="line"><a name="l04152"></a><span class="lineno"> 4152</span>&#160;</div><div class="line"><a name="l04153"></a><span class="lineno"> 4153</span>&#160;    <span class="comment">// Inputs must be: both 2D+</span></div><div class="line"><a name="l04154"></a><span class="lineno"> 4154</span>&#160;    <span class="comment">// For inputs X and Y whose dimensions to be multiplied are (M,N) and (I,J) respectively,</span></div><div class="line"><a name="l04155"></a><span class="lineno"> 4155</span>&#160;    <span class="comment">// axes N and I must be the same size</span></div><div class="line"><a name="l04156"></a><span class="lineno"> 4156</span>&#160;</div><div class="line"><a name="l04157"></a><span class="lineno"> 4157</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; inputTensorXInfo = workloadInfo.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>[0];</div><div class="line"><a name="l04158"></a><span class="lineno"> 4158</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; inputTensorYInfo = workloadInfo.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>[1];</div><div class="line"><a name="l04159"></a><span class="lineno"> 4159</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; outputTensorInfo = workloadInfo.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>[0];</div><div class="line"><a name="l04160"></a><span class="lineno"> 4160</span>&#160;</div><div class="line"><a name="l04161"></a><span class="lineno"> 4161</span>&#160;    std::vector&lt;DataType&gt; supportedTypes =</div><div class="line"><a name="l04162"></a><span class="lineno"> 4162</span>&#160;    {</div><div class="line"><a name="l04163"></a><span class="lineno"> 4163</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">DataType::BFloat16</a>,</div><div class="line"><a name="l04164"></a><span class="lineno"> 4164</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>,</div><div class="line"><a name="l04165"></a><span class="lineno"> 4165</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>,</div><div class="line"><a name="l04166"></a><span class="lineno"> 4166</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">DataType::QAsymmS8</a>,</div><div class="line"><a name="l04167"></a><span class="lineno"> 4167</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>,</div><div class="line"><a name="l04168"></a><span class="lineno"> 4168</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">DataType::QSymmS16</a></div><div class="line"><a name="l04169"></a><span class="lineno"> 4169</span>&#160;    };</div><div class="line"><a name="l04170"></a><span class="lineno"> 4170</span>&#160;</div><div class="line"><a name="l04171"></a><span class="lineno"> 4171</span>&#160;    ValidateDataTypes(inputTensorXInfo, supportedTypes, descriptorName);</div><div class="line"><a name="l04172"></a><span class="lineno"> 4172</span>&#160;    ValidateDataTypes(inputTensorYInfo, supportedTypes, descriptorName);</div><div class="line"><a name="l04173"></a><span class="lineno"> 4173</span>&#160;    ValidateDataTypes(outputTensorInfo, supportedTypes, descriptorName);</div><div class="line"><a name="l04174"></a><span class="lineno"> 4174</span>&#160;</div><div class="line"><a name="l04175"></a><span class="lineno"> 4175</span>&#160;    <span class="keywordflow">if</span> ((inputTensorXInfo.GetNumDimensions() &lt; 2) ||</div><div class="line"><a name="l04176"></a><span class="lineno"> 4176</span>&#160;        (inputTensorYInfo.GetNumDimensions() &lt; 2))</div><div class="line"><a name="l04177"></a><span class="lineno"> 4177</span>&#160;    {</div><div class="line"><a name="l04178"></a><span class="lineno"> 4178</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(descriptorName + <span class="stringliteral">&quot;: Input tensors are not 2D or greater.&quot;</span>);</div><div class="line"><a name="l04179"></a><span class="lineno"> 4179</span>&#160;    }</div><div class="line"><a name="l04180"></a><span class="lineno"> 4180</span>&#160;</div><div class="line"><a name="l04181"></a><span class="lineno"> 4181</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#a9b2df0866e0357bc75a0fd7c90d44507">m_DataLayoutX</a>.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>())</div><div class="line"><a name="l04182"></a><span class="lineno"> 4182</span>&#160;    {</div><div class="line"><a name="l04183"></a><span class="lineno"> 4183</span>&#160;        <span class="keywordflow">switch</span>(<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#a9b2df0866e0357bc75a0fd7c90d44507">m_DataLayoutX</a>.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>())</div><div class="line"><a name="l04184"></a><span class="lineno"> 4184</span>&#160;        {</div><div class="line"><a name="l04185"></a><span class="lineno"> 4185</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>:</div><div class="line"><a name="l04186"></a><span class="lineno"> 4186</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>:</div><div class="line"><a name="l04187"></a><span class="lineno"> 4187</span>&#160;                <span class="keywordflow">if</span>(inputTensorXInfo.GetNumDimensions() != 4)</div><div class="line"><a name="l04188"></a><span class="lineno"> 4188</span>&#160;                {</div><div class="line"><a name="l04189"></a><span class="lineno"> 4189</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(descriptorName +</div><div class="line"><a name="l04190"></a><span class="lineno"> 4190</span>&#160;                        <span class="stringliteral">&quot;: Input tensor X does not have the correct &quot;</span></div><div class="line"><a name="l04191"></a><span class="lineno"> 4191</span>&#160;                        <span class="stringliteral">&quot;number of dimensions for the Data Layout that it has been assigned.&quot;</span>);</div><div class="line"><a name="l04192"></a><span class="lineno"> 4192</span>&#160;                }</div><div class="line"><a name="l04193"></a><span class="lineno"> 4193</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l04194"></a><span class="lineno"> 4194</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015">DataLayout::NCDHW</a>:</div><div class="line"><a name="l04195"></a><span class="lineno"> 4195</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">DataLayout::NDHWC</a>:</div><div class="line"><a name="l04196"></a><span class="lineno"> 4196</span>&#160;                <span class="keywordflow">if</span>(inputTensorXInfo.GetNumDimensions() != 5)</div><div class="line"><a name="l04197"></a><span class="lineno"> 4197</span>&#160;                {</div><div class="line"><a name="l04198"></a><span class="lineno"> 4198</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(descriptorName +</div><div class="line"><a name="l04199"></a><span class="lineno"> 4199</span>&#160;                        <span class="stringliteral">&quot;: Input tensor X does not have the correct &quot;</span></div><div class="line"><a name="l04200"></a><span class="lineno"> 4200</span>&#160;                        <span class="stringliteral">&quot;number of dimensions for the Data Layout that it has been assigned.&quot;</span>);</div><div class="line"><a name="l04201"></a><span class="lineno"> 4201</span>&#160;                }</div><div class="line"><a name="l04202"></a><span class="lineno"> 4202</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l04203"></a><span class="lineno"> 4203</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l04204"></a><span class="lineno"> 4204</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l04205"></a><span class="lineno"> 4205</span>&#160;        }</div><div class="line"><a name="l04206"></a><span class="lineno"> 4206</span>&#160;    }</div><div class="line"><a name="l04207"></a><span class="lineno"> 4207</span>&#160;</div><div class="line"><a name="l04208"></a><span class="lineno"> 4208</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#af4745eb41553ae692e9f4e4c60a09ad4">m_DataLayoutY</a>.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>())</div><div class="line"><a name="l04209"></a><span class="lineno"> 4209</span>&#160;    {</div><div class="line"><a name="l04210"></a><span class="lineno"> 4210</span>&#160;        <span class="keywordflow">switch</span>(<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#af4745eb41553ae692e9f4e4c60a09ad4">m_DataLayoutY</a>.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>())</div><div class="line"><a name="l04211"></a><span class="lineno"> 4211</span>&#160;        {</div><div class="line"><a name="l04212"></a><span class="lineno"> 4212</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>:</div><div class="line"><a name="l04213"></a><span class="lineno"> 4213</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>:</div><div class="line"><a name="l04214"></a><span class="lineno"> 4214</span>&#160;                <span class="keywordflow">if</span>(inputTensorYInfo.GetNumDimensions() != 4)</div><div class="line"><a name="l04215"></a><span class="lineno"> 4215</span>&#160;                {</div><div class="line"><a name="l04216"></a><span class="lineno"> 4216</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(descriptorName +</div><div class="line"><a name="l04217"></a><span class="lineno"> 4217</span>&#160;                        <span class="stringliteral">&quot;: Input tensor Y does not have the correct &quot;</span></div><div class="line"><a name="l04218"></a><span class="lineno"> 4218</span>&#160;                        <span class="stringliteral">&quot;number of dimensions for the Data Layout that it has been assigned.&quot;</span>);</div><div class="line"><a name="l04219"></a><span class="lineno"> 4219</span>&#160;                }</div><div class="line"><a name="l04220"></a><span class="lineno"> 4220</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l04221"></a><span class="lineno"> 4221</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015">DataLayout::NCDHW</a>:</div><div class="line"><a name="l04222"></a><span class="lineno"> 4222</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">DataLayout::NDHWC</a>:</div><div class="line"><a name="l04223"></a><span class="lineno"> 4223</span>&#160;                <span class="keywordflow">if</span>(inputTensorYInfo.GetNumDimensions() != 5)</div><div class="line"><a name="l04224"></a><span class="lineno"> 4224</span>&#160;                {</div><div class="line"><a name="l04225"></a><span class="lineno"> 4225</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(descriptorName +</div><div class="line"><a name="l04226"></a><span class="lineno"> 4226</span>&#160;                        <span class="stringliteral">&quot;: Input tensor Y does not have the correct &quot;</span></div><div class="line"><a name="l04227"></a><span class="lineno"> 4227</span>&#160;                        <span class="stringliteral">&quot;number of dimensions for the Data Layout that it has been assigned.&quot;</span>);</div><div class="line"><a name="l04228"></a><span class="lineno"> 4228</span>&#160;                }</div><div class="line"><a name="l04229"></a><span class="lineno"> 4229</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l04230"></a><span class="lineno"> 4230</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l04231"></a><span class="lineno"> 4231</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l04232"></a><span class="lineno"> 4232</span>&#160;        }</div><div class="line"><a name="l04233"></a><span class="lineno"> 4233</span>&#160;    }</div><div class="line"><a name="l04234"></a><span class="lineno"> 4234</span>&#160;</div><div class="line"><a name="l04235"></a><span class="lineno"> 4235</span>&#160;    <span class="keyword">auto</span> axesToMul = <a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#adea0557f6519a2d7f1f1424e3de0fc4a">BatchMatMulDescriptor::GetAxesToMul</a>(<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>,</div><div class="line"><a name="l04236"></a><span class="lineno"> 4236</span>&#160;                                                         inputTensorXInfo.GetShape(),</div><div class="line"><a name="l04237"></a><span class="lineno"> 4237</span>&#160;                                                         inputTensorYInfo.GetShape());</div><div class="line"><a name="l04238"></a><span class="lineno"> 4238</span>&#160;</div><div class="line"><a name="l04239"></a><span class="lineno"> 4239</span>&#160;    <span class="keywordflow">if</span>(inputTensorXInfo.GetShape()[axesToMul.first.second]</div><div class="line"><a name="l04240"></a><span class="lineno"> 4240</span>&#160;       != inputTensorYInfo.GetShape()[axesToMul.second.first])</div><div class="line"><a name="l04241"></a><span class="lineno"> 4241</span>&#160;    {</div><div class="line"><a name="l04242"></a><span class="lineno"> 4242</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(descriptorName +</div><div class="line"><a name="l04243"></a><span class="lineno"> 4243</span>&#160;            <span class="stringliteral">&quot;: The final axis of input tensor X must be the same size as &quot;</span></div><div class="line"><a name="l04244"></a><span class="lineno"> 4244</span>&#160;            <span class="stringliteral">&quot;the second last axis of input tensor Y.&quot;</span>);</div><div class="line"><a name="l04245"></a><span class="lineno"> 4245</span>&#160;    }</div><div class="line"><a name="l04246"></a><span class="lineno"> 4246</span>&#160;</div><div class="line"><a name="l04247"></a><span class="lineno"> 4247</span>&#160;    <span class="keyword">auto</span> axesNotMul = <a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#aed81894ad76effd38e1d871af4db0a59">BatchMatMulDescriptor::GetAxesNotMul</a>(<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>,</div><div class="line"><a name="l04248"></a><span class="lineno"> 4248</span>&#160;                                                           inputTensorXInfo.GetShape(),</div><div class="line"><a name="l04249"></a><span class="lineno"> 4249</span>&#160;                                                           inputTensorYInfo.GetShape());</div><div class="line"><a name="l04250"></a><span class="lineno"> 4250</span>&#160;</div><div class="line"><a name="l04251"></a><span class="lineno"> 4251</span>&#160;    {   <span class="comment">// Separate scope so we don&#39;t pollute the rest of the scope with our temp variables</span></div><div class="line"><a name="l04252"></a><span class="lineno"> 4252</span>&#160;        <span class="comment">// e.g. NHWC isnt compatible with NCHW as of now</span></div><div class="line"><a name="l04253"></a><span class="lineno"> 4253</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> xLayout;</div><div class="line"><a name="l04254"></a><span class="lineno"> 4254</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> yLayout;</div><div class="line"><a name="l04255"></a><span class="lineno"> 4255</span>&#160;</div><div class="line"><a name="l04256"></a><span class="lineno"> 4256</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#a9b2df0866e0357bc75a0fd7c90d44507">m_DataLayoutX</a> == <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>())</div><div class="line"><a name="l04257"></a><span class="lineno"> 4257</span>&#160;        {</div><div class="line"><a name="l04258"></a><span class="lineno"> 4258</span>&#160;            xLayout = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>; <span class="comment">// Not equivalent - I&#39;m just concerned with the last 2 axes</span></div><div class="line"><a name="l04259"></a><span class="lineno"> 4259</span>&#160;        }</div><div class="line"><a name="l04260"></a><span class="lineno"> 4260</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l04261"></a><span class="lineno"> 4261</span>&#160;        {</div><div class="line"><a name="l04262"></a><span class="lineno"> 4262</span>&#160;            xLayout = <a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#a9b2df0866e0357bc75a0fd7c90d44507">m_DataLayoutX</a>.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>();</div><div class="line"><a name="l04263"></a><span class="lineno"> 4263</span>&#160;        }</div><div class="line"><a name="l04264"></a><span class="lineno"> 4264</span>&#160;</div><div class="line"><a name="l04265"></a><span class="lineno"> 4265</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#af4745eb41553ae692e9f4e4c60a09ad4">m_DataLayoutY</a> == <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>())</div><div class="line"><a name="l04266"></a><span class="lineno"> 4266</span>&#160;        {</div><div class="line"><a name="l04267"></a><span class="lineno"> 4267</span>&#160;            yLayout = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>;</div><div class="line"><a name="l04268"></a><span class="lineno"> 4268</span>&#160;        }</div><div class="line"><a name="l04269"></a><span class="lineno"> 4269</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l04270"></a><span class="lineno"> 4270</span>&#160;        {</div><div class="line"><a name="l04271"></a><span class="lineno"> 4271</span>&#160;            yLayout = <a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#af4745eb41553ae692e9f4e4c60a09ad4">m_DataLayoutY</a>.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>();</div><div class="line"><a name="l04272"></a><span class="lineno"> 4272</span>&#160;        }</div><div class="line"><a name="l04273"></a><span class="lineno"> 4273</span>&#160;</div><div class="line"><a name="l04274"></a><span class="lineno"> 4274</span>&#160;        <span class="keywordflow">if</span>(xLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a> || xLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015">DataLayout::NCDHW</a>)</div><div class="line"><a name="l04275"></a><span class="lineno"> 4275</span>&#160;        {</div><div class="line"><a name="l04276"></a><span class="lineno"> 4276</span>&#160;            <span class="keywordflow">if</span>(yLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a> || yLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">DataLayout::NDHWC</a>)</div><div class="line"><a name="l04277"></a><span class="lineno"> 4277</span>&#160;            {</div><div class="line"><a name="l04278"></a><span class="lineno"> 4278</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(descriptorName +</div><div class="line"><a name="l04279"></a><span class="lineno"> 4279</span>&#160;                    <span class="stringliteral">&quot;: Invalid input tensor data layout combination.&quot;</span>);</div><div class="line"><a name="l04280"></a><span class="lineno"> 4280</span>&#160;            }</div><div class="line"><a name="l04281"></a><span class="lineno"> 4281</span>&#160;        }</div><div class="line"><a name="l04282"></a><span class="lineno"> 4282</span>&#160;        <span class="keywordflow">if</span>(yLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a> || yLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015">DataLayout::NCDHW</a>)</div><div class="line"><a name="l04283"></a><span class="lineno"> 4283</span>&#160;        {</div><div class="line"><a name="l04284"></a><span class="lineno"> 4284</span>&#160;            <span class="keywordflow">if</span>(xLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a> || xLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">DataLayout::NDHWC</a>)</div><div class="line"><a name="l04285"></a><span class="lineno"> 4285</span>&#160;            {</div><div class="line"><a name="l04286"></a><span class="lineno"> 4286</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(descriptorName +</div><div class="line"><a name="l04287"></a><span class="lineno"> 4287</span>&#160;                    <span class="stringliteral">&quot;: Invalid input tensor data layout combination.&quot;</span>);</div><div class="line"><a name="l04288"></a><span class="lineno"> 4288</span>&#160;            }</div><div class="line"><a name="l04289"></a><span class="lineno"> 4289</span>&#160;        }</div><div class="line"><a name="l04290"></a><span class="lineno"> 4290</span>&#160;    }</div><div class="line"><a name="l04291"></a><span class="lineno"> 4291</span>&#160;</div><div class="line"><a name="l04292"></a><span class="lineno"> 4292</span>&#160;    <span class="comment">// Simulate aligning the ends of the matrix dims and prepending 1&#39;s to the beginning of the shorter one</span></div><div class="line"><a name="l04293"></a><span class="lineno"> 4293</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputTensorDimSize = std::max(inputTensorXInfo.GetNumDimensions(),</div><div class="line"><a name="l04294"></a><span class="lineno"> 4294</span>&#160;                                                inputTensorYInfo.GetNumDimensions());</div><div class="line"><a name="l04295"></a><span class="lineno"> 4295</span>&#160;    <span class="keywordflow">if</span>(outputTensorDimSize-2 &gt; 0)</div><div class="line"><a name="l04296"></a><span class="lineno"> 4296</span>&#160;    {</div><div class="line"><a name="l04297"></a><span class="lineno"> 4297</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> tiXNotMul = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(outputTensorDimSize-2),</div><div class="line"><a name="l04298"></a><span class="lineno"> 4298</span>&#160;                                          <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l04299"></a><span class="lineno"> 4299</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> tiYNotMul = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(outputTensorDimSize-2),</div><div class="line"><a name="l04300"></a><span class="lineno"> 4300</span>&#160;                                          <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l04301"></a><span class="lineno"> 4301</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> tiOutNotMul = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(outputTensorDimSize-2),</div><div class="line"><a name="l04302"></a><span class="lineno"> 4302</span>&#160;                                            <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l04303"></a><span class="lineno"> 4303</span>&#160;</div><div class="line"><a name="l04304"></a><span class="lineno"> 4304</span>&#160;        <span class="keyword">auto</span> doAxisExtension = [&amp;](std::vector&lt;unsigned int&gt; axisIndices, <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; ti)</div><div class="line"><a name="l04305"></a><span class="lineno"> 4305</span>&#160;        {</div><div class="line"><a name="l04306"></a><span class="lineno"> 4306</span>&#160;            <span class="keyword">auto</span> sizeDiff = (outputTensorDimSize-2) - axisIndices.size();</div><div class="line"><a name="l04307"></a><span class="lineno"> 4307</span>&#160;</div><div class="line"><a name="l04308"></a><span class="lineno"> 4308</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; sizeDiff; i++)</div><div class="line"><a name="l04309"></a><span class="lineno"> 4309</span>&#160;            {</div><div class="line"><a name="l04310"></a><span class="lineno"> 4310</span>&#160;                axisIndices.insert(axisIndices.begin(), 1);</div><div class="line"><a name="l04311"></a><span class="lineno"> 4311</span>&#160;            }</div><div class="line"><a name="l04312"></a><span class="lineno"> 4312</span>&#160;</div><div class="line"><a name="l04313"></a><span class="lineno"> 4313</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; ti.GetNumDimensions(); i++)</div><div class="line"><a name="l04314"></a><span class="lineno"> 4314</span>&#160;            {</div><div class="line"><a name="l04315"></a><span class="lineno"> 4315</span>&#160;                ti.GetShape()[i] = inputTensorXInfo.GetShape()[i];</div><div class="line"><a name="l04316"></a><span class="lineno"> 4316</span>&#160;            }</div><div class="line"><a name="l04317"></a><span class="lineno"> 4317</span>&#160;        };</div><div class="line"><a name="l04318"></a><span class="lineno"> 4318</span>&#160;</div><div class="line"><a name="l04319"></a><span class="lineno"> 4319</span>&#160;        doAxisExtension(axesNotMul.first, tiXNotMul);</div><div class="line"><a name="l04320"></a><span class="lineno"> 4320</span>&#160;        doAxisExtension(axesNotMul.second, tiYNotMul);</div><div class="line"><a name="l04321"></a><span class="lineno"> 4321</span>&#160;</div><div class="line"><a name="l04322"></a><span class="lineno"> 4322</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; tiOutNotMul.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); i++)</div><div class="line"><a name="l04323"></a><span class="lineno"> 4323</span>&#160;        {</div><div class="line"><a name="l04324"></a><span class="lineno"> 4324</span>&#160;            tiOutNotMul.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i] = std::max(tiXNotMul.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i],</div><div class="line"><a name="l04325"></a><span class="lineno"> 4325</span>&#160;                                                 tiYNotMul.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i]);</div><div class="line"><a name="l04326"></a><span class="lineno"> 4326</span>&#160;        }</div><div class="line"><a name="l04327"></a><span class="lineno"> 4327</span>&#160;</div><div class="line"><a name="l04328"></a><span class="lineno"> 4328</span>&#160;        ValidateBroadcastTensorShapesMatch(tiXNotMul,</div><div class="line"><a name="l04329"></a><span class="lineno"> 4329</span>&#160;                                           tiYNotMul,</div><div class="line"><a name="l04330"></a><span class="lineno"> 4330</span>&#160;                                           tiOutNotMul,</div><div class="line"><a name="l04331"></a><span class="lineno"> 4331</span>&#160;                                           descriptorName,</div><div class="line"><a name="l04332"></a><span class="lineno"> 4332</span>&#160;                                           <span class="stringliteral">&quot;input_X&quot;</span>,</div><div class="line"><a name="l04333"></a><span class="lineno"> 4333</span>&#160;                                           <span class="stringliteral">&quot;input_Y&quot;</span>);</div><div class="line"><a name="l04334"></a><span class="lineno"> 4334</span>&#160;    }</div><div class="line"><a name="l04335"></a><span class="lineno"> 4335</span>&#160;</div><div class="line"><a name="l04336"></a><span class="lineno"> 4336</span>&#160;    <span class="comment">// Also check descriptor parameter validity</span></div><div class="line"><a name="l04337"></a><span class="lineno"> 4337</span>&#160;    <span class="comment">// This will eventually be moved to the start of the function as explained below</span></div><div class="line"><a name="l04338"></a><span class="lineno"> 4338</span>&#160;    <span class="keywordflow">if</span> ((!<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#ad4f84ac313deb87dd60228a9de776c2f">m_TransposeX</a>.empty() &amp;&amp; !<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#ac69ad3b01c5319a631941dd3a0abdfb5">m_AdjointX</a>.empty()) ||</div><div class="line"><a name="l04339"></a><span class="lineno"> 4339</span>&#160;        (!<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#ac22dca50f969e331f9b0e438e9f2d3f2">m_TransposeY</a>.empty() &amp;&amp; !<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#afe2868b58a12296713f650200ecdd418">m_AdjointY</a>.empty()))</div><div class="line"><a name="l04340"></a><span class="lineno"> 4340</span>&#160;    {</div><div class="line"><a name="l04341"></a><span class="lineno"> 4341</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(descriptorName +</div><div class="line"><a name="l04342"></a><span class="lineno"> 4342</span>&#160;            <span class="stringliteral">&quot;: Invalid descriptor parameters - Transpose and Adjoint &quot;</span></div><div class="line"><a name="l04343"></a><span class="lineno"> 4343</span>&#160;            <span class="stringliteral">&quot;vectors cannot both be true for a given input tensor.&quot;</span>);</div><div class="line"><a name="l04344"></a><span class="lineno"> 4344</span>&#160;    }</div><div class="line"><a name="l04345"></a><span class="lineno"> 4345</span>&#160;</div><div class="line"><a name="l04346"></a><span class="lineno"> 4346</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#ad4f84ac313deb87dd60228a9de776c2f">m_TransposeX</a>.size() != 0 &amp;&amp; <a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#ad4f84ac313deb87dd60228a9de776c2f">m_TransposeX</a>.size() != inputTensorXInfo.GetNumDimensions())</div><div class="line"><a name="l04347"></a><span class="lineno"> 4347</span>&#160;    {</div><div class="line"><a name="l04348"></a><span class="lineno"> 4348</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(descriptorName +</div><div class="line"><a name="l04349"></a><span class="lineno"> 4349</span>&#160;            <span class="stringliteral">&quot;: Invalid descriptor parameter - Transpose X vector must be &quot;</span></div><div class="line"><a name="l04350"></a><span class="lineno"> 4350</span>&#160;            <span class="stringliteral">&quot;the same size as tensor input X&#39;s dimensionality.&quot;</span>);</div><div class="line"><a name="l04351"></a><span class="lineno"> 4351</span>&#160;    }</div><div class="line"><a name="l04352"></a><span class="lineno"> 4352</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#ac69ad3b01c5319a631941dd3a0abdfb5">m_AdjointX</a>.size() != 0 &amp;&amp; <a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#ac69ad3b01c5319a631941dd3a0abdfb5">m_AdjointX</a>.size() != inputTensorXInfo.GetNumDimensions())</div><div class="line"><a name="l04353"></a><span class="lineno"> 4353</span>&#160;    {</div><div class="line"><a name="l04354"></a><span class="lineno"> 4354</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(descriptorName +</div><div class="line"><a name="l04355"></a><span class="lineno"> 4355</span>&#160;            <span class="stringliteral">&quot;: Invalid descriptor parameter - Adjoint X vector must be &quot;</span></div><div class="line"><a name="l04356"></a><span class="lineno"> 4356</span>&#160;            <span class="stringliteral">&quot;the same size as tensor input X&#39;s dimensionality.&quot;</span>);</div><div class="line"><a name="l04357"></a><span class="lineno"> 4357</span>&#160;    }</div><div class="line"><a name="l04358"></a><span class="lineno"> 4358</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#ac22dca50f969e331f9b0e438e9f2d3f2">m_TransposeY</a>.size() != 0 &amp;&amp; <a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#ac22dca50f969e331f9b0e438e9f2d3f2">m_TransposeY</a>.size() != inputTensorYInfo.GetNumDimensions())</div><div class="line"><a name="l04359"></a><span class="lineno"> 4359</span>&#160;    {</div><div class="line"><a name="l04360"></a><span class="lineno"> 4360</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(descriptorName +</div><div class="line"><a name="l04361"></a><span class="lineno"> 4361</span>&#160;            <span class="stringliteral">&quot;: Invalid descriptor parameter - Transpose Y vector must be &quot;</span></div><div class="line"><a name="l04362"></a><span class="lineno"> 4362</span>&#160;            <span class="stringliteral">&quot;the same size as tensor input Y&#39;s dimensionality.&quot;</span>);</div><div class="line"><a name="l04363"></a><span class="lineno"> 4363</span>&#160;    }</div><div class="line"><a name="l04364"></a><span class="lineno"> 4364</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#afe2868b58a12296713f650200ecdd418">m_AdjointY</a>.size() != 0 &amp;&amp; <a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#afe2868b58a12296713f650200ecdd418">m_AdjointY</a>.size() != inputTensorXInfo.GetNumDimensions())</div><div class="line"><a name="l04365"></a><span class="lineno"> 4365</span>&#160;    {</div><div class="line"><a name="l04366"></a><span class="lineno"> 4366</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(descriptorName +</div><div class="line"><a name="l04367"></a><span class="lineno"> 4367</span>&#160;            <span class="stringliteral">&quot;: Invalid descriptor parameter - Adjoint Y vector must be &quot;</span></div><div class="line"><a name="l04368"></a><span class="lineno"> 4368</span>&#160;            <span class="stringliteral">&quot;the same size as tensor input Y&#39;s dimensionality.&quot;</span>);</div><div class="line"><a name="l04369"></a><span class="lineno"> 4369</span>&#160;    }</div><div class="line"><a name="l04370"></a><span class="lineno"> 4370</span>&#160;    <span class="comment">// Note: for adjoint/transpose, you&#39;ll need to do the validation atop the resultant permutation.</span></div><div class="line"><a name="l04371"></a><span class="lineno"> 4371</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00062">Types.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml_a9b2df0866e0357bc75a0fd7c90d44507"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#a9b2df0866e0357bc75a0fd7c90d44507">armnn::BatchMatMulDescriptor::m_DataLayoutX</a></div><div class="ttdeci">Optional&lt; DataLayout &gt; m_DataLayoutX</div><div class="ttdoc">Data layout of each input tensor, such as NHWC/NDHWC (or leave as EmptyOptional for arbitrary layout)...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01581">Descriptors.hpp:1581</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml_ad4f84ac313deb87dd60228a9de776c2f"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#ad4f84ac313deb87dd60228a9de776c2f">armnn::BatchMatMulDescriptor::m_TransposeX</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_TransposeX</div><div class="ttdoc">Transpose vector for each input tensor (leave as empty vector for no pre-transposing) Transpose and A...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01586">Descriptors.hpp:1586</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml_ac69ad3b01c5319a631941dd3a0abdfb5"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#ac69ad3b01c5319a631941dd3a0abdfb5">armnn::BatchMatMulDescriptor::m_AdjointX</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_AdjointX</div><div class="ttdoc">Adjoint vector for each input tensor (leave as empty vector for no pre-adjoint) Transpose and Adjoint...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01591">Descriptors.hpp:1591</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_with_parameters_xhtml_aad91b9bbf7aa365d304febe79a3d1333"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">armnn::QueueDescriptorWithParameters&lt; BatchMatMulDescriptor &gt;::m_Parameters</a></div><div class="ttdeci">BatchMatMulDescriptor m_Parameters</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00066">WorkloadData.hpp:66</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml_ac97905bfa0daab357b91df1347600309"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">armnn::WorkloadInfo::m_InputTensorInfos</a></div><div class="ttdeci">std::vector&lt; TensorInfo &gt; m_InputTensorInfos</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00018">WorkloadInfo.hpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015">armnn::DataLayout::NCDHW</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml_aed81894ad76effd38e1d871af4db0a59"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#aed81894ad76effd38e1d871af4db0a59">armnn::BatchMatMulDescriptor::GetAxesNotMul</a></div><div class="ttdeci">static std::pair&lt; std::vector&lt; unsigned int &gt;, std::vector&lt; unsigned int &gt; &gt; GetAxesNotMul(const BatchMatMulDescriptor &amp;desc, const TensorShape &amp;inputXShape, const TensorShape &amp;inputYShape)</div><div class="ttdoc">Static helper to get the axes (for each input) that will not be multiplied together. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00508">Descriptors.cpp:508</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml_ac22dca50f969e331f9b0e438e9f2d3f2"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#ac22dca50f969e331f9b0e438e9f2d3f2">armnn::BatchMatMulDescriptor::m_TransposeY</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_TransposeY</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01587">Descriptors.hpp:1587</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml_adea0557f6519a2d7f1f1424e3de0fc4a"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#adea0557f6519a2d7f1f1424e3de0fc4a">armnn::BatchMatMulDescriptor::GetAxesToMul</a></div><div class="ttdeci">static std::pair&lt; std::pair&lt; unsigned int, unsigned int &gt;, std::pair&lt; unsigned int, unsigned int &gt; &gt; GetAxesToMul(const BatchMatMulDescriptor &amp;desc, const TensorShape &amp;tensorXShape, const TensorShape &amp;tensorYShape)</div><div class="ttdoc">Static helper to get the two axes (for each input) for multiplication. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00459">Descriptors.cpp:459</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml_a67b178f8a836bc1e52b8de109760adfd"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">armnn::WorkloadInfo::m_OutputTensorInfos</a></div><div class="ttdeci">std::vector&lt; TensorInfo &gt; m_OutputTensorInfos</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00019">WorkloadInfo.hpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::DataType::BFloat16</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml_afe2868b58a12296713f650200ecdd418"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#afe2868b58a12296713f650200ecdd418">armnn::BatchMatMulDescriptor::m_AdjointY</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_AdjointY</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01592">Descriptors.hpp:1592</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">armnn::DataLayout::NDHWC</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml_af4745eb41553ae692e9f4e4c60a09ad4"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#af4745eb41553ae692e9f4e4c60a09ad4">armnn::BatchMatMulDescriptor::m_DataLayoutY</a></div><div class="ttdeci">Optional&lt; DataLayout &gt; m_DataLayoutY</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01582">Descriptors.hpp:1582</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this struct was generated from the following files:<ul>
<li>include/armnn/backends/<a class="el" href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml">WorkloadData.hpp</a></li>
<li>src/backends/backendsCommon/<a class="el" href="_workload_data_8cpp_source.xhtml">WorkloadData.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="structarmnn_1_1_batch_mat_mul_queue_descriptor.xhtml">BatchMatMulQueueDescriptor</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:37 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
