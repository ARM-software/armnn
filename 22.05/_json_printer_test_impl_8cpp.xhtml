<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/JsonPrinterTestImpl.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_json_printer_test_impl_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">JsonPrinterTestImpl.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_json_printer_test_impl_8hpp_source.xhtml">JsonPrinterTestImpl.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_string_utils_8hpp_source.xhtml">armnn/utility/StringUtils.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_profiling_8hpp_source.xhtml">Profiling.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_descriptors_8hpp_source.xhtml">armnn/Descriptors.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_i_runtime_8hpp_source.xhtml">armnn/IRuntime.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_i_network_8hpp_source.xhtml">armnn/INetwork.hpp</a>&gt;</code><br />
<code>#include &lt;doctest/doctest.h&gt;</code><br />
<code>#include &lt;sstream&gt;</code><br />
<code>#include &lt;stack&gt;</code><br />
<code>#include &lt;string&gt;</code><br />
<code>#include &lt;algorithm&gt;</code><br />
</div>
<p><a href="_json_printer_test_impl_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:af4fbcd510b99d7be74238e971987b66e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_json_printer_test_impl_8cpp.xhtml#af4fbcd510b99d7be74238e971987b66e">AreMatchingPair</a> (const char opening, const char closing)</td></tr>
<tr class="separator:af4fbcd510b99d7be74238e971987b66e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18a8f8518a9f180f987fed2b7b4706b0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_json_printer_test_impl_8cpp.xhtml#a18a8f8518a9f180f987fed2b7b4706b0">AreParenthesesMatching</a> (const std::string &amp;<a class="el" href="structarmnn_1_1exp.xhtml">exp</a>)</td></tr>
<tr class="separator:a18a8f8518a9f180f987fed2b7b4706b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af996caf31d1beb31e599205b02b9a210"><td class="memItemLeft" align="right" valign="top">std::vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_json_printer_test_impl_8cpp.xhtml#af996caf31d1beb31e599205b02b9a210">ExtractMeasurements</a> (const std::string &amp;<a class="el" href="structarmnn_1_1exp.xhtml">exp</a>)</td></tr>
<tr class="separator:af996caf31d1beb31e599205b02b9a210"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af163da5a12ebb9585cdad522b7c9613f"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_json_printer_test_impl_8cpp.xhtml#af163da5a12ebb9585cdad522b7c9613f">ExtractSections</a> (const std::string &amp;<a class="el" href="structarmnn_1_1exp.xhtml">exp</a>)</td></tr>
<tr class="separator:af163da5a12ebb9585cdad522b7c9613f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fec737485d8eb1f20ff70c13a4126d8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_json_printer_test_impl_8cpp.xhtml#a0fec737485d8eb1f20ff70c13a4126d8">GetSoftmaxProfilerJson</a> (const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;backends)</td></tr>
<tr class="separator:a0fec737485d8eb1f20ff70c13a4126d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8556d856f8d8b6d262a0ac41b0d8dbf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_json_printer_test_impl_8cpp.xhtml#ab8556d856f8d8b6d262a0ac41b0d8dbf">ValidateProfilerJson</a> (std::string &amp;result)</td></tr>
<tr class="separator:ab8556d856f8d8b6d262a0ac41b0d8dbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95be0e0baaa07201b26929153a2443d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_json_printer_test_impl_8cpp.xhtml#a95be0e0baaa07201b26929153a2443d6">RunSoftmaxProfilerJsonPrinterTest</a> (const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;backends)</td></tr>
<tr class="separator:a95be0e0baaa07201b26929153a2443d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="af4fbcd510b99d7be74238e971987b66e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4fbcd510b99d7be74238e971987b66e">&#9670;&nbsp;</a></span>AreMatchingPair()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool AreMatchingPair </td>
          <td>(</td>
          <td class="paramtype">const char&#160;</td>
          <td class="paramname"><em>opening</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char&#160;</td>
          <td class="paramname"><em>closing</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00022">22</a> of file <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml">JsonPrinterTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00027">AreParenthesesMatching()</a>.</p>
<div class="fragment"><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keywordflow">return</span> (opening == <span class="charliteral">&#39;{&#39;</span> &amp;&amp; closing == <span class="charliteral">&#39;}&#39;</span>) || (opening == <span class="charliteral">&#39;[&#39;</span> &amp;&amp; closing == <span class="charliteral">&#39;]&#39;</span>);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a18a8f8518a9f180f987fed2b7b4706b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18a8f8518a9f180f987fed2b7b4706b0">&#9670;&nbsp;</a></span>AreParenthesesMatching()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AreParenthesesMatching </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>exp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00027">27</a> of file <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml">JsonPrinterTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00022">AreMatchingPair()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00205">ValidateProfilerJson()</a>.</p>
<div class="fragment"><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    std::stack&lt;char&gt; expStack;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="structarmnn_1_1exp.xhtml">exp</a>.length(); ++i)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="structarmnn_1_1exp.xhtml">exp</a>[i] == <span class="charliteral">&#39;{&#39;</span> || <a class="code" href="structarmnn_1_1exp.xhtml">exp</a>[i] == <span class="charliteral">&#39;[&#39;</span>)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            expStack.push(<a class="code" href="structarmnn_1_1exp.xhtml">exp</a>[i]);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        }</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structarmnn_1_1exp.xhtml">exp</a>[i] == <span class="charliteral">&#39;}&#39;</span> || <a class="code" href="structarmnn_1_1exp.xhtml">exp</a>[i] == <span class="charliteral">&#39;]&#39;</span>)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            <span class="keywordflow">if</span> (expStack.empty() || !<a class="code" href="_json_printer_test_impl_8cpp.xhtml#af4fbcd510b99d7be74238e971987b66e">AreMatchingPair</a>(expStack.top(), <a class="code" href="structarmnn_1_1exp.xhtml">exp</a>[i]))</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                expStack.pop();</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> expStack.empty();</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="ttc" id="_json_printer_test_impl_8cpp_xhtml_af4fbcd510b99d7be74238e971987b66e"><div class="ttname"><a href="_json_printer_test_impl_8cpp.xhtml#af4fbcd510b99d7be74238e971987b66e">AreMatchingPair</a></div><div class="ttdeci">bool AreMatchingPair(const char opening, const char closing)</div><div class="ttdef"><b>Definition:</b> <a href="_json_printer_test_impl_8cpp_source.xhtml#l00022">JsonPrinterTestImpl.cpp:22</a></div></div>
<div class="ttc" id="structarmnn_1_1exp_xhtml"><div class="ttname"><a href="structarmnn_1_1exp.xhtml">armnn::exp</a></div><div class="ttdef"><b>Definition:</b> <a href="_exp_8hpp_source.xhtml#l00013">Exp.hpp:13</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af996caf31d1beb31e599205b02b9a210"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af996caf31d1beb31e599205b02b9a210">&#9670;&nbsp;</a></span>ExtractMeasurements()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;double&gt; ExtractMeasurements </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>exp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml">JsonPrinterTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_string_utils_8hpp_source.xhtml#l00080">armnn::stringUtils::StringTrim()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00205">ValidateProfilerJson()</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    std::vector&lt;double&gt; numbers;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordtype">bool</span> inArray = <span class="keyword">false</span>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    std::string numberString;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="structarmnn_1_1exp.xhtml">exp</a>.size(); ++i)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="structarmnn_1_1exp.xhtml">exp</a>[i] == <span class="charliteral">&#39;[&#39;</span>)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            inArray = <span class="keyword">true</span>;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structarmnn_1_1exp.xhtml">exp</a>[i] == <span class="charliteral">&#39;]&#39;</span> &amp;&amp; inArray)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordflow">try</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                <a class="code" href="namespacearmnn_1_1string_utils.xhtml#acdeebefc9791d026eeb564f373479510">armnn::stringUtils::StringTrim</a>(numberString, <span class="stringliteral">&quot;\t,\n&quot;</span>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                numbers.push_back(std::stod(numberString));</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keywordflow">catch</span> (std::invalid_argument <span class="keyword">const</span>&amp;)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                FAIL((<span class="stringliteral">&quot;Could not convert measurements to double: &quot;</span> + numberString));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            numberString.clear();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            inArray = <span class="keyword">false</span>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structarmnn_1_1exp.xhtml">exp</a>[i] == <span class="charliteral">&#39;,&#39;</span> &amp;&amp; inArray)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordflow">try</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <a class="code" href="namespacearmnn_1_1string_utils.xhtml#acdeebefc9791d026eeb564f373479510">armnn::stringUtils::StringTrim</a>(numberString, <span class="stringliteral">&quot;\t,\n&quot;</span>);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                numbers.push_back(std::stod(numberString));</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">catch</span> (std::invalid_argument <span class="keyword">const</span>&amp;)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                FAIL((<span class="stringliteral">&quot;Could not convert measurements to double: &quot;</span> + numberString));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            numberString.clear();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structarmnn_1_1exp.xhtml">exp</a>[i] != <span class="charliteral">&#39;[&#39;</span> &amp;&amp; inArray &amp;&amp; <a class="code" href="structarmnn_1_1exp.xhtml">exp</a>[i] != <span class="charliteral">&#39;,&#39;</span> &amp;&amp; <a class="code" href="structarmnn_1_1exp.xhtml">exp</a>[i] != <span class="charliteral">&#39; &#39;</span>)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            numberString += <a class="code" href="structarmnn_1_1exp.xhtml">exp</a>[i];</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">return</span> numbers;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;}</div><div class="ttc" id="structarmnn_1_1exp_xhtml"><div class="ttname"><a href="structarmnn_1_1exp.xhtml">armnn::exp</a></div><div class="ttdef"><b>Definition:</b> <a href="_exp_8hpp_source.xhtml#l00013">Exp.hpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_1_1string_utils_xhtml_acdeebefc9791d026eeb564f373479510"><div class="ttname"><a href="namespacearmnn_1_1string_utils.xhtml#acdeebefc9791d026eeb564f373479510">armnn::stringUtils::StringTrim</a></div><div class="ttdeci">std::string &amp; StringTrim(std::string &amp;str, const std::string &amp;chars=&quot;\\\&quot;)</div><div class="ttdoc">Trim from both the start and the end of a string. </div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8hpp_source.xhtml#l00080">StringUtils.hpp:80</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af163da5a12ebb9585cdad522b7c9613f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af163da5a12ebb9585cdad522b7c9613f">&#9670;&nbsp;</a></span>ExtractSections()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::string&gt; ExtractSections </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>exp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00098">98</a> of file <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml">JsonPrinterTestImpl.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00205">ValidateProfilerJson()</a>.</p>
<div class="fragment"><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    std::vector&lt;std::string&gt; sections;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    std::stack&lt;size_t&gt; s;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="structarmnn_1_1exp.xhtml">exp</a>.size(); i++)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="structarmnn_1_1exp.xhtml">exp</a>.at(i) == <span class="charliteral">&#39;{&#39;</span>)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            s.push(i);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="structarmnn_1_1exp.xhtml">exp</a>.at(i) == <span class="charliteral">&#39;}&#39;</span>)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keywordtype">size_t</span> from = s.top();</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            s.pop();</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            sections.push_back(<a class="code" href="structarmnn_1_1exp.xhtml">exp</a>.substr(from, i - from + 1));</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> sections;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="ttc" id="structarmnn_1_1exp_xhtml"><div class="ttname"><a href="structarmnn_1_1exp.xhtml">armnn::exp</a></div><div class="ttdef"><b>Definition:</b> <a href="_exp_8hpp_source.xhtml#l00013">Exp.hpp:13</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0fec737485d8eb1f20ff70c13a4126d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fec737485d8eb1f20ff70c13a4126d8">&#9670;&nbsp;</a></span>GetSoftmaxProfilerJson()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetSoftmaxProfilerJson </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>backends</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00120">120</a> of file <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml">JsonPrinterTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::CpuAcc</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00049">IRuntime::Create()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00476">INetwork::Create()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00572">ProfilerManager::GetInstance()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::GpuAcc</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00165">SoftmaxDescriptor::m_Axis</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00093">IRuntime::CreationOptions::m_EnableGpuProfiling</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00236">OptimizerOptions::m_ProfilingEnabled</a>, <a class="el" href="_network_8cpp_source.xhtml#l01847">armnn::Optimize()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00514">TensorInfo::SetConstant()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00489">TensorInfo::SetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00473">TensorInfo::SetQuantizationScale()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, and <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Success</a>.</p>

<p class="reference">Referenced by <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00251">RunSoftmaxProfilerJsonPrinterTest()</a>.</p>
<div class="fragment"><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    CHECK(!backends.empty());</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="classarmnn_1_1_profiler_manager.xhtml">ProfilerManager</a>&amp; profilerManager = <a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a>();</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// Create runtime in which test will run</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a2fe8c3eadf4f4f9c0c664a24a2a298f9">m_EnableGpuProfiling</a> = backends.front() == <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::Compute::GpuAcc</a>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(options));</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="comment">// build up the structure of the network</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> net(<a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>());</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* input = net-&gt;AddInputLayer(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> softmaxDescriptor;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// Set Axis to -1 if CL or Neon until further Axes are supported.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">if</span> ( backends.front() == <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a> || backends.front() == <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::Compute::GpuAcc</a>)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        softmaxDescriptor.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">m_Axis</a> = -1;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* softmax = net-&gt;AddSoftmaxLayer(softmaxDescriptor, <span class="stringliteral">&quot;softmax&quot;</span>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* output  = net-&gt;AddOutputLayer(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(softmax-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    softmax-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// set the tensors in the network</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({1, 5}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    inputTensorInfo.SetQuantizationOffset(100);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    inputTensorInfo.SetQuantizationScale(10000.0f);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(inputTensorInfo);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputTensorInfo(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({1, 5}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    outputTensorInfo.SetQuantizationOffset(0);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    outputTensorInfo.SetQuantizationScale(1.0f / 256.0f);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    softmax-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(outputTensorInfo);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// optimize the network</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a> optOptions;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    optOptions.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a1b1892da2aaf7eaedaa38671d56b7f19">m_ProfilingEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*net, backends, runtime-&gt;GetDeviceSpec(), optOptions);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">if</span>(!optNet)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        FAIL(<span class="stringliteral">&quot;Error occurred during Optimization, Optimize() returned nullptr.&quot;</span>);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// load it into the runtime</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> netId;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">auto</span> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a> = runtime-&gt;LoadNetwork(netId, std::move(optNet));</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    CHECK(error == <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">Status::Success</a>);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="comment">// create structures for input &amp; output</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    std::vector&lt;uint8_t&gt; inputData</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            1, 10, 3, 200, 5</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="comment">// one of inputs is sufficiently larger than the others to saturate softmax</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        };</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    std::vector&lt;uint8_t&gt; outputData(5);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo2 = runtime-&gt;GetInputTensorInfo(netId, 0);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    inputTensorInfo2.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">SetConstant</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> inputTensors</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            {0, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(inputTensorInfo2, inputData.data())}</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        };</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> outputTensors</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            {0, <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(runtime-&gt;GetOutputTensorInfo(netId, 0), outputData.data())}</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        };</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    runtime-&gt;GetProfiler(netId)-&gt;EnableProfiling(<span class="keyword">true</span>);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="comment">// do the inferences</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    runtime-&gt;EnqueueWorkload(netId, inputTensors, outputTensors);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    runtime-&gt;EnqueueWorkload(netId, inputTensors, outputTensors);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    runtime-&gt;EnqueueWorkload(netId, inputTensors, outputTensors);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// retrieve the Profiler.Print() output</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    profilerManager.GetProfiler()-&gt;Print(ss);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">return</span> ss.str();</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00049">Runtime.cpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00066">INetwork.hpp:66</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml_a214c3636fdf0ea5bac8edb42d0e6c7f0"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">armnn::SoftmaxDescriptor::m_Axis</a></div><div class="ttdeci">int m_Axis</div><div class="ttdoc">Scalar, defaulted to the last index (-1), specifying the dimension the activation will be performed o...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00165">Descriptors.hpp:165</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml_a93857080c2523bf3395e7aa7e6024d5c"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a></div><div class="ttdeci">static ProfilerManager &amp; GetInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00572">Profiling.cpp:572</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00033">IRuntime.hpp:33</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::BoostLogSeverityMapping::error</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00319">Tensor.hpp:319</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01847">Network.cpp:1847</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0d8160388a127c1a23b37bc88dc6e2ec"><div class="ttname"><a href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00027">IRuntime.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00242">INetwork.hpp:242</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml">armnn::ProfilerManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00111">Profiling.hpp:111</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a1b1892da2aaf7eaedaa38671d56b7f19"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a1b1892da2aaf7eaedaa38671d56b7f19">armnn::OptimizerOptions::m_ProfilingEnabled</a></div><div class="ttdeci">bool m_ProfilingEnabled</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00236">INetwork.hpp:236</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::Compute::GpuAcc</a></div><div class="ttdoc">GPU Execution: OpenCL: ArmCompute. </div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a></div><div class="ttdoc">ArmNN performs an optimization on each model/network before it gets loaded for execution. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00137">INetwork.hpp:137</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00077">IRuntime.hpp:77</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml_a2fe8c3eadf4f4f9c0c664a24a2a298f9"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a2fe8c3eadf4f4f9c0c664a24a2a298f9">armnn::IRuntime::CreationOptions::m_EnableGpuProfiling</a></div><div class="ttdeci">bool m_EnableGpuProfiling</div><div class="ttdoc">Setting this flag will allow the user to obtain GPU profiling information from the runtime...</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00093">IRuntime.hpp:93</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a></div><div class="ttdoc">CPU Execution: NEON: ArmCompute. </div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8ffca1e21bdfa7f945617acd606aac91"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">armnn::TensorInfo::SetConstant</a></div><div class="ttdeci">void SetConstant(const bool IsConstant=true)</div><div class="ttdoc">Marks the data corresponding to this tensor info as constant. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00514">Tensor.cpp:514</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00241">INetwork.hpp:241</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00476">Network.cpp:476</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::SoftmaxDescriptor</a></div><div class="ttdoc">A SoftmaxDescriptor for the SoftmaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00150">Descriptors.hpp:150</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a95be0e0baaa07201b26929153a2443d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95be0e0baaa07201b26929153a2443d6">&#9670;&nbsp;</a></span>RunSoftmaxProfilerJsonPrinterTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RunSoftmaxProfilerJsonPrinterTest </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>backends</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00251">251</a> of file <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml">JsonPrinterTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::CpuAcc</a>, <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00120">GetSoftmaxProfilerJson()</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::GpuAcc</a>, and <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00205">ValidateProfilerJson()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_json_printer_tests_8cpp_source.xhtml#l00015">TEST_CASE_FIXTURE()</a>, and <a class="el" href="_neon_json_printer_tests_8cpp_source.xhtml#l00014">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">// setup the test fixture and obtain JSON Printer result</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    std::string result = <a class="code" href="_json_printer_test_impl_8cpp.xhtml#a0fec737485d8eb1f20ff70c13a4126d8">GetSoftmaxProfilerJson</a>(backends);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="comment">// validate the JSON Printer result</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <a class="code" href="_json_printer_test_impl_8cpp.xhtml#ab8556d856f8d8b6d262a0ac41b0d8dbf">ValidateProfilerJson</a>(result);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a>&amp; firstBackend = backends.at(0);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">if</span> (firstBackend == <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::Compute::GpuAcc</a>)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        CHECK(result.find(<span class="stringliteral">&quot;OpenClKernelTimer/: softmax_layer_max_shift_exp_sum_quantized_serial GWS[,,]&quot;</span>)</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                    != std::string::npos);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (firstBackend == <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>)</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    {</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        CHECK(result.find(<span class="stringliteral">&quot;NeonKernelTimer&quot;</span>) != std::string::npos);     <span class="comment">// Validate backend</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordtype">bool</span> softmaxCheck = ((result.find(<span class="stringliteral">&quot;softmax&quot;</span>) != std::string::npos) ||            <span class="comment">// Validate softmax</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                             (result.find(<span class="stringliteral">&quot;Softmax&quot;</span>) != std::string::npos) ||</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                             (result.find(<span class="stringliteral">&quot;SoftMax&quot;</span>) != std::string::npos));</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        CHECK(softmaxCheck);</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    }</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div><div class="ttc" id="_json_printer_test_impl_8cpp_xhtml_a0fec737485d8eb1f20ff70c13a4126d8"><div class="ttname"><a href="_json_printer_test_impl_8cpp.xhtml#a0fec737485d8eb1f20ff70c13a4126d8">GetSoftmaxProfilerJson</a></div><div class="ttdeci">std::string GetSoftmaxProfilerJson(const std::vector&lt; armnn::BackendId &gt; &amp;backends)</div><div class="ttdef"><b>Definition:</b> <a href="_json_printer_test_impl_8cpp_source.xhtml#l00120">JsonPrinterTestImpl.cpp:120</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::Compute::GpuAcc</a></div><div class="ttdoc">GPU Execution: OpenCL: ArmCompute. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a></div><div class="ttdoc">CPU Execution: NEON: ArmCompute. </div></div>
<div class="ttc" id="_json_printer_test_impl_8cpp_xhtml_ab8556d856f8d8b6d262a0ac41b0d8dbf"><div class="ttname"><a href="_json_printer_test_impl_8cpp.xhtml#ab8556d856f8d8b6d262a0ac41b0d8dbf">ValidateProfilerJson</a></div><div class="ttdeci">void ValidateProfilerJson(std::string &amp;result)</div><div class="ttdef"><b>Definition:</b> <a href="_json_printer_test_impl_8cpp_source.xhtml#l00205">JsonPrinterTestImpl.cpp:205</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab8556d856f8d8b6d262a0ac41b0d8dbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8556d856f8d8b6d262a0ac41b0d8dbf">&#9670;&nbsp;</a></span>ValidateProfilerJson()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ValidateProfilerJson </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>result</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00205">205</a> of file <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml">JsonPrinterTestImpl.cpp</a>.</p>

<p class="reference">References <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00027">AreParenthesesMatching()</a>, <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00051">ExtractMeasurements()</a>, and <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00098">ExtractSections()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_json_printer_test_impl_8cpp_source.xhtml#l00251">RunSoftmaxProfilerJsonPrinterTest()</a>.</p>
<div class="fragment"><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;{</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="comment">// ensure all measurements are greater than zero</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    std::vector&lt;double&gt; measurementsVector = <a class="code" href="_json_printer_test_impl_8cpp.xhtml#af996caf31d1beb31e599205b02b9a210">ExtractMeasurements</a>(result);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    CHECK(!measurementsVector.empty());</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="comment">// check sections contain raw and unit tags</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="comment">// first ensure Parenthesis are balanced</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="_json_printer_test_impl_8cpp.xhtml#a18a8f8518a9f180f987fed2b7b4706b0">AreParenthesesMatching</a>(result))</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="comment">// remove parent sections that will not have raw or unit tag</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        std::vector&lt;std::string&gt; sectionVector = <a class="code" href="_json_printer_test_impl_8cpp.xhtml#af163da5a12ebb9585cdad522b7c9613f">ExtractSections</a>(result);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; sectionVector.size(); ++i)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">if</span> (sectionVector[i].find(<span class="stringliteral">&quot;\&quot;ArmNN\&quot;:&quot;</span>) != std::string::npos</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                || sectionVector[i].find(<span class="stringliteral">&quot;\&quot;optimize_measurements\&quot;:&quot;</span>) != std::string::npos</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                || sectionVector[i].find(<span class="stringliteral">&quot;\&quot;loaded_network_measurements\&quot;:&quot;</span>) != std::string::npos</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                || sectionVector[i].find(<span class="stringliteral">&quot;\&quot;inference_measurements\&quot;:&quot;</span>) != std::string::npos)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                sectionVector.erase(sectionVector.begin() + <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(i));</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        CHECK(!sectionVector.empty());</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        CHECK(std::all_of(sectionVector.begin(), sectionVector.end(),</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                [](std::string i) { <span class="keywordflow">return</span> (i.find(<span class="stringliteral">&quot;\&quot;raw\&quot;:&quot;</span>) != std::string::npos); }));</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        CHECK(std::all_of(sectionVector.begin(), sectionVector.end(),</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                                [](std::string i) { <span class="keywordflow">return</span> (i.find(<span class="stringliteral">&quot;\&quot;unit\&quot;:&quot;</span>) != std::string::npos); }));</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="comment">// remove the time measurements as they vary from test to test</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    result.erase(std::remove_if (result.begin(),result.end(),</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                 [](<span class="keywordtype">char</span> c) { <span class="keywordflow">return</span> c == <span class="charliteral">&#39;.&#39;</span>; }), result.end());</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    result.erase(std::remove_if (result.begin(), result.end(), &amp;isdigit), result.end());</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    result.erase(std::remove_if (result.begin(),result.end(),</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                 [](<span class="keywordtype">char</span> c) { <span class="keywordflow">return</span> c == <span class="charliteral">&#39;\t&#39;</span>; }), result.end());</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    CHECK(result.find(<span class="stringliteral">&quot;ArmNN&quot;</span>) != std::string::npos);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    CHECK(result.find(<span class="stringliteral">&quot;inference_measurements&quot;</span>) != std::string::npos);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="comment">// ensure no spare parenthesis present in print output</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    CHECK(<a class="code" href="_json_printer_test_impl_8cpp.xhtml#a18a8f8518a9f180f987fed2b7b4706b0">AreParenthesesMatching</a>(result));</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;}</div><div class="ttc" id="_json_printer_test_impl_8cpp_xhtml_af163da5a12ebb9585cdad522b7c9613f"><div class="ttname"><a href="_json_printer_test_impl_8cpp.xhtml#af163da5a12ebb9585cdad522b7c9613f">ExtractSections</a></div><div class="ttdeci">std::vector&lt; std::string &gt; ExtractSections(const std::string &amp;exp)</div><div class="ttdef"><b>Definition:</b> <a href="_json_printer_test_impl_8cpp_source.xhtml#l00098">JsonPrinterTestImpl.cpp:98</a></div></div>
<div class="ttc" id="_json_printer_test_impl_8cpp_xhtml_af996caf31d1beb31e599205b02b9a210"><div class="ttname"><a href="_json_printer_test_impl_8cpp.xhtml#af996caf31d1beb31e599205b02b9a210">ExtractMeasurements</a></div><div class="ttdeci">std::vector&lt; double &gt; ExtractMeasurements(const std::string &amp;exp)</div><div class="ttdef"><b>Definition:</b> <a href="_json_printer_test_impl_8cpp_source.xhtml#l00051">JsonPrinterTestImpl.cpp:51</a></div></div>
<div class="ttc" id="_json_printer_test_impl_8cpp_xhtml_a18a8f8518a9f180f987fed2b7b4706b0"><div class="ttname"><a href="_json_printer_test_impl_8cpp.xhtml#a18a8f8518a9f180f987fed2b7b4706b0">AreParenthesesMatching</a></div><div class="ttdeci">bool AreParenthesesMatching(const std::string &amp;exp)</div><div class="ttdef"><b>Definition:</b> <a href="_json_printer_test_impl_8cpp_source.xhtml#l00027">JsonPrinterTestImpl.cpp:27</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="_json_printer_test_impl_8cpp.xhtml">JsonPrinterTestImpl.cpp</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:27:16 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
