<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: SendThread Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1profiling_1_1_send_thread.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1profiling_1_1_send_thread-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SendThread Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_send_thread_8hpp_source.xhtml">SendThread.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for SendThread:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1profiling_1_1_send_thread.png" usemap="#SendThread_map" alt=""/>
  <map id="SendThread_map" name="SendThread_map">
<area href="classarmnn_1_1profiling_1_1_i_send_thread.xhtml" alt="ISendThread" shape="rect" coords="0,0,84,24"/>
<area href="classarmnn_1_1profiling_1_1_i_consumer.xhtml" alt="IConsumer" shape="rect" coords="94,0,178,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad02c2666a109b2b56624295ffae06d6e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_send_thread.xhtml#ad02c2666a109b2b56624295ffae06d6e">SendThread</a> (<a class="el" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml">ProfilingStateMachine</a> &amp;profilingStateMachine, <a class="el" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml">IBufferManager</a> &amp;buffer, <a class="el" href="classarmnn_1_1profiling_1_1_i_send_counter_packet.xhtml">ISendCounterPacket</a> &amp;sendCounterPacket, int timeout=1000)</td></tr>
<tr class="separator:ad02c2666a109b2b56624295ffae06d6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1bb0c517d767271394b0fed3c88c764"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_send_thread.xhtml#af1bb0c517d767271394b0fed3c88c764">~SendThread</a> ()</td></tr>
<tr class="separator:af1bb0c517d767271394b0fed3c88c764"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a160847691cc1341520cf16c11c1ec724"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_send_thread.xhtml#a160847691cc1341520cf16c11c1ec724">Start</a> (<a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml">IProfilingConnection</a> &amp;profilingConnection) override</td></tr>
<tr class="memdesc:a160847691cc1341520cf16c11c1ec724"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start the thread.  <a href="#a160847691cc1341520cf16c11c1ec724">More...</a><br /></td></tr>
<tr class="separator:a160847691cc1341520cf16c11c1ec724"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32e1e5f33658343e4a480d37329cff38"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_send_thread.xhtml#a32e1e5f33658343e4a480d37329cff38">Stop</a> (bool rethrowSendThreadExceptions=true) override</td></tr>
<tr class="memdesc:a32e1e5f33658343e4a480d37329cff38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stop the thread.  <a href="#a32e1e5f33658343e4a480d37329cff38">More...</a><br /></td></tr>
<tr class="separator:a32e1e5f33658343e4a480d37329cff38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2d0b47c9cfacb7abdb524878b07c9a7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_send_thread.xhtml#ad2d0b47c9cfacb7abdb524878b07c9a7">SetReadyToRead</a> () override</td></tr>
<tr class="memdesc:ad2d0b47c9cfacb7abdb524878b07c9a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set a "ready to read" flag in the buffer to notify the reading thread to start reading it.  <a href="#ad2d0b47c9cfacb7abdb524878b07c9a7">More...</a><br /></td></tr>
<tr class="separator:ad2d0b47c9cfacb7abdb524878b07c9a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a503e3d34e944eb2100a9b6e26cde2aae"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_send_thread.xhtml#a503e3d34e944eb2100a9b6e26cde2aae">IsRunning</a> ()</td></tr>
<tr class="separator:a503e3d34e944eb2100a9b6e26cde2aae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca1be8cb336582dbbdc9dae32475cfea"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_send_thread.xhtml#aca1be8cb336582dbbdc9dae32475cfea">WaitForPacketSent</a> (uint32_t timeout)</td></tr>
<tr class="separator:aca1be8cb336582dbbdc9dae32475cfea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1profiling_1_1_i_send_thread"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1profiling_1_1_i_send_thread')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1profiling_1_1_i_send_thread.xhtml">ISendThread</a></td></tr>
<tr class="memitem:a4e0fb8f587a0f5ef84d28e57cd2b6afe inherit pub_methods_classarmnn_1_1profiling_1_1_i_send_thread"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_send_thread.xhtml#a4e0fb8f587a0f5ef84d28e57cd2b6afe">~ISendThread</a> ()</td></tr>
<tr class="separator:a4e0fb8f587a0f5ef84d28e57cd2b6afe inherit pub_methods_classarmnn_1_1profiling_1_1_i_send_thread"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1profiling_1_1_i_consumer"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1profiling_1_1_i_consumer')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1profiling_1_1_i_consumer.xhtml">IConsumer</a></td></tr>
<tr class="memitem:a70e3766f4088883274c4daa1941f03b9 inherit pub_methods_classarmnn_1_1profiling_1_1_i_consumer"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_consumer.xhtml#a70e3766f4088883274c4daa1941f03b9">~IConsumer</a> ()</td></tr>
<tr class="separator:a70e3766f4088883274c4daa1941f03b9 inherit pub_methods_classarmnn_1_1profiling_1_1_i_consumer"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_send_thread_8hpp_source.xhtml#l00029">29</a> of file <a class="el" href="_send_thread_8hpp_source.xhtml">SendThread.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad02c2666a109b2b56624295ffae06d6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad02c2666a109b2b56624295ffae06d6e">&#9670;&nbsp;</a></span>SendThread()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1profiling_1_1_send_thread.xhtml">SendThread</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1profiling_1_1_profiling_state_machine.xhtml">ProfilingStateMachine</a> &amp;&#160;</td>
          <td class="paramname"><em>profilingStateMachine</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml">IBufferManager</a> &amp;&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1profiling_1_1_i_send_counter_packet.xhtml">ISendCounterPacket</a> &amp;&#160;</td>
          <td class="paramname"><em>sendCounterPacket</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>timeout</em> = <code>1000</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_send_thread_8cpp_source.xhtml#l00023">23</a> of file <a class="el" href="_send_thread_8cpp_source.xhtml">SendThread.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml#a2d5f60e55b59ae8667ff593b5bfc5deb">IBufferManager::SetConsumer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    : m_StateMachine(profilingStateMachine)</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    , m_BufferManager(buffer)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    , m_SendCounterPacket(sendCounterPacket)</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    , m_Timeout(timeout)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    , m_IsRunning(<span class="keyword">false</span>)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    , m_KeepRunning(<span class="keyword">false</span>)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    , m_SendThreadException(<span class="keyword">nullptr</span>)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    m_BufferManager.<a class="code" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml#a2d5f60e55b59ae8667ff593b5bfc5deb">SetConsumer</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_i_buffer_manager_xhtml_a2d5f60e55b59ae8667ff593b5bfc5deb"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml#a2d5f60e55b59ae8667ff593b5bfc5deb">armnn::profiling::IBufferManager::SetConsumer</a></div><div class="ttdeci">virtual void SetConsumer(IConsumer *consumer)=0</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af1bb0c517d767271394b0fed3c88c764"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1bb0c517d767271394b0fed3c88c764">&#9670;&nbsp;</a></span>~SendThread()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1profiling_1_1_send_thread.xhtml">SendThread</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_send_thread_8hpp_source.xhtml#l00034">34</a> of file <a class="el" href="_send_thread_8hpp_source.xhtml">SendThread.hpp</a>.</p>

<p class="reference">References <a class="el" href="_send_thread_8cpp_source.xhtml#l00038">SendThread::SetReadyToRead()</a>, <a class="el" href="_send_thread_8cpp_source.xhtml#l00049">SendThread::Start()</a>, and <a class="el" href="_send_thread_8cpp_source.xhtml#l00079">SendThread::Stop()</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="comment">// Don&#39;t rethrow when destructing the object</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <a class="code" href="classarmnn_1_1profiling_1_1_send_thread.xhtml#a32e1e5f33658343e4a480d37329cff38">Stop</a>(<span class="keyword">false</span>);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1profiling_1_1_send_thread_xhtml_a32e1e5f33658343e4a480d37329cff38"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_send_thread.xhtml#a32e1e5f33658343e4a480d37329cff38">armnn::profiling::SendThread::Stop</a></div><div class="ttdeci">void Stop(bool rethrowSendThreadExceptions=true) override</div><div class="ttdoc">Stop the thread. </div><div class="ttdef"><b>Definition:</b> <a href="_send_thread_8cpp_source.xhtml#l00079">SendThread.cpp:79</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a503e3d34e944eb2100a9b6e26cde2aae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a503e3d34e944eb2100a9b6e26cde2aae">&#9670;&nbsp;</a></span>IsRunning()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsRunning </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_send_thread_8hpp_source.xhtml#l00045">45</a> of file <a class="el" href="_send_thread_8hpp_source.xhtml">SendThread.hpp</a>.</p>

<p class="reference">References <a class="el" href="_send_thread_8cpp_source.xhtml#l00260">SendThread::WaitForPacketSent()</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{ <span class="keywordflow">return</span> m_IsRunning.load(); }</div></div><!-- fragment -->
</div>
</div>
<a id="ad2d0b47c9cfacb7abdb524878b07c9a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2d0b47c9cfacb7abdb524878b07c9a7">&#9670;&nbsp;</a></span>SetReadyToRead()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetReadyToRead </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set a "ready to read" flag in the buffer to notify the reading thread to start reading it. </p>

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_consumer.xhtml#a4b4fe1cfea0198d9defd88178f073365">IConsumer</a>.</p>

<p class="definition">Definition at line <a class="el" href="_send_thread_8cpp_source.xhtml#l00038">38</a> of file <a class="el" href="_send_thread_8cpp_source.xhtml">SendThread.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_send_thread_8cpp_source.xhtml#l00079">SendThread::Stop()</a>, and <a class="el" href="_send_thread_8hpp_source.xhtml#l00034">SendThread::~SendThread()</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="comment">// We need to wait for the send thread to release its mutex</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        std::lock_guard&lt;std::mutex&gt; lck(m_WaitMutex);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        m_ReadyToRead = <span class="keyword">true</span>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="comment">// Signal the send thread that there&#39;s something to read in the buffer</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    m_WaitCondition.notify_one();</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a160847691cc1341520cf16c11c1ec724"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a160847691cc1341520cf16c11c1ec724">&#9670;&nbsp;</a></span>Start()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Start </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml">IProfilingConnection</a> &amp;&#160;</td>
          <td class="paramname"><em>profilingConnection</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Start the thread. </p>

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_send_thread.xhtml#ae9429e2efd9a811c148c6b56b635567c">ISendThread</a>.</p>

<p class="definition">Definition at line <a class="el" href="_send_thread_8cpp_source.xhtml#l00049">49</a> of file <a class="el" href="_send_thread_8cpp_source.xhtml">SendThread.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_service_8cpp_source.xhtml#l00112">ProfilingService::Update()</a>, and <a class="el" href="_send_thread_8hpp_source.xhtml#l00034">SendThread::~SendThread()</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="comment">// Check if the send thread is already running</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">if</span> (m_IsRunning.load())</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="comment">// The send thread is already running</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">if</span> (m_SendThread.joinable())</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        m_SendThread.join();</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="comment">// Mark the send thread as running</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    m_IsRunning.store(<span class="keyword">true</span>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// Keep the send procedure going until the send thread is signalled to stop</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    m_KeepRunning.store(<span class="keyword">true</span>);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// Make sure the send thread will not flush the buffer until signaled to do so</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// no need for a mutex as the send thread can not be running at this point</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    m_ReadyToRead = <span class="keyword">false</span>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    m_PacketSent = <span class="keyword">false</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="comment">// Start the send thread</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    m_SendThread = std::thread(&amp;SendThread::Send, <span class="keyword">this</span>, std::ref(profilingConnection));</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a32e1e5f33658343e4a480d37329cff38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32e1e5f33658343e4a480d37329cff38">&#9670;&nbsp;</a></span>Stop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Stop </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>rethrowSendThreadExceptions</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Stop the thread. </p>

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_send_thread.xhtml#a7c6c2c7d1aeec305dcae4bc901b0bdca">ISendThread</a>.</p>

<p class="definition">Definition at line <a class="el" href="_send_thread_8cpp_source.xhtml#l00079">79</a> of file <a class="el" href="_send_thread_8cpp_source.xhtml">SendThread.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4d3d769b812b6faa6b76e1a8abaece2d">armnn::profiling::Active</a>, <a class="el" href="_profiling_state_machine_8cpp_source.xhtml#l00031">ProfilingStateMachine::GetCurrentState()</a>, <a class="el" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml#acc2e97eddda6324261ba202634cc8ef8">IBufferManager::GetReadableBuffer()</a>, <a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml#a8a3511046982c64efa3e3833d749e5ef">IProfilingConnection::IsOpen()</a>, <a class="el" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml#a033cae4e6d00fc1958f79f09216a3437">IBufferManager::MarkRead()</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a4075072d219e061ca0f3124f8fbef463">armnn::profiling::NotConnected</a>, <a class="el" href="classarmnn_1_1profiling_1_1_i_send_counter_packet.xhtml#a14e9efe48e3d4ed05396f8a856bfaeea">ISendCounterPacket::SendStreamMetaDataPacket()</a>, <a class="el" href="_send_thread_8cpp_source.xhtml#l00038">SendThread::SetReadyToRead()</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a962074a9de1cf3d6d7b6f955a0a94820">armnn::profiling::Uninitialised</a>, <a class="el" href="namespacearmnn_1_1profiling.xhtml#acb0c054138599582d5a5f537e9798806a1dc1edc76d5b3c0325f00002f4c841f5">armnn::profiling::WaitingForAck</a>, and <a class="el" href="classarmnn_1_1profiling_1_1_i_profiling_connection.xhtml#ac78c6bd1a545934a805c88194214b09d">IProfilingConnection::WritePacket()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_service_8cpp_source.xhtml#l00329">ProfilingService::GetSendTimelinePacket()</a>, <a class="el" href="_profiling_service_8cpp_source.xhtml#l00112">ProfilingService::Update()</a>, and <a class="el" href="_send_thread_8hpp_source.xhtml#l00034">SendThread::~SendThread()</a>.</p>
<div class="fragment"><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="comment">// Signal the send thread to stop</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    m_KeepRunning.store(<span class="keyword">false</span>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="comment">// Check that the send thread is running</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">if</span> (m_SendThread.joinable())</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="comment">// Kick the send thread out of the wait condition</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <a class="code" href="classarmnn_1_1profiling_1_1_send_thread.xhtml#ad2d0b47c9cfacb7abdb524878b07c9a7">SetReadyToRead</a>();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="comment">// Wait for the send thread to complete operations</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        m_SendThread.join();</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="comment">// Check if the send thread exception has to be rethrown</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">if</span> (!rethrowSendThreadExceptions)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="comment">// No need to rethrow the send thread exception, return immediately</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Check if there&#39;s an exception to rethrow</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">if</span> (m_SendThreadException)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="comment">// Rethrow the send thread exception</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        std::rethrow_exception(m_SendThreadException);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="comment">// Nullify the exception as it has been rethrown</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        m_SendThreadException = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_send_thread_xhtml_ad2d0b47c9cfacb7abdb524878b07c9a7"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_send_thread.xhtml#ad2d0b47c9cfacb7abdb524878b07c9a7">armnn::profiling::SendThread::SetReadyToRead</a></div><div class="ttdeci">void SetReadyToRead() override</div><div class="ttdoc">Set a &quot;ready to read&quot; flag in the buffer to notify the reading thread to start reading it...</div><div class="ttdef"><b>Definition:</b> <a href="_send_thread_8cpp_source.xhtml#l00038">SendThread.cpp:38</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aca1be8cb336582dbbdc9dae32475cfea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca1be8cb336582dbbdc9dae32475cfea">&#9670;&nbsp;</a></span>WaitForPacketSent()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool WaitForPacketSent </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>timeout</em> = <code>1000</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_send_thread_8cpp_source.xhtml#l00260">260</a> of file <a class="el" href="_send_thread_8cpp_source.xhtml">SendThread.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_send_thread_8hpp_source.xhtml#l00045">SendThread::IsRunning()</a>, and <a class="el" href="_profiling_service_8hpp_source.xhtml#l00302">ProfilingService::WaitForPacketSent()</a>.</p>
<div class="fragment"><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;{</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    std::unique_lock&lt;std::mutex&gt; lock(m_PacketSentWaitMutex);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="comment">// Blocks until notified that at least a packet has been sent or until timeout expires.</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordtype">bool</span> timedOut = m_PacketSentWaitCondition.wait_for(lock,</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                                                       std::chrono::milliseconds(timeout),</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                                                       [&amp;] { <span class="keywordflow">return</span> m_PacketSent; });</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    m_PacketSent = <span class="keyword">false</span>;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">return</span> timedOut;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/profiling/<a class="el" href="_send_thread_8hpp_source.xhtml">SendThread.hpp</a></li>
<li>src/profiling/<a class="el" href="_send_thread_8cpp_source.xhtml">SendThread.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="namespacearmnn_1_1profiling.xhtml">profiling</a></li><li class="navelem"><a class="el" href="classarmnn_1_1profiling_1_1_send_thread.xhtml">SendThread</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:25 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
