<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/TfLiteBenchmark-Armnn/TfLiteBenchmark-Armnn.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_tf_lite_benchmark-_armnn_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">TfLiteBenchmark-Armnn.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_tf_lite_benchmark-_armnn_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2020 STMicroelectronics and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;getopt.h&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;numeric&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;signal.h&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;sys/time.h&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_backend_id_8hpp.xhtml">armnn/BackendId.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_backend_registry_8hpp.xhtml">armnn/BackendRegistry.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_runtime_8hpp.xhtml">armnn/IRuntime.hpp</a>&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_numeric_cast_8hpp.xhtml">armnn/utility/NumericCast.hpp</a>&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_tf_lite_parser_8hpp.xhtml">armnnTfLiteParser/ITfLiteParser.hpp</a>&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">// Application parameters</span></div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#a05e380d8db6803e902ee10ada180bf9c">   21</a></span>&#160;std::vector&lt;armnn::BackendId&gt; <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#a05e380d8db6803e902ee10ada180bf9c">default_preferred_backends_order</a> = {<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a>};</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aabb2e0ed0630c978f4049b8a532af9d8">   22</a></span>&#160;std::vector&lt;armnn::BackendId&gt; <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aabb2e0ed0630c978f4049b8a532af9d8">preferred_backends_order</a>;</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ab08a4340366edc1a450635a28a5f3984">   23</a></span>&#160;std::string <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ab08a4340366edc1a450635a28a5f3984">model_file_str</a>;</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ad0122c5d8e81deb24ddc15559ab88fa4">   24</a></span>&#160;std::string <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ad0122c5d8e81deb24ddc15559ab88fa4">preferred_backend_str</a>;</div><div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aaa728eb736da07d15a707029028118de">   25</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aaa728eb736da07d15a707029028118de">nb_loops</a> = 1;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ae3d72fe1ace913f5f5846f55b98a5959">   27</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ae3d72fe1ace913f5f5846f55b98a5959">get_us</a>(<span class="keyword">struct</span> timeval t)</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordflow">return</span> (armnn::numeric_cast&lt;double&gt;(t.tv_sec) *</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            armnn::numeric_cast&lt;double&gt;(1000000) +</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;            armnn::numeric_cast&lt;double&gt;(t.tv_usec));</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#add162d6cfc9aa5f0d3edc407066154a2">   34</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#add162d6cfc9aa5f0d3edc407066154a2">get_ms</a>(<span class="keyword">struct</span> timeval t)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">return</span> (armnn::numeric_cast&lt;double&gt;(t.tv_sec) *</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            armnn::numeric_cast&lt;double&gt;(1000) +</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            armnn::numeric_cast&lt;double&gt;(t.tv_usec) / 1000);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> print_help(<span class="keywordtype">char</span>** argv)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    std::cout &lt;&lt;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="stringliteral">&quot;Usage: &quot;</span> &lt;&lt; argv[0] &lt;&lt; <span class="stringliteral">&quot; -m &lt;model .tflite&gt;\n&quot;</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="stringliteral">&quot;-m --model_file &lt;.tflite file path&gt;:  .tflite model to be executed\n&quot;</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="stringliteral">&quot;-b --backend &lt;device&gt;:                preferred backend device to run layers on by default. Possible choices: &quot;</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                               &lt;&lt; <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a>().<a class="code" href="classarmnn_1_1_backend_registry.xhtml#ae1de2f7ca1db17f45f97155e239b8b45">GetBackendIdsAsString</a>() &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="stringliteral">&quot;                                      (by default CpuAcc, CpuRef)\n&quot;</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="stringliteral">&quot;-l --loops &lt;int&gt;:                     provide the number of times the inference will be executed\n&quot;</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="stringliteral">&quot;                                      (by default nb_loops=1)\n&quot;</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="stringliteral">&quot;--help:                               show this help\n&quot;</span>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    exit(1);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aefcb3f70374ff9b6256aac6e12870399">   56</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aefcb3f70374ff9b6256aac6e12870399">process_args</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* <span class="keyword">const</span> short_opts = <span class="stringliteral">&quot;m:b:l:h&quot;</span>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> option long_opts[] = {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        {<span class="stringliteral">&quot;model_file&quot;</span>,   required_argument, <span class="keyword">nullptr</span>, <span class="charliteral">&#39;m&#39;</span>},</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        {<span class="stringliteral">&quot;backend&quot;</span>,      required_argument, <span class="keyword">nullptr</span>, <span class="charliteral">&#39;b&#39;</span>},</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        {<span class="stringliteral">&quot;loops&quot;</span>,        required_argument, <span class="keyword">nullptr</span>, <span class="charliteral">&#39;l&#39;</span>},</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        {<span class="stringliteral">&quot;help&quot;</span>,         no_argument,       <span class="keyword">nullptr</span>, <span class="charliteral">&#39;h&#39;</span>},</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        {<span class="keyword">nullptr</span>,        no_argument,       <span class="keyword">nullptr</span>, 0}</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    };</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> opt = getopt_long(argc, argv, short_opts, long_opts, <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">if</span> (-1 == opt)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">switch</span> (opt)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">case</span> <span class="charliteral">&#39;m&#39;</span>:</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ab08a4340366edc1a450635a28a5f3984">model_file_str</a> = std::string(optarg);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;model file set to: &quot;</span> &lt;&lt; <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ab08a4340366edc1a450635a28a5f3984">model_file_str</a> &lt;&lt; std::endl;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">case</span> <span class="charliteral">&#39;b&#39;</span>:</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ad0122c5d8e81deb24ddc15559ab88fa4">preferred_backend_str</a> = std::string(optarg);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="comment">// Overwrite the backend</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aabb2e0ed0630c978f4049b8a532af9d8">preferred_backends_order</a>.push_back(<a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ad0122c5d8e81deb24ddc15559ab88fa4">preferred_backend_str</a>);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;backend device set to:&quot;</span> &lt;&lt; <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ad0122c5d8e81deb24ddc15559ab88fa4">preferred_backend_str</a> &lt;&lt; std::endl;;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">case</span> <span class="charliteral">&#39;l&#39;</span>:</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aaa728eb736da07d15a707029028118de">nb_loops</a> = std::stoi(optarg);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;benchmark will execute &quot;</span> &lt;&lt; <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aaa728eb736da07d15a707029028118de">nb_loops</a> &lt;&lt; <span class="stringliteral">&quot; inference(s)&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">case</span> <span class="charliteral">&#39;h&#39;</span>: <span class="comment">// -h or --help</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">case</span> <span class="charliteral">&#39;?&#39;</span>: <span class="comment">// Unrecognized option</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            print_help(argv);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ab08a4340366edc1a450635a28a5f3984">model_file_str</a>.empty())</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        print_help(argv);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">  107</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    std::vector&lt;double&gt; inferenceTimes;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="comment">// Get options</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aefcb3f70374ff9b6256aac6e12870399">process_args</a>(argc, argv);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// Create the runtime</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(options));</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">// Create Parser</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="namespacearmnn_tf_lite_parser.xhtml#af69bedce3c37be895f75146016ba8a17">armnnTfLiteParser::ITfLiteParserPtr</a> armnnparser(<a class="code" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml#a9932449a89a62cfcfd72a4fedbee1ab7">armnnTfLiteParser::ITfLiteParser::Create</a>());</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// Create a network</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network = armnnparser-&gt;CreateNetworkFromBinaryFile(<a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ab08a4340366edc1a450635a28a5f3984">model_file_str</a>.c_str());</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">if</span> (!network)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;Failed to create an ArmNN network&quot;</span>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// Optimize the network</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aabb2e0ed0630c978f4049b8a532af9d8">preferred_backends_order</a>.size() == 0)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aabb2e0ed0630c978f4049b8a532af9d8">preferred_backends_order</a> = <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#a05e380d8db6803e902ee10ada180bf9c">default_preferred_backends_order</a>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a> optimizedNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a>(*network,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                                               <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aabb2e0ed0630c978f4049b8a532af9d8">preferred_backends_order</a>,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                                               runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a> networkId;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">// Load the network in to the runtime</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    runtime-&gt;LoadNetwork(networkId, std::move(optimizedNet));</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="comment">// Check the number of subgraph</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">if</span> (armnnparser-&gt;GetSubgraphCount() != 1)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Model with more than 1 subgraph is not supported by this benchmark application.\n&quot;</span>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        exit(0);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordtype">size_t</span> subgraphId = 0;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// Set up the input network</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\nModel information:&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    std::vector&lt;armnnTfLiteParser::BindingPointInfo&gt; inputBindings;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    std::vector&lt;armnn::TensorInfo&gt;                   inputTensorInfos;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    std::vector&lt;std::string&gt; inputTensorNames = armnnparser-&gt;GetSubgraphInputTensorNames(subgraphId);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; inputTensorNames.size() ; i++)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;inputTensorNames[&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;] = &quot;</span> &lt;&lt; inputTensorNames[i] &lt;&lt; std::endl;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <a class="code" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">armnnTfLiteParser::BindingPointInfo</a> inputBinding = armnnparser-&gt;GetNetworkInputBindingInfo(</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                                                           subgraphId,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                                                           inputTensorNames[i]);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo = runtime-&gt;GetInputTensorInfo(networkId, inputBinding.first);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        inputBindings.push_back(inputBinding);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        inputTensorInfos.push_back(inputTensorInfo);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    }</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// Set up the output network</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    std::vector&lt;armnnTfLiteParser::BindingPointInfo&gt; outputBindings;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    std::vector&lt;armnn::TensorInfo&gt;                   outputTensorInfos;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    std::vector&lt;std::string&gt; outputTensorNames = armnnparser-&gt;GetSubgraphOutputTensorNames(subgraphId);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputTensorNames.size() ; i++)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;outputTensorNames[&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;] = &quot;</span> &lt;&lt; outputTensorNames[i] &lt;&lt; std::endl;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <a class="code" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">armnnTfLiteParser::BindingPointInfo</a> outputBinding = armnnparser-&gt;GetNetworkOutputBindingInfo(</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                                                             subgraphId,</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                                                             outputTensorNames[i]);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo = runtime-&gt;GetOutputTensorInfo(networkId, outputBinding.first);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        outputBindings.push_back(outputBinding);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        outputTensorInfos.push_back(outputTensorInfo);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="comment">// Allocate input tensors</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nb_inputs = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(inputTensorInfos.size());</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> inputTensors;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    std::vector&lt;std::vector&lt;float&gt;&gt; in;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0 ; i &lt; nb_inputs ; i++)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        std::vector&lt;float&gt; in_data(inputTensorInfos.at(i).GetNumElements());</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        in.push_back(in_data);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        inputTensors.push_back({ inputBindings[i].first, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(inputBindings[i].second, in[i].data()) });</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">// Allocate output tensors</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nb_ouputs = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(outputTensorInfos.size());</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> outputTensors;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    std::vector&lt;std::vector&lt;float&gt;&gt; out;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; nb_ouputs ; i++)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        std::vector&lt;float&gt; out_data(outputTensorInfos.at(i).GetNumElements());</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        out.push_back(out_data);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        outputTensors.push_back({ outputBindings[i].first, <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(outputBindings[i].second, out[i].data()) });</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="comment">// Run the inferences</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\ninferences are running: &quot;</span> &lt;&lt; std::flush;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0 ; i &lt; <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aaa728eb736da07d15a707029028118de">nb_loops</a> ; i++)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keyword">struct </span>timeval start_time, stop_time;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        gettimeofday(&amp;start_time, <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        runtime-&gt;EnqueueWorkload(networkId, inputTensors, outputTensors);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        gettimeofday(&amp;stop_time, <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        inferenceTimes.push_back((<a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ae3d72fe1ace913f5f5846f55b98a5959">get_us</a>(stop_time) - <a class="code" href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ae3d72fe1ace913f5f5846f55b98a5959">get_us</a>(start_time)));</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;# &quot;</span> &lt;&lt; std::flush;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keyword">auto</span> maxInfTime = *std::max_element(inferenceTimes.begin(), inferenceTimes.end());</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">auto</span> minInfTime = *std::min_element(inferenceTimes.begin(), inferenceTimes.end());</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">auto</span> avgInfTime = accumulate(inferenceTimes.begin(), inferenceTimes.end(), 0.0) /</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">double</span>&gt;(inferenceTimes.size());</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n\ninference time: &quot;</span>;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;min=&quot;</span> &lt;&lt; minInfTime &lt;&lt; <span class="stringliteral">&quot;us  &quot;</span>;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;max=&quot;</span> &lt;&lt; maxInfTime &lt;&lt; <span class="stringliteral">&quot;us  &quot;</span>;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;avg=&quot;</span> &lt;&lt; avgInfTime &lt;&lt; <span class="stringliteral">&quot;us&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00049">Runtime.cpp:49</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a></div><div class="ttdoc">CPU Execution: Reference C++ kernels. </div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00033">IRuntime.hpp:33</a></div></div>
<div class="ttc" id="_i_runtime_8hpp_xhtml"><div class="ttname"><a href="_i_runtime_8hpp.xhtml">IRuntime.hpp</a></div></div>
<div class="ttc" id="_tf_lite_benchmark-_armnn_8cpp_xhtml_aaa728eb736da07d15a707029028118de"><div class="ttname"><a href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aaa728eb736da07d15a707029028118de">nb_loops</a></div><div class="ttdeci">int nb_loops</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_benchmark-_armnn_8cpp_source.xhtml#l00025">TfLiteBenchmark-Armnn.cpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00015">BackendRegistry.cpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="namespacearmnn_tf_lite_parser_xhtml_af69bedce3c37be895f75146016ba8a17"><div class="ttname"><a href="namespacearmnn_tf_lite_parser.xhtml#af69bedce3c37be895f75146016ba8a17">armnnTfLiteParser::ITfLiteParserPtr</a></div><div class="ttdeci">std::unique_ptr&lt; ITfLiteParser, void(*)(ITfLiteParser *parser)&gt; ITfLiteParserPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_tf_lite_parser_8hpp_source.xhtml#l00024">ITfLiteParser.hpp:24</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_ae1de2f7ca1db17f45f97155e239b8b45"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#ae1de2f7ca1db17f45f97155e239b8b45">armnn::BackendRegistry::GetBackendIdsAsString</a></div><div class="ttdeci">std::string GetBackendIdsAsString() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00085">BackendRegistry.cpp:85</a></div></div>
<div class="ttc" id="_backend_registry_8hpp_xhtml"><div class="ttname"><a href="_backend_registry_8hpp.xhtml">BackendRegistry.hpp</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser_xhtml_a9932449a89a62cfcfd72a4fedbee1ab7"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml#a9932449a89a62cfcfd72a4fedbee1ab7">armnnTfLiteParser::ITfLiteParser::Create</a></div><div class="ttdeci">static ITfLiteParserPtr Create(const armnn::Optional&lt; TfLiteParserOptions &gt; &amp;options=armnn::EmptyOptional())</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00063">TfLiteParser.cpp:63</a></div></div>
<div class="ttc" id="_numeric_cast_8hpp_xhtml"><div class="ttname"><a href="_numeric_cast_8hpp.xhtml">NumericCast.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00319">Tensor.hpp:319</a></div></div>
<div class="ttc" id="_i_tf_lite_parser_8hpp_xhtml"><div class="ttname"><a href="_i_tf_lite_parser_8hpp.xhtml">ITfLiteParser.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01864">Network.cpp:1864</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0d8160388a127c1a23b37bc88dc6e2ec"><div class="ttname"><a href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00027">IRuntime.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="_tf_lite_benchmark-_armnn_8cpp_xhtml_ae3d72fe1ace913f5f5846f55b98a5959"><div class="ttname"><a href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ae3d72fe1ace913f5f5846f55b98a5959">get_us</a></div><div class="ttdeci">double get_us(struct timeval t)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_benchmark-_armnn_8cpp_source.xhtml#l00027">TfLiteBenchmark-Armnn.cpp:27</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00239">INetwork.hpp:239</a></div></div>
<div class="ttc" id="_tf_lite_benchmark-_armnn_8cpp_xhtml_aefcb3f70374ff9b6256aac6e12870399"><div class="ttname"><a href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aefcb3f70374ff9b6256aac6e12870399">process_args</a></div><div class="ttdeci">void process_args(int argc, char **argv)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_benchmark-_armnn_8cpp_source.xhtml#l00056">TfLiteBenchmark-Armnn.cpp:56</a></div></div>
<div class="ttc" id="_tf_lite_benchmark-_armnn_8cpp_xhtml_ab08a4340366edc1a450635a28a5f3984"><div class="ttname"><a href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ab08a4340366edc1a450635a28a5f3984">model_file_str</a></div><div class="ttdeci">std::string model_file_str</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_benchmark-_armnn_8cpp_source.xhtml#l00023">TfLiteBenchmark-Armnn.cpp:23</a></div></div>
<div class="ttc" id="_backend_id_8hpp_xhtml"><div class="ttname"><a href="_backend_id_8hpp.xhtml">BackendId.hpp</a></div></div>
<div class="ttc" id="_tf_lite_benchmark-_armnn_8cpp_xhtml_a0ddf1224851353fc92bfbff6f499fa97"><div class="ttname"><a href="_tf_lite_benchmark-_armnn_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a></div><div class="ttdeci">int main(int argc, char *argv[])</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_benchmark-_armnn_8cpp_source.xhtml#l00107">TfLiteBenchmark-Armnn.cpp:107</a></div></div>
<div class="ttc" id="_tf_lite_benchmark-_armnn_8cpp_xhtml_a05e380d8db6803e902ee10ada180bf9c"><div class="ttname"><a href="_tf_lite_benchmark-_armnn_8cpp.xhtml#a05e380d8db6803e902ee10ada180bf9c">default_preferred_backends_order</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; default_preferred_backends_order</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_benchmark-_armnn_8cpp_source.xhtml#l00021">TfLiteBenchmark-Armnn.cpp:21</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00077">IRuntime.hpp:77</a></div></div>
<div class="ttc" id="_tf_lite_benchmark-_armnn_8cpp_xhtml_add162d6cfc9aa5f0d3edc407066154a2"><div class="ttname"><a href="_tf_lite_benchmark-_armnn_8cpp.xhtml#add162d6cfc9aa5f0d3edc407066154a2">get_ms</a></div><div class="ttdeci">double get_ms(struct timeval t)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_benchmark-_armnn_8cpp_source.xhtml#l00034">TfLiteBenchmark-Armnn.cpp:34</a></div></div>
<div class="ttc" id="_tf_lite_benchmark-_armnn_8cpp_xhtml_ad0122c5d8e81deb24ddc15559ab88fa4"><div class="ttname"><a href="_tf_lite_benchmark-_armnn_8cpp.xhtml#ad0122c5d8e81deb24ddc15559ab88fa4">preferred_backend_str</a></div><div class="ttdeci">std::string preferred_backend_str</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_benchmark-_armnn_8cpp_source.xhtml#l00024">TfLiteBenchmark-Armnn.cpp:24</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a></div><div class="ttdoc">CPU Execution: NEON: ArmCompute. </div></div>
<div class="ttc" id="_tf_lite_benchmark-_armnn_8cpp_xhtml_aabb2e0ed0630c978f4049b8a532af9d8"><div class="ttname"><a href="_tf_lite_benchmark-_armnn_8cpp.xhtml#aabb2e0ed0630c978f4049b8a532af9d8">preferred_backends_order</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; preferred_backends_order</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_benchmark-_armnn_8cpp_source.xhtml#l00022">TfLiteBenchmark-Armnn.cpp:22</a></div></div>
<div class="ttc" id="namespacearmnn_tf_lite_parser_xhtml_a9084adbf804022c874039ad40d1939e9"><div class="ttname"><a href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">armnnTfLiteParser::BindingPointInfo</a></div><div class="ttdeci">armnn::BindingPointInfo BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_i_tf_lite_parser_8hpp_source.xhtml#l00020">ITfLiteParser.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00238">INetwork.hpp:238</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_a7a49a416e46eae238f261ac197dd364.xhtml">TfLiteBenchmark-Armnn</a></li><li class="navelem"><a class="el" href="_tf_lite_benchmark-_armnn_8cpp.xhtml">TfLiteBenchmark-Armnn.cpp</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:31 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
