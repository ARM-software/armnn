<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/test/TestLayerVisitor.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_test_layer_visitor_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">TestLayerVisitor.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_test_layer_visitor_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_strategy_base_8hpp.xhtml">armnn/StrategyBase.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_descriptors_8hpp.xhtml">armnn/Descriptors.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_tensor_handle_8hpp.xhtml">armnn/backends/TensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;{</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">// Abstract base class with do nothing implementations for all layers</span></div><div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="classarmnn_1_1_test_layer_visitor.xhtml">   14</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml">TestLayerVisitor</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_strategy_base.xhtml">StrategyBase</a>&lt;NoThrowStrategy&gt;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="classarmnn_1_1_test_layer_visitor.xhtml#a91d4162aba5f047ac80adaf0abf9c804">   17</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#a91d4162aba5f047ac80adaf0abf9c804">~TestLayerVisitor</a>() {}</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#a50d9ed2d05fac25795824c880f0eee6b">CheckLayerName</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name);</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#a3fb243351836fe2feebd36e7e3869154">CheckLayerPointer</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer);</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">CheckConstTensors</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; expected,</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; actual);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">CheckConstTensors</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>&amp; expected,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor_handle.xhtml">ConstTensorHandle</a>&amp; actual);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#ac45b7720c3156ab1004a904da7d42b44">CheckConstTensorPtrs</a>(<span class="keyword">const</span> std::string&amp; name,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>* expected,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>* actual);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#ac45b7720c3156ab1004a904da7d42b44">CheckConstTensorPtrs</a>(<span class="keyword">const</span> std::string&amp; name,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a>* expected,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                              <span class="keyword">const</span> std::shared_ptr&lt;ConstTensorHandle&gt; actual);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#a2d389b5affe2059991cfd9184b8e0b47">CheckOptionalConstTensors</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>&amp; expected, <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>&amp; actual);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* m_LayerName;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classarmnn_1_1_test_layer_visitor.xhtml#a7bca6e8733a25190cb5b2731d31c195f">   41</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="classarmnn_1_1_test_layer_visitor.xhtml#a7bca6e8733a25190cb5b2731d31c195f">TestLayerVisitor</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name) : m_LayerName(name)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">if</span> (name == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            m_LayerName = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;};</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;} <span class="comment">//namespace armnn</span></div><div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml">armnn::TestLayerVisitor</a></div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8hpp_source.xhtml#l00014">TestLayerVisitor.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml_a50d9ed2d05fac25795824c880f0eee6b"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml#a50d9ed2d05fac25795824c880f0eee6b">armnn::TestLayerVisitor::CheckLayerName</a></div><div class="ttdeci">void CheckLayerName(const char *name)</div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8cpp_source.xhtml#l00013">TestLayerVisitor.cpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00066">INetwork.hpp:66</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml_a7bca6e8733a25190cb5b2731d31c195f"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml#a7bca6e8733a25190cb5b2731d31c195f">armnn::TestLayerVisitor::TestLayerVisitor</a></div><div class="ttdeci">TestLayerVisitor(const char *name)</div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8hpp_source.xhtml#l00041">TestLayerVisitor.hpp:41</a></div></div>
<div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml_a3fb243351836fe2feebd36e7e3869154"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml#a3fb243351836fe2feebd36e7e3869154">armnn::TestLayerVisitor::CheckLayerPointer</a></div><div class="ttdeci">void CheckLayerPointer(const IConnectableLayer *layer)</div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8cpp_source.xhtml#l00029">TestLayerVisitor.cpp:29</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor_handle.xhtml">armnn::ConstTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00024">TensorHandle.hpp:24</a></div></div>
<div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml_ab49c9a185af94e39ae9cd81aa8ec926c"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml#ab49c9a185af94e39ae9cd81aa8ec926c">armnn::TestLayerVisitor::CheckConstTensors</a></div><div class="ttdeci">void CheckConstTensors(const ConstTensor &amp;expected, const ConstTensor &amp;actual)</div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8cpp_source.xhtml#l00034">TestLayerVisitor.cpp:34</a></div></div>
<div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml_a91d4162aba5f047ac80adaf0abf9c804"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml#a91d4162aba5f047ac80adaf0abf9c804">armnn::TestLayerVisitor::~TestLayerVisitor</a></div><div class="ttdeci">virtual ~TestLayerVisitor()</div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8hpp_source.xhtml#l00017">TestLayerVisitor.hpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_strategy_base_xhtml"><div class="ttname"><a href="classarmnn_1_1_strategy_base.xhtml">armnn::StrategyBase</a></div><div class="ttdoc">Strategy base class with empty implementations. </div><div class="ttdef"><b>Definition:</b> <a href="_strategy_base_8hpp_source.xhtml#l00027">StrategyBase.hpp:27</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_tensor_handle_8hpp.xhtml">TensorHandle.hpp</a></div></div>
<div class="ttc" id="_strategy_base_8hpp_xhtml"><div class="ttname"><a href="_strategy_base_8hpp.xhtml">StrategyBase.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml_ac45b7720c3156ab1004a904da7d42b44"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml#ac45b7720c3156ab1004a904da7d42b44">armnn::TestLayerVisitor::CheckConstTensorPtrs</a></div><div class="ttdeci">void CheckConstTensorPtrs(const std::string &amp;name, const ConstTensor *expected, const ConstTensor *actual)</div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8cpp_source.xhtml#l00090">TestLayerVisitor.cpp:90</a></div></div>
<div class="ttc" id="_descriptors_8hpp_xhtml"><div class="ttname"><a href="_descriptors_8hpp.xhtml">Descriptors.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_test_layer_visitor_xhtml_a2d389b5affe2059991cfd9184b8e0b47"><div class="ttname"><a href="classarmnn_1_1_test_layer_visitor.xhtml#a2d389b5affe2059991cfd9184b8e0b47">armnn::TestLayerVisitor::CheckOptionalConstTensors</a></div><div class="ttdeci">void CheckOptionalConstTensors(const Optional&lt; ConstTensor &gt; &amp;expected, const Optional&lt; ConstTensor &gt; &amp;actual)</div><div class="ttdef"><b>Definition:</b> <a href="_test_layer_visitor_8cpp_source.xhtml#l00108">TestLayerVisitor.cpp:108</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_9d86fd1fbecbedf5bdb69c7e7235fe5f.xhtml">test</a></li><li class="navelem"><a class="el" href="_test_layer_visitor_8hpp.xhtml">TestLayerVisitor.hpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:19:42 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
