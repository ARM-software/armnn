<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: include/armnn/BackendId.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_backend_id_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">BackendId.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_backend_id_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;ostream&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;unordered_set&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// The Compute enum is now deprecated and it is now</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// being replaced by BackendId</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">   21</a></span>&#160;<span class="comment"></span><span class="keyword">enum class</span> <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">Compute</a></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Undefined</a> = 0,<span class="comment"></span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">    /// CPU Execution: Reference C++ kernels</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">CpuRef</a>    = 1,<span class="comment"></span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">    /// CPU Execution: NEON: ArmCompute</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">CpuAcc</a>    = 2,<span class="comment"></span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">    /// GPU Execution: OpenCL: ArmCompute</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"></span>    <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">GpuAcc</a>    = 3</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;};</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">/// Deprecated function that will be removed together with</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">/// the Compute enum</span></div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">   34</a></span>&#160;<span class="comment"></span>constexpr <span class="keywordtype">char</span> <span class="keyword">const</span>* <a class="code" href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">GetComputeDeviceAsCString</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">Compute</a> compute)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">switch</span> (compute)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a>: <span class="keywordflow">return</span> <span class="stringliteral">&quot;CpuRef&quot;</span>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>: <span class="keywordflow">return</span> <span class="stringliteral">&quot;CpuAcc&quot;</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::Compute::GpuAcc</a>: <span class="keywordflow">return</span> <span class="stringliteral">&quot;GpuAcc&quot;</span>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">default</span>:                     <span class="keywordflow">return</span> <span class="stringliteral">&quot;Unknown&quot;</span>;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    }</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">/// Deprecated function that will be removed together with</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/// the Compute enum</span></div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a5b0313cb554380d6e4dfb24c31f9e605">   47</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const std::vector&lt;Compute&gt;&amp; compute)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">Compute</a>&amp; comp : compute)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        os &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">GetComputeDeviceAsCString</a>(comp) &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">/// Deprecated function that will be removed together with</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">/// the Compute enum</span></div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a127a59fdf5e6d2fa74f87f9265de958b">   58</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const std::set&lt;Compute&gt;&amp; compute)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">Compute</a>&amp; comp : compute)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        os &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">GetComputeDeviceAsCString</a>(comp) &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">/// Deprecated function that will be removed together with</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">/// the Compute enum</span></div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a345acf4e0dc087eee3f9688029ee6328">   69</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> std::ostream&amp; <a class="code" href="namespacearmnn.xhtml#a5b0313cb554380d6e4dfb24c31f9e605">operator&lt;&lt;</a>(std::ostream&amp; os, <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">Compute</a>&amp; compute)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    os &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">GetComputeDeviceAsCString</a>(compute);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml">   75</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> final</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#ab04a4c3f60cf1490af1f2d48fd6a154b">   78</a></span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml#ab04a4c3f60cf1490af1f2d48fd6a154b">BackendId</a>() : m_Id(<a class="code" href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">GetComputeDeviceAsCString</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">Compute</a>::<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Undefined</a>)) {}</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#a0e4b9b5af3cefaba6c09d9fb6c63b648">   79</a></span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml#a0e4b9b5af3cefaba6c09d9fb6c63b648">BackendId</a>(<span class="keyword">const</span> std::string&amp; <span class="keywordtype">id</span>) : m_Id{<span class="keywordtype">id</span>} {}</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#a2022fbb38255961b93a06e8f2e3a9b6c">   80</a></span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml#a2022fbb38255961b93a06e8f2e3a9b6c">BackendId</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* <span class="keywordtype">id</span>) : m_Id{<span class="keywordtype">id</span>} {}</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; other) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>(<a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp;&amp; other) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; other) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; operator=(<a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp;&amp; other) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#ad7ccaaabca16552487e146957242972c">   87</a></span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml#ad7ccaaabca16552487e146957242972c">~BackendId</a>(){}</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">    /// Deprecated function that will be removed together with</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">    /// the Compute enum</span></div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#ab550ffcdbc45f1f4ac2066df19e5cca9">   91</a></span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_backend_id.xhtml#ab550ffcdbc45f1f4ac2066df19e5cca9">BackendId</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">Compute</a> compute) : m_Id{<a class="code" href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">GetComputeDeviceAsCString</a>(compute)} {}</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#a3888dcd59dd5acd1ca5b9bee4c2e252a">   93</a></span>&#160;    <span class="keyword">operator</span> std::string()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Id; }</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#a77c34fc108cd2f994baeddabcf0e40bc">   94</a></span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; <a class="code" href="classarmnn_1_1_backend_id.xhtml#a77c34fc108cd2f994baeddabcf0e40bc">operator=</a>(<span class="keyword">const</span> std::string&amp; other)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        m_Id = other;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">    /// Deprecated function that will be removed together with</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">    /// the Compute enum</span></div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#a0f6852f0b71ebfc88ec69e8620157b41">  102</a></span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; <a class="code" href="classarmnn_1_1_backend_id.xhtml#a0f6852f0b71ebfc88ec69e8620157b41">operator=</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">Compute</a> compute)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> temp{compute};</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a14d7f180bf51e86850305965c3707e07">std::swap</a>(temp.m_Id, m_Id);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#abc37e1f819c9558555930623ebc8cba8">  109</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml#abc37e1f819c9558555930623ebc8cba8">operator==</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; other)<span class="keyword"> const</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">return</span> m_Id == other.m_Id;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">    /// comparison against objects from which the</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">    /// BackendId can be constructed</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"></span>    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> O&gt;</div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#adf39e13ae1d43bb5c8c90e4cc6ea8575">  117</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml#adf39e13ae1d43bb5c8c90e4cc6ea8575">operator==</a>(<span class="keyword">const</span> O&amp; other)<span class="keyword"> const</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> temp{other};</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span> == temp;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> O&gt;</div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#ae76c9278f20505a61c7a432673b5ca64">  124</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml#ae76c9278f20505a61c7a432673b5ca64">operator!=</a>(<span class="keyword">const</span> O&amp; other)<span class="keyword"> const</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#a1389ce73db45b9fc03100f0600a90dff">  129</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml#a1389ce73db45b9fc03100f0600a90dff">operator&lt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; other)<span class="keyword"> const</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">return</span> m_Id &lt; other.m_Id;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#a9e39298bc0940e2e47b8f9bbad229e66">  134</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml#a9e39298bc0940e2e47b8f9bbad229e66">IsCpuRef</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Id == <a class="code" href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">GetComputeDeviceAsCString</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">Compute::CpuRef</a>); }</div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#acb8520e3f46f5451dcc1c541eeb2031b">  135</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml#acb8520e3f46f5451dcc1c541eeb2031b">IsCpuAcc</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Id == <a class="code" href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">GetComputeDeviceAsCString</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">Compute::CpuAcc</a>); }</div><div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#a1295f85bb10e8c31fba3ed30dd2252a5">  136</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml#a1295f85bb10e8c31fba3ed30dd2252a5">IsGpuAcc</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Id == <a class="code" href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">GetComputeDeviceAsCString</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">Compute::GpuAcc</a>); }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#af7445617163d3f07c47b92ae56c6cf8b">  138</a></span>&#160;    <span class="keyword">const</span> std::string&amp; <a class="code" href="classarmnn_1_1_backend_id.xhtml#af7445617163d3f07c47b92ae56c6cf8b">Get</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Id; }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#a8e12342fc420701fbffd97025421575a">  140</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml#a8e12342fc420701fbffd97025421575a">IsEmpty</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Id.empty(); }</div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_id.xhtml#ae36f5197d26d2e429d9c5fc100c2d500">  141</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml#ae36f5197d26d2e429d9c5fc100c2d500">IsUndefined</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Id == <a class="code" href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">GetComputeDeviceAsCString</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Compute::Undefined</a>); }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    std::string m_Id;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;};</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="namespacestd.xhtml">  149</a></span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacestd.xhtml">std</a></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">/// make BackendId compatible with std hashtables by reusing the hash</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">/// function for strings.</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">/// Note this must come *before* the first use of unordered_set&lt;BackendId&gt;.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="structstd_1_1hash_3_01armnn_1_1_backend_id_01_4.xhtml">  156</a></span>&#160;<span class="keyword">struct </span>hash&lt;<a class="code" href="namespacearmnn.xhtml">armnn</a>::BackendId&gt;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;{</div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="structstd_1_1hash_3_01armnn_1_1_backend_id_01_4.xhtml#a53c82d97568cab0a98d2879b812d49e2">  158</a></span>&#160;    std::size_t <a class="code" href="structstd_1_1hash_3_01armnn_1_1_backend_id_01_4.xhtml#a53c82d97568cab0a98d2879b812d49e2">operator()</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a>&amp; <span class="keywordtype">id</span>) <span class="keyword">const</span> noexcept</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        std::hash&lt;std::string&gt; hasher;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">return</span> hasher(<span class="keywordtype">id</span>.Get());</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;};</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;} <span class="comment">// namespace std</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1profiling.xhtml">  170</a></span>&#160;<span class="keyword">namespace </span>profiling</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;{</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">// Static constant describing ArmNN as a dummy backend</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> BACKEND_ID(<span class="stringliteral">&quot;ARMNN&quot;</span>);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;} <span class="comment">// profiling</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#afc46634e26857d037ee80bb5a74ef28a">  176</a></span>&#160;<span class="keyword">inline</span> std::ostream&amp; <a class="code" href="namespacearmnn.xhtml#a5b0313cb554380d6e4dfb24c31f9e605">operator&lt;&lt;</a>(std::ostream&amp; os, <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; <span class="keywordtype">id</span>)</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;{</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    os &lt;&lt; <span class="keywordtype">id</span>.Get();</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>...&gt; <span class="keyword">class </span><a class="code" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer</a>, <span class="keyword">typename</span>... TContainerTemplateArgs&gt;</div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a62a9e8c87b9b9f504726746ba4a000a6">  183</a></span>&#160;std::ostream&amp; <a class="code" href="namespacearmnn.xhtml#a5b0313cb554380d6e4dfb24c31f9e605">operator&lt;&lt;</a>(std::ostream&amp; os,</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                         <span class="keyword">const</span> <a class="code" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer&lt;BackendId, TContainerTemplateArgs...&gt;</a>&amp; ids)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    os &lt;&lt; <span class="charliteral">&#39;[&#39;</span>;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; <span class="keywordtype">id</span> : ids) { os &lt;&lt; <span class="keywordtype">id</span> &lt;&lt; <span class="stringliteral">&quot; &quot;</span>; }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    os &lt;&lt; <span class="charliteral">&#39;]&#39;</span>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;}</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#ac858d91eedb7b4dba1bcd0aa760ab510">  192</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#ac858d91eedb7b4dba1bcd0aa760ab510">BackendIdVector</a> = std::vector&lt;BackendId&gt;;</div><div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">  193</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a>    = std::unordered_set&lt;BackendId&gt;;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a></div><div class="ttdoc">CPU Execution: Reference C++ kernels. </div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_a1295f85bb10e8c31fba3ed30dd2252a5"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#a1295f85bb10e8c31fba3ed30dd2252a5">armnn::BackendId::IsGpuAcc</a></div><div class="ttdeci">bool IsGpuAcc() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00136">BackendId.hpp:136</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14d7f180bf51e86850305965c3707e07"><div class="ttname"><a href="namespacearmnn.xhtml#a14d7f180bf51e86850305965c3707e07">armnn::swap</a></div><div class="ttdeci">void swap(OriginsDescriptor &amp;first, OriginsDescriptor &amp;second)</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00350">Descriptors.cpp:350</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00193">BackendId.hpp:193</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac858d91eedb7b4dba1bcd0aa760ab510"><div class="ttname"><a href="namespacearmnn.xhtml#ac858d91eedb7b4dba1bcd0aa760ab510">armnn::BackendIdVector</a></div><div class="ttdeci">std::vector&lt; BackendId &gt; BackendIdVector</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00192">BackendId.hpp:192</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_a9e39298bc0940e2e47b8f9bbad229e66"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#a9e39298bc0940e2e47b8f9bbad229e66">armnn::BackendId::IsCpuRef</a></div><div class="ttdeci">bool IsCpuRef() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00134">BackendId.hpp:134</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5b0313cb554380d6e4dfb24c31f9e605"><div class="ttname"><a href="namespacearmnn.xhtml#a5b0313cb554380d6e4dfb24c31f9e605">armnn::operator&lt;&lt;</a></div><div class="ttdeci">std::ostream &amp; operator&lt;&lt;(std::ostream &amp;os, const std::vector&lt; Compute &gt; &amp;compute)</div><div class="ttdoc">Deprecated function that will be removed together with the Compute enum. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00047">BackendId.hpp:47</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_ad7ccaaabca16552487e146957242972c"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#ad7ccaaabca16552487e146957242972c">armnn::BackendId::~BackendId</a></div><div class="ttdeci">~BackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00087">BackendId.hpp:87</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="structstd_1_1hash_3_01armnn_1_1_backend_id_01_4_xhtml_a53c82d97568cab0a98d2879b812d49e2"><div class="ttname"><a href="structstd_1_1hash_3_01armnn_1_1_backend_id_01_4.xhtml#a53c82d97568cab0a98d2879b812d49e2">std::hash&lt; armnn::BackendId &gt;::operator()</a></div><div class="ttdeci">std::size_t operator()(const armnn::BackendId &amp;id) const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00158">BackendId.hpp:158</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00149">BackendId.hpp:149</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_ab04a4c3f60cf1490af1f2d48fd6a154b"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#ab04a4c3f60cf1490af1f2d48fd6a154b">armnn::BackendId::BackendId</a></div><div class="ttdeci">BackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00078">BackendId.hpp:78</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456ae"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">armnn::Compute</a></div><div class="ttdeci">Compute</div><div class="ttdoc">The Compute enum is now deprecated and it is now being replaced by BackendId. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00021">BackendId.hpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a6bab17bfd45c2fa4592c431bc25ad10e"><div class="ttname"><a href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">armnn::GetComputeDeviceAsCString</a></div><div class="ttdeci">constexpr char const  * GetComputeDeviceAsCString(Compute compute)</div><div class="ttdoc">Deprecated function that will be removed together with the Compute enum. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00034">BackendId.hpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::Compute::GpuAcc</a></div><div class="ttdoc">GPU Execution: OpenCL: ArmCompute. </div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_acb8520e3f46f5451dcc1c541eeb2031b"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#acb8520e3f46f5451dcc1c541eeb2031b">armnn::BackendId::IsCpuAcc</a></div><div class="ttdeci">bool IsCpuAcc() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00135">BackendId.hpp:135</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_a0e4b9b5af3cefaba6c09d9fb6c63b648"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#a0e4b9b5af3cefaba6c09d9fb6c63b648">armnn::BackendId::BackendId</a></div><div class="ttdeci">BackendId(const std::string &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00079">BackendId.hpp:79</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_ab550ffcdbc45f1f4ac2066df19e5cca9"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#ab550ffcdbc45f1f4ac2066df19e5cca9">armnn::BackendId::BackendId</a></div><div class="ttdeci">BackendId(Compute compute)</div><div class="ttdoc">Deprecated function that will be removed together with the Compute enum. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00091">BackendId.hpp:91</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_a1389ce73db45b9fc03100f0600a90dff"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#a1389ce73db45b9fc03100f0600a90dff">armnn::BackendId::operator&lt;</a></div><div class="ttdeci">bool operator&lt;(const BackendId &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00129">BackendId.hpp:129</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_a77c34fc108cd2f994baeddabcf0e40bc"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#a77c34fc108cd2f994baeddabcf0e40bc">armnn::BackendId::operator=</a></div><div class="ttdeci">BackendId &amp; operator=(const std::string &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00094">BackendId.hpp:94</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_a0f6852f0b71ebfc88ec69e8620157b41"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#a0f6852f0b71ebfc88ec69e8620157b41">armnn::BackendId::operator=</a></div><div class="ttdeci">BackendId &amp; operator=(Compute compute)</div><div class="ttdoc">Deprecated function that will be removed together with the Compute enum. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00102">BackendId.hpp:102</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_a8e12342fc420701fbffd97025421575a"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#a8e12342fc420701fbffd97025421575a">armnn::BackendId::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00140">BackendId.hpp:140</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_a2022fbb38255961b93a06e8f2e3a9b6c"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#a2022fbb38255961b93a06e8f2e3a9b6c">armnn::BackendId::BackendId</a></div><div class="ttdeci">BackendId(const char *id)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00080">BackendId.hpp:80</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_ac7bd4ea667375c07718086368507ed44"><div class="ttname"><a href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a></div><div class="ttdeci">mapbox::util::variant&lt; std::vector&lt; float &gt;, std::vector&lt; int &gt;, std::vector&lt; unsigned char &gt;, std::vector&lt; int8_t &gt; &gt; TContainer</div><div class="ttdef"><b>Definition:</b> <a href="_t_container_8hpp_source.xhtml#l00018">TContainer.hpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a></div><div class="ttdoc">CPU Execution: NEON: ArmCompute. </div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_af7445617163d3f07c47b92ae56c6cf8b"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#af7445617163d3f07c47b92ae56c6cf8b">armnn::BackendId::Get</a></div><div class="ttdeci">const std::string &amp; Get() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00138">BackendId.hpp:138</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_adf39e13ae1d43bb5c8c90e4cc6ea8575"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#adf39e13ae1d43bb5c8c90e4cc6ea8575">armnn::BackendId::operator==</a></div><div class="ttdeci">bool operator==(const O &amp;other) const</div><div class="ttdoc">comparison against objects from which the BackendId can be constructed </div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00117">BackendId.hpp:117</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_ae76c9278f20505a61c7a432673b5ca64"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#ae76c9278f20505a61c7a432673b5ca64">armnn::BackendId::operator!=</a></div><div class="ttdeci">bool operator!=(const O &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00124">BackendId.hpp:124</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_ae36f5197d26d2e429d9c5fc100c2d500"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#ae36f5197d26d2e429d9c5fc100c2d500">armnn::BackendId::IsUndefined</a></div><div class="ttdeci">bool IsUndefined() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00141">BackendId.hpp:141</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml_abc37e1f819c9558555930623ebc8cba8"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml#abc37e1f819c9558555930623ebc8cba8">armnn::BackendId::operator==</a></div><div class="ttdeci">bool operator==(const BackendId &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00109">BackendId.hpp:109</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_2b72cc348e06937955e62ebdd8a13436.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_backend_id_8hpp.xhtml">BackendId.hpp</a></li>
    <li class="footer">Generated on Wed Nov 23 2022 10:57:36 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
