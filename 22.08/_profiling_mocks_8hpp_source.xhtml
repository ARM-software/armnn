<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/profiling/test/ProfilingMocks.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_profiling_mocks_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ProfilingMocks.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_profiling_mocks_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2020 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;client/src/IProfilingConnectionFactory.hpp&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;client/src/ProfilingService.hpp&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;client/src/ProfilingUtils.hpp&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;client/src/SendCounterPacket.hpp&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;client/src/SendThread.hpp&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_backend_id_8hpp.xhtml">armnn/BackendId.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_arm_n_n_profiling_8hpp.xhtml">armnn/profiling/ArmNNProfiling.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;client/include/Holder.hpp&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;client/include/IProfilingServiceStatus.hpp&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;common/include/Assert.hpp&gt;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;common/include/CommonProfilingUtils.hpp&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;common/include/IgnoreUnused.hpp&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;common/include/NumericCast.hpp&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;common/include/Optional.hpp&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;common/include/ProfilingException.hpp&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;common/include/ProfilingGuidGenerator.hpp&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;atomic&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;condition_variable&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;mutex&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;thread&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm.xhtml">arm</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>pipe</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml">   39</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml">MockProfilingConnection</a> : <span class="keyword">public</span> IProfilingConnection</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a372bdcb3088c30e1a5bb38cf4b30d586">   42</a></span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a372bdcb3088c30e1a5bb38cf4b30d586">MockProfilingConnection</a>()</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        : m_IsOpen(true)</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        , m_WrittenData()</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        , m_Packet()</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {}</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0">   48</a></span>&#160;    <span class="keyword">enum class</span> <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0">PacketType</a></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0ae43273a3645f4894a1088081feb9827d">StreamMetaData</a>,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0ab9eaea43754be09188f3b4d2e20f6c95">ConnectionAcknowledge</a>,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0ad2cacb6bc37a3363ae810b656e3b6190">CounterDirectory</a>,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a79bb5b82761f89b8d72b4c79a9511c54">ReqCounterDirectory</a>,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0aebabc0e295bef3bf6d0d659a4843ebe4">PeriodicCounterSelection</a>,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0ac0b9859e4ac3c476e5cf6bb0c7a70dc5">PerJobCounterSelection</a>,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a532e27bb0051b56c487ef37d522dcc2b">TimelineMessageDirectory</a>,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a4952ebb7930976133a3520fb113f77b7">PeriodicCounterCapture</a>,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a2f84b9fefbbd5a3bc6d655e9ddb70547">ActivateTimelineReporting</a>,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0ae1161354f5dc60bd440e23cc4ecbfa5a">DeactivateTimelineReporting</a>,</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    };</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a91bdc9d5497d47f5d707418beb83b140">   63</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a91bdc9d5497d47f5d707418beb83b140">IsOpen</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">return</span> m_IsOpen;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0f9aecd570c4e5e6d41337f0e2f1adf5">   70</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0f9aecd570c4e5e6d41337f0e2f1adf5">Close</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        m_IsOpen = <span class="keyword">false</span>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a42eb542b5a1d73d00c4ce474140bb78c">   77</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a42eb542b5a1d73d00c4ce474140bb78c">WritePacket</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* buffer, uint32_t length)<span class="keyword"> override</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">if</span> (buffer == <span class="keyword">nullptr</span> || length == 0)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        uint32_t header = ReadUint32(buffer, 0);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        uint32_t packetFamily = (header &gt;&gt; 26);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        uint32_t packetId = ((header &gt;&gt; 16) &amp; 1023);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0">PacketType</a> packetType;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">switch</span> (packetFamily)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">case</span> 0:</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                packetType = packetId &lt; 8 ? <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0">PacketType</a>(packetId) : <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a88183b946cc5f0e8c96b2e66e1c74a7e">PacketType::Unknown</a>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                packetType = packetId == 0 ? <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a532e27bb0051b56c487ef37d522dcc2b">PacketType::TimelineMessageDirectory</a> : <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a88183b946cc5f0e8c96b2e66e1c74a7e">PacketType::Unknown</a>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordflow">case</span> 3:</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                packetType = packetId == 0 ? <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a4952ebb7930976133a3520fb113f77b7">PacketType::PeriodicCounterCapture</a> : <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a88183b946cc5f0e8c96b2e66e1c74a7e">PacketType::Unknown</a>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                packetType = <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a88183b946cc5f0e8c96b2e66e1c74a7e">PacketType::Unknown</a>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        m_WrittenData.push_back({ packetType, length });</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a1de32cbfa025fc6e4eb2ff7a4fd16d6b">  112</a></span>&#160;    <span class="keywordtype">long</span> <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a1de32cbfa025fc6e4eb2ff7a4fd16d6b">CheckForPacket</a>(<span class="keyword">const</span> std::pair&lt;PacketType, uint32_t&gt; packetInfo)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">if</span>(packetInfo.second != 0)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">long</span><span class="keyword">&gt;</span>(std::count(m_WrittenData.begin(), m_WrittenData.end(), packetInfo));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">long</span><span class="keyword">&gt;</span>(std::count_if(m_WrittenData.begin(), m_WrittenData.end(),</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            [&amp;packetInfo](<span class="keyword">const</span> std::pair&lt;PacketType, uint32_t&gt; pair) { <span class="keywordflow">return</span> packetInfo.first == pair.first; }));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#aae7fa615d4a944a10122344cf8bbd1be">  127</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#aae7fa615d4a944a10122344cf8bbd1be">WritePacket</a>(arm::pipe::Packet&amp;&amp; packet)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        m_Packet = std::move(packet);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a47c113357d105d4f7a549a058e5661ab">  135</a></span>&#160;    arm::pipe::Packet <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a47c113357d105d4f7a549a058e5661ab">ReadPacket</a>(uint32_t timeout)<span class="keyword"> override</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">arm::pipe::IgnoreUnused</a>(timeout);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="comment">// Simulate a delay in the reading process. The default timeout is way too long.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        std::this_thread::sleep_for(std::chrono::milliseconds(5));</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">return</span> std::move(m_Packet);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#adc32d741a992ea6f9af3f9e65aebf34d">  145</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#adc32d741a992ea6f9af3f9e65aebf34d">GetWrittenDataSize</a>()</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">long</span><span class="keyword">&gt;</span>(m_WrittenData.size());</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#aa71d36872f416feaa853788a7a7a7ef8">  152</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#aa71d36872f416feaa853788a7a7a7ef8">Clear</a>()</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        m_WrittenData.clear();</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordtype">bool</span> m_IsOpen;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    std::vector&lt;std::pair&lt;PacketType, uint32_t&gt;&gt; m_WrittenData;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    arm::pipe::Packet m_Packet;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">mutable</span> std::mutex m_Mutex;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;};</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_connection_factory.xhtml">  166</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection_factory.xhtml">MockProfilingConnectionFactory</a> : <span class="keyword">public</span> IProfilingConnectionFactory</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;{</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00169"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_connection_factory.xhtml#a809925c8c6149db5c0e25030466a0112">  169</a></span>&#160;    IProfilingConnectionPtr <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_connection_factory.xhtml#a809925c8c6149db5c0e25030466a0112">GetProfilingConnection</a>(<span class="keyword">const</span> ProfilingOptions&amp; options)<span class="keyword"> const override</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">arm::pipe::IgnoreUnused</a>(options);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;MockProfilingConnection&gt;();</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;};</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml">  176</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml">MockPacketBuffer</a> : <span class="keyword">public</span> IPacketBuffer</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;{</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#ae589e488b5420a2e680c1652072861e8">  179</a></span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#ae589e488b5420a2e680c1652072861e8">MockPacketBuffer</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxSize)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        : m_MaxSize(maxSize)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        , m_Size(0)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        , m_Data(<a class="code" href="namespacestd.xhtml">std</a>::make_unique&lt;unsigned char[]&gt;(m_MaxSize))</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    {}</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#a6b34b9ef41ff50cf988dde8381fa4f7e">  185</a></span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#a6b34b9ef41ff50cf988dde8381fa4f7e">~MockPacketBuffer</a>() {}</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#a9a7614d7b084e33f72045ed161eb95bc">  187</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* <a class="code" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#a9a7614d7b084e33f72045ed161eb95bc">GetReadableData</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_Data.get(); }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#ab03338cef0f6b48d46effb2c2a64407d">  189</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#ab03338cef0f6b48d46effb2c2a64407d">GetSize</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_Size; }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#aa630bd4c9ada8ab204fbb42651b10613">  191</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#aa630bd4c9ada8ab204fbb42651b10613">MarkRead</a>()<span class="keyword"> override </span>{ m_Size = 0; }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#a1d7238f289009294f40b0b2bcb8d594f">  193</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#a1d7238f289009294f40b0b2bcb8d594f">Commit</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size)<span class="keyword"> override </span>{ m_Size = size; }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#a1a5dddc8911f6189f9ca01394c59faaf">  195</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#a1a5dddc8911f6189f9ca01394c59faaf">Release</a>()<span class="keyword"> override </span>{ m_Size = 0; }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#afedc435235efffdfab1fb0670f52d7c1">  197</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* <a class="code" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#afedc435235efffdfab1fb0670f52d7c1">GetWritableData</a>()<span class="keyword"> override </span>{ <span class="keywordflow">return</span> m_Data.get(); }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#a9138802bd505003fa7224b0dc0413fb4">  199</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#a9138802bd505003fa7224b0dc0413fb4">Destroy</a>()<span class="keyword"> override </span>{m_Data.reset(<span class="keyword">nullptr</span>); m_Size = 0; m_MaxSize =0;}</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_MaxSize;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_Size;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    std::unique_ptr&lt;unsigned char[]&gt; m_Data;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;};</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">  207</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a> : <span class="keyword">public</span> IBufferManager</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;{</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ac29af30972ae62351f87a669e2c8940f">  210</a></span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ac29af30972ae62351f87a669e2c8940f">MockBufferManager</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    : m_BufferSize(size),</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;      m_Buffer(<a class="code" href="namespacestd.xhtml">std</a>::make_unique&lt;<a class="code" href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml">MockPacketBuffer</a>&gt;(size)) {}</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ae8b885e4225f3b0976f22ae8bc94f52a">  214</a></span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ae8b885e4225f3b0976f22ae8bc94f52a">~MockBufferManager</a>() {}</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ac3f43b4dd3fafd6b13342acc2263bbb4">  216</a></span>&#160;    IPacketBufferPtr <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ac3f43b4dd3fafd6b13342acc2263bbb4">Reserve</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> requestedSize, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; reservedSize)<span class="keyword"> override</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">if</span> (requestedSize &gt; m_BufferSize)</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            reservedSize = m_BufferSize;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        {</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            reservedSize = requestedSize;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">return</span> std::move(m_Buffer);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#a183eaa37ccd326bd82179bed901c7122">  230</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#a183eaa37ccd326bd82179bed901c7122">Commit</a>(IPacketBufferPtr&amp; packetBuffer, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size, <span class="keywordtype">bool</span> notifyConsumer = <span class="keyword">true</span>)<span class="keyword"> override</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        packetBuffer-&gt;Commit(size);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        m_Buffer = std::move(packetBuffer);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">if</span> (notifyConsumer)</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            FlushReadList();</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        }</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">  241</a></span>&#160;    IPacketBufferPtr <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordflow">return</span> std::move(m_Buffer);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#a226108649851aa1b1a8168560c5228b5">  246</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#a226108649851aa1b1a8168560c5228b5">Release</a>(IPacketBufferPtr&amp; packetBuffer)<span class="keyword"> override</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        packetBuffer-&gt;Release();</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        m_Buffer = std::move(packetBuffer);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">  252</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">MarkRead</a>(IPacketBufferPtr&amp; packetBuffer)<span class="keyword"> override</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        packetBuffer-&gt;MarkRead();</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        m_Buffer = std::move(packetBuffer);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ad675ff4e9053375bd41d0aad6b3bbb63">  258</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ad675ff4e9053375bd41d0aad6b3bbb63">SetConsumer</a>(IConsumer* consumer)<span class="keyword"> override</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="keyword">   </span>{</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordflow">if</span> (consumer != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            m_Consumer = consumer;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        }</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;   }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#af22fdc7450c285c4d7449425c8fe994f">  266</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#af22fdc7450c285c4d7449425c8fe994f">FlushReadList</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="comment">// notify consumer that packet is ready to read</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordflow">if</span> (m_Consumer != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        {</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            m_Consumer-&gt;SetReadyToRead();</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_BufferSize;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    IPacketBufferPtr m_Buffer;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    IConsumer* m_Consumer = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;};</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml">  281</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml">MockStreamCounterBuffer</a> : <span class="keyword">public</span> IBufferManager</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;{</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00284"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#add78c1a7dbde9d871b4193345e250d96">  284</a></span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#add78c1a7dbde9d871b4193345e250d96">MockStreamCounterBuffer</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxBufferSize = 4096)</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        : m_MaxBufferSize(maxBufferSize)</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        , m_BufferList()</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        , m_CommittedSize(0)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        , m_ReadableSize(0)</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        , m_ReadSize(0)</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    {}</div><div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a7e55485c728365ea5d8bd9968cf45356">  291</a></span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a7e55485c728365ea5d8bd9968cf45356">~MockStreamCounterBuffer</a>() {}</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ac3f43b4dd3fafd6b13342acc2263bbb4">  293</a></span>&#160;    IPacketBufferPtr <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ac3f43b4dd3fafd6b13342acc2263bbb4">Reserve</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> requestedSize, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; reservedSize)<span class="keyword"> override</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        reservedSize = 0;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">if</span> (requestedSize &gt; m_MaxBufferSize)</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="keywordflow">throw</span> arm::pipe::InvalidArgumentException(<span class="stringliteral">&quot;The maximum buffer size that can be requested is [&quot;</span> +</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                                      std::to_string(m_MaxBufferSize) + <span class="stringliteral">&quot;] bytes&quot;</span>);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        }</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        reservedSize = requestedSize;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;MockPacketBuffer&gt;(requestedSize);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a183eaa37ccd326bd82179bed901c7122">  307</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a183eaa37ccd326bd82179bed901c7122">Commit</a>(IPacketBufferPtr&amp; packetBuffer, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size, <span class="keywordtype">bool</span> notifyConsumer = <span class="keyword">true</span>)<span class="keyword"> override</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        packetBuffer-&gt;Commit(size);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        m_BufferList.push_back(std::move(packetBuffer));</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        m_CommittedSize += size;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keywordflow">if</span> (notifyConsumer)</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            FlushReadList();</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        }</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a226108649851aa1b1a8168560c5228b5">  321</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a226108649851aa1b1a8168560c5228b5">Release</a>(IPacketBufferPtr&amp; packetBuffer)<span class="keyword"> override</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        packetBuffer-&gt;Release();</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#abce8709dc1b666a26f427ba7ff08b737">  328</a></span>&#160;    IPacketBufferPtr <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="keywordflow">if</span> (m_BufferList.empty())</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        {</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        }</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        IPacketBufferPtr buffer = std::move(m_BufferList.back());</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        m_BufferList.pop_back();</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        m_ReadableSize += buffer-&gt;GetSize();</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordflow">return</span> buffer;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ae717263b3243e9f88f4caea6d31b0652">  342</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ae717263b3243e9f88f4caea6d31b0652">MarkRead</a>(IPacketBufferPtr&amp; packetBuffer)<span class="keyword"> override</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        std::lock_guard&lt;std::mutex&gt; lock(m_Mutex);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        m_ReadSize += packetBuffer-&gt;GetSize();</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        packetBuffer-&gt;MarkRead();</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    }</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ad675ff4e9053375bd41d0aad6b3bbb63">  350</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ad675ff4e9053375bd41d0aad6b3bbb63">SetConsumer</a>(IConsumer* consumer)<span class="keyword"> override</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keywordflow">if</span> (consumer != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        {</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            m_Consumer = consumer;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        }</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    }</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#af22fdc7450c285c4d7449425c8fe994f">  358</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#af22fdc7450c285c4d7449425c8fe994f">FlushReadList</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <span class="comment">// notify consumer that packet is ready to read</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordflow">if</span> (m_Consumer != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        {</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            m_Consumer-&gt;SetReadyToRead();</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        }</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    }</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a0a0b47bcd9b2b00de2c82761705cfd58">  367</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a0a0b47bcd9b2b00de2c82761705cfd58">GetCommittedSize</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_CommittedSize; }</div><div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ab158e7cd554e5f65e77bad0c4d448474">  368</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ab158e7cd554e5f65e77bad0c4d448474">GetReadableSize</a>()<span class="keyword">  const </span>{ <span class="keywordflow">return</span> m_ReadableSize;  }</div><div class="line"><a name="l00369"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a7233f6a0ab843a226dc07c72edd76168">  369</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a7233f6a0ab843a226dc07c72edd76168">GetReadSize</a>()<span class="keyword">      const </span>{ <span class="keywordflow">return</span> m_ReadSize;      }</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="comment">// The maximum buffer size when creating a new buffer</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_MaxBufferSize;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="comment">// A list of buffers</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    std::vector&lt;IPacketBufferPtr&gt; m_BufferList;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="comment">// The mutex to synchronize this mock&#39;s methods</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    std::mutex m_Mutex;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="comment">// The total size of the buffers that has been committed for reading</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_CommittedSize;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="comment">// The total size of the buffers that can be read</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_ReadableSize;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="comment">// The total size of the buffers that has already been read</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_ReadSize;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="comment">// Consumer thread to notify packet is ready to read</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    IConsumer* m_Consumer = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;};</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml">  394</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml">MockSendCounterPacket</a> : <span class="keyword">public</span> ISendCounterPacket</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;{</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00397"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#aff0340dbcc0881b2c7477565034cb956">  397</a></span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#aff0340dbcc0881b2c7477565034cb956">MockSendCounterPacket</a>(IBufferManager&amp; sendBuffer) : m_BufferManager(sendBuffer) {}</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#a2a2e451c4e4963909b8a6dc7e7653cd1">  399</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#a2a2e451c4e4963909b8a6dc7e7653cd1">SendStreamMetaDataPacket</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        std::string message(<span class="stringliteral">&quot;SendStreamMetaDataPacket&quot;</span>);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reserved = 0;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        IPacketBufferPtr buffer = m_BufferManager.Reserve(1024, reserved);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        memcpy(buffer-&gt;GetWritableData(), message.c_str(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(message.size()) + 1);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        m_BufferManager.Commit(buffer, reserved, <span class="keyword">false</span>);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    }</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div><div class="line"><a name="l00408"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#a3b526a823530443efec886c4305e52de">  408</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#a3b526a823530443efec886c4305e52de">SendCounterDirectoryPacket</a>(<span class="keyword">const</span> ICounterDirectory&amp; counterDirectory)<span class="keyword"> override</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">arm::pipe::IgnoreUnused</a>(counterDirectory);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        std::string message(<span class="stringliteral">&quot;SendCounterDirectoryPacket&quot;</span>);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reserved = 0;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        IPacketBufferPtr buffer = m_BufferManager.Reserve(1024, reserved);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        memcpy(buffer-&gt;GetWritableData(), message.c_str(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(message.size()) + 1);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        m_BufferManager.Commit(buffer, reserved);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    }</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#ac9261c6ee7d313090d15cfa22173d80c">  419</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#ac9261c6ee7d313090d15cfa22173d80c">SendPeriodicCounterCapturePacket</a>(uint64_t timestamp,</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                          <span class="keyword">const</span> std::vector&lt;CounterValue&gt;&amp; values)<span class="keyword"> override</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">arm::pipe::IgnoreUnused</a>(timestamp, values);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        std::string message(<span class="stringliteral">&quot;SendPeriodicCounterCapturePacket&quot;</span>);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reserved = 0;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        IPacketBufferPtr buffer = m_BufferManager.Reserve(1024, reserved);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        memcpy(buffer-&gt;GetWritableData(), message.c_str(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(message.size()) + 1);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        m_BufferManager.Commit(buffer, reserved);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    }</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00431"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#a47406a4d108beb4f20031d370a155a9d">  431</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#a47406a4d108beb4f20031d370a155a9d">SendPeriodicCounterSelectionPacket</a>(uint32_t capturePeriod,</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                            <span class="keyword">const</span> std::vector&lt;uint16_t&gt;&amp; selectedCounterIds)<span class="keyword"> override</span></div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">arm::pipe::IgnoreUnused</a>(capturePeriod, selectedCounterIds);</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        std::string message(<span class="stringliteral">&quot;SendPeriodicCounterSelectionPacket&quot;</span>);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> reserved = 0;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        IPacketBufferPtr buffer = m_BufferManager.Reserve(1024, reserved);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        memcpy(buffer-&gt;GetWritableData(), message.c_str(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(message.size()) + 1);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        m_BufferManager.Commit(buffer, reserved);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    }</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    IBufferManager&amp; m_BufferManager;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;};</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml">  447</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml">MockCounterDirectory</a> : <span class="keyword">public</span> ICounterDirectory</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;{</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml">MockCounterDirectory</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    ~<a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml">MockCounterDirectory</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="comment">// Register profiling objects</span></div><div class="line"><a name="l00454"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ac44342ac08725d8f5dd52e2ee93ca20d">  454</a></span>&#160;    <span class="keyword">const</span> Category* <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ac44342ac08725d8f5dd52e2ee93ca20d">RegisterCategory</a>(<span class="keyword">const</span> std::string&amp; categoryName)</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    {</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="comment">// Create the category</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        CategoryPtr category = std::make_unique&lt;Category&gt;(categoryName);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        ARM_PIPE_ASSERT(category);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        <span class="comment">// Get the raw category pointer</span></div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <span class="keyword">const</span> Category* categoryPtr = category.get();</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        ARM_PIPE_ASSERT(categoryPtr);</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <span class="comment">// Register the category</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        m_Categories.insert(std::move(category));</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        <span class="keywordflow">return</span> categoryPtr;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    }</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a1819a5a244fd4317b6dcd49cdbf67a2d">  470</a></span>&#160;    <span class="keyword">const</span> Device* <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a1819a5a244fd4317b6dcd49cdbf67a2d">RegisterDevice</a>(<span class="keyword">const</span> std::string&amp; deviceName,</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                                 uint16_t cores = 0)</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    {</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <span class="comment">// Get the device UID</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        uint16_t deviceUid = GetNextUid();</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        <span class="comment">// Create the device</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        DevicePtr device = std::make_unique&lt;Device&gt;(deviceUid, deviceName, cores);</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        ARM_PIPE_ASSERT(device);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        <span class="comment">// Get the raw device pointer</span></div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        <span class="keyword">const</span> Device* devicePtr = device.get();</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        ARM_PIPE_ASSERT(devicePtr);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="comment">// Register the device</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        m_Devices.insert(std::make_pair(deviceUid, std::move(device)));</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <span class="keywordflow">return</span> devicePtr;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    }</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div><div class="line"><a name="l00490"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ae0d8bd45562c0887985b1be728640bbc">  490</a></span>&#160;    <span class="keyword">const</span> CounterSet* <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ae0d8bd45562c0887985b1be728640bbc">RegisterCounterSet</a>(</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            <span class="keyword">const</span> std::string&amp; counterSetName,</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            uint16_t count = 0)</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    {</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        <span class="comment">// Get the counter set UID</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        uint16_t counterSetUid = GetNextUid();</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        <span class="comment">// Create the counter set</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        CounterSetPtr counterSet = std::make_unique&lt;CounterSet&gt;(counterSetUid, counterSetName, count);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        ARM_PIPE_ASSERT(counterSet);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="comment">// Get the raw counter set pointer</span></div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="keyword">const</span> CounterSet* counterSetPtr = counterSet.get();</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        ARM_PIPE_ASSERT(counterSetPtr);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        <span class="comment">// Register the counter set</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        m_CounterSets.insert(std::make_pair(counterSetUid, std::move(counterSet)));</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <span class="keywordflow">return</span> counterSetPtr;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    }</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#afc8de778ee03bedee2df4f9387060465">  511</a></span>&#160;    <span class="keyword">const</span> Counter* <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#afc8de778ee03bedee2df4f9387060465">RegisterCounter</a>(<span class="keyword">const</span> std::string&amp; backendId,</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                                   <span class="keyword">const</span> uint16_t uid,</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                                   <span class="keyword">const</span> std::string&amp; parentCategoryName,</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                                   uint16_t counterClass,</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                                   uint16_t interpolation,</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                                   <span class="keywordtype">double</span> multiplier,</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                                   <span class="keyword">const</span> std::string&amp; name,</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                                   <span class="keyword">const</span> std::string&amp; description,</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                                   <span class="keyword">const</span> arm::pipe::Optional&lt;std::string&gt;&amp; units = arm::pipe::EmptyOptional(),</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                                   <span class="keyword">const</span> arm::pipe::Optional&lt;uint16_t&gt;&amp; numberOfCores = arm::pipe::EmptyOptional(),</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                                   <span class="keyword">const</span> arm::pipe::Optional&lt;uint16_t&gt;&amp; deviceUid = arm::pipe::EmptyOptional(),</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                                   <span class="keyword">const</span> arm::pipe::Optional&lt;uint16_t&gt;&amp; counterSetUid = arm::pipe::EmptyOptional())</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    {</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">arm::pipe::IgnoreUnused</a>(backendId);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        <span class="comment">// Get the number of cores from the argument only</span></div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        uint16_t deviceCores = numberOfCores.has_value() ? numberOfCores.value() : 0;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        <span class="comment">// Get the device UID</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        uint16_t deviceUidValue = deviceUid.has_value() ? deviceUid.value() : 0;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        <span class="comment">// Get the counter set UID</span></div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        uint16_t counterSetUidValue = counterSetUid.has_value() ? counterSetUid.value() : 0;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        <span class="comment">// Get the counter UIDs and calculate the max counter UID</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        std::vector&lt;uint16_t&gt; counterUids = GetNextCounterUids(uid, deviceCores);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        ARM_PIPE_ASSERT(!counterUids.empty());</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        uint16_t maxCounterUid = deviceCores &lt;= 1 ? counterUids.front() : counterUids.back();</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        <span class="comment">// Get the counter units</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <span class="keyword">const</span> std::string unitsValue = units.has_value() ? units.value() : <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="comment">// Create the counter</span></div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        CounterPtr counter = std::make_shared&lt;Counter&gt;(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                                                       counterUids.front(),</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                                                       maxCounterUid,</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                                                       counterClass,</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                                                       interpolation,</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                                                       multiplier,</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                                                       name,</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                                                       description,</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                                                       unitsValue,</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                                                       deviceUidValue,</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                                                       counterSetUidValue);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        ARM_PIPE_ASSERT(counter);</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        <span class="comment">// Get the raw counter pointer</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        <span class="keyword">const</span> Counter* counterPtr = counter.get();</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        ARM_PIPE_ASSERT(counterPtr);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        <span class="comment">// Process multiple counters if necessary</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        <span class="keywordflow">for</span> (uint16_t counterUid : counterUids)</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        {</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            <span class="comment">// Connect the counter to the parent category</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            Category* parentCategory = <span class="keyword">const_cast&lt;</span>Category*<span class="keyword">&gt;</span>(GetCategory(parentCategoryName));</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;            ARM_PIPE_ASSERT(parentCategory);</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            parentCategory-&gt;m_Counters.push_back(counterUid);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            <span class="comment">// Register the counter</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            m_Counters.insert(std::make_pair(counterUid, counter));</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        }</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        <span class="keywordflow">return</span> counterPtr;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    }</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <span class="comment">// Getters for counts</span></div><div class="line"><a name="l00577"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a4626db62503c13042a745a40399f8317">  577</a></span>&#160;    uint16_t <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a4626db62503c13042a745a40399f8317">GetCategoryCount</a>()<span class="keyword">   const override </span>{ <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">arm::pipe::numeric_cast</a>&lt;uint16_t&gt;(m_Categories.size());  }</div><div class="line"><a name="l00578"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ad742b37bc2beb568e083225f3fd8160b">  578</a></span>&#160;    uint16_t <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ad742b37bc2beb568e083225f3fd8160b">GetDeviceCount</a>()<span class="keyword">     const override </span>{ <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">arm::pipe::numeric_cast</a>&lt;uint16_t&gt;(m_Devices.size());     }</div><div class="line"><a name="l00579"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ae3b7dbaa7317dacbcec25f30f6a16075">  579</a></span>&#160;    uint16_t <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ae3b7dbaa7317dacbcec25f30f6a16075">GetCounterSetCount</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">arm::pipe::numeric_cast</a>&lt;uint16_t&gt;(m_CounterSets.size()); }</div><div class="line"><a name="l00580"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ad9062caad1836f8e6b810e4e97bb19d1">  580</a></span>&#160;    uint16_t <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ad9062caad1836f8e6b810e4e97bb19d1">GetCounterCount</a>()<span class="keyword">    const override </span>{ <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">arm::pipe::numeric_cast</a>&lt;uint16_t&gt;(m_Counters.size());    }</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="comment">// Getters for collections</span></div><div class="line"><a name="l00583"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#af55b37f13ace15889ce8a0b18dda3ed9">  583</a></span>&#160;    <span class="keyword">const</span> Categories&amp;  <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#af55b37f13ace15889ce8a0b18dda3ed9">GetCategories</a>()<span class="keyword">  const override </span>{ <span class="keywordflow">return</span> m_Categories;  }</div><div class="line"><a name="l00584"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ac9bdbed464222fa06875096a4f373ca8">  584</a></span>&#160;    <span class="keyword">const</span> Devices&amp;     <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ac9bdbed464222fa06875096a4f373ca8">GetDevices</a>()<span class="keyword">     const override </span>{ <span class="keywordflow">return</span> m_Devices;     }</div><div class="line"><a name="l00585"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#afcb72c4151fd72abfffcb7dae0ed2817">  585</a></span>&#160;    <span class="keyword">const</span> CounterSets&amp; <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#afcb72c4151fd72abfffcb7dae0ed2817">GetCounterSets</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_CounterSets; }</div><div class="line"><a name="l00586"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a6d7f92b987338cab6cbfbad8d53a9738">  586</a></span>&#160;    <span class="keyword">const</span> Counters&amp;    <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a6d7f92b987338cab6cbfbad8d53a9738">GetCounters</a>()<span class="keyword">    const override </span>{ <span class="keywordflow">return</span> m_Counters;    }</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <span class="comment">// Getters for profiling objects</span></div><div class="line"><a name="l00589"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a739170f2a39056dd19a09216092fd089">  589</a></span>&#160;    <span class="keyword">const</span> Category* <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a739170f2a39056dd19a09216092fd089">GetCategory</a>(<span class="keyword">const</span> std::string&amp; name)<span class="keyword"> const override</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;        <span class="keyword">auto</span> it = std::find_if(m_Categories.begin(), m_Categories.end(), [&amp;name](<span class="keyword">const</span> CategoryPtr&amp; category)</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        {</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;            ARM_PIPE_ASSERT(category);</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            <span class="keywordflow">return</span> category-&gt;m_Name == name;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        });</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        <span class="keywordflow">if</span> (it == m_Categories.end())</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        {</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        }</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <span class="keywordflow">return</span> it-&gt;get();</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    }</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a5fa9a7091e79fb9c5c0af5f663c71df1">  606</a></span>&#160;    <span class="keyword">const</span> Device* <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a5fa9a7091e79fb9c5c0af5f663c71df1">GetDevice</a>(uint16_t uid)<span class="keyword"> const override</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">arm::pipe::IgnoreUnused</a>(uid);</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>; <span class="comment">// Not used by the unit tests</span></div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    }</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div><div class="line"><a name="l00612"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#af96ac62d23f06a90b7e36fca3f13367b">  612</a></span>&#160;    <span class="keyword">const</span> CounterSet* <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#af96ac62d23f06a90b7e36fca3f13367b">GetCounterSet</a>(uint16_t uid)<span class="keyword"> const override</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">arm::pipe::IgnoreUnused</a>(uid);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>; <span class="comment">// Not used by the unit tests</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    }</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div><div class="line"><a name="l00618"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ab2aecc9a0ed092f50b752d30a40bb31a">  618</a></span>&#160;    <span class="keyword">const</span> Counter* <a class="code" href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ab2aecc9a0ed092f50b752d30a40bb31a">GetCounter</a>(uint16_t uid)<span class="keyword"> const override</span></div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">arm::pipe::IgnoreUnused</a>(uid);</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>; <span class="comment">// Not used by the unit tests</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    }</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    Categories  m_Categories;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    Devices     m_Devices;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    CounterSets m_CounterSets;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    Counters    m_Counters;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;};</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div><div class="line"><a name="l00631"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml">  631</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml">MockProfilingService</a> : <span class="keyword">public</span> ProfilingService</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;{</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00634"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a1ad55e1b889b39fa0a89398e42a694bb">  634</a></span>&#160;    <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a1ad55e1b889b39fa0a89398e42a694bb">MockProfilingService</a>(uint16_t maxGlobalCounterId,</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                         <a class="code" href="namespacearmnn.xhtml#ac77c71a352f1e7f9fa4d9e4ceafa81d9">IInitialiseProfilingService</a>&amp; initialiser,</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                         <a class="code" href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">MockBufferManager</a>&amp; mockBufferManager,</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                         <span class="keywordtype">bool</span> isProfilingEnabled,</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                         <span class="keyword">const</span> CaptureData&amp; captureData) :</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        ProfilingService(maxGlobalCounterId,</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                         initialiser,</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                         <a class="code" href="namespacearm.xhtml">arm</a>::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                         <a class="code" href="namespacearm.xhtml">arm</a>::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                         <a class="code" href="namespacearm.xhtml">arm</a>::pipe::ARMNN_HARDWARE_VERSION),</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        m_SendCounterPacket(mockBufferManager,</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                            <a class="code" href="namespacearm.xhtml">arm</a>::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                            <a class="code" href="namespacearm.xhtml">arm</a>::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                            <a class="code" href="namespacearm.xhtml">arm</a>::pipe::ARMNN_HARDWARE_VERSION),</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        m_IsProfilingEnabled(isProfilingEnabled),</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        m_CaptureData(captureData)</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    {}</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="comment">    /// Return the next random Guid in the sequence</span></div><div class="line"><a name="l00653"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#aeea32305626f921e1e9f99434dbf9049">  653</a></span>&#160;<span class="comment"></span>    ProfilingDynamicGuid <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#aeea32305626f921e1e9f99434dbf9049">NextGuid</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        <span class="keywordflow">return</span> m_GuidGenerator.NextGuid();</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    }</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;<span class="comment">    /// Create a ProfilingStaticGuid based on a hash of the string</span></div><div class="line"><a name="l00659"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#afd19633513acfc3ae294aa90b1e13a04">  659</a></span>&#160;<span class="comment"></span>    ProfilingStaticGuid <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#afd19633513acfc3ae294aa90b1e13a04">GenerateStaticId</a>(<span class="keyword">const</span> std::string&amp; str)<span class="keyword"> override</span></div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        <span class="keywordflow">return</span> m_GuidGenerator.GenerateStaticId(str);</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    }</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div><div class="line"><a name="l00664"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a81f774c9319ff5d5b5bf4875e816d989">  664</a></span>&#160;    std::unique_ptr&lt;ISendTimelinePacket&gt; <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a81f774c9319ff5d5b5bf4875e816d989">GetSendTimelinePacket</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    }</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div><div class="line"><a name="l00669"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a37bec1c830464c365aa4434edd0de35a">  669</a></span>&#160;    <span class="keyword">const</span> ICounterMappings&amp; <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a37bec1c830464c365aa4434edd0de35a">GetCounterMappings</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        <span class="keywordflow">return</span> m_CounterMapping;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    }</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div><div class="line"><a name="l00674"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a28c5bcb3adea9e2476255acf1fc0647e">  674</a></span>&#160;    ISendCounterPacket&amp; <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a28c5bcb3adea9e2476255acf1fc0647e">GetSendCounterPacket</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        <span class="keywordflow">return</span> m_SendCounterPacket;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    }</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div><div class="line"><a name="l00679"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a70db5b1cdd0d22c1fa912c6e8b9089ce">  679</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a70db5b1cdd0d22c1fa912c6e8b9089ce">IsProfilingEnabled</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        <span class="keywordflow">return</span> m_IsProfilingEnabled;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    }</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div><div class="line"><a name="l00684"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#aff23669159bfc39106dc16d50c0a6e5f">  684</a></span>&#160;    CaptureData <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#aff23669159bfc39106dc16d50c0a6e5f">GetCaptureData</a>()<span class="keyword"> override</span></div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        CaptureData copy(m_CaptureData);</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        <span class="keywordflow">return</span> copy;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    }</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div><div class="line"><a name="l00690"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a5b024b98d38b08227727867341a420a9">  690</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a5b024b98d38b08227727867341a420a9">RegisterMapping</a>(uint16_t globalCounterId,</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                         uint16_t backendCounterId,</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                         <span class="keyword">const</span> std::string&amp; backendId)</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    {</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        m_CounterMapping.RegisterMapping(globalCounterId, backendCounterId, backendId);</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    }</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div><div class="line"><a name="l00697"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a372de693ad40b3f42839c8ec6ac845f4">  697</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a372de693ad40b3f42839c8ec6ac845f4">Reset</a>()</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    {</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        m_CounterMapping.Reset();</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    }</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    ProfilingGuidGenerator m_GuidGenerator;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    CounterIdMap           m_CounterMapping;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    SendCounterPacket      m_SendCounterPacket;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="keywordtype">bool</span>                   m_IsProfilingEnabled;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    CaptureData            m_CaptureData;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;};</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;</div><div class="line"><a name="l00710"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_service_status.xhtml">  710</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm_1_1pipe_1_1_mock_profiling_service_status.xhtml">MockProfilingServiceStatus</a> : <span class="keyword">public</span> IProfilingServiceStatus</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;{</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00713"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_service_status.xhtml#aa969a672380904e127264c3a8b27504b">  713</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_service_status.xhtml#aa969a672380904e127264c3a8b27504b">NotifyProfilingServiceActive</a>()<span class="keyword"> override </span>{}</div><div class="line"><a name="l00714"></a><span class="lineno"><a class="line" href="classarm_1_1pipe_1_1_mock_profiling_service_status.xhtml#a80a0e4644a0be7b00bc581cb786d5a4f">  714</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm_1_1pipe_1_1_mock_profiling_service_status.xhtml#a80a0e4644a0be7b00bc581cb786d5a4f">WaitForProfilingServiceActivation</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timeout)<span class="keyword"> override </span>{ <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">arm::pipe::IgnoreUnused</a>(timeout); }</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;};</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;} <span class="comment">// namespace pipe</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;} <span class="comment">// namespace arm</span></div><div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_aae7fa615d4a944a10122344cf8bbd1be"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#aae7fa615d4a944a10122344cf8bbd1be">arm::pipe::MockProfilingConnection::WritePacket</a></div><div class="ttdeci">bool WritePacket(arm::pipe::Packet &amp;&amp;packet)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00127">ProfilingMocks.hpp:127</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_service_xhtml_aeea32305626f921e1e9f99434dbf9049"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#aeea32305626f921e1e9f99434dbf9049">arm::pipe::MockProfilingService::NextGuid</a></div><div class="ttdeci">ProfilingDynamicGuid NextGuid() override</div><div class="ttdoc">Return the next random Guid in the sequence. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00653">ProfilingMocks.hpp:653</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_af55b37f13ace15889ce8a0b18dda3ed9"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#af55b37f13ace15889ce8a0b18dda3ed9">arm::pipe::MockCounterDirectory::GetCategories</a></div><div class="ttdeci">const Categories &amp; GetCategories() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00583">ProfilingMocks.hpp:583</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_buffer_manager_xhtml_ae8b885e4225f3b0976f22ae8bc94f52a"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ae8b885e4225f3b0976f22ae8bc94f52a">arm::pipe::MockBufferManager::~MockBufferManager</a></div><div class="ttdeci">~MockBufferManager()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00214">ProfilingMocks.hpp:214</a></div></div>
<div class="ttc" id="_arm_n_n_profiling_8hpp_xhtml"><div class="ttname"><a href="_arm_n_n_profiling_8hpp.xhtml">ArmNNProfiling.hpp</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a91bdc9d5497d47f5d707418beb83b140"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a91bdc9d5497d47f5d707418beb83b140">arm::pipe::MockProfilingConnection::IsOpen</a></div><div class="ttdeci">bool IsOpen() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00063">ProfilingMocks.hpp:63</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_send_counter_packet_xhtml_a3b526a823530443efec886c4305e52de"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#a3b526a823530443efec886c4305e52de">arm::pipe::MockSendCounterPacket::SendCounterDirectoryPacket</a></div><div class="ttdeci">void SendCounterDirectoryPacket(const ICounterDirectory &amp;counterDirectory) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00408">ProfilingMocks.hpp:408</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_ac44342ac08725d8f5dd52e2ee93ca20d"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ac44342ac08725d8f5dd52e2ee93ca20d">arm::pipe::MockCounterDirectory::RegisterCategory</a></div><div class="ttdeci">const Category * RegisterCategory(const std::string &amp;categoryName)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00454">ProfilingMocks.hpp:454</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0aebabc0e295bef3bf6d0d659a4843ebe4"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0aebabc0e295bef3bf6d0d659a4843ebe4">arm::pipe::MockProfilingConnection::PacketType::PeriodicCounterSelection</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_buffer_manager_xhtml_a226108649851aa1b1a8168560c5228b5"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#a226108649851aa1b1a8168560c5228b5">arm::pipe::MockBufferManager::Release</a></div><div class="ttdeci">void Release(IPacketBufferPtr &amp;packetBuffer) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00246">ProfilingMocks.hpp:246</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_buffer_manager_xhtml_ac3f43b4dd3fafd6b13342acc2263bbb4"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ac3f43b4dd3fafd6b13342acc2263bbb4">arm::pipe::MockBufferManager::Reserve</a></div><div class="ttdeci">IPacketBufferPtr Reserve(unsigned int requestedSize, unsigned int &amp;reservedSize) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00216">ProfilingMocks.hpp:216</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_ac9bdbed464222fa06875096a4f373ca8"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ac9bdbed464222fa06875096a4f373ca8">arm::pipe::MockCounterDirectory::GetDevices</a></div><div class="ttdeci">const Devices &amp; GetDevices() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00584">ProfilingMocks.hpp:584</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_a1819a5a244fd4317b6dcd49cdbf67a2d"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a1819a5a244fd4317b6dcd49cdbf67a2d">arm::pipe::MockCounterDirectory::RegisterDevice</a></div><div class="ttdeci">const Device * RegisterDevice(const std::string &amp;deviceName, uint16_t cores=0)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00470">ProfilingMocks.hpp:470</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_ad9062caad1836f8e6b810e4e97bb19d1"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ad9062caad1836f8e6b810e4e97bb19d1">arm::pipe::MockCounterDirectory::GetCounterCount</a></div><div class="ttdeci">uint16_t GetCounterCount() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00580">ProfilingMocks.hpp:580</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0ab9eaea43754be09188f3b4d2e20f6c95"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0ab9eaea43754be09188f3b4d2e20f6c95">arm::pipe::MockProfilingConnection::PacketType::ConnectionAcknowledge</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_send_counter_packet_xhtml_aff0340dbcc0881b2c7477565034cb956"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#aff0340dbcc0881b2c7477565034cb956">arm::pipe::MockSendCounterPacket::MockSendCounterPacket</a></div><div class="ttdeci">MockSendCounterPacket(IBufferManager &amp;sendBuffer)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00397">ProfilingMocks.hpp:397</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_service_xhtml_a81f774c9319ff5d5b5bf4875e816d989"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a81f774c9319ff5d5b5bf4875e816d989">arm::pipe::MockProfilingService::GetSendTimelinePacket</a></div><div class="ttdeci">std::unique_ptr&lt; ISendTimelinePacket &gt; GetSendTimelinePacket() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00664">ProfilingMocks.hpp:664</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml_a7e55485c728365ea5d8bd9968cf45356"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a7e55485c728365ea5d8bd9968cf45356">arm::pipe::MockStreamCounterBuffer::~MockStreamCounterBuffer</a></div><div class="ttdeci">~MockStreamCounterBuffer()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00291">ProfilingMocks.hpp:291</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_buffer_manager_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml">arm::pipe::MockBufferManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00207">ProfilingMocks.hpp:207</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_buffer_manager_xhtml_ac29af30972ae62351f87a669e2c8940f"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ac29af30972ae62351f87a669e2c8940f">arm::pipe::MockBufferManager::MockBufferManager</a></div><div class="ttdeci">MockBufferManager(unsigned int size)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00210">ProfilingMocks.hpp:210</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_packet_buffer_xhtml_aa630bd4c9ada8ab204fbb42651b10613"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#aa630bd4c9ada8ab204fbb42651b10613">arm::pipe::MockPacketBuffer::MarkRead</a></div><div class="ttdeci">void MarkRead() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00191">ProfilingMocks.hpp:191</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml">arm::pipe::MockStreamCounterBuffer</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00281">ProfilingMocks.hpp:281</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0a2f84b9fefbbd5a3bc6d655e9ddb70547"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a2f84b9fefbbd5a3bc6d655e9ddb70547">arm::pipe::MockProfilingConnection::PacketType::ActivateTimelineReporting</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_service_status_xhtml_aa969a672380904e127264c3a8b27504b"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_service_status.xhtml#aa969a672380904e127264c3a8b27504b">arm::pipe::MockProfilingServiceStatus::NotifyProfilingServiceActive</a></div><div class="ttdeci">void NotifyProfilingServiceActive() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00713">ProfilingMocks.hpp:713</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a372bdcb3088c30e1a5bb38cf4b30d586"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a372bdcb3088c30e1a5bb38cf4b30d586">arm::pipe::MockProfilingConnection::MockProfilingConnection</a></div><div class="ttdeci">MockProfilingConnection()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00042">ProfilingMocks.hpp:42</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_service_xhtml_aff23669159bfc39106dc16d50c0a6e5f"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#aff23669159bfc39106dc16d50c0a6e5f">arm::pipe::MockProfilingService::GetCaptureData</a></div><div class="ttdeci">CaptureData GetCaptureData() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00684">ProfilingMocks.hpp:684</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a1de32cbfa025fc6e4eb2ff7a4fd16d6b"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a1de32cbfa025fc6e4eb2ff7a4fd16d6b">arm::pipe::MockProfilingConnection::CheckForPacket</a></div><div class="ttdeci">long CheckForPacket(const std::pair&lt; PacketType, uint32_t &gt; packetInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00112">ProfilingMocks.hpp:112</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_ad742b37bc2beb568e083225f3fd8160b"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ad742b37bc2beb568e083225f3fd8160b">arm::pipe::MockCounterDirectory::GetDeviceCount</a></div><div class="ttdeci">uint16_t GetDeviceCount() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00578">ProfilingMocks.hpp:578</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_packet_buffer_xhtml_a1d7238f289009294f40b0b2bcb8d594f"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#a1d7238f289009294f40b0b2bcb8d594f">arm::pipe::MockPacketBuffer::Commit</a></div><div class="ttdeci">void Commit(unsigned int size) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00193">ProfilingMocks.hpp:193</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_service_xhtml_a372de693ad40b3f42839c8ec6ac845f4"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a372de693ad40b3f42839c8ec6ac845f4">arm::pipe::MockProfilingService::Reset</a></div><div class="ttdeci">void Reset()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00697">ProfilingMocks.hpp:697</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac77c71a352f1e7f9fa4d9e4ceafa81d9"><div class="ttname"><a href="namespacearmnn.xhtml#ac77c71a352f1e7f9fa4d9e4ceafa81d9">armnn::IInitialiseProfilingService</a></div><div class="ttdeci">arm::pipe::IInitialiseProfilingService IInitialiseProfilingService</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8hpp_source.xhtml#l00028">Runtime.hpp:28</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_a739170f2a39056dd19a09216092fd089"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a739170f2a39056dd19a09216092fd089">arm::pipe::MockCounterDirectory::GetCategory</a></div><div class="ttdeci">const Category * GetCategory(const std::string &amp;name) const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00589">ProfilingMocks.hpp:589</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a47c113357d105d4f7a549a058e5661ab"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a47c113357d105d4f7a549a058e5661ab">arm::pipe::MockProfilingConnection::ReadPacket</a></div><div class="ttdeci">arm::pipe::Packet ReadPacket(uint32_t timeout) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00135">ProfilingMocks.hpp:135</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0ad2cacb6bc37a3363ae810b656e3b6190"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0ad2cacb6bc37a3363ae810b656e3b6190">arm::pipe::MockProfilingConnection::PacketType::CounterDirectory</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_service_xhtml_a37bec1c830464c365aa4434edd0de35a"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a37bec1c830464c365aa4434edd0de35a">arm::pipe::MockProfilingService::GetCounterMappings</a></div><div class="ttdeci">const ICounterMappings &amp; GetCounterMappings() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00669">ProfilingMocks.hpp:669</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_buffer_manager_xhtml_ae717263b3243e9f88f4caea6d31b0652"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">arm::pipe::MockBufferManager::MarkRead</a></div><div class="ttdeci">void MarkRead(IPacketBufferPtr &amp;packetBuffer) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00252">ProfilingMocks.hpp:252</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a42eb542b5a1d73d00c4ce474140bb78c"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a42eb542b5a1d73d00c4ce474140bb78c">arm::pipe::MockProfilingConnection::WritePacket</a></div><div class="ttdeci">bool WritePacket(const unsigned char *buffer, uint32_t length) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00077">ProfilingMocks.hpp:77</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_packet_buffer_xhtml_ae589e488b5420a2e680c1652072861e8"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#ae589e488b5420a2e680c1652072861e8">arm::pipe::MockPacketBuffer::MockPacketBuffer</a></div><div class="ttdeci">MockPacketBuffer(unsigned int maxSize)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00179">ProfilingMocks.hpp:179</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_afcb72c4151fd72abfffcb7dae0ed2817"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#afcb72c4151fd72abfffcb7dae0ed2817">arm::pipe::MockCounterDirectory::GetCounterSets</a></div><div class="ttdeci">const CounterSets &amp; GetCounterSets() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00585">ProfilingMocks.hpp:585</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_service_xhtml_a70db5b1cdd0d22c1fa912c6e8b9089ce"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a70db5b1cdd0d22c1fa912c6e8b9089ce">arm::pipe::MockProfilingService::IsProfilingEnabled</a></div><div class="ttdeci">bool IsProfilingEnabled() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00679">ProfilingMocks.hpp:679</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml_ae717263b3243e9f88f4caea6d31b0652"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ae717263b3243e9f88f4caea6d31b0652">arm::pipe::MockStreamCounterBuffer::MarkRead</a></div><div class="ttdeci">void MarkRead(IPacketBufferPtr &amp;packetBuffer) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00342">ProfilingMocks.hpp:342</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0">arm::pipe::MockProfilingConnection::PacketType</a></div><div class="ttdeci">PacketType</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00048">ProfilingMocks.hpp:48</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00149">BackendId.hpp:149</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml_ab158e7cd554e5f65e77bad0c4d448474"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ab158e7cd554e5f65e77bad0c4d448474">arm::pipe::MockStreamCounterBuffer::GetReadableSize</a></div><div class="ttdeci">unsigned int GetReadableSize() const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00368">ProfilingMocks.hpp:368</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_ae3b7dbaa7317dacbcec25f30f6a16075"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ae3b7dbaa7317dacbcec25f30f6a16075">arm::pipe::MockCounterDirectory::GetCounterSetCount</a></div><div class="ttdeci">uint16_t GetCounterSetCount() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00579">ProfilingMocks.hpp:579</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml">arm::pipe::MockProfilingConnection</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00039">ProfilingMocks.hpp:39</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0a4952ebb7930976133a3520fb113f77b7"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a4952ebb7930976133a3520fb113f77b7">arm::pipe::MockProfilingConnection::PacketType::PeriodicCounterCapture</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_send_counter_packet_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml">arm::pipe::MockSendCounterPacket</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00394">ProfilingMocks.hpp:394</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml_abce8709dc1b666a26f427ba7ff08b737"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#abce8709dc1b666a26f427ba7ff08b737">arm::pipe::MockStreamCounterBuffer::GetReadableBuffer</a></div><div class="ttdeci">IPacketBufferPtr GetReadableBuffer() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00328">ProfilingMocks.hpp:328</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml_a7233f6a0ab843a226dc07c72edd76168"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a7233f6a0ab843a226dc07c72edd76168">arm::pipe::MockStreamCounterBuffer::GetReadSize</a></div><div class="ttdeci">unsigned int GetReadSize() const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00369">ProfilingMocks.hpp:369</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_packet_buffer_xhtml_a9138802bd505003fa7224b0dc0413fb4"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#a9138802bd505003fa7224b0dc0413fb4">arm::pipe::MockPacketBuffer::Destroy</a></div><div class="ttdeci">void Destroy() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00199">ProfilingMocks.hpp:199</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0a88183b946cc5f0e8c96b2e66e1c74a7e"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a88183b946cc5f0e8c96b2e66e1c74a7e">arm::pipe::MockProfilingConnection::PacketType::Unknown</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_factory_xhtml_a809925c8c6149db5c0e25030466a0112"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection_factory.xhtml#a809925c8c6149db5c0e25030466a0112">arm::pipe::MockProfilingConnectionFactory::GetProfilingConnection</a></div><div class="ttdeci">IProfilingConnectionPtr GetProfilingConnection(const ProfilingOptions &amp;options) const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00169">ProfilingMocks.hpp:169</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_a6d7f92b987338cab6cbfbad8d53a9738"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a6d7f92b987338cab6cbfbad8d53a9738">arm::pipe::MockCounterDirectory::GetCounters</a></div><div class="ttdeci">const Counters &amp; GetCounters() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00586">ProfilingMocks.hpp:586</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml_af22fdc7450c285c4d7449425c8fe994f"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#af22fdc7450c285c4d7449425c8fe994f">arm::pipe::MockStreamCounterBuffer::FlushReadList</a></div><div class="ttdeci">void FlushReadList() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00358">ProfilingMocks.hpp:358</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_packet_buffer_xhtml_a6b34b9ef41ff50cf988dde8381fa4f7e"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#a6b34b9ef41ff50cf988dde8381fa4f7e">arm::pipe::MockPacketBuffer::~MockPacketBuffer</a></div><div class="ttdeci">~MockPacketBuffer()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00185">ProfilingMocks.hpp:185</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_packet_buffer_xhtml_a1a5dddc8911f6189f9ca01394c59faaf"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#a1a5dddc8911f6189f9ca01394c59faaf">arm::pipe::MockPacketBuffer::Release</a></div><div class="ttdeci">void Release() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00195">ProfilingMocks.hpp:195</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_a4626db62503c13042a745a40399f8317"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a4626db62503c13042a745a40399f8317">arm::pipe::MockCounterDirectory::GetCategoryCount</a></div><div class="ttdeci">uint16_t GetCategoryCount() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00577">ProfilingMocks.hpp:577</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_packet_buffer_xhtml_ab03338cef0f6b48d46effb2c2a64407d"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#ab03338cef0f6b48d46effb2c2a64407d">arm::pipe::MockPacketBuffer::GetSize</a></div><div class="ttdeci">unsigned int GetSize() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00189">ProfilingMocks.hpp:189</a></div></div>
<div class="ttc" id="namespacearm_xhtml"><div class="ttname"><a href="namespacearm.xhtml">arm</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00018">BackendRegistry.hpp:18</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0ac0b9859e4ac3c476e5cf6bb0c7a70dc5"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0ac0b9859e4ac3c476e5cf6bb0c7a70dc5">arm::pipe::MockProfilingConnection::PacketType::PerJobCounterSelection</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_send_counter_packet_xhtml_a47406a4d108beb4f20031d370a155a9d"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#a47406a4d108beb4f20031d370a155a9d">arm::pipe::MockSendCounterPacket::SendPeriodicCounterSelectionPacket</a></div><div class="ttdeci">void SendPeriodicCounterSelectionPacket(uint32_t capturePeriod, const std::vector&lt; uint16_t &gt; &amp;selectedCounterIds) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00431">ProfilingMocks.hpp:431</a></div></div>
<div class="ttc" id="_backend_id_8hpp_xhtml"><div class="ttname"><a href="_backend_id_8hpp.xhtml">BackendId.hpp</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a0f9aecd570c4e5e6d41337f0e2f1adf5"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0f9aecd570c4e5e6d41337f0e2f1adf5">arm::pipe::MockProfilingConnection::Close</a></div><div class="ttdeci">void Close() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00070">ProfilingMocks.hpp:70</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_buffer_manager_xhtml_af22fdc7450c285c4d7449425c8fe994f"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#af22fdc7450c285c4d7449425c8fe994f">arm::pipe::MockBufferManager::FlushReadList</a></div><div class="ttdeci">void FlushReadList() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00266">ProfilingMocks.hpp:266</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_buffer_manager_xhtml_a183eaa37ccd326bd82179bed901c7122"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#a183eaa37ccd326bd82179bed901c7122">arm::pipe::MockBufferManager::Commit</a></div><div class="ttdeci">void Commit(IPacketBufferPtr &amp;packetBuffer, unsigned int size, bool notifyConsumer=true) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00230">ProfilingMocks.hpp:230</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_send_counter_packet_xhtml_ac9261c6ee7d313090d15cfa22173d80c"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#ac9261c6ee7d313090d15cfa22173d80c">arm::pipe::MockSendCounterPacket::SendPeriodicCounterCapturePacket</a></div><div class="ttdeci">void SendPeriodicCounterCapturePacket(uint64_t timestamp, const std::vector&lt; CounterValue &gt; &amp;values) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00419">ProfilingMocks.hpp:419</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_a5fa9a7091e79fb9c5c0af5f663c71df1"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#a5fa9a7091e79fb9c5c0af5f663c71df1">arm::pipe::MockCounterDirectory::GetDevice</a></div><div class="ttdeci">const Device * GetDevice(uint16_t uid) const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00606">ProfilingMocks.hpp:606</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_buffer_manager_xhtml_ad675ff4e9053375bd41d0aad6b3bbb63"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#ad675ff4e9053375bd41d0aad6b3bbb63">arm::pipe::MockBufferManager::SetConsumer</a></div><div class="ttdeci">void SetConsumer(IConsumer *consumer) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00258">ProfilingMocks.hpp:258</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_service_xhtml_a5b024b98d38b08227727867341a420a9"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a5b024b98d38b08227727867341a420a9">arm::pipe::MockProfilingService::RegisterMapping</a></div><div class="ttdeci">void RegisterMapping(uint16_t globalCounterId, uint16_t backendCounterId, const std::string &amp;backendId)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00690">ProfilingMocks.hpp:690</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml_a226108649851aa1b1a8168560c5228b5"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a226108649851aa1b1a8168560c5228b5">arm::pipe::MockStreamCounterBuffer::Release</a></div><div class="ttdeci">void Release(IPacketBufferPtr &amp;packetBuffer) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00321">ProfilingMocks.hpp:321</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_factory_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection_factory.xhtml">arm::pipe::MockProfilingConnectionFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00166">ProfilingMocks.hpp:166</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0a532e27bb0051b56c487ef37d522dcc2b"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a532e27bb0051b56c487ef37d522dcc2b">arm::pipe::MockProfilingConnection::PacketType::TimelineMessageDirectory</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_adc32d741a992ea6f9af3f9e65aebf34d"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#adc32d741a992ea6f9af3f9e65aebf34d">arm::pipe::MockProfilingConnection::GetWrittenDataSize</a></div><div class="ttdeci">unsigned long GetWrittenDataSize()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00145">ProfilingMocks.hpp:145</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml_a0a0b47bcd9b2b00de2c82761705cfd58"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a0a0b47bcd9b2b00de2c82761705cfd58">arm::pipe::MockStreamCounterBuffer::GetCommittedSize</a></div><div class="ttdeci">unsigned int GetCommittedSize() const</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00367">ProfilingMocks.hpp:367</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_service_xhtml_afd19633513acfc3ae294aa90b1e13a04"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#afd19633513acfc3ae294aa90b1e13a04">arm::pipe::MockProfilingService::GenerateStaticId</a></div><div class="ttdeci">ProfilingStaticGuid GenerateStaticId(const std::string &amp;str) override</div><div class="ttdoc">Create a ProfilingStaticGuid based on a hash of the string. </div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00659">ProfilingMocks.hpp:659</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_send_counter_packet_xhtml_a2a2e451c4e4963909b8a6dc7e7653cd1"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_send_counter_packet.xhtml#a2a2e451c4e4963909b8a6dc7e7653cd1">arm::pipe::MockSendCounterPacket::SendStreamMetaDataPacket</a></div><div class="ttdeci">void SendStreamMetaDataPacket() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00399">ProfilingMocks.hpp:399</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_service_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml">arm::pipe::MockProfilingService</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00631">ProfilingMocks.hpp:631</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_af96ac62d23f06a90b7e36fca3f13367b"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#af96ac62d23f06a90b7e36fca3f13367b">arm::pipe::MockCounterDirectory::GetCounterSet</a></div><div class="ttdeci">const CounterSet * GetCounterSet(uint16_t uid) const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00612">ProfilingMocks.hpp:612</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_packet_buffer_xhtml_a9a7614d7b084e33f72045ed161eb95bc"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#a9a7614d7b084e33f72045ed161eb95bc">arm::pipe::MockPacketBuffer::GetReadableData</a></div><div class="ttdeci">const unsigned char * GetReadableData() const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00187">ProfilingMocks.hpp:187</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_ae0d8bd45562c0887985b1be728640bbc"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ae0d8bd45562c0887985b1be728640bbc">arm::pipe::MockCounterDirectory::RegisterCounterSet</a></div><div class="ttdeci">const CounterSet * RegisterCounterSet(const std::string &amp;counterSetName, uint16_t count=0)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00490">ProfilingMocks.hpp:490</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_buffer_manager_xhtml_abce8709dc1b666a26f427ba7ff08b737"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">arm::pipe::MockBufferManager::GetReadableBuffer</a></div><div class="ttdeci">IPacketBufferPtr GetReadableBuffer() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00241">ProfilingMocks.hpp:241</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml_a183eaa37ccd326bd82179bed901c7122"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#a183eaa37ccd326bd82179bed901c7122">arm::pipe::MockStreamCounterBuffer::Commit</a></div><div class="ttdeci">void Commit(IPacketBufferPtr &amp;packetBuffer, unsigned int size, bool notifyConsumer=true) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00307">ProfilingMocks.hpp:307</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml_ad675ff4e9053375bd41d0aad6b3bbb63"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ad675ff4e9053375bd41d0aad6b3bbb63">arm::pipe::MockStreamCounterBuffer::SetConsumer</a></div><div class="ttdeci">void SetConsumer(IConsumer *consumer) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00350">ProfilingMocks.hpp:350</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_ab2aecc9a0ed092f50b752d30a40bb31a"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#ab2aecc9a0ed092f50b752d30a40bb31a">arm::pipe::MockCounterDirectory::GetCounter</a></div><div class="ttdeci">const Counter * GetCounter(uint16_t uid) const override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00618">ProfilingMocks.hpp:618</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_packet_buffer_xhtml_afedc435235efffdfab1fb0670f52d7c1"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml#afedc435235efffdfab1fb0670f52d7c1">arm::pipe::MockPacketBuffer::GetWritableData</a></div><div class="ttdeci">unsigned char * GetWritableData() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00197">ProfilingMocks.hpp:197</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_service_status_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_service_status.xhtml">arm::pipe::MockProfilingServiceStatus</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00710">ProfilingMocks.hpp:710</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_service_status_xhtml_a80a0e4644a0be7b00bc581cb786d5a4f"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_service_status.xhtml#a80a0e4644a0be7b00bc581cb786d5a4f">arm::pipe::MockProfilingServiceStatus::WaitForProfilingServiceActivation</a></div><div class="ttdeci">void WaitForProfilingServiceActivation(unsigned int timeout) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00714">ProfilingMocks.hpp:714</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml_afc8de778ee03bedee2df4f9387060465"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml#afc8de778ee03bedee2df4f9387060465">arm::pipe::MockCounterDirectory::RegisterCounter</a></div><div class="ttdeci">const Counter * RegisterCounter(const std::string &amp;backendId, const uint16_t uid, const std::string &amp;parentCategoryName, uint16_t counterClass, uint16_t interpolation, double multiplier, const std::string &amp;name, const std::string &amp;description, const arm::pipe::Optional&lt; std::string &gt; &amp;units=arm::pipe::EmptyOptional(), const arm::pipe::Optional&lt; uint16_t &gt; &amp;numberOfCores=arm::pipe::EmptyOptional(), const arm::pipe::Optional&lt; uint16_t &gt; &amp;deviceUid=arm::pipe::EmptyOptional(), const arm::pipe::Optional&lt; uint16_t &gt; &amp;counterSetUid=arm::pipe::EmptyOptional())</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00511">ProfilingMocks.hpp:511</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0a79bb5b82761f89b8d72b4c79a9511c54"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0a79bb5b82761f89b8d72b4c79a9511c54">arm::pipe::MockProfilingConnection::PacketType::ReqCounterDirectory</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_packet_buffer_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_packet_buffer.xhtml">arm::pipe::MockPacketBuffer</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00176">ProfilingMocks.hpp:176</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0ae43273a3645f4894a1088081feb9827d"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0ae43273a3645f4894a1088081feb9827d">arm::pipe::MockProfilingConnection::PacketType::StreamMetaData</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_aa71d36872f416feaa853788a7a7a7ef8"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#aa71d36872f416feaa853788a7a7a7ef8">arm::pipe::MockProfilingConnection::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00152">ProfilingMocks.hpp:152</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_service_xhtml_a1ad55e1b889b39fa0a89398e42a694bb"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a1ad55e1b889b39fa0a89398e42a694bb">arm::pipe::MockProfilingService::MockProfilingService</a></div><div class="ttdeci">MockProfilingService(uint16_t maxGlobalCounterId, IInitialiseProfilingService &amp;initialiser, MockBufferManager &amp;mockBufferManager, bool isProfilingEnabled, const CaptureData &amp;captureData)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00634">ProfilingMocks.hpp:634</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_connection_xhtml_a0a80a7bc045affcf10846075b88cbca0ae1161354f5dc60bd440e23cc4ecbfa5a"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_connection.xhtml#a0a80a7bc045affcf10846075b88cbca0ae1161354f5dc60bd440e23cc4ecbfa5a">arm::pipe::MockProfilingConnection::PacketType::DeactivateTimelineReporting</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_profiling_service_xhtml_a28c5bcb3adea9e2476255acf1fc0647e"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_profiling_service.xhtml#a28c5bcb3adea9e2476255acf1fc0647e">arm::pipe::MockProfilingService::GetSendCounterPacket</a></div><div class="ttdeci">ISendCounterPacket &amp; GetSendCounterPacket() override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00674">ProfilingMocks.hpp:674</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml_add78c1a7dbde9d871b4193345e250d96"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#add78c1a7dbde9d871b4193345e250d96">arm::pipe::MockStreamCounterBuffer::MockStreamCounterBuffer</a></div><div class="ttdeci">MockStreamCounterBuffer(unsigned int maxBufferSize=4096)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00284">ProfilingMocks.hpp:284</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_stream_counter_buffer_xhtml_ac3f43b4dd3fafd6b13342acc2263bbb4"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_stream_counter_buffer.xhtml#ac3f43b4dd3fafd6b13342acc2263bbb4">arm::pipe::MockStreamCounterBuffer::Reserve</a></div><div class="ttdeci">IPacketBufferPtr Reserve(unsigned int requestedSize, unsigned int &amp;reservedSize) override</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00293">ProfilingMocks.hpp:293</a></div></div>
<div class="ttc" id="classarm_1_1pipe_1_1_mock_counter_directory_xhtml"><div class="ttname"><a href="classarm_1_1pipe_1_1_mock_counter_directory.xhtml">arm::pipe::MockCounterDirectory</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_mocks_8hpp_source.xhtml#l00447">ProfilingMocks.hpp:447</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_637c692f14729569dd2eac0c18e2a54a.xhtml">profiling</a></li><li class="navelem"><a class="el" href="dir_6b1198f6e738611120ec65b09506d2f8.xhtml">test</a></li><li class="navelem"><a class="el" href="_profiling_mocks_8hpp.xhtml">ProfilingMocks.hpp</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:31 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
