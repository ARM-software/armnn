<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: TfLiteParserImpl Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">TfLiteParserImpl Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:abfc86471394295357a23b3addd0b5b1c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> = std::unique_ptr&lt; tflite::ModelT &gt;</td></tr>
<tr class="separator:abfc86471394295357a23b3addd0b5b1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a988cb5e216eb87d854414c6a0282eeb4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a988cb5e216eb87d854414c6a0282eeb4">SubgraphPtr</a> = std::unique_ptr&lt; tflite::SubGraphT &gt;</td></tr>
<tr class="separator:a988cb5e216eb87d854414c6a0282eeb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadad81a95152fe5aad839db352d4012c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aadad81a95152fe5aad839db352d4012c">OperatorPtr</a> = std::unique_ptr&lt; tflite::OperatorT &gt;</td></tr>
<tr class="separator:aadad81a95152fe5aad839db352d4012c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab80edc19da7460a95a0ac05902f244b7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ab80edc19da7460a95a0ac05902f244b7">OperatorCodePtr</a> = std::unique_ptr&lt; tflite::OperatorCodeT &gt;</td></tr>
<tr class="separator:ab80edc19da7460a95a0ac05902f244b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ab952e29d01028931f75f997ad7cbd4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a4ab952e29d01028931f75f997ad7cbd4">TensorPtr</a> = std::unique_ptr&lt; tflite::TensorT &gt;</td></tr>
<tr class="separator:a4ab952e29d01028931f75f997ad7cbd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3486e6c1a291aa67efd8b280ffb83cc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> = const tflite::TensorT *</td></tr>
<tr class="separator:ac3486e6c1a291aa67efd8b280ffb83cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd8bee7fb9b86485a60bc7ee05114270"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> = std::vector&lt; <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> &gt;</td></tr>
<tr class="separator:abd8bee7fb9b86485a60bc7ee05114270"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7553cea300edaeb5722990f99f042ef0"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a> = std::pair&lt; size_t, <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> &gt;</td></tr>
<tr class="separator:a7553cea300edaeb5722990f99f042ef0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86428e0c674542488c7292dfbe2ce381"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> = std::vector&lt; <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a> &gt;</td></tr>
<tr class="separator:a86428e0c674542488c7292dfbe2ce381"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab93d9fb8a272789623edfa0b214c40f9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ab93d9fb8a272789623edfa0b214c40f9">BufferPtr</a> = std::unique_ptr&lt; tflite::BufferT &gt;</td></tr>
<tr class="separator:ab93d9fb8a272789623edfa0b214c40f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaafbda6e6816876b3d7963cfe64dd2f8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">BufferRawPtr</a> = const tflite::BufferT *</td></tr>
<tr class="separator:aaafbda6e6816876b3d7963cfe64dd2f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aed935c554e4f6a4e7b9dcde057d00877"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aed935c554e4f6a4e7b9dcde057d00877">CreateNetworkFromBinaryFile</a> (const char *graphFile)</td></tr>
<tr class="memdesc:aed935c554e4f6a4e7b9dcde057d00877"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network from a flatbuffers binary file on disk.  <a href="#aed935c554e4f6a4e7b9dcde057d00877">More...</a><br /></td></tr>
<tr class="separator:aed935c554e4f6a4e7b9dcde057d00877"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32a96909bc8a8ee9076bd4d5c1028301"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a32a96909bc8a8ee9076bd4d5c1028301">CreateNetworkFromBinary</a> (const std::vector&lt; uint8_t &gt; &amp;binaryContent)</td></tr>
<tr class="memdesc:a32a96909bc8a8ee9076bd4d5c1028301"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the network from a flatbuffers binary.  <a href="#a32a96909bc8a8ee9076bd4d5c1028301">More...</a><br /></td></tr>
<tr class="separator:a32a96909bc8a8ee9076bd4d5c1028301"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a913d452e7766210b59a69d3c658b2862"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a913d452e7766210b59a69d3c658b2862">GetNetworkInputBindingInfo</a> (size_t subgraphId, const std::string &amp;name) const</td></tr>
<tr class="memdesc:a913d452e7766210b59a69d3c658b2862"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve binding info (layer id and tensor info) for the network input identified by the given layer name and subgraph id.  <a href="#a913d452e7766210b59a69d3c658b2862">More...</a><br /></td></tr>
<tr class="separator:a913d452e7766210b59a69d3c658b2862"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59139faede3a07a43c4c8f86bb03dc43"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a59139faede3a07a43c4c8f86bb03dc43">GetNetworkOutputBindingInfo</a> (size_t subgraphId, const std::string &amp;name) const</td></tr>
<tr class="memdesc:a59139faede3a07a43c4c8f86bb03dc43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve binding info (layer id and tensor info) for the network output identified by the given layer name and subgraph id.  <a href="#a59139faede3a07a43c4c8f86bb03dc43">More...</a><br /></td></tr>
<tr class="separator:a59139faede3a07a43c4c8f86bb03dc43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b7aed8466cc5792966d271a65285d0e"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1b7aed8466cc5792966d271a65285d0e">GetSubgraphCount</a> () const</td></tr>
<tr class="memdesc:a1b7aed8466cc5792966d271a65285d0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of subgraphs in the parsed model.  <a href="#a1b7aed8466cc5792966d271a65285d0e">More...</a><br /></td></tr>
<tr class="separator:a1b7aed8466cc5792966d271a65285d0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe1ea028d8fcb9942c204d4415ff3319"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#afe1ea028d8fcb9942c204d4415ff3319">GetSubgraphInputTensorNames</a> (size_t subgraphId) const</td></tr>
<tr class="memdesc:afe1ea028d8fcb9942c204d4415ff3319"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the input tensor names for a given subgraph.  <a href="#afe1ea028d8fcb9942c204d4415ff3319">More...</a><br /></td></tr>
<tr class="separator:afe1ea028d8fcb9942c204d4415ff3319"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a949070abe70fabe18cc1eb29d5853f47"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a949070abe70fabe18cc1eb29d5853f47">GetSubgraphOutputTensorNames</a> (size_t subgraphId) const</td></tr>
<tr class="memdesc:a949070abe70fabe18cc1eb29d5853f47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the output tensor names for a given subgraph.  <a href="#a949070abe70fabe18cc1eb29d5853f47">More...</a><br /></td></tr>
<tr class="separator:a949070abe70fabe18cc1eb29d5853f47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9199a42f5fae611db182fb4c31a11df"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ad9199a42f5fae611db182fb4c31a11df">TfLiteParserImpl</a> (const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="structarmnn_tf_lite_parser_1_1_i_tf_lite_parser_1_1_tf_lite_parser_options.xhtml">ITfLiteParser::TfLiteParserOptions</a> &gt; &amp;options=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>())</td></tr>
<tr class="separator:ad9199a42f5fae611db182fb4c31a11df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaccd84a6cf2f9bdd77f833e4b65ffd42"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaccd84a6cf2f9bdd77f833e4b65ffd42">~TfLiteParserImpl</a> ()=default</td></tr>
<tr class="separator:aaccd84a6cf2f9bdd77f833e4b65ffd42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8abb48132e89e5273ca888ca884e305"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac8abb48132e89e5273ca888ca884e305">CreateNetworkFromBinaryAsDynamic</a> (const std::vector&lt; uint8_t &gt; &amp;binaryContent)</td></tr>
<tr class="separator:ac8abb48132e89e5273ca888ca884e305"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0da1e3b0281fa84f8b6f5ce3cd15b7c0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a0da1e3b0281fa84f8b6f5ce3cd15b7c0">LoadModel</a> (std::unique_ptr&lt; tflite::ModelT &gt; model)</td></tr>
<tr class="separator:a0da1e3b0281fa84f8b6f5ce3cd15b7c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:af9590c2ae8d68b5da999d3d6ab21dd3b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#af9590c2ae8d68b5da999d3d6ab21dd3b">LoadModelFromFile</a> (const char *fileName)</td></tr>
<tr class="separator:af9590c2ae8d68b5da999d3d6ab21dd3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f3fc56b7306b444f06f45cdc4032bbf"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7f3fc56b7306b444f06f45cdc4032bbf">LoadModelFromBinary</a> (const uint8_t *binaryContent, size_t len)</td></tr>
<tr class="separator:a7f3fc56b7306b444f06f45cdc4032bbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a342a58ab95b91af13b24dd4bdc7e09bb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a342a58ab95b91af13b24dd4bdc7e09bb">GetInputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:a342a58ab95b91af13b24dd4bdc7e09bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a279d0891900c191d5a0139e5c11fe488"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a279d0891900c191d5a0139e5c11fe488">GetOutputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:a279d0891900c191d5a0139e5c11fe488"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20518e431cb501b172371b850e6c3ec7"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a20518e431cb501b172371b850e6c3ec7">GetSubgraphInputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex)</td></tr>
<tr class="separator:a20518e431cb501b172371b850e6c3ec7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bd7b663eb19e2355b6aa5c36232d6fc"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1bd7b663eb19e2355b6aa5c36232d6fc">GetSubgraphOutputs</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex)</td></tr>
<tr class="separator:a1bd7b663eb19e2355b6aa5c36232d6fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b4b0b88a5e79a88b8b60db76398f575"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; int32_t &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a8b4b0b88a5e79a88b8b60db76398f575">GetInputTensorIds</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:a8b4b0b88a5e79a88b8b60db76398f575"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe6c475f92d02dd1eb12acd746e4736f"><td class="memItemLeft" align="right" valign="top">static std::vector&lt; int32_t &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#afe6c475f92d02dd1eb12acd746e4736f">GetOutputTensorIds</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t subgraphIndex, size_t operatorIndex)</td></tr>
<tr class="separator:afe6c475f92d02dd1eb12acd746e4736f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a720f0206e377dd1808acc94b3b12c538"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">BufferRawPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a720f0206e377dd1808acc94b3b12c538">GetBuffer</a> (const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;model, size_t bufferIndex)</td></tr>
<tr class="separator:a720f0206e377dd1808acc94b3b12c538"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d28f3a07c7ab30f66e7c70ded86eb49"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7d28f3a07c7ab30f66e7c70ded86eb49">OutputShapeOfSqueeze</a> (std::vector&lt; uint32_t &gt; squeezeDims, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;inputTensorInfo)</td></tr>
<tr class="separator:a7d28f3a07c7ab30f66e7c70ded86eb49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaebfa9a01a0bb8a0935114ff0140cc45"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaebfa9a01a0bb8a0935114ff0140cc45">OutputShapeOfReshape</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;inputTensorInfo, const std::vector&lt; int32_t &gt; &amp;targetDimsIn)</td></tr>
<tr class="separator:aaebfa9a01a0bb8a0935114ff0140cc45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa09a8bb02eed50715082d8b7fccd2f8d"><td class="memItemLeft" align="right" valign="top">static const std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aa09a8bb02eed50715082d8b7fccd2f8d">GetVersion</a> ()</td></tr>
<tr class="memdesc:aa09a8bb02eed50715082d8b7fccd2f8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve version in X.Y.Z form.  <a href="#aa09a8bb02eed50715082d8b7fccd2f8d">More...</a><br /></td></tr>
<tr class="separator:aa09a8bb02eed50715082d8b7fccd2f8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00025">25</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ab93d9fb8a272789623edfa0b214c40f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab93d9fb8a272789623edfa0b214c40f9">&#9670;&nbsp;</a></span>BufferPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ab93d9fb8a272789623edfa0b214c40f9">BufferPtr</a> =  std::unique_ptr&lt;tflite::BufferT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00038">38</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="aaafbda6e6816876b3d7963cfe64dd2f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaafbda6e6816876b3d7963cfe64dd2f8">&#9670;&nbsp;</a></span>BufferRawPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">BufferRawPtr</a> =  const tflite::BufferT *</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00039">39</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="abfc86471394295357a23b3addd0b5b1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfc86471394295357a23b3addd0b5b1c">&#9670;&nbsp;</a></span>ModelPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> =  std::unique_ptr&lt;tflite::ModelT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00029">29</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="ab80edc19da7460a95a0ac05902f244b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab80edc19da7460a95a0ac05902f244b7">&#9670;&nbsp;</a></span>OperatorCodePtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ab80edc19da7460a95a0ac05902f244b7">OperatorCodePtr</a> =  std::unique_ptr&lt;tflite::OperatorCodeT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00032">32</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="aadad81a95152fe5aad839db352d4012c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aadad81a95152fe5aad839db352d4012c">&#9670;&nbsp;</a></span>OperatorPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aadad81a95152fe5aad839db352d4012c">OperatorPtr</a> =  std::unique_ptr&lt;tflite::OperatorT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00031">31</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a988cb5e216eb87d854414c6a0282eeb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a988cb5e216eb87d854414c6a0282eeb4">&#9670;&nbsp;</a></span>SubgraphPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a988cb5e216eb87d854414c6a0282eeb4">SubgraphPtr</a> =  std::unique_ptr&lt;tflite::SubGraphT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00030">30</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a7553cea300edaeb5722990f99f042ef0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7553cea300edaeb5722990f99f042ef0">&#9670;&nbsp;</a></span>TensorIdRawPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a> =  std::pair&lt;size_t, <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00036">36</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a86428e0c674542488c7292dfbe2ce381"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86428e0c674542488c7292dfbe2ce381">&#9670;&nbsp;</a></span>TensorIdRawPtrVector</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> =  std::vector&lt;<a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7553cea300edaeb5722990f99f042ef0">TensorIdRawPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00037">37</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="a4ab952e29d01028931f75f997ad7cbd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ab952e29d01028931f75f997ad7cbd4">&#9670;&nbsp;</a></span>TensorPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a4ab952e29d01028931f75f997ad7cbd4">TensorPtr</a> =  std::unique_ptr&lt;tflite::TensorT&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00033">33</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="ac3486e6c1a291aa67efd8b280ffb83cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3486e6c1a291aa67efd8b280ffb83cc">&#9670;&nbsp;</a></span>TensorRawPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a> =  const tflite::TensorT *</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00034">34</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<a id="abd8bee7fb9b86485a60bc7ee05114270"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd8bee7fb9b86485a60bc7ee05114270">&#9670;&nbsp;</a></span>TensorRawPtrVector</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> =  std::vector&lt;<a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#ac3486e6c1a291aa67efd8b280ffb83cc">TensorRawPtr</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8hpp_source.xhtml#l00035">35</a> of file <a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad9199a42f5fae611db182fb4c31a11df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9199a42f5fae611db182fb4c31a11df">&#9670;&nbsp;</a></span>TfLiteParserImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml">TfLiteParserImpl</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; <a class="el" href="structarmnn_tf_lite_parser_1_1_i_tf_lite_parser_1_1_tf_lite_parser_options.xhtml">ITfLiteParser::TfLiteParserOptions</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>options</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>()</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00664">664</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;: m_Options(options)</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;, m_Network(<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;, m_ParserFunctions(tflite::BuiltinOperator_MAX+1, &amp;TfLiteParserImpl::ParseUnsupportedOperator)</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;{</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="comment">// register supported operators</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ABS]                     = &amp;TfLiteParserImpl::ParseAbs;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ADD]                     = &amp;TfLiteParserImpl::ParseAdd;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ARG_MIN]                 = &amp;TfLiteParserImpl::ParseArgMin;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ARG_MAX]                 = &amp;TfLiteParserImpl::ParseArgMax;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_AVERAGE_POOL_2D]         = &amp;TfLiteParserImpl::ParseAveragePool2D;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_BATCH_TO_SPACE_ND]       = &amp;TfLiteParserImpl::ParseBatchToSpaceND;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CAST]                    = &amp;TfLiteParserImpl::ParseCast;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CONCATENATION]           = &amp;TfLiteParserImpl::ParseConcatenation;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CONV_2D]                 = &amp;TfLiteParserImpl::ParseConv2D;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    <span class="comment">// Conv3D support was added in TF 2.5, so for backwards compatibility a hash define is needed.</span></div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="preprocessor">    #if defined(ARMNN_POST_TFLITE_2_3)</span></div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CONV_3D]                 = &amp;TfLiteParserImpl::ParseConv3D;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_CUSTOM]                  = &amp;TfLiteParserImpl::ParseCustomOperator;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_DEPTH_TO_SPACE]          = &amp;TfLiteParserImpl::ParseDepthToSpace;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_DEPTHWISE_CONV_2D]       = &amp;TfLiteParserImpl::ParseDepthwiseConv2D;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_DEQUANTIZE]              = &amp;TfLiteParserImpl::ParseDequantize;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_DIV]                     = &amp;TfLiteParserImpl::ParseDiv;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_ELU]                     = &amp;TfLiteParserImpl::ParseElu;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_EQUAL]                   = &amp;TfLiteParserImpl::ParseEqual;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_EXP]                     = &amp;TfLiteParserImpl::ParseExp;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_EXPAND_DIMS]             = &amp;TfLiteParserImpl::ParseExpandDims;</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_FULLY_CONNECTED]         = &amp;TfLiteParserImpl::ParseFullyConnected;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_GATHER]                  = &amp;TfLiteParserImpl::ParseGather;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_GREATER]                 = &amp;TfLiteParserImpl::ParseGreater;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_GREATER_EQUAL]           = &amp;TfLiteParserImpl::ParseGreaterOrEqual;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_HARD_SWISH]              = &amp;TfLiteParserImpl::ParseHardSwish;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LEAKY_RELU]              = &amp;TfLiteParserImpl::ParseLeakyRelu;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LESS]                    = &amp;TfLiteParserImpl::ParseLess;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LESS_EQUAL]              = &amp;TfLiteParserImpl::ParseLessOrEqual;</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LOCAL_RESPONSE_NORMALIZATION]</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            = &amp;TfLiteParserImpl::ParseLocalResponseNormalization;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LOGICAL_NOT]             = &amp;TfLiteParserImpl::ParseLogicalNot;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_LOGISTIC]                = &amp;TfLiteParserImpl::ParseLogistic;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_L2_NORMALIZATION]        = &amp;TfLiteParserImpl::ParseL2Normalization;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MAX_POOL_2D]             = &amp;TfLiteParserImpl::ParseMaxPool2D;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MAXIMUM]                 = &amp;TfLiteParserImpl::ParseMaximum;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MEAN]                    = &amp;TfLiteParserImpl::ParseMean;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MINIMUM]                 = &amp;TfLiteParserImpl::ParseMinimum;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MIRROR_PAD]              = &amp;TfLiteParserImpl::ParseMirrorPad;</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_MUL]                     = &amp;TfLiteParserImpl::ParseMul;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_NEG]                     = &amp;TfLiteParserImpl::ParseNeg;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_NOT_EQUAL]               = &amp;TfLiteParserImpl::ParseNotEqual;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_PACK]                    = &amp;TfLiteParserImpl::ParsePack;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_PAD]                     = &amp;TfLiteParserImpl::ParsePad;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_PADV2]                   = &amp;TfLiteParserImpl::ParsePad;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_PRELU]                   = &amp;TfLiteParserImpl::ParsePrelu;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_QUANTIZE]                = &amp;TfLiteParserImpl::ParseQuantize;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RELU]                    = &amp;TfLiteParserImpl::ParseRelu;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RELU6]                   = &amp;TfLiteParserImpl::ParseRelu6;</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_REDUCE_MAX]              = &amp;TfLiteParserImpl::ParseReduceMax;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_REDUCE_MIN]              = &amp;TfLiteParserImpl::ParseReduceMin;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_REDUCE_PROD]             = &amp;TfLiteParserImpl::ParseReduceProd;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RESHAPE]                 = &amp;TfLiteParserImpl::ParseReshape;</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RESIZE_BILINEAR]         = &amp;TfLiteParserImpl::ParseResizeBilinear;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RESIZE_NEAREST_NEIGHBOR] = &amp;TfLiteParserImpl::ParseResizeNearestNeighbor;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_RSQRT]                   = &amp;TfLiteParserImpl::ParseRsqrt;</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SHAPE]                   = &amp;TfLiteParserImpl::ParseShape;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SLICE]                   = &amp;TfLiteParserImpl::ParseSlice;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SOFTMAX]                 = &amp;TfLiteParserImpl::ParseSoftmax;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SPACE_TO_BATCH_ND]       = &amp;TfLiteParserImpl::ParseSpaceToBatchND;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SPLIT]                   = &amp;TfLiteParserImpl::ParseSplit;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SPLIT_V]                 = &amp;TfLiteParserImpl::ParseSplitV;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SQUEEZE]                 = &amp;TfLiteParserImpl::ParseSqueeze;</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_STRIDED_SLICE]           = &amp;TfLiteParserImpl::ParseStridedSlice;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SUB]                     = &amp;TfLiteParserImpl::ParseSub;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_SUM]                     = &amp;TfLiteParserImpl::ParseSum;</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_TANH]                    = &amp;TfLiteParserImpl::ParseTanH;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_TRANSPOSE]               = &amp;TfLiteParserImpl::ParseTranspose;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_TRANSPOSE_CONV]          = &amp;TfLiteParserImpl::ParseTransposeConv;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    m_ParserFunctions[tflite::BuiltinOperator_UNPACK]                  = &amp;TfLiteParserImpl::ParseUnpack;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <span class="comment">// register supported custom operators</span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    m_CustomParserFunctions[<span class="stringliteral">&quot;TFLite_Detection_PostProcess&quot;</span>]      = &amp;TfLiteParserImpl::ParseDetectionPostProcess;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aaccd84a6cf2f9bdd77f833e4b65ffd42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaccd84a6cf2f9bdd77f833e4b65ffd42">&#9670;&nbsp;</a></span>~TfLiteParserImpl()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml">TfLiteParserImpl</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a32a96909bc8a8ee9076bd4d5c1028301"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32a96909bc8a8ee9076bd4d5c1028301">&#9670;&nbsp;</a></span>CreateNetworkFromBinary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromBinary </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>binaryContent</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create the network from a flatbuffers binary. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00760">760</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03970">TfLiteParserImpl::LoadModelFromBinary()</a>.</p>
<div class="fragment"><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;{</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    ResetParser();</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    m_Model = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7f3fc56b7306b444f06f45cdc4032bbf">LoadModelFromBinary</a>(binaryContent.data(), binaryContent.size());</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel();</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a7f3fc56b7306b444f06f45cdc4032bbf"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7f3fc56b7306b444f06f45cdc4032bbf">armnnTfLiteParser::TfLiteParserImpl::LoadModelFromBinary</a></div><div class="ttdeci">static ModelPtr LoadModelFromBinary(const uint8_t *binaryContent, size_t len)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l03970">TfLiteParser.cpp:3970</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac8abb48132e89e5273ca888ca884e305"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8abb48132e89e5273ca888ca884e305">&#9670;&nbsp;</a></span>CreateNetworkFromBinaryAsDynamic()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> CreateNetworkFromBinaryAsDynamic </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; uint8_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>binaryContent</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aed935c554e4f6a4e7b9dcde057d00877"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed935c554e4f6a4e7b9dcde057d00877">&#9670;&nbsp;</a></span>CreateNetworkFromBinaryFile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> CreateNetworkFromBinaryFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>graphFile</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create the network from a flatbuffers binary file on disk. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00753">753</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03946">TfLiteParserImpl::LoadModelFromFile()</a>.</p>
<div class="fragment"><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;{</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    ResetParser();</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    m_Model = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#af9590c2ae8d68b5da999d3d6ab21dd3b">LoadModelFromFile</a>(graphFile);</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel();</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_af9590c2ae8d68b5da999d3d6ab21dd3b"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#af9590c2ae8d68b5da999d3d6ab21dd3b">armnnTfLiteParser::TfLiteParserImpl::LoadModelFromFile</a></div><div class="ttdeci">static ModelPtr LoadModelFromFile(const char *fileName)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l03946">TfLiteParser.cpp:3946</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a720f0206e377dd1808acc94b3b12c538"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a720f0206e377dd1808acc94b3b12c538">&#9670;&nbsp;</a></span>GetBuffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#aaafbda6e6816876b3d7963cfe64dd2f8">TfLiteParserImpl::BufferRawPtr</a> GetBuffer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>bufferIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04224">4224</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00260">CHECK_BUFFER</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00323">CHECK_BUFFER_SIZE</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00225">CHECK_TENSOR_PTR</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_types_utils_8hpp_source.xhtml#l00202">armnn::GetDataTypeName()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00516">TensorInfo::SetConstant()</a>, and <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03309">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00768">TfLiteParserImpl::LoadModel()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02575">TfLiteParserImpl::OutputShapeOfReshape()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01861">TfLiteParserImpl::OutputShapeOfSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l04225"></a><span class="lineno"> 4225</span>&#160;{</div><div class="line"><a name="l04226"></a><span class="lineno"> 4226</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a7c88d54e3f895030c70330a4c9d76a7a">CHECK_BUFFER</a>(model, bufferIndex);</div><div class="line"><a name="l04227"></a><span class="lineno"> 4227</span>&#160;    <span class="keywordflow">return</span> model-&gt;buffers[bufferIndex].get();</div><div class="line"><a name="l04228"></a><span class="lineno"> 4228</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a7c88d54e3f895030c70330a4c9d76a7a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a7c88d54e3f895030c70330a4c9d76a7a">CHECK_BUFFER</a></div><div class="ttdeci">#define CHECK_BUFFER(MODEL, BUFFER_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00260">TfLiteParser.cpp:260</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a342a58ab95b91af13b24dd4bdc7e09bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a342a58ab95b91af13b24dd4bdc7e09bb">&#9670;&nbsp;</a></span>GetInputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TfLiteParserImpl::TensorRawPtrVector</a> GetInputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03989">3989</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00183">CHECK_MODEL</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03309">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00768">TfLiteParserImpl::LoadModel()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02575">TfLiteParserImpl::OutputShapeOfReshape()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01861">TfLiteParserImpl::OutputShapeOfSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l03992"></a><span class="lineno"> 3992</span>&#160;{</div><div class="line"><a name="l03993"></a><span class="lineno"> 3993</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l03994"></a><span class="lineno"> 3994</span>&#160;</div><div class="line"><a name="l03995"></a><span class="lineno"> 3995</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l03996"></a><span class="lineno"> 3996</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l03997"></a><span class="lineno"> 3997</span>&#160;</div><div class="line"><a name="l03998"></a><span class="lineno"> 3998</span>&#160;    <span class="keywordtype">size_t</span> inputCount = operatorPtr-&gt;inputs.size();</div><div class="line"><a name="l03999"></a><span class="lineno"> 3999</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> result;</div><div class="line"><a name="l04000"></a><span class="lineno"> 4000</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; inputCount; ++i)</div><div class="line"><a name="l04001"></a><span class="lineno"> 4001</span>&#160;    {</div><div class="line"><a name="l04002"></a><span class="lineno"> 4002</span>&#160;        <span class="comment">// If the input location is -1 then assume input is turned off.</span></div><div class="line"><a name="l04003"></a><span class="lineno"> 4003</span>&#160;        <span class="keywordflow">if</span> (operatorPtr-&gt;inputs[i] == -1)</div><div class="line"><a name="l04004"></a><span class="lineno"> 4004</span>&#160;        {</div><div class="line"><a name="l04005"></a><span class="lineno"> 4005</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l04006"></a><span class="lineno"> 4006</span>&#160;        }</div><div class="line"><a name="l04007"></a><span class="lineno"> 4007</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l04008"></a><span class="lineno"> 4008</span>&#160;        {</div><div class="line"><a name="l04009"></a><span class="lineno"> 4009</span>&#160;            uint32_t inputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(operatorPtr-&gt;inputs[i]);</div><div class="line"><a name="l04010"></a><span class="lineno"> 4010</span>&#160;            result.push_back(subgraphPtr-&gt;tensors[inputId].get());</div><div class="line"><a name="l04011"></a><span class="lineno"> 4011</span>&#160;        }</div><div class="line"><a name="l04012"></a><span class="lineno"> 4012</span>&#160;    }</div><div class="line"><a name="l04013"></a><span class="lineno"> 4013</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04014"></a><span class="lineno"> 4014</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00183">TfLiteParser.cpp:183</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_abd8bee7fb9b86485a60bc7ee05114270"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">armnnTfLiteParser::TfLiteParserImpl::TensorRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorRawPtr &gt; TensorRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00035">TfLiteParser.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8b4b0b88a5e79a88b8b60db76398f575"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b4b0b88a5e79a88b8b60db76398f575">&#9670;&nbsp;</a></span>GetInputTensorIds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; int32_t &gt; &amp; GetInputTensorIds </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04069">4069</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00183">CHECK_MODEL</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03309">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00768">TfLiteParserImpl::LoadModel()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02575">TfLiteParserImpl::OutputShapeOfReshape()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01861">TfLiteParserImpl::OutputShapeOfSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l04072"></a><span class="lineno"> 4072</span>&#160;{</div><div class="line"><a name="l04073"></a><span class="lineno"> 4073</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l04074"></a><span class="lineno"> 4074</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04075"></a><span class="lineno"> 4075</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l04076"></a><span class="lineno"> 4076</span>&#160;    <span class="keywordflow">return</span> operatorPtr-&gt;inputs;</div><div class="line"><a name="l04077"></a><span class="lineno"> 4077</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00183">TfLiteParser.cpp:183</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a913d452e7766210b59a69d3c658b2862"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a913d452e7766210b59a69d3c658b2862">&#9670;&nbsp;</a></span>GetNetworkInputBindingInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> GetNetworkInputBindingInfo </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieve binding info (layer id and tensor info) for the network input identified by the given layer name and subgraph id. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04326">4326</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00141">CHECK_SUBGRAPH</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04036">TfLiteParserImpl::GetSubgraphInputs()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00609">armnnDeserializer::ToTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l04328"></a><span class="lineno"> 4328</span>&#160;{</div><div class="line"><a name="l04329"></a><span class="lineno"> 4329</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l04330"></a><span class="lineno"> 4330</span>&#160;    <span class="keyword">auto</span> inputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a20518e431cb501b172371b850e6c3ec7">GetSubgraphInputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l04331"></a><span class="lineno"> 4331</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; input : inputs)</div><div class="line"><a name="l04332"></a><span class="lineno"> 4332</span>&#160;    {</div><div class="line"><a name="l04333"></a><span class="lineno"> 4333</span>&#160;        <span class="keywordflow">if</span> (input.second-&gt;name == name)</div><div class="line"><a name="l04334"></a><span class="lineno"> 4334</span>&#160;        {</div><div class="line"><a name="l04335"></a><span class="lineno"> 4335</span>&#160;            <span class="keyword">auto</span> bindingId = GenerateLayerBindingId(subgraphId, input.first);</div><div class="line"><a name="l04336"></a><span class="lineno"> 4336</span>&#160;            <span class="keyword">auto</span> inputTensorInfo = <a class="code" href="namespacearmnn_deserializer.xhtml#a948b8c615ff06defa3b80d2352259ff2">ToTensorInfo</a>(input.second);</div><div class="line"><a name="l04337"></a><span class="lineno"> 4337</span>&#160;            <span class="comment">// Input tensors are always treated as constant tensors during network execution.</span></div><div class="line"><a name="l04338"></a><span class="lineno"> 4338</span>&#160;            inputTensorInfo.SetConstant(<span class="keyword">true</span>);</div><div class="line"><a name="l04339"></a><span class="lineno"> 4339</span>&#160;            <span class="keywordflow">return</span> std::make_pair(bindingId, inputTensorInfo);</div><div class="line"><a name="l04340"></a><span class="lineno"> 4340</span>&#160;        }</div><div class="line"><a name="l04341"></a><span class="lineno"> 4341</span>&#160;    }</div><div class="line"><a name="l04342"></a><span class="lineno"> 4342</span>&#160;</div><div class="line"><a name="l04343"></a><span class="lineno"> 4343</span>&#160;    std::stringstream bindings;</div><div class="line"><a name="l04344"></a><span class="lineno"> 4344</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; input : inputs)</div><div class="line"><a name="l04345"></a><span class="lineno"> 4345</span>&#160;    {</div><div class="line"><a name="l04346"></a><span class="lineno"> 4346</span>&#160;        bindings &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; input.second-&gt;name &lt;&lt; <span class="stringliteral">&quot;&#39; &quot;</span>;</div><div class="line"><a name="l04347"></a><span class="lineno"> 4347</span>&#160;    }</div><div class="line"><a name="l04348"></a><span class="lineno"> 4348</span>&#160;</div><div class="line"><a name="l04349"></a><span class="lineno"> 4349</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l04350"></a><span class="lineno"> 4350</span>&#160;        fmt::format(<span class="stringliteral">&quot;No input binding found for subgraph:{} and name:{}. &quot;</span></div><div class="line"><a name="l04351"></a><span class="lineno"> 4351</span>&#160;                    <span class="stringliteral">&quot;Possible inputs are: [{}] {}&quot;</span>,</div><div class="line"><a name="l04352"></a><span class="lineno"> 4352</span>&#160;                    subgraphId,</div><div class="line"><a name="l04353"></a><span class="lineno"> 4353</span>&#160;                    name,</div><div class="line"><a name="l04354"></a><span class="lineno"> 4354</span>&#160;                    bindings.str(),</div><div class="line"><a name="l04355"></a><span class="lineno"> 4355</span>&#160;                    <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l04356"></a><span class="lineno"> 4356</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00141">TfLiteParser.cpp:141</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00209">Exceptions.hpp:209</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a20518e431cb501b172371b850e6c3ec7"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a20518e431cb501b172371b850e6c3ec7">armnnTfLiteParser::TfLiteParserImpl::GetSubgraphInputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphInputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04036">TfLiteParser.cpp:4036</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="namespacearmnn_deserializer_xhtml_a948b8c615ff06defa3b80d2352259ff2"><div class="ttname"><a href="namespacearmnn_deserializer.xhtml#a948b8c615ff06defa3b80d2352259ff2">armnnDeserializer::ToTensorInfo</a></div><div class="ttdeci">armnn::TensorInfo ToTensorInfo(TensorRawPtr tensorPtr)</div><div class="ttdef"><b>Definition:</b> <a href="_deserializer_8cpp_source.xhtml#l00609">Deserializer.cpp:609</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a59139faede3a07a43c4c8f86bb03dc43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59139faede3a07a43c4c8f86bb03dc43">&#9670;&nbsp;</a></span>GetNetworkOutputBindingInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> GetNetworkOutputBindingInfo </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieve binding info (layer id and tensor info) for the network output identified by the given layer name and subgraph id. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04358">4358</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00141">CHECK_SUBGRAPH</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04053">TfLiteParserImpl::GetSubgraphOutputs()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00609">armnnDeserializer::ToTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l04360"></a><span class="lineno"> 4360</span>&#160;{</div><div class="line"><a name="l04361"></a><span class="lineno"> 4361</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l04362"></a><span class="lineno"> 4362</span>&#160;    <span class="keyword">auto</span> outputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1bd7b663eb19e2355b6aa5c36232d6fc">GetSubgraphOutputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l04363"></a><span class="lineno"> 4363</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputs.size(); ++i)</div><div class="line"><a name="l04364"></a><span class="lineno"> 4364</span>&#160;    {</div><div class="line"><a name="l04365"></a><span class="lineno"> 4365</span>&#160;        <span class="keyword">auto</span> <span class="keyword">const</span> output = outputs[i];</div><div class="line"><a name="l04366"></a><span class="lineno"> 4366</span>&#160;        <span class="keywordflow">if</span> (output.second-&gt;name == name)</div><div class="line"><a name="l04367"></a><span class="lineno"> 4367</span>&#160;        {</div><div class="line"><a name="l04368"></a><span class="lineno"> 4368</span>&#160;            <span class="keyword">auto</span> bindingId = GenerateLayerBindingId(subgraphId, output.first);</div><div class="line"><a name="l04369"></a><span class="lineno"> 4369</span>&#160;            std::vector&lt;unsigned int&gt; shape = m_OverridenOutputShapes.size() &gt; 0 ?</div><div class="line"><a name="l04370"></a><span class="lineno"> 4370</span>&#160;                                                m_OverridenOutputShapes[i] : AsUnsignedVector(output.second-&gt;shape);</div><div class="line"><a name="l04371"></a><span class="lineno"> 4371</span>&#160;            <span class="keywordflow">return</span> std::make_pair(bindingId, <a class="code" href="namespacearmnn_deserializer.xhtml#a948b8c615ff06defa3b80d2352259ff2">ToTensorInfo</a>(output.second, shape));</div><div class="line"><a name="l04372"></a><span class="lineno"> 4372</span>&#160;        }</div><div class="line"><a name="l04373"></a><span class="lineno"> 4373</span>&#160;    }</div><div class="line"><a name="l04374"></a><span class="lineno"> 4374</span>&#160;</div><div class="line"><a name="l04375"></a><span class="lineno"> 4375</span>&#160;    std::stringstream bindings;</div><div class="line"><a name="l04376"></a><span class="lineno"> 4376</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; output : outputs)</div><div class="line"><a name="l04377"></a><span class="lineno"> 4377</span>&#160;    {</div><div class="line"><a name="l04378"></a><span class="lineno"> 4378</span>&#160;        bindings &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; output.second-&gt;name &lt;&lt; <span class="stringliteral">&quot;&#39; &quot;</span>;</div><div class="line"><a name="l04379"></a><span class="lineno"> 4379</span>&#160;    }</div><div class="line"><a name="l04380"></a><span class="lineno"> 4380</span>&#160;</div><div class="line"><a name="l04381"></a><span class="lineno"> 4381</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l04382"></a><span class="lineno"> 4382</span>&#160;        fmt::format(<span class="stringliteral">&quot;No output binding found for subgraph:{} and name:{}. &quot;</span></div><div class="line"><a name="l04383"></a><span class="lineno"> 4383</span>&#160;                    <span class="stringliteral">&quot;Possible outputs are: [{}] {}&quot;</span>,</div><div class="line"><a name="l04384"></a><span class="lineno"> 4384</span>&#160;                    subgraphId,</div><div class="line"><a name="l04385"></a><span class="lineno"> 4385</span>&#160;                    name,</div><div class="line"><a name="l04386"></a><span class="lineno"> 4386</span>&#160;                    bindings.str(),</div><div class="line"><a name="l04387"></a><span class="lineno"> 4387</span>&#160;                    <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l04388"></a><span class="lineno"> 4388</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a1bd7b663eb19e2355b6aa5c36232d6fc"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1bd7b663eb19e2355b6aa5c36232d6fc">armnnTfLiteParser::TfLiteParserImpl::GetSubgraphOutputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphOutputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04053">TfLiteParser.cpp:4053</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00141">TfLiteParser.cpp:141</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00209">Exceptions.hpp:209</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="namespacearmnn_deserializer_xhtml_a948b8c615ff06defa3b80d2352259ff2"><div class="ttname"><a href="namespacearmnn_deserializer.xhtml#a948b8c615ff06defa3b80d2352259ff2">armnnDeserializer::ToTensorInfo</a></div><div class="ttdeci">armnn::TensorInfo ToTensorInfo(TensorRawPtr tensorPtr)</div><div class="ttdef"><b>Definition:</b> <a href="_deserializer_8cpp_source.xhtml#l00609">Deserializer.cpp:609</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a279d0891900c191d5a0139e5c11fe488"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a279d0891900c191d5a0139e5c11fe488">&#9670;&nbsp;</a></span>GetOutputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TfLiteParserImpl::TensorRawPtrVector</a> GetOutputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04016">4016</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00183">CHECK_MODEL</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00212">CHECK_TENSOR</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03309">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00768">TfLiteParserImpl::LoadModel()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02575">TfLiteParserImpl::OutputShapeOfReshape()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01861">TfLiteParserImpl::OutputShapeOfSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l04019"></a><span class="lineno"> 4019</span>&#160;{</div><div class="line"><a name="l04020"></a><span class="lineno"> 4020</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l04021"></a><span class="lineno"> 4021</span>&#160;</div><div class="line"><a name="l04022"></a><span class="lineno"> 4022</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04023"></a><span class="lineno"> 4023</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l04024"></a><span class="lineno"> 4024</span>&#160;</div><div class="line"><a name="l04025"></a><span class="lineno"> 4025</span>&#160;    <span class="keywordtype">size_t</span> outputCount = operatorPtr-&gt;outputs.size();</div><div class="line"><a name="l04026"></a><span class="lineno"> 4026</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">TensorRawPtrVector</a> result(outputCount);</div><div class="line"><a name="l04027"></a><span class="lineno"> 4027</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; outputCount; ++i)</div><div class="line"><a name="l04028"></a><span class="lineno"> 4028</span>&#160;    {</div><div class="line"><a name="l04029"></a><span class="lineno"> 4029</span>&#160;        uint32_t outputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(operatorPtr-&gt;outputs[i]);</div><div class="line"><a name="l04030"></a><span class="lineno"> 4030</span>&#160;        <a class="code" href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a>(model, subgraphIndex, outputId);</div><div class="line"><a name="l04031"></a><span class="lineno"> 4031</span>&#160;        result[i] = subgraphPtr-&gt;tensors[outputId].get();</div><div class="line"><a name="l04032"></a><span class="lineno"> 4032</span>&#160;    }</div><div class="line"><a name="l04033"></a><span class="lineno"> 4033</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04034"></a><span class="lineno"> 4034</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00183">TfLiteParser.cpp:183</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_aa1664dc13adbc85ac12fb584b76bfdae"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a></div><div class="ttdeci">#define CHECK_TENSOR(MODEL, SUBGRAPH_INDEX, TENSOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00212">TfLiteParser.cpp:212</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_abd8bee7fb9b86485a60bc7ee05114270"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abd8bee7fb9b86485a60bc7ee05114270">armnnTfLiteParser::TfLiteParserImpl::TensorRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorRawPtr &gt; TensorRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00035">TfLiteParser.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afe6c475f92d02dd1eb12acd746e4736f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe6c475f92d02dd1eb12acd746e4736f">&#9670;&nbsp;</a></span>GetOutputTensorIds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; int32_t &gt; &amp; GetOutputTensorIds </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>operatorIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04079">4079</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00183">CHECK_MODEL</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00141">CHECK_SUBGRAPH</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">IConnectableLayer::GetNumInputSlots()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">IConnectableLayer::GetNumOutputSlots()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04036">TfLiteParserImpl::GetSubgraphInputs()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04053">TfLiteParserImpl::GetSubgraphOutputs()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00609">armnnDeserializer::ToTensorInfo()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03309">armnnTfLiteParser::ComputeWrappedIndex()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00768">TfLiteParserImpl::LoadModel()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02575">TfLiteParserImpl::OutputShapeOfReshape()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01861">TfLiteParserImpl::OutputShapeOfSqueeze()</a>.</p>
<div class="fragment"><div class="line"><a name="l04082"></a><span class="lineno"> 4082</span>&#160;{</div><div class="line"><a name="l04083"></a><span class="lineno"> 4083</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a>(model, subgraphIndex, operatorIndex);</div><div class="line"><a name="l04084"></a><span class="lineno"> 4084</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04085"></a><span class="lineno"> 4085</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; operatorPtr = subgraphPtr-&gt;operators[operatorIndex];</div><div class="line"><a name="l04086"></a><span class="lineno"> 4086</span>&#160;    <span class="keywordflow">return</span> operatorPtr-&gt;outputs;</div><div class="line"><a name="l04087"></a><span class="lineno"> 4087</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_afbe702264a4e175da37c4941c0894bdb"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#afbe702264a4e175da37c4941c0894bdb">CHECK_MODEL</a></div><div class="ttdeci">#define CHECK_MODEL(MODEL, SUBGRAPH_INDEX, OPERATOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00183">TfLiteParser.cpp:183</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1b7aed8466cc5792966d271a65285d0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b7aed8466cc5792966d271a65285d0e">&#9670;&nbsp;</a></span>GetSubgraphCount()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t GetSubgraphCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the number of subgraphs in the parsed model. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04390">4390</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l04391"></a><span class="lineno"> 4391</span>&#160;{</div><div class="line"><a name="l04392"></a><span class="lineno"> 4392</span>&#160;    <span class="keywordflow">return</span> m_Model-&gt;subgraphs.size();</div><div class="line"><a name="l04393"></a><span class="lineno"> 4393</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a20518e431cb501b172371b850e6c3ec7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20518e431cb501b172371b850e6c3ec7">&#9670;&nbsp;</a></span>GetSubgraphInputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TfLiteParserImpl::TensorIdRawPtrVector</a> GetSubgraphInputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04036">4036</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00141">CHECK_SUBGRAPH</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00212">CHECK_TENSOR</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04326">TfLiteParserImpl::GetNetworkInputBindingInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04079">TfLiteParserImpl::GetOutputTensorIds()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04395">TfLiteParserImpl::GetSubgraphInputTensorNames()</a>.</p>
<div class="fragment"><div class="line"><a name="l04038"></a><span class="lineno"> 4038</span>&#160;{</div><div class="line"><a name="l04039"></a><span class="lineno"> 4039</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(model, subgraphIndex);</div><div class="line"><a name="l04040"></a><span class="lineno"> 4040</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04041"></a><span class="lineno"> 4041</span>&#160;</div><div class="line"><a name="l04042"></a><span class="lineno"> 4042</span>&#160;    <span class="keywordtype">size_t</span> inputCount = subgraphPtr-&gt;inputs.size();</div><div class="line"><a name="l04043"></a><span class="lineno"> 4043</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> result(inputCount);</div><div class="line"><a name="l04044"></a><span class="lineno"> 4044</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; inputCount; ++i)</div><div class="line"><a name="l04045"></a><span class="lineno"> 4045</span>&#160;    {</div><div class="line"><a name="l04046"></a><span class="lineno"> 4046</span>&#160;        uint32_t inputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(subgraphPtr-&gt;inputs[i]);</div><div class="line"><a name="l04047"></a><span class="lineno"> 4047</span>&#160;        <a class="code" href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a>(model, subgraphIndex, inputId);</div><div class="line"><a name="l04048"></a><span class="lineno"> 4048</span>&#160;        result[i] = std::make_pair(inputId, subgraphPtr-&gt;tensors[inputId].get());</div><div class="line"><a name="l04049"></a><span class="lineno"> 4049</span>&#160;    }</div><div class="line"><a name="l04050"></a><span class="lineno"> 4050</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04051"></a><span class="lineno"> 4051</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_aa1664dc13adbc85ac12fb584b76bfdae"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#aa1664dc13adbc85ac12fb584b76bfdae">CHECK_TENSOR</a></div><div class="ttdeci">#define CHECK_TENSOR(MODEL, SUBGRAPH_INDEX, TENSOR_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00212">TfLiteParser.cpp:212</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00141">TfLiteParser.cpp:141</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a86428e0c674542488c7292dfbe2ce381"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">armnnTfLiteParser::TfLiteParserImpl::TensorIdRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorIdRawPtr &gt; TensorIdRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00037">TfLiteParser.hpp:37</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afe1ea028d8fcb9942c204d4415ff3319"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe1ea028d8fcb9942c204d4415ff3319">&#9670;&nbsp;</a></span>GetSubgraphInputTensorNames()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetSubgraphInputTensorNames </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the input tensor names for a given subgraph. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04395">4395</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00141">CHECK_SUBGRAPH</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04036">TfLiteParserImpl::GetSubgraphInputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l04396"></a><span class="lineno"> 4396</span>&#160;{</div><div class="line"><a name="l04397"></a><span class="lineno"> 4397</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l04398"></a><span class="lineno"> 4398</span>&#160;    <span class="keyword">auto</span> inputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a20518e431cb501b172371b850e6c3ec7">GetSubgraphInputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l04399"></a><span class="lineno"> 4399</span>&#160;    std::vector&lt;std::string&gt; result;</div><div class="line"><a name="l04400"></a><span class="lineno"> 4400</span>&#160;    result.reserve(inputs.size());</div><div class="line"><a name="l04401"></a><span class="lineno"> 4401</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; input : inputs)</div><div class="line"><a name="l04402"></a><span class="lineno"> 4402</span>&#160;    {</div><div class="line"><a name="l04403"></a><span class="lineno"> 4403</span>&#160;        result.push_back(input.second-&gt;name);</div><div class="line"><a name="l04404"></a><span class="lineno"> 4404</span>&#160;    }</div><div class="line"><a name="l04405"></a><span class="lineno"> 4405</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04406"></a><span class="lineno"> 4406</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00141">TfLiteParser.cpp:141</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a20518e431cb501b172371b850e6c3ec7"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a20518e431cb501b172371b850e6c3ec7">armnnTfLiteParser::TfLiteParserImpl::GetSubgraphInputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphInputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04036">TfLiteParser.cpp:4036</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1bd7b663eb19e2355b6aa5c36232d6fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bd7b663eb19e2355b6aa5c36232d6fc">&#9670;&nbsp;</a></span>GetSubgraphOutputs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TfLiteParserImpl::TensorIdRawPtrVector</a> GetSubgraphOutputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">ModelPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphIndex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04053">4053</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00141">CHECK_SUBGRAPH</a>, and <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04358">TfLiteParserImpl::GetNetworkOutputBindingInfo()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04079">TfLiteParserImpl::GetOutputTensorIds()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04408">TfLiteParserImpl::GetSubgraphOutputTensorNames()</a>.</p>
<div class="fragment"><div class="line"><a name="l04055"></a><span class="lineno"> 4055</span>&#160;{</div><div class="line"><a name="l04056"></a><span class="lineno"> 4056</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(model, subgraphIndex);</div><div class="line"><a name="l04057"></a><span class="lineno"> 4057</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; subgraphPtr = model-&gt;subgraphs[subgraphIndex];</div><div class="line"><a name="l04058"></a><span class="lineno"> 4058</span>&#160;</div><div class="line"><a name="l04059"></a><span class="lineno"> 4059</span>&#160;    <span class="keywordtype">size_t</span> outputCount = subgraphPtr-&gt;outputs.size();</div><div class="line"><a name="l04060"></a><span class="lineno"> 4060</span>&#160;    <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">TensorIdRawPtrVector</a> result(outputCount);</div><div class="line"><a name="l04061"></a><span class="lineno"> 4061</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; outputCount; ++i)</div><div class="line"><a name="l04062"></a><span class="lineno"> 4062</span>&#160;    {</div><div class="line"><a name="l04063"></a><span class="lineno"> 4063</span>&#160;        uint32_t outputId = <a class="code" href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a>(subgraphPtr-&gt;outputs[i]);</div><div class="line"><a name="l04064"></a><span class="lineno"> 4064</span>&#160;        result[i] = std::make_pair(outputId, subgraphPtr-&gt;tensors[outputId].get());</div><div class="line"><a name="l04065"></a><span class="lineno"> 4065</span>&#160;    }</div><div class="line"><a name="l04066"></a><span class="lineno"> 4066</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04067"></a><span class="lineno"> 4067</span>&#160;}</div><div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00141">TfLiteParser.cpp:141</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a86428e0c674542488c7292dfbe2ce381"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a86428e0c674542488c7292dfbe2ce381">armnnTfLiteParser::TfLiteParserImpl::TensorIdRawPtrVector</a></div><div class="ttdeci">std::vector&lt; TensorIdRawPtr &gt; TensorIdRawPtrVector</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8hpp_source.xhtml#l00037">TfLiteParser.hpp:37</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_aaef93dc9a69f51b59f3cdd0ff0165927"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#aaef93dc9a69f51b59f3cdd0ff0165927">CHECKED_NON_NEGATIVE</a></div><div class="ttdeci">#define CHECKED_NON_NEGATIVE(VALUE)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00035">VerificationHelpers.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a949070abe70fabe18cc1eb29d5853f47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a949070abe70fabe18cc1eb29d5853f47">&#9670;&nbsp;</a></span>GetSubgraphOutputTensorNames()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetSubgraphOutputTensorNames </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>subgraphId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the output tensor names for a given subgraph. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04408">4408</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00141">CHECK_SUBGRAPH</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04053">TfLiteParserImpl::GetSubgraphOutputs()</a>.</p>
<div class="fragment"><div class="line"><a name="l04409"></a><span class="lineno"> 4409</span>&#160;{</div><div class="line"><a name="l04410"></a><span class="lineno"> 4410</span>&#160;    <a class="code" href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a>(m_Model, subgraphId);</div><div class="line"><a name="l04411"></a><span class="lineno"> 4411</span>&#160;    <span class="keyword">auto</span> outputs = <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1bd7b663eb19e2355b6aa5c36232d6fc">GetSubgraphOutputs</a>(m_Model, subgraphId);</div><div class="line"><a name="l04412"></a><span class="lineno"> 4412</span>&#160;    std::vector&lt;std::string&gt; result;</div><div class="line"><a name="l04413"></a><span class="lineno"> 4413</span>&#160;    result.reserve(outputs.size());</div><div class="line"><a name="l04414"></a><span class="lineno"> 4414</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; output : outputs)</div><div class="line"><a name="l04415"></a><span class="lineno"> 4415</span>&#160;    {</div><div class="line"><a name="l04416"></a><span class="lineno"> 4416</span>&#160;        result.push_back(output.second-&gt;name);</div><div class="line"><a name="l04417"></a><span class="lineno"> 4417</span>&#160;    }</div><div class="line"><a name="l04418"></a><span class="lineno"> 4418</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l04419"></a><span class="lineno"> 4419</span>&#160;}</div><div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a1bd7b663eb19e2355b6aa5c36232d6fc"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a1bd7b663eb19e2355b6aa5c36232d6fc">armnnTfLiteParser::TfLiteParserImpl::GetSubgraphOutputs</a></div><div class="ttdeci">static TensorIdRawPtrVector GetSubgraphOutputs(const ModelPtr &amp;model, size_t subgraphIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l04053">TfLiteParser.cpp:4053</a></div></div>
<div class="ttc" id="_tf_lite_parser_8cpp_xhtml_a315ccf3e3cb207b1fbd10a2ad3e6333a"><div class="ttname"><a href="_tf_lite_parser_8cpp.xhtml#a315ccf3e3cb207b1fbd10a2ad3e6333a">CHECK_SUBGRAPH</a></div><div class="ttdeci">#define CHECK_SUBGRAPH(MODEL, SUBGRAPH_INDEX)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00141">TfLiteParser.cpp:141</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa09a8bb02eed50715082d8b7fccd2f8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa09a8bb02eed50715082d8b7fccd2f8d">&#9670;&nbsp;</a></span>GetVersion()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::string GetVersion </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieve version in X.Y.Z form. </p>

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04421">4421</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="include_2armnn_tf_lite_parser_2_version_8hpp_source.xhtml#l00025">TFLITE_PARSER_VERSION</a>.</p>
<div class="fragment"><div class="line"><a name="l04422"></a><span class="lineno"> 4422</span>&#160;{</div><div class="line"><a name="l04423"></a><span class="lineno"> 4423</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="include_2armnn_tf_lite_parser_2_version_8hpp.xhtml#a88c7ccef0cfc85702b48557ec804ef9a">TFLITE_PARSER_VERSION</a>;</div><div class="line"><a name="l04424"></a><span class="lineno"> 4424</span>&#160;}</div><div class="ttc" id="include_2armnn_tf_lite_parser_2_version_8hpp_xhtml_a88c7ccef0cfc85702b48557ec804ef9a"><div class="ttname"><a href="include_2armnn_tf_lite_parser_2_version_8hpp.xhtml#a88c7ccef0cfc85702b48557ec804ef9a">TFLITE_PARSER_VERSION</a></div><div class="ttdeci">#define TFLITE_PARSER_VERSION</div><div class="ttdoc">TFLITE_PARSER_VERSION: &quot;X.Y.Z&quot; where: X = Major version number Y = Minor version number Z = Patch ver...</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_tf_lite_parser_2_version_8hpp_source.xhtml#l00025">Version.hpp:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0da1e3b0281fa84f8b6f5ce3cd15b7c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0da1e3b0281fa84f8b6f5ce3cd15b7c0">&#9670;&nbsp;</a></span>LoadModel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> LoadModel </td>
          <td>(</td>
          <td class="paramtype">std::unique_ptr&lt; tflite::ModelT &gt;&#160;</td>
          <td class="paramname"><em>model</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00768">768</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00241">TensorShape::AreAllDimensionsSpecified()</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00183">CHECK_MODEL</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00344">CHECK_SUPPORTED_FUSED_ACTIVATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00212">CHECK_TENSOR</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00032">CHECK_VALID_SIZE</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04224">TfLiteParserImpl::GetBuffer()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03989">TfLiteParserImpl::GetInputs()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04069">TfLiteParserImpl::GetInputTensorIds()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00429">TensorInfo::GetNumBytes()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00196">TensorInfo::GetNumElements()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04016">TfLiteParserImpl::GetOutputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04079">TfLiteParserImpl::GetOutputTensorIds()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00163">SoftmaxDescriptor::m_Beta</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00545">Convolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00616">Convolution3dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00668">DepthwiseConvolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01433">TransposeConvolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00858">BatchToSpaceNdDescriptor::m_BlockShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01042">SpaceToBatchNdDescriptor::m_BlockShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00860">BatchToSpaceNdDescriptor::m_Crops</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00388">Pooling2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00547">Convolution2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00618">Convolution3dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00670">DepthwiseConvolution2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00784">L2NormalizationDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00862">BatchToSpaceNdDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01047">SpaceToBatchNdDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01435">TransposeConvolution2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00541">Convolution2dDescriptor::m_DilationX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00610">Convolution3dDescriptor::m_DilationX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00664">DepthwiseConvolution2dDescriptor::m_DilationX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00543">Convolution2dDescriptor::m_DilationY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00612">Convolution3dDescriptor::m_DilationY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00666">DepthwiseConvolution2dDescriptor::m_DilationY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00614">Convolution3dDescriptor::m_DilationZ</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01438">TransposeConvolution2dDescriptor::m_OutputShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01437">TransposeConvolution2dDescriptor::m_OutputShapeEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00384">Pooling2dDescriptor::m_OutputShapeRounding</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00602">Convolution3dDescriptor::m_PadBack</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00374">Pooling2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00535">Convolution2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00598">Convolution3dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00658">DepthwiseConvolution2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01427">TransposeConvolution2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00386">Pooling2dDescriptor::m_PaddingMethod</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00600">Convolution3dDescriptor::m_PadFront</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00368">Pooling2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00529">Convolution2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00592">Convolution3dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00652">DepthwiseConvolution2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01421">TransposeConvolution2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01045">SpaceToBatchNdDescriptor::m_PadList</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00370">Pooling2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00531">Convolution2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00594">Convolution3dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00654">DepthwiseConvolution2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01423">TransposeConvolution2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00372">Pooling2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00533">Convolution2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00596">Convolution3dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00656">DepthwiseConvolution2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01425">TransposeConvolution2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00378">Pooling2dDescriptor::m_PoolHeight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00366">Pooling2dDescriptor::m_PoolType</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00376">Pooling2dDescriptor::m_PoolWidth</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00380">Pooling2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00537">Convolution2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00604">Convolution3dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00660">DepthwiseConvolution2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01429">TransposeConvolution2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00382">Pooling2dDescriptor::m_StrideY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00539">Convolution2dDescriptor::m_StrideY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00606">Convolution3dDescriptor::m_StrideY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00662">DepthwiseConvolution2dDescriptor::m_StrideY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01431">TransposeConvolution2dDescriptor::m_StrideY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00608">Convolution3dDescriptor::m_StrideZ</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01015">ReshapeDescriptor::m_TargetShape</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">armnn::NDHWC</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00609">armnnDeserializer::ToTensorInfo()</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00032">Exception::what()</a>.</p>
<div class="fragment"><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;{</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    ResetParser();</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    m_Model = std::move(model);</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <span class="keywordflow">return</span> CreateNetworkFromModel();</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7f3fc56b7306b444f06f45cdc4032bbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f3fc56b7306b444f06f45cdc4032bbf">&#9670;&nbsp;</a></span>LoadModelFromBinary()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">TfLiteParserImpl::ModelPtr</a> LoadModelFromBinary </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>binaryContent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03970">3970</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00760">TfLiteParserImpl::CreateNetworkFromBinary()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03946">TfLiteParserImpl::LoadModelFromFile()</a>.</p>
<div class="fragment"><div class="line"><a name="l03971"></a><span class="lineno"> 3971</span>&#160;{</div><div class="line"><a name="l03972"></a><span class="lineno"> 3972</span>&#160;    <span class="keywordflow">if</span> (binaryContent == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l03973"></a><span class="lineno"> 3973</span>&#160;     {</div><div class="line"><a name="l03974"></a><span class="lineno"> 3974</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Invalid (null) binary content {}&quot;</span>,</div><div class="line"><a name="l03975"></a><span class="lineno"> 3975</span>&#160;                                       <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l03976"></a><span class="lineno"> 3976</span>&#160;     }</div><div class="line"><a name="l03977"></a><span class="lineno"> 3977</span>&#160;    flatbuffers::Verifier verifier(binaryContent, len);</div><div class="line"><a name="l03978"></a><span class="lineno"> 3978</span>&#160;    <span class="keywordflow">if</span> (verifier.VerifyBuffer&lt;tflite::Model&gt;() == <span class="keyword">false</span>)</div><div class="line"><a name="l03979"></a><span class="lineno"> 3979</span>&#160;    {</div><div class="line"><a name="l03980"></a><span class="lineno"> 3980</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l03981"></a><span class="lineno"> 3981</span>&#160;            fmt::format(<span class="stringliteral">&quot;Buffer doesn&#39;t conform to the expected Tensorflow Lite &quot;</span></div><div class="line"><a name="l03982"></a><span class="lineno"> 3982</span>&#160;                        <span class="stringliteral">&quot;flatbuffers format. size:{} {}&quot;</span>,</div><div class="line"><a name="l03983"></a><span class="lineno"> 3983</span>&#160;                        len,</div><div class="line"><a name="l03984"></a><span class="lineno"> 3984</span>&#160;                        <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l03985"></a><span class="lineno"> 3985</span>&#160;    }</div><div class="line"><a name="l03986"></a><span class="lineno"> 3986</span>&#160;    <span class="keywordflow">return</span> tflite::UnPackModel(binaryContent);</div><div class="line"><a name="l03987"></a><span class="lineno"> 3987</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00209">Exceptions.hpp:209</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af9590c2ae8d68b5da999d3d6ab21dd3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9590c2ae8d68b5da999d3d6ab21dd3b">&#9670;&nbsp;</a></span>LoadModelFromFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#abfc86471394295357a23b3addd0b5b1c">TfLiteParserImpl::ModelPtr</a> LoadModelFromFile </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fileName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03946">3946</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03970">TfLiteParserImpl::LoadModelFromBinary()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00753">TfLiteParserImpl::CreateNetworkFromBinaryFile()</a>.</p>
<div class="fragment"><div class="line"><a name="l03947"></a><span class="lineno"> 3947</span>&#160;{</div><div class="line"><a name="l03948"></a><span class="lineno"> 3948</span>&#160;    <span class="keywordflow">if</span> (fileName == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l03949"></a><span class="lineno"> 3949</span>&#160;    {</div><div class="line"><a name="l03950"></a><span class="lineno"> 3950</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Invalid (null) file name {}&quot;</span>,</div><div class="line"><a name="l03951"></a><span class="lineno"> 3951</span>&#160;                                       <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l03952"></a><span class="lineno"> 3952</span>&#160;    }</div><div class="line"><a name="l03953"></a><span class="lineno"> 3953</span>&#160;    std::error_code errorCode;</div><div class="line"><a name="l03954"></a><span class="lineno"> 3954</span>&#160;    fs::path pathToFile(fileName);</div><div class="line"><a name="l03955"></a><span class="lineno"> 3955</span>&#160;    <span class="keywordflow">if</span> (!fs::exists(pathToFile, errorCode))</div><div class="line"><a name="l03956"></a><span class="lineno"> 3956</span>&#160;    {</div><div class="line"><a name="l03957"></a><span class="lineno"> 3957</span>&#160;        <span class="comment">//fmt::format() could not be used here (format error)</span></div><div class="line"><a name="l03958"></a><span class="lineno"> 3958</span>&#160;        std::stringstream msg;</div><div class="line"><a name="l03959"></a><span class="lineno"> 3959</span>&#160;        msg &lt;&lt; <span class="stringliteral">&quot;Cannot find the file (&quot;</span> &lt;&lt; fileName &lt;&lt; <span class="stringliteral">&quot;) errorCode: &quot;</span> &lt;&lt; errorCode</div><div class="line"><a name="l03960"></a><span class="lineno"> 3960</span>&#160;            &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString();</div><div class="line"><a name="l03961"></a><span class="lineno"> 3961</span>&#160;</div><div class="line"><a name="l03962"></a><span class="lineno"> 3962</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_file_not_found_exception.xhtml">FileNotFoundException</a>(msg.str());</div><div class="line"><a name="l03963"></a><span class="lineno"> 3963</span>&#160;    }</div><div class="line"><a name="l03964"></a><span class="lineno"> 3964</span>&#160;    std::ifstream file(fileName, std::ios::binary);</div><div class="line"><a name="l03965"></a><span class="lineno"> 3965</span>&#160;    std::string fileContent((std::istreambuf_iterator&lt;char&gt;(file)), std::istreambuf_iterator&lt;char&gt;());</div><div class="line"><a name="l03966"></a><span class="lineno"> 3966</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7f3fc56b7306b444f06f45cdc4032bbf">LoadModelFromBinary</a>(reinterpret_cast&lt;const uint8_t *&gt;(fileContent.c_str()),</div><div class="line"><a name="l03967"></a><span class="lineno"> 3967</span>&#160;                               fileContent.size());</div><div class="line"><a name="l03968"></a><span class="lineno"> 3968</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_file_not_found_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_file_not_found_exception.xhtml">armnn::FileNotFoundException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00086">Exceptions.hpp:86</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl_xhtml_a7f3fc56b7306b444f06f45cdc4032bbf"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml#a7f3fc56b7306b444f06f45cdc4032bbf">armnnTfLiteParser::TfLiteParserImpl::LoadModelFromBinary</a></div><div class="ttdeci">static ModelPtr LoadModelFromBinary(const uint8_t *binaryContent, size_t len)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l03970">TfLiteParser.cpp:3970</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00209">Exceptions.hpp:209</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aaebfa9a01a0bb8a0935114ff0140cc45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaebfa9a01a0bb8a0935114ff0140cc45">&#9670;&nbsp;</a></span>OutputShapeOfReshape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> OutputShapeOfReshape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int32_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>targetDimsIn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02575">2575</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00042">ARMNN_THROW_PARSE_EXCEPTION</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00183">CHECK_MODEL</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00344">CHECK_SUPPORTED_FUSED_ACTIVATION</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00032">CHECK_VALID_SIZE</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00035">CHECKED_NON_NEGATIVE</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00187">armnnDeserializer::CheckShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04224">TfLiteParserImpl::GetBuffer()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03989">TfLiteParserImpl::GetInputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04069">TfLiteParserImpl::GetInputTensorIds()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#afcc1c3a20bd2860e0ddd21674389246f">IConnectableLayer::GetName()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00429">TensorInfo::GetNumBytes()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00196">TensorInfo::GetNumElements()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">IConnectableLayer::GetNumOutputSlots()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04016">TfLiteParserImpl::GetOutputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04079">TfLiteParserImpl::GetOutputTensorIds()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00480">TensorInfo::GetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00463">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00148">armnnUtils::GetUnsignedAxis()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01225">StackDescriptor::m_Axis</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00491">FullyConnectedDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00495">FullyConnectedDescriptor::m_ConstantWeights</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00709">DetectionPostProcessDescriptor::m_DetectionsPerClass</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01229">StackDescriptor::m_InputShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00707">DetectionPostProcessDescriptor::m_MaxClassesPerDetection</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00705">DetectionPostProcessDescriptor::m_MaxDetections</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00988">ResizeDescriptor::m_Method</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00713">DetectionPostProcessDescriptor::m_NmsIouThreshold</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00711">DetectionPostProcessDescriptor::m_NmsScoreThreshold</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00715">DetectionPostProcessDescriptor::m_NumClasses</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01227">StackDescriptor::m_NumInputs</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00725">DetectionPostProcessDescriptor::m_ScaleH</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00723">DetectionPostProcessDescriptor::m_ScaleW</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00719">DetectionPostProcessDescriptor::m_ScaleX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00721">DetectionPostProcessDescriptor::m_ScaleY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01015">ReshapeDescriptor::m_TargetShape</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00493">FullyConnectedDescriptor::m_TransposeWeightMatrix</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00717">DetectionPostProcessDescriptor::m_UseRegularNms</a>, <a class="el" href="_types_8hpp_source.xhtml#l00018">armnn::MaxNumOfTensorDimensions</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>, <a class="el" href="_parser_helper_8cpp_source.xhtml#l00019">armnnUtils::ProcessConcatInputTensorInfo()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00158">OriginsDescriptor::SetConcatAxis()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00193">TensorInfo::SetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00310">ViewsDescriptor::SetViewOriginCoord()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00315">ViewsDescriptor::SetViewSize()</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00609">armnnDeserializer::ToTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l02577"></a><span class="lineno"> 2577</span>&#160;{</div><div class="line"><a name="l02578"></a><span class="lineno"> 2578</span>&#160;    std::vector&lt;unsigned int&gt; outputDims(targetDimsIn.begin(), targetDimsIn.end());</div><div class="line"><a name="l02579"></a><span class="lineno"> 2579</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> stretchDim = std::find(targetDimsIn.begin(), targetDimsIn.end(), -1);</div><div class="line"><a name="l02580"></a><span class="lineno"> 2580</span>&#160;</div><div class="line"><a name="l02581"></a><span class="lineno"> 2581</span>&#160;    <span class="keywordflow">if</span> (stretchDim != targetDimsIn.end())</div><div class="line"><a name="l02582"></a><span class="lineno"> 2582</span>&#160;    {</div><div class="line"><a name="l02583"></a><span class="lineno"> 2583</span>&#160;        <span class="keywordflow">if</span> (std::find(std::next(stretchDim), targetDimsIn.end(), -1) != targetDimsIn.end())</div><div class="line"><a name="l02584"></a><span class="lineno"> 2584</span>&#160;        {</div><div class="line"><a name="l02585"></a><span class="lineno"> 2585</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(</div><div class="line"><a name="l02586"></a><span class="lineno"> 2586</span>&#160;                fmt::format(<span class="stringliteral">&quot;At most one component of shape can be -1 {}&quot;</span>, <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l02587"></a><span class="lineno"> 2587</span>&#160;        }</div><div class="line"><a name="l02588"></a><span class="lineno"> 2588</span>&#160;</div><div class="line"><a name="l02589"></a><span class="lineno"> 2589</span>&#160;        <span class="keyword">auto</span> targetNumElements =</div><div class="line"><a name="l02590"></a><span class="lineno"> 2590</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(</div><div class="line"><a name="l02591"></a><span class="lineno"> 2591</span>&#160;                std::accumulate(targetDimsIn.begin(), targetDimsIn.end(), -1, std::multiplies&lt;int32_t&gt;()));</div><div class="line"><a name="l02592"></a><span class="lineno"> 2592</span>&#160;</div><div class="line"><a name="l02593"></a><span class="lineno"> 2593</span>&#160;        <span class="keyword">auto</span> stretchIndex = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(std::distance(targetDimsIn.begin(), stretchDim));</div><div class="line"><a name="l02594"></a><span class="lineno"> 2594</span>&#160;        outputDims[stretchIndex] = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>() / targetNumElements;</div><div class="line"><a name="l02595"></a><span class="lineno"> 2595</span>&#160;    }</div><div class="line"><a name="l02596"></a><span class="lineno"> 2596</span>&#160;</div><div class="line"><a name="l02597"></a><span class="lineno"> 2597</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(static_cast&lt;unsigned int&gt;(outputDims.size()), outputDims.data());</div><div class="line"><a name="l02598"></a><span class="lineno"> 2598</span>&#160;</div><div class="line"><a name="l02599"></a><span class="lineno"> 2599</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> reshapeInfo = inputTensorInfo;</div><div class="line"><a name="l02600"></a><span class="lineno"> 2600</span>&#160;    reshapeInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(outputShape);</div><div class="line"><a name="l02601"></a><span class="lineno"> 2601</span>&#160;</div><div class="line"><a name="l02602"></a><span class="lineno"> 2602</span>&#160;    <span class="keywordflow">return</span> reshapeInfo;</div><div class="line"><a name="l02603"></a><span class="lineno"> 2603</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00193">Tensor.hpp:193</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00209">Exceptions.hpp:209</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00196">Tensor.hpp:196</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7d28f3a07c7ab30f66e7c70ded86eb49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d28f3a07c7ab30f66e7c70ded86eb49">&#9670;&nbsp;</a></span>OutputShapeOfSqueeze()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> OutputShapeOfSqueeze </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; uint32_t &gt;&#160;</td>
          <td class="paramname"><em>squeezeDims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l01861">1861</a> of file <a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00042">ARMNN_THROW_PARSE_EXCEPTION</a>, <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00183">CHECK_MODEL</a>, <a class="el" href="_verification_helpers_8hpp_source.xhtml#l00032">CHECK_VALID_SIZE</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">IOutputSlot::Connect()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04224">TfLiteParserImpl::GetBuffer()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l03989">TfLiteParserImpl::GetInputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04069">TfLiteParserImpl::GetInputTensorIds()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00429">TensorInfo::GetNumBytes()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00196">TensorInfo::GetNumElements()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04016">TfLiteParserImpl::GetOutputs()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l04079">TfLiteParserImpl::GetOutputTensorIds()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00061">ActivationDescriptor::m_A</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01142">MeanDescriptor::m_Axis</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00063">ActivationDescriptor::m_B</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01294">StridedSliceDescriptor::m_Begin</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01302">StridedSliceDescriptor::m_BeginMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01315">StridedSliceDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01309">StridedSliceDescriptor::m_EllipsisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01296">StridedSliceDescriptor::m_End</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01305">StridedSliceDescriptor::m_EndMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00059">ActivationDescriptor::m_Function</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01144">MeanDescriptor::m_KeepDims</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01312">StridedSliceDescriptor::m_NewAxisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01176">PadDescriptor::m_PaddingMode</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01170">PadDescriptor::m_PadList</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01173">PadDescriptor::m_PadValue</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01307">StridedSliceDescriptor::m_ShrinkAxisMask</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01298">StridedSliceDescriptor::m_Stride</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01015">ReshapeDescriptor::m_TargetShape</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00193">TensorInfo::SetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">IOutputSlot::SetTensorInfo()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ae1b3c9c6087a93b07c83e0b04f377a8d">armnn::Signed64</a>, and <a class="el" href="_deserializer_8cpp_source.xhtml#l00609">armnnDeserializer::ToTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;{</div><div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;    <a class="code" href="_verification_helpers_8hpp.xhtml#a479b2821a7a2cbb8fa8eb7f60a47065d">CHECK_VALID_SIZE</a>(squeezeDims.size(), 0, 1, 2, 3, 4);</div><div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> uint32_t dimensionSequence[] = { 0, 1, 2, 3 };</div><div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;</div><div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;    <span class="keywordflow">if</span> (inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &gt; 4)</div><div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;    {</div><div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;        std::stringstream ss;</div><div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;Input tensor has unexpected number of dimensions:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()</div><div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;           &lt;&lt; <span class="stringliteral">&quot; shape:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>() &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;           &lt;&lt; <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString();</div><div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(ss.str());</div><div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;    }</div><div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;</div><div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;    <span class="keywordflow">if</span> (squeezeDims.empty())</div><div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;    {</div><div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;        squeezeDims.assign(dimensionSequence,</div><div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;                           dimensionSequence+inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>());</div><div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;    }</div><div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;</div><div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;    std::vector&lt;uint32_t&gt; outputDims;</div><div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); i++)</div><div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;    {</div><div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;        <span class="keywordtype">bool</span> skipSqueeze = (std::find(squeezeDims.begin(), squeezeDims.end(), i) == squeezeDims.end());</div><div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;        <span class="keyword">auto</span> currentDimension = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i];</div><div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;        <span class="keywordflow">if</span> (skipSqueeze || currentDimension != 1)</div><div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;        {</div><div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;            outputDims.push_back(currentDimension);</div><div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;        }</div><div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;    }</div><div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;</div><div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;    <span class="keywordflow">if</span> (outputDims.size() &gt; 4)</div><div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;    {</div><div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;        std::stringstream ss;</div><div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;Output tensor has unexpected number of dimensions:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()</div><div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;           &lt;&lt; <span class="stringliteral">&quot; shape:&quot;</span> &lt;&lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>() &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div><div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;           &lt;&lt; <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString();</div><div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(ss.str());</div><div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;    }</div><div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;</div><div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(static_cast&lt;unsigned int&gt;(outputDims.size()),</div><div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;                                       outputDims.data());</div><div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;</div><div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;    <span class="comment">// we need to preserve the tensor type and the quantization data as well</span></div><div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outTensorInfo = inputTensorInfo;</div><div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;    outTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(outShape);</div><div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;</div><div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;    <span class="keywordflow">return</span> outTensorInfo;</div><div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00193">Tensor.hpp:193</a></div></div>
<div class="ttc" id="_verification_helpers_8hpp_xhtml_a479b2821a7a2cbb8fa8eb7f60a47065d"><div class="ttname"><a href="_verification_helpers_8hpp.xhtml#a479b2821a7a2cbb8fa8eb7f60a47065d">CHECK_VALID_SIZE</a></div><div class="ttdeci">#define CHECK_VALID_SIZE(ACTUAL,...)</div><div class="ttdef"><b>Definition:</b> <a href="_verification_helpers_8hpp_source.xhtml#l00032">VerificationHelpers.hpp:32</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00209">Exceptions.hpp:209</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnnTfLiteParser/<a class="el" href="_tf_lite_parser_8hpp_source.xhtml">TfLiteParser.hpp</a></li>
<li>src/armnnTfLiteParser/<a class="el" href="_tf_lite_parser_8cpp_source.xhtml">TfLiteParser.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn_tf_lite_parser.xhtml">armnnTfLiteParser</a></li><li class="navelem"><a class="el" href="classarmnn_tf_lite_parser_1_1_tf_lite_parser_impl.xhtml">TfLiteParserImpl</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:56 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
