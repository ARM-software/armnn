<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/TfLiteYoloV3Big-Armnn/TfLiteYoloV3Big-Armnn.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">TfLiteYoloV3Big-Armnn.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_i_tf_lite_parser_8hpp_source.xhtml">armnnTfLiteParser/ITfLiteParser.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_n_m_s_8hpp_source.xhtml">NMS.hpp</a>&quot;</code><br />
<code>#include &lt;stb/stb_image.h&gt;</code><br />
<code>#include &lt;<a class="el" href="_i_network_8hpp_source.xhtml">armnn/INetwork.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_i_runtime_8hpp_source.xhtml">armnn/IRuntime.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_logging_8hpp_source.xhtml">armnn/Logging.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_ignore_unused_8hpp_source.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</code><br />
<code>#include &lt;cxxopts/cxxopts.hpp&gt;</code><br />
<code>#include &lt;ghc/filesystem.hpp&gt;</code><br />
<code>#include &lt;chrono&gt;</code><br />
<code>#include &lt;fstream&gt;</code><br />
<code>#include &lt;iostream&gt;</code><br />
<code>#include &lt;cmath&gt;</code><br />
</div>
<p><a href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:a7013f680e1a8d40e50dc330d57d0ec9a"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7013f680e1a8d40e50dc330d57d0ec9a">CHECK_OK</a>(v)</td></tr>
<tr class="separator:a7013f680e1a8d40e50dc330d57d0ec9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76fd844e3661f9b37921804c97b0f973"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a76fd844e3661f9b37921804c97b0f973">S_BOOL</a>(name)&#160;&#160;&#160;enum class name {False=0, True=1};</td></tr>
<tr class="separator:a76fd844e3661f9b37921804c97b0f973"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:aa96d209a3a37e0f6792f0f46ee2121e7"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa96d209a3a37e0f6792f0f46ee2121e7">ImportMemory</a> { <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa96d209a3a37e0f6792f0f46ee2121e7af8320b26d30ab433c5a54546d21f414c">False</a> =0, 
<a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa96d209a3a37e0f6792f0f46ee2121e7af827cf462f62848df37c5e1e94a4da74">True</a> =1
 }</td></tr>
<tr class="separator:aa96d209a3a37e0f6792f0f46ee2121e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7454bbb669508e9e0dbdbed5f7456064"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7454bbb669508e9e0dbdbed5f7456064">DumpToDot</a> { <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7454bbb669508e9e0dbdbed5f7456064af8320b26d30ab433c5a54546d21f414c">False</a> =0, 
<a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7454bbb669508e9e0dbdbed5f7456064af827cf462f62848df37c5e1e94a4da74">True</a> =1
 }</td></tr>
<tr class="separator:a7454bbb669508e9e0dbdbed5f7456064"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a000e710b0b27fa81885054ad3c5faf09"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a000e710b0b27fa81885054ad3c5faf09">ExpectFile</a> { <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a000e710b0b27fa81885054ad3c5faf09af8320b26d30ab433c5a54546d21f414c">False</a> =0, 
<a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a000e710b0b27fa81885054ad3c5faf09af827cf462f62848df37c5e1e94a4da74">True</a> =1
 }</td></tr>
<tr class="separator:a000e710b0b27fa81885054ad3c5faf09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19dca0ed469c67271d60fe635806e75f"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a19dca0ed469c67271d60fe635806e75f">OptionalArg</a> { <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a19dca0ed469c67271d60fe635806e75faf8320b26d30ab433c5a54546d21f414c">False</a> =0, 
<a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a19dca0ed469c67271d60fe635806e75faf827cf462f62848df37c5e1e94a4da74">True</a> =1
 }</td></tr>
<tr class="separator:a19dca0ed469c67271d60fe635806e75f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aa5b4bf99dead35f1ed10ec2da962b5f8"><td class="memTemplParams" colspan="2">template&lt;typename TContainer &gt; </td></tr>
<tr class="memitem:aa5b4bf99dead35f1ed10ec2da962b5f8"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa5b4bf99dead35f1ed10ec2da962b5f8">MakeInputTensors</a> (const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &gt; &amp;inputBindings, const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer</a> &gt;&gt; &amp;inputDataContainers)</td></tr>
<tr class="separator:aa5b4bf99dead35f1ed10ec2da962b5f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47e2cf3b998bc6a55711799ac97d6eee"><td class="memTemplParams" colspan="2">template&lt;typename TContainer &gt; </td></tr>
<tr class="memitem:a47e2cf3b998bc6a55711799ac97d6eee"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a47e2cf3b998bc6a55711799ac97d6eee">MakeOutputTensors</a> (const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &gt; &amp;outputBindings, const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer</a> &gt;&gt; &amp;outputDataContainers)</td></tr>
<tr class="separator:a47e2cf3b998bc6a55711799ac97d6eee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a0e9bc46f97b1bf6ee6b1e8cd655e73"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7a0e9bc46f97b1bf6ee6b1e8cd655e73">LoadModel</a> (const char *filename, <a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml">ITfLiteParser</a> &amp;parser, <a class="el" href="classarmnn_1_1_i_runtime.xhtml">IRuntime</a> &amp;runtime, <a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> &amp;networkId, const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &gt; &amp;backendPreferences, <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa96d209a3a37e0f6792f0f46ee2121e7">ImportMemory</a> enableImport, <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7454bbb669508e9e0dbdbed5f7456064">DumpToDot</a> dumpToDot)</td></tr>
<tr class="separator:a7a0e9bc46f97b1bf6ee6b1e8cd655e73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3354c1d773cc613c36ef27209fac8a4d"><td class="memItemLeft" align="right" valign="top">std::vector&lt; float &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a3354c1d773cc613c36ef27209fac8a4d">LoadImage</a> (const char *filename)</td></tr>
<tr class="separator:a3354c1d773cc613c36ef27209fac8a4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a333d6299f43cb5c08079b9004cf0c6c5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a333d6299f43cb5c08079b9004cf0c6c5">ValidateFilePath</a> (std::string &amp;file, <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a000e710b0b27fa81885054ad3c5faf09">ExpectFile</a> expectFile)</td></tr>
<tr class="separator:a333d6299f43cb5c08079b9004cf0c6c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acde339995fb755d7ac7341ffa28f32b4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#acde339995fb755d7ac7341ffa28f32b4">CheckAccuracy</a> (std::vector&lt; float &gt; *toDetector0, std::vector&lt; float &gt; *toDetector1, std::vector&lt; float &gt; *toDetector2, std::vector&lt; float &gt; *detectorOutput, const std::vector&lt; <a class="el" href="structyolov3_1_1_detection.xhtml">yolov3::Detection</a> &gt; &amp;nmsOut, const std::vector&lt; std::string &gt; &amp;filePaths)</td></tr>
<tr class="separator:acde339995fb755d7ac7341ffa28f32b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ddf1224851353fc92bfbff6f499fa97"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
<tr class="separator:a0ddf1224851353fc92bfbff6f499fa97"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="a7013f680e1a8d40e50dc330d57d0ec9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7013f680e1a8d40e50dc330d57d0ec9a">&#9670;&nbsp;</a></span>CHECK_OK</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define CHECK_OK</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">v</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordflow">do</span> {                                                \</div><div class="line">        try {                                           \</div><div class="line">            auto r_local = v;                           \</div><div class="line">            if (r_local != 0) { <span class="keywordflow">return</span> r_local;}        \</div><div class="line">        }                                               \</div><div class="line">        catch (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>&amp; e)               \</div><div class="line">        {                                               \</div><div class="line">            ARMNN_LOG(error) &lt;&lt; <span class="stringliteral">&quot;Oops: &quot;</span> &lt;&lt; e.what();   \</div><div class="line">            return GENERAL_ERROR;                       \</div><div class="line">        }                                               \</div><div class="line">    } <span class="keywordflow">while</span>(0)</div><div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
</div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml">TfLiteYoloV3Big-Armnn.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00484">main()</a>.</p>

</div>
</div>
<a id="a76fd844e3661f9b37921804c97b0f973"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76fd844e3661f9b37921804c97b0f973">&#9670;&nbsp;</a></span>S_BOOL</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define S_BOOL</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">name</td><td>)</td>
          <td>&#160;&#160;&#160;enum class name {False=0, True=1};</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00100">100</a> of file <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml">TfLiteYoloV3Big-Armnn.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a7454bbb669508e9e0dbdbed5f7456064"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7454bbb669508e9e0dbdbed5f7456064">&#9670;&nbsp;</a></span>DumpToDot</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7454bbb669508e9e0dbdbed5f7456064">DumpToDot</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a7454bbb669508e9e0dbdbed5f7456064af8320b26d30ab433c5a54546d21f414c"></a>False&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a7454bbb669508e9e0dbdbed5f7456064af827cf462f62848df37c5e1e94a4da74"></a>True&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00103">103</a> of file <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml">TfLiteYoloV3Big-Armnn.cpp</a>.</p>

</div>
</div>
<a id="a000e710b0b27fa81885054ad3c5faf09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a000e710b0b27fa81885054ad3c5faf09">&#9670;&nbsp;</a></span>ExpectFile</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a000e710b0b27fa81885054ad3c5faf09">ExpectFile</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a000e710b0b27fa81885054ad3c5faf09af8320b26d30ab433c5a54546d21f414c"></a>False&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a000e710b0b27fa81885054ad3c5faf09af827cf462f62848df37c5e1e94a4da74"></a>True&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00104">104</a> of file <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml">TfLiteYoloV3Big-Armnn.cpp</a>.</p>

</div>
</div>
<a id="aa96d209a3a37e0f6792f0f46ee2121e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa96d209a3a37e0f6792f0f46ee2121e7">&#9670;&nbsp;</a></span>ImportMemory</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa96d209a3a37e0f6792f0f46ee2121e7">ImportMemory</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="aa96d209a3a37e0f6792f0f46ee2121e7af8320b26d30ab433c5a54546d21f414c"></a>False&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa96d209a3a37e0f6792f0f46ee2121e7af827cf462f62848df37c5e1e94a4da74"></a>True&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00102">102</a> of file <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml">TfLiteYoloV3Big-Armnn.cpp</a>.</p>

</div>
</div>
<a id="a19dca0ed469c67271d60fe635806e75f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19dca0ed469c67271d60fe635806e75f">&#9670;&nbsp;</a></span>OptionalArg</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a19dca0ed469c67271d60fe635806e75f">OptionalArg</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a19dca0ed469c67271d60fe635806e75faf8320b26d30ab433c5a54546d21f414c"></a>False&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a19dca0ed469c67271d60fe635806e75faf827cf462f62848df37c5e1e94a4da74"></a>True&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00105">105</a> of file <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml">TfLiteYoloV3Big-Armnn.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="acde339995fb755d7ac7341ffa28f32b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acde339995fb755d7ac7341ffa28f32b4">&#9670;&nbsp;</a></span>CheckAccuracy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CheckAccuracy </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; float &gt; *&#160;</td>
          <td class="paramname"><em>toDetector0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; float &gt; *&#160;</td>
          <td class="paramname"><em>toDetector1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; float &gt; *&#160;</td>
          <td class="paramname"><em>toDetector2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; float &gt; *&#160;</td>
          <td class="paramname"><em>detectorOutput</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="structyolov3_1_1_detection.xhtml">yolov3::Detection</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>nmsOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>filePaths</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00226">226</a> of file <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml">TfLiteYoloV3Big-Armnn.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="_n_m_s_8cpp_source.xhtml#l00084">yolov3::compare_detection()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>, <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a19dca0ed469c67271d60fe635806e75faf8320b26d30ab433c5a54546d21f414c">False</a>, <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00078">GetBackendIDs()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a000e710b0b27fa81885054ad3c5faf09af827cf462f62848df37c5e1e94a4da74">True</a>, and <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00211">ValidateFilePath()</a>.</p>
<div class="fragment"><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;{</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    std::ifstream pathStream;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    std::vector&lt;float&gt; expected;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    std::vector&lt;std::vector&lt;float&gt;*&gt; outputs;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordtype">float</span> compare = 0;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> count = 0;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="comment">//Push back output vectors from inference for use in loop</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    outputs.push_back(toDetector0);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    outputs.push_back(toDetector1);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    outputs.push_back(toDetector2);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    outputs.push_back(detectorOutput);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputs.size(); ++i)</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="comment">// Reading expected output files and assigning them to @expected. Close and Clear to reuse stream and clean RAM</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        pathStream.open(filePaths[i]);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">if</span> (!pathStream.is_open())</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;Expected output file can not be opened: &quot;</span> &lt;&lt; filePaths[i];</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        expected.assign(std::istream_iterator&lt;float&gt;(pathStream), {});</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        pathStream.close();</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        pathStream.clear();</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="comment">// Ensure each vector is the same length</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordflow">if</span> (expected.size() != outputs[i]-&gt;size())</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;Expected output size does not match actual output size: &quot;</span> &lt;&lt; filePaths[i];</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        }</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            count = 0;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            <span class="comment">// Compare abs(difference) with tolerance to check for value by value equality</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; outputs[i]-&gt;size(); ++j)</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                compare = std::abs(expected[j] - outputs[i]-&gt;at(j));</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                <span class="keywordflow">if</span> (compare &gt; 0.001f)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                {</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                    count++;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="keywordflow">if</span> (count &gt; 0)</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; count &lt;&lt; <span class="stringliteral">&quot; output(s) do not match expected values in: &quot;</span> &lt;&lt; filePaths[i];</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            }</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    pathStream.open(filePaths[4]);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">if</span> (!pathStream.is_open())</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    {</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;Expected output file can not be opened: &quot;</span> &lt;&lt; filePaths[4];</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    }</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        expected.assign(std::istream_iterator&lt;float&gt;(pathStream), {});</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        pathStream.close();</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        pathStream.clear();</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y = 0;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numOfMember = 6;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        std::vector&lt;float&gt; intermediate;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; detection: nmsOut)</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x = y * numOfMember; x &lt; ((y * numOfMember) + numOfMember); ++x)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                intermediate.push_back(expected[x]);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="namespaceyolov3.xhtml#a81be14d2d01feb34d4d9a84f52121ea6">yolov3::compare_detection</a>(detection, intermediate))</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            {</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;Expected NMS output does not match: Detection &quot;</span> &lt;&lt; y + 1;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            intermediate.clear();</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            y++;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    }</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div><div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="namespaceyolov3_xhtml_a81be14d2d01feb34d4d9a84f52121ea6"><div class="ttname"><a href="namespaceyolov3.xhtml#a81be14d2d01feb34d4d9a84f52121ea6">yolov3::compare_detection</a></div><div class="ttdeci">bool compare_detection(const yolov3::Detection &amp;detection, const std::vector&lt; float &gt; &amp;expected)</div><div class="ttdoc">Compare a detection object with a vector of float values. </div><div class="ttdef"><b>Definition:</b> <a href="_n_m_s_8cpp_source.xhtml#l00084">NMS.cpp:84</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3354c1d773cc613c36ef27209fac8a4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3354c1d773cc613c36ef27209fac8a4d">&#9670;&nbsp;</a></span>LoadImage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;float&gt; LoadImage </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00165">165</a> of file <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml">TfLiteYoloV3Big-Armnn.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00484">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;{</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">if</span> (strlen(filename) == 0)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">return</span> std::vector&lt;float&gt;(1920*10180*3, 0.0f);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">struct </span>Memory</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        ~Memory() {stbi_image_free(m_Data);}</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordtype">bool</span> IsLoaded()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Data != <span class="keyword">nullptr</span>;}</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* m_Data;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    };</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    std::vector&lt;float&gt; image;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordtype">int</span> width;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordtype">int</span> height;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordtype">int</span> channels;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    Memory mem = {stbi_load(filename, &amp;width, &amp;height, &amp;channels, 3)};</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">if</span> (!mem.IsLoaded())</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;Could not load input image file: &quot;</span> &lt;&lt; filename;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">return</span> image;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">if</span> (width != 1920 || height != 1080 || channels != 3)</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;Input image has wong dimension: &quot;</span> &lt;&lt; width &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; height &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; channels &lt;&lt; <span class="stringliteral">&quot;. &quot;</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;          <span class="stringliteral">&quot; Expected 1920x1080x3.&quot;</span>;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">return</span> image;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    image.resize(1920*1080*3);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="comment">// Expand to float. Does this need de-gamma?</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx=0; idx &lt;= 1920*1080*3; idx++)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        image[idx] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(mem.m_Data[idx]) /255.0f;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> image;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div><div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7a0e9bc46f97b1bf6ee6b1e8cd655e73"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a0e9bc46f97b1bf6ee6b1e8cd655e73">&#9670;&nbsp;</a></span>LoadModel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int LoadModel </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml">ITfLiteParser</a> &amp;&#160;</td>
          <td class="paramname"><em>parser</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_runtime.xhtml">IRuntime</a> &amp;&#160;</td>
          <td class="paramname"><em>runtime</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> &amp;&#160;</td>
          <td class="paramname"><em>networkId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>backendPreferences</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa96d209a3a37e0f6792f0f46ee2121e7">ImportMemory</a>&#160;</td>
          <td class="paramname"><em>enableImport</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7454bbb669508e9e0dbdbed5f7456064">DumpToDot</a>&#160;</td>
          <td class="paramname"><em>dumpToDot</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00107">107</a> of file <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml">TfLiteYoloV3Big-Armnn.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00484">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    std::ifstream stream(filename, std::ios::in | std::ios::binary);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">if</span> (!stream.is_open())</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;Could not open model: &quot;</span> &lt;&lt; filename;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">return</span> OPEN_FILE_ERROR;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    std::vector&lt;uint8_t&gt; contents((std::istreambuf_iterator&lt;char&gt;(stream)), std::istreambuf_iterator&lt;char&gt;());</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    stream.close();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">auto</span> model = parser.<a class="code" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml#aaa88c7afbe8e8f777d05f99a2a540a99">CreateNetworkFromBinary</a>(contents);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    contents.clear();</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(debug) &lt;&lt; <span class="stringliteral">&quot;Model loaded ok: &quot;</span> &lt;&lt; filename;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="comment">// Optimize backbone model</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="structarmnn_1_1_optimizer_options.xhtml">OptimizerOptions</a> options;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a05c1bba6ba3ecc1339d4c4c10c0d8890">m_ImportEnabled</a> = enableImport != <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa96d209a3a37e0f6792f0f46ee2121e7af8320b26d30ab433c5a54546d21f414c">ImportMemory::False</a>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">auto</span> optimizedModel = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*model, backendPreferences, runtime.<a class="code" href="classarmnn_1_1_i_runtime.xhtml#a25db7b8e6fc90f8418439ccd33aaf184">GetDeviceSpec</a>(), options);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">if</span> (!optimizedModel)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Could not optimize the model:&quot;</span> &lt;&lt; filename;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">return</span> OPTIMIZE_NETWORK_ERROR;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">if</span> (dumpToDot != <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7454bbb669508e9e0dbdbed5f7456064af8320b26d30ab433c5a54546d21f414c">DumpToDot::False</a>)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        std::stringstream ss;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        ss &lt;&lt; filename &lt;&lt; <span class="stringliteral">&quot;.dot&quot;</span>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        std::ofstream dotStream(ss.str().c_str(), std::ofstream::out);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        optimizedModel-&gt;SerializeToDot(dotStream);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        dotStream.close();</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="comment">// Load model into runtime</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        std::string errorMessage;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">armnn::MemorySource</a> memSource = options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a05c1bba6ba3ecc1339d4c4c10c0d8890">m_ImportEnabled</a> ? <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::MemorySource::Malloc</a></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                                                : <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::MemorySource::Undefined</a>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <a class="code" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> modelProps(<span class="keyword">false</span>, memSource, memSource);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> status = runtime.<a class="code" href="classarmnn_1_1_i_runtime.xhtml#af92b5ae61208a778571bcea7e6aac7b4">LoadNetwork</a>(networkId, std::move(optimizedModel), errorMessage, modelProps);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">if</span> (status != Status::Success)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Could not load &quot;</span> &lt;&lt; filename &lt;&lt; <span class="stringliteral">&quot; model into runtime: &quot;</span> &lt;&lt; errorMessage;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keywordflow">return</span> LOAD_NETWORK_ERROR;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div><div class="ttc" id="_tf_lite_yolo_v3_big-_armnn_8cpp_xhtml_aa96d209a3a37e0f6792f0f46ee2121e7af8320b26d30ab433c5a54546d21f414c"><div class="ttname"><a href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa96d209a3a37e0f6792f0f46ee2121e7af8320b26d30ab433c5a54546d21f414c">ImportMemory::False</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00035">IRuntime.hpp:35</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01864">Network.cpp:1864</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00042">Types.hpp:42</a></div></div>
<div class="ttc" id="_tf_lite_yolo_v3_big-_armnn_8cpp_xhtml_a7454bbb669508e9e0dbdbed5f7456064af8320b26d30ab433c5a54546d21f414c"><div class="ttname"><a href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7454bbb669508e9e0dbdbed5f7456064af8320b26d30ab433c5a54546d21f414c">DumpToDot::False</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_af92b5ae61208a778571bcea7e6aac7b4"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#af92b5ae61208a778571bcea7e6aac7b4">armnn::IRuntime::LoadNetwork</a></div><div class="ttdeci">Status LoadNetwork(NetworkId &amp;networkIdOut, IOptimizedNetworkPtr network)</div><div class="ttdoc">Loads a complete network into the IRuntime. </div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00059">Runtime.cpp:59</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::MemorySource::Malloc</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a></div><div class="ttdoc">ArmNN performs an optimization on each model/network before it gets loaded for execution. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00127">INetwork.hpp:127</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser_xhtml_aaa88c7afbe8e8f777d05f99a2a540a99"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml#aaa88c7afbe8e8f777d05f99a2a540a99">armnnTfLiteParser::ITfLiteParser::CreateNetworkFromBinary</a></div><div class="ttdeci">armnn::INetworkPtr CreateNetworkFromBinary(const std::vector&lt; uint8_t &gt; &amp;binaryContent)</div><div class="ttdoc">Create the network from a flatbuffers binary. </div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_parser_8cpp_source.xhtml#l00078">TfLiteParser.cpp:78</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a05c1bba6ba3ecc1339d4c4c10c0d8890"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a05c1bba6ba3ecc1339d4c4c10c0d8890">armnn::OptimizerOptions::m_ImportEnabled</a></div><div class="ttdeci">bool m_ImportEnabled</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00224">INetwork.hpp:224</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_a25db7b8e6fc90f8418439ccd33aaf184"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#a25db7b8e6fc90f8418439ccd33aaf184">armnn::IRuntime::GetDeviceSpec</a></div><div class="ttdeci">const IDeviceSpec &amp; GetDeviceSpec() const</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00138">Runtime.cpp:138</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">armnn::MemorySource</a></div><div class="ttdeci">MemorySource</div><div class="ttdoc">Define the Memory Source to reduce copies. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00230">Types.hpp:230</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0ddf1224851353fc92bfbff6f499fa97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ddf1224851353fc92bfbff6f499fa97">&#9670;&nbsp;</a></span>main()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int main </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00484">484</a> of file <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml">TfLiteYoloV3Big-Armnn.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00034">CHECK_OK</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00063">ITfLiteParser::Create()</a>, <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa96d209a3a37e0f6792f0f46ee2121e7af8320b26d30ab433c5a54546d21f414c">False</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407adf6402fd9ecc60f5a2159fdf45711cd4">armnn::fatal</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00165">LoadImage()</a>, <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00107">LoadModel()</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00098">IRuntime::CreationOptions::m_DynamicBackendsPath</a>, <a class="el" href="_logging_8cpp_source.xhtml#l00191">armnn::SetAllLoggingSinks()</a>, <a class="el" href="_logging_8cpp_source.xhtml#l00073">armnn::SetLogFilter()</a>, and <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa96d209a3a37e0f6792f0f46ee2121e7af827cf462f62848df37c5e1e94a4da74">True</a>.</p>
<div class="fragment"><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;{</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="comment">// Configure logging</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a7f8325a4bc02f2f687ba1968b595ec0a">SetAllLoggingSinks</a>(<span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ac9aad76a34137b6359a867b282ea7cfb">SetLogFilter</a>(LogSeverity::Trace);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="comment">// Check and get given program arguments</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    ParseArgs progArgs = ParseArgs(argc, argv);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="comment">// Create runtime</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> runtimeOptions; <span class="comment">// default</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="keywordflow">if</span> (!progArgs.dynamicBackendPath.empty())</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    {</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Loading backends from&quot;</span> &lt;&lt; progArgs.dynamicBackendPath &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        runtimeOptions.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a> = progArgs.dynamicBackendPath;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    }</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="keyword">auto</span> runtime = IRuntime::Create(runtimeOptions);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keywordflow">if</span> (!runtime)</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    {</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Could not create runtime.&quot;</span>;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    }</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="comment">// Create TfLite Parsers</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <a class="code" href="structarmnn_tf_lite_parser_1_1_i_tf_lite_parser_1_1_tf_lite_parser_options.xhtml">ITfLiteParser::TfLiteParserOptions</a> parserOptions;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keyword">auto</span> parser = ITfLiteParser::Create(parserOptions);</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="comment">// Load backbone model</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Loading backbone...&quot;</span>;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> backboneId;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="keyword">const</span> <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7454bbb669508e9e0dbdbed5f7456064">DumpToDot</a> dumpToDot = progArgs.dumpToDot;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7013f680e1a8d40e50dc330d57d0ec9a">CHECK_OK</a>(<a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7a0e9bc46f97b1bf6ee6b1e8cd655e73">LoadModel</a>(progArgs.backboneDir.c_str(),</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                       *parser,</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                       *runtime,</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                       backboneId,</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                       progArgs.prefBackendsBackbone,</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                       <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa96d209a3a37e0f6792f0f46ee2121e7af8320b26d30ab433c5a54546d21f414c">ImportMemory::False</a>,</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                       dumpToDot));</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keyword">auto</span> inputId = parser-&gt;GetNetworkInputBindingInfo(0, <span class="stringliteral">&quot;inputs&quot;</span>);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keyword">auto</span> bbOut0Id = parser-&gt;GetNetworkOutputBindingInfo(0, <span class="stringliteral">&quot;input_to_detector_1&quot;</span>);</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keyword">auto</span> bbOut1Id = parser-&gt;GetNetworkOutputBindingInfo(0, <span class="stringliteral">&quot;input_to_detector_2&quot;</span>);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keyword">auto</span> bbOut2Id = parser-&gt;GetNetworkOutputBindingInfo(0, <span class="stringliteral">&quot;input_to_detector_3&quot;</span>);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keyword">auto</span> backboneProfile = runtime-&gt;GetProfiler(backboneId);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    backboneProfile-&gt;EnableProfiling(<span class="keyword">true</span>);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="comment">// Load detector model</span></div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Loading detector...&quot;</span>;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> detectorId;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7013f680e1a8d40e50dc330d57d0ec9a">CHECK_OK</a>(<a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7a0e9bc46f97b1bf6ee6b1e8cd655e73">LoadModel</a>(progArgs.detectorDir.c_str(),</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                       *parser,</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                       *runtime,</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                       detectorId,</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                       progArgs.prefBackendsDetector,</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                       <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa96d209a3a37e0f6792f0f46ee2121e7af827cf462f62848df37c5e1e94a4da74">ImportMemory::True</a>,</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                       dumpToDot));</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keyword">auto</span> detectIn0Id = parser-&gt;GetNetworkInputBindingInfo(0, <span class="stringliteral">&quot;input_to_detector_1&quot;</span>);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="keyword">auto</span> detectIn1Id = parser-&gt;GetNetworkInputBindingInfo(0, <span class="stringliteral">&quot;input_to_detector_2&quot;</span>);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="keyword">auto</span> detectIn2Id = parser-&gt;GetNetworkInputBindingInfo(0, <span class="stringliteral">&quot;input_to_detector_3&quot;</span>);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="keyword">auto</span> outputBoxesId = parser-&gt;GetNetworkOutputBindingInfo(0, <span class="stringliteral">&quot;output_boxes&quot;</span>);</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keyword">auto</span> detectorProfile = runtime-&gt;GetProfiler(detectorId);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <span class="comment">// Load input from file</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Loading test image...&quot;</span>;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keyword">auto</span> image = <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a3354c1d773cc613c36ef27209fac8a4d">LoadImage</a>(progArgs.imageDir.c_str());</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keywordflow">if</span> (image.empty())</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    {</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keywordflow">return</span> LOAD_IMAGE_ERROR;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    }</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="comment">// Allocate the intermediate tensors</span></div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    std::vector&lt;float&gt; intermediateMem0(bbOut0Id.second.GetNumElements());</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    std::vector&lt;float&gt; intermediateMem1(bbOut1Id.second.GetNumElements());</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    std::vector&lt;float&gt; intermediateMem2(bbOut2Id.second.GetNumElements());</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    std::vector&lt;float&gt; intermediateMem3(outputBoxesId.second.GetNumElements());</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="comment">// Setup inputs and outputs</span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="keyword">using</span> BindingInfos = std::vector&lt;armnn::BindingPointInfo&gt;;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keyword">using</span> FloatTensors = std::vector&lt;std::reference_wrapper&lt;std::vector&lt;float&gt;&gt;&gt;;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> bbInputTensors = <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa5b4bf99dead35f1ed10ec2da962b5f8">MakeInputTensors</a>(BindingInfos{ inputId },</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                                                   FloatTensors{ image });</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> bbOutputTensors = <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a47e2cf3b998bc6a55711799ac97d6eee">MakeOutputTensors</a>(BindingInfos{ bbOut0Id, bbOut1Id, bbOut2Id },</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                                                      FloatTensors{ intermediateMem0,</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                                                                    intermediateMem1,</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                                                                    intermediateMem2 });</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> detectInputTensors = <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa5b4bf99dead35f1ed10ec2da962b5f8">MakeInputTensors</a>(BindingInfos{ detectIn0Id,</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                                                                     detectIn1Id,</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                                                                     detectIn2Id } ,</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                                                       FloatTensors{ intermediateMem0,</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                                                                     intermediateMem1,</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                                                                     intermediateMem2 });</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> detectOutputTensors = <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a47e2cf3b998bc6a55711799ac97d6eee">MakeOutputTensors</a>(BindingInfos{ outputBoxesId },</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                                                          FloatTensors{ intermediateMem3 });</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> numIterations=2;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="keyword">using</span> DurationUS = std::chrono::duration&lt;double, std::micro&gt;;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    std::vector&lt;DurationUS&gt; nmsDurations(0);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    std::vector&lt;yolov3::Detection&gt; filtered_boxes;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    nmsDurations.reserve(numIterations);</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i &lt; numIterations; i++)</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    {</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        <span class="comment">// Execute backbone</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Running backbone...&quot;</span>;</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        runtime-&gt;EnqueueWorkload(backboneId, bbInputTensors, bbOutputTensors);</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="comment">// Execute detector</span></div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Running detector...&quot;</span>;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        runtime-&gt;EnqueueWorkload(detectorId, detectInputTensors, detectOutputTensors);</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        <span class="comment">// Execute NMS</span></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Running nms...&quot;</span>;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        <span class="keyword">using</span> clock = std::chrono::steady_clock;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        <span class="keyword">auto</span> nmsStartTime = clock::now();</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        <a class="code" href="structyolov3_1_1_n_m_s_config.xhtml">yolov3::NMSConfig</a> config;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        config.<a class="code" href="structyolov3_1_1_n_m_s_config.xhtml#a69e5cb89b98e22ca17e8a7d3d8aef10a">num_boxes</a> = 127800;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        config.<a class="code" href="structyolov3_1_1_n_m_s_config.xhtml#ae82414d4f3be497637c3456351a19c03">num_classes</a> = 80;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        config.<a class="code" href="structyolov3_1_1_n_m_s_config.xhtml#a4e90aada4569ce7e2b3e41649cfdc3f8">confidence_threshold</a> = 0.9f;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        config.<a class="code" href="structyolov3_1_1_n_m_s_config.xhtml#a8f299d6494fbe8a199fed9344d10d99b">iou_threshold</a> = 0.5f;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        filtered_boxes = <a class="code" href="namespaceyolov3.xhtml#a7cf18c5c3391effbaf3234792876cd52">yolov3::nms</a>(config, intermediateMem3);</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        <span class="keyword">auto</span> nmsEndTime = clock::now();</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        <span class="comment">// Enable the profiling after the warm-up run</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        <span class="keywordflow">if</span> (i&gt;0)</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        {</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            <a class="code" href="namespaceyolov3.xhtml#a8151de4c14e5e853818753516cb87c26">print_detection</a>(std::cout, filtered_boxes);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> nmsDuration = DurationUS(nmsStartTime - nmsEndTime);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            nmsDurations.push_back(nmsDuration);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        }</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        backboneProfile-&gt;EnableProfiling(<span class="keyword">true</span>);</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        detectorProfile-&gt;EnableProfiling(<span class="keyword">true</span>);</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    }</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <span class="comment">// Log timings to file</span></div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    std::ofstream backboneProfileStream(<span class="stringliteral">&quot;backbone.json&quot;</span>);</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    backboneProfile-&gt;Print(backboneProfileStream);</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    backboneProfileStream.close();</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    std::ofstream detectorProfileStream(<span class="stringliteral">&quot;detector.json&quot;</span>);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    detectorProfile-&gt;Print(detectorProfileStream);</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    detectorProfileStream.close();</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="comment">// Manually construct the json output</span></div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    std::ofstream nmsProfileStream(<span class="stringliteral">&quot;nms.json&quot;</span>);</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    nmsProfileStream &lt;&lt; <span class="stringliteral">&quot;{&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    nmsProfileStream &lt;&lt; R<span class="stringliteral">&quot;(  &quot;NmsTimings&quot;: {)&quot; &lt;&lt; </span><span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    nmsProfileStream &lt;&lt; R<span class="stringliteral">&quot;(    &quot;raw&quot;: [)&quot; &lt;&lt; </span><span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="keywordtype">bool</span> isFirst = <span class="keyword">true</span>;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> duration : nmsDurations)</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    {</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        <span class="keywordflow">if</span> (!isFirst)</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        {</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;            nmsProfileStream &lt;&lt; <span class="stringliteral">&quot;,\n&quot;</span>;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        }</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        nmsProfileStream &lt;&lt; <span class="stringliteral">&quot;      &quot;</span> &lt;&lt; duration.count();</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        isFirst = <span class="keyword">false</span>;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    }</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    nmsProfileStream &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    nmsProfileStream &lt;&lt; R<span class="stringliteral">&quot;(    &quot;units&quot;: &quot;us&quot;)&quot; &lt;&lt; </span><span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    nmsProfileStream &lt;&lt; <span class="stringliteral">&quot;    ]&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    nmsProfileStream &lt;&lt; <span class="stringliteral">&quot;  }&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    nmsProfileStream &lt;&lt; <span class="stringliteral">&quot;}&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    nmsProfileStream.close();</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="keywordflow">if</span> (progArgs.comparisonFiles.size() &gt; 0)</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    {</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#acde339995fb755d7ac7341ffa28f32b4">CheckAccuracy</a>(&amp;intermediateMem0,</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                      &amp;intermediateMem1,</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                      &amp;intermediateMem2,</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                      &amp;intermediateMem3,</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                      filtered_boxes,</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                      progArgs.comparisonFiles);</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    }</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Run completed&quot;</span>;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;}</div><div class="ttc" id="_tf_lite_yolo_v3_big-_armnn_8cpp_xhtml_acde339995fb755d7ac7341ffa28f32b4"><div class="ttname"><a href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#acde339995fb755d7ac7341ffa28f32b4">CheckAccuracy</a></div><div class="ttdeci">void CheckAccuracy(std::vector&lt; float &gt; *toDetector0, std::vector&lt; float &gt; *toDetector1, std::vector&lt; float &gt; *toDetector2, std::vector&lt; float &gt; *detectorOutput, const std::vector&lt; yolov3::Detection &gt; &amp;nmsOut, const std::vector&lt; std::string &gt; &amp;filePaths)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00226">TfLiteYoloV3Big-Armnn.cpp:226</a></div></div>
<div class="ttc" id="_tf_lite_yolo_v3_big-_armnn_8cpp_xhtml_aa96d209a3a37e0f6792f0f46ee2121e7af8320b26d30ab433c5a54546d21f414c"><div class="ttname"><a href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa96d209a3a37e0f6792f0f46ee2121e7af8320b26d30ab433c5a54546d21f414c">ImportMemory::False</a></div></div>
<div class="ttc" id="structarmnn_tf_lite_parser_1_1_i_tf_lite_parser_1_1_tf_lite_parser_options_xhtml"><div class="ttname"><a href="structarmnn_tf_lite_parser_1_1_i_tf_lite_parser_1_1_tf_lite_parser_options.xhtml">armnnTfLiteParser::ITfLiteParser::TfLiteParserOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_tf_lite_parser_8hpp_source.xhtml#l00029">ITfLiteParser.hpp:29</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7f8325a4bc02f2f687ba1968b595ec0a"><div class="ttname"><a href="namespacearmnn.xhtml#a7f8325a4bc02f2f687ba1968b595ec0a">armnn::SetAllLoggingSinks</a></div><div class="ttdeci">void SetAllLoggingSinks(bool standardOut, bool debugOut, bool coloured)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8cpp_source.xhtml#l00191">Logging.cpp:191</a></div></div>
<div class="ttc" id="_tf_lite_yolo_v3_big-_armnn_8cpp_xhtml_a7a0e9bc46f97b1bf6ee6b1e8cd655e73"><div class="ttname"><a href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7a0e9bc46f97b1bf6ee6b1e8cd655e73">LoadModel</a></div><div class="ttdeci">int LoadModel(const char *filename, ITfLiteParser &amp;parser, IRuntime &amp;runtime, NetworkId &amp;networkId, const std::vector&lt; BackendId &gt; &amp;backendPreferences, ImportMemory enableImport, DumpToDot dumpToDot)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00107">TfLiteYoloV3Big-Armnn.cpp:107</a></div></div>
<div class="ttc" id="_tf_lite_yolo_v3_big-_armnn_8cpp_xhtml_aa5b4bf99dead35f1ed10ec2da962b5f8"><div class="ttname"><a href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa5b4bf99dead35f1ed10ec2da962b5f8">MakeInputTensors</a></div><div class="ttdeci">armnn::InputTensors MakeInputTensors(const std::vector&lt; armnn::BindingPointInfo &gt; &amp;inputBindings, const std::vector&lt; std::reference_wrapper&lt; TContainer &gt;&gt; &amp;inputDataContainers)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00050">TfLiteYoloV3Big-Armnn.cpp:50</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="structyolov3_1_1_n_m_s_config_xhtml_a69e5cb89b98e22ca17e8a7d3d8aef10a"><div class="ttname"><a href="structyolov3_1_1_n_m_s_config.xhtml#a69e5cb89b98e22ca17e8a7d3d8aef10a">yolov3::NMSConfig::num_boxes</a></div><div class="ttdeci">unsigned int num_boxes</div><div class="ttdoc">Number of detected boxes. </div><div class="ttdef"><b>Definition:</b> <a href="_n_m_s_8hpp_source.xhtml#l00015">NMS.hpp:15</a></div></div>
<div class="ttc" id="_tf_lite_yolo_v3_big-_armnn_8cpp_xhtml_a3354c1d773cc613c36ef27209fac8a4d"><div class="ttname"><a href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a3354c1d773cc613c36ef27209fac8a4d">LoadImage</a></div><div class="ttdeci">std::vector&lt; float &gt; LoadImage(const char *filename)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00165">TfLiteYoloV3Big-Armnn.cpp:165</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac9aad76a34137b6359a867b282ea7cfb"><div class="ttname"><a href="namespacearmnn.xhtml#ac9aad76a34137b6359a867b282ea7cfb">armnn::SetLogFilter</a></div><div class="ttdeci">void SetLogFilter(LogSeverity level)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8cpp_source.xhtml#l00073">Logging.cpp:73</a></div></div>
<div class="ttc" id="namespaceyolov3_xhtml_a8151de4c14e5e853818753516cb87c26"><div class="ttname"><a href="namespaceyolov3.xhtml#a8151de4c14e5e853818753516cb87c26">yolov3::print_detection</a></div><div class="ttdeci">void print_detection(std::ostream &amp;os, const std::vector&lt; Detection &gt; &amp;detections)</div><div class="ttdoc">Print identified yolo detections. </div><div class="ttdef"><b>Definition:</b> <a href="_n_m_s_8cpp_source.xhtml#l00096">NMS.cpp:96</a></div></div>
<div class="ttc" id="_tf_lite_yolo_v3_big-_armnn_8cpp_xhtml_a7013f680e1a8d40e50dc330d57d0ec9a"><div class="ttname"><a href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7013f680e1a8d40e50dc330d57d0ec9a">CHECK_OK</a></div><div class="ttdeci">#define CHECK_OK(v)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00034">TfLiteYoloV3Big-Armnn.cpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0d8160388a127c1a23b37bc88dc6e2ec"><div class="ttname"><a href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00027">IRuntime.hpp:27</a></div></div>
<div class="ttc" id="_tf_lite_yolo_v3_big-_armnn_8cpp_xhtml_a7454bbb669508e9e0dbdbed5f7456064"><div class="ttname"><a href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a7454bbb669508e9e0dbdbed5f7456064">DumpToDot</a></div><div class="ttdeci">DumpToDot</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00103">TfLiteYoloV3Big-Armnn.cpp:103</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00077">IRuntime.hpp:77</a></div></div>
<div class="ttc" id="structyolov3_1_1_n_m_s_config_xhtml_a8f299d6494fbe8a199fed9344d10d99b"><div class="ttname"><a href="structyolov3_1_1_n_m_s_config.xhtml#a8f299d6494fbe8a199fed9344d10d99b">yolov3::NMSConfig::iou_threshold</a></div><div class="ttdeci">float iou_threshold</div><div class="ttdoc">Inclusion threshold for Intersection-Over-Union. </div><div class="ttdef"><b>Definition:</b> <a href="_n_m_s_8hpp_source.xhtml#l00017">NMS.hpp:17</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">armnn::IRuntime::CreationOptions::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdoc">Setting this value will override the paths set by the DYNAMIC_BACKEND_PATHS compiler directive Only a...</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00098">IRuntime.hpp:98</a></div></div>
<div class="ttc" id="namespaceyolov3_xhtml_a7cf18c5c3391effbaf3234792876cd52"><div class="ttname"><a href="namespaceyolov3.xhtml#a7cf18c5c3391effbaf3234792876cd52">yolov3::nms</a></div><div class="ttdeci">std::vector&lt; Detection &gt; nms(const NMSConfig &amp;config, const std::vector&lt; float &gt; &amp;detected_boxes)</div><div class="ttdoc">Perform Non-Maxima Supression on a list of given detections. </div><div class="ttdef"><b>Definition:</b> <a href="_n_m_s_8cpp_source.xhtml#l00113">NMS.cpp:113</a></div></div>
<div class="ttc" id="_tf_lite_yolo_v3_big-_armnn_8cpp_xhtml_a47e2cf3b998bc6a55711799ac97d6eee"><div class="ttname"><a href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a47e2cf3b998bc6a55711799ac97d6eee">MakeOutputTensors</a></div><div class="ttdeci">armnn::OutputTensors MakeOutputTensors(const std::vector&lt; armnn::BindingPointInfo &gt; &amp;outputBindings, const std::vector&lt; std::reference_wrapper&lt; TContainer &gt;&gt; &amp;outputDataContainers)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00074">TfLiteYoloV3Big-Armnn.cpp:74</a></div></div>
<div class="ttc" id="structyolov3_1_1_n_m_s_config_xhtml"><div class="ttname"><a href="structyolov3_1_1_n_m_s_config.xhtml">yolov3::NMSConfig</a></div><div class="ttdoc">Non Maxima Suprresion configuration meta-data. </div><div class="ttdef"><b>Definition:</b> <a href="_n_m_s_8hpp_source.xhtml#l00013">NMS.hpp:13</a></div></div>
<div class="ttc" id="structyolov3_1_1_n_m_s_config_xhtml_a4e90aada4569ce7e2b3e41649cfdc3f8"><div class="ttname"><a href="structyolov3_1_1_n_m_s_config.xhtml#a4e90aada4569ce7e2b3e41649cfdc3f8">yolov3::NMSConfig::confidence_threshold</a></div><div class="ttdeci">float confidence_threshold</div><div class="ttdoc">Inclusion confidence threshold for a box. </div><div class="ttdef"><b>Definition:</b> <a href="_n_m_s_8hpp_source.xhtml#l00016">NMS.hpp:16</a></div></div>
<div class="ttc" id="_tf_lite_yolo_v3_big-_armnn_8cpp_xhtml_aa96d209a3a37e0f6792f0f46ee2121e7af827cf462f62848df37c5e1e94a4da74"><div class="ttname"><a href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa96d209a3a37e0f6792f0f46ee2121e7af827cf462f62848df37c5e1e94a4da74">ImportMemory::True</a></div></div>
<div class="ttc" id="structyolov3_1_1_n_m_s_config_xhtml_ae82414d4f3be497637c3456351a19c03"><div class="ttname"><a href="structyolov3_1_1_n_m_s_config.xhtml#ae82414d4f3be497637c3456351a19c03">yolov3::NMSConfig::num_classes</a></div><div class="ttdeci">unsigned int num_classes</div><div class="ttdoc">Number of classes in the detected boxes. </div><div class="ttdef"><b>Definition:</b> <a href="_n_m_s_8hpp_source.xhtml#l00014">NMS.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa5b4bf99dead35f1ed10ec2da962b5f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5b4bf99dead35f1ed10ec2da962b5f8">&#9670;&nbsp;</a></span>MakeInputTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> MakeInputTensors </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputBindings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>inputDataContainers</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00050">50</a> of file <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml">TfLiteYoloV3Big-Armnn.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_model_8hpp_source.xhtml#l00763">InferenceModel&lt; IParser, TDataType &gt;::CreateWorkingMemHandle()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00561">InferenceModel&lt; IParser, TDataType &gt;::Run()</a>, and <a class="el" href="_inference_model_8hpp_source.xhtml#l00627">InferenceModel&lt; IParser, TDataType &gt;::RunAsync()</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> inputTensors;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> numInputs = inputBindings.size();</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">if</span> (numInputs != inputDataContainers.size())</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;Mismatching vectors&quot;</span>);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numInputs; i++)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a>&amp; inputBinding = inputBindings[i];</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer</a>&amp; inputData = inputDataContainers[i].get();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> inputTensor(inputBinding.second, inputData.data());</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        inputTensors.push_back(std::make_pair(inputBinding.first, inputTensor));</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">return</span> inputTensors;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a280670a263dc4fd40491f6d0a2737f44"><div class="ttname"><a href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></div><div class="ttdeci">std::pair&lt; armnn::LayerBindingId, armnn::TensorInfo &gt; BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00274">Tensor.hpp:274</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_ac7bd4ea667375c07718086368507ed44"><div class="ttname"><a href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a></div><div class="ttdeci">mapbox::util::variant&lt; std::vector&lt; float &gt;, std::vector&lt; int &gt;, std::vector&lt; unsigned char &gt;, std::vector&lt; int8_t &gt; &gt; TContainer</div><div class="ttdef"><b>Definition:</b> <a href="_t_container_8hpp_source.xhtml#l00018">TContainer.hpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a47e2cf3b998bc6a55711799ac97d6eee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47e2cf3b998bc6a55711799ac97d6eee">&#9670;&nbsp;</a></span>MakeOutputTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> MakeOutputTensors </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>outputBindings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>outputDataContainers</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00074">74</a> of file <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml">TfLiteYoloV3Big-Armnn.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_model_8hpp_source.xhtml#l00763">InferenceModel&lt; IParser, TDataType &gt;::CreateWorkingMemHandle()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00561">InferenceModel&lt; IParser, TDataType &gt;::Run()</a>, and <a class="el" href="_inference_model_8hpp_source.xhtml#l00627">InferenceModel&lt; IParser, TDataType &gt;::RunAsync()</a>.</p>
<div class="fragment"><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> outputTensors;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> numOutputs = outputBindings.size();</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">if</span> (numOutputs != outputDataContainers.size())</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;Mismatching vectors&quot;</span>);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    outputTensors.reserve(numOutputs);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numOutputs; i++)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a>&amp; outputBinding = outputBindings[i];</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer</a>&amp; outputData = outputDataContainers[i].get();</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a> outputTensor(outputBinding.second, const_cast&lt;float*&gt;(outputData.data()));</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        outputTensors.push_back(std::make_pair(outputBinding.first, outputTensor));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">return</span> outputTensors;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00319">Tensor.hpp:319</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a280670a263dc4fd40491f6d0a2737f44"><div class="ttname"><a href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></div><div class="ttdeci">std::pair&lt; armnn::LayerBindingId, armnn::TensorInfo &gt; BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00274">Tensor.hpp:274</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_ac7bd4ea667375c07718086368507ed44"><div class="ttname"><a href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a></div><div class="ttdeci">mapbox::util::variant&lt; std::vector&lt; float &gt;, std::vector&lt; int &gt;, std::vector&lt; unsigned char &gt;, std::vector&lt; int8_t &gt; &gt; TContainer</div><div class="ttdef"><b>Definition:</b> <a href="_t_container_8hpp_source.xhtml#l00018">TContainer.hpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a333d6299f43cb5c08079b9004cf0c6c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a333d6299f43cb5c08079b9004cf0c6c5">&#9670;&nbsp;</a></span>ValidateFilePath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ValidateFilePath </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>file</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a000e710b0b27fa81885054ad3c5faf09">ExpectFile</a>&#160;</td>
          <td class="paramname"><em>expectFile</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00211">211</a> of file <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml">TfLiteYoloV3Big-Armnn.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a000e710b0b27fa81885054ad3c5faf09af827cf462f62848df37c5e1e94a4da74">True</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00226">CheckAccuracy()</a>.</p>
<div class="fragment"><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;{</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">if</span> (!ghc::filesystem::exists(file))</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Given file path &quot;</span> &lt;&lt; file &lt;&lt; <span class="stringliteral">&quot; does not exist&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">if</span> (!ghc::filesystem::is_regular_file(file) &amp;&amp; expectFile == <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a000e710b0b27fa81885054ad3c5faf09af827cf462f62848df37c5e1e94a4da74">ExpectFile::True</a>)</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Given file path &quot;</span> &lt;&lt; file &lt;&lt; <span class="stringliteral">&quot; is not a regular file&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div><div class="ttc" id="_tf_lite_yolo_v3_big-_armnn_8cpp_xhtml_a000e710b0b27fa81885054ad3c5faf09af827cf462f62848df37c5e1e94a4da74"><div class="ttname"><a href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a000e710b0b27fa81885054ad3c5faf09af827cf462f62848df37c5e1e94a4da74">ExpectFile::True</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_b7046834333ec325d3a0c415e99d3f12.xhtml">TfLiteYoloV3Big-Armnn</a></li><li class="navelem"><a class="el" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml">TfLiteYoloV3Big-Armnn.cpp</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:35 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
