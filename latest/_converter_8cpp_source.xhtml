<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: shim/sl/canonical/Converter.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_converter_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Converter.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_converter_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2022 Arm Ltd and Contributors. All rights reserved.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160; </div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_converter_8hpp.xhtml">Converter.hpp</a>&quot;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;half/half.hpp&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_utils_8hpp.xhtml">armnnUtils/TensorUtils.hpp</a>&gt;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn__driver.xhtml">armnn_driver</a></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;{</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespaceandroid_1_1nn.xhtml">android::nn</a>;</div>
<div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="namespacearmnn__driver.xhtml#a0f38fa92b2468d5378258a2b074c1a31">   14</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn__driver.xhtml#a0f38fa92b2468d5378258a2b074c1a31">Half</a> = half_float::half;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160; </div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;} <span class="comment">// anonymouse namespace</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_converter.xhtml#a066acd78f531b709b725a730bfbee887">   21</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn__driver_1_1_converter.xhtml#a066acd78f531b709b725a730bfbee887">Converter::ConvertOperation</a>(<span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_converter.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_converter.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordflow">switch</span> (operation.type)</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    {</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <span class="keywordflow">case</span> OperationType::ABS:</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;            <span class="keywordflow">return</span> ConvertElementwiseUnary(operation, model, data, UnaryOperation::Abs);</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keywordflow">case</span> OperationType::ADD:</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;            <span class="keywordflow">return</span> ConvertAdd(operation, model, data);</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keywordflow">case</span> OperationType::ARGMAX:</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            <span class="keywordflow">return</span> ConvertArgMinMax(operation, model, data, ArgMinMaxFunction::Max);</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="keywordflow">case</span> OperationType::ARGMIN:</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            <span class="keywordflow">return</span> ConvertArgMinMax(operation, model, data, ArgMinMaxFunction::Min);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keywordflow">case</span> OperationType::AVERAGE_POOL_2D:</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            <span class="keywordflow">return</span> ConvertAveragePool2d(operation, model, data);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordflow">case</span> OperationType::BATCH_MATMUL:</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            <span class="keywordflow">return</span> ConvertBatchMatMul(operation, model, data);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="keywordflow">case</span> OperationType::BATCH_TO_SPACE_ND:</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            <span class="keywordflow">return</span> ConvertBatchToSpaceNd(operation, model, data);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">case</span> OperationType::CAST:</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            <span class="keywordflow">return</span> ConvertCast(operation, model, data);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">case</span> OperationType::CONCATENATION:</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="keywordflow">return</span> ConvertConcatenation(operation, model, data);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">case</span> OperationType::CONV_2D:</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="keywordflow">return</span> ConvertConv2d(operation, model, data);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">case</span> OperationType::DEPTH_TO_SPACE:</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="keywordflow">return</span> ConvertDepthToSpace(operation, model, data);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">case</span> OperationType::DEPTHWISE_CONV_2D:</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="keywordflow">return</span> ConvertDepthwiseConv2d(operation, model, data);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">case</span> OperationType::DEQUANTIZE:</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keywordflow">return</span> ConvertDequantize(operation, model, data);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">case</span> OperationType::DIV:</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keywordflow">return</span> ConvertDiv(operation, model, data);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">case</span> OperationType::ELU:</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keywordflow">return</span> ConvertElu(operation, model, data);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">case</span> OperationType::EQUAL:</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keywordflow">return</span> ConvertComparison(operation, model, data, ComparisonOperation::Equal);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">case</span> OperationType::EXP:</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keywordflow">return</span> ConvertElementwiseUnary(operation, model, data, UnaryOperation::Exp);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordflow">case</span> OperationType::EXPAND_DIMS:</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keywordflow">return</span> ConvertExpandDims(operation, model, data);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">case</span> OperationType::FILL:</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordflow">return</span> ConvertFill(operation, model, data);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">case</span> OperationType::FLOOR:</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordflow">return</span> ConvertFloor(operation, model, data);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">case</span> OperationType::FULLY_CONNECTED:</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keywordflow">return</span> ConvertFullyConnected(operation, model, data);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">case</span> OperationType::GATHER:</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keywordflow">return</span> ConvertGather(operation, model, data);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">case</span> OperationType::GREATER:</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">return</span> ConvertComparison(operation, model, data, ComparisonOperation::Greater);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">case</span> OperationType::GREATER_EQUAL:</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordflow">return</span> ConvertComparison(operation, model, data, ComparisonOperation::GreaterOrEqual);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">case</span> OperationType::GROUPED_CONV_2D:</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">return</span> ConvertGroupedConv2d(operation, model, data);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">case</span> OperationType::HARD_SWISH:</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">return</span> ConvertHardSwish(operation, model, data);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">case</span> OperationType::INSTANCE_NORMALIZATION:</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">return</span> ConvertInstanceNormalization(operation, model, data);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">case</span> OperationType::L2_NORMALIZATION:</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keywordflow">return</span> ConvertL2Normalization(operation, model, data);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">case</span> OperationType::L2_POOL_2D:</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">return</span> ConvertL2Pool2d(operation, model, data);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">case</span> OperationType::LESS:</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">return</span> ConvertComparison(operation, model, data, ComparisonOperation::Less);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">case</span> OperationType::LESS_EQUAL:</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keywordflow">return</span> ConvertComparison(operation, model, data, ComparisonOperation::LessOrEqual);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">case</span> OperationType::LOCAL_RESPONSE_NORMALIZATION:</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">return</span> ConvertLocalResponseNormalization(operation, model, data);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">case</span> OperationType::LOG:</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keywordflow">return</span> ConvertElementwiseUnary(operation, model, data, UnaryOperation::Log);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">case</span> OperationType::LOGICAL_AND:</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keywordflow">return</span> ConvertLogicalBinary(operation, model, data, LogicalBinaryOperation::LogicalAnd);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">case</span> OperationType::LOGICAL_NOT:</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">return</span> ConvertElementwiseUnary(operation, model, data, UnaryOperation::LogicalNot);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">case</span> OperationType::LOGICAL_OR:</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">return</span> ConvertLogicalBinary(operation, model, data, LogicalBinaryOperation::LogicalOr);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">case</span> OperationType::LOGISTIC:</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keywordflow">return</span> ConvertLogistic(operation, model, data);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">case</span> OperationType::LOG_SOFTMAX:</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">return</span> ConvertLogSoftmax(operation, model, data);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">case</span> OperationType::LSTM:</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordflow">return</span> ConvertLstm(operation, model, data);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">case</span> OperationType::MAX_POOL_2D:</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keywordflow">return</span> ConvertMaxPool2d(operation, model, data);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">case</span> OperationType::MAXIMUM:</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordflow">return</span> ConvertMaximum(operation, model, data);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">case</span> OperationType::MEAN:</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">return</span> ConvertMean(operation, model, data);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">case</span> OperationType::MINIMUM:</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">return</span> ConvertMinimum(operation, model, data);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">case</span> OperationType::MUL:</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">return</span> ConvertMul(operation, model, data);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">case</span> OperationType::NEG:</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">return</span> ConvertElementwiseUnary(operation, model, data, UnaryOperation::Neg);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">case</span> OperationType::NOT_EQUAL:</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">return</span> ConvertComparison(operation, model, data, ComparisonOperation::NotEqual);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">case</span> OperationType::PAD:</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">return</span> ConvertPad(operation, model, data);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">case</span> OperationType::PAD_V2:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">return</span> ConvertPadV2(operation, model, data);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">case</span> OperationType::PRELU:</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">return</span> ConvertPrelu(operation, model, data);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">case</span> OperationType::QUANTIZE:</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">return</span> ConvertQuantize(operation, model, data);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">case</span> OperationType::QUANTIZED_LSTM:</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">return</span> ConvertQuantizedLstm(operation, model, data);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">case</span> OperationType::QUANTIZED_16BIT_LSTM:</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">return</span> ConvertQuantized16BitLstm(operation, model, data);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">case</span> OperationType::RANK:</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">return</span> ConvertRank(operation, model, data);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">case</span> OperationType::REDUCE_MAX:</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a3f6b313fd199d1552844f3f95fd25cd2">ConvertReduce</a>(operation, model, data, <a class="code" href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0a6a061313d22e51e0f25b7cd4dc065233">armnn::ReduceOperation::Max</a>);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">case</span> OperationType::REDUCE_MIN:</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a3f6b313fd199d1552844f3f95fd25cd2">ConvertReduce</a>(operation, model, data, <a class="code" href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0a78d811e98514cd165dda532286610fd2">armnn::ReduceOperation::Min</a>);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">case</span> OperationType::REDUCE_SUM:</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a3f6b313fd199d1552844f3f95fd25cd2">ConvertReduce</a>(operation, model, data, <a class="code" href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0aa0ec87054b5e5b7847d0d8780a01a3d5">armnn::ReduceOperation::Sum</a>);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">case</span> OperationType::RELU:</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">return</span> ConvertReLu(operation, model, data);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">case</span> OperationType::RELU1:</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keywordflow">return</span> ConvertReLu1(operation, model, data);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">case</span> OperationType::RELU6:</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordflow">return</span> ConvertReLu6(operation, model, data);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">case</span> OperationType::RESHAPE:</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordflow">return</span> ConvertReshape(operation, model, data);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">case</span> OperationType::RESIZE_BILINEAR:</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keywordflow">return</span> ConvertResize(operation, model, data, ResizeMethod::Bilinear);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">case</span> OperationType::RESIZE_NEAREST_NEIGHBOR:</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">return</span> ConvertResize(operation, model, data, ResizeMethod::NearestNeighbor);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">case</span> OperationType::RSQRT:</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keywordflow">return</span> ConvertElementwiseUnary(operation, model, data, UnaryOperation::Rsqrt);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">case</span> OperationType::SIN:</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keywordflow">return</span> ConvertElementwiseUnary(operation, model, data, UnaryOperation::Sin);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">case</span> OperationType::SOFTMAX:</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordflow">return</span> ConvertSoftmax(operation, model, data);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">case</span> OperationType::SPACE_TO_BATCH_ND  :</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordflow">return</span> ConvertSpaceToBatchNd(operation, model, data);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">case</span> OperationType::SPACE_TO_DEPTH:</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keywordflow">return</span> ConvertSpaceToDepth(operation, model, data);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">case</span> OperationType::SQRT:</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">return</span> ConvertSqrt(operation, model, data);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">case</span> OperationType::SQUEEZE:</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="keywordflow">return</span> ConvertSqueeze(operation, model, data);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">case</span> OperationType::STRIDED_SLICE:</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">return</span> ConvertStridedSlice(operation, model, data);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">case</span> OperationType::SUB:</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">return</span> ConvertSub(operation, model, data);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">case</span> OperationType::TRANSPOSE:</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">return</span> ConvertTranspose(operation, model, data);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">case</span> OperationType::TRANSPOSE_CONV_2D:</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">return</span> ConvertTransposeConv2d(operation, model, data);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">case</span> OperationType::TANH:</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keywordflow">return</span> ConvertTanH(operation, model, data);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Operation type: &quot;</span> &lt;&lt; operation.type &lt;&lt; <span class="stringliteral">&quot;is not supported in ArmnnDriver&quot;</span>;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertAdd(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;{</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertAdd()&quot;</span>;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input0 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input1 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 1, model, data);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">if</span> (!input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() || !input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// The FuseActivation parameter is always the input index 2, and it should be optional</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    ActivationFn activationFunction;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#acd62ec697055015572a6ba61eaba4f1a">GetOptionalInputActivation</a>(operation, 2, activationFunction, model, data))</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    }</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* outputOperand = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">if</span> (!outputOperand)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo0 = input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo1 = input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*outputOperand);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#ab5569e5b664498e011e8bd92cc3cc5b2">IsAdditionSupported</a>,</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                   inputInfo0,</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                   inputInfo1,</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                   outputInfo);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    };</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    {</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    }</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> startLayer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddAdditionLayer();</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordtype">bool</span> isReshapeSupported = BroadcastTensor(input0, input1, startLayer, data);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">if</span> (!isReshapeSupported)</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *startLayer, model,</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                        data, <span class="keyword">nullptr</span>, validateFunc, activationFunction);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;}</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertArgMinMax(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                 <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data,</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                 <a class="code" href="namespacearmnn.xhtml#ae7e8cbf71db6a490789ca6dcaa8deeae">armnn::ArgMinMaxFunction</a> argMinMaxFunction)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;{</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertArgMinMax()&quot;</span>;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;argMinMaxFunction = &quot;</span> &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a5cda3502382f06a64c3cbeb1829bd850">GetArgMinMaxFunctionAsCString</a>(argMinMaxFunction);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input0 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">if</span> (!input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    int32_t axis;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::INT32, axis, model, data))</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    {</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs. Failed to read axis.&quot;</span>, __func__);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo = input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordtype">int</span> rank = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>());</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">if</span> (((axis &lt; -rank) &amp;&amp; (axis &lt; 0)) || ((axis &gt;= rank) &amp;&amp; (axis &gt; 0)))</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    {</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="comment">// Square bracket denotes inclusive n while parenthesis denotes exclusive n</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="comment">// E.g. Rank 4 tensor can have axis in range [-4, 3)</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="comment">// -1 == 3, -2 == 2, -3 == 1, -4 == 0</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Axis must be in range [-n, n)&quot;</span>, __func__);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    {</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    }</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo0 = input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160; </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">armnn::ArgMinMaxDescriptor</a> descriptor;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml#ab1ae6f520bb1a4da191a0ae907477f23">m_Function</a> = argMinMaxFunction;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">m_Axis</a>     = axis;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                   IsArgMinMaxSupported,</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                   inputInfo0,</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                   descriptor);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    };</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160; </div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    }</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    {</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    }</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160; </div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddArgMinMaxLayer(descriptor);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160; </div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;}</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertAveragePool2d(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;{</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertAveragePool2d()&quot;</span>;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a2eb75cb48464cf87c290503d7bea79a4">ConvertPooling2d</a>(operation, __func__, PoolingAlgorithm::Average, model, data);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;}</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160; </div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertBatchMatMul(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;{</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertBatchMatMul()&quot;</span>;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input0 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input1 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 1, model, data);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160; </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keywordflow">if</span> (!input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() || !input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    {</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    }</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo0 = input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo1 = input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160; </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rankInput0 = inputInfo0.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordflow">if</span> (rankInput0 &gt; 4 || rankInput0 &lt; 2)</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    {</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        Fail(<span class="stringliteral">&quot;%s: Only inputs with rank at least 2 and up to 4 are supported&quot;</span>, __func__);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    }</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rankInput1 = inputInfo1.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordflow">if</span> (rankInput1 &gt; 4 || rankInput1 &lt; 2)</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    {</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        Fail(<span class="stringliteral">&quot;%s: Only inputs with rank at least 2 and up to 4 are supported&quot;</span>, __func__);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    }</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="comment">// Determine data type of input tensor 0</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a53bfb6eb38a90244ba166b641a6965d9">OperandType</a> input0Type;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#adfc2c5b834fdb89e5458ddb1d9aa7830">GetOperandType</a>(operation, 0, model, input0Type))</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    {</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    }</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160; </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="comment">// Determine data type of input tensor 0</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a53bfb6eb38a90244ba166b641a6965d9">OperandType</a> input1Type;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#adfc2c5b834fdb89e5458ddb1d9aa7830">GetOperandType</a>(operation, 0, model, input1Type))</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    }</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160; </div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keywordflow">if</span> (input0Type != input1Type)</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    {</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs (Inputs must have same OperandCode)&quot;</span>, __func__);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    }</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160; </div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    }</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160; </div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160; </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml">armnn::BatchMatMulDescriptor</a> batchMatMulDesc;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160; </div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="comment">// Inputs 2 and 3 are adjoint in Android NeuralNetworks, but they perform transpose.</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="comment">// This is why we are linking them with transpose parameters in the descriptor</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    batchMatMulDesc.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#acb441bb8db19bcce78d15cdd8ceb5ea0">m_TransposeX</a> = <a class="code" href="namespacearmnn__driver.xhtml#ae28f9841f6cb1775849b7921b54da32e">GetOptionalBool</a>(operation, 2, model, data);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    batchMatMulDesc.<a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#a112b466e5d2ab9d1887178adbe3afa1c">m_TransposeY</a> = <a class="code" href="namespacearmnn__driver.xhtml#ae28f9841f6cb1775849b7921b54da32e">GetOptionalBool</a>(operation, 3, model, data);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160; </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    {</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                   IsBatchMatMulSupported,</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                                   inputInfo0,</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                                   inputInfo1,</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                                   batchMatMulDesc);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    };</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160; </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    {</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    }</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    {</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    }</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160; </div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160; </div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    {</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    }</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160; </div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddBatchMatMulLayer(batchMatMulDesc);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160; </div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;}</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160; </div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertBatchToSpaceNd(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;{</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertBatchToSpaceNd()&quot;</span>;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    {</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    }</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160; </div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    {</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    }</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160; </div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160; </div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* blockOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 1, model);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keywordflow">if</span> (!blockOperand)</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    {</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 1&quot;</span>, __func__);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    }</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160; </div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="comment">// Convert the block operand to int32</span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    std::vector&lt;int32_t&gt; block;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#ac8643aaee3eafc54336c5462b51bd53f">GetTensorInt32Values</a>(*blockOperand, block, model, data))</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    {</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Input 1 has invalid values&quot;</span>, __func__);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    }</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160; </div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160; </div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rank = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordflow">if</span> (rank != 4)</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    {</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        Fail(<span class="stringliteral">&quot;%s: Only inputs with rank equal to 4 are supported&quot;</span>, __func__);</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    }</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160; </div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="keywordflow">if</span> (std::any_of(block.cbegin(), block.cend(), [](int32_t i){ return i &lt; 1; }))</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    {</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Block sizes for each spatial dimension of the input tensor must be&quot;</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                    <span class="stringliteral">&quot; greater than or equal to 1&quot;</span>, __func__);</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    }</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160; </div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a> batchToSpaceNdDesc;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    batchToSpaceNdDesc.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">m_BlockShape</a>.assign(block.cbegin(), block.cend());</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    batchToSpaceNdDesc.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>;</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160; </div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keywordflow">if</span> (Is12OrLaterOperand(*output))</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    {</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        batchToSpaceNdDesc.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(operation, 2, model, data);</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    }</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="comment">// Setting crops to 0,0 0,0 as it is not supported in Android NN API</span></div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    batchToSpaceNdDesc.<a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a3941f674c071c9503e00d2b59e92e454">m_Crops</a> = {{0, 0}, {0, 0}};</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160; </div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    {</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#abb893c7adb7b64d0964bd244c46dd06b">IsBatchToSpaceNdSupported</a>,</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                                   batchToSpaceNdDesc);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    };</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160; </div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    {</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    }</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    {</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    }</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160; </div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160; </div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    {</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    }</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160; </div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddBatchToSpaceNdLayer(batchToSpaceNdDesc);</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160; </div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;}</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160; </div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertCast(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;{</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertCast()&quot;</span>;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160; </div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160; </div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    {</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    }</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160; </div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    {</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    }</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160; </div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo  = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160; </div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    {</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                                   IsCastSupported,</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                                   outputInfo);</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    };</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160; </div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    {</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    }</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    {</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    }</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160; </div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    {</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    }</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160; </div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddCastLayer();</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160; </div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;}</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160; </div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertComparison(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                                  <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data,</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                                  <a class="code" href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> comparisonOperation)</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;{</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertComparison()&quot;</span>;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;comparisonOperation = &quot;</span> &lt;&lt; <a class="code" href="namespacearmnn.xhtml#aabb76a77e95921785f576bb29b495cd8">GetComparisonOperationAsCString</a>(comparisonOperation);</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160; </div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input0 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input1 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 1, model, data);</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160; </div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keywordflow">if</span> (!(input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>()))</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    {</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    }</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160; </div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    {</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    }</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160; </div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo0 = input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo1 = input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160; </div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <a class="code" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> descriptor(comparisonOperation);</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160; </div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    {</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                                   IsComparisonSupported,</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                                   inputInfo0,</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                                   inputInfo1,</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                                   descriptor);</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    };</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160; </div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    {</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    }</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    {</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    }</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160; </div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    {</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    }</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160; </div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddComparisonLayer(descriptor);</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160; </div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keywordtype">bool</span> isReshapeSupported = BroadcastTensor(input0, input1, layer, data);</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keywordflow">if</span> (!isReshapeSupported)</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    {</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    }</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160; </div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    {</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    }</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160; </div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;}</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160; </div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160; </div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertConcatenation(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;{</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertConcatenation()&quot;</span>;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160; </div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <span class="comment">// The first N (0..N-1) inputs are tensors. The Nth input is the concatenation axis.</span></div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keywordflow">if</span> (operation.inputs.size() &lt;= 1)</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    {</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has insufficient arguments&quot;</span>, __func__);</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    }</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160; </div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <span class="comment">// Get inputs and outputs</span></div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="keyword">const</span> std::size_t numInputTensors = operation.inputs.size() - 1;</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160; </div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    int32_t concatDim;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, numInputTensors, OperandType::INT32, concatDim, model, data))</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    {</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    }</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160; </div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* outputOperand = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keywordflow">if</span> (!outputOperand)</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    {</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has no outputs&quot;</span>, __func__);</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    }</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160; </div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>  outputInfo      = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*outputOperand);</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> outputShape     = outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>         isDynamicTensor = <a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo);</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <span class="comment">// handle negative concat dims along the lines of tensorflow as described here:</span></div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="comment">//    https://www.tensorflow.org/api_docs/python/tf/concat</span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <span class="comment">// &quot;negative axis refers to axis + rank(values)-th dimension&quot;</span></div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="keywordflow">if</span> (concatDim &lt; 0)</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    {</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        concatDim += outputShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    }</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160; </div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="keywordflow">if</span> (concatDim &gt;= <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(outputShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()) || concatDim &lt; 0)</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    {</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid concat axis: %d&quot;</span>, __func__, concatDim);</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    }</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160; </div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    std::vector&lt;LayerInputHandle&gt;   inputHandles;</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    std::vector&lt;armnn::TensorShape&gt; inputShapes;</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160; </div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    inputHandles.reserve(numInputTensors);</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    inputShapes.reserve(numInputTensors);</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160; </div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="keywordtype">bool</span>          inputsHaveBeenReshaped = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  tensorDimensionsAdded  = 0;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; numInputTensors; ++i)</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    {</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* operand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, i, model);</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        <span class="keywordflow">if</span> (!operand)</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        {</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;        }</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160; </div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;        <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> operandInputHandle = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, i, model, data);</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        <span class="keywordflow">if</span> (!operandInputHandle.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        {</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;        }</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160; </div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> operandShape = GetTensorShapeForOperand(*operand);</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        <span class="keywordflow">if</span> (operandShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() == 0)</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        {</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operands with rank 0 are not supported&quot;</span>, __func__);</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;        }</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160; </div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        <span class="keywordflow">if</span> (RequiresReshape(operandShape))</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        {</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;            inputsHaveBeenReshaped = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160; </div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> reshapeInfo = operandInputHandle.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160; </div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            <span class="comment">// Expand the tensor to three dimensions</span></div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            <span class="keywordflow">if</span> (operandShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() == 2)</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;            {</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                reshapeInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({1, operandShape[0], operandShape[1]}));</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                tensorDimensionsAdded = 1;</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;            }</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;            {</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                reshapeInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({1, 1, operandShape[0]}));</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                tensorDimensionsAdded = 2;</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;            }</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160; </div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            <a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a> reshapeDescriptor;</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            reshapeDescriptor.<a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml#a1178f4dafdda81f59c15145ec327f7d9">m_TargetShape</a> = reshapeInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160; </div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackendReshape;</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;            <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                                       <a class="code" href="namespacearmnn.xhtml#af5014cbc003abcf201d4372b0012734c">IsReshapeSupported</a>,</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                                       data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                                       isSupported,</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                                       setBackendReshape,</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                                       operandInputHandle.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                                       reshapeInfo,</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                                       reshapeDescriptor);</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160; </div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;            <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            {</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            }</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;            <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>&amp; newReshape = AddReshapeLayer(*data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>, operandInputHandle, reshapeInfo);</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            newReshape.<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackendReshape);</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160; </div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;            <span class="comment">// Point to the reshape operation rather then the input operation</span></div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;            operandShape       = reshapeInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;            operandInputHandle = <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>(<span class="keyword">true</span>, &amp;newReshape.<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0), reshapeInfo);</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        }</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160; </div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        inputShapes.emplace_back(operandShape);</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        inputHandles.emplace_back(operandInputHandle);</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160; </div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        <span class="keywordflow">if</span> (!inputHandles.back().IsValid())</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        {</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        }</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    }</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160; </div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(inputShapes.size() == inputHandles.size());</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160; </div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="keywordflow">if</span> (inputsHaveBeenReshaped)</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    {</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        <span class="comment">// Adjust the concatenation dimension by the amount of dimensions added (if any)</span></div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        concatDim += tensorDimensionsAdded;</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160; </div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        <span class="comment">// Add extra dimensions to the output shape to reflect the addition of the reshape layers</span></div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        <span class="keywordflow">if</span> (tensorDimensionsAdded == 1)</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        {</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;            {</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                outputShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({1, 0, 0}, {<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>});</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;            }</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;            {</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                outputShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({1, outputShape[0], outputShape[1]});</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            }</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;        }</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (tensorDimensionsAdded == 2)</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        {</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;            {</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                outputShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({1, 1, 0}, {<span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>});</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            }</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;            {</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                outputShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({1, 1, outputShape[0]});</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;            }</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        }</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    }</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160; </div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <span class="comment">// Check if permutations is required and get the pair of permutations required for the concatenation.</span></div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    <span class="comment">// Permutation is required when the concat dimension is 2 for a 4D tensor or 1 for a 3D tensor.</span></div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    std::pair&lt;armnn::PermutationVector, armnn::PermutationVector&gt; permutationPair =</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;            std::make_pair(IdentityPermutation4D, IdentityPermutation4D);</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    <span class="keywordtype">bool</span> needPermute = CreateConcatPermutationParameters(inputShapes[0].GetNumDimensions(),</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                                                         concatDim,</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                                                         permutationPair);</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160; </div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    <span class="comment">// Only relevant to static tensors as dynamic output tensors will be transposed as a result of inferring from input</span></div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    <span class="keywordflow">if</span> (!isDynamicTensor)</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    {</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        <span class="keywordflow">if</span> (needPermute)</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        {</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;            outputShape = <a class="code" href="namespacearmnn_utils.xhtml#a428a9a6ffdf0e8d723b50c038c56c336">armnnUtils::TransposeTensorShape</a>(outputShape, permutationPair.first);</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        }</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160; </div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(outputShape);</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    }</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    <span class="comment">// this is no-op for identity swizzles, otherwise it replaces both</span></div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <span class="comment">// the handles and shapes with the swizzled layer output handles and shapes</span></div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    <span class="keywordflow">if</span> (!TransposeInputTensors(data, inputHandles, inputShapes, permutationPair.first))</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    {</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    }</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160; </div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <span class="comment">// Create an armnn concat layer descriptor - this will also perform validation on the input shapes</span></div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    <a class="code" href="structarmnn_1_1_origins_descriptor.xhtml">armnn::OriginsDescriptor</a> concatDescriptor;</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160; </div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    {</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;        <span class="comment">// The concat descriptor is always created across the only supported concat dimension</span></div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;        <span class="comment">// which is 0, 1 or 3 for a 4-D tensor, or 0 or 2 for a 3-D tensor.</span></div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;        concatDescriptor = <a class="code" href="namespacearmnn.xhtml#a733ae6b70d0bfa43433c3e7606992328">armnn::CreateDescriptorForConcatenation</a>(inputShapes.begin(),</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                                                                   inputShapes.end(),</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                                                                   concatDim);</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    } <span class="keywordflow">catch</span> (std::exception&amp; error)</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    {</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Error preparing concat descriptor. %s&quot;</span>, __func__, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>.what());</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    }</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160; </div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    <span class="comment">// Validate the output shape is correct given the input shapes based on the</span></div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="comment">// only valid concat dimension which is 0, 1 or 3 for a 4-D tensor, or 0 or 2 for a 3-D tensor.</span></div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <span class="keywordflow">if</span> (!isDynamicTensor)</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    {</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        <span class="keywordflow">if</span> (!ValidateConcatOutputShape(inputShapes, outputShape, concatDim))</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        {</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Error validating the output shape for concat&quot;</span>, __func__);</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;        }</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    }</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160; </div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    std::vector&lt;const armnn::TensorInfo*&gt; inputTensorInfos;</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    std::transform(inputHandles.begin(), inputHandles.end(), std::back_inserter(inputTensorInfos),</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;                   [](<span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>&amp; h)-&gt;const <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>*{ return &amp;h.GetTensorInfo(); });</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160; </div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    <span class="keywordtype">bool</span> isSupported  = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackendConcat;</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported){</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#ac8b3d64c6b38fe4bc59bd05959577fb6">IsConcatSupported</a>,</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                                   setBackendConcat,</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                                   inputTensorInfos,</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;                                   concatDescriptor);</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    };</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160; </div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    <span class="keywordflow">if</span> (!isDynamicTensor)</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    {</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    }</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    {</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    }</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160; </div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    {</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    }</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160; </div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddConcatLayer(concatDescriptor);</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackendConcat);</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(outputInfo);</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    <span class="comment">// Connect inputs to the layer</span></div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> numInputSlots = layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">GetNumInputSlots</a>();</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    assert(<span class="keyword">static_cast&lt;</span>std::size_t<span class="keyword">&gt;</span>(numInputSlots) == inputHandles.size());</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; numInputSlots; ++i)</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    {</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;        <span class="comment">// connect the input directly to the merge (concat) layer</span></div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;        inputHandles[<span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(i)].<a class="code" href="_test_utils_8cpp.xhtml#a0b295acb179f15eb3fb862b32008f782">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(i));</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    }</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160; </div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    <span class="comment">// Transpose the output shape</span></div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <span class="keyword">auto</span> transposeOutputShape = [&amp;](){</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;        <a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a> transposeDesc;</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;        transposeDesc.<a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">m_DimMappings</a> = permutationPair.second;</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTransposeInfo  = layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>();</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTransposeInfo = <a class="code" href="namespacearmnn_utils.xhtml#a428a9a6ffdf0e8d723b50c038c56c336">armnnUtils::TransposeTensorShape</a>(inputTransposeInfo,</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;                                                                                 permutationPair.second);</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;        isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;        <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackendTranspose;</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;                                   IsTransposeSupported,</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;                                   setBackendTranspose,</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;                                   inputTransposeInfo,</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;                                   outputTransposeInfo,</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;                                   transposeDesc);</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;        <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;        {</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;        }</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        <span class="comment">// Add permutation layer and connect the output to it, the permutation becomes the output layer</span></div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;        <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>&amp; deswizzleLayer = AddTransposeLayer(*data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>, layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0),</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                                                                     permutationPair.second);</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;        deswizzleLayer.<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackendTranspose);</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;        layer = &amp;deswizzleLayer;</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160; </div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    };</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160; </div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <span class="keywordflow">if</span> (needPermute &amp;&amp; !isDynamicTensor)</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    {</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;        transposeOutputShape();</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    }</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160; </div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    <span class="keywordflow">if</span> (inputsHaveBeenReshaped)</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    {</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;        <span class="keywordflow">if</span> (isDynamicTensor)</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;        {</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;            <span class="comment">// Infer the output shapes of concat if outputs are type 1 dynamic</span></div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ab4e57caf059794897b17266090ebcb39">IsTensorInfoSet</a>());</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;            <span class="keywordflow">if</span> (!ValidateConcatOutputShape(inputShapes,</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                                           layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>(),</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                                           concatDim))</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;            {</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Error validating the output shape for concat&quot;</span>, __func__);</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;            }</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;            transposeOutputShape();</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;        }</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160; </div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> afterConcatInfo = layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>();</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;        <span class="comment">// Undo the reshape knowing the amount of dimensions added</span></div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;        <span class="keywordflow">if</span> (tensorDimensionsAdded == 1)</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;        {</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;            afterConcatInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({afterConcatInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[1], afterConcatInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[2]}));</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;        }</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (tensorDimensionsAdded == 2)</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        {</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;            afterConcatInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>({afterConcatInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[2]}));</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;        }</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160; </div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;        <a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a> reshapeDescriptor;</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;        reshapeDescriptor.<a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml#a1178f4dafdda81f59c15145ec327f7d9">m_TargetShape</a> = afterConcatInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> concatInfo = layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>();</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160; </div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;        isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;        <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackendReshape2;</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;        <span class="keyword">auto</span> validateReshapeFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; afterConcatInfo, <span class="keywordtype">bool</span>&amp; isSupported){</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;            <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;                                       <a class="code" href="namespacearmnn.xhtml#af5014cbc003abcf201d4372b0012734c">IsReshapeSupported</a>,</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                                       data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                                       isSupported,</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                                       setBackendReshape2,</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;                                       concatInfo,</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;                                       afterConcatInfo,</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                                       reshapeDescriptor);</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;        };</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160; </div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(afterConcatInfo))</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;        {</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;            validateReshapeFunc(afterConcatInfo, isSupported);</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;        }</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;        {</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;            isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;        }</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160; </div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;        <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;        {</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;        }</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;        layer = &amp;AddReshapeLayer(*data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>, layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0), afterConcatInfo);</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;        layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackendReshape2);</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation,</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;                                            0,</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;                                            *layer,</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;                                            model,</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;                                            data,</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;                                            <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;                                            validateReshapeFunc);</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    }</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160; </div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;}</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160; </div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertConv2d(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;{</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertConv2d()&quot;</span>;</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160; </div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    {</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    }</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160; </div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    {</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    }</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160; </div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo  = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160; </div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> desc;</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = DataLayout::NHWC;</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160; </div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    <span class="comment">// Determine whether padding is implicit or explicit</span></div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    <span class="keywordtype">bool</span> implicitPadding = operation.inputs.size() == 7</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;                            || (operation.inputs.size() &gt;= 8</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;                                 &amp;&amp; <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 7, model)-&gt;type == OperandType::BOOL);</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160; </div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    <span class="keywordflow">if</span> (implicitPadding)</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;    {</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;        desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(operation, 7, model, data);</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    }</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (operation.inputs.size() &gt;= 10)</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;    {</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;        desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(operation, 10, model, data);</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    }</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160; </div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">PermutationVector</a> OHWIToOIHW = {0, 2, 3, 1};</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160; </div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;    <span class="comment">// ArmNN does not currently support non-fixed weights or bias</span></div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;    <span class="comment">// The NNAPI filter is always OHWI [depth_out, filter_height, filter_width, depth_in] but ArmNN expects the</span></div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;    <span class="comment">// filter&#39;s height and width indices to match the input&#39;s height and width indices so we permute it to OIHW if</span></div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;    <span class="comment">// the DataLayout is NCHW</span></div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160; </div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#a56e87ad879b142327b822beff44ca171">IsWeightsValid</a>(operation, 1, model) &amp;&amp; desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> == DataLayout::NCHW)</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    {</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has unsupported weights OperandLifeTime&quot;</span>, __func__);</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;    }</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160; </div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> weightsInput = (desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> == DataLayout::NCHW)</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;                                      ? <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 1, model, data, OHWIToOIHW, &amp;input)</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                                      : <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 1, model, data, <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>, &amp;input);</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160; </div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;    <span class="keywordflow">if</span> (!weightsInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    {</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;    }</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160; </div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> biasInput = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 2, model, data, <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>, &amp;input); <span class="comment">// 1D</span></div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    <span class="keywordflow">if</span> (!biasInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;    {</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;    }</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160; </div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;    biasInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a594af6896fa4bf3de9ee961fa8e2aade">SanitizeQuantizationScale</a>(weightsInput, input);</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> weightsInfo = weightsInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> biasInfo    = biasInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160; </div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;    ActivationFn activation;</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;    <span class="keywordflow">if</span> (implicitPadding)</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;    {</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;        ::android::nn::PaddingScheme paddingScheme;</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#aa9ef723ace8562b9636e8387a120fbde">GetInputPaddingScheme</a>(operation, 3, paddingScheme, model, data)</div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;              || !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 4, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>, model, data)</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;              || !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 5, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>, model, data)</div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;              || !<a class="code" href="namespacearmnn__driver.xhtml#ac092fff5c81f7938eea9a2479f014c66">GetInputActivationFunction</a>(operation, 6, activation, model, data)</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;              || !<a class="code" href="namespacearmnn__driver.xhtml#acfe37581bc8296b5d4cdb311b1e3f142">GetOptionalConvolutionDilationParams</a>(operation, 8, desc, model, data))</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;        {</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs (implicit padding)&quot;</span>, __func__);</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;        }</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160; </div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;        <a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml">armnnUtils::DataLayoutIndexed</a> dataLayoutIndexed(desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>);</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> widthIndex = dataLayoutIndexed.GetWidthIndex();</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> heightIndex = dataLayoutIndexed.GetHeightIndex();</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;        <span class="keyword">const</span> uint32_t kernelX = weightsInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[widthIndex];</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;        <span class="keyword">const</span> uint32_t kernelY = weightsInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[heightIndex];</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;        <span class="keyword">const</span> uint32_t inputX  = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[widthIndex];</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;        <span class="keyword">const</span> uint32_t inputY  = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[heightIndex];</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160; </div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;        CalcPadding(inputX, kernelX, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa3c6a77a963a98ccb8ea7b8fd008a8c1">m_DilationX</a>, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>, paddingScheme);</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;        CalcPadding(inputY, kernelY, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a302b688d88dd73cde0fb1faef6679907">m_DilationY</a>, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>, paddingScheme);</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160; </div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;    }</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (operation.inputs.size() &gt;= 10)</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    {</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;        <span class="comment">// explicit padding</span></div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 3, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>, model, data)</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;              || !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 4, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>, model, data)</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;              || !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 5, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>, model, data)</div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;              || !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 6, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>, model, data)</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;              || !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 7, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>, model, data)</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;              || !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 8, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>, model, data)</div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;              || !<a class="code" href="namespacearmnn__driver.xhtml#ac092fff5c81f7938eea9a2479f014c66">GetInputActivationFunction</a>(operation, 9, activation, model, data)</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;              || !<a class="code" href="namespacearmnn__driver.xhtml#acfe37581bc8296b5d4cdb311b1e3f142">GetOptionalConvolutionDilationParams</a>(operation, 11, desc, model, data))</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;        {</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs (explicit padding)&quot;</span>, __func__);</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;        }</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;    }</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    {</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Unsupported number of operation inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    }</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160; </div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;    desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a> biases(biasInfo);</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160; </div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    <span class="keywordtype">bool</span> requiresValidation = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* weightsOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 1, model);</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* biasOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 2, model);</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn__driver.xhtml#a7bf2bd59bc8ca21e0dd906044bfc2faf">IsConnectedToDequantize</a>(weightsInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a7a886c1735beae3f31f2062e1b327ac4">GetOutputSlot</a>())</div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;                || <a class="code" href="namespacearmnn__driver.xhtml#a7bf2bd59bc8ca21e0dd906044bfc2faf">IsConnectedToDequantize</a>(biasInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a7a886c1735beae3f31f2062e1b327ac4">GetOutputSlot</a>()))</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;    {</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;        <span class="comment">// Do not require validation for now. There will be an optimization step</span></div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;        <span class="comment">// [ConvertConstDequantisationLayersToConstLayers] will convert layers to Constant layers</span></div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;        <span class="comment">// then at the end of the optimization there will be layer supported validation.</span></div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;        requiresValidation = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertConv2d(): Weights and Biases are as INPUTS.&quot;</span>;</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    }</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160; </div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported) {</div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#aff785aa7c076b1d2f51f76fa0f0647e4">IsConvolution2dSupported</a>,</div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;                                   desc,</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;                                   weightsInfo,</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;                                   biases);</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;    };</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160; </div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;    <span class="keywordflow">if</span> (requiresValidation)</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;    {</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertConv2d(): Requires Validation!&quot;</span>;</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;        <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;        {</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;            validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;        }</div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;        {</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;            isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;        }</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160; </div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;        <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;        {</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;        }</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    }</div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160; </div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* startLayer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddConvolution2dLayer(desc);</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160; </div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    <span class="keywordflow">if</span> (!startLayer)</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    {</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: AddConvolution2dLayer failed&quot;</span>, __func__);</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;    }</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160; </div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    weightsInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    biasInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(2));</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160; </div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *startLayer, model, data, <span class="keyword">nullptr</span>, validateFunc, activation);</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;}</div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160; </div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertDepthToSpace(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;{</div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertDepthToSpace()&quot;</span>;</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160; </div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() )</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;    {</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    }</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160; </div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rank = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;    <span class="keywordflow">if</span> (rank != 4)</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;    {</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Only inputs with rank 4 are supported&quot;</span>, __func__);</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    }</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160; </div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;    {</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    }</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160; </div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160; </div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::DepthToSpaceDescriptor</a> descriptor;</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160; </div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::INT32, descriptor.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6c6b8957f1e176867e5fb05b1a1a1486">m_BlockSize</a>, model, data);</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6c6b8957f1e176867e5fb05b1a1a1486">m_BlockSize</a> &lt;= 1)</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;    {</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Block size must be at least 1 in all dimensions&quot;</span>);</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;    }</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160; </div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>;</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;    <span class="keywordflow">if</span> (Is12OrLaterOperand(*output))</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;    {</div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(operation, 2, model, data);</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;    }</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160; </div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;    {</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;                                   IsDepthToSpaceSupported,</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;                                   descriptor);</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;    };</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160; </div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    {</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;    }</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    {</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    }</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160; </div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;    {</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    }</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160; </div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddDepthToSpaceLayer(descriptor);</div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160; </div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;}</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160; </div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertDepthwiseConv2d(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;{</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertDepthwiseConv2d()&quot;</span>;</div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160; </div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160; </div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;    {</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    }</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160; </div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160; </div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;    {</div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;    }</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160; </div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo  = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160; </div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;    <span class="comment">// ArmNN does not currently support non-fixed weights or bias</span></div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;    <span class="comment">// Find the shape of the weights tensor. In AndroidNN this will be [ 1, H, W, I * M ]</span></div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* weightsOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 1, model);</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160; </div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;    <span class="keywordflow">if</span> (!weightsOperand)</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;    {</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read weights&quot;</span>, __func__);</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;    }</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;    <span class="comment">// Basic sanity check on the weights shape.</span></div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;    <span class="comment">// ANEURALNETWORKS_DEPTHWISE_CONV_2D specifies a 4-D tensor, of shape</span></div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;    <span class="comment">// [1, filter_height, filter_width, depth_out]</span></div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    <span class="keywordflow">if</span> (weightsOperand-&gt;dimensions[0] != 1)</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;    {</div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Filter operand dimension 0 is invalid, should be 1&quot;</span>, __func__);</div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;    }</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160; </div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;    <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a> desc;</div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;    desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>;</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160; </div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;    <span class="comment">// Determine whether padding is implicit or explicit</span></div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;    <span class="keywordtype">bool</span> implicitPadding = operation.inputs.size() == 8</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;                           || (operation.inputs.size() &gt;= 9</div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;                           &amp;&amp; <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 8, model)-&gt;type == OperandType::BOOL);</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160; </div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;    <span class="comment">// Look ahead to find the optional DataLayout, if present</span></div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;    <span class="keyword">const</span> uint32_t dataLayoutFlagIndex = implicitPadding ? 8 : 11;</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;    desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(operation, dataLayoutFlagIndex, model, data);</div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160; </div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;    <a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml">armnnUtils::DataLayoutIndexed</a> dataLayoutIndexed(desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>);</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> widthIndex  = dataLayoutIndexed.GetWidthIndex();</div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> heightIndex = dataLayoutIndexed.GetHeightIndex();</div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160; </div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> weightsInput = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 1, model, data, <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>, &amp;input);</div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;    <span class="keywordflow">if</span> (!weightsInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    {</div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;    }</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160; </div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* biasOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 2, model);</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;    <span class="keywordflow">if</span> (!biasOperand)</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;    {</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read bias&quot;</span>, __func__);</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    }</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160; </div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> biasInput = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 2, model, data, <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>, &amp;input); <span class="comment">// 1D</span></div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;    <span class="keywordflow">if</span> (!biasInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    {</div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;    }</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160; </div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;    biasInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a594af6896fa4bf3de9ee961fa8e2aade">SanitizeQuantizationScale</a>(weightsInput, input);</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> weightsInfo = weightsInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> biasInfo    = biasInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160; </div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;    ActivationFn activation;</div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;    <span class="keywordflow">if</span> (implicitPadding)</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;    {</div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;        ::android::nn::PaddingScheme paddingScheme;</div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#aa9ef723ace8562b9636e8387a120fbde">GetInputPaddingScheme</a>(operation, 3, paddingScheme, model, data)</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;                || !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 4, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>, model, data)</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;                || !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 5, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>, model, data)</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;                || !<a class="code" href="namespacearmnn__driver.xhtml#ac092fff5c81f7938eea9a2479f014c66">GetInputActivationFunction</a>(operation, 7, activation, model, data)</div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;                || !<a class="code" href="namespacearmnn__driver.xhtml#acfe37581bc8296b5d4cdb311b1e3f142">GetOptionalConvolutionDilationParams</a>(operation, 9, desc, model, data))</div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;        {</div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs (implicit padding)&quot;</span>, __func__);</div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;        }</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160; </div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;        <span class="keyword">const</span> uint32_t kernelX = weightsInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[2];</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;        <span class="keyword">const</span> uint32_t kernelY = weightsInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[1];</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;        <span class="keyword">const</span> uint32_t inputX  = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[widthIndex];</div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;        <span class="keyword">const</span> uint32_t inputY  = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[heightIndex];</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160; </div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;        CalcPadding(inputX, kernelX, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aa3c6a77a963a98ccb8ea7b8fd008a8c1">m_DilationX</a>, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>, paddingScheme);</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;        CalcPadding(inputY, kernelY, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a302b688d88dd73cde0fb1faef6679907">m_DilationY</a>, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>, paddingScheme);</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;    }</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (operation.inputs.size() &gt;= 11)</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;    {</div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;        <span class="comment">// explicit padding</span></div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 3, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>, model, data)</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;                || !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 4, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>, model, data)</div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;                || !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 5, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>, model, data)</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;                || !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 6, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>, model, data)</div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;                || !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 7, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>, model, data)</div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;                || !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 8, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>, model, data)</div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;                || !<a class="code" href="namespacearmnn__driver.xhtml#ac092fff5c81f7938eea9a2479f014c66">GetInputActivationFunction</a>(operation,  10, activation, model, data)</div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;                || !<a class="code" href="namespacearmnn__driver.xhtml#acfe37581bc8296b5d4cdb311b1e3f142">GetOptionalConvolutionDilationParams</a>(operation, 12, desc, model, data))</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;        {</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs (explicit padding)&quot;</span>, __func__);</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;        }</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;    }</div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;    {</div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Unsupported number of operation inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;    }</div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160; </div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;    desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a> biases(biasInfo);</div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160; </div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    <span class="keywordtype">bool</span> requiresValidation = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn__driver.xhtml#a7bf2bd59bc8ca21e0dd906044bfc2faf">IsConnectedToDequantize</a>(weightsInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a7a886c1735beae3f31f2062e1b327ac4">GetOutputSlot</a>()) || <a class="code" href="namespacearmnn__driver.xhtml#a7bf2bd59bc8ca21e0dd906044bfc2faf">IsConnectedToDequantize</a>(biasInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a7a886c1735beae3f31f2062e1b327ac4">GetOutputSlot</a>()))</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;    {</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;        <span class="comment">// Do not require validation for now. There will be an optimization step</span></div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;        <span class="comment">// [ConvertConstDequantisationLayersToConstLayers] will convert layers to Constant layers</span></div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;        <span class="comment">// then at the end of the optimization there will be layer supported validation.</span></div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;        requiresValidation = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertDepthwiseConv2d(): Weights and Biases are as INPUTS.&quot;</span>;</div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;    }</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160; </div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported) {</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a87f06345ddd902d027eb8f792ca8cdb4">IsDepthwiseConvolutionSupported</a>,</div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;                                   desc,</div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;                                   weightsInfo,</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;                                   biases);</div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;    };</div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160; </div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;    <span class="keywordflow">if</span> (requiresValidation)</div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;    {</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertDepthwiseConv2d(): Requires Validation!&quot;</span>;</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;        <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;        {</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;            validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;        }</div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;        {</div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;            isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;        }</div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160; </div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;        <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;        {</div>
<div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;        }</div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;    }</div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160; </div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* startLayer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddDepthwiseConvolution2dLayer(desc);</div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;    startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160; </div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    <span class="keywordflow">if</span> (!startLayer)</div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;    {</div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: AddDepthwiseConvolution2dLayer failed&quot;</span>, __func__);</div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;    }</div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160; </div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160; </div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;    <span class="comment">// Connect weights and bias inputs</span></div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;    weightsInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;    biasInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(2));</div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160; </div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *startLayer, model, data, <span class="keyword">nullptr</span>, validateFunc, activation);</div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;}</div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160; </div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertDequantize(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;{</div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertDequantize()&quot;</span>;</div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160; </div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;    {</div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid input&quot;</span>, __func__);</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;    }</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160; </div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo  = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;unsigned int&gt;</a>&amp; quantizationDim = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">GetQuantizationDim</a>();</div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;    <span class="keywordflow">if</span> (quantizationDim.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>() &amp;&amp; quantizationDim.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>() != 0)</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;    {</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has quantization dimension different than 0&quot;</span>, __func__);</div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;    }</div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160; </div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* <span class="keyword">const</span> outputOperand = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;    <span class="keywordflow">if</span> (!outputOperand)</div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;    {</div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid outputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    }</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160; </div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*outputOperand);</div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160; </div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    {</div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a1b4b4304198668d3af8e9d0c40d9343d">IsDequantizeSupported</a>,</div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;                                   outputInfo);</div>
<div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;    };</div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160; </div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;    {</div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;    }</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;    {</div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;    }</div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160; </div>
<div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;    {</div>
<div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;    }</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160; </div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddDequantizeLayer();</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160; </div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;}</div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160; </div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertDiv(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;{</div>
<div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertDiv()&quot;</span>;</div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160; </div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input0 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input1 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 1, model, data);</div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160; </div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;    <span class="keywordflow">if</span> (!input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() || !input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    {</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    }</div>
<div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160; </div>
<div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;    <span class="comment">// The FuseActivation parameter is always the input index 2</span></div>
<div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    <span class="comment">// and it should be optional</span></div>
<div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;    ActivationFn activationFunction;</div>
<div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#acd62ec697055015572a6ba61eaba4f1a">GetOptionalInputActivation</a>(operation, 2, activationFunction, model, data))</div>
<div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;    {</div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;    }</div>
<div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160; </div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    {</div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;    }</div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160; </div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160; </div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;    {</div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a3378acd6bc867577ee4bf1657945f1b5">IsDivisionSupported</a>,</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;                                   input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;                                   input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;                                   outputInfo);</div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;    };</div>
<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160; </div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;    {</div>
<div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;    }</div>
<div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;    {</div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;    }</div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160; </div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;    {</div>
<div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;    }</div>
<div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160; </div>
<div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> startLayer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddDivisionLayer();</div>
<div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;    startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160; </div>
<div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;    <span class="keywordtype">bool</span> isReshapeSupported = BroadcastTensor(input0, input1, startLayer, data);</div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;    <span class="keywordflow">if</span> (!isReshapeSupported)</div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;    {</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    }</div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160; </div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *startLayer, model,</div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;                                        data, <span class="keyword">nullptr</span>, validateFunc, activationFunction);</div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;}</div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160; </div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertElementwiseUnary(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div>
<div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;                                        <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data,</div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;                                        <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8">UnaryOperation</a> unaryOperation)</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;{</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertElementwiseUnary()&quot;</span>;</div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;unaryOperation = &quot;</span> &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a6dac966f265381903c8ef4f392becced">GetUnaryOperationAsCString</a>(unaryOperation);</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160; </div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160; </div>
<div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;    {</div>
<div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid input&quot;</span>, __func__);</div>
<div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;    }</div>
<div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160; </div>
<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;    {</div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;    }</div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160; </div>
<div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160; </div>
<div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;    <a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> descriptor(unaryOperation);</div>
<div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160; </div>
<div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;    {</div>
<div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;                                   IsElementwiseUnarySupported,</div>
<div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;                                   descriptor);</div>
<div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;    };</div>
<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160; </div>
<div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;    {</div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;    }</div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;    {</div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;    }</div>
<div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160; </div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;    {</div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;    }</div>
<div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160; </div>
<div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddElementwiseUnaryLayer(descriptor);</div>
<div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160; </div>
<div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;}</div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160; </div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertElu(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;{</div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertElu()&quot;</span>;</div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160; </div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input0 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;    <span class="keywordflow">if</span> (!input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;    {</div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;    }</div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160; </div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;    <span class="comment">// Determine data type of input tensor</span></div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a53bfb6eb38a90244ba166b641a6965d9">OperandType</a> inputType;</div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#adfc2c5b834fdb89e5458ddb1d9aa7830">GetOperandType</a>(operation, 0, model, inputType))</div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;    {</div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;    }</div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160; </div>
<div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> desc;</div>
<div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;    desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = ActivationFunction::Elu;</div>
<div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160; </div>
<div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;    <span class="comment">// Read alpha</span></div>
<div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;    <span class="keywordflow">if</span> (inputType == OperandType::TENSOR_FLOAT16)</div>
<div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;    {</div>
<div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">Half</a> alpha;</div>
<div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160; </div>
<div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::FLOAT16, alpha, model, data))</div>
<div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;        {</div>
<div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs (FLOAT16)&quot;</span>, __func__);</div>
<div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;        }</div>
<div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160; </div>
<div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;        desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(alpha);</div>
<div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;    }</div>
<div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (inputType == OperandType::TENSOR_FLOAT32)</div>
<div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;    {</div>
<div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::FLOAT32, desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a>, model, data))</div>
<div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;        {</div>
<div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs (FLOAT32)&quot;</span>, __func__);</div>
<div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;        }</div>
<div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;    }</div>
<div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;    {</div>
<div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Unsupported input tensor type: %d&quot;</span>, __func__, inputType);</div>
<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;    }</div>
<div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160; </div>
<div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a28243ca97e12ccb50e01f03d313ecc86">return ::ConvertToActivation</a>(operation, __func__, desc, model, data);</div>
<div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;}</div>
<div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160; </div>
<div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertExpandDims(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;{</div>
<div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertExpandDims()&quot;</span>;</div>
<div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160; </div>
<div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160; </div>
<div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;    {</div>
<div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid input&quot;</span>, __func__);</div>
<div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;    }</div>
<div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160; </div>
<div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;    {</div>
<div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid output&quot;</span>, __func__);</div>
<div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;    }</div>
<div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160; </div>
<div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160; </div>
<div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;    int32_t axis;</div>
<div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::INT32, axis, model, data))</div>
<div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;    {</div>
<div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: failed to get axis input value&quot;</span>, __func__);</div>
<div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;    }</div>
<div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160; </div>
<div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> targetShape;</div>
<div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160; </div>
<div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;    {</div>
<div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;        targetShape = <a class="code" href="namespacearmnn_utils.xhtml#a0d3b1be320610515e0cac8d745d9f8c2">armnnUtils::ExpandDims</a>(input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>(), axis);</div>
<div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;    }</div>
<div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp; e)</div>
<div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;    {</div>
<div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: %s&quot;</span>, __func__, e.what());</div>
<div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;    }</div>
<div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160; </div>
<div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;    <a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> reshapeDescriptor;</div>
<div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;    reshapeDescriptor.<a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml#a1178f4dafdda81f59c15145ec327f7d9">m_TargetShape</a> = targetShape;</div>
<div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160; </div>
<div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;    {</div>
<div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#af5014cbc003abcf201d4372b0012734c">IsReshapeSupported</a>,</div>
<div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;                                   input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;                                   reshapeDescriptor);</div>
<div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;    };</div>
<div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160; </div>
<div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;    {</div>
<div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;        <span class="keywordflow">if</span> (targetShape != outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>())</div>
<div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;        {</div>
<div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Shape of the output operand does not match the resolved expanded shape&quot;</span>, __func__);</div>
<div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;        }</div>
<div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;    }</div>
<div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;    {</div>
<div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;    }</div>
<div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160; </div>
<div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;    {</div>
<div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;    }</div>
<div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160; </div>
<div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddReshapeLayer(reshapeDescriptor);</div>
<div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160; </div>
<div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;}</div>
<div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160; </div>
<div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertFill(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;{</div>
<div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertFill()&quot;</span>;</div>
<div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;    {</div>
<div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;    }</div>
<div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160; </div>
<div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;    {</div>
<div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output&quot;</span>, __func__);</div>
<div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;    }</div>
<div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160; </div>
<div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo  = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;    {</div>
<div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Dynamic output tensors are not supported&quot;</span>, __func__);</div>
<div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;    }</div>
<div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160; </div>
<div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;    <span class="comment">// Determine data type of output tensor</span></div>
<div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a53bfb6eb38a90244ba166b641a6965d9">OperandType</a> outputType = output-&gt;type;</div>
<div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;    <a class="code" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> descriptor;</div>
<div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;    <span class="comment">// Read the scalar fill value</span></div>
<div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;    <span class="keywordflow">if</span> (outputType == OperandType::TENSOR_FLOAT16)</div>
<div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;    {</div>
<div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">Half</a> value;</div>
<div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160; </div>
<div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::FLOAT16, value, model, data))</div>
<div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;        {</div>
<div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs %d&quot;</span>, __func__, outputType);</div>
<div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;        }</div>
<div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160; </div>
<div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_fill_descriptor.xhtml#ab3ebc5cf4a617d43371a4cb7fecdeb32">m_Value</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(value);</div>
<div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;    }</div>
<div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (outputType == OperandType::TENSOR_FLOAT32)</div>
<div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;    {</div>
<div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::FLOAT32, descriptor.<a class="code" href="structarmnn_1_1_fill_descriptor.xhtml#ab3ebc5cf4a617d43371a4cb7fecdeb32">m_Value</a>, model, data))</div>
<div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;        {</div>
<div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs %d&quot;</span>, __func__, outputType);</div>
<div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;        }</div>
<div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;    }</div>
<div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (outputType == OperandType::TENSOR_INT32)</div>
<div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;    {</div>
<div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;        int32_t value;</div>
<div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160; </div>
<div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::INT32, value, model, data))</div>
<div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;        {</div>
<div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs %d&quot;</span>, __func__, outputType);</div>
<div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;        }</div>
<div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160; </div>
<div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_fill_descriptor.xhtml#ab3ebc5cf4a617d43371a4cb7fecdeb32">m_Value</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(value);</div>
<div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;    }</div>
<div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;    {</div>
<div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Unsupported input tensor type: %d&quot;</span>, __func__, outputType);</div>
<div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;    }</div>
<div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160; </div>
<div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;    <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;                               IsFillSupported,</div>
<div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;                               data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;                               isSupported,</div>
<div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;                               setBackend,</div>
<div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;                               inputInfo,</div>
<div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;                               outputInfo,</div>
<div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;                               descriptor);</div>
<div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;    {</div>
<div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;    }</div>
<div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160; </div>
<div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddFillLayer(descriptor);</div>
<div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160; </div>
<div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data);</div>
<div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;}</div>
<div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160; </div>
<div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertFloor(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;{</div>
<div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertFloor()&quot;</span>;</div>
<div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;    {</div>
<div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;    }</div>
<div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160; </div>
<div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* <span class="keyword">const</span> outputOperand = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;    <span class="keywordflow">if</span> (!outputOperand)</div>
<div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;    {</div>
<div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid outputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;    }</div>
<div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160; </div>
<div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*outputOperand);</div>
<div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160; </div>
<div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;    {</div>
<div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a2b6003e1d9226301e4badcac0b53c0ef">IsFloorSupported</a>,</div>
<div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;                                   input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;                                   outputInfo);</div>
<div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;    };</div>
<div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160; </div>
<div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;    {</div>
<div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;    }</div>
<div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;    {</div>
<div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;    }</div>
<div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160; </div>
<div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;    {</div>
<div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;    }</div>
<div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160; </div>
<div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddFloorLayer();</div>
<div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160; </div>
<div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;}</div>
<div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160; </div>
<div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertFullyConnected(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;{</div>
<div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertFullyConnected()&quot;</span>;</div>
<div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;    {</div>
<div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;    }</div>
<div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160; </div>
<div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;    {</div>
<div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;    }</div>
<div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160; </div>
<div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo  = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160; </div>
<div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> weightsInput = <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>();</div>
<div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* weightsOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 1, model);</div>
<div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;    <span class="keywordflow">if</span> (!weightsOperand)</div>
<div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;    {</div>
<div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read weights&quot;</span>, __func__);</div>
<div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;    }</div>
<div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160; </div>
<div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;    <span class="comment">// If weights are constant a separate constant layer will be created to store data.</span></div>
<div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;    <span class="comment">// Otherwise handle non const weights as inputs.</span></div>
<div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;    weightsInput = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 1, model, data);</div>
<div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;    <span class="keywordflow">if</span> (!weightsInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160;    {</div>
<div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;    }</div>
<div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160; </div>
<div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> biasInput = <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a>();</div>
<div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* biasOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 2, model);</div>
<div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;    <span class="keywordflow">if</span> (!biasOperand)</div>
<div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;    {</div>
<div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read bias&quot;</span>, __func__);</div>
<div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;    }</div>
<div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160; </div>
<div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;    <span class="comment">// If bias are constant a separate constant layer will be created to store data.</span></div>
<div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;    <span class="comment">// Otherwise handle non const bias as inputs.</span></div>
<div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;    biasInput = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 2, model, data); <span class="comment">// 1D</span></div>
<div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;    <span class="keywordflow">if</span> (!biasInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160;    {</div>
<div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;    }</div>
<div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160; </div>
<div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> weightsInfo = weightsInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> reshapedInfo = inputInfo;</div>
<div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;    {</div>
<div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;        reshapedInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(FlattenFullyConnectedInput(inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>(), weightsInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()));</div>
<div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;    }</div>
<div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp; e)</div>
<div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;    {</div>
<div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: %s&quot;</span>, __func__, e.what());</div>
<div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160;    }</div>
<div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160; </div>
<div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;    <span class="comment">// Ensuring that the bias value is within 1% of the weights input (small float differences can exist)</span></div>
<div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> biasInfo = biasInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;    SanitizeBiasQuantizationScale(biasInfo, weightsInfo, reshapedInfo);</div>
<div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160; </div>
<div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160;    ActivationFn activationFunction;</div>
<div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#ac092fff5c81f7938eea9a2479f014c66">GetInputActivationFunction</a>(operation, 3, activationFunction, model, data))</div>
<div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;    {</div>
<div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l01966"></a><span class="lineno"> 1966</span>&#160;    }</div>
<div class="line"><a name="l01967"></a><span class="lineno"> 1967</span>&#160; </div>
<div class="line"><a name="l01968"></a><span class="lineno"> 1968</span>&#160;    <a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a> desc;</div>
<div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160;    desc.<a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml#a281fcaec86e17c97f7b8402633f6b55a">m_TransposeWeightMatrix</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;    desc.<a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a>           = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;    desc.<a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml#a2d3dcfc10f90adedc995b64211dab6e9">m_ConstantWeights</a>       = <a class="code" href="namespacearmnn__driver.xhtml#a9ddfceb499ef7b3d01053399bc79b852">IsOperandConstant</a>(*weightsOperand);</div>
<div class="line"><a name="l01972"></a><span class="lineno"> 1972</span>&#160; </div>
<div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;    {</div>
<div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;        <span class="keywordflow">if</span> (!VerifyFullyConnectedShapes(reshapedInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>(),</div>
<div class="line"><a name="l01978"></a><span class="lineno"> 1978</span>&#160;                                        weightsInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>(),</div>
<div class="line"><a name="l01979"></a><span class="lineno"> 1979</span>&#160;                                        outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>(),</div>
<div class="line"><a name="l01980"></a><span class="lineno"> 1980</span>&#160;                                        desc.<a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml#a281fcaec86e17c97f7b8402633f6b55a">m_TransposeWeightMatrix</a>))</div>
<div class="line"><a name="l01981"></a><span class="lineno"> 1981</span>&#160;        {</div>
<div class="line"><a name="l01982"></a><span class="lineno"> 1982</span>&#160;            isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01983"></a><span class="lineno"> 1983</span>&#160;            Fail(<span class="stringliteral">&quot;%s: Expected outputShape does not match actual outputShape&quot;</span>, __func__);</div>
<div class="line"><a name="l01984"></a><span class="lineno"> 1984</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;        }</div>
<div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160; </div>
<div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a0a72d1f8a0d43ee551c7ac654f8816fa">IsFullyConnectedSupported</a>,</div>
<div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;                                   reshapedInfo,</div>
<div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;                                   weightsInfo,</div>
<div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;                                   biasInfo,</div>
<div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;                                   desc);</div>
<div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;    };</div>
<div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160; </div>
<div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;    {</div>
<div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160;    }</div>
<div class="line"><a name="l02003"></a><span class="lineno"> 2003</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02004"></a><span class="lineno"> 2004</span>&#160;    {</div>
<div class="line"><a name="l02005"></a><span class="lineno"> 2005</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160;    }</div>
<div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160; </div>
<div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;    {</div>
<div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;    }</div>
<div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160; </div>
<div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;    <span class="comment">// Add FullyConnected layer. Weights and bias will be connected as constant layers or non const inputs.</span></div>
<div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* startLayer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddFullyConnectedLayer(desc);</div>
<div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;    startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160; </div>
<div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160;    <span class="keywordflow">if</span> (inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &gt; 2U)</div>
<div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;    {</div>
<div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;        <a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a> reshapeDescriptor;</div>
<div class="line"><a name="l02020"></a><span class="lineno"> 2020</span>&#160;        reshapeDescriptor.<a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml#a1178f4dafdda81f59c15145ec327f7d9">m_TargetShape</a> = reshapedInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div>
<div class="line"><a name="l02021"></a><span class="lineno"> 2021</span>&#160; </div>
<div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;        <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* reshapeLayer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddReshapeLayer(reshapeDescriptor);</div>
<div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;        assert(reshapeLayer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;        input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(reshapeLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;        reshapeLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(reshapedInfo);</div>
<div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;        reshapeLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160;    }</div>
<div class="line"><a name="l02028"></a><span class="lineno"> 2028</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02029"></a><span class="lineno"> 2029</span>&#160;    {</div>
<div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;        input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l02031"></a><span class="lineno"> 2031</span>&#160;    }</div>
<div class="line"><a name="l02032"></a><span class="lineno"> 2032</span>&#160; </div>
<div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;    <span class="comment">// Connect weights and bias inputs</span></div>
<div class="line"><a name="l02034"></a><span class="lineno"> 2034</span>&#160;    weightsInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div>
<div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160;    biasInput.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(2));</div>
<div class="line"><a name="l02036"></a><span class="lineno"> 2036</span>&#160; </div>
<div class="line"><a name="l02037"></a><span class="lineno"> 2037</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *startLayer, model,</div>
<div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160;                                        data, <span class="keyword">nullptr</span>, validateFunc, activationFunction);</div>
<div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;}</div>
<div class="line"><a name="l02040"></a><span class="lineno"> 2040</span>&#160; </div>
<div class="line"><a name="l02041"></a><span class="lineno"> 2041</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertGather(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l02042"></a><span class="lineno"> 2042</span>&#160;{</div>
<div class="line"><a name="l02043"></a><span class="lineno"> 2043</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertGather()&quot;</span>;</div>
<div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160; </div>
<div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l02046"></a><span class="lineno"> 2046</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l02047"></a><span class="lineno"> 2047</span>&#160;    {</div>
<div class="line"><a name="l02048"></a><span class="lineno"> 2048</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid input&quot;</span>, __func__);</div>
<div class="line"><a name="l02049"></a><span class="lineno"> 2049</span>&#160;    }</div>
<div class="line"><a name="l02050"></a><span class="lineno"> 2050</span>&#160;    <span class="keyword">auto</span> inputDimensions = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160; </div>
<div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> indices = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 2, model, data);</div>
<div class="line"><a name="l02053"></a><span class="lineno"> 2053</span>&#160;    <span class="keywordflow">if</span> (!indices.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l02054"></a><span class="lineno"> 2054</span>&#160;    {</div>
<div class="line"><a name="l02055"></a><span class="lineno"> 2055</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid indices&quot;</span>, __func__);</div>
<div class="line"><a name="l02056"></a><span class="lineno"> 2056</span>&#160;    }</div>
<div class="line"><a name="l02057"></a><span class="lineno"> 2057</span>&#160;    <span class="keyword">auto</span> indicesDimensions = indices.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>().<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l02058"></a><span class="lineno"> 2058</span>&#160; </div>
<div class="line"><a name="l02059"></a><span class="lineno"> 2059</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l02060"></a><span class="lineno"> 2060</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l02061"></a><span class="lineno"> 2061</span>&#160;    {</div>
<div class="line"><a name="l02062"></a><span class="lineno"> 2062</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid output&quot;</span>, __func__);</div>
<div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;    }</div>
<div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l02065"></a><span class="lineno"> 2065</span>&#160;    <span class="keyword">auto</span> outputDimensions = outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l02066"></a><span class="lineno"> 2066</span>&#160;    <span class="keywordflow">if</span> (outputDimensions != inputDimensions + indicesDimensions - 1)</div>
<div class="line"><a name="l02067"></a><span class="lineno"> 2067</span>&#160;    {</div>
<div class="line"><a name="l02068"></a><span class="lineno"> 2068</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid output dimensions: %d. Output must be an (%d + %d - 1)-D tensor&quot;</span>,</div>
<div class="line"><a name="l02069"></a><span class="lineno"> 2069</span>&#160;                     __func__, outputDimensions, inputDimensions, indicesDimensions);</div>
<div class="line"><a name="l02070"></a><span class="lineno"> 2070</span>&#160;    }</div>
<div class="line"><a name="l02071"></a><span class="lineno"> 2071</span>&#160; </div>
<div class="line"><a name="l02072"></a><span class="lineno"> 2072</span>&#160;    int32_t axis;</div>
<div class="line"><a name="l02073"></a><span class="lineno"> 2073</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::INT32, axis, model, data))</div>
<div class="line"><a name="l02074"></a><span class="lineno"> 2074</span>&#160;    {</div>
<div class="line"><a name="l02075"></a><span class="lineno"> 2075</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid or unsupported axis operand&quot;</span>, __func__);</div>
<div class="line"><a name="l02076"></a><span class="lineno"> 2076</span>&#160;    }</div>
<div class="line"><a name="l02077"></a><span class="lineno"> 2077</span>&#160;    <span class="keywordflow">if</span> (((axis &lt; -inputDimensions) &amp;&amp; (axis &lt; 0)) || ((axis &gt;= inputDimensions) &amp;&amp; (axis &gt; 0)))</div>
<div class="line"><a name="l02078"></a><span class="lineno"> 2078</span>&#160;    {</div>
<div class="line"><a name="l02079"></a><span class="lineno"> 2079</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid axis: %d. It is out of bounds [-%d, %d))&quot;</span>, __func__, axis,</div>
<div class="line"><a name="l02080"></a><span class="lineno"> 2080</span>&#160;                    inputDimensions, inputDimensions);</div>
<div class="line"><a name="l02081"></a><span class="lineno"> 2081</span>&#160;    }</div>
<div class="line"><a name="l02082"></a><span class="lineno"> 2082</span>&#160; </div>
<div class="line"><a name="l02083"></a><span class="lineno"> 2083</span>&#160;    <a class="code" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> desc;</div>
<div class="line"><a name="l02084"></a><span class="lineno"> 2084</span>&#160;    desc.<a class="code" href="structarmnn_1_1_gather_descriptor.xhtml#a35d11c7d509d1adbae1ae01c58394a7f">m_Axis</a> = axis;</div>
<div class="line"><a name="l02085"></a><span class="lineno"> 2085</span>&#160; </div>
<div class="line"><a name="l02086"></a><span class="lineno"> 2086</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02087"></a><span class="lineno"> 2087</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;    {</div>
<div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l02091"></a><span class="lineno"> 2091</span>&#160;                                   IsGatherSupported,</div>
<div class="line"><a name="l02092"></a><span class="lineno"> 2092</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l02094"></a><span class="lineno"> 2094</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;                                   input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;                                   indices.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;                                   desc);</div>
<div class="line"><a name="l02099"></a><span class="lineno"> 2099</span>&#160;    };</div>
<div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160; </div>
<div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;    {</div>
<div class="line"><a name="l02103"></a><span class="lineno"> 2103</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;    }</div>
<div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;    {</div>
<div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;    }</div>
<div class="line"><a name="l02109"></a><span class="lineno"> 2109</span>&#160; </div>
<div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;    {</div>
<div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;    }</div>
<div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160; </div>
<div class="line"><a name="l02115"></a><span class="lineno"> 2115</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddGatherLayer(desc);</div>
<div class="line"><a name="l02116"></a><span class="lineno"> 2116</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l02117"></a><span class="lineno"> 2117</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;    indices.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div>
<div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160; </div>
<div class="line"><a name="l02121"></a><span class="lineno"> 2121</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l02122"></a><span class="lineno"> 2122</span>&#160;}</div>
<div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160; </div>
<div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertGroupedConv2d(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l02125"></a><span class="lineno"> 2125</span>&#160;{</div>
<div class="line"><a name="l02126"></a><span class="lineno"> 2126</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertGroupedConv2d()&quot;</span>;</div>
<div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;    <span class="comment">// Parse data</span></div>
<div class="line"><a name="l02129"></a><span class="lineno"> 2129</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l02131"></a><span class="lineno"> 2131</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;    {</div>
<div class="line"><a name="l02133"></a><span class="lineno"> 2133</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l02134"></a><span class="lineno"> 2134</span>&#160;    }</div>
<div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo  = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l02136"></a><span class="lineno"> 2136</span>&#160; </div>
<div class="line"><a name="l02137"></a><span class="lineno"> 2137</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l02138"></a><span class="lineno"> 2138</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;    {</div>
<div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;    }</div>
<div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160; </div>
<div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160;    <span class="comment">// Look ahead to determine data layout</span></div>
<div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout = DataLayout::NHWC;</div>
<div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;    <span class="keywordflow">if</span> (operation.inputs.size() == 12)</div>
<div class="line"><a name="l02147"></a><span class="lineno"> 2147</span>&#160;    {</div>
<div class="line"><a name="l02148"></a><span class="lineno"> 2148</span>&#160;        dataLayout = <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(operation, 11, model, data);</div>
<div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160;    }</div>
<div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;    {</div>
<div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;        dataLayout = <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(operation, 8, model, data);</div>
<div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;    }</div>
<div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160; </div>
<div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;    <span class="comment">// NOTE:</span></div>
<div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;    <span class="comment">// NNAPI weights are always OHWI, i.e. [depth_out, filter_height, filter_width, depth_group],</span></div>
<div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;    <span class="comment">// but Arm NN expects the filter&#39;s height and width indices to match the input&#39;s height and</span></div>
<div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160;    <span class="comment">// width indices so when the DataLayout is NCHW, we need to permute the weights to OIHW</span></div>
<div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">PermutationVector</a> ohwiToOihw = { 0u, 2u, 3u, 1u };</div>
<div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> weightsPin = (dataLayout == DataLayout::NCHW) ?</div>
<div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;                                      <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 1,</div>
<div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;                                                                                       model, data, ohwiToOihw) :</div>
<div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;                                      <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 1, model, data);</div>
<div class="line"><a name="l02164"></a><span class="lineno"> 2164</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> biasesPin  =</div>
<div class="line"><a name="l02165"></a><span class="lineno"> 2165</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 2, model, data);</div>
<div class="line"><a name="l02166"></a><span class="lineno"> 2166</span>&#160;    <span class="keywordflow">if</span> (!weightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() || !biasesPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;    {</div>
<div class="line"><a name="l02168"></a><span class="lineno"> 2168</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l02169"></a><span class="lineno"> 2169</span>&#160;    }</div>
<div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160; </div>
<div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> weights = weightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a971023b9874b0d773e8aa4c6d6744a2b">GetConstTensor</a>();</div>
<div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> biases  = biasesPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a971023b9874b0d773e8aa4c6d6744a2b">GetConstTensor</a>();</div>
<div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;    SanitizeBiasQuantizationScale(biases.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>(), weights.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>(), inputInfo);</div>
<div class="line"><a name="l02174"></a><span class="lineno"> 2174</span>&#160; </div>
<div class="line"><a name="l02175"></a><span class="lineno"> 2175</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inputShape   = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div>
<div class="line"><a name="l02176"></a><span class="lineno"> 2176</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; outputShape  = outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div>
<div class="line"><a name="l02177"></a><span class="lineno"> 2177</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; weightsShape = weights.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div>
<div class="line"><a name="l02178"></a><span class="lineno"> 2178</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; biasesShape  = biases.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div>
<div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160; </div>
<div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;    <a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml">armnnUtils::DataLayoutIndexed</a> dataLayoutIndexed(dataLayout);</div>
<div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channelsIndex = dataLayoutIndexed.GetChannelsIndex();</div>
<div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> heightIndex   = dataLayoutIndexed.GetHeightIndex();</div>
<div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> widthIndex    = dataLayoutIndexed.GetWidthIndex();</div>
<div class="line"><a name="l02184"></a><span class="lineno"> 2184</span>&#160; </div>
<div class="line"><a name="l02185"></a><span class="lineno"> 2185</span>&#160;    <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> desc;</div>
<div class="line"><a name="l02186"></a><span class="lineno"> 2186</span>&#160;    desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>  = dataLayout;</div>
<div class="line"><a name="l02187"></a><span class="lineno"> 2187</span>&#160;    desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02188"></a><span class="lineno"> 2188</span>&#160; </div>
<div class="line"><a name="l02189"></a><span class="lineno"> 2189</span>&#160;    <span class="keywordtype">int</span> numGroups;</div>
<div class="line"><a name="l02190"></a><span class="lineno"> 2190</span>&#160;    ActivationFn activation;</div>
<div class="line"><a name="l02191"></a><span class="lineno"> 2191</span>&#160; </div>
<div class="line"><a name="l02192"></a><span class="lineno"> 2192</span>&#160;    <span class="keywordflow">if</span> (operation.inputs.size() == 12)</div>
<div class="line"><a name="l02193"></a><span class="lineno"> 2193</span>&#160;    {</div>
<div class="line"><a name="l02194"></a><span class="lineno"> 2194</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 3, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>, model, data) ||</div>
<div class="line"><a name="l02195"></a><span class="lineno"> 2195</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 4, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>, model, data) ||</div>
<div class="line"><a name="l02196"></a><span class="lineno"> 2196</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 5, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>, model, data) ||</div>
<div class="line"><a name="l02197"></a><span class="lineno"> 2197</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 6, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>, model, data) ||</div>
<div class="line"><a name="l02198"></a><span class="lineno"> 2198</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 7, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>, model, data) ||</div>
<div class="line"><a name="l02199"></a><span class="lineno"> 2199</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 8, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>, model, data) ||</div>
<div class="line"><a name="l02200"></a><span class="lineno"> 2200</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 9, OperandType::INT32, numGroups, model, data) ||</div>
<div class="line"><a name="l02201"></a><span class="lineno"> 2201</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#ac092fff5c81f7938eea9a2479f014c66">GetInputActivationFunction</a>(operation, 10, activation, model, data))</div>
<div class="line"><a name="l02202"></a><span class="lineno"> 2202</span>&#160;        {</div>
<div class="line"><a name="l02203"></a><span class="lineno"> 2203</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs (explicit padding)&quot;</span>, __func__);</div>
<div class="line"><a name="l02204"></a><span class="lineno"> 2204</span>&#160;        }</div>
<div class="line"><a name="l02205"></a><span class="lineno"> 2205</span>&#160; </div>
<div class="line"><a name="l02206"></a><span class="lineno"> 2206</span>&#160;    }</div>
<div class="line"><a name="l02207"></a><span class="lineno"> 2207</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (operation.inputs.size() == 9)</div>
<div class="line"><a name="l02208"></a><span class="lineno"> 2208</span>&#160;    {</div>
<div class="line"><a name="l02209"></a><span class="lineno"> 2209</span>&#160;        ::android::nn::PaddingScheme paddingScheme;</div>
<div class="line"><a name="l02210"></a><span class="lineno"> 2210</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#aa9ef723ace8562b9636e8387a120fbde">GetInputPaddingScheme</a>(operation, 3, paddingScheme, model, data) ||</div>
<div class="line"><a name="l02211"></a><span class="lineno"> 2211</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 4, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>, model, data) ||</div>
<div class="line"><a name="l02212"></a><span class="lineno"> 2212</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 5, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>, model, data) ||</div>
<div class="line"><a name="l02213"></a><span class="lineno"> 2213</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 6, OperandType::INT32, numGroups, model, data) ||</div>
<div class="line"><a name="l02214"></a><span class="lineno"> 2214</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#ac092fff5c81f7938eea9a2479f014c66">GetInputActivationFunction</a>(operation, 7, activation, model, data))</div>
<div class="line"><a name="l02215"></a><span class="lineno"> 2215</span>&#160;        {</div>
<div class="line"><a name="l02216"></a><span class="lineno"> 2216</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs (implicit padding)&quot;</span>, __func__);</div>
<div class="line"><a name="l02217"></a><span class="lineno"> 2217</span>&#160;        }</div>
<div class="line"><a name="l02218"></a><span class="lineno"> 2218</span>&#160; </div>
<div class="line"><a name="l02219"></a><span class="lineno"> 2219</span>&#160;        <span class="keyword">const</span> uint32_t inputX = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[widthIndex];</div>
<div class="line"><a name="l02220"></a><span class="lineno"> 2220</span>&#160;        <span class="keyword">const</span> uint32_t inputY = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[heightIndex];</div>
<div class="line"><a name="l02221"></a><span class="lineno"> 2221</span>&#160; </div>
<div class="line"><a name="l02222"></a><span class="lineno"> 2222</span>&#160;        <span class="keyword">const</span> uint32_t kernelX = weightsShape[widthIndex];</div>
<div class="line"><a name="l02223"></a><span class="lineno"> 2223</span>&#160;        <span class="keyword">const</span> uint32_t kernelY = weightsShape[heightIndex];</div>
<div class="line"><a name="l02224"></a><span class="lineno"> 2224</span>&#160; </div>
<div class="line"><a name="l02225"></a><span class="lineno"> 2225</span>&#160;        CalcPadding(inputX, kernelX, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>, paddingScheme);</div>
<div class="line"><a name="l02226"></a><span class="lineno"> 2226</span>&#160;        CalcPadding(inputY, kernelY, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>, desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>, paddingScheme);</div>
<div class="line"><a name="l02227"></a><span class="lineno"> 2227</span>&#160;    }</div>
<div class="line"><a name="l02228"></a><span class="lineno"> 2228</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02229"></a><span class="lineno"> 2229</span>&#160;    {</div>
<div class="line"><a name="l02230"></a><span class="lineno"> 2230</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Unsupported number of operation inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l02231"></a><span class="lineno"> 2231</span>&#160;    }</div>
<div class="line"><a name="l02232"></a><span class="lineno"> 2232</span>&#160; </div>
<div class="line"><a name="l02233"></a><span class="lineno"> 2233</span>&#160;    <span class="comment">// Equivalent to outputShape[channelsIndex], but we can&#39;t know the outputShape in the case of dynamic tensors</span></div>
<div class="line"><a name="l02234"></a><span class="lineno"> 2234</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputChannels = weightsShape[0];</div>
<div class="line"><a name="l02235"></a><span class="lineno"> 2235</span>&#160; </div>
<div class="line"><a name="l02236"></a><span class="lineno"> 2236</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channelsPerGroup  = weightsShape[channelsIndex];</div>
<div class="line"><a name="l02237"></a><span class="lineno"> 2237</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channelMultiplier = outputChannels / numGroups;</div>
<div class="line"><a name="l02238"></a><span class="lineno"> 2238</span>&#160; </div>
<div class="line"><a name="l02239"></a><span class="lineno"> 2239</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02240"></a><span class="lineno"> 2240</span>&#160;    <span class="comment">// Validate all relevant inputs</span></div>
<div class="line"><a name="l02241"></a><span class="lineno"> 2241</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02242"></a><span class="lineno"> 2242</span>&#160;    <span class="keywordflow">if</span> (numGroups &lt;= 0)</div>
<div class="line"><a name="l02243"></a><span class="lineno"> 2243</span>&#160;    {</div>
<div class="line"><a name="l02244"></a><span class="lineno"> 2244</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Number of groups must be greater than 0. Got: %d&quot;</span>, __func__, numGroups);</div>
<div class="line"><a name="l02245"></a><span class="lineno"> 2245</span>&#160;    }</div>
<div class="line"><a name="l02246"></a><span class="lineno"> 2246</span>&#160; </div>
<div class="line"><a name="l02247"></a><span class="lineno"> 2247</span>&#160;    <span class="keywordflow">if</span> (outputChannels % numGroups != 0u)</div>
<div class="line"><a name="l02248"></a><span class="lineno"> 2248</span>&#160;    {</div>
<div class="line"><a name="l02249"></a><span class="lineno"> 2249</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Output channels must be divisible by the number of groups&quot;</span>, __func__);</div>
<div class="line"><a name="l02250"></a><span class="lineno"> 2250</span>&#160;    }</div>
<div class="line"><a name="l02251"></a><span class="lineno"> 2251</span>&#160; </div>
<div class="line"><a name="l02252"></a><span class="lineno"> 2252</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02253"></a><span class="lineno"> 2253</span>&#160;    <span class="comment">// Set up Splitter layer</span></div>
<div class="line"><a name="l02254"></a><span class="lineno"> 2254</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02255"></a><span class="lineno"> 2255</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> splitterDimSizes[4] = { inputShape[0], inputShape[1], inputShape[2], inputShape[3] };</div>
<div class="line"><a name="l02256"></a><span class="lineno"> 2256</span>&#160;    splitterDimSizes[channelsIndex] /= numGroups; <span class="comment">// split in depth</span></div>
<div class="line"><a name="l02257"></a><span class="lineno"> 2257</span>&#160; </div>
<div class="line"><a name="l02258"></a><span class="lineno"> 2258</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> splitterOutputInfo(4,</div>
<div class="line"><a name="l02259"></a><span class="lineno"> 2259</span>&#160;                                  splitterDimSizes,</div>
<div class="line"><a name="l02260"></a><span class="lineno"> 2260</span>&#160;                                  inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>(),</div>
<div class="line"><a name="l02261"></a><span class="lineno"> 2261</span>&#160;                                  inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">GetQuantizationScale</a>(),</div>
<div class="line"><a name="l02262"></a><span class="lineno"> 2262</span>&#160;                                  inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a>());</div>
<div class="line"><a name="l02263"></a><span class="lineno"> 2263</span>&#160; </div>
<div class="line"><a name="l02264"></a><span class="lineno"> 2264</span>&#160;    std::vector&lt;std::reference_wrapper&lt;TensorInfo&gt;&gt; splitterOutputInfos(numGroups, std::ref(splitterOutputInfo));</div>
<div class="line"><a name="l02265"></a><span class="lineno"> 2265</span>&#160; </div>
<div class="line"><a name="l02266"></a><span class="lineno"> 2266</span>&#160;    <a class="code" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> splitterDesc(numGroups);</div>
<div class="line"><a name="l02267"></a><span class="lineno"> 2267</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> group = 0u; group &lt; numGroups; ++group)</div>
<div class="line"><a name="l02268"></a><span class="lineno"> 2268</span>&#160;    {</div>
<div class="line"><a name="l02269"></a><span class="lineno"> 2269</span>&#160;        splitterDesc.SetViewOriginCoord(group, channelsIndex, splitterDimSizes[channelsIndex] * group);</div>
<div class="line"><a name="l02270"></a><span class="lineno"> 2270</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dimIdx = 0u; dimIdx &lt; 4u; dimIdx++)</div>
<div class="line"><a name="l02271"></a><span class="lineno"> 2271</span>&#160;        {</div>
<div class="line"><a name="l02272"></a><span class="lineno"> 2272</span>&#160;            splitterDesc.SetViewSize(group, dimIdx, splitterDimSizes[dimIdx]);</div>
<div class="line"><a name="l02273"></a><span class="lineno"> 2273</span>&#160;        }</div>
<div class="line"><a name="l02274"></a><span class="lineno"> 2274</span>&#160;    }</div>
<div class="line"><a name="l02275"></a><span class="lineno"> 2275</span>&#160; </div>
<div class="line"><a name="l02276"></a><span class="lineno"> 2276</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02277"></a><span class="lineno"> 2277</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackendSplit;</div>
<div class="line"><a name="l02278"></a><span class="lineno"> 2278</span>&#160;    <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l02279"></a><span class="lineno"> 2279</span>&#160;                               <a class="code" href="namespacearmnn.xhtml#adf1e16300483fadf9fd19299ca8a67c4">IsSplitterSupported</a>,</div>
<div class="line"><a name="l02280"></a><span class="lineno"> 2280</span>&#160;                               data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l02281"></a><span class="lineno"> 2281</span>&#160;                               isSupported,</div>
<div class="line"><a name="l02282"></a><span class="lineno"> 2282</span>&#160;                               setBackendSplit,</div>
<div class="line"><a name="l02283"></a><span class="lineno"> 2283</span>&#160;                               inputInfo,</div>
<div class="line"><a name="l02284"></a><span class="lineno"> 2284</span>&#160;                               splitterOutputInfos,</div>
<div class="line"><a name="l02285"></a><span class="lineno"> 2285</span>&#160;                               splitterDesc);</div>
<div class="line"><a name="l02286"></a><span class="lineno"> 2286</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l02287"></a><span class="lineno"> 2287</span>&#160;    {</div>
<div class="line"><a name="l02288"></a><span class="lineno"> 2288</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02289"></a><span class="lineno"> 2289</span>&#160;    }</div>
<div class="line"><a name="l02290"></a><span class="lineno"> 2290</span>&#160; </div>
<div class="line"><a name="l02291"></a><span class="lineno"> 2291</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* splitterLayer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddSplitterLayer(splitterDesc);</div>
<div class="line"><a name="l02292"></a><span class="lineno"> 2292</span>&#160;    splitterLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackendSplit);</div>
<div class="line"><a name="l02293"></a><span class="lineno"> 2293</span>&#160;    <span class="keywordflow">if</span> (!splitterLayer)</div>
<div class="line"><a name="l02294"></a><span class="lineno"> 2294</span>&#160;    {</div>
<div class="line"><a name="l02295"></a><span class="lineno"> 2295</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Failed to add SplitterLayer&quot;</span>, __func__);</div>
<div class="line"><a name="l02296"></a><span class="lineno"> 2296</span>&#160;    }</div>
<div class="line"><a name="l02297"></a><span class="lineno"> 2297</span>&#160; </div>
<div class="line"><a name="l02298"></a><span class="lineno"> 2298</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(splitterLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l02299"></a><span class="lineno"> 2299</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> group = 0u; group &lt; splitterLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">GetNumOutputSlots</a>(); ++group)</div>
<div class="line"><a name="l02300"></a><span class="lineno"> 2300</span>&#160;    {</div>
<div class="line"><a name="l02301"></a><span class="lineno"> 2301</span>&#160;        splitterLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(group).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(splitterOutputInfo);</div>
<div class="line"><a name="l02302"></a><span class="lineno"> 2302</span>&#160;    }</div>
<div class="line"><a name="l02303"></a><span class="lineno"> 2303</span>&#160; </div>
<div class="line"><a name="l02304"></a><span class="lineno"> 2304</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02305"></a><span class="lineno"> 2305</span>&#160;    <span class="comment">// Set up Convolution2d layers for each group</span></div>
<div class="line"><a name="l02306"></a><span class="lineno"> 2306</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02307"></a><span class="lineno"> 2307</span>&#160; </div>
<div class="line"><a name="l02308"></a><span class="lineno"> 2308</span>&#160;    <span class="comment">// Set up group tensor shapes</span></div>
<div class="line"><a name="l02309"></a><span class="lineno"> 2309</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> groupInputShape(inputShape);</div>
<div class="line"><a name="l02310"></a><span class="lineno"> 2310</span>&#160;    groupInputShape[channelsIndex] = channelsPerGroup;</div>
<div class="line"><a name="l02311"></a><span class="lineno"> 2311</span>&#160; </div>
<div class="line"><a name="l02312"></a><span class="lineno"> 2312</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> groupWeightsShape(weightsShape);</div>
<div class="line"><a name="l02313"></a><span class="lineno"> 2313</span>&#160;    groupWeightsShape[0] /= channelMultiplier * numGroups;</div>
<div class="line"><a name="l02314"></a><span class="lineno"> 2314</span>&#160; </div>
<div class="line"><a name="l02315"></a><span class="lineno"> 2315</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> groupBiasesShape({ 1 });</div>
<div class="line"><a name="l02316"></a><span class="lineno"> 2316</span>&#160; </div>
<div class="line"><a name="l02317"></a><span class="lineno"> 2317</span>&#160;    <span class="comment">// Set up group tensor infos</span></div>
<div class="line"><a name="l02318"></a><span class="lineno"> 2318</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> groupInputInfo(inputInfo);</div>
<div class="line"><a name="l02319"></a><span class="lineno"> 2319</span>&#160;    groupInputInfo.SetShape(groupInputShape);</div>
<div class="line"><a name="l02320"></a><span class="lineno"> 2320</span>&#160; </div>
<div class="line"><a name="l02321"></a><span class="lineno"> 2321</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; weightsInfo = weights.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>();</div>
<div class="line"><a name="l02322"></a><span class="lineno"> 2322</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> groupWeightsInfo(weightsInfo);</div>
<div class="line"><a name="l02323"></a><span class="lineno"> 2323</span>&#160;    groupWeightsInfo.SetShape(groupWeightsShape);</div>
<div class="line"><a name="l02324"></a><span class="lineno"> 2324</span>&#160; </div>
<div class="line"><a name="l02325"></a><span class="lineno"> 2325</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; biasesInfo = biases.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>();</div>
<div class="line"><a name="l02326"></a><span class="lineno"> 2326</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> groupBiasesInfo(biasesInfo);</div>
<div class="line"><a name="l02327"></a><span class="lineno"> 2327</span>&#160;    groupBiasesInfo.SetShape(groupBiasesShape);</div>
<div class="line"><a name="l02328"></a><span class="lineno"> 2328</span>&#160; </div>
<div class="line"><a name="l02329"></a><span class="lineno"> 2329</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> groupOutputInfo(outputInfo);</div>
<div class="line"><a name="l02330"></a><span class="lineno"> 2330</span>&#160; </div>
<div class="line"><a name="l02331"></a><span class="lineno"> 2331</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> groupOutputShape(outputShape);</div>
<div class="line"><a name="l02332"></a><span class="lineno"> 2332</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> isDynamic = <a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo);</div>
<div class="line"><a name="l02333"></a><span class="lineno"> 2333</span>&#160;    <span class="keywordflow">if</span> (!isDynamic)</div>
<div class="line"><a name="l02334"></a><span class="lineno"> 2334</span>&#160;    {</div>
<div class="line"><a name="l02335"></a><span class="lineno"> 2335</span>&#160;        groupOutputShape[channelsIndex] = 1;</div>
<div class="line"><a name="l02336"></a><span class="lineno"> 2336</span>&#160;    }</div>
<div class="line"><a name="l02337"></a><span class="lineno"> 2337</span>&#160;    groupOutputInfo.SetShape(groupOutputShape);</div>
<div class="line"><a name="l02338"></a><span class="lineno"> 2338</span>&#160; </div>
<div class="line"><a name="l02339"></a><span class="lineno"> 2339</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsDataTypeSize = <a class="code" href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">GetDataTypeSize</a>(groupWeightsInfo.GetDataType());</div>
<div class="line"><a name="l02340"></a><span class="lineno"> 2340</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> biasesDataTypeSize  = <a class="code" href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">GetDataTypeSize</a>(groupBiasesInfo.GetDataType());</div>
<div class="line"><a name="l02341"></a><span class="lineno"> 2341</span>&#160; </div>
<div class="line"><a name="l02342"></a><span class="lineno"> 2342</span>&#160;    std::vector&lt;IConnectableLayer*&gt; convLayers(numGroups * channelMultiplier, <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l02343"></a><span class="lineno"> 2343</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> group = 0u; group &lt; numGroups; ++group)</div>
<div class="line"><a name="l02344"></a><span class="lineno"> 2344</span>&#160;    {</div>
<div class="line"><a name="l02345"></a><span class="lineno"> 2345</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m = 0u; m &lt; channelMultiplier; ++m)</div>
<div class="line"><a name="l02346"></a><span class="lineno"> 2346</span>&#160;        {</div>
<div class="line"><a name="l02347"></a><span class="lineno"> 2347</span>&#160;            <span class="keyword">auto</span> index = group * channelMultiplier + m;</div>
<div class="line"><a name="l02348"></a><span class="lineno"> 2348</span>&#160; </div>
<div class="line"><a name="l02349"></a><span class="lineno"> 2349</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsDataOffset = groupWeightsShape.GetNumElements() * index * weightsDataTypeSize;</div>
<div class="line"><a name="l02350"></a><span class="lineno"> 2350</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> biasesDataOffset = groupBiasesShape.GetNumElements() * index * biasesDataTypeSize;</div>
<div class="line"><a name="l02351"></a><span class="lineno"> 2351</span>&#160; </div>
<div class="line"><a name="l02352"></a><span class="lineno"> 2352</span>&#160;            <span class="keywordflow">if</span> (weightsInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#ab85cd8cc10c96a7c99c14042c251fc48">HasPerAxisQuantization</a>())</div>
<div class="line"><a name="l02353"></a><span class="lineno"> 2353</span>&#160;            {</div>
<div class="line"><a name="l02354"></a><span class="lineno"> 2354</span>&#160;                <span class="comment">// Extract per-axis quantization scales for group weights</span></div>
<div class="line"><a name="l02355"></a><span class="lineno"> 2355</span>&#160;                <span class="keyword">const</span> std::vector&lt;float&gt;&amp; weightsQuantScales = weightsInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8bc11f1fa23ef42532f9fdd04d355270">GetQuantizationScales</a>();</div>
<div class="line"><a name="l02356"></a><span class="lineno"> 2356</span>&#160;                groupWeightsInfo.SetQuantizationScales(</div>
<div class="line"><a name="l02357"></a><span class="lineno"> 2357</span>&#160;                    std::vector&lt;float&gt;(weightsQuantScales.begin() + index,</div>
<div class="line"><a name="l02358"></a><span class="lineno"> 2358</span>&#160;                                       weightsQuantScales.begin() + index + groupWeightsShape[0]));</div>
<div class="line"><a name="l02359"></a><span class="lineno"> 2359</span>&#160; </div>
<div class="line"><a name="l02360"></a><span class="lineno"> 2360</span>&#160;                <span class="comment">// Extract per-axis quantization scales for group biases</span></div>
<div class="line"><a name="l02361"></a><span class="lineno"> 2361</span>&#160;                <span class="keyword">const</span> std::vector&lt;float&gt;&amp; biasesQuantScales  = biasesInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8bc11f1fa23ef42532f9fdd04d355270">GetQuantizationScales</a>();</div>
<div class="line"><a name="l02362"></a><span class="lineno"> 2362</span>&#160;                groupBiasesInfo.SetQuantizationScales(</div>
<div class="line"><a name="l02363"></a><span class="lineno"> 2363</span>&#160;                    std::vector&lt;float&gt;(biasesQuantScales.begin() + index,</div>
<div class="line"><a name="l02364"></a><span class="lineno"> 2364</span>&#160;                                       biasesQuantScales.begin() + index + groupWeightsShape[0]));</div>
<div class="line"><a name="l02365"></a><span class="lineno"> 2365</span>&#160;            }</div>
<div class="line"><a name="l02366"></a><span class="lineno"> 2366</span>&#160; </div>
<div class="line"><a name="l02367"></a><span class="lineno"> 2367</span>&#160;            <span class="comment">// Extract weights and biases data for current group convolution</span></div>
<div class="line"><a name="l02368"></a><span class="lineno"> 2368</span>&#160;            <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> groupWeights(groupWeightsInfo,</div>
<div class="line"><a name="l02369"></a><span class="lineno"> 2369</span>&#160;                                     <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(weights.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">GetMemoryArea</a>()) +</div>
<div class="line"><a name="l02370"></a><span class="lineno"> 2370</span>&#160;                                                               weightsDataOffset));</div>
<div class="line"><a name="l02371"></a><span class="lineno"> 2371</span>&#160;            <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> groupBiases(groupBiasesInfo,</div>
<div class="line"><a name="l02372"></a><span class="lineno"> 2372</span>&#160;                                    <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span> *<span class="keyword">&gt;</span>(biases.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">GetMemoryArea</a>()) +</div>
<div class="line"><a name="l02373"></a><span class="lineno"> 2373</span>&#160;                                                              biasesDataOffset));</div>
<div class="line"><a name="l02374"></a><span class="lineno"> 2374</span>&#160; </div>
<div class="line"><a name="l02375"></a><span class="lineno"> 2375</span>&#160;            isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02376"></a><span class="lineno"> 2376</span>&#160;            <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackendConv;</div>
<div class="line"><a name="l02377"></a><span class="lineno"> 2377</span>&#160;            <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l02378"></a><span class="lineno"> 2378</span>&#160;            {</div>
<div class="line"><a name="l02379"></a><span class="lineno"> 2379</span>&#160;                <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l02380"></a><span class="lineno"> 2380</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#aff785aa7c076b1d2f51f76fa0f0647e4">IsConvolution2dSupported</a>,</div>
<div class="line"><a name="l02381"></a><span class="lineno"> 2381</span>&#160;                                           data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l02382"></a><span class="lineno"> 2382</span>&#160;                                           isSupported,</div>
<div class="line"><a name="l02383"></a><span class="lineno"> 2383</span>&#160;                                           setBackendConv,</div>
<div class="line"><a name="l02384"></a><span class="lineno"> 2384</span>&#160;                                           groupInputInfo,</div>
<div class="line"><a name="l02385"></a><span class="lineno"> 2385</span>&#160;                                           outputInfo,</div>
<div class="line"><a name="l02386"></a><span class="lineno"> 2386</span>&#160;                                           desc,</div>
<div class="line"><a name="l02387"></a><span class="lineno"> 2387</span>&#160;                                           groupWeightsInfo,</div>
<div class="line"><a name="l02388"></a><span class="lineno"> 2388</span>&#160;                                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a>(groupBiasesInfo));</div>
<div class="line"><a name="l02389"></a><span class="lineno"> 2389</span>&#160;            };</div>
<div class="line"><a name="l02390"></a><span class="lineno"> 2390</span>&#160; </div>
<div class="line"><a name="l02391"></a><span class="lineno"> 2391</span>&#160;            <span class="keywordflow">if</span>(!isDynamic)</div>
<div class="line"><a name="l02392"></a><span class="lineno"> 2392</span>&#160;            {</div>
<div class="line"><a name="l02393"></a><span class="lineno"> 2393</span>&#160;                validateFunc(groupOutputInfo, isSupported);</div>
<div class="line"><a name="l02394"></a><span class="lineno"> 2394</span>&#160;            }</div>
<div class="line"><a name="l02395"></a><span class="lineno"> 2395</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l02396"></a><span class="lineno"> 2396</span>&#160;            {</div>
<div class="line"><a name="l02397"></a><span class="lineno"> 2397</span>&#160;                isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l02398"></a><span class="lineno"> 2398</span>&#160;            }</div>
<div class="line"><a name="l02399"></a><span class="lineno"> 2399</span>&#160; </div>
<div class="line"><a name="l02400"></a><span class="lineno"> 2400</span>&#160;            <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l02401"></a><span class="lineno"> 2401</span>&#160;            {</div>
<div class="line"><a name="l02402"></a><span class="lineno"> 2402</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02403"></a><span class="lineno"> 2403</span>&#160;            }</div>
<div class="line"><a name="l02404"></a><span class="lineno"> 2404</span>&#160; </div>
<div class="line"><a name="l02405"></a><span class="lineno"> 2405</span>&#160;            <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* weightsLayer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddConstantLayer(groupWeights);</div>
<div class="line"><a name="l02406"></a><span class="lineno"> 2406</span>&#160;            <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* biasLayer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddConstantLayer(groupBiases);</div>
<div class="line"><a name="l02407"></a><span class="lineno"> 2407</span>&#160;            <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* convLayer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddConvolution2dLayer(desc);</div>
<div class="line"><a name="l02408"></a><span class="lineno"> 2408</span>&#160; </div>
<div class="line"><a name="l02409"></a><span class="lineno"> 2409</span>&#160;            convLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackendConv);</div>
<div class="line"><a name="l02410"></a><span class="lineno"> 2410</span>&#160; </div>
<div class="line"><a name="l02411"></a><span class="lineno"> 2411</span>&#160;            <span class="keywordflow">if</span> (!convLayer)</div>
<div class="line"><a name="l02412"></a><span class="lineno"> 2412</span>&#160;            {</div>
<div class="line"><a name="l02413"></a><span class="lineno"> 2413</span>&#160;                <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: AddConvolution2dLayer failed&quot;</span>, __func__);</div>
<div class="line"><a name="l02414"></a><span class="lineno"> 2414</span>&#160;            }</div>
<div class="line"><a name="l02415"></a><span class="lineno"> 2415</span>&#160; </div>
<div class="line"><a name="l02416"></a><span class="lineno"> 2416</span>&#160;            splitterLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(group).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(convLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l02417"></a><span class="lineno"> 2417</span>&#160;            weightsLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(convLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div>
<div class="line"><a name="l02418"></a><span class="lineno"> 2418</span>&#160;            biasLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(convLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(2));</div>
<div class="line"><a name="l02419"></a><span class="lineno"> 2419</span>&#160; </div>
<div class="line"><a name="l02420"></a><span class="lineno"> 2420</span>&#160;            weightsLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(groupWeightsInfo);</div>
<div class="line"><a name="l02421"></a><span class="lineno"> 2421</span>&#160;            biasLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(groupBiasesInfo);</div>
<div class="line"><a name="l02422"></a><span class="lineno"> 2422</span>&#160;            convLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(groupOutputInfo);</div>
<div class="line"><a name="l02423"></a><span class="lineno"> 2423</span>&#160; </div>
<div class="line"><a name="l02424"></a><span class="lineno"> 2424</span>&#160;            <span class="keywordflow">if</span>(isDynamic)</div>
<div class="line"><a name="l02425"></a><span class="lineno"> 2425</span>&#160;            {</div>
<div class="line"><a name="l02426"></a><span class="lineno"> 2426</span>&#160;                convLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ab4e57caf059794897b17266090ebcb39">IsTensorInfoSet</a>();</div>
<div class="line"><a name="l02427"></a><span class="lineno"> 2427</span>&#160; </div>
<div class="line"><a name="l02428"></a><span class="lineno"> 2428</span>&#160;                validateFunc(convLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>(), isSupported);</div>
<div class="line"><a name="l02429"></a><span class="lineno"> 2429</span>&#160; </div>
<div class="line"><a name="l02430"></a><span class="lineno"> 2430</span>&#160;                outputInfo = convLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">GetTensorInfo</a>();</div>
<div class="line"><a name="l02431"></a><span class="lineno"> 2431</span>&#160; </div>
<div class="line"><a name="l02432"></a><span class="lineno"> 2432</span>&#160;                <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l02433"></a><span class="lineno"> 2433</span>&#160;                {</div>
<div class="line"><a name="l02434"></a><span class="lineno"> 2434</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02435"></a><span class="lineno"> 2435</span>&#160;                }</div>
<div class="line"><a name="l02436"></a><span class="lineno"> 2436</span>&#160;            }</div>
<div class="line"><a name="l02437"></a><span class="lineno"> 2437</span>&#160; </div>
<div class="line"><a name="l02438"></a><span class="lineno"> 2438</span>&#160;            convLayers[index] = convLayer;</div>
<div class="line"><a name="l02439"></a><span class="lineno"> 2439</span>&#160;        }</div>
<div class="line"><a name="l02440"></a><span class="lineno"> 2440</span>&#160;    }</div>
<div class="line"><a name="l02441"></a><span class="lineno"> 2441</span>&#160; </div>
<div class="line"><a name="l02442"></a><span class="lineno"> 2442</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02443"></a><span class="lineno"> 2443</span>&#160;    <span class="comment">// Set up Concat layer</span></div>
<div class="line"><a name="l02444"></a><span class="lineno"> 2444</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02445"></a><span class="lineno"> 2445</span>&#160;    <a class="code" href="structarmnn_1_1_origins_descriptor.xhtml">ConcatDescriptor</a> concatDescriptor;</div>
<div class="line"><a name="l02446"></a><span class="lineno"> 2446</span>&#160;    <span class="comment">// Equivalent to outputShape[channelsIndex], but we can&#39;t know the outputShape in the case of dynamic tensors</span></div>
<div class="line"><a name="l02447"></a><span class="lineno"> 2447</span>&#160;    concatDescriptor = <a class="code" href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">ConcatDescriptor</a>(weightsShape[0]);</div>
<div class="line"><a name="l02448"></a><span class="lineno"> 2448</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> group = 0u; group &lt; numGroups; ++group)</div>
<div class="line"><a name="l02449"></a><span class="lineno"> 2449</span>&#160;    {</div>
<div class="line"><a name="l02450"></a><span class="lineno"> 2450</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m = 0u; m &lt; channelMultiplier; ++m)</div>
<div class="line"><a name="l02451"></a><span class="lineno"> 2451</span>&#160;        {</div>
<div class="line"><a name="l02452"></a><span class="lineno"> 2452</span>&#160;            <span class="keyword">auto</span> index = group * channelMultiplier + m;</div>
<div class="line"><a name="l02453"></a><span class="lineno"> 2453</span>&#160;            concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a2b125117aa61f9baf3a9cb8658aa61a2">SetViewOriginCoord</a>(index, channelsIndex, index);</div>
<div class="line"><a name="l02454"></a><span class="lineno"> 2454</span>&#160;            concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a5b192c5fcd96a0f75542524cf646b355">SetConcatAxis</a>(channelsIndex);</div>
<div class="line"><a name="l02455"></a><span class="lineno"> 2455</span>&#160;        }</div>
<div class="line"><a name="l02456"></a><span class="lineno"> 2456</span>&#160;    }</div>
<div class="line"><a name="l02457"></a><span class="lineno"> 2457</span>&#160; </div>
<div class="line"><a name="l02458"></a><span class="lineno"> 2458</span>&#160;    isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02459"></a><span class="lineno"> 2459</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackendConcat;</div>
<div class="line"><a name="l02460"></a><span class="lineno"> 2460</span>&#160;    <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l02461"></a><span class="lineno"> 2461</span>&#160;                               <a class="code" href="namespacearmnn.xhtml#ac8b3d64c6b38fe4bc59bd05959577fb6">IsConcatSupported</a>,</div>
<div class="line"><a name="l02462"></a><span class="lineno"> 2462</span>&#160;                               data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l02463"></a><span class="lineno"> 2463</span>&#160;                               isSupported,</div>
<div class="line"><a name="l02464"></a><span class="lineno"> 2464</span>&#160;                               setBackendConcat,</div>
<div class="line"><a name="l02465"></a><span class="lineno"> 2465</span>&#160;                               std::vector&lt;const TensorInfo*&gt;(numGroups * channelMultiplier, &amp;groupOutputInfo),</div>
<div class="line"><a name="l02466"></a><span class="lineno"> 2466</span>&#160;                               outputInfo,</div>
<div class="line"><a name="l02467"></a><span class="lineno"> 2467</span>&#160;                               concatDescriptor);</div>
<div class="line"><a name="l02468"></a><span class="lineno"> 2468</span>&#160; </div>
<div class="line"><a name="l02469"></a><span class="lineno"> 2469</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l02470"></a><span class="lineno"> 2470</span>&#160;    {</div>
<div class="line"><a name="l02471"></a><span class="lineno"> 2471</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02472"></a><span class="lineno"> 2472</span>&#160;    }</div>
<div class="line"><a name="l02473"></a><span class="lineno"> 2473</span>&#160; </div>
<div class="line"><a name="l02474"></a><span class="lineno"> 2474</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* concatLayer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddConcatLayer(concatDescriptor);</div>
<div class="line"><a name="l02475"></a><span class="lineno"> 2475</span>&#160;    concatLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackendConcat);</div>
<div class="line"><a name="l02476"></a><span class="lineno"> 2476</span>&#160;    <span class="keywordflow">if</span> (!concatLayer)</div>
<div class="line"><a name="l02477"></a><span class="lineno"> 2477</span>&#160;    {</div>
<div class="line"><a name="l02478"></a><span class="lineno"> 2478</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: AddConcatLayer failed&quot;</span>, __func__);</div>
<div class="line"><a name="l02479"></a><span class="lineno"> 2479</span>&#160;    }</div>
<div class="line"><a name="l02480"></a><span class="lineno"> 2480</span>&#160; </div>
<div class="line"><a name="l02481"></a><span class="lineno"> 2481</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> group = 0u; group &lt; numGroups; ++group)</div>
<div class="line"><a name="l02482"></a><span class="lineno"> 2482</span>&#160;    {</div>
<div class="line"><a name="l02483"></a><span class="lineno"> 2483</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m = 0u; m &lt; channelMultiplier; ++m)</div>
<div class="line"><a name="l02484"></a><span class="lineno"> 2484</span>&#160;        {</div>
<div class="line"><a name="l02485"></a><span class="lineno"> 2485</span>&#160;            <span class="keyword">auto</span> index = group * channelMultiplier + m;</div>
<div class="line"><a name="l02486"></a><span class="lineno"> 2486</span>&#160;            convLayers[index]-&gt;GetOutputSlot(0).Connect(concatLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(index));</div>
<div class="line"><a name="l02487"></a><span class="lineno"> 2487</span>&#160;        }</div>
<div class="line"><a name="l02488"></a><span class="lineno"> 2488</span>&#160;    }</div>
<div class="line"><a name="l02489"></a><span class="lineno"> 2489</span>&#160;    concatLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(outputInfo);</div>
<div class="line"><a name="l02490"></a><span class="lineno"> 2490</span>&#160; </div>
<div class="line"><a name="l02491"></a><span class="lineno"> 2491</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *concatLayer, model,</div>
<div class="line"><a name="l02492"></a><span class="lineno"> 2492</span>&#160;                                                   data, <span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>, activation);</div>
<div class="line"><a name="l02493"></a><span class="lineno"> 2493</span>&#160;}</div>
<div class="line"><a name="l02494"></a><span class="lineno"> 2494</span>&#160; </div>
<div class="line"><a name="l02495"></a><span class="lineno"> 2495</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertHardSwish(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l02496"></a><span class="lineno"> 2496</span>&#160;{</div>
<div class="line"><a name="l02497"></a><span class="lineno"> 2497</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertHardSwish()&quot;</span>;</div>
<div class="line"><a name="l02498"></a><span class="lineno"> 2498</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> desc;</div>
<div class="line"><a name="l02499"></a><span class="lineno"> 2499</span>&#160;    desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = ActivationFunction::HardSwish;</div>
<div class="line"><a name="l02500"></a><span class="lineno"> 2500</span>&#160; </div>
<div class="line"><a name="l02501"></a><span class="lineno"> 2501</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a28243ca97e12ccb50e01f03d313ecc86">return ::ConvertToActivation</a>(operation, __func__, desc, model, data);</div>
<div class="line"><a name="l02502"></a><span class="lineno"> 2502</span>&#160;}</div>
<div class="line"><a name="l02503"></a><span class="lineno"> 2503</span>&#160; </div>
<div class="line"><a name="l02504"></a><span class="lineno"> 2504</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertInstanceNormalization(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l02505"></a><span class="lineno"> 2505</span>&#160;{</div>
<div class="line"><a name="l02506"></a><span class="lineno"> 2506</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertInstanceNormalization()&quot;</span>;</div>
<div class="line"><a name="l02507"></a><span class="lineno"> 2507</span>&#160; </div>
<div class="line"><a name="l02508"></a><span class="lineno"> 2508</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l02509"></a><span class="lineno"> 2509</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l02510"></a><span class="lineno"> 2510</span>&#160;    {</div>
<div class="line"><a name="l02511"></a><span class="lineno"> 2511</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has an invalid input 0&quot;</span>, __func__);</div>
<div class="line"><a name="l02512"></a><span class="lineno"> 2512</span>&#160;    }</div>
<div class="line"><a name="l02513"></a><span class="lineno"> 2513</span>&#160; </div>
<div class="line"><a name="l02514"></a><span class="lineno"> 2514</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l02515"></a><span class="lineno"> 2515</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l02516"></a><span class="lineno"> 2516</span>&#160;    {</div>
<div class="line"><a name="l02517"></a><span class="lineno"> 2517</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has an invalid output&quot;</span>, __func__);</div>
<div class="line"><a name="l02518"></a><span class="lineno"> 2518</span>&#160;    }</div>
<div class="line"><a name="l02519"></a><span class="lineno"> 2519</span>&#160; </div>
<div class="line"><a name="l02520"></a><span class="lineno"> 2520</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l02521"></a><span class="lineno"> 2521</span>&#160; </div>
<div class="line"><a name="l02522"></a><span class="lineno"> 2522</span>&#160;    <span class="comment">// Determine data type of input tensor</span></div>
<div class="line"><a name="l02523"></a><span class="lineno"> 2523</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a53bfb6eb38a90244ba166b641a6965d9">OperandType</a> inputType;</div>
<div class="line"><a name="l02524"></a><span class="lineno"> 2524</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#adfc2c5b834fdb89e5458ddb1d9aa7830">GetOperandType</a>(operation, 0, model, inputType))</div>
<div class="line"><a name="l02525"></a><span class="lineno"> 2525</span>&#160;    {</div>
<div class="line"><a name="l02526"></a><span class="lineno"> 2526</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l02527"></a><span class="lineno"> 2527</span>&#160;    }</div>
<div class="line"><a name="l02528"></a><span class="lineno"> 2528</span>&#160; </div>
<div class="line"><a name="l02529"></a><span class="lineno"> 2529</span>&#160;    <a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> desc;</div>
<div class="line"><a name="l02530"></a><span class="lineno"> 2530</span>&#160; </div>
<div class="line"><a name="l02531"></a><span class="lineno"> 2531</span>&#160;    <span class="comment">// Read gamma, beta &amp; epsilon</span></div>
<div class="line"><a name="l02532"></a><span class="lineno"> 2532</span>&#160;    <span class="keywordflow">if</span> (inputType == OperandType::TENSOR_FLOAT16)</div>
<div class="line"><a name="l02533"></a><span class="lineno"> 2533</span>&#160;    {</div>
<div class="line"><a name="l02534"></a><span class="lineno"> 2534</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">Half</a> fp16Gamma;</div>
<div class="line"><a name="l02535"></a><span class="lineno"> 2535</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">Half</a> fp16Beta;</div>
<div class="line"><a name="l02536"></a><span class="lineno"> 2536</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">Half</a> fp16Epsilon;</div>
<div class="line"><a name="l02537"></a><span class="lineno"> 2537</span>&#160; </div>
<div class="line"><a name="l02538"></a><span class="lineno"> 2538</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::FLOAT16, fp16Gamma, model, data) ||</div>
<div class="line"><a name="l02539"></a><span class="lineno"> 2539</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 2, OperandType::FLOAT16, fp16Beta, model, data) ||</div>
<div class="line"><a name="l02540"></a><span class="lineno"> 2540</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 3, OperandType::FLOAT16, fp16Epsilon, model, data))</div>
<div class="line"><a name="l02541"></a><span class="lineno"> 2541</span>&#160;        {</div>
<div class="line"><a name="l02542"></a><span class="lineno"> 2542</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs (FLOAT16)&quot;</span>, __func__);</div>
<div class="line"><a name="l02543"></a><span class="lineno"> 2543</span>&#160;        }</div>
<div class="line"><a name="l02544"></a><span class="lineno"> 2544</span>&#160; </div>
<div class="line"><a name="l02545"></a><span class="lineno"> 2545</span>&#160;        desc.<a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a5e078fd505aef7bccaa05c8058e096cc">m_Gamma</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(fp16Gamma);</div>
<div class="line"><a name="l02546"></a><span class="lineno"> 2546</span>&#160;        desc.<a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">m_Beta</a>  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(fp16Beta);</div>
<div class="line"><a name="l02547"></a><span class="lineno"> 2547</span>&#160;        desc.<a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a11c821c7524251004a72ed13c510853c">m_Eps</a>   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(fp16Epsilon);</div>
<div class="line"><a name="l02548"></a><span class="lineno"> 2548</span>&#160;    }</div>
<div class="line"><a name="l02549"></a><span class="lineno"> 2549</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (inputType == OperandType::TENSOR_FLOAT32)</div>
<div class="line"><a name="l02550"></a><span class="lineno"> 2550</span>&#160;    {</div>
<div class="line"><a name="l02551"></a><span class="lineno"> 2551</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::FLOAT32, desc.<a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a5e078fd505aef7bccaa05c8058e096cc">m_Gamma</a>, model, data) ||</div>
<div class="line"><a name="l02552"></a><span class="lineno"> 2552</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 2, OperandType::FLOAT32, desc.<a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">m_Beta</a>, model, data) ||</div>
<div class="line"><a name="l02553"></a><span class="lineno"> 2553</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 3, OperandType::FLOAT32, desc.<a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a11c821c7524251004a72ed13c510853c">m_Eps</a>, model, data))</div>
<div class="line"><a name="l02554"></a><span class="lineno"> 2554</span>&#160;        {</div>
<div class="line"><a name="l02555"></a><span class="lineno"> 2555</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs (FLOAT32)&quot;</span>, __func__);</div>
<div class="line"><a name="l02556"></a><span class="lineno"> 2556</span>&#160;        }</div>
<div class="line"><a name="l02557"></a><span class="lineno"> 2557</span>&#160;    }</div>
<div class="line"><a name="l02558"></a><span class="lineno"> 2558</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02559"></a><span class="lineno"> 2559</span>&#160;    {</div>
<div class="line"><a name="l02560"></a><span class="lineno"> 2560</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Unsupported input tensor type: %d&quot;</span>, __func__, inputType);</div>
<div class="line"><a name="l02561"></a><span class="lineno"> 2561</span>&#160;    }</div>
<div class="line"><a name="l02562"></a><span class="lineno"> 2562</span>&#160; </div>
<div class="line"><a name="l02563"></a><span class="lineno"> 2563</span>&#160;    desc.<a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(operation, 4, model, data);</div>
<div class="line"><a name="l02564"></a><span class="lineno"> 2564</span>&#160; </div>
<div class="line"><a name="l02565"></a><span class="lineno"> 2565</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02566"></a><span class="lineno"> 2566</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l02567"></a><span class="lineno"> 2567</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l02568"></a><span class="lineno"> 2568</span>&#160;    {</div>
<div class="line"><a name="l02569"></a><span class="lineno"> 2569</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l02570"></a><span class="lineno"> 2570</span>&#160;                                   IsInstanceNormalizationSupported,</div>
<div class="line"><a name="l02571"></a><span class="lineno"> 2571</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l02572"></a><span class="lineno"> 2572</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l02573"></a><span class="lineno"> 2573</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l02574"></a><span class="lineno"> 2574</span>&#160;                                   input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l02575"></a><span class="lineno"> 2575</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l02576"></a><span class="lineno"> 2576</span>&#160;                                   desc);</div>
<div class="line"><a name="l02577"></a><span class="lineno"> 2577</span>&#160;    };</div>
<div class="line"><a name="l02578"></a><span class="lineno"> 2578</span>&#160; </div>
<div class="line"><a name="l02579"></a><span class="lineno"> 2579</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l02580"></a><span class="lineno"> 2580</span>&#160;    {</div>
<div class="line"><a name="l02581"></a><span class="lineno"> 2581</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l02582"></a><span class="lineno"> 2582</span>&#160;    }</div>
<div class="line"><a name="l02583"></a><span class="lineno"> 2583</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02584"></a><span class="lineno"> 2584</span>&#160;    {</div>
<div class="line"><a name="l02585"></a><span class="lineno"> 2585</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l02586"></a><span class="lineno"> 2586</span>&#160;    }</div>
<div class="line"><a name="l02587"></a><span class="lineno"> 2587</span>&#160; </div>
<div class="line"><a name="l02588"></a><span class="lineno"> 2588</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l02589"></a><span class="lineno"> 2589</span>&#160;    {</div>
<div class="line"><a name="l02590"></a><span class="lineno"> 2590</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02591"></a><span class="lineno"> 2591</span>&#160;    }</div>
<div class="line"><a name="l02592"></a><span class="lineno"> 2592</span>&#160; </div>
<div class="line"><a name="l02593"></a><span class="lineno"> 2593</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddInstanceNormalizationLayer(desc);</div>
<div class="line"><a name="l02594"></a><span class="lineno"> 2594</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l02595"></a><span class="lineno"> 2595</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l02596"></a><span class="lineno"> 2596</span>&#160; </div>
<div class="line"><a name="l02597"></a><span class="lineno"> 2597</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l02598"></a><span class="lineno"> 2598</span>&#160;}</div>
<div class="line"><a name="l02599"></a><span class="lineno"> 2599</span>&#160; </div>
<div class="line"><a name="l02600"></a><span class="lineno"> 2600</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertL2Normalization(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l02601"></a><span class="lineno"> 2601</span>&#160;{</div>
<div class="line"><a name="l02602"></a><span class="lineno"> 2602</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertL2Normalization()&quot;</span>;</div>
<div class="line"><a name="l02603"></a><span class="lineno"> 2603</span>&#160; </div>
<div class="line"><a name="l02604"></a><span class="lineno"> 2604</span>&#160;    <span class="keywordflow">if</span> (operation.inputs.size() != 1)</div>
<div class="line"><a name="l02605"></a><span class="lineno"> 2605</span>&#160;    {</div>
<div class="line"><a name="l02606"></a><span class="lineno"> 2606</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Optional inputs are not supported&quot;</span>, __func__);</div>
<div class="line"><a name="l02607"></a><span class="lineno"> 2607</span>&#160;    }</div>
<div class="line"><a name="l02608"></a><span class="lineno"> 2608</span>&#160; </div>
<div class="line"><a name="l02609"></a><span class="lineno"> 2609</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l02610"></a><span class="lineno"> 2610</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l02611"></a><span class="lineno"> 2611</span>&#160;    {</div>
<div class="line"><a name="l02612"></a><span class="lineno"> 2612</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l02613"></a><span class="lineno"> 2613</span>&#160;    }</div>
<div class="line"><a name="l02614"></a><span class="lineno"> 2614</span>&#160; </div>
<div class="line"><a name="l02615"></a><span class="lineno"> 2615</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l02616"></a><span class="lineno"> 2616</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l02617"></a><span class="lineno"> 2617</span>&#160;    {</div>
<div class="line"><a name="l02618"></a><span class="lineno"> 2618</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l02619"></a><span class="lineno"> 2619</span>&#160;    }</div>
<div class="line"><a name="l02620"></a><span class="lineno"> 2620</span>&#160; </div>
<div class="line"><a name="l02621"></a><span class="lineno"> 2621</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo  = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l02622"></a><span class="lineno"> 2622</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l02623"></a><span class="lineno"> 2623</span>&#160; </div>
<div class="line"><a name="l02624"></a><span class="lineno"> 2624</span>&#160;    <span class="keywordflow">if</span> (outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() != 4u)</div>
<div class="line"><a name="l02625"></a><span class="lineno"> 2625</span>&#160;    {</div>
<div class="line"><a name="l02626"></a><span class="lineno"> 2626</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Tensor Rank other than 4 is not supported&quot;</span>, __func__);</div>
<div class="line"><a name="l02627"></a><span class="lineno"> 2627</span>&#160;    }</div>
<div class="line"><a name="l02628"></a><span class="lineno"> 2628</span>&#160; </div>
<div class="line"><a name="l02629"></a><span class="lineno"> 2629</span>&#160;    <a class="code" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">armnn::L2NormalizationDescriptor</a> desc;</div>
<div class="line"><a name="l02630"></a><span class="lineno"> 2630</span>&#160;    desc.<a class="code" href="structarmnn_1_1_l2_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>;</div>
<div class="line"><a name="l02631"></a><span class="lineno"> 2631</span>&#160; </div>
<div class="line"><a name="l02632"></a><span class="lineno"> 2632</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02633"></a><span class="lineno"> 2633</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l02634"></a><span class="lineno"> 2634</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l02635"></a><span class="lineno"> 2635</span>&#160;    {</div>
<div class="line"><a name="l02636"></a><span class="lineno"> 2636</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l02637"></a><span class="lineno"> 2637</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a57862de9b939281d1fe0242a8f04ead9">IsL2NormalizationSupported</a>,</div>
<div class="line"><a name="l02638"></a><span class="lineno"> 2638</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l02639"></a><span class="lineno"> 2639</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l02640"></a><span class="lineno"> 2640</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l02641"></a><span class="lineno"> 2641</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l02642"></a><span class="lineno"> 2642</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l02643"></a><span class="lineno"> 2643</span>&#160;                                   desc);</div>
<div class="line"><a name="l02644"></a><span class="lineno"> 2644</span>&#160;    };</div>
<div class="line"><a name="l02645"></a><span class="lineno"> 2645</span>&#160; </div>
<div class="line"><a name="l02646"></a><span class="lineno"> 2646</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l02647"></a><span class="lineno"> 2647</span>&#160;    {</div>
<div class="line"><a name="l02648"></a><span class="lineno"> 2648</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l02649"></a><span class="lineno"> 2649</span>&#160;    }</div>
<div class="line"><a name="l02650"></a><span class="lineno"> 2650</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02651"></a><span class="lineno"> 2651</span>&#160;    {</div>
<div class="line"><a name="l02652"></a><span class="lineno"> 2652</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l02653"></a><span class="lineno"> 2653</span>&#160;    }</div>
<div class="line"><a name="l02654"></a><span class="lineno"> 2654</span>&#160; </div>
<div class="line"><a name="l02655"></a><span class="lineno"> 2655</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l02656"></a><span class="lineno"> 2656</span>&#160;    {</div>
<div class="line"><a name="l02657"></a><span class="lineno"> 2657</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02658"></a><span class="lineno"> 2658</span>&#160;    }</div>
<div class="line"><a name="l02659"></a><span class="lineno"> 2659</span>&#160; </div>
<div class="line"><a name="l02660"></a><span class="lineno"> 2660</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddL2NormalizationLayer(desc);</div>
<div class="line"><a name="l02661"></a><span class="lineno"> 2661</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l02662"></a><span class="lineno"> 2662</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l02663"></a><span class="lineno"> 2663</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l02664"></a><span class="lineno"> 2664</span>&#160; </div>
<div class="line"><a name="l02665"></a><span class="lineno"> 2665</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l02666"></a><span class="lineno"> 2666</span>&#160;}</div>
<div class="line"><a name="l02667"></a><span class="lineno"> 2667</span>&#160; </div>
<div class="line"><a name="l02668"></a><span class="lineno"> 2668</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertL2Pool2d(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l02669"></a><span class="lineno"> 2669</span>&#160;{</div>
<div class="line"><a name="l02670"></a><span class="lineno"> 2670</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertL2Pool2d()&quot;</span>;</div>
<div class="line"><a name="l02671"></a><span class="lineno"> 2671</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a2eb75cb48464cf87c290503d7bea79a4">ConvertPooling2d</a>(operation, __func__, PoolingAlgorithm::L2, model, data);</div>
<div class="line"><a name="l02672"></a><span class="lineno"> 2672</span>&#160;}</div>
<div class="line"><a name="l02673"></a><span class="lineno"> 2673</span>&#160; </div>
<div class="line"><a name="l02674"></a><span class="lineno"> 2674</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertLocalResponseNormalization(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div>
<div class="line"><a name="l02675"></a><span class="lineno"> 2675</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div>
<div class="line"><a name="l02676"></a><span class="lineno"> 2676</span>&#160;                                                  <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l02677"></a><span class="lineno"> 2677</span>&#160;{</div>
<div class="line"><a name="l02678"></a><span class="lineno"> 2678</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertLocalResponseNormalization()&quot;</span>;</div>
<div class="line"><a name="l02679"></a><span class="lineno"> 2679</span>&#160; </div>
<div class="line"><a name="l02680"></a><span class="lineno"> 2680</span>&#160;    <span class="keywordflow">if</span> (operation.inputs.size() != 5)</div>
<div class="line"><a name="l02681"></a><span class="lineno"> 2681</span>&#160;    {</div>
<div class="line"><a name="l02682"></a><span class="lineno"> 2682</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Optional inputs are not supported&quot;</span>, __func__);</div>
<div class="line"><a name="l02683"></a><span class="lineno"> 2683</span>&#160;    }</div>
<div class="line"><a name="l02684"></a><span class="lineno"> 2684</span>&#160; </div>
<div class="line"><a name="l02685"></a><span class="lineno"> 2685</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l02686"></a><span class="lineno"> 2686</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l02687"></a><span class="lineno"> 2687</span>&#160;    {</div>
<div class="line"><a name="l02688"></a><span class="lineno"> 2688</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l02689"></a><span class="lineno"> 2689</span>&#160;    }</div>
<div class="line"><a name="l02690"></a><span class="lineno"> 2690</span>&#160; </div>
<div class="line"><a name="l02691"></a><span class="lineno"> 2691</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l02692"></a><span class="lineno"> 2692</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l02693"></a><span class="lineno"> 2693</span>&#160;    {</div>
<div class="line"><a name="l02694"></a><span class="lineno"> 2694</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l02695"></a><span class="lineno"> 2695</span>&#160;    }</div>
<div class="line"><a name="l02696"></a><span class="lineno"> 2696</span>&#160; </div>
<div class="line"><a name="l02697"></a><span class="lineno"> 2697</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo  = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l02698"></a><span class="lineno"> 2698</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l02699"></a><span class="lineno"> 2699</span>&#160; </div>
<div class="line"><a name="l02700"></a><span class="lineno"> 2700</span>&#160;    <span class="keywordflow">if</span> (outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() != 4u)</div>
<div class="line"><a name="l02701"></a><span class="lineno"> 2701</span>&#160;    {</div>
<div class="line"><a name="l02702"></a><span class="lineno"> 2702</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Tensor Rank other than 4 is not supported&quot;</span>, __func__);</div>
<div class="line"><a name="l02703"></a><span class="lineno"> 2703</span>&#160;    }</div>
<div class="line"><a name="l02704"></a><span class="lineno"> 2704</span>&#160; </div>
<div class="line"><a name="l02705"></a><span class="lineno"> 2705</span>&#160;    <a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a> descriptor;</div>
<div class="line"><a name="l02706"></a><span class="lineno"> 2706</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>      = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>;</div>
<div class="line"><a name="l02707"></a><span class="lineno"> 2707</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#afe1f0f09d49ad2befc01f8789187b7dd">m_NormChannelType</a> = <a class="code" href="namespacearmnn.xhtml#abe18a5033f2ab9c0de82c676b48f5437a810f43f3996922151c39b76143faeecc">armnn::NormalizationAlgorithmChannel::Across</a>;</div>
<div class="line"><a name="l02708"></a><span class="lineno"> 2708</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#a05945f080edf694b631960728b87aadb">m_NormMethodType</a>  = <a class="code" href="namespacearmnn.xhtml#ad605d1661fa0d8c7fea651d82fbe11c9ac65d2e51c610dd3853a3c777aa8bfe9d">armnn::NormalizationAlgorithmMethod::LocalBrightness</a>;</div>
<div class="line"><a name="l02709"></a><span class="lineno"> 2709</span>&#160; </div>
<div class="line"><a name="l02710"></a><span class="lineno"> 2710</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l02711"></a><span class="lineno"> 2711</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::INT32, descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#aa70c05f1aad12fbd9d9ec43ea4557b03">m_NormSize</a>, model, data) ||</div>
<div class="line"><a name="l02712"></a><span class="lineno"> 2712</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#a560530462631e354561c1763f695351c">GetInputFloat32</a>(operation, 2, descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#a8526ea7cf860d8e7f8340e9f9354f9f0">m_K</a>, model, data) ||</div>
<div class="line"><a name="l02713"></a><span class="lineno"> 2713</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#a560530462631e354561c1763f695351c">GetInputFloat32</a>(operation, 3, descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#a174279be57d7596eeb04c6b7f7510f99">m_Alpha</a>, model, data) ||</div>
<div class="line"><a name="l02714"></a><span class="lineno"> 2714</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#a560530462631e354561c1763f695351c">GetInputFloat32</a>(operation, 4, descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">m_Beta</a>, model, data))</div>
<div class="line"><a name="l02715"></a><span class="lineno"> 2715</span>&#160;    {</div>
<div class="line"><a name="l02716"></a><span class="lineno"> 2716</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l02717"></a><span class="lineno"> 2717</span>&#160;    }</div>
<div class="line"><a name="l02718"></a><span class="lineno"> 2718</span>&#160; </div>
<div class="line"><a name="l02719"></a><span class="lineno"> 2719</span>&#160;    <span class="comment">// ArmNN expects normSize to be the full size of the normalization</span></div>
<div class="line"><a name="l02720"></a><span class="lineno"> 2720</span>&#160;    <span class="comment">// window rather than the radius as in AndroidNN.</span></div>
<div class="line"><a name="l02721"></a><span class="lineno"> 2721</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#aa70c05f1aad12fbd9d9ec43ea4557b03">m_NormSize</a> = 1 + (2 * descriptor.<a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml#aa70c05f1aad12fbd9d9ec43ea4557b03">m_NormSize</a>);</div>
<div class="line"><a name="l02722"></a><span class="lineno"> 2722</span>&#160; </div>
<div class="line"><a name="l02723"></a><span class="lineno"> 2723</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02724"></a><span class="lineno"> 2724</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l02725"></a><span class="lineno"> 2725</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l02726"></a><span class="lineno"> 2726</span>&#160;    {</div>
<div class="line"><a name="l02727"></a><span class="lineno"> 2727</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l02728"></a><span class="lineno"> 2728</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a23d54c0b96b63178811174d5e7b2d328">IsNormalizationSupported</a>,</div>
<div class="line"><a name="l02729"></a><span class="lineno"> 2729</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l02730"></a><span class="lineno"> 2730</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l02731"></a><span class="lineno"> 2731</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l02732"></a><span class="lineno"> 2732</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l02733"></a><span class="lineno"> 2733</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l02734"></a><span class="lineno"> 2734</span>&#160;                                   descriptor);</div>
<div class="line"><a name="l02735"></a><span class="lineno"> 2735</span>&#160;    };</div>
<div class="line"><a name="l02736"></a><span class="lineno"> 2736</span>&#160; </div>
<div class="line"><a name="l02737"></a><span class="lineno"> 2737</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l02738"></a><span class="lineno"> 2738</span>&#160;    {</div>
<div class="line"><a name="l02739"></a><span class="lineno"> 2739</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l02740"></a><span class="lineno"> 2740</span>&#160;    }</div>
<div class="line"><a name="l02741"></a><span class="lineno"> 2741</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02742"></a><span class="lineno"> 2742</span>&#160;    {</div>
<div class="line"><a name="l02743"></a><span class="lineno"> 2743</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l02744"></a><span class="lineno"> 2744</span>&#160;    }</div>
<div class="line"><a name="l02745"></a><span class="lineno"> 2745</span>&#160; </div>
<div class="line"><a name="l02746"></a><span class="lineno"> 2746</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l02747"></a><span class="lineno"> 2747</span>&#160;    {</div>
<div class="line"><a name="l02748"></a><span class="lineno"> 2748</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02749"></a><span class="lineno"> 2749</span>&#160;    }</div>
<div class="line"><a name="l02750"></a><span class="lineno"> 2750</span>&#160; </div>
<div class="line"><a name="l02751"></a><span class="lineno"> 2751</span>&#160; </div>
<div class="line"><a name="l02752"></a><span class="lineno"> 2752</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddNormalizationLayer(descriptor);</div>
<div class="line"><a name="l02753"></a><span class="lineno"> 2753</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l02754"></a><span class="lineno"> 2754</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l02755"></a><span class="lineno"> 2755</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l02756"></a><span class="lineno"> 2756</span>&#160; </div>
<div class="line"><a name="l02757"></a><span class="lineno"> 2757</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l02758"></a><span class="lineno"> 2758</span>&#160;}</div>
<div class="line"><a name="l02759"></a><span class="lineno"> 2759</span>&#160; </div>
<div class="line"><a name="l02760"></a><span class="lineno"> 2760</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertLogicalBinary(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div>
<div class="line"><a name="l02761"></a><span class="lineno"> 2761</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div>
<div class="line"><a name="l02762"></a><span class="lineno"> 2762</span>&#160;                                     <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data,</div>
<div class="line"><a name="l02763"></a><span class="lineno"> 2763</span>&#160;                                     <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379e">armnn::LogicalBinaryOperation</a> logicalOperation)</div>
<div class="line"><a name="l02764"></a><span class="lineno"> 2764</span>&#160;{</div>
<div class="line"><a name="l02765"></a><span class="lineno"> 2765</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertLogicalBinary()&quot;</span>;</div>
<div class="line"><a name="l02766"></a><span class="lineno"> 2766</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ConvertLogicalBinary()&quot;</span>;</div>
<div class="line"><a name="l02767"></a><span class="lineno"> 2767</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;logicalOperation = &quot;</span> &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a0ad431ff1600c845fda078ac58a47809">GetLogicalBinaryOperationAsCString</a>(logicalOperation);</div>
<div class="line"><a name="l02768"></a><span class="lineno"> 2768</span>&#160; </div>
<div class="line"><a name="l02769"></a><span class="lineno"> 2769</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input0 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l02770"></a><span class="lineno"> 2770</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input1 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 1, model, data);</div>
<div class="line"><a name="l02771"></a><span class="lineno"> 2771</span>&#160; </div>
<div class="line"><a name="l02772"></a><span class="lineno"> 2772</span>&#160;    <span class="keywordflow">if</span> (!(input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>()))</div>
<div class="line"><a name="l02773"></a><span class="lineno"> 2773</span>&#160;    {</div>
<div class="line"><a name="l02774"></a><span class="lineno"> 2774</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l02775"></a><span class="lineno"> 2775</span>&#160;    }</div>
<div class="line"><a name="l02776"></a><span class="lineno"> 2776</span>&#160; </div>
<div class="line"><a name="l02777"></a><span class="lineno"> 2777</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l02778"></a><span class="lineno"> 2778</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l02779"></a><span class="lineno"> 2779</span>&#160;    {</div>
<div class="line"><a name="l02780"></a><span class="lineno"> 2780</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l02781"></a><span class="lineno"> 2781</span>&#160;    }</div>
<div class="line"><a name="l02782"></a><span class="lineno"> 2782</span>&#160; </div>
<div class="line"><a name="l02783"></a><span class="lineno"> 2783</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo0 = input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l02784"></a><span class="lineno"> 2784</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo1 = input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l02785"></a><span class="lineno"> 2785</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l02786"></a><span class="lineno"> 2786</span>&#160; </div>
<div class="line"><a name="l02787"></a><span class="lineno"> 2787</span>&#160;    <a class="code" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> descriptor(logicalOperation);</div>
<div class="line"><a name="l02788"></a><span class="lineno"> 2788</span>&#160; </div>
<div class="line"><a name="l02789"></a><span class="lineno"> 2789</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02790"></a><span class="lineno"> 2790</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l02791"></a><span class="lineno"> 2791</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l02792"></a><span class="lineno"> 2792</span>&#160;    {</div>
<div class="line"><a name="l02793"></a><span class="lineno"> 2793</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l02794"></a><span class="lineno"> 2794</span>&#160;                                   IsLogicalBinarySupported,</div>
<div class="line"><a name="l02795"></a><span class="lineno"> 2795</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l02796"></a><span class="lineno"> 2796</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l02797"></a><span class="lineno"> 2797</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l02798"></a><span class="lineno"> 2798</span>&#160;                                   inputInfo0,</div>
<div class="line"><a name="l02799"></a><span class="lineno"> 2799</span>&#160;                                   inputInfo1,</div>
<div class="line"><a name="l02800"></a><span class="lineno"> 2800</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l02801"></a><span class="lineno"> 2801</span>&#160;                                   descriptor);</div>
<div class="line"><a name="l02802"></a><span class="lineno"> 2802</span>&#160;    };</div>
<div class="line"><a name="l02803"></a><span class="lineno"> 2803</span>&#160; </div>
<div class="line"><a name="l02804"></a><span class="lineno"> 2804</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l02805"></a><span class="lineno"> 2805</span>&#160;    {</div>
<div class="line"><a name="l02806"></a><span class="lineno"> 2806</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l02807"></a><span class="lineno"> 2807</span>&#160;    }</div>
<div class="line"><a name="l02808"></a><span class="lineno"> 2808</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02809"></a><span class="lineno"> 2809</span>&#160;    {</div>
<div class="line"><a name="l02810"></a><span class="lineno"> 2810</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l02811"></a><span class="lineno"> 2811</span>&#160;    }</div>
<div class="line"><a name="l02812"></a><span class="lineno"> 2812</span>&#160; </div>
<div class="line"><a name="l02813"></a><span class="lineno"> 2813</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l02814"></a><span class="lineno"> 2814</span>&#160;    {</div>
<div class="line"><a name="l02815"></a><span class="lineno"> 2815</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02816"></a><span class="lineno"> 2816</span>&#160;    }</div>
<div class="line"><a name="l02817"></a><span class="lineno"> 2817</span>&#160; </div>
<div class="line"><a name="l02818"></a><span class="lineno"> 2818</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddLogicalBinaryLayer(descriptor);</div>
<div class="line"><a name="l02819"></a><span class="lineno"> 2819</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l02820"></a><span class="lineno"> 2820</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l02821"></a><span class="lineno"> 2821</span>&#160; </div>
<div class="line"><a name="l02822"></a><span class="lineno"> 2822</span>&#160;    <span class="keywordtype">bool</span> isReshapeSupported = BroadcastTensor(input0, input1, layer, data);</div>
<div class="line"><a name="l02823"></a><span class="lineno"> 2823</span>&#160;    <span class="keywordflow">if</span> (!isReshapeSupported)</div>
<div class="line"><a name="l02824"></a><span class="lineno"> 2824</span>&#160;    {</div>
<div class="line"><a name="l02825"></a><span class="lineno"> 2825</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02826"></a><span class="lineno"> 2826</span>&#160;    }</div>
<div class="line"><a name="l02827"></a><span class="lineno"> 2827</span>&#160; </div>
<div class="line"><a name="l02828"></a><span class="lineno"> 2828</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l02829"></a><span class="lineno"> 2829</span>&#160;}</div>
<div class="line"><a name="l02830"></a><span class="lineno"> 2830</span>&#160; </div>
<div class="line"><a name="l02831"></a><span class="lineno"> 2831</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertLogistic(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l02832"></a><span class="lineno"> 2832</span>&#160;{</div>
<div class="line"><a name="l02833"></a><span class="lineno"> 2833</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertLogistic()&quot;</span>;</div>
<div class="line"><a name="l02834"></a><span class="lineno"> 2834</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a> desc;</div>
<div class="line"><a name="l02835"></a><span class="lineno"> 2835</span>&#160;    desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">armnn::ActivationFunction::Sigmoid</a>;</div>
<div class="line"><a name="l02836"></a><span class="lineno"> 2836</span>&#160; </div>
<div class="line"><a name="l02837"></a><span class="lineno"> 2837</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a28243ca97e12ccb50e01f03d313ecc86">ConvertToActivation</a>(operation, __func__, desc, model, data);</div>
<div class="line"><a name="l02838"></a><span class="lineno"> 2838</span>&#160;}</div>
<div class="line"><a name="l02839"></a><span class="lineno"> 2839</span>&#160; </div>
<div class="line"><a name="l02840"></a><span class="lineno"> 2840</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertLogSoftmax(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l02841"></a><span class="lineno"> 2841</span>&#160;{</div>
<div class="line"><a name="l02842"></a><span class="lineno"> 2842</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertLogSoftmax()&quot;</span>;</div>
<div class="line"><a name="l02843"></a><span class="lineno"> 2843</span>&#160; </div>
<div class="line"><a name="l02844"></a><span class="lineno"> 2844</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l02845"></a><span class="lineno"> 2845</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l02846"></a><span class="lineno"> 2846</span>&#160;    {</div>
<div class="line"><a name="l02847"></a><span class="lineno"> 2847</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Failed to read input 0&quot;</span>, __func__);</div>
<div class="line"><a name="l02848"></a><span class="lineno"> 2848</span>&#160;    }</div>
<div class="line"><a name="l02849"></a><span class="lineno"> 2849</span>&#160; </div>
<div class="line"><a name="l02850"></a><span class="lineno"> 2850</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l02851"></a><span class="lineno"> 2851</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l02852"></a><span class="lineno"> 2852</span>&#160;    {</div>
<div class="line"><a name="l02853"></a><span class="lineno"> 2853</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Failed to read output&quot;</span>, __func__);</div>
<div class="line"><a name="l02854"></a><span class="lineno"> 2854</span>&#160;    }</div>
<div class="line"><a name="l02855"></a><span class="lineno"> 2855</span>&#160; </div>
<div class="line"><a name="l02856"></a><span class="lineno"> 2856</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l02857"></a><span class="lineno"> 2857</span>&#160; </div>
<div class="line"><a name="l02858"></a><span class="lineno"> 2858</span>&#160;    <span class="comment">// Determine data type of input tensor</span></div>
<div class="line"><a name="l02859"></a><span class="lineno"> 2859</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a53bfb6eb38a90244ba166b641a6965d9">OperandType</a> inputType;</div>
<div class="line"><a name="l02860"></a><span class="lineno"> 2860</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#adfc2c5b834fdb89e5458ddb1d9aa7830">GetOperandType</a>(operation, 0, model, inputType))</div>
<div class="line"><a name="l02861"></a><span class="lineno"> 2861</span>&#160;    {</div>
<div class="line"><a name="l02862"></a><span class="lineno"> 2862</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l02863"></a><span class="lineno"> 2863</span>&#160;    }</div>
<div class="line"><a name="l02864"></a><span class="lineno"> 2864</span>&#160; </div>
<div class="line"><a name="l02865"></a><span class="lineno"> 2865</span>&#160;    <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">LogSoftmaxDescriptor</a> descriptor;</div>
<div class="line"><a name="l02866"></a><span class="lineno"> 2866</span>&#160; </div>
<div class="line"><a name="l02867"></a><span class="lineno"> 2867</span>&#160;    <span class="comment">// Read beta</span></div>
<div class="line"><a name="l02868"></a><span class="lineno"> 2868</span>&#160;    <span class="keywordflow">if</span> (inputType == OperandType::TENSOR_FLOAT16)</div>
<div class="line"><a name="l02869"></a><span class="lineno"> 2869</span>&#160;    {</div>
<div class="line"><a name="l02870"></a><span class="lineno"> 2870</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">Half</a> fp16Beta;</div>
<div class="line"><a name="l02871"></a><span class="lineno"> 2871</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::FLOAT16, fp16Beta, model, data))</div>
<div class="line"><a name="l02872"></a><span class="lineno"> 2872</span>&#160;        {</div>
<div class="line"><a name="l02873"></a><span class="lineno"> 2873</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Failed to read input 1 (FLOAT16)&quot;</span>, __func__);</div>
<div class="line"><a name="l02874"></a><span class="lineno"> 2874</span>&#160;        }</div>
<div class="line"><a name="l02875"></a><span class="lineno"> 2875</span>&#160; </div>
<div class="line"><a name="l02876"></a><span class="lineno"> 2876</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">m_Beta</a>  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(fp16Beta);</div>
<div class="line"><a name="l02877"></a><span class="lineno"> 2877</span>&#160;    }</div>
<div class="line"><a name="l02878"></a><span class="lineno"> 2878</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (inputType == OperandType::TENSOR_FLOAT32)</div>
<div class="line"><a name="l02879"></a><span class="lineno"> 2879</span>&#160;    {</div>
<div class="line"><a name="l02880"></a><span class="lineno"> 2880</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::FLOAT32, descriptor.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">m_Beta</a>, model, data))</div>
<div class="line"><a name="l02881"></a><span class="lineno"> 2881</span>&#160;        {</div>
<div class="line"><a name="l02882"></a><span class="lineno"> 2882</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Failed to read input 1 (FLOAT32)&quot;</span>, __func__);</div>
<div class="line"><a name="l02883"></a><span class="lineno"> 2883</span>&#160;        }</div>
<div class="line"><a name="l02884"></a><span class="lineno"> 2884</span>&#160;    }</div>
<div class="line"><a name="l02885"></a><span class="lineno"> 2885</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02886"></a><span class="lineno"> 2886</span>&#160;    {</div>
<div class="line"><a name="l02887"></a><span class="lineno"> 2887</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Unsupported input tensor type: %d&quot;</span>, __func__, inputType);</div>
<div class="line"><a name="l02888"></a><span class="lineno"> 2888</span>&#160;    }</div>
<div class="line"><a name="l02889"></a><span class="lineno"> 2889</span>&#160; </div>
<div class="line"><a name="l02890"></a><span class="lineno"> 2890</span>&#160;    <span class="comment">// Read axis</span></div>
<div class="line"><a name="l02891"></a><span class="lineno"> 2891</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#aa43f9c81f830559c15e5af86f8e11482">GetInputInt32</a>(operation, 2, descriptor.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">m_Axis</a>, model, data))</div>
<div class="line"><a name="l02892"></a><span class="lineno"> 2892</span>&#160;    {</div>
<div class="line"><a name="l02893"></a><span class="lineno"> 2893</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Failed to read input 2&quot;</span>, __func__);</div>
<div class="line"><a name="l02894"></a><span class="lineno"> 2894</span>&#160;    }</div>
<div class="line"><a name="l02895"></a><span class="lineno"> 2895</span>&#160; </div>
<div class="line"><a name="l02896"></a><span class="lineno"> 2896</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02897"></a><span class="lineno"> 2897</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l02898"></a><span class="lineno"> 2898</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l02899"></a><span class="lineno"> 2899</span>&#160;    {</div>
<div class="line"><a name="l02900"></a><span class="lineno"> 2900</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l02901"></a><span class="lineno"> 2901</span>&#160;                                   IsLogSoftmaxSupported,</div>
<div class="line"><a name="l02902"></a><span class="lineno"> 2902</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l02903"></a><span class="lineno"> 2903</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l02904"></a><span class="lineno"> 2904</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l02905"></a><span class="lineno"> 2905</span>&#160;                                   input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l02906"></a><span class="lineno"> 2906</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l02907"></a><span class="lineno"> 2907</span>&#160;                                   descriptor);</div>
<div class="line"><a name="l02908"></a><span class="lineno"> 2908</span>&#160;    };</div>
<div class="line"><a name="l02909"></a><span class="lineno"> 2909</span>&#160; </div>
<div class="line"><a name="l02910"></a><span class="lineno"> 2910</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l02911"></a><span class="lineno"> 2911</span>&#160;    {</div>
<div class="line"><a name="l02912"></a><span class="lineno"> 2912</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l02913"></a><span class="lineno"> 2913</span>&#160;    }</div>
<div class="line"><a name="l02914"></a><span class="lineno"> 2914</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02915"></a><span class="lineno"> 2915</span>&#160;    {</div>
<div class="line"><a name="l02916"></a><span class="lineno"> 2916</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l02917"></a><span class="lineno"> 2917</span>&#160;    }</div>
<div class="line"><a name="l02918"></a><span class="lineno"> 2918</span>&#160; </div>
<div class="line"><a name="l02919"></a><span class="lineno"> 2919</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l02920"></a><span class="lineno"> 2920</span>&#160;    {</div>
<div class="line"><a name="l02921"></a><span class="lineno"> 2921</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02922"></a><span class="lineno"> 2922</span>&#160;    }</div>
<div class="line"><a name="l02923"></a><span class="lineno"> 2923</span>&#160; </div>
<div class="line"><a name="l02924"></a><span class="lineno"> 2924</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddLogSoftmaxLayer(descriptor);</div>
<div class="line"><a name="l02925"></a><span class="lineno"> 2925</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l02926"></a><span class="lineno"> 2926</span>&#160;    <span class="keywordflow">if</span> (!layer)</div>
<div class="line"><a name="l02927"></a><span class="lineno"> 2927</span>&#160;    {</div>
<div class="line"><a name="l02928"></a><span class="lineno"> 2928</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: AddLogSoftmaxLayer() returned nullptr&quot;</span>, __func__);</div>
<div class="line"><a name="l02929"></a><span class="lineno"> 2929</span>&#160;    }</div>
<div class="line"><a name="l02930"></a><span class="lineno"> 2930</span>&#160; </div>
<div class="line"><a name="l02931"></a><span class="lineno"> 2931</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l02932"></a><span class="lineno"> 2932</span>&#160; </div>
<div class="line"><a name="l02933"></a><span class="lineno"> 2933</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l02934"></a><span class="lineno"> 2934</span>&#160;}</div>
<div class="line"><a name="l02935"></a><span class="lineno"> 2935</span>&#160; </div>
<div class="line"><a name="l02936"></a><span class="lineno"> 2936</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertLstm(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l02937"></a><span class="lineno"> 2937</span>&#160;{</div>
<div class="line"><a name="l02938"></a><span class="lineno"> 2938</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertLstm()&quot;</span>;</div>
<div class="line"><a name="l02939"></a><span class="lineno"> 2939</span>&#160; </div>
<div class="line"><a name="l02940"></a><span class="lineno"> 2940</span>&#160;    <span class="comment">// Inputs:</span></div>
<div class="line"><a name="l02941"></a><span class="lineno"> 2941</span>&#160;    <span class="comment">// 00: The input: A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape [batch_size, input_size], where</span></div>
<div class="line"><a name="l02942"></a><span class="lineno"> 2942</span>&#160;    <span class="comment">//      âbatch_sizeâ corresponds to the batching dimension, and âinput_sizeâ is the size of the input.</span></div>
<div class="line"><a name="l02943"></a><span class="lineno"> 2943</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l02944"></a><span class="lineno"> 2944</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l02945"></a><span class="lineno"> 2945</span>&#160;    {</div>
<div class="line"><a name="l02946"></a><span class="lineno"> 2946</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 0: input&quot;</span>, __func__);</div>
<div class="line"><a name="l02947"></a><span class="lineno"> 2947</span>&#160;    }</div>
<div class="line"><a name="l02948"></a><span class="lineno"> 2948</span>&#160;    <span class="comment">// 18: The output state: A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape [batch_size, output_size].</span></div>
<div class="line"><a name="l02949"></a><span class="lineno"> 2949</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> outputStateIn = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 18, model, data);</div>
<div class="line"><a name="l02950"></a><span class="lineno"> 2950</span>&#160;    <span class="keywordflow">if</span> (!outputStateIn.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l02951"></a><span class="lineno"> 2951</span>&#160;    {</div>
<div class="line"><a name="l02952"></a><span class="lineno"> 2952</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 18: outputStateIn&quot;</span>, __func__);</div>
<div class="line"><a name="l02953"></a><span class="lineno"> 2953</span>&#160;    }</div>
<div class="line"><a name="l02954"></a><span class="lineno"> 2954</span>&#160;    <span class="comment">// 19: The cell state: A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape [batch_size, num_units].</span></div>
<div class="line"><a name="l02955"></a><span class="lineno"> 2955</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> cellStateIn = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 19, model, data);</div>
<div class="line"><a name="l02956"></a><span class="lineno"> 2956</span>&#160;    <span class="keywordflow">if</span> (!cellStateIn.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l02957"></a><span class="lineno"> 2957</span>&#160;    {</div>
<div class="line"><a name="l02958"></a><span class="lineno"> 2958</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 19: cellStateIn&quot;</span>, __func__);</div>
<div class="line"><a name="l02959"></a><span class="lineno"> 2959</span>&#160;    }</div>
<div class="line"><a name="l02960"></a><span class="lineno"> 2960</span>&#160; </div>
<div class="line"><a name="l02961"></a><span class="lineno"> 2961</span>&#160;    <span class="comment">// Get the mandatory input tensors:</span></div>
<div class="line"><a name="l02962"></a><span class="lineno"> 2962</span>&#160;    <span class="comment">// 02: The input-to-forget weights: A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape</span></div>
<div class="line"><a name="l02963"></a><span class="lineno"> 2963</span>&#160;    <span class="comment">//     [num_units, input_size].</span></div>
<div class="line"><a name="l02964"></a><span class="lineno"> 2964</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputToForgetWeightsPin =</div>
<div class="line"><a name="l02965"></a><span class="lineno"> 2965</span>&#160;        (<a class="code" href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">DequantizeAndMakeConstTensorPin</a>(operation, model, data, 2));</div>
<div class="line"><a name="l02966"></a><span class="lineno"> 2966</span>&#160;    <span class="comment">// 03: The input-to-cell weights: A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape</span></div>
<div class="line"><a name="l02967"></a><span class="lineno"> 2967</span>&#160;    <span class="comment">// [num_units, input_size].</span></div>
<div class="line"><a name="l02968"></a><span class="lineno"> 2968</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputToCellWeightsPin =</div>
<div class="line"><a name="l02969"></a><span class="lineno"> 2969</span>&#160;        (<a class="code" href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">DequantizeAndMakeConstTensorPin</a>(operation, model, data, 3));</div>
<div class="line"><a name="l02970"></a><span class="lineno"> 2970</span>&#160;    <span class="comment">// 04: The input-to-output weights: A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape</span></div>
<div class="line"><a name="l02971"></a><span class="lineno"> 2971</span>&#160;    <span class="comment">//     [num_units, input_size].</span></div>
<div class="line"><a name="l02972"></a><span class="lineno"> 2972</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputToOutputWeightsPin =</div>
<div class="line"><a name="l02973"></a><span class="lineno"> 2973</span>&#160;        (<a class="code" href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">DequantizeAndMakeConstTensorPin</a>(operation, model, data, 4));</div>
<div class="line"><a name="l02974"></a><span class="lineno"> 2974</span>&#160;    <span class="comment">// 06: The recurrent-to-forget weights: A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape</span></div>
<div class="line"><a name="l02975"></a><span class="lineno"> 2975</span>&#160;    <span class="comment">//     [num_units, output_size].</span></div>
<div class="line"><a name="l02976"></a><span class="lineno"> 2976</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> recurrentToForgetWeightsPin =</div>
<div class="line"><a name="l02977"></a><span class="lineno"> 2977</span>&#160;        (<a class="code" href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">DequantizeAndMakeConstTensorPin</a>(operation, model, data, 6));</div>
<div class="line"><a name="l02978"></a><span class="lineno"> 2978</span>&#160;    <span class="comment">// 07: The recurrent-to-cell weights: A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape</span></div>
<div class="line"><a name="l02979"></a><span class="lineno"> 2979</span>&#160;    <span class="comment">//     [num_units, output_size].</span></div>
<div class="line"><a name="l02980"></a><span class="lineno"> 2980</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> recurrentToCellWeightsPin =</div>
<div class="line"><a name="l02981"></a><span class="lineno"> 2981</span>&#160;        (<a class="code" href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">DequantizeAndMakeConstTensorPin</a>(operation, model, data, 7));</div>
<div class="line"><a name="l02982"></a><span class="lineno"> 2982</span>&#160;    <span class="comment">// 08: The recurrent-to-output weights: A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape</span></div>
<div class="line"><a name="l02983"></a><span class="lineno"> 2983</span>&#160;    <span class="comment">//     [num_units, output_size].</span></div>
<div class="line"><a name="l02984"></a><span class="lineno"> 2984</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> recurrentToOutputWeightsPin =</div>
<div class="line"><a name="l02985"></a><span class="lineno"> 2985</span>&#160;        (<a class="code" href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">DequantizeAndMakeConstTensorPin</a>(operation, model, data, 8));</div>
<div class="line"><a name="l02986"></a><span class="lineno"> 2986</span>&#160;    <span class="comment">// 13: The forget gate bias: A 1-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape [num_units].</span></div>
<div class="line"><a name="l02987"></a><span class="lineno"> 2987</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> forgetGateBiasPin =</div>
<div class="line"><a name="l02988"></a><span class="lineno"> 2988</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 13, model, data);</div>
<div class="line"><a name="l02989"></a><span class="lineno"> 2989</span>&#160;    <span class="comment">// 14: The cell bias: A 1-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape [num_units].</span></div>
<div class="line"><a name="l02990"></a><span class="lineno"> 2990</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> cellBiasPin =</div>
<div class="line"><a name="l02991"></a><span class="lineno"> 2991</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 14, model, data);</div>
<div class="line"><a name="l02992"></a><span class="lineno"> 2992</span>&#160;    <span class="comment">// 15: The output gate bias: A 1-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape [num_units].</span></div>
<div class="line"><a name="l02993"></a><span class="lineno"> 2993</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> outputGateBiasPin =</div>
<div class="line"><a name="l02994"></a><span class="lineno"> 2994</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 15, model, data);</div>
<div class="line"><a name="l02995"></a><span class="lineno"> 2995</span>&#160; </div>
<div class="line"><a name="l02996"></a><span class="lineno"> 2996</span>&#160;    <span class="keywordflow">if</span> (!inputToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l02997"></a><span class="lineno"> 2997</span>&#160;        !inputToCellWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l02998"></a><span class="lineno"> 2998</span>&#160;        !inputToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l02999"></a><span class="lineno"> 2999</span>&#160;        !recurrentToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l03000"></a><span class="lineno"> 3000</span>&#160;        !recurrentToCellWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l03001"></a><span class="lineno"> 3001</span>&#160;        !recurrentToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l03002"></a><span class="lineno"> 3002</span>&#160;        !forgetGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l03003"></a><span class="lineno"> 3003</span>&#160;        !cellBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l03004"></a><span class="lineno"> 3004</span>&#160;        !outputGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l03005"></a><span class="lineno"> 3005</span>&#160;    {</div>
<div class="line"><a name="l03006"></a><span class="lineno"> 3006</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid tensor inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l03007"></a><span class="lineno"> 3007</span>&#160;    }</div>
<div class="line"><a name="l03008"></a><span class="lineno"> 3008</span>&#160; </div>
<div class="line"><a name="l03009"></a><span class="lineno"> 3009</span>&#160;    <span class="comment">// Get the optional input tensors:</span></div>
<div class="line"><a name="l03010"></a><span class="lineno"> 3010</span>&#160;    <span class="comment">// 01: The input-to-input weights: Optional. A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape</span></div>
<div class="line"><a name="l03011"></a><span class="lineno"> 3011</span>&#160;    <span class="comment">//     [num_units, input_size], where ânum_unitsâ corresponds to the number of cell units.</span></div>
<div class="line"><a name="l03012"></a><span class="lineno"> 3012</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputToInputWeightsPin =</div>
<div class="line"><a name="l03013"></a><span class="lineno"> 3013</span>&#160;        (<a class="code" href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">DequantizeAndMakeConstTensorPin</a>(operation, model, data, 1, <span class="keyword">true</span>));</div>
<div class="line"><a name="l03014"></a><span class="lineno"> 3014</span>&#160;    <span class="comment">// 05: The recurrent-to-input weights: Optional. A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape</span></div>
<div class="line"><a name="l03015"></a><span class="lineno"> 3015</span>&#160;    <span class="comment">//     [num_units, output_size], where âoutput_sizeâ corresponds to either the number of cell units (i.e.,</span></div>
<div class="line"><a name="l03016"></a><span class="lineno"> 3016</span>&#160;    <span class="comment">//     ânum_unitsâ), or the second dimension of the âprojection_weightsâ, if defined.</span></div>
<div class="line"><a name="l03017"></a><span class="lineno"> 3017</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> recurrentToInputWeightsPin =</div>
<div class="line"><a name="l03018"></a><span class="lineno"> 3018</span>&#160;        (<a class="code" href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">DequantizeAndMakeConstTensorPin</a>(operation, model, data, 5, <span class="keyword">true</span>));</div>
<div class="line"><a name="l03019"></a><span class="lineno"> 3019</span>&#160;    <span class="comment">// 09: The cell-to-input weights: Optional. A 1-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape [num_units].</span></div>
<div class="line"><a name="l03020"></a><span class="lineno"> 3020</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> cellToInputWeightsPin =</div>
<div class="line"><a name="l03021"></a><span class="lineno"> 3021</span>&#160;        (<a class="code" href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">DequantizeAndMakeConstTensorPin</a>(operation, model, data, 9, <span class="keyword">true</span>));</div>
<div class="line"><a name="l03022"></a><span class="lineno"> 3022</span>&#160;    <span class="comment">// 10: The cell-to-forget weights: Optional. A 1-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape [num_units].</span></div>
<div class="line"><a name="l03023"></a><span class="lineno"> 3023</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> cellToForgetWeightsPin =</div>
<div class="line"><a name="l03024"></a><span class="lineno"> 3024</span>&#160;        (<a class="code" href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">DequantizeAndMakeConstTensorPin</a>(operation, model, data, 10, <span class="keyword">true</span>));</div>
<div class="line"><a name="l03025"></a><span class="lineno"> 3025</span>&#160;    <span class="comment">// 11: The cell-to-output weights: Optional. A 1-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape [num_units].</span></div>
<div class="line"><a name="l03026"></a><span class="lineno"> 3026</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> cellToOutputWeightsPin =</div>
<div class="line"><a name="l03027"></a><span class="lineno"> 3027</span>&#160;        (<a class="code" href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">DequantizeAndMakeConstTensorPin</a>(operation, model, data, 11, <span class="keyword">true</span>));</div>
<div class="line"><a name="l03028"></a><span class="lineno"> 3028</span>&#160;    <span class="comment">// 12: The input gate bias: Optional. A 1-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape [num_units].</span></div>
<div class="line"><a name="l03029"></a><span class="lineno"> 3029</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputGateBiasPin =</div>
<div class="line"><a name="l03030"></a><span class="lineno"> 3030</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l03031"></a><span class="lineno"> 3031</span>&#160;                                                         12,</div>
<div class="line"><a name="l03032"></a><span class="lineno"> 3032</span>&#160;                                                         model,</div>
<div class="line"><a name="l03033"></a><span class="lineno"> 3033</span>&#160;                                                         data,</div>
<div class="line"><a name="l03034"></a><span class="lineno"> 3034</span>&#160;                                                         <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l03035"></a><span class="lineno"> 3035</span>&#160;                                                         <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l03036"></a><span class="lineno"> 3036</span>&#160;                                                         <span class="keyword">true</span>);</div>
<div class="line"><a name="l03037"></a><span class="lineno"> 3037</span>&#160; </div>
<div class="line"><a name="l03038"></a><span class="lineno"> 3038</span>&#160;    <span class="comment">// 16: The projection weights: Optional. A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape</span></div>
<div class="line"><a name="l03039"></a><span class="lineno"> 3039</span>&#160;    <span class="comment">//     [output_size, num_units].</span></div>
<div class="line"><a name="l03040"></a><span class="lineno"> 3040</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> projectionWeightsPin =</div>
<div class="line"><a name="l03041"></a><span class="lineno"> 3041</span>&#160;        (<a class="code" href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">DequantizeAndMakeConstTensorPin</a>(operation, model, data, 16, <span class="keyword">true</span>));</div>
<div class="line"><a name="l03042"></a><span class="lineno"> 3042</span>&#160;    <span class="comment">// 17: The projection bias: Optional. A 1-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape [output_size].</span></div>
<div class="line"><a name="l03043"></a><span class="lineno"> 3043</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> projectionBiasPin =</div>
<div class="line"><a name="l03044"></a><span class="lineno"> 3044</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l03045"></a><span class="lineno"> 3045</span>&#160;                                                         17,</div>
<div class="line"><a name="l03046"></a><span class="lineno"> 3046</span>&#160;                                                         model,</div>
<div class="line"><a name="l03047"></a><span class="lineno"> 3047</span>&#160;                                                         data,</div>
<div class="line"><a name="l03048"></a><span class="lineno"> 3048</span>&#160;                                                         <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l03049"></a><span class="lineno"> 3049</span>&#160;                                                         <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l03050"></a><span class="lineno"> 3050</span>&#160;                                                         <span class="keyword">true</span>);</div>
<div class="line"><a name="l03051"></a><span class="lineno"> 3051</span>&#160; </div>
<div class="line"><a name="l03052"></a><span class="lineno"> 3052</span>&#160;    <span class="keywordflow">if</span> ((!inputToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !inputToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>()) ||</div>
<div class="line"><a name="l03053"></a><span class="lineno"> 3053</span>&#160;        (!recurrentToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !recurrentToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>()) ||</div>
<div class="line"><a name="l03054"></a><span class="lineno"> 3054</span>&#160;        (!cellToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !cellToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>()) ||</div>
<div class="line"><a name="l03055"></a><span class="lineno"> 3055</span>&#160;        (!cellToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !cellToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>()) ||</div>
<div class="line"><a name="l03056"></a><span class="lineno"> 3056</span>&#160;        (!cellToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !cellToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>()) ||</div>
<div class="line"><a name="l03057"></a><span class="lineno"> 3057</span>&#160;        (!inputGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !inputGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>()) ||</div>
<div class="line"><a name="l03058"></a><span class="lineno"> 3058</span>&#160;        (!projectionWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !projectionWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>()) ||</div>
<div class="line"><a name="l03059"></a><span class="lineno"> 3059</span>&#160;        (!projectionBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !projectionBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>()))</div>
<div class="line"><a name="l03060"></a><span class="lineno"> 3060</span>&#160;    {</div>
<div class="line"><a name="l03061"></a><span class="lineno"> 3061</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid tensor inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l03062"></a><span class="lineno"> 3062</span>&#160;    }</div>
<div class="line"><a name="l03063"></a><span class="lineno"> 3063</span>&#160; </div>
<div class="line"><a name="l03064"></a><span class="lineno"> 3064</span>&#160;    <span class="comment">// Get the mandatory input scalars (actually 1-D tensors of size 1):</span></div>
<div class="line"><a name="l03065"></a><span class="lineno"> 3065</span>&#160;    <span class="comment">// 20: The activation function: A value indicating the activation function:</span></div>
<div class="line"><a name="l03066"></a><span class="lineno"> 3066</span>&#160;    <span class="comment">//     0: None; 1: Relu; 3: Relu6; 4: Tanh; 6: Sigmoid.</span></div>
<div class="line"><a name="l03067"></a><span class="lineno"> 3067</span>&#160;    <span class="comment">// 21: The clipping threshold: for the cell state, such that values are bound within [-cell_clip, cell_clip].</span></div>
<div class="line"><a name="l03068"></a><span class="lineno"> 3068</span>&#160;    <span class="comment">//     If set to 0.0 then clipping is disabled.</span></div>
<div class="line"><a name="l03069"></a><span class="lineno"> 3069</span>&#160;    <span class="comment">// 22: The clipping threshold: for the output from the projection layer, such that values are bound within</span></div>
<div class="line"><a name="l03070"></a><span class="lineno"> 3070</span>&#160;    <span class="comment">//     [-proj_clip, proj_clip]. If set to 0.0 then clipping is disabled.</span></div>
<div class="line"><a name="l03071"></a><span class="lineno"> 3071</span>&#160;    ActivationFn activation = ActivationFn::kActivationNone;</div>
<div class="line"><a name="l03072"></a><span class="lineno"> 3072</span>&#160;    <span class="keywordtype">float</span> cellClip;</div>
<div class="line"><a name="l03073"></a><span class="lineno"> 3073</span>&#160;    <span class="keywordtype">float</span> projClip;</div>
<div class="line"><a name="l03074"></a><span class="lineno"> 3074</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#a4c6b55ca5080b58c2cc6d7c6c7347d96">GetInputActivationFunctionFromTensor</a>(operation, 20, activation, model, data) ||</div>
<div class="line"><a name="l03075"></a><span class="lineno"> 3075</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 21, OperandType::FLOAT32, cellClip, model, data) ||</div>
<div class="line"><a name="l03076"></a><span class="lineno"> 3076</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 22, OperandType::FLOAT32, projClip, model, data))</div>
<div class="line"><a name="l03077"></a><span class="lineno"> 3077</span>&#160;    {</div>
<div class="line"><a name="l03078"></a><span class="lineno"> 3078</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid scalar inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l03079"></a><span class="lineno"> 3079</span>&#160;    }</div>
<div class="line"><a name="l03080"></a><span class="lineno"> 3080</span>&#160; </div>
<div class="line"><a name="l03081"></a><span class="lineno"> 3081</span>&#160;    <span class="comment">// Get the normalization tensors</span></div>
<div class="line"><a name="l03082"></a><span class="lineno"> 3082</span>&#160;    <span class="comment">// 23: The input layer normalization weights. A 1-D tensor of shape [num_units].</span></div>
<div class="line"><a name="l03083"></a><span class="lineno"> 3083</span>&#160;    <span class="comment">//     Used to rescale normalized inputs to activation at input gate.</span></div>
<div class="line"><a name="l03084"></a><span class="lineno"> 3084</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputLayerNormWeightsPin</div>
<div class="line"><a name="l03085"></a><span class="lineno"> 3085</span>&#160;        (<a class="code" href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">DequantizeAndMakeConstTensorPin</a>(operation, model, data, 23, <span class="keyword">true</span>));</div>
<div class="line"><a name="l03086"></a><span class="lineno"> 3086</span>&#160; </div>
<div class="line"><a name="l03087"></a><span class="lineno"> 3087</span>&#160;    <span class="comment">// 24: The forget layer normalization weights. A 1-D tensor of shape [num_units].</span></div>
<div class="line"><a name="l03088"></a><span class="lineno"> 3088</span>&#160;    <span class="comment">//     Used to rescale normalized inputs to activation at forget gate.</span></div>
<div class="line"><a name="l03089"></a><span class="lineno"> 3089</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> forgetLayerNormWeightsPin =</div>
<div class="line"><a name="l03090"></a><span class="lineno"> 3090</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l03091"></a><span class="lineno"> 3091</span>&#160;                                                        24,</div>
<div class="line"><a name="l03092"></a><span class="lineno"> 3092</span>&#160;                                                        model,</div>
<div class="line"><a name="l03093"></a><span class="lineno"> 3093</span>&#160;                                                        data,</div>
<div class="line"><a name="l03094"></a><span class="lineno"> 3094</span>&#160;                                                        <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l03095"></a><span class="lineno"> 3095</span>&#160;                                                        <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l03096"></a><span class="lineno"> 3096</span>&#160;                                                        <span class="keyword">true</span>);</div>
<div class="line"><a name="l03097"></a><span class="lineno"> 3097</span>&#160; </div>
<div class="line"><a name="l03098"></a><span class="lineno"> 3098</span>&#160;    <span class="comment">// 25: The cell layer normalization weights. A 1-D tensor of shape [num_units].</span></div>
<div class="line"><a name="l03099"></a><span class="lineno"> 3099</span>&#160;    <span class="comment">//     Used to rescale normalized inputs to activation at cell gate.</span></div>
<div class="line"><a name="l03100"></a><span class="lineno"> 3100</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> cellLayerNormWeightsPin =</div>
<div class="line"><a name="l03101"></a><span class="lineno"> 3101</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l03102"></a><span class="lineno"> 3102</span>&#160;                                                         25,</div>
<div class="line"><a name="l03103"></a><span class="lineno"> 3103</span>&#160;                                                         model,</div>
<div class="line"><a name="l03104"></a><span class="lineno"> 3104</span>&#160;                                                         data,</div>
<div class="line"><a name="l03105"></a><span class="lineno"> 3105</span>&#160;                                                         <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l03106"></a><span class="lineno"> 3106</span>&#160;                                                         <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l03107"></a><span class="lineno"> 3107</span>&#160;                                                         <span class="keyword">true</span>);</div>
<div class="line"><a name="l03108"></a><span class="lineno"> 3108</span>&#160; </div>
<div class="line"><a name="l03109"></a><span class="lineno"> 3109</span>&#160;    <span class="comment">// 26: The output layer normalization weights. A 1-D tensor of shape [num_units].</span></div>
<div class="line"><a name="l03110"></a><span class="lineno"> 3110</span>&#160;    <span class="comment">//     Used to rescale normalized inputs to activation at output gate.</span></div>
<div class="line"><a name="l03111"></a><span class="lineno"> 3111</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> outputLayerNormWeightsPin =</div>
<div class="line"><a name="l03112"></a><span class="lineno"> 3112</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l03113"></a><span class="lineno"> 3113</span>&#160;                                                         26,</div>
<div class="line"><a name="l03114"></a><span class="lineno"> 3114</span>&#160;                                                         model,</div>
<div class="line"><a name="l03115"></a><span class="lineno"> 3115</span>&#160;                                                         data,</div>
<div class="line"><a name="l03116"></a><span class="lineno"> 3116</span>&#160;                                                         <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l03117"></a><span class="lineno"> 3117</span>&#160;                                                         <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l03118"></a><span class="lineno"> 3118</span>&#160;                                                         <span class="keyword">true</span>);</div>
<div class="line"><a name="l03119"></a><span class="lineno"> 3119</span>&#160; </div>
<div class="line"><a name="l03120"></a><span class="lineno"> 3120</span>&#160;    <span class="comment">// Outputs:</span></div>
<div class="line"><a name="l03121"></a><span class="lineno"> 3121</span>&#160;    <span class="comment">// 00: The scratch buffer: A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape [batch_size, num_units * 4]</span></div>
<div class="line"><a name="l03122"></a><span class="lineno"> 3122</span>&#160;    <span class="comment">// with CIFG, or [batch_size, num_units * 3] without CIFG.</span></div>
<div class="line"><a name="l03123"></a><span class="lineno"> 3123</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* scratchBuffer = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l03124"></a><span class="lineno"> 3124</span>&#160;    <span class="keywordflow">if</span> (!scratchBuffer)</div>
<div class="line"><a name="l03125"></a><span class="lineno"> 3125</span>&#160;    {</div>
<div class="line"><a name="l03126"></a><span class="lineno"> 3126</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0: scratchBuffer&quot;</span>, __func__);</div>
<div class="line"><a name="l03127"></a><span class="lineno"> 3127</span>&#160;    }</div>
<div class="line"><a name="l03128"></a><span class="lineno"> 3128</span>&#160;    <span class="comment">// 01: The output state (out): A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape [batch_size, output_size].</span></div>
<div class="line"><a name="l03129"></a><span class="lineno"> 3129</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* outputStateOut = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 1, model);</div>
<div class="line"><a name="l03130"></a><span class="lineno"> 3130</span>&#160;    <span class="keywordflow">if</span> (!outputStateOut)</div>
<div class="line"><a name="l03131"></a><span class="lineno"> 3131</span>&#160;    {</div>
<div class="line"><a name="l03132"></a><span class="lineno"> 3132</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 1: outputStateOut&quot;</span>, __func__);</div>
<div class="line"><a name="l03133"></a><span class="lineno"> 3133</span>&#160;    }</div>
<div class="line"><a name="l03134"></a><span class="lineno"> 3134</span>&#160;    <span class="comment">// 02: The cell state (out): A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape [batch_size, num_units].</span></div>
<div class="line"><a name="l03135"></a><span class="lineno"> 3135</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* cellStateOut = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 2, model);</div>
<div class="line"><a name="l03136"></a><span class="lineno"> 3136</span>&#160;    <span class="keywordflow">if</span> (!cellStateOut)</div>
<div class="line"><a name="l03137"></a><span class="lineno"> 3137</span>&#160;    {</div>
<div class="line"><a name="l03138"></a><span class="lineno"> 3138</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 2: cellStateOut&quot;</span>, __func__);</div>
<div class="line"><a name="l03139"></a><span class="lineno"> 3139</span>&#160;    }</div>
<div class="line"><a name="l03140"></a><span class="lineno"> 3140</span>&#160;    <span class="comment">// 03: The output: A 2-D tensor of ANEURALNETWORKS_TENSOR_FLOAT32, of shape [batch_size, output_size]. This is</span></div>
<div class="line"><a name="l03141"></a><span class="lineno"> 3141</span>&#160;    <span class="comment">//     effectively the same as the current âoutput state (out)â value.</span></div>
<div class="line"><a name="l03142"></a><span class="lineno"> 3142</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 3, model);</div>
<div class="line"><a name="l03143"></a><span class="lineno"> 3143</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l03144"></a><span class="lineno"> 3144</span>&#160;    {</div>
<div class="line"><a name="l03145"></a><span class="lineno"> 3145</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 3: output&quot;</span>, __func__);</div>
<div class="line"><a name="l03146"></a><span class="lineno"> 3146</span>&#160;    }</div>
<div class="line"><a name="l03147"></a><span class="lineno"> 3147</span>&#160; </div>
<div class="line"><a name="l03148"></a><span class="lineno"> 3148</span>&#160;    <span class="comment">// set the params structure for the AddLstmLayer call</span></div>
<div class="line"><a name="l03149"></a><span class="lineno"> 3149</span>&#160;    <a class="code" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> params;</div>
<div class="line"><a name="l03150"></a><span class="lineno"> 3150</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">m_InputToInputWeights</a> = inputToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03151"></a><span class="lineno"> 3151</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a31da1ead6794dd64571afdd0b6efc771">m_InputToForgetWeights</a> = inputToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03152"></a><span class="lineno"> 3152</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a49e11acda22742cbaf6f1b259ead0d84">m_InputToCellWeights</a> = inputToCellWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03153"></a><span class="lineno"> 3153</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a6e30c7b3451da3ea9cf4259fb602e6e6">m_InputToOutputWeights</a> = inputToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03154"></a><span class="lineno"> 3154</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">m_RecurrentToInputWeights</a> = recurrentToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03155"></a><span class="lineno"> 3155</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ae83131e16df1cace69395a5f99bc5ecb">m_RecurrentToForgetWeights</a> = recurrentToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03156"></a><span class="lineno"> 3156</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a1759754ccb88ecc9af44f3aae6e244ee">m_RecurrentToCellWeights</a> = recurrentToCellWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03157"></a><span class="lineno"> 3157</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a56b81ca8ba4b4937e0787e4951f043fc">m_RecurrentToOutputWeights</a> = recurrentToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03158"></a><span class="lineno"> 3158</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a484bafa2f8453a7c5a4a00b92a61b006">m_CellToInputWeights</a> = cellToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03159"></a><span class="lineno"> 3159</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a35b112e30c3eb153806a2a8c16d178e3">m_CellToForgetWeights</a> = cellToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03160"></a><span class="lineno"> 3160</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#afe204ca375b74e9a72640c9227918d0a">m_CellToOutputWeights</a> = cellToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03161"></a><span class="lineno"> 3161</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">m_InputGateBias</a> = inputGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03162"></a><span class="lineno"> 3162</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ace7a1f1f1041b412b7d8ef82b95ff352">m_ForgetGateBias</a> = forgetGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03163"></a><span class="lineno"> 3163</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a4a9d678146f572808a361dbdc5489f38">m_CellBias</a> = cellBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03164"></a><span class="lineno"> 3164</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a8c0f6d48705f40c5590dde09be262222">m_OutputGateBias</a> = outputGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03165"></a><span class="lineno"> 3165</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ab03e6e1514f74427916c892f473fe04c">m_ProjectionWeights</a> = projectionWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03166"></a><span class="lineno"> 3166</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a44b0e6b16708df7f0d2bbab141688aaa">m_ProjectionBias</a> = projectionBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03167"></a><span class="lineno"> 3167</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a0cd848f65ec31778d708852f0042fe37">m_InputLayerNormWeights</a> = inputLayerNormWeightsPin.GetConstTensorPtr();</div>
<div class="line"><a name="l03168"></a><span class="lineno"> 3168</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#af0f796fba1a2be9c56b4c9ee534577ee">m_ForgetLayerNormWeights</a> = forgetLayerNormWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03169"></a><span class="lineno"> 3169</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ad0b8c32bb5381f4cc999093ba3b98b43">m_CellLayerNormWeights</a> = cellLayerNormWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03170"></a><span class="lineno"> 3170</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9b18daea2e9f42386055326fd016519a">m_OutputLayerNormWeights</a> = outputLayerNormWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l03171"></a><span class="lineno"> 3171</span>&#160; </div>
<div class="line"><a name="l03172"></a><span class="lineno"> 3172</span>&#160;    <span class="comment">// set the layer descriptor</span></div>
<div class="line"><a name="l03173"></a><span class="lineno"> 3173</span>&#160;    <a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> desc;</div>
<div class="line"><a name="l03174"></a><span class="lineno"> 3174</span>&#160;    desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> = activation;</div>
<div class="line"><a name="l03175"></a><span class="lineno"> 3175</span>&#160;    desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a> = cellClip;</div>
<div class="line"><a name="l03176"></a><span class="lineno"> 3176</span>&#160;    desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a> = projClip;</div>
<div class="line"><a name="l03177"></a><span class="lineno"> 3177</span>&#160;    desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">m_InputToInputWeights</a> == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l03178"></a><span class="lineno"> 3178</span>&#160;                          params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">m_RecurrentToInputWeights</a> == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l03179"></a><span class="lineno"> 3179</span>&#160;                          params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">m_InputGateBias</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l03180"></a><span class="lineno"> 3180</span>&#160;    desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a35b112e30c3eb153806a2a8c16d178e3">m_CellToForgetWeights</a> != <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l03181"></a><span class="lineno"> 3181</span>&#160;                              params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#afe204ca375b74e9a72640c9227918d0a">m_CellToOutputWeights</a> != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l03182"></a><span class="lineno"> 3182</span>&#160;    desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ab03e6e1514f74427916c892f473fe04c">m_ProjectionWeights</a> != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l03183"></a><span class="lineno"> 3183</span>&#160;    desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a> = (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a0cd848f65ec31778d708852f0042fe37">m_InputLayerNormWeights</a> != <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l03184"></a><span class="lineno"> 3184</span>&#160;                               params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#af0f796fba1a2be9c56b4c9ee534577ee">m_ForgetLayerNormWeights</a> != <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l03185"></a><span class="lineno"> 3185</span>&#160;                               params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ad0b8c32bb5381f4cc999093ba3b98b43">m_CellLayerNormWeights</a> != <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l03186"></a><span class="lineno"> 3186</span>&#160;                               params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9b18daea2e9f42386055326fd016519a">m_OutputLayerNormWeights</a> != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l03187"></a><span class="lineno"> 3187</span>&#160; </div>
<div class="line"><a name="l03188"></a><span class="lineno"> 3188</span>&#160;    <span class="comment">// validate the optional input groups</span></div>
<div class="line"><a name="l03189"></a><span class="lineno"> 3189</span>&#160;    <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> &amp;&amp;</div>
<div class="line"><a name="l03190"></a><span class="lineno"> 3190</span>&#160;        (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">m_InputToInputWeights</a> != <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l03191"></a><span class="lineno"> 3191</span>&#160;         params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">m_RecurrentToInputWeights</a> != <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l03192"></a><span class="lineno"> 3192</span>&#160;         params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">m_InputGateBias</a> != <span class="keyword">nullptr</span>))</div>
<div class="line"><a name="l03193"></a><span class="lineno"> 3193</span>&#160;    {</div>
<div class="line"><a name="l03194"></a><span class="lineno"> 3194</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: All, or none, of input-to-input weights, recurrent-to-input weights,&quot;</span></div>
<div class="line"><a name="l03195"></a><span class="lineno"> 3195</span>&#160;                    <span class="stringliteral">&quot; and input gate bias must be provided&quot;</span>, __func__);</div>
<div class="line"><a name="l03196"></a><span class="lineno"> 3196</span>&#160;    }</div>
<div class="line"><a name="l03197"></a><span class="lineno"> 3197</span>&#160; </div>
<div class="line"><a name="l03198"></a><span class="lineno"> 3198</span>&#160;    <span class="keywordflow">if</span> (!desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> &amp;&amp; params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a44b0e6b16708df7f0d2bbab141688aaa">m_ProjectionBias</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l03199"></a><span class="lineno"> 3199</span>&#160;    {</div>
<div class="line"><a name="l03200"></a><span class="lineno"> 3200</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: projection bias should not be provided without projection weights&quot;</span>, __func__);</div>
<div class="line"><a name="l03201"></a><span class="lineno"> 3201</span>&#160;    }</div>
<div class="line"><a name="l03202"></a><span class="lineno"> 3202</span>&#160; </div>
<div class="line"><a name="l03203"></a><span class="lineno"> 3203</span>&#160;    <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> &amp;&amp;</div>
<div class="line"><a name="l03204"></a><span class="lineno"> 3204</span>&#160;        (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a35b112e30c3eb153806a2a8c16d178e3">m_CellToForgetWeights</a> == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l03205"></a><span class="lineno"> 3205</span>&#160;         params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#afe204ca375b74e9a72640c9227918d0a">m_CellToOutputWeights</a> == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l03206"></a><span class="lineno"> 3206</span>&#160;         (!desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> &amp;&amp; params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a484bafa2f8453a7c5a4a00b92a61b006">m_CellToInputWeights</a> == <span class="keyword">nullptr</span>)))</div>
<div class="line"><a name="l03207"></a><span class="lineno"> 3207</span>&#160;    {</div>
<div class="line"><a name="l03208"></a><span class="lineno"> 3208</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: All, or none, of cell-to-forget weights and cell-to-output weights must be provided&quot;</span></div>
<div class="line"><a name="l03209"></a><span class="lineno"> 3209</span>&#160;                    <span class="stringliteral">&quot; and, if CIFG is not enabled, cell-to-input weights must also be provided&quot;</span>, __func__);</div>
<div class="line"><a name="l03210"></a><span class="lineno"> 3210</span>&#160;    }</div>
<div class="line"><a name="l03211"></a><span class="lineno"> 3211</span>&#160; </div>
<div class="line"><a name="l03212"></a><span class="lineno"> 3212</span>&#160;    <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a> &amp;&amp;</div>
<div class="line"><a name="l03213"></a><span class="lineno"> 3213</span>&#160;        (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#af0f796fba1a2be9c56b4c9ee534577ee">m_ForgetLayerNormWeights</a> == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l03214"></a><span class="lineno"> 3214</span>&#160;         params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ad0b8c32bb5381f4cc999093ba3b98b43">m_CellLayerNormWeights</a> == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l03215"></a><span class="lineno"> 3215</span>&#160;         params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9b18daea2e9f42386055326fd016519a">m_OutputLayerNormWeights</a> == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l03216"></a><span class="lineno"> 3216</span>&#160;         (!desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> &amp;&amp; params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a0cd848f65ec31778d708852f0042fe37">m_InputLayerNormWeights</a> == <span class="keyword">nullptr</span>)))</div>
<div class="line"><a name="l03217"></a><span class="lineno"> 3217</span>&#160;    {</div>
<div class="line"><a name="l03218"></a><span class="lineno"> 3218</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: All, or none, of forget-norm weights, cell-norm weights and output-norm weights must be&quot;</span></div>
<div class="line"><a name="l03219"></a><span class="lineno"> 3219</span>&#160;                    <span class="stringliteral">&quot; provided and, if CIFG is not enabled, input-norm weights must also be provided&quot;</span>, __func__);</div>
<div class="line"><a name="l03220"></a><span class="lineno"> 3220</span>&#160;    }</div>
<div class="line"><a name="l03221"></a><span class="lineno"> 3221</span>&#160; </div>
<div class="line"><a name="l03222"></a><span class="lineno"> 3222</span>&#160;    <span class="comment">// Check if the layer is supported</span></div>
<div class="line"><a name="l03223"></a><span class="lineno"> 3223</span>&#160;    <span class="comment">// Inputs</span></div>
<div class="line"><a name="l03224"></a><span class="lineno"> 3224</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo         = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l03225"></a><span class="lineno"> 3225</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputStateInInfo = outputStateIn.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l03226"></a><span class="lineno"> 3226</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; cellStateInInfo   = cellStateIn.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l03227"></a><span class="lineno"> 3227</span>&#160; </div>
<div class="line"><a name="l03228"></a><span class="lineno"> 3228</span>&#160;    <span class="comment">// Outputs</span></div>
<div class="line"><a name="l03229"></a><span class="lineno"> 3229</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; scratchBufferInfo  = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*scratchBuffer);</div>
<div class="line"><a name="l03230"></a><span class="lineno"> 3230</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputStateOutInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*outputStateOut);</div>
<div class="line"><a name="l03231"></a><span class="lineno"> 3231</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; cellStateOutInfo   = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*cellStateOut);</div>
<div class="line"><a name="l03232"></a><span class="lineno"> 3232</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo         = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l03233"></a><span class="lineno"> 3233</span>&#160; </div>
<div class="line"><a name="l03234"></a><span class="lineno"> 3234</span>&#160;    <span class="comment">// Basic parameters</span></div>
<div class="line"><a name="l03235"></a><span class="lineno"> 3235</span>&#160;    <a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> paramsInfo;</div>
<div class="line"><a name="l03236"></a><span class="lineno"> 3236</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a4b3f6e6f2268416ffd7a34fda95ffd0b">m_InputToForgetWeights</a>     = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a31da1ead6794dd64571afdd0b6efc771">m_InputToForgetWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03237"></a><span class="lineno"> 3237</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#af07c65d3b7886a00f10c69093e76a341">m_InputToCellWeights</a>       = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a49e11acda22742cbaf6f1b259ead0d84">m_InputToCellWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03238"></a><span class="lineno"> 3238</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a33242cb43250f04f1736161ca8ad2db9">m_InputToOutputWeights</a>     = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a6e30c7b3451da3ea9cf4259fb602e6e6">m_InputToOutputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03239"></a><span class="lineno"> 3239</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a11b90bd2694aa7f4b434aadd75fbb1c2">m_RecurrentToForgetWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ae83131e16df1cace69395a5f99bc5ecb">m_RecurrentToForgetWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03240"></a><span class="lineno"> 3240</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a6c7873a3320a59a63aa26c006db905c0">m_RecurrentToCellWeights</a>   = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a1759754ccb88ecc9af44f3aae6e244ee">m_RecurrentToCellWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03241"></a><span class="lineno"> 3241</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#af434b509cd5232ef762c4b21b2dfaae0">m_RecurrentToOutputWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a56b81ca8ba4b4937e0787e4951f043fc">m_RecurrentToOutputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03242"></a><span class="lineno"> 3242</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a21626d0b91f8942c3ef8e48e17db9f21">m_ForgetGateBias</a>           = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ace7a1f1f1041b412b7d8ef82b95ff352">m_ForgetGateBias</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03243"></a><span class="lineno"> 3243</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#ab173a067eeb7295d84f5327bcc05a6c1">m_CellBias</a>                 = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a4a9d678146f572808a361dbdc5489f38">m_CellBias</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03244"></a><span class="lineno"> 3244</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a48cb83dcb58c786ea36f5d37695e75b1">m_OutputGateBias</a>           = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a8c0f6d48705f40c5590dde09be262222">m_OutputGateBias</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03245"></a><span class="lineno"> 3245</span>&#160; </div>
<div class="line"><a name="l03246"></a><span class="lineno"> 3246</span>&#160;    <span class="comment">// Optional parameters</span></div>
<div class="line"><a name="l03247"></a><span class="lineno"> 3247</span>&#160;    <span class="keywordflow">if</span> (!desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div>
<div class="line"><a name="l03248"></a><span class="lineno"> 3248</span>&#160;    {</div>
<div class="line"><a name="l03249"></a><span class="lineno"> 3249</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a15f9f65126ad3d4d82d6c19d0662ae01">m_InputToInputWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">m_InputToInputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03250"></a><span class="lineno"> 3250</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a9ab864961ded72f5ce7ea4eb9921f826">m_RecurrentToInputWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">m_RecurrentToInputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03251"></a><span class="lineno"> 3251</span>&#160;        <span class="keywordflow">if</span> (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a484bafa2f8453a7c5a4a00b92a61b006">m_CellToInputWeights</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l03252"></a><span class="lineno"> 3252</span>&#160;        {</div>
<div class="line"><a name="l03253"></a><span class="lineno"> 3253</span>&#160;            paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#ab99b2297c5a17114926b8b47c693fe43">m_CellToInputWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a484bafa2f8453a7c5a4a00b92a61b006">m_CellToInputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03254"></a><span class="lineno"> 3254</span>&#160;        }</div>
<div class="line"><a name="l03255"></a><span class="lineno"> 3255</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a042ea9d6d3842b87f112db126e806a93">m_InputGateBias</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">m_InputGateBias</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03256"></a><span class="lineno"> 3256</span>&#160;    }</div>
<div class="line"><a name="l03257"></a><span class="lineno"> 3257</span>&#160; </div>
<div class="line"><a name="l03258"></a><span class="lineno"> 3258</span>&#160;    <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>)</div>
<div class="line"><a name="l03259"></a><span class="lineno"> 3259</span>&#160;    {</div>
<div class="line"><a name="l03260"></a><span class="lineno"> 3260</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#ac6fb4a3a8e7e8a359ac34badc8178b1a">m_ProjectionWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ab03e6e1514f74427916c892f473fe04c">m_ProjectionWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03261"></a><span class="lineno"> 3261</span>&#160;        <span class="keywordflow">if</span> (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a44b0e6b16708df7f0d2bbab141688aaa">m_ProjectionBias</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l03262"></a><span class="lineno"> 3262</span>&#160;        {</div>
<div class="line"><a name="l03263"></a><span class="lineno"> 3263</span>&#160;            paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#ae22fc962c59e7c24986718f5af0020db">m_ProjectionBias</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a44b0e6b16708df7f0d2bbab141688aaa">m_ProjectionBias</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03264"></a><span class="lineno"> 3264</span>&#160;        }</div>
<div class="line"><a name="l03265"></a><span class="lineno"> 3265</span>&#160;    }</div>
<div class="line"><a name="l03266"></a><span class="lineno"> 3266</span>&#160; </div>
<div class="line"><a name="l03267"></a><span class="lineno"> 3267</span>&#160;    <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>)</div>
<div class="line"><a name="l03268"></a><span class="lineno"> 3268</span>&#160;    {</div>
<div class="line"><a name="l03269"></a><span class="lineno"> 3269</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a1ddc4634491d95d37fe15049decadb8c">m_CellToForgetWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a35b112e30c3eb153806a2a8c16d178e3">m_CellToForgetWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03270"></a><span class="lineno"> 3270</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a16b4d4acd2a0d6d533ff3fe8b8e71765">m_CellToOutputWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#afe204ca375b74e9a72640c9227918d0a">m_CellToOutputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03271"></a><span class="lineno"> 3271</span>&#160;    }</div>
<div class="line"><a name="l03272"></a><span class="lineno"> 3272</span>&#160; </div>
<div class="line"><a name="l03273"></a><span class="lineno"> 3273</span>&#160;    <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a>)</div>
<div class="line"><a name="l03274"></a><span class="lineno"> 3274</span>&#160;    {</div>
<div class="line"><a name="l03275"></a><span class="lineno"> 3275</span>&#160;        <span class="keywordflow">if</span>(!desc.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div>
<div class="line"><a name="l03276"></a><span class="lineno"> 3276</span>&#160;        {</div>
<div class="line"><a name="l03277"></a><span class="lineno"> 3277</span>&#160;            paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#ab8c7712c0c6bc427dede8c76945e8f89">m_InputLayerNormWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a0cd848f65ec31778d708852f0042fe37">m_InputLayerNormWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03278"></a><span class="lineno"> 3278</span>&#160;        }</div>
<div class="line"><a name="l03279"></a><span class="lineno"> 3279</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a513ad7774e0f8969ab68d91a04ecca65">m_ForgetLayerNormWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#af0f796fba1a2be9c56b4c9ee534577ee">m_ForgetLayerNormWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03280"></a><span class="lineno"> 3280</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a567622530e51eaa2e82c9790a3a43f02">m_CellLayerNormWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ad0b8c32bb5381f4cc999093ba3b98b43">m_CellLayerNormWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03281"></a><span class="lineno"> 3281</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a9935ad8aff43cf1e0622bf6d82710513">m_OutputLayerNormWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9b18daea2e9f42386055326fd016519a">m_OutputLayerNormWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l03282"></a><span class="lineno"> 3282</span>&#160;    }</div>
<div class="line"><a name="l03283"></a><span class="lineno"> 3283</span>&#160; </div>
<div class="line"><a name="l03284"></a><span class="lineno"> 3284</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l03285"></a><span class="lineno"> 3285</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l03286"></a><span class="lineno"> 3286</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l03287"></a><span class="lineno"> 3287</span>&#160;    {</div>
<div class="line"><a name="l03288"></a><span class="lineno"> 3288</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l03289"></a><span class="lineno"> 3289</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a2c62d8aa5aeab36458f9ecfa5db1f785">IsLstmSupported</a>,</div>
<div class="line"><a name="l03290"></a><span class="lineno"> 3290</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l03291"></a><span class="lineno"> 3291</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l03292"></a><span class="lineno"> 3292</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l03293"></a><span class="lineno"> 3293</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l03294"></a><span class="lineno"> 3294</span>&#160;                                   outputStateInInfo,</div>
<div class="line"><a name="l03295"></a><span class="lineno"> 3295</span>&#160;                                   cellStateInInfo,</div>
<div class="line"><a name="l03296"></a><span class="lineno"> 3296</span>&#160;                                   scratchBufferInfo,</div>
<div class="line"><a name="l03297"></a><span class="lineno"> 3297</span>&#160;                                   outputStateOutInfo,</div>
<div class="line"><a name="l03298"></a><span class="lineno"> 3298</span>&#160;                                   cellStateOutInfo,</div>
<div class="line"><a name="l03299"></a><span class="lineno"> 3299</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l03300"></a><span class="lineno"> 3300</span>&#160;                                   desc,</div>
<div class="line"><a name="l03301"></a><span class="lineno"> 3301</span>&#160;                                   paramsInfo);</div>
<div class="line"><a name="l03302"></a><span class="lineno"> 3302</span>&#160;    };</div>
<div class="line"><a name="l03303"></a><span class="lineno"> 3303</span>&#160; </div>
<div class="line"><a name="l03304"></a><span class="lineno"> 3304</span>&#160;    <span class="keywordtype">bool</span> isDynamic = <span class="keyword">false</span>;</div>
<div class="line"><a name="l03305"></a><span class="lineno"> 3305</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputStateOutInfo) &amp;&amp;</div>
<div class="line"><a name="l03306"></a><span class="lineno"> 3306</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(scratchBufferInfo)  &amp;&amp;</div>
<div class="line"><a name="l03307"></a><span class="lineno"> 3307</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(cellStateOutInfo)   &amp;&amp;</div>
<div class="line"><a name="l03308"></a><span class="lineno"> 3308</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l03309"></a><span class="lineno"> 3309</span>&#160;    {</div>
<div class="line"><a name="l03310"></a><span class="lineno"> 3310</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l03311"></a><span class="lineno"> 3311</span>&#160;    }</div>
<div class="line"><a name="l03312"></a><span class="lineno"> 3312</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03313"></a><span class="lineno"> 3313</span>&#160;    {</div>
<div class="line"><a name="l03314"></a><span class="lineno"> 3314</span>&#160;        isDynamic = <span class="keyword">true</span>;</div>
<div class="line"><a name="l03315"></a><span class="lineno"> 3315</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l03316"></a><span class="lineno"> 3316</span>&#160;    }</div>
<div class="line"><a name="l03317"></a><span class="lineno"> 3317</span>&#160; </div>
<div class="line"><a name="l03318"></a><span class="lineno"> 3318</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l03319"></a><span class="lineno"> 3319</span>&#160;    {</div>
<div class="line"><a name="l03320"></a><span class="lineno"> 3320</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03321"></a><span class="lineno"> 3321</span>&#160;    }</div>
<div class="line"><a name="l03322"></a><span class="lineno"> 3322</span>&#160; </div>
<div class="line"><a name="l03323"></a><span class="lineno"> 3323</span>&#160;    <span class="comment">// Add the layer</span></div>
<div class="line"><a name="l03324"></a><span class="lineno"> 3324</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddLstmLayer(desc, params, <span class="stringliteral">&quot;Lstm&quot;</span>);</div>
<div class="line"><a name="l03325"></a><span class="lineno"> 3325</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l03326"></a><span class="lineno"> 3326</span>&#160; </div>
<div class="line"><a name="l03327"></a><span class="lineno"> 3327</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l03328"></a><span class="lineno"> 3328</span>&#160;    outputStateIn.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div>
<div class="line"><a name="l03329"></a><span class="lineno"> 3329</span>&#160;    cellStateIn.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(2));</div>
<div class="line"><a name="l03330"></a><span class="lineno"> 3330</span>&#160; </div>
<div class="line"><a name="l03331"></a><span class="lineno"> 3331</span>&#160;    <span class="keywordflow">if</span> (!isDynamic)</div>
<div class="line"><a name="l03332"></a><span class="lineno"> 3332</span>&#160;    {</div>
<div class="line"><a name="l03333"></a><span class="lineno"> 3333</span>&#160;        <span class="keywordflow">return</span> (</div>
<div class="line"><a name="l03334"></a><span class="lineno"> 3334</span>&#160;             <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, 0, model, data) &amp;&amp;</div>
<div class="line"><a name="l03335"></a><span class="lineno"> 3335</span>&#160;             <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 1, *layer, 1, model, data) &amp;&amp;</div>
<div class="line"><a name="l03336"></a><span class="lineno"> 3336</span>&#160;             <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 2, *layer, 2, model, data) &amp;&amp;</div>
<div class="line"><a name="l03337"></a><span class="lineno"> 3337</span>&#160;             <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 3, *layer, 3, model, data));</div>
<div class="line"><a name="l03338"></a><span class="lineno"> 3338</span>&#160;    }</div>
<div class="line"><a name="l03339"></a><span class="lineno"> 3339</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03340"></a><span class="lineno"> 3340</span>&#160;    {</div>
<div class="line"><a name="l03341"></a><span class="lineno"> 3341</span>&#160;        <span class="keywordflow">return</span> (</div>
<div class="line"><a name="l03342"></a><span class="lineno"> 3342</span>&#160;             <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, 0, model, data) &amp;&amp;</div>
<div class="line"><a name="l03343"></a><span class="lineno"> 3343</span>&#160;             <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 1, *layer, 1, model, data) &amp;&amp;</div>
<div class="line"><a name="l03344"></a><span class="lineno"> 3344</span>&#160;             <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 2, *layer, 2, model, data) &amp;&amp;</div>
<div class="line"><a name="l03345"></a><span class="lineno"> 3345</span>&#160;             <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(</div>
<div class="line"><a name="l03346"></a><span class="lineno"> 3346</span>&#160;                 operation, 3, *layer, 3, model, data, <span class="keyword">nullptr</span>, validateFunc, ActivationFn::kActivationNone, <span class="keyword">true</span>));</div>
<div class="line"><a name="l03347"></a><span class="lineno"> 3347</span>&#160;    }</div>
<div class="line"><a name="l03348"></a><span class="lineno"> 3348</span>&#160; </div>
<div class="line"><a name="l03349"></a><span class="lineno"> 3349</span>&#160;}</div>
<div class="line"><a name="l03350"></a><span class="lineno"> 3350</span>&#160; </div>
<div class="line"><a name="l03351"></a><span class="lineno"> 3351</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertMaxPool2d(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l03352"></a><span class="lineno"> 3352</span>&#160;{</div>
<div class="line"><a name="l03353"></a><span class="lineno"> 3353</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertMaxPool2d()&quot;</span>;</div>
<div class="line"><a name="l03354"></a><span class="lineno"> 3354</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a2eb75cb48464cf87c290503d7bea79a4">ConvertPooling2d</a>(operation, __func__, PoolingAlgorithm::Max, model, data);</div>
<div class="line"><a name="l03355"></a><span class="lineno"> 3355</span>&#160;}</div>
<div class="line"><a name="l03356"></a><span class="lineno"> 3356</span>&#160; </div>
<div class="line"><a name="l03357"></a><span class="lineno"> 3357</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertMaximum(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l03358"></a><span class="lineno"> 3358</span>&#160;{</div>
<div class="line"><a name="l03359"></a><span class="lineno"> 3359</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertMaximum()&quot;</span>;</div>
<div class="line"><a name="l03360"></a><span class="lineno"> 3360</span>&#160; </div>
<div class="line"><a name="l03361"></a><span class="lineno"> 3361</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input0 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l03362"></a><span class="lineno"> 3362</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input1 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 1, model, data);</div>
<div class="line"><a name="l03363"></a><span class="lineno"> 3363</span>&#160; </div>
<div class="line"><a name="l03364"></a><span class="lineno"> 3364</span>&#160;    <span class="keywordflow">if</span> (!input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() || !input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l03365"></a><span class="lineno"> 3365</span>&#160;    {</div>
<div class="line"><a name="l03366"></a><span class="lineno"> 3366</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l03367"></a><span class="lineno"> 3367</span>&#160;    }</div>
<div class="line"><a name="l03368"></a><span class="lineno"> 3368</span>&#160; </div>
<div class="line"><a name="l03369"></a><span class="lineno"> 3369</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* outputOperand = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l03370"></a><span class="lineno"> 3370</span>&#160;    <span class="keywordflow">if</span> (!outputOperand)</div>
<div class="line"><a name="l03371"></a><span class="lineno"> 3371</span>&#160;    {</div>
<div class="line"><a name="l03372"></a><span class="lineno"> 3372</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output&quot;</span>, __func__);</div>
<div class="line"><a name="l03373"></a><span class="lineno"> 3373</span>&#160;    }</div>
<div class="line"><a name="l03374"></a><span class="lineno"> 3374</span>&#160; </div>
<div class="line"><a name="l03375"></a><span class="lineno"> 3375</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*outputOperand);</div>
<div class="line"><a name="l03376"></a><span class="lineno"> 3376</span>&#160; </div>
<div class="line"><a name="l03377"></a><span class="lineno"> 3377</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l03378"></a><span class="lineno"> 3378</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l03379"></a><span class="lineno"> 3379</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l03380"></a><span class="lineno"> 3380</span>&#160;    {</div>
<div class="line"><a name="l03381"></a><span class="lineno"> 3381</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l03382"></a><span class="lineno"> 3382</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a977729771e5ab4263e933f785fa532a6">IsMaximumSupported</a>,</div>
<div class="line"><a name="l03383"></a><span class="lineno"> 3383</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l03384"></a><span class="lineno"> 3384</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l03385"></a><span class="lineno"> 3385</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l03386"></a><span class="lineno"> 3386</span>&#160;                                   input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l03387"></a><span class="lineno"> 3387</span>&#160;                                   input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l03388"></a><span class="lineno"> 3388</span>&#160;                                   outInfo);</div>
<div class="line"><a name="l03389"></a><span class="lineno"> 3389</span>&#160;    };</div>
<div class="line"><a name="l03390"></a><span class="lineno"> 3390</span>&#160; </div>
<div class="line"><a name="l03391"></a><span class="lineno"> 3391</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outInfo))</div>
<div class="line"><a name="l03392"></a><span class="lineno"> 3392</span>&#160;    {</div>
<div class="line"><a name="l03393"></a><span class="lineno"> 3393</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l03394"></a><span class="lineno"> 3394</span>&#160;    }</div>
<div class="line"><a name="l03395"></a><span class="lineno"> 3395</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03396"></a><span class="lineno"> 3396</span>&#160;    {</div>
<div class="line"><a name="l03397"></a><span class="lineno"> 3397</span>&#160;        validateFunc(outInfo, isSupported);</div>
<div class="line"><a name="l03398"></a><span class="lineno"> 3398</span>&#160;    }</div>
<div class="line"><a name="l03399"></a><span class="lineno"> 3399</span>&#160; </div>
<div class="line"><a name="l03400"></a><span class="lineno"> 3400</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l03401"></a><span class="lineno"> 3401</span>&#160;    {</div>
<div class="line"><a name="l03402"></a><span class="lineno"> 3402</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03403"></a><span class="lineno"> 3403</span>&#160;    }</div>
<div class="line"><a name="l03404"></a><span class="lineno"> 3404</span>&#160; </div>
<div class="line"><a name="l03405"></a><span class="lineno"> 3405</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddMaximumLayer();</div>
<div class="line"><a name="l03406"></a><span class="lineno"> 3406</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l03407"></a><span class="lineno"> 3407</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l03408"></a><span class="lineno"> 3408</span>&#160;    <span class="keywordtype">bool</span> isReshapeSupported = BroadcastTensor(input0, input1, layer, data);</div>
<div class="line"><a name="l03409"></a><span class="lineno"> 3409</span>&#160;    <span class="keywordflow">if</span> (!isReshapeSupported)</div>
<div class="line"><a name="l03410"></a><span class="lineno"> 3410</span>&#160;    {</div>
<div class="line"><a name="l03411"></a><span class="lineno"> 3411</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03412"></a><span class="lineno"> 3412</span>&#160;    }</div>
<div class="line"><a name="l03413"></a><span class="lineno"> 3413</span>&#160; </div>
<div class="line"><a name="l03414"></a><span class="lineno"> 3414</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l03415"></a><span class="lineno"> 3415</span>&#160;}</div>
<div class="line"><a name="l03416"></a><span class="lineno"> 3416</span>&#160; </div>
<div class="line"><a name="l03417"></a><span class="lineno"> 3417</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertMean(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l03418"></a><span class="lineno"> 3418</span>&#160;{</div>
<div class="line"><a name="l03419"></a><span class="lineno"> 3419</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertMean()&quot;</span>;</div>
<div class="line"><a name="l03420"></a><span class="lineno"> 3420</span>&#160; </div>
<div class="line"><a name="l03421"></a><span class="lineno"> 3421</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l03422"></a><span class="lineno"> 3422</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l03423"></a><span class="lineno"> 3423</span>&#160;    {</div>
<div class="line"><a name="l03424"></a><span class="lineno"> 3424</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l03425"></a><span class="lineno"> 3425</span>&#160;    }</div>
<div class="line"><a name="l03426"></a><span class="lineno"> 3426</span>&#160; </div>
<div class="line"><a name="l03427"></a><span class="lineno"> 3427</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l03428"></a><span class="lineno"> 3428</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l03429"></a><span class="lineno"> 3429</span>&#160;    {</div>
<div class="line"><a name="l03430"></a><span class="lineno"> 3430</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l03431"></a><span class="lineno"> 3431</span>&#160;    }</div>
<div class="line"><a name="l03432"></a><span class="lineno"> 3432</span>&#160; </div>
<div class="line"><a name="l03433"></a><span class="lineno"> 3433</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l03434"></a><span class="lineno"> 3434</span>&#160; </div>
<div class="line"><a name="l03435"></a><span class="lineno"> 3435</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* axisOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 1, model);</div>
<div class="line"><a name="l03436"></a><span class="lineno"> 3436</span>&#160;    <span class="keywordflow">if</span> (!axisOperand)</div>
<div class="line"><a name="l03437"></a><span class="lineno"> 3437</span>&#160;    {</div>
<div class="line"><a name="l03438"></a><span class="lineno"> 3438</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 1&quot;</span>, __func__);</div>
<div class="line"><a name="l03439"></a><span class="lineno"> 3439</span>&#160;    }</div>
<div class="line"><a name="l03440"></a><span class="lineno"> 3440</span>&#160; </div>
<div class="line"><a name="l03441"></a><span class="lineno"> 3441</span>&#160;    std::vector&lt;int32_t&gt; axis;</div>
<div class="line"><a name="l03442"></a><span class="lineno"> 3442</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#ac8643aaee3eafc54336c5462b51bd53f">GetTensorInt32Values</a>(*axisOperand, axis, model, data))</div>
<div class="line"><a name="l03443"></a><span class="lineno"> 3443</span>&#160;    {</div>
<div class="line"><a name="l03444"></a><span class="lineno"> 3444</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Input 1 has invalid values&quot;</span>, __func__);</div>
<div class="line"><a name="l03445"></a><span class="lineno"> 3445</span>&#160;    }</div>
<div class="line"><a name="l03446"></a><span class="lineno"> 3446</span>&#160; </div>
<div class="line"><a name="l03447"></a><span class="lineno"> 3447</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l03448"></a><span class="lineno"> 3448</span>&#160; </div>
<div class="line"><a name="l03449"></a><span class="lineno"> 3449</span>&#160;    <span class="comment">// Convert the axis to unsigned int and remove duplicates.</span></div>
<div class="line"><a name="l03450"></a><span class="lineno"> 3450</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rank = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l03451"></a><span class="lineno"> 3451</span>&#160;    std::set&lt;unsigned int&gt; uniqueAxis;</div>
<div class="line"><a name="l03452"></a><span class="lineno"> 3452</span>&#160;    std::transform(axis.begin(), axis.end(),</div>
<div class="line"><a name="l03453"></a><span class="lineno"> 3453</span>&#160;                   std::inserter(uniqueAxis, uniqueAxis.begin()),</div>
<div class="line"><a name="l03454"></a><span class="lineno"> 3454</span>&#160;                   [rank](<span class="keywordtype">int</span> i) -&gt; <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> { return (i + rank) % rank; });</div>
<div class="line"><a name="l03455"></a><span class="lineno"> 3455</span>&#160; </div>
<div class="line"><a name="l03456"></a><span class="lineno"> 3456</span>&#160;    <span class="comment">// Get the &quot;keep dims&quot; flag.</span></div>
<div class="line"><a name="l03457"></a><span class="lineno"> 3457</span>&#160;    int32_t keepDims = 0;</div>
<div class="line"><a name="l03458"></a><span class="lineno"> 3458</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#aa43f9c81f830559c15e5af86f8e11482">GetInputInt32</a>(operation, 2, keepDims, model, data))</div>
<div class="line"><a name="l03459"></a><span class="lineno"> 3459</span>&#160;    {</div>
<div class="line"><a name="l03460"></a><span class="lineno"> 3460</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 2&quot;</span>, __func__);</div>
<div class="line"><a name="l03461"></a><span class="lineno"> 3461</span>&#160;    }</div>
<div class="line"><a name="l03462"></a><span class="lineno"> 3462</span>&#160; </div>
<div class="line"><a name="l03463"></a><span class="lineno"> 3463</span>&#160;    <a class="code" href="structarmnn_1_1_mean_descriptor.xhtml">armnn::MeanDescriptor</a> descriptor;</div>
<div class="line"><a name="l03464"></a><span class="lineno"> 3464</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_mean_descriptor.xhtml#a1f0d67b087c491248bd1cde3ff995a95">m_Axis</a>.assign(uniqueAxis.begin(), uniqueAxis.end());</div>
<div class="line"><a name="l03465"></a><span class="lineno"> 3465</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_mean_descriptor.xhtml#a28e0548abfc4e79c48f29a3d11a062e9">m_KeepDims</a> = keepDims &gt; 0;</div>
<div class="line"><a name="l03466"></a><span class="lineno"> 3466</span>&#160; </div>
<div class="line"><a name="l03467"></a><span class="lineno"> 3467</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l03468"></a><span class="lineno"> 3468</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l03469"></a><span class="lineno"> 3469</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l03470"></a><span class="lineno"> 3470</span>&#160;    {</div>
<div class="line"><a name="l03471"></a><span class="lineno"> 3471</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l03472"></a><span class="lineno"> 3472</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a79698fa98352bffccc6723de84677680">IsMeanSupported</a>,</div>
<div class="line"><a name="l03473"></a><span class="lineno"> 3473</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l03474"></a><span class="lineno"> 3474</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l03475"></a><span class="lineno"> 3475</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l03476"></a><span class="lineno"> 3476</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l03477"></a><span class="lineno"> 3477</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l03478"></a><span class="lineno"> 3478</span>&#160;                                   descriptor);</div>
<div class="line"><a name="l03479"></a><span class="lineno"> 3479</span>&#160;    };</div>
<div class="line"><a name="l03480"></a><span class="lineno"> 3480</span>&#160; </div>
<div class="line"><a name="l03481"></a><span class="lineno"> 3481</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l03482"></a><span class="lineno"> 3482</span>&#160;    {</div>
<div class="line"><a name="l03483"></a><span class="lineno"> 3483</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l03484"></a><span class="lineno"> 3484</span>&#160;    }</div>
<div class="line"><a name="l03485"></a><span class="lineno"> 3485</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03486"></a><span class="lineno"> 3486</span>&#160;    {</div>
<div class="line"><a name="l03487"></a><span class="lineno"> 3487</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l03488"></a><span class="lineno"> 3488</span>&#160;    }</div>
<div class="line"><a name="l03489"></a><span class="lineno"> 3489</span>&#160; </div>
<div class="line"><a name="l03490"></a><span class="lineno"> 3490</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l03491"></a><span class="lineno"> 3491</span>&#160;    {</div>
<div class="line"><a name="l03492"></a><span class="lineno"> 3492</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03493"></a><span class="lineno"> 3493</span>&#160;    }</div>
<div class="line"><a name="l03494"></a><span class="lineno"> 3494</span>&#160; </div>
<div class="line"><a name="l03495"></a><span class="lineno"> 3495</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddMeanLayer(descriptor);</div>
<div class="line"><a name="l03496"></a><span class="lineno"> 3496</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l03497"></a><span class="lineno"> 3497</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l03498"></a><span class="lineno"> 3498</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l03499"></a><span class="lineno"> 3499</span>&#160; </div>
<div class="line"><a name="l03500"></a><span class="lineno"> 3500</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l03501"></a><span class="lineno"> 3501</span>&#160;}</div>
<div class="line"><a name="l03502"></a><span class="lineno"> 3502</span>&#160; </div>
<div class="line"><a name="l03503"></a><span class="lineno"> 3503</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertMinimum(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l03504"></a><span class="lineno"> 3504</span>&#160;{</div>
<div class="line"><a name="l03505"></a><span class="lineno"> 3505</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertMinimum()&quot;</span>;</div>
<div class="line"><a name="l03506"></a><span class="lineno"> 3506</span>&#160; </div>
<div class="line"><a name="l03507"></a><span class="lineno"> 3507</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input0 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l03508"></a><span class="lineno"> 3508</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input1 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 1, model, data);</div>
<div class="line"><a name="l03509"></a><span class="lineno"> 3509</span>&#160; </div>
<div class="line"><a name="l03510"></a><span class="lineno"> 3510</span>&#160;    <span class="keywordflow">if</span> (!input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() || !input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l03511"></a><span class="lineno"> 3511</span>&#160;    {</div>
<div class="line"><a name="l03512"></a><span class="lineno"> 3512</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l03513"></a><span class="lineno"> 3513</span>&#160;    }</div>
<div class="line"><a name="l03514"></a><span class="lineno"> 3514</span>&#160; </div>
<div class="line"><a name="l03515"></a><span class="lineno"> 3515</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l03516"></a><span class="lineno"> 3516</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l03517"></a><span class="lineno"> 3517</span>&#160;    {</div>
<div class="line"><a name="l03518"></a><span class="lineno"> 3518</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l03519"></a><span class="lineno"> 3519</span>&#160;    }</div>
<div class="line"><a name="l03520"></a><span class="lineno"> 3520</span>&#160; </div>
<div class="line"><a name="l03521"></a><span class="lineno"> 3521</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l03522"></a><span class="lineno"> 3522</span>&#160; </div>
<div class="line"><a name="l03523"></a><span class="lineno"> 3523</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l03524"></a><span class="lineno"> 3524</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l03525"></a><span class="lineno"> 3525</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l03526"></a><span class="lineno"> 3526</span>&#160;    {</div>
<div class="line"><a name="l03527"></a><span class="lineno"> 3527</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l03528"></a><span class="lineno"> 3528</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a29bdc2efd75bb437f4292dd9fcb5c89a">IsMinimumSupported</a>,</div>
<div class="line"><a name="l03529"></a><span class="lineno"> 3529</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l03530"></a><span class="lineno"> 3530</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l03531"></a><span class="lineno"> 3531</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l03532"></a><span class="lineno"> 3532</span>&#160;                                   input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l03533"></a><span class="lineno"> 3533</span>&#160;                                   input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l03534"></a><span class="lineno"> 3534</span>&#160;                                   outputInfo);</div>
<div class="line"><a name="l03535"></a><span class="lineno"> 3535</span>&#160;    };</div>
<div class="line"><a name="l03536"></a><span class="lineno"> 3536</span>&#160; </div>
<div class="line"><a name="l03537"></a><span class="lineno"> 3537</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l03538"></a><span class="lineno"> 3538</span>&#160;    {</div>
<div class="line"><a name="l03539"></a><span class="lineno"> 3539</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l03540"></a><span class="lineno"> 3540</span>&#160;    }</div>
<div class="line"><a name="l03541"></a><span class="lineno"> 3541</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03542"></a><span class="lineno"> 3542</span>&#160;    {</div>
<div class="line"><a name="l03543"></a><span class="lineno"> 3543</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l03544"></a><span class="lineno"> 3544</span>&#160;    }</div>
<div class="line"><a name="l03545"></a><span class="lineno"> 3545</span>&#160; </div>
<div class="line"><a name="l03546"></a><span class="lineno"> 3546</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l03547"></a><span class="lineno"> 3547</span>&#160;    {</div>
<div class="line"><a name="l03548"></a><span class="lineno"> 3548</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03549"></a><span class="lineno"> 3549</span>&#160;    }</div>
<div class="line"><a name="l03550"></a><span class="lineno"> 3550</span>&#160; </div>
<div class="line"><a name="l03551"></a><span class="lineno"> 3551</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddMinimumLayer();</div>
<div class="line"><a name="l03552"></a><span class="lineno"> 3552</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l03553"></a><span class="lineno"> 3553</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l03554"></a><span class="lineno"> 3554</span>&#160;    <span class="keywordtype">bool</span> isReshapeSupported = BroadcastTensor(input0, input1, layer, data);</div>
<div class="line"><a name="l03555"></a><span class="lineno"> 3555</span>&#160;    <span class="keywordflow">if</span> (!isReshapeSupported)</div>
<div class="line"><a name="l03556"></a><span class="lineno"> 3556</span>&#160;    {</div>
<div class="line"><a name="l03557"></a><span class="lineno"> 3557</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03558"></a><span class="lineno"> 3558</span>&#160;    }</div>
<div class="line"><a name="l03559"></a><span class="lineno"> 3559</span>&#160; </div>
<div class="line"><a name="l03560"></a><span class="lineno"> 3560</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l03561"></a><span class="lineno"> 3561</span>&#160;}</div>
<div class="line"><a name="l03562"></a><span class="lineno"> 3562</span>&#160; </div>
<div class="line"><a name="l03563"></a><span class="lineno"> 3563</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertMul(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l03564"></a><span class="lineno"> 3564</span>&#160;{</div>
<div class="line"><a name="l03565"></a><span class="lineno"> 3565</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertMul()&quot;</span>;</div>
<div class="line"><a name="l03566"></a><span class="lineno"> 3566</span>&#160; </div>
<div class="line"><a name="l03567"></a><span class="lineno"> 3567</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input0 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l03568"></a><span class="lineno"> 3568</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input1 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 1, model, data);</div>
<div class="line"><a name="l03569"></a><span class="lineno"> 3569</span>&#160; </div>
<div class="line"><a name="l03570"></a><span class="lineno"> 3570</span>&#160;    <span class="keywordflow">if</span> (!input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() || !input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l03571"></a><span class="lineno"> 3571</span>&#160;    {</div>
<div class="line"><a name="l03572"></a><span class="lineno"> 3572</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l03573"></a><span class="lineno"> 3573</span>&#160;    }</div>
<div class="line"><a name="l03574"></a><span class="lineno"> 3574</span>&#160; </div>
<div class="line"><a name="l03575"></a><span class="lineno"> 3575</span>&#160;    <span class="comment">// The FuseActivation parameter is always the input index 2</span></div>
<div class="line"><a name="l03576"></a><span class="lineno"> 3576</span>&#160;    <span class="comment">// and it should be optional</span></div>
<div class="line"><a name="l03577"></a><span class="lineno"> 3577</span>&#160;    ActivationFn activationFunction;</div>
<div class="line"><a name="l03578"></a><span class="lineno"> 3578</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#acd62ec697055015572a6ba61eaba4f1a">GetOptionalInputActivation</a>(operation, 2, activationFunction, model, data))</div>
<div class="line"><a name="l03579"></a><span class="lineno"> 3579</span>&#160;    {</div>
<div class="line"><a name="l03580"></a><span class="lineno"> 3580</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l03581"></a><span class="lineno"> 3581</span>&#160;    }</div>
<div class="line"><a name="l03582"></a><span class="lineno"> 3582</span>&#160; </div>
<div class="line"><a name="l03583"></a><span class="lineno"> 3583</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* outputOperand = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l03584"></a><span class="lineno"> 3584</span>&#160; </div>
<div class="line"><a name="l03585"></a><span class="lineno"> 3585</span>&#160;    <span class="keywordflow">if</span> (outputOperand == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l03586"></a><span class="lineno"> 3586</span>&#160;    {</div>
<div class="line"><a name="l03587"></a><span class="lineno"> 3587</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03588"></a><span class="lineno"> 3588</span>&#160;    }</div>
<div class="line"><a name="l03589"></a><span class="lineno"> 3589</span>&#160; </div>
<div class="line"><a name="l03590"></a><span class="lineno"> 3590</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*outputOperand);</div>
<div class="line"><a name="l03591"></a><span class="lineno"> 3591</span>&#160; </div>
<div class="line"><a name="l03592"></a><span class="lineno"> 3592</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l03593"></a><span class="lineno"> 3593</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l03594"></a><span class="lineno"> 3594</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l03595"></a><span class="lineno"> 3595</span>&#160;    {</div>
<div class="line"><a name="l03596"></a><span class="lineno"> 3596</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l03597"></a><span class="lineno"> 3597</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a9624be7520f71d00bfb769d94e0b088b">IsMultiplicationSupported</a>,</div>
<div class="line"><a name="l03598"></a><span class="lineno"> 3598</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l03599"></a><span class="lineno"> 3599</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l03600"></a><span class="lineno"> 3600</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l03601"></a><span class="lineno"> 3601</span>&#160;                                   input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l03602"></a><span class="lineno"> 3602</span>&#160;                                   input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l03603"></a><span class="lineno"> 3603</span>&#160;                                   outputInfo);</div>
<div class="line"><a name="l03604"></a><span class="lineno"> 3604</span>&#160;    };</div>
<div class="line"><a name="l03605"></a><span class="lineno"> 3605</span>&#160; </div>
<div class="line"><a name="l03606"></a><span class="lineno"> 3606</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l03607"></a><span class="lineno"> 3607</span>&#160;    {</div>
<div class="line"><a name="l03608"></a><span class="lineno"> 3608</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l03609"></a><span class="lineno"> 3609</span>&#160;    }</div>
<div class="line"><a name="l03610"></a><span class="lineno"> 3610</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03611"></a><span class="lineno"> 3611</span>&#160;    {</div>
<div class="line"><a name="l03612"></a><span class="lineno"> 3612</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l03613"></a><span class="lineno"> 3613</span>&#160;    }</div>
<div class="line"><a name="l03614"></a><span class="lineno"> 3614</span>&#160; </div>
<div class="line"><a name="l03615"></a><span class="lineno"> 3615</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l03616"></a><span class="lineno"> 3616</span>&#160;    {</div>
<div class="line"><a name="l03617"></a><span class="lineno"> 3617</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03618"></a><span class="lineno"> 3618</span>&#160;    }</div>
<div class="line"><a name="l03619"></a><span class="lineno"> 3619</span>&#160; </div>
<div class="line"><a name="l03620"></a><span class="lineno"> 3620</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> startLayer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddMultiplicationLayer();</div>
<div class="line"><a name="l03621"></a><span class="lineno"> 3621</span>&#160;    startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l03622"></a><span class="lineno"> 3622</span>&#160; </div>
<div class="line"><a name="l03623"></a><span class="lineno"> 3623</span>&#160;    <span class="keywordtype">bool</span> isReshapeSupported = BroadcastTensor(input0, input1, startLayer, data);</div>
<div class="line"><a name="l03624"></a><span class="lineno"> 3624</span>&#160;    <span class="keywordflow">if</span> (!isReshapeSupported)</div>
<div class="line"><a name="l03625"></a><span class="lineno"> 3625</span>&#160;    {</div>
<div class="line"><a name="l03626"></a><span class="lineno"> 3626</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03627"></a><span class="lineno"> 3627</span>&#160;    }</div>
<div class="line"><a name="l03628"></a><span class="lineno"> 3628</span>&#160; </div>
<div class="line"><a name="l03629"></a><span class="lineno"> 3629</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *startLayer, model,</div>
<div class="line"><a name="l03630"></a><span class="lineno"> 3630</span>&#160;                                        data, <span class="keyword">nullptr</span>, validateFunc, activationFunction);</div>
<div class="line"><a name="l03631"></a><span class="lineno"> 3631</span>&#160;}</div>
<div class="line"><a name="l03632"></a><span class="lineno"> 3632</span>&#160; </div>
<div class="line"><a name="l03633"></a><span class="lineno"> 3633</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertPad(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l03634"></a><span class="lineno"> 3634</span>&#160;{</div>
<div class="line"><a name="l03635"></a><span class="lineno"> 3635</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertPad()&quot;</span>;</div>
<div class="line"><a name="l03636"></a><span class="lineno"> 3636</span>&#160; </div>
<div class="line"><a name="l03637"></a><span class="lineno"> 3637</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l03638"></a><span class="lineno"> 3638</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l03639"></a><span class="lineno"> 3639</span>&#160;    {</div>
<div class="line"><a name="l03640"></a><span class="lineno"> 3640</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l03641"></a><span class="lineno"> 3641</span>&#160;    }</div>
<div class="line"><a name="l03642"></a><span class="lineno"> 3642</span>&#160; </div>
<div class="line"><a name="l03643"></a><span class="lineno"> 3643</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l03644"></a><span class="lineno"> 3644</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rank = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l03645"></a><span class="lineno"> 3645</span>&#160; </div>
<div class="line"><a name="l03646"></a><span class="lineno"> 3646</span>&#160;    <a class="code" href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a> descriptor;</div>
<div class="line"><a name="l03647"></a><span class="lineno"> 3647</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#a8d4f662a4fb5b9272724bdaeacbd370a">ConvertPaddings</a>(operation, model, data, rank, descriptor))</div>
<div class="line"><a name="l03648"></a><span class="lineno"> 3648</span>&#160;    {</div>
<div class="line"><a name="l03649"></a><span class="lineno"> 3649</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not convert paddings&quot;</span>, __func__);</div>
<div class="line"><a name="l03650"></a><span class="lineno"> 3650</span>&#160;    }</div>
<div class="line"><a name="l03651"></a><span class="lineno"> 3651</span>&#160; </div>
<div class="line"><a name="l03652"></a><span class="lineno"> 3652</span>&#160;    <span class="comment">// For a ANEURALNETWORKS_TENSOR_QUANT8_ASYMM and ANEURALNETWORKS_TENSOR_QUANT8_ASYMM_SIGNED tensor,</span></div>
<div class="line"><a name="l03653"></a><span class="lineno"> 3653</span>&#160;    <span class="comment">// the scale and zeroPoint must be the same as input0</span></div>
<div class="line"><a name="l03654"></a><span class="lineno"> 3654</span>&#160;    <span class="comment">// Before Android Q, the pad value for ANEURALNETWORKS_TENSOR_QUANT8_ASYMM was undefined. Since Android Q the pad</span></div>
<div class="line"><a name="l03655"></a><span class="lineno"> 3655</span>&#160;    <span class="comment">// value must be &quot;logical zero&quot; we set it to be equal to the QuantizationOffset so effectively it ends up as</span></div>
<div class="line"><a name="l03656"></a><span class="lineno"> 3656</span>&#160;    <span class="comment">// (QuantizationOffset - QuantizationOffset) * scale = 0.</span></div>
<div class="line"><a name="l03657"></a><span class="lineno"> 3657</span>&#160;    <span class="keywordflow">if</span> (inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a> || inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>)</div>
<div class="line"><a name="l03658"></a><span class="lineno"> 3658</span>&#160;    {</div>
<div class="line"><a name="l03659"></a><span class="lineno"> 3659</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_pad_descriptor.xhtml#a410fa919f78af0f0f100bd1594eca4ab">m_PadValue</a> = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">GetQuantizationOffset</a>();</div>
<div class="line"><a name="l03660"></a><span class="lineno"> 3660</span>&#160;    }</div>
<div class="line"><a name="l03661"></a><span class="lineno"> 3661</span>&#160; </div>
<div class="line"><a name="l03662"></a><span class="lineno"> 3662</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l03663"></a><span class="lineno"> 3663</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l03664"></a><span class="lineno"> 3664</span>&#160;    {</div>
<div class="line"><a name="l03665"></a><span class="lineno"> 3665</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output&quot;</span>, __func__);</div>
<div class="line"><a name="l03666"></a><span class="lineno"> 3666</span>&#160;    }</div>
<div class="line"><a name="l03667"></a><span class="lineno"> 3667</span>&#160; </div>
<div class="line"><a name="l03668"></a><span class="lineno"> 3668</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l03669"></a><span class="lineno"> 3669</span>&#160; </div>
<div class="line"><a name="l03670"></a><span class="lineno"> 3670</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l03671"></a><span class="lineno"> 3671</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l03672"></a><span class="lineno"> 3672</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l03673"></a><span class="lineno"> 3673</span>&#160;    {</div>
<div class="line"><a name="l03674"></a><span class="lineno"> 3674</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l03675"></a><span class="lineno"> 3675</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#ae467c9a579c8fb41427227a1c1e1cb4c">IsPadSupported</a>,</div>
<div class="line"><a name="l03676"></a><span class="lineno"> 3676</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l03677"></a><span class="lineno"> 3677</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l03678"></a><span class="lineno"> 3678</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l03679"></a><span class="lineno"> 3679</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l03680"></a><span class="lineno"> 3680</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l03681"></a><span class="lineno"> 3681</span>&#160;                                   descriptor);</div>
<div class="line"><a name="l03682"></a><span class="lineno"> 3682</span>&#160;    };</div>
<div class="line"><a name="l03683"></a><span class="lineno"> 3683</span>&#160; </div>
<div class="line"><a name="l03684"></a><span class="lineno"> 3684</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l03685"></a><span class="lineno"> 3685</span>&#160;    {</div>
<div class="line"><a name="l03686"></a><span class="lineno"> 3686</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l03687"></a><span class="lineno"> 3687</span>&#160;    }</div>
<div class="line"><a name="l03688"></a><span class="lineno"> 3688</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03689"></a><span class="lineno"> 3689</span>&#160;    {</div>
<div class="line"><a name="l03690"></a><span class="lineno"> 3690</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l03691"></a><span class="lineno"> 3691</span>&#160;    }</div>
<div class="line"><a name="l03692"></a><span class="lineno"> 3692</span>&#160; </div>
<div class="line"><a name="l03693"></a><span class="lineno"> 3693</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l03694"></a><span class="lineno"> 3694</span>&#160;    {</div>
<div class="line"><a name="l03695"></a><span class="lineno"> 3695</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03696"></a><span class="lineno"> 3696</span>&#160;    }</div>
<div class="line"><a name="l03697"></a><span class="lineno"> 3697</span>&#160; </div>
<div class="line"><a name="l03698"></a><span class="lineno"> 3698</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddPadLayer(descriptor);</div>
<div class="line"><a name="l03699"></a><span class="lineno"> 3699</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l03700"></a><span class="lineno"> 3700</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l03701"></a><span class="lineno"> 3701</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l03702"></a><span class="lineno"> 3702</span>&#160; </div>
<div class="line"><a name="l03703"></a><span class="lineno"> 3703</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l03704"></a><span class="lineno"> 3704</span>&#160;}</div>
<div class="line"><a name="l03705"></a><span class="lineno"> 3705</span>&#160; </div>
<div class="line"><a name="l03706"></a><span class="lineno"> 3706</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertPadV2(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l03707"></a><span class="lineno"> 3707</span>&#160;{</div>
<div class="line"><a name="l03708"></a><span class="lineno"> 3708</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertPadV2()&quot;</span>;</div>
<div class="line"><a name="l03709"></a><span class="lineno"> 3709</span>&#160; </div>
<div class="line"><a name="l03710"></a><span class="lineno"> 3710</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l03711"></a><span class="lineno"> 3711</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l03712"></a><span class="lineno"> 3712</span>&#160;    {</div>
<div class="line"><a name="l03713"></a><span class="lineno"> 3713</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 0&quot;</span>, __func__);</div>
<div class="line"><a name="l03714"></a><span class="lineno"> 3714</span>&#160;    }</div>
<div class="line"><a name="l03715"></a><span class="lineno"> 3715</span>&#160; </div>
<div class="line"><a name="l03716"></a><span class="lineno"> 3716</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l03717"></a><span class="lineno"> 3717</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l03718"></a><span class="lineno"> 3718</span>&#160;    {</div>
<div class="line"><a name="l03719"></a><span class="lineno"> 3719</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output&quot;</span>, __func__);</div>
<div class="line"><a name="l03720"></a><span class="lineno"> 3720</span>&#160;    }</div>
<div class="line"><a name="l03721"></a><span class="lineno"> 3721</span>&#160; </div>
<div class="line"><a name="l03722"></a><span class="lineno"> 3722</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo  = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l03723"></a><span class="lineno"> 3723</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rank = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l03724"></a><span class="lineno"> 3724</span>&#160; </div>
<div class="line"><a name="l03725"></a><span class="lineno"> 3725</span>&#160;    <a class="code" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> descriptor;</div>
<div class="line"><a name="l03726"></a><span class="lineno"> 3726</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#a8d4f662a4fb5b9272724bdaeacbd370a">ConvertPaddings</a>(operation, model, data, rank, descriptor))</div>
<div class="line"><a name="l03727"></a><span class="lineno"> 3727</span>&#160;    {</div>
<div class="line"><a name="l03728"></a><span class="lineno"> 3728</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not convert paddings&quot;</span>, __func__);</div>
<div class="line"><a name="l03729"></a><span class="lineno"> 3729</span>&#160;    }</div>
<div class="line"><a name="l03730"></a><span class="lineno"> 3730</span>&#160; </div>
<div class="line"><a name="l03731"></a><span class="lineno"> 3731</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l03732"></a><span class="lineno"> 3732</span>&#160; </div>
<div class="line"><a name="l03733"></a><span class="lineno"> 3733</span>&#160;    <span class="comment">// Determine type of padding value</span></div>
<div class="line"><a name="l03734"></a><span class="lineno"> 3734</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a53bfb6eb38a90244ba166b641a6965d9">OperandType</a> operandType0;</div>
<div class="line"><a name="l03735"></a><span class="lineno"> 3735</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a53bfb6eb38a90244ba166b641a6965d9">OperandType</a> operandType2;</div>
<div class="line"><a name="l03736"></a><span class="lineno"> 3736</span>&#160; </div>
<div class="line"><a name="l03737"></a><span class="lineno"> 3737</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#adfc2c5b834fdb89e5458ddb1d9aa7830">GetOperandType</a>(operation, 0, model, operandType0) ||</div>
<div class="line"><a name="l03738"></a><span class="lineno"> 3738</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#adfc2c5b834fdb89e5458ddb1d9aa7830">GetOperandType</a>(operation, 2, model, operandType2))</div>
<div class="line"><a name="l03739"></a><span class="lineno"> 3739</span>&#160;    {</div>
<div class="line"><a name="l03740"></a><span class="lineno"> 3740</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l03741"></a><span class="lineno"> 3741</span>&#160;    }</div>
<div class="line"><a name="l03742"></a><span class="lineno"> 3742</span>&#160; </div>
<div class="line"><a name="l03743"></a><span class="lineno"> 3743</span>&#160;    <span class="comment">// Read value to use for padding</span></div>
<div class="line"><a name="l03744"></a><span class="lineno"> 3744</span>&#160;    <span class="keywordflow">if</span> (operandType0 == OperandType::TENSOR_FLOAT16 &amp;&amp; operandType2 == OperandType::FLOAT16)</div>
<div class="line"><a name="l03745"></a><span class="lineno"> 3745</span>&#160;    {</div>
<div class="line"><a name="l03746"></a><span class="lineno"> 3746</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">Half</a> f16PadValue;</div>
<div class="line"><a name="l03747"></a><span class="lineno"> 3747</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 2, operandType2, f16PadValue, model, data))</div>
<div class="line"><a name="l03748"></a><span class="lineno"> 3748</span>&#160;        {</div>
<div class="line"><a name="l03749"></a><span class="lineno"> 3749</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 2 (FLOAT16)&quot;</span>, __func__);</div>
<div class="line"><a name="l03750"></a><span class="lineno"> 3750</span>&#160;        }</div>
<div class="line"><a name="l03751"></a><span class="lineno"> 3751</span>&#160; </div>
<div class="line"><a name="l03752"></a><span class="lineno"> 3752</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_pad_descriptor.xhtml#a410fa919f78af0f0f100bd1594eca4ab">m_PadValue</a> = f16PadValue;</div>
<div class="line"><a name="l03753"></a><span class="lineno"> 3753</span>&#160;    }</div>
<div class="line"><a name="l03754"></a><span class="lineno"> 3754</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (operandType0 == OperandType::TENSOR_FLOAT32 &amp;&amp; operandType2 == OperandType::FLOAT32)</div>
<div class="line"><a name="l03755"></a><span class="lineno"> 3755</span>&#160;    {</div>
<div class="line"><a name="l03756"></a><span class="lineno"> 3756</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#a560530462631e354561c1763f695351c">GetInputFloat32</a>(operation, 2, descriptor.<a class="code" href="structarmnn_1_1_pad_descriptor.xhtml#a410fa919f78af0f0f100bd1594eca4ab">m_PadValue</a>, model, data))</div>
<div class="line"><a name="l03757"></a><span class="lineno"> 3757</span>&#160;        {</div>
<div class="line"><a name="l03758"></a><span class="lineno"> 3758</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 2 (FLOAT32)&quot;</span>, __func__);</div>
<div class="line"><a name="l03759"></a><span class="lineno"> 3759</span>&#160;        }</div>
<div class="line"><a name="l03760"></a><span class="lineno"> 3760</span>&#160;    }</div>
<div class="line"><a name="l03761"></a><span class="lineno"> 3761</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn__driver.xhtml#ab3c135a0d4b1152f6b989ea6afddd6bc">isQuantizedOperand</a>(operandType0) &amp;&amp; operandType2 == OperandType::INT32)</div>
<div class="line"><a name="l03762"></a><span class="lineno"> 3762</span>&#160;    {</div>
<div class="line"><a name="l03763"></a><span class="lineno"> 3763</span>&#160;        int32_t intPadValue = 0;</div>
<div class="line"><a name="l03764"></a><span class="lineno"> 3764</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#aa43f9c81f830559c15e5af86f8e11482">GetInputInt32</a>(operation, 2, intPadValue, model, data))</div>
<div class="line"><a name="l03765"></a><span class="lineno"> 3765</span>&#160;        {</div>
<div class="line"><a name="l03766"></a><span class="lineno"> 3766</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 2 (INT32)&quot;</span>, __func__);</div>
<div class="line"><a name="l03767"></a><span class="lineno"> 3767</span>&#160;        }</div>
<div class="line"><a name="l03768"></a><span class="lineno"> 3768</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_pad_descriptor.xhtml#a410fa919f78af0f0f100bd1594eca4ab">m_PadValue</a> = intPadValue;</div>
<div class="line"><a name="l03769"></a><span class="lineno"> 3769</span>&#160;    }</div>
<div class="line"><a name="l03770"></a><span class="lineno"> 3770</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03771"></a><span class="lineno"> 3771</span>&#160;    {</div>
<div class="line"><a name="l03772"></a><span class="lineno"> 3772</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs: type mismatch&quot;</span>, __func__);</div>
<div class="line"><a name="l03773"></a><span class="lineno"> 3773</span>&#160;    }</div>
<div class="line"><a name="l03774"></a><span class="lineno"> 3774</span>&#160; </div>
<div class="line"><a name="l03775"></a><span class="lineno"> 3775</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l03776"></a><span class="lineno"> 3776</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l03777"></a><span class="lineno"> 3777</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l03778"></a><span class="lineno"> 3778</span>&#160;    {</div>
<div class="line"><a name="l03779"></a><span class="lineno"> 3779</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l03780"></a><span class="lineno"> 3780</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#ae467c9a579c8fb41427227a1c1e1cb4c">IsPadSupported</a>,</div>
<div class="line"><a name="l03781"></a><span class="lineno"> 3781</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l03782"></a><span class="lineno"> 3782</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l03783"></a><span class="lineno"> 3783</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l03784"></a><span class="lineno"> 3784</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l03785"></a><span class="lineno"> 3785</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l03786"></a><span class="lineno"> 3786</span>&#160;                                   descriptor);</div>
<div class="line"><a name="l03787"></a><span class="lineno"> 3787</span>&#160;    };</div>
<div class="line"><a name="l03788"></a><span class="lineno"> 3788</span>&#160; </div>
<div class="line"><a name="l03789"></a><span class="lineno"> 3789</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l03790"></a><span class="lineno"> 3790</span>&#160;    {</div>
<div class="line"><a name="l03791"></a><span class="lineno"> 3791</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l03792"></a><span class="lineno"> 3792</span>&#160;    }</div>
<div class="line"><a name="l03793"></a><span class="lineno"> 3793</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03794"></a><span class="lineno"> 3794</span>&#160;    {</div>
<div class="line"><a name="l03795"></a><span class="lineno"> 3795</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l03796"></a><span class="lineno"> 3796</span>&#160;    }</div>
<div class="line"><a name="l03797"></a><span class="lineno"> 3797</span>&#160; </div>
<div class="line"><a name="l03798"></a><span class="lineno"> 3798</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l03799"></a><span class="lineno"> 3799</span>&#160;    {</div>
<div class="line"><a name="l03800"></a><span class="lineno"> 3800</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03801"></a><span class="lineno"> 3801</span>&#160;    }</div>
<div class="line"><a name="l03802"></a><span class="lineno"> 3802</span>&#160; </div>
<div class="line"><a name="l03803"></a><span class="lineno"> 3803</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddPadLayer(descriptor);</div>
<div class="line"><a name="l03804"></a><span class="lineno"> 3804</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l03805"></a><span class="lineno"> 3805</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l03806"></a><span class="lineno"> 3806</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l03807"></a><span class="lineno"> 3807</span>&#160; </div>
<div class="line"><a name="l03808"></a><span class="lineno"> 3808</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l03809"></a><span class="lineno"> 3809</span>&#160;}</div>
<div class="line"><a name="l03810"></a><span class="lineno"> 3810</span>&#160; </div>
<div class="line"><a name="l03811"></a><span class="lineno"> 3811</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertPrelu(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l03812"></a><span class="lineno"> 3812</span>&#160;{</div>
<div class="line"><a name="l03813"></a><span class="lineno"> 3813</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertPrelu()&quot;</span>;</div>
<div class="line"><a name="l03814"></a><span class="lineno"> 3814</span>&#160; </div>
<div class="line"><a name="l03815"></a><span class="lineno"> 3815</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l03816"></a><span class="lineno"> 3816</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> alpha = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 1, model, data);</div>
<div class="line"><a name="l03817"></a><span class="lineno"> 3817</span>&#160; </div>
<div class="line"><a name="l03818"></a><span class="lineno"> 3818</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() || !alpha.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l03819"></a><span class="lineno"> 3819</span>&#160;    {</div>
<div class="line"><a name="l03820"></a><span class="lineno"> 3820</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l03821"></a><span class="lineno"> 3821</span>&#160;    }</div>
<div class="line"><a name="l03822"></a><span class="lineno"> 3822</span>&#160; </div>
<div class="line"><a name="l03823"></a><span class="lineno"> 3823</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l03824"></a><span class="lineno"> 3824</span>&#160; </div>
<div class="line"><a name="l03825"></a><span class="lineno"> 3825</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l03826"></a><span class="lineno"> 3826</span>&#160;    {</div>
<div class="line"><a name="l03827"></a><span class="lineno"> 3827</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output&quot;</span>, __func__);</div>
<div class="line"><a name="l03828"></a><span class="lineno"> 3828</span>&#160;    }</div>
<div class="line"><a name="l03829"></a><span class="lineno"> 3829</span>&#160; </div>
<div class="line"><a name="l03830"></a><span class="lineno"> 3830</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo  = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l03831"></a><span class="lineno"> 3831</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; alphaInfo  = alpha.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l03832"></a><span class="lineno"> 3832</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l03833"></a><span class="lineno"> 3833</span>&#160; </div>
<div class="line"><a name="l03834"></a><span class="lineno"> 3834</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l03835"></a><span class="lineno"> 3835</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l03836"></a><span class="lineno"> 3836</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l03837"></a><span class="lineno"> 3837</span>&#160;    {</div>
<div class="line"><a name="l03838"></a><span class="lineno"> 3838</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l03839"></a><span class="lineno"> 3839</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a36d55a20000a7b50f7369c3ceeca46bd">IsPreluSupported</a>,</div>
<div class="line"><a name="l03840"></a><span class="lineno"> 3840</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l03841"></a><span class="lineno"> 3841</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l03842"></a><span class="lineno"> 3842</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l03843"></a><span class="lineno"> 3843</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l03844"></a><span class="lineno"> 3844</span>&#160;                                   alphaInfo,</div>
<div class="line"><a name="l03845"></a><span class="lineno"> 3845</span>&#160;                                   outputInfo);</div>
<div class="line"><a name="l03846"></a><span class="lineno"> 3846</span>&#160;    };</div>
<div class="line"><a name="l03847"></a><span class="lineno"> 3847</span>&#160; </div>
<div class="line"><a name="l03848"></a><span class="lineno"> 3848</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l03849"></a><span class="lineno"> 3849</span>&#160;    {</div>
<div class="line"><a name="l03850"></a><span class="lineno"> 3850</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l03851"></a><span class="lineno"> 3851</span>&#160;    }</div>
<div class="line"><a name="l03852"></a><span class="lineno"> 3852</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03853"></a><span class="lineno"> 3853</span>&#160;    {</div>
<div class="line"><a name="l03854"></a><span class="lineno"> 3854</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l03855"></a><span class="lineno"> 3855</span>&#160;    }</div>
<div class="line"><a name="l03856"></a><span class="lineno"> 3856</span>&#160; </div>
<div class="line"><a name="l03857"></a><span class="lineno"> 3857</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l03858"></a><span class="lineno"> 3858</span>&#160;    {</div>
<div class="line"><a name="l03859"></a><span class="lineno"> 3859</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03860"></a><span class="lineno"> 3860</span>&#160;    }</div>
<div class="line"><a name="l03861"></a><span class="lineno"> 3861</span>&#160; </div>
<div class="line"><a name="l03862"></a><span class="lineno"> 3862</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddPreluLayer();</div>
<div class="line"><a name="l03863"></a><span class="lineno"> 3863</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l03864"></a><span class="lineno"> 3864</span>&#160; </div>
<div class="line"><a name="l03865"></a><span class="lineno"> 3865</span>&#160;    <span class="keywordflow">if</span> (!layer)</div>
<div class="line"><a name="l03866"></a><span class="lineno"> 3866</span>&#160;    {</div>
<div class="line"><a name="l03867"></a><span class="lineno"> 3867</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: AddPreluLayer failed&quot;</span>, __func__);</div>
<div class="line"><a name="l03868"></a><span class="lineno"> 3868</span>&#160;    }</div>
<div class="line"><a name="l03869"></a><span class="lineno"> 3869</span>&#160; </div>
<div class="line"><a name="l03870"></a><span class="lineno"> 3870</span>&#160;    <span class="keywordtype">bool</span> isReshapeSupported = BroadcastTensor(input, alpha, layer, data);</div>
<div class="line"><a name="l03871"></a><span class="lineno"> 3871</span>&#160;    <span class="keywordflow">if</span> (!isReshapeSupported)</div>
<div class="line"><a name="l03872"></a><span class="lineno"> 3872</span>&#160;    {</div>
<div class="line"><a name="l03873"></a><span class="lineno"> 3873</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03874"></a><span class="lineno"> 3874</span>&#160;    }</div>
<div class="line"><a name="l03875"></a><span class="lineno"> 3875</span>&#160; </div>
<div class="line"><a name="l03876"></a><span class="lineno"> 3876</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l03877"></a><span class="lineno"> 3877</span>&#160;}</div>
<div class="line"><a name="l03878"></a><span class="lineno"> 3878</span>&#160; </div>
<div class="line"><a name="l03879"></a><span class="lineno"> 3879</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertQuantize(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l03880"></a><span class="lineno"> 3880</span>&#160;{</div>
<div class="line"><a name="l03881"></a><span class="lineno"> 3881</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertQuantize()&quot;</span>;</div>
<div class="line"><a name="l03882"></a><span class="lineno"> 3882</span>&#160; </div>
<div class="line"><a name="l03883"></a><span class="lineno"> 3883</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l03884"></a><span class="lineno"> 3884</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l03885"></a><span class="lineno"> 3885</span>&#160;    {</div>
<div class="line"><a name="l03886"></a><span class="lineno"> 3886</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid input&quot;</span>, __func__);</div>
<div class="line"><a name="l03887"></a><span class="lineno"> 3887</span>&#160;    }</div>
<div class="line"><a name="l03888"></a><span class="lineno"> 3888</span>&#160; </div>
<div class="line"><a name="l03889"></a><span class="lineno"> 3889</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* <span class="keyword">const</span> outputOperand = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l03890"></a><span class="lineno"> 3890</span>&#160;    <span class="keywordflow">if</span> (!outputOperand)</div>
<div class="line"><a name="l03891"></a><span class="lineno"> 3891</span>&#160;    {</div>
<div class="line"><a name="l03892"></a><span class="lineno"> 3892</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid outputs&quot;</span>, __func__);</div>
<div class="line"><a name="l03893"></a><span class="lineno"> 3893</span>&#160;    }</div>
<div class="line"><a name="l03894"></a><span class="lineno"> 3894</span>&#160; </div>
<div class="line"><a name="l03895"></a><span class="lineno"> 3895</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*outputOperand);</div>
<div class="line"><a name="l03896"></a><span class="lineno"> 3896</span>&#160; </div>
<div class="line"><a name="l03897"></a><span class="lineno"> 3897</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l03898"></a><span class="lineno"> 3898</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l03899"></a><span class="lineno"> 3899</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l03900"></a><span class="lineno"> 3900</span>&#160;    {</div>
<div class="line"><a name="l03901"></a><span class="lineno"> 3901</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l03902"></a><span class="lineno"> 3902</span>&#160;                                   IsQuantizeSupported,</div>
<div class="line"><a name="l03903"></a><span class="lineno"> 3903</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l03904"></a><span class="lineno"> 3904</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l03905"></a><span class="lineno"> 3905</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l03906"></a><span class="lineno"> 3906</span>&#160;                                   input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l03907"></a><span class="lineno"> 3907</span>&#160;                                   outputInfo);</div>
<div class="line"><a name="l03908"></a><span class="lineno"> 3908</span>&#160;    };</div>
<div class="line"><a name="l03909"></a><span class="lineno"> 3909</span>&#160; </div>
<div class="line"><a name="l03910"></a><span class="lineno"> 3910</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l03911"></a><span class="lineno"> 3911</span>&#160;    {</div>
<div class="line"><a name="l03912"></a><span class="lineno"> 3912</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l03913"></a><span class="lineno"> 3913</span>&#160;    }</div>
<div class="line"><a name="l03914"></a><span class="lineno"> 3914</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l03915"></a><span class="lineno"> 3915</span>&#160;    {</div>
<div class="line"><a name="l03916"></a><span class="lineno"> 3916</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l03917"></a><span class="lineno"> 3917</span>&#160;    }</div>
<div class="line"><a name="l03918"></a><span class="lineno"> 3918</span>&#160; </div>
<div class="line"><a name="l03919"></a><span class="lineno"> 3919</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l03920"></a><span class="lineno"> 3920</span>&#160;    {</div>
<div class="line"><a name="l03921"></a><span class="lineno"> 3921</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03922"></a><span class="lineno"> 3922</span>&#160;    }</div>
<div class="line"><a name="l03923"></a><span class="lineno"> 3923</span>&#160; </div>
<div class="line"><a name="l03924"></a><span class="lineno"> 3924</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddQuantizeLayer();</div>
<div class="line"><a name="l03925"></a><span class="lineno"> 3925</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l03926"></a><span class="lineno"> 3926</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l03927"></a><span class="lineno"> 3927</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l03928"></a><span class="lineno"> 3928</span>&#160; </div>
<div class="line"><a name="l03929"></a><span class="lineno"> 3929</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l03930"></a><span class="lineno"> 3930</span>&#160;}</div>
<div class="line"><a name="l03931"></a><span class="lineno"> 3931</span>&#160; </div>
<div class="line"><a name="l03932"></a><span class="lineno"> 3932</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertQuantizedLstm(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l03933"></a><span class="lineno"> 3933</span>&#160;{</div>
<div class="line"><a name="l03934"></a><span class="lineno"> 3934</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertQuantizedLstm()&quot;</span>;</div>
<div class="line"><a name="l03935"></a><span class="lineno"> 3935</span>&#160; </div>
<div class="line"><a name="l03936"></a><span class="lineno"> 3936</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ConvertQuantizedLstm()&quot;</span>;</div>
<div class="line"><a name="l03937"></a><span class="lineno"> 3937</span>&#160; </div>
<div class="line"><a name="l03938"></a><span class="lineno"> 3938</span>&#160;    <span class="comment">//Inputs:</span></div>
<div class="line"><a name="l03939"></a><span class="lineno"> 3939</span>&#160;    <span class="comment">// 0: The input: A 2-D tensor of type ANEURALNETWORKS_TENSOR_QUANT8_ASYMM and shape [numBatches, inputSize]</span></div>
<div class="line"><a name="l03940"></a><span class="lineno"> 3940</span>&#160;    <span class="comment">//    specifying the input to the LSTM cell. Tensor is quantized with a fixed quantization range of -1, 127/128.</span></div>
<div class="line"><a name="l03941"></a><span class="lineno"> 3941</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l03942"></a><span class="lineno"> 3942</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l03943"></a><span class="lineno"> 3943</span>&#160;    {</div>
<div class="line"><a name="l03944"></a><span class="lineno"> 3944</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 0: input&quot;</span>, __func__);</div>
<div class="line"><a name="l03945"></a><span class="lineno"> 3945</span>&#160;    }</div>
<div class="line"><a name="l03946"></a><span class="lineno"> 3946</span>&#160; </div>
<div class="line"><a name="l03947"></a><span class="lineno"> 3947</span>&#160;    <span class="comment">// 18: The output state: A 2-D tensor of ANEURALNETWORKS_TENSOR_QUANT8_ASYMM, of shape [batch_size, output_size].</span></div>
<div class="line"><a name="l03948"></a><span class="lineno"> 3948</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> outputStatePrevTimeStep = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 18, model, data);</div>
<div class="line"><a name="l03949"></a><span class="lineno"> 3949</span>&#160;    <span class="keywordflow">if</span> (!outputStatePrevTimeStep.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l03950"></a><span class="lineno"> 3950</span>&#160;    {</div>
<div class="line"><a name="l03951"></a><span class="lineno"> 3951</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 18: outputStatePrevTimeStep&quot;</span>, __func__);</div>
<div class="line"><a name="l03952"></a><span class="lineno"> 3952</span>&#160;    }</div>
<div class="line"><a name="l03953"></a><span class="lineno"> 3953</span>&#160; </div>
<div class="line"><a name="l03954"></a><span class="lineno"> 3954</span>&#160;    <span class="comment">// 19: The cell state: A 2-D tensor of ANEURALNETWORKS_TENSOR_QUANT16_SYMM, of shape [batch_size, num_units].</span></div>
<div class="line"><a name="l03955"></a><span class="lineno"> 3955</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> cellStatePrevTimeStep = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 19, model, data);</div>
<div class="line"><a name="l03956"></a><span class="lineno"> 3956</span>&#160;    <span class="keywordflow">if</span> (!cellStatePrevTimeStep.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l03957"></a><span class="lineno"> 3957</span>&#160;    {</div>
<div class="line"><a name="l03958"></a><span class="lineno"> 3958</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 19: cellStatePrevTimeStep&quot;</span>, __func__);</div>
<div class="line"><a name="l03959"></a><span class="lineno"> 3959</span>&#160;    }</div>
<div class="line"><a name="l03960"></a><span class="lineno"> 3960</span>&#160; </div>
<div class="line"><a name="l03961"></a><span class="lineno"> 3961</span>&#160;    <span class="comment">// Get the mandatory input tensors:</span></div>
<div class="line"><a name="l03962"></a><span class="lineno"> 3962</span>&#160; </div>
<div class="line"><a name="l03963"></a><span class="lineno"> 3963</span>&#160;    <span class="comment">// 02: The input-to-forget weights: A 2-D tensor of ANEURALNETWORKS_TENSOR_QUANT8_SYMM, of shape</span></div>
<div class="line"><a name="l03964"></a><span class="lineno"> 3964</span>&#160;    <span class="comment">//     [num_units, input_size].</span></div>
<div class="line"><a name="l03965"></a><span class="lineno"> 3965</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputToForgetWeightsPin =</div>
<div class="line"><a name="l03966"></a><span class="lineno"> 3966</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 2, model, data);</div>
<div class="line"><a name="l03967"></a><span class="lineno"> 3967</span>&#160; </div>
<div class="line"><a name="l03968"></a><span class="lineno"> 3968</span>&#160;    <span class="comment">// 03: The input-to-cell weights: A 2-D tensor of ANEURALNETWORKS_TENSOR_QUANT8_SYMM, of shape</span></div>
<div class="line"><a name="l03969"></a><span class="lineno"> 3969</span>&#160;    <span class="comment">// [num_units, input_size].</span></div>
<div class="line"><a name="l03970"></a><span class="lineno"> 3970</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputToCellWeightsPin =</div>
<div class="line"><a name="l03971"></a><span class="lineno"> 3971</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 3, model, data);</div>
<div class="line"><a name="l03972"></a><span class="lineno"> 3972</span>&#160; </div>
<div class="line"><a name="l03973"></a><span class="lineno"> 3973</span>&#160;    <span class="comment">// 04: The input-to-output weights: A 2-D tensor of ANEURALNETWORKS_TENSOR_QUANT8_SYMM, of shape</span></div>
<div class="line"><a name="l03974"></a><span class="lineno"> 3974</span>&#160;    <span class="comment">//     [num_units, input_size].</span></div>
<div class="line"><a name="l03975"></a><span class="lineno"> 3975</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputToOutputWeightsPin =</div>
<div class="line"><a name="l03976"></a><span class="lineno"> 3976</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 4, model, data);</div>
<div class="line"><a name="l03977"></a><span class="lineno"> 3977</span>&#160; </div>
<div class="line"><a name="l03978"></a><span class="lineno"> 3978</span>&#160;    <span class="comment">// 06: The recurrent-to-forget weights: A 2-D tensor of ANEURALNETWORKS_TENSOR_QUANT8_SYMM, of shape</span></div>
<div class="line"><a name="l03979"></a><span class="lineno"> 3979</span>&#160;    <span class="comment">//     [num_units, output_size].</span></div>
<div class="line"><a name="l03980"></a><span class="lineno"> 3980</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> recurrentToForgetWeightsPin =</div>
<div class="line"><a name="l03981"></a><span class="lineno"> 3981</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 6, model, data);</div>
<div class="line"><a name="l03982"></a><span class="lineno"> 3982</span>&#160; </div>
<div class="line"><a name="l03983"></a><span class="lineno"> 3983</span>&#160;    <span class="comment">// 07: The recurrent-to-cell weights: A 2-D tensor of ANEURALNETWORKS_TENSOR_QUANT8_SYMM, of shape</span></div>
<div class="line"><a name="l03984"></a><span class="lineno"> 3984</span>&#160;    <span class="comment">//     [num_units, output_size].</span></div>
<div class="line"><a name="l03985"></a><span class="lineno"> 3985</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> recurrentToCellWeightsPin =</div>
<div class="line"><a name="l03986"></a><span class="lineno"> 3986</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 7, model, data);</div>
<div class="line"><a name="l03987"></a><span class="lineno"> 3987</span>&#160; </div>
<div class="line"><a name="l03988"></a><span class="lineno"> 3988</span>&#160;    <span class="comment">// 08: The recurrent-to-output weights: A 2-D tensor of ANEURALNETWORKS_TENSOR_QUANT8_SYMM, of shape</span></div>
<div class="line"><a name="l03989"></a><span class="lineno"> 3989</span>&#160;    <span class="comment">//     [num_units, output_size].</span></div>
<div class="line"><a name="l03990"></a><span class="lineno"> 3990</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> recurrentToOutputWeightsPin =</div>
<div class="line"><a name="l03991"></a><span class="lineno"> 3991</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 8, model, data);</div>
<div class="line"><a name="l03992"></a><span class="lineno"> 3992</span>&#160; </div>
<div class="line"><a name="l03993"></a><span class="lineno"> 3993</span>&#160;    <span class="comment">// 13: The forget gate bias: A 1-D tensor of ANEURALNETWORKS_TENSOR_INT32, of shape [num_units].</span></div>
<div class="line"><a name="l03994"></a><span class="lineno"> 3994</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> forgetGateBiasPin =</div>
<div class="line"><a name="l03995"></a><span class="lineno"> 3995</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 13, model, data);</div>
<div class="line"><a name="l03996"></a><span class="lineno"> 3996</span>&#160; </div>
<div class="line"><a name="l03997"></a><span class="lineno"> 3997</span>&#160;    <span class="comment">// 14: The cell bias: A 1-D tensor of ANEURALNETWORKS_TENSOR_INT32, of shape [num_units].</span></div>
<div class="line"><a name="l03998"></a><span class="lineno"> 3998</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> cellBiasPin =</div>
<div class="line"><a name="l03999"></a><span class="lineno"> 3999</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 14, model, data);</div>
<div class="line"><a name="l04000"></a><span class="lineno"> 4000</span>&#160; </div>
<div class="line"><a name="l04001"></a><span class="lineno"> 4001</span>&#160;    <span class="comment">// 15: The output gate bias: A 1-D tensor of ANEURALNETWORKS_TENSOR_INT32, of shape [num_units].</span></div>
<div class="line"><a name="l04002"></a><span class="lineno"> 4002</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> outputGateBiasPin =</div>
<div class="line"><a name="l04003"></a><span class="lineno"> 4003</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 15, model, data);</div>
<div class="line"><a name="l04004"></a><span class="lineno"> 4004</span>&#160; </div>
<div class="line"><a name="l04005"></a><span class="lineno"> 4005</span>&#160;    <span class="keywordflow">if</span> (!inputToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04006"></a><span class="lineno"> 4006</span>&#160;        !inputToCellWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04007"></a><span class="lineno"> 4007</span>&#160;        !inputToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04008"></a><span class="lineno"> 4008</span>&#160;        !recurrentToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04009"></a><span class="lineno"> 4009</span>&#160;        !recurrentToCellWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04010"></a><span class="lineno"> 4010</span>&#160;        !recurrentToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04011"></a><span class="lineno"> 4011</span>&#160;        !forgetGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04012"></a><span class="lineno"> 4012</span>&#160;        !cellBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04013"></a><span class="lineno"> 4013</span>&#160;        !outputGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l04014"></a><span class="lineno"> 4014</span>&#160;    {</div>
<div class="line"><a name="l04015"></a><span class="lineno"> 4015</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid tensor inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l04016"></a><span class="lineno"> 4016</span>&#160;    }</div>
<div class="line"><a name="l04017"></a><span class="lineno"> 4017</span>&#160; </div>
<div class="line"><a name="l04018"></a><span class="lineno"> 4018</span>&#160;    <span class="comment">// Get the optional input tensors:</span></div>
<div class="line"><a name="l04019"></a><span class="lineno"> 4019</span>&#160; </div>
<div class="line"><a name="l04020"></a><span class="lineno"> 4020</span>&#160;    <span class="comment">// 01: The input-to-input weights: Optional. A 2-D tensor of ANEURALNETWORKS_TENSOR_QUANT8_SYMM, of shape</span></div>
<div class="line"><a name="l04021"></a><span class="lineno"> 4021</span>&#160;    <span class="comment">//     [num_units, input_size], where ânum_unitsâ corresponds to the number of cell units.</span></div>
<div class="line"><a name="l04022"></a><span class="lineno"> 4022</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputToInputWeightsPin =</div>
<div class="line"><a name="l04023"></a><span class="lineno"> 4023</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l04024"></a><span class="lineno"> 4024</span>&#160;                                                  1,</div>
<div class="line"><a name="l04025"></a><span class="lineno"> 4025</span>&#160;                                                  model,</div>
<div class="line"><a name="l04026"></a><span class="lineno"> 4026</span>&#160;                                                  data,</div>
<div class="line"><a name="l04027"></a><span class="lineno"> 4027</span>&#160;                                                  <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l04028"></a><span class="lineno"> 4028</span>&#160;                                                  <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l04029"></a><span class="lineno"> 4029</span>&#160;                                                  <span class="keyword">true</span>);</div>
<div class="line"><a name="l04030"></a><span class="lineno"> 4030</span>&#160; </div>
<div class="line"><a name="l04031"></a><span class="lineno"> 4031</span>&#160;    <span class="comment">// 05: The recurrent-to-input weights: Optional. A 2-D tensor of ANEURALNETWORKS_TENSOR_QUANT8_SYMM, of shape</span></div>
<div class="line"><a name="l04032"></a><span class="lineno"> 4032</span>&#160;    <span class="comment">//     [num_units, output_size], where âoutput_sizeâ corresponds to either the number of cell units (i.e.,</span></div>
<div class="line"><a name="l04033"></a><span class="lineno"> 4033</span>&#160;    <span class="comment">//     ânum_unitsâ), or the second dimension of the âprojection_weightsâ, if defined.</span></div>
<div class="line"><a name="l04034"></a><span class="lineno"> 4034</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> recurrentToInputWeightsPin =</div>
<div class="line"><a name="l04035"></a><span class="lineno"> 4035</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l04036"></a><span class="lineno"> 4036</span>&#160;                                                  5,</div>
<div class="line"><a name="l04037"></a><span class="lineno"> 4037</span>&#160;                                                  model,</div>
<div class="line"><a name="l04038"></a><span class="lineno"> 4038</span>&#160;                                                  data,</div>
<div class="line"><a name="l04039"></a><span class="lineno"> 4039</span>&#160;                                                  <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l04040"></a><span class="lineno"> 4040</span>&#160;                                                  <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l04041"></a><span class="lineno"> 4041</span>&#160;                                                  <span class="keyword">true</span>);</div>
<div class="line"><a name="l04042"></a><span class="lineno"> 4042</span>&#160; </div>
<div class="line"><a name="l04043"></a><span class="lineno"> 4043</span>&#160;    <span class="comment">// 09: The cell-to-input weights: Optional. A 1-D tensor of ANEURALNETWORKS_TENSOR_QUANT16_SYMM, of shape</span></div>
<div class="line"><a name="l04044"></a><span class="lineno"> 4044</span>&#160;    <span class="comment">// [num_units].</span></div>
<div class="line"><a name="l04045"></a><span class="lineno"> 4045</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> cellToInputWeightsPin =</div>
<div class="line"><a name="l04046"></a><span class="lineno"> 4046</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l04047"></a><span class="lineno"> 4047</span>&#160;                                                  9,</div>
<div class="line"><a name="l04048"></a><span class="lineno"> 4048</span>&#160;                                                  model,</div>
<div class="line"><a name="l04049"></a><span class="lineno"> 4049</span>&#160;                                                  data,</div>
<div class="line"><a name="l04050"></a><span class="lineno"> 4050</span>&#160;                                                  <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l04051"></a><span class="lineno"> 4051</span>&#160;                                                  <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l04052"></a><span class="lineno"> 4052</span>&#160;                                                  <span class="keyword">true</span>);</div>
<div class="line"><a name="l04053"></a><span class="lineno"> 4053</span>&#160; </div>
<div class="line"><a name="l04054"></a><span class="lineno"> 4054</span>&#160;    <span class="comment">// 10: The cell-to-forget weights: Optional. A 1-D tensor of ANEURALNETWORKS_TENSOR_QUANT16_SYMM, of shape</span></div>
<div class="line"><a name="l04055"></a><span class="lineno"> 4055</span>&#160;    <span class="comment">// [num_units].</span></div>
<div class="line"><a name="l04056"></a><span class="lineno"> 4056</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> cellToForgetWeightsPin =</div>
<div class="line"><a name="l04057"></a><span class="lineno"> 4057</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l04058"></a><span class="lineno"> 4058</span>&#160;                                                  10,</div>
<div class="line"><a name="l04059"></a><span class="lineno"> 4059</span>&#160;                                                  model,</div>
<div class="line"><a name="l04060"></a><span class="lineno"> 4060</span>&#160;                                                  data,</div>
<div class="line"><a name="l04061"></a><span class="lineno"> 4061</span>&#160;                                                  <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l04062"></a><span class="lineno"> 4062</span>&#160;                                                  <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l04063"></a><span class="lineno"> 4063</span>&#160;                                                  <span class="keyword">true</span>);</div>
<div class="line"><a name="l04064"></a><span class="lineno"> 4064</span>&#160; </div>
<div class="line"><a name="l04065"></a><span class="lineno"> 4065</span>&#160;    <span class="comment">// 11: The cell-to-output weights: Optional. A 1-D tensor of ANEURALNETWORKS_TENSOR_QUANT16_SYMM, of shape</span></div>
<div class="line"><a name="l04066"></a><span class="lineno"> 4066</span>&#160;    <span class="comment">// [num_units].</span></div>
<div class="line"><a name="l04067"></a><span class="lineno"> 4067</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> cellToOutputWeightsPin =</div>
<div class="line"><a name="l04068"></a><span class="lineno"> 4068</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l04069"></a><span class="lineno"> 4069</span>&#160;                                                  11,</div>
<div class="line"><a name="l04070"></a><span class="lineno"> 4070</span>&#160;                                                  model,</div>
<div class="line"><a name="l04071"></a><span class="lineno"> 4071</span>&#160;                                                  data,</div>
<div class="line"><a name="l04072"></a><span class="lineno"> 4072</span>&#160;                                                  <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l04073"></a><span class="lineno"> 4073</span>&#160;                                                  <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l04074"></a><span class="lineno"> 4074</span>&#160;                                                  <span class="keyword">true</span>);</div>
<div class="line"><a name="l04075"></a><span class="lineno"> 4075</span>&#160; </div>
<div class="line"><a name="l04076"></a><span class="lineno"> 4076</span>&#160;    <span class="comment">// 12: The input gate bias: Optional. A 1-D tensor of ANEURALNETWORKS_TENSOR_INT32, of shape [num_units].</span></div>
<div class="line"><a name="l04077"></a><span class="lineno"> 4077</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputGateBiasPin =</div>
<div class="line"><a name="l04078"></a><span class="lineno"> 4078</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l04079"></a><span class="lineno"> 4079</span>&#160;                                                  12,</div>
<div class="line"><a name="l04080"></a><span class="lineno"> 4080</span>&#160;                                                  model,</div>
<div class="line"><a name="l04081"></a><span class="lineno"> 4081</span>&#160;                                                  data,</div>
<div class="line"><a name="l04082"></a><span class="lineno"> 4082</span>&#160;                                                  <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l04083"></a><span class="lineno"> 4083</span>&#160;                                                  <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l04084"></a><span class="lineno"> 4084</span>&#160;                                                  <span class="keyword">true</span>);</div>
<div class="line"><a name="l04085"></a><span class="lineno"> 4085</span>&#160; </div>
<div class="line"><a name="l04086"></a><span class="lineno"> 4086</span>&#160;    <span class="comment">// 16: The projection weights: Optional. A 2-D tensor of ANEURALNETWORKS_TENSOR_QUANT8_SYMM, of shape</span></div>
<div class="line"><a name="l04087"></a><span class="lineno"> 4087</span>&#160;    <span class="comment">//     [output_size, num_units].</span></div>
<div class="line"><a name="l04088"></a><span class="lineno"> 4088</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> projectionWeightsPin =</div>
<div class="line"><a name="l04089"></a><span class="lineno"> 4089</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l04090"></a><span class="lineno"> 4090</span>&#160;                                                  16,</div>
<div class="line"><a name="l04091"></a><span class="lineno"> 4091</span>&#160;                                                  model,</div>
<div class="line"><a name="l04092"></a><span class="lineno"> 4092</span>&#160;                                                  data,</div>
<div class="line"><a name="l04093"></a><span class="lineno"> 4093</span>&#160;                                                  <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l04094"></a><span class="lineno"> 4094</span>&#160;                                                  <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l04095"></a><span class="lineno"> 4095</span>&#160;                                                  <span class="keyword">true</span>);</div>
<div class="line"><a name="l04096"></a><span class="lineno"> 4096</span>&#160; </div>
<div class="line"><a name="l04097"></a><span class="lineno"> 4097</span>&#160;    <span class="comment">// 17: The projection bias: Optional. A 1-D tensor of ANEURALNETWORKS_TENSOR_INT32, of shape [output_size].</span></div>
<div class="line"><a name="l04098"></a><span class="lineno"> 4098</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> projectionBiasPin =</div>
<div class="line"><a name="l04099"></a><span class="lineno"> 4099</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l04100"></a><span class="lineno"> 4100</span>&#160;                                                  17,</div>
<div class="line"><a name="l04101"></a><span class="lineno"> 4101</span>&#160;                                                  model,</div>
<div class="line"><a name="l04102"></a><span class="lineno"> 4102</span>&#160;                                                  data,</div>
<div class="line"><a name="l04103"></a><span class="lineno"> 4103</span>&#160;                                                  <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l04104"></a><span class="lineno"> 4104</span>&#160;                                                  <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l04105"></a><span class="lineno"> 4105</span>&#160;                                                  <span class="keyword">true</span>);</div>
<div class="line"><a name="l04106"></a><span class="lineno"> 4106</span>&#160; </div>
<div class="line"><a name="l04107"></a><span class="lineno"> 4107</span>&#160;    <span class="keywordflow">if</span> ((!inputToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !inputToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>())</div>
<div class="line"><a name="l04108"></a><span class="lineno"> 4108</span>&#160;        || (!recurrentToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !recurrentToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>())</div>
<div class="line"><a name="l04109"></a><span class="lineno"> 4109</span>&#160;        || (!cellToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !cellToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>())</div>
<div class="line"><a name="l04110"></a><span class="lineno"> 4110</span>&#160;        || (!cellToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !cellToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>())</div>
<div class="line"><a name="l04111"></a><span class="lineno"> 4111</span>&#160;        || (!cellToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !cellToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>())</div>
<div class="line"><a name="l04112"></a><span class="lineno"> 4112</span>&#160;        || (!inputGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !inputGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>())</div>
<div class="line"><a name="l04113"></a><span class="lineno"> 4113</span>&#160;        || (!projectionWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !projectionWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>())</div>
<div class="line"><a name="l04114"></a><span class="lineno"> 4114</span>&#160;        || (!projectionBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !projectionBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>()))</div>
<div class="line"><a name="l04115"></a><span class="lineno"> 4115</span>&#160;    {</div>
<div class="line"><a name="l04116"></a><span class="lineno"> 4116</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid tensor inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l04117"></a><span class="lineno"> 4117</span>&#160;    }</div>
<div class="line"><a name="l04118"></a><span class="lineno"> 4118</span>&#160; </div>
<div class="line"><a name="l04119"></a><span class="lineno"> 4119</span>&#160; </div>
<div class="line"><a name="l04120"></a><span class="lineno"> 4120</span>&#160;    <span class="comment">// Get the optional normalization tensors</span></div>
<div class="line"><a name="l04121"></a><span class="lineno"> 4121</span>&#160; </div>
<div class="line"><a name="l04122"></a><span class="lineno"> 4122</span>&#160;    <span class="comment">// 20: The input layer normalization weights. A 1-D tensor of shape [num_units] ANEURALNETWORKS_TENSOR_QUANT16_SYMM.</span></div>
<div class="line"><a name="l04123"></a><span class="lineno"> 4123</span>&#160;    <span class="comment">//     Used to rescale normalized inputs to activation at input gate.</span></div>
<div class="line"><a name="l04124"></a><span class="lineno"> 4124</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputLayerNormWeightsPin =</div>
<div class="line"><a name="l04125"></a><span class="lineno"> 4125</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l04126"></a><span class="lineno"> 4126</span>&#160;                                                  20,</div>
<div class="line"><a name="l04127"></a><span class="lineno"> 4127</span>&#160;                                                  model,</div>
<div class="line"><a name="l04128"></a><span class="lineno"> 4128</span>&#160;                                                  data,</div>
<div class="line"><a name="l04129"></a><span class="lineno"> 4129</span>&#160;                                                  <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l04130"></a><span class="lineno"> 4130</span>&#160;                                                  <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l04131"></a><span class="lineno"> 4131</span>&#160;                                                  <span class="keyword">true</span>);</div>
<div class="line"><a name="l04132"></a><span class="lineno"> 4132</span>&#160; </div>
<div class="line"><a name="l04133"></a><span class="lineno"> 4133</span>&#160;    <span class="comment">// 21: The forget layer normalization weights. A 1-D tensor of shape [num_units] ANEURALNETWORKS_TENSOR_QUANT16_SYMM</span></div>
<div class="line"><a name="l04134"></a><span class="lineno"> 4134</span>&#160;    <span class="comment">//     Used to rescale normalized inputs to activation at forget gate.</span></div>
<div class="line"><a name="l04135"></a><span class="lineno"> 4135</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> forgetLayerNormWeightsPin =</div>
<div class="line"><a name="l04136"></a><span class="lineno"> 4136</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l04137"></a><span class="lineno"> 4137</span>&#160;                                                  21,</div>
<div class="line"><a name="l04138"></a><span class="lineno"> 4138</span>&#160;                                                  model,</div>
<div class="line"><a name="l04139"></a><span class="lineno"> 4139</span>&#160;                                                  data,</div>
<div class="line"><a name="l04140"></a><span class="lineno"> 4140</span>&#160;                                                  <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l04141"></a><span class="lineno"> 4141</span>&#160;                                                  <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l04142"></a><span class="lineno"> 4142</span>&#160;                                                  <span class="keyword">true</span>);</div>
<div class="line"><a name="l04143"></a><span class="lineno"> 4143</span>&#160; </div>
<div class="line"><a name="l04144"></a><span class="lineno"> 4144</span>&#160;    <span class="comment">// 22: The cell layer normalization weights. A 1-D tensor of shape [num_units] ANEURALNETWORKS_TENSOR_QUANT16_SYMM.</span></div>
<div class="line"><a name="l04145"></a><span class="lineno"> 4145</span>&#160;    <span class="comment">//     Used to rescale normalized inputs to activation at cell gate.</span></div>
<div class="line"><a name="l04146"></a><span class="lineno"> 4146</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> cellLayerNormWeightsPin =</div>
<div class="line"><a name="l04147"></a><span class="lineno"> 4147</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l04148"></a><span class="lineno"> 4148</span>&#160;                                                  22,</div>
<div class="line"><a name="l04149"></a><span class="lineno"> 4149</span>&#160;                                                  model,</div>
<div class="line"><a name="l04150"></a><span class="lineno"> 4150</span>&#160;                                                  data,</div>
<div class="line"><a name="l04151"></a><span class="lineno"> 4151</span>&#160;                                                  <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l04152"></a><span class="lineno"> 4152</span>&#160;                                                  <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l04153"></a><span class="lineno"> 4153</span>&#160;                                                  <span class="keyword">true</span>);</div>
<div class="line"><a name="l04154"></a><span class="lineno"> 4154</span>&#160; </div>
<div class="line"><a name="l04155"></a><span class="lineno"> 4155</span>&#160;    <span class="comment">// 23: The output layer normalization weights. A 1-D tensor of shape [num_units].</span></div>
<div class="line"><a name="l04156"></a><span class="lineno"> 4156</span>&#160;    <span class="comment">//     Used to rescale normalized inputs to activation at output gate.</span></div>
<div class="line"><a name="l04157"></a><span class="lineno"> 4157</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> outputLayerNormWeightsPin =</div>
<div class="line"><a name="l04158"></a><span class="lineno"> 4158</span>&#160;            <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation,</div>
<div class="line"><a name="l04159"></a><span class="lineno"> 4159</span>&#160;                                                  23,</div>
<div class="line"><a name="l04160"></a><span class="lineno"> 4160</span>&#160;                                                  model,</div>
<div class="line"><a name="l04161"></a><span class="lineno"> 4161</span>&#160;                                                  data,</div>
<div class="line"><a name="l04162"></a><span class="lineno"> 4162</span>&#160;                                                  <a class="code" href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">g_DontPermute</a>,</div>
<div class="line"><a name="l04163"></a><span class="lineno"> 4163</span>&#160;                                                  <span class="keyword">nullptr</span>,</div>
<div class="line"><a name="l04164"></a><span class="lineno"> 4164</span>&#160;                                                  <span class="keyword">true</span>);</div>
<div class="line"><a name="l04165"></a><span class="lineno"> 4165</span>&#160; </div>
<div class="line"><a name="l04166"></a><span class="lineno"> 4166</span>&#160;    <span class="keywordflow">if</span> ((!inputLayerNormWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !inputLayerNormWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>())</div>
<div class="line"><a name="l04167"></a><span class="lineno"> 4167</span>&#160;        || (!forgetLayerNormWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !forgetLayerNormWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>())</div>
<div class="line"><a name="l04168"></a><span class="lineno"> 4168</span>&#160;        || (!cellLayerNormWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !cellLayerNormWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>())</div>
<div class="line"><a name="l04169"></a><span class="lineno"> 4169</span>&#160;        || (!outputLayerNormWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() &amp;&amp; !outputLayerNormWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">IsOptional</a>()))</div>
<div class="line"><a name="l04170"></a><span class="lineno"> 4170</span>&#160;    {</div>
<div class="line"><a name="l04171"></a><span class="lineno"> 4171</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid tensor inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l04172"></a><span class="lineno"> 4172</span>&#160;    }</div>
<div class="line"><a name="l04173"></a><span class="lineno"> 4173</span>&#160; </div>
<div class="line"><a name="l04174"></a><span class="lineno"> 4174</span>&#160;    <span class="comment">// Get the optional input scalars:</span></div>
<div class="line"><a name="l04175"></a><span class="lineno"> 4175</span>&#160;    <span class="comment">// 24: The cell clip:  If provided the cell state is clipped by this value prior to the cell output activation.</span></div>
<div class="line"><a name="l04176"></a><span class="lineno"> 4176</span>&#160;    <span class="comment">// 25: The projection clip: If provided and projection is enabled, this is used for clipping the projected values.</span></div>
<div class="line"><a name="l04177"></a><span class="lineno"> 4177</span>&#160; </div>
<div class="line"><a name="l04178"></a><span class="lineno"> 4178</span>&#160;    <span class="comment">// Get the mandatory input scalars:</span></div>
<div class="line"><a name="l04179"></a><span class="lineno"> 4179</span>&#160;    <span class="comment">// 26: The scale of the intermediate result of matmul, i.e. input to layer normalization, at input gate.</span></div>
<div class="line"><a name="l04180"></a><span class="lineno"> 4180</span>&#160;    <span class="comment">// 27: The scale of the intermediate result of matmul, i.e. input to layer normalization, at forget gate.</span></div>
<div class="line"><a name="l04181"></a><span class="lineno"> 4181</span>&#160;    <span class="comment">// 28: The scale of the intermediate result of matmul, i.e. input to layer normalization, at cell gate.</span></div>
<div class="line"><a name="l04182"></a><span class="lineno"> 4182</span>&#160;    <span class="comment">// 29: The scale of the intermediate result of matmul, i.e. input to layer normalization, at output gate.</span></div>
<div class="line"><a name="l04183"></a><span class="lineno"> 4183</span>&#160;    <span class="comment">// 30: The zero point of the hidden state, i.e. input to projection.</span></div>
<div class="line"><a name="l04184"></a><span class="lineno"> 4184</span>&#160;    <span class="comment">// 31: The scale of the hidden state, i.e. input to projection.</span></div>
<div class="line"><a name="l04185"></a><span class="lineno"> 4185</span>&#160;    <span class="keywordtype">float</span> cellClip, projClip, matMulInputGate, matMulForgetGate, matMulCellGate, matMulOutputGate, projInputScale;</div>
<div class="line"><a name="l04186"></a><span class="lineno"> 4186</span>&#160;    <span class="keywordtype">int</span> projInputZeroPoint;</div>
<div class="line"><a name="l04187"></a><span class="lineno"> 4187</span>&#160; </div>
<div class="line"><a name="l04188"></a><span class="lineno"> 4188</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 24, OperandType::FLOAT32, cellClip, model, data, <span class="keyword">true</span>) ||</div>
<div class="line"><a name="l04189"></a><span class="lineno"> 4189</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 25, OperandType::FLOAT32, projClip, model, data, <span class="keyword">true</span>) ||</div>
<div class="line"><a name="l04190"></a><span class="lineno"> 4190</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 26, OperandType::FLOAT32, matMulInputGate, model, data) ||</div>
<div class="line"><a name="l04191"></a><span class="lineno"> 4191</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 27, OperandType::FLOAT32, matMulForgetGate, model, data) ||</div>
<div class="line"><a name="l04192"></a><span class="lineno"> 4192</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 28, OperandType::FLOAT32, matMulCellGate, model, data) ||</div>
<div class="line"><a name="l04193"></a><span class="lineno"> 4193</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 29, OperandType::FLOAT32, matMulOutputGate, model, data) ||</div>
<div class="line"><a name="l04194"></a><span class="lineno"> 4194</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 30, OperandType::INT32, projInputZeroPoint, model, data) ||</div>
<div class="line"><a name="l04195"></a><span class="lineno"> 4195</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 31, OperandType::FLOAT32, projInputScale, model, data))</div>
<div class="line"><a name="l04196"></a><span class="lineno"> 4196</span>&#160;    {</div>
<div class="line"><a name="l04197"></a><span class="lineno"> 4197</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid scalar inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l04198"></a><span class="lineno"> 4198</span>&#160;    }</div>
<div class="line"><a name="l04199"></a><span class="lineno"> 4199</span>&#160; </div>
<div class="line"><a name="l04200"></a><span class="lineno"> 4200</span>&#160;    <span class="comment">// Outputs:</span></div>
<div class="line"><a name="l04201"></a><span class="lineno"> 4201</span>&#160;    <span class="comment">// 0: The output state (out): A 2-D tensor of ANEURALNETWORKS_TENSOR_QUANT8_ASYMM_SIGNED, of shape [batch_size,</span></div>
<div class="line"><a name="l04202"></a><span class="lineno"> 4202</span>&#160;    <span class="comment">// output_size].</span></div>
<div class="line"><a name="l04203"></a><span class="lineno"> 4203</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* outputStateOut = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l04204"></a><span class="lineno"> 4204</span>&#160;    <span class="keywordflow">if</span> (!outputStateOut)</div>
<div class="line"><a name="l04205"></a><span class="lineno"> 4205</span>&#160;    {</div>
<div class="line"><a name="l04206"></a><span class="lineno"> 4206</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0: outputStateOut&quot;</span>, __func__);</div>
<div class="line"><a name="l04207"></a><span class="lineno"> 4207</span>&#160;    }</div>
<div class="line"><a name="l04208"></a><span class="lineno"> 4208</span>&#160; </div>
<div class="line"><a name="l04209"></a><span class="lineno"> 4209</span>&#160;    <span class="comment">// 1: The cell state (out): A 2-D tensor of ANEURALNETWORKS_TENSOR_QUANT16_SYMM, of shape [batch_size, num_units].</span></div>
<div class="line"><a name="l04210"></a><span class="lineno"> 4210</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* cellStateOut = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 1, model);</div>
<div class="line"><a name="l04211"></a><span class="lineno"> 4211</span>&#160;    <span class="keywordflow">if</span> (!cellStateOut)</div>
<div class="line"><a name="l04212"></a><span class="lineno"> 4212</span>&#160;    {</div>
<div class="line"><a name="l04213"></a><span class="lineno"> 4213</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 1: cellStateOut&quot;</span>, __func__);</div>
<div class="line"><a name="l04214"></a><span class="lineno"> 4214</span>&#160;    }</div>
<div class="line"><a name="l04215"></a><span class="lineno"> 4215</span>&#160; </div>
<div class="line"><a name="l04216"></a><span class="lineno"> 4216</span>&#160;    <span class="comment">// 2: The output: A 2-D tensor of ANEURALNETWORKS_TENSOR_QUANT8_ASYMM_SIGNED, of shape [batch_size, output_size].</span></div>
<div class="line"><a name="l04217"></a><span class="lineno"> 4217</span>&#160;    <span class="comment">// This is effectively the same as the current âoutput state (out)â value.</span></div>
<div class="line"><a name="l04218"></a><span class="lineno"> 4218</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 2, model);</div>
<div class="line"><a name="l04219"></a><span class="lineno"> 4219</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l04220"></a><span class="lineno"> 4220</span>&#160;    {</div>
<div class="line"><a name="l04221"></a><span class="lineno"> 4221</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 2: output&quot;</span>, __func__);</div>
<div class="line"><a name="l04222"></a><span class="lineno"> 4222</span>&#160;    }</div>
<div class="line"><a name="l04223"></a><span class="lineno"> 4223</span>&#160; </div>
<div class="line"><a name="l04224"></a><span class="lineno"> 4224</span>&#160;    <span class="comment">// set the params structure for the AddLstmLayer call</span></div>
<div class="line"><a name="l04225"></a><span class="lineno"> 4225</span>&#160;    <a class="code" href="structarmnn_1_1_lstm_input_params.xhtml">LstmInputParams</a> params;</div>
<div class="line"><a name="l04226"></a><span class="lineno"> 4226</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">m_InputToInputWeights</a> = inputToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04227"></a><span class="lineno"> 4227</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a31da1ead6794dd64571afdd0b6efc771">m_InputToForgetWeights</a> = inputToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04228"></a><span class="lineno"> 4228</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a49e11acda22742cbaf6f1b259ead0d84">m_InputToCellWeights</a> = inputToCellWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04229"></a><span class="lineno"> 4229</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a6e30c7b3451da3ea9cf4259fb602e6e6">m_InputToOutputWeights</a> = inputToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04230"></a><span class="lineno"> 4230</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">m_RecurrentToInputWeights</a> = recurrentToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04231"></a><span class="lineno"> 4231</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ae83131e16df1cace69395a5f99bc5ecb">m_RecurrentToForgetWeights</a> = recurrentToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04232"></a><span class="lineno"> 4232</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a1759754ccb88ecc9af44f3aae6e244ee">m_RecurrentToCellWeights</a> = recurrentToCellWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04233"></a><span class="lineno"> 4233</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a56b81ca8ba4b4937e0787e4951f043fc">m_RecurrentToOutputWeights</a> = recurrentToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04234"></a><span class="lineno"> 4234</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a484bafa2f8453a7c5a4a00b92a61b006">m_CellToInputWeights</a> = cellToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04235"></a><span class="lineno"> 4235</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a35b112e30c3eb153806a2a8c16d178e3">m_CellToForgetWeights</a> = cellToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04236"></a><span class="lineno"> 4236</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#afe204ca375b74e9a72640c9227918d0a">m_CellToOutputWeights</a> = cellToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04237"></a><span class="lineno"> 4237</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">m_InputGateBias</a> = inputGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04238"></a><span class="lineno"> 4238</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ace7a1f1f1041b412b7d8ef82b95ff352">m_ForgetGateBias</a> = forgetGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04239"></a><span class="lineno"> 4239</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a4a9d678146f572808a361dbdc5489f38">m_CellBias</a> = cellBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04240"></a><span class="lineno"> 4240</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a8c0f6d48705f40c5590dde09be262222">m_OutputGateBias</a> = outputGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04241"></a><span class="lineno"> 4241</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ab03e6e1514f74427916c892f473fe04c">m_ProjectionWeights</a> = projectionWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04242"></a><span class="lineno"> 4242</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a44b0e6b16708df7f0d2bbab141688aaa">m_ProjectionBias</a> = projectionBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04243"></a><span class="lineno"> 4243</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a0cd848f65ec31778d708852f0042fe37">m_InputLayerNormWeights</a> = inputLayerNormWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04244"></a><span class="lineno"> 4244</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#af0f796fba1a2be9c56b4c9ee534577ee">m_ForgetLayerNormWeights</a> = forgetLayerNormWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04245"></a><span class="lineno"> 4245</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ad0b8c32bb5381f4cc999093ba3b98b43">m_CellLayerNormWeights</a> = cellLayerNormWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04246"></a><span class="lineno"> 4246</span>&#160;    params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9b18daea2e9f42386055326fd016519a">m_OutputLayerNormWeights</a> = outputLayerNormWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04247"></a><span class="lineno"> 4247</span>&#160; </div>
<div class="line"><a name="l04248"></a><span class="lineno"> 4248</span>&#160;    <span class="comment">// set the layer descriptor</span></div>
<div class="line"><a name="l04249"></a><span class="lineno"> 4249</span>&#160;    <a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> desc;</div>
<div class="line"><a name="l04250"></a><span class="lineno"> 4250</span>&#160;    desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ac81fb0e66dc623dc37c77f219f53a6d3">m_CellClip</a> = cellClip;</div>
<div class="line"><a name="l04251"></a><span class="lineno"> 4251</span>&#160;    desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa6a518b65088f34803b3214334bdff61">m_ProjectionClip</a> = projClip;</div>
<div class="line"><a name="l04252"></a><span class="lineno"> 4252</span>&#160;    desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">m_InputToInputWeights</a> == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l04253"></a><span class="lineno"> 4253</span>&#160;                          params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">m_RecurrentToInputWeights</a> == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l04254"></a><span class="lineno"> 4254</span>&#160;                          params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">m_InputGateBias</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l04255"></a><span class="lineno"> 4255</span>&#160;    desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a35b112e30c3eb153806a2a8c16d178e3">m_CellToForgetWeights</a> != <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l04256"></a><span class="lineno"> 4256</span>&#160;                              params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#afe204ca375b74e9a72640c9227918d0a">m_CellToOutputWeights</a> != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l04257"></a><span class="lineno"> 4257</span>&#160;    desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ab03e6e1514f74427916c892f473fe04c">m_ProjectionWeights</a> != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l04258"></a><span class="lineno"> 4258</span>&#160;    desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a> = (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a0cd848f65ec31778d708852f0042fe37">m_InputLayerNormWeights</a> != <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l04259"></a><span class="lineno"> 4259</span>&#160;                               params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#af0f796fba1a2be9c56b4c9ee534577ee">m_ForgetLayerNormWeights</a> != <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l04260"></a><span class="lineno"> 4260</span>&#160;                               params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ad0b8c32bb5381f4cc999093ba3b98b43">m_CellLayerNormWeights</a> != <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l04261"></a><span class="lineno"> 4261</span>&#160;                               params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9b18daea2e9f42386055326fd016519a">m_OutputLayerNormWeights</a> != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l04262"></a><span class="lineno"> 4262</span>&#160;    desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a09e1f097944f61cc901240f9300364cf">m_InputIntermediateScale</a> = matMulInputGate;</div>
<div class="line"><a name="l04263"></a><span class="lineno"> 4263</span>&#160;    desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#afec7f36158448f723b426a9527acb189">m_ForgetIntermediateScale</a> = matMulForgetGate;</div>
<div class="line"><a name="l04264"></a><span class="lineno"> 4264</span>&#160;    desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a0477ee1b44ace6090119178eea78cb0b">m_CellIntermediateScale</a> = matMulCellGate;</div>
<div class="line"><a name="l04265"></a><span class="lineno"> 4265</span>&#160;    desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa43409f9b457352c95c89f20ce5d844d">m_OutputIntermediateScale</a> = matMulOutputGate;</div>
<div class="line"><a name="l04266"></a><span class="lineno"> 4266</span>&#160;    desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#af8f724af7210b52529216feefa993c98">m_HiddenStateScale</a> = projInputScale;</div>
<div class="line"><a name="l04267"></a><span class="lineno"> 4267</span>&#160;    desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4556cbd764d4848d8ad0637a9eed580d">m_HiddenStateZeroPoint</a> = projInputZeroPoint;</div>
<div class="line"><a name="l04268"></a><span class="lineno"> 4268</span>&#160; </div>
<div class="line"><a name="l04269"></a><span class="lineno"> 4269</span>&#160;    <span class="comment">// validate the optional input groups</span></div>
<div class="line"><a name="l04270"></a><span class="lineno"> 4270</span>&#160;    <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> &amp;&amp;</div>
<div class="line"><a name="l04271"></a><span class="lineno"> 4271</span>&#160;        (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">m_InputToInputWeights</a> != <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l04272"></a><span class="lineno"> 4272</span>&#160;         params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">m_RecurrentToInputWeights</a> != <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l04273"></a><span class="lineno"> 4273</span>&#160;         params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">m_InputGateBias</a> != <span class="keyword">nullptr</span>))</div>
<div class="line"><a name="l04274"></a><span class="lineno"> 4274</span>&#160;    {</div>
<div class="line"><a name="l04275"></a><span class="lineno"> 4275</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: All, or none, of input-to-input weights, recurrent-to-input weights,&quot;</span></div>
<div class="line"><a name="l04276"></a><span class="lineno"> 4276</span>&#160;                    <span class="stringliteral">&quot; and input gate bias must be provided&quot;</span>, __func__);</div>
<div class="line"><a name="l04277"></a><span class="lineno"> 4277</span>&#160;    }</div>
<div class="line"><a name="l04278"></a><span class="lineno"> 4278</span>&#160; </div>
<div class="line"><a name="l04279"></a><span class="lineno"> 4279</span>&#160;    <span class="keywordflow">if</span> (!desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> &amp;&amp; params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a44b0e6b16708df7f0d2bbab141688aaa">m_ProjectionBias</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l04280"></a><span class="lineno"> 4280</span>&#160;    {</div>
<div class="line"><a name="l04281"></a><span class="lineno"> 4281</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: projection bias should not be provided without projection weights&quot;</span>, __func__);</div>
<div class="line"><a name="l04282"></a><span class="lineno"> 4282</span>&#160;    }</div>
<div class="line"><a name="l04283"></a><span class="lineno"> 4283</span>&#160; </div>
<div class="line"><a name="l04284"></a><span class="lineno"> 4284</span>&#160;    <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> &amp;&amp;</div>
<div class="line"><a name="l04285"></a><span class="lineno"> 4285</span>&#160;        (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a35b112e30c3eb153806a2a8c16d178e3">m_CellToForgetWeights</a> == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l04286"></a><span class="lineno"> 4286</span>&#160;         params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#afe204ca375b74e9a72640c9227918d0a">m_CellToOutputWeights</a> == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l04287"></a><span class="lineno"> 4287</span>&#160;         (!desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> &amp;&amp; params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a484bafa2f8453a7c5a4a00b92a61b006">m_CellToInputWeights</a> == <span class="keyword">nullptr</span>)))</div>
<div class="line"><a name="l04288"></a><span class="lineno"> 4288</span>&#160;    {</div>
<div class="line"><a name="l04289"></a><span class="lineno"> 4289</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: All, or none, of cell-to-forget weights and cell-to-output weights must be provided&quot;</span></div>
<div class="line"><a name="l04290"></a><span class="lineno"> 4290</span>&#160;                    <span class="stringliteral">&quot; and, if CIFG is not enabled, cell-to-input weights must also be provided&quot;</span>, __func__);</div>
<div class="line"><a name="l04291"></a><span class="lineno"> 4291</span>&#160;    }</div>
<div class="line"><a name="l04292"></a><span class="lineno"> 4292</span>&#160; </div>
<div class="line"><a name="l04293"></a><span class="lineno"> 4293</span>&#160;    <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a> &amp;&amp;</div>
<div class="line"><a name="l04294"></a><span class="lineno"> 4294</span>&#160;        (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#af0f796fba1a2be9c56b4c9ee534577ee">m_ForgetLayerNormWeights</a> == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l04295"></a><span class="lineno"> 4295</span>&#160;         params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ad0b8c32bb5381f4cc999093ba3b98b43">m_CellLayerNormWeights</a> == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l04296"></a><span class="lineno"> 4296</span>&#160;         params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9b18daea2e9f42386055326fd016519a">m_OutputLayerNormWeights</a> == <span class="keyword">nullptr</span> ||</div>
<div class="line"><a name="l04297"></a><span class="lineno"> 4297</span>&#160;         (!desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> &amp;&amp; params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a0cd848f65ec31778d708852f0042fe37">m_InputLayerNormWeights</a> == <span class="keyword">nullptr</span>)))</div>
<div class="line"><a name="l04298"></a><span class="lineno"> 4298</span>&#160;    {</div>
<div class="line"><a name="l04299"></a><span class="lineno"> 4299</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: All, or none, of forget-norm weights, cell-norm weights and output-norm weights must be&quot;</span></div>
<div class="line"><a name="l04300"></a><span class="lineno"> 4300</span>&#160;                    <span class="stringliteral">&quot; provided and, if CIFG is not enabled, input-norm weights must also be provided&quot;</span>, __func__);</div>
<div class="line"><a name="l04301"></a><span class="lineno"> 4301</span>&#160;    }</div>
<div class="line"><a name="l04302"></a><span class="lineno"> 4302</span>&#160; </div>
<div class="line"><a name="l04303"></a><span class="lineno"> 4303</span>&#160;    <span class="comment">// Basic parameters</span></div>
<div class="line"><a name="l04304"></a><span class="lineno"> 4304</span>&#160;    <a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> paramsInfo;</div>
<div class="line"><a name="l04305"></a><span class="lineno"> 4305</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a4b3f6e6f2268416ffd7a34fda95ffd0b">m_InputToForgetWeights</a>     = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a31da1ead6794dd64571afdd0b6efc771">m_InputToForgetWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04306"></a><span class="lineno"> 4306</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#af07c65d3b7886a00f10c69093e76a341">m_InputToCellWeights</a>       = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a49e11acda22742cbaf6f1b259ead0d84">m_InputToCellWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04307"></a><span class="lineno"> 4307</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a33242cb43250f04f1736161ca8ad2db9">m_InputToOutputWeights</a>     = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a6e30c7b3451da3ea9cf4259fb602e6e6">m_InputToOutputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04308"></a><span class="lineno"> 4308</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a11b90bd2694aa7f4b434aadd75fbb1c2">m_RecurrentToForgetWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ae83131e16df1cace69395a5f99bc5ecb">m_RecurrentToForgetWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04309"></a><span class="lineno"> 4309</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a6c7873a3320a59a63aa26c006db905c0">m_RecurrentToCellWeights</a>   = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a1759754ccb88ecc9af44f3aae6e244ee">m_RecurrentToCellWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04310"></a><span class="lineno"> 4310</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#af434b509cd5232ef762c4b21b2dfaae0">m_RecurrentToOutputWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a56b81ca8ba4b4937e0787e4951f043fc">m_RecurrentToOutputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04311"></a><span class="lineno"> 4311</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a21626d0b91f8942c3ef8e48e17db9f21">m_ForgetGateBias</a>           = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ace7a1f1f1041b412b7d8ef82b95ff352">m_ForgetGateBias</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04312"></a><span class="lineno"> 4312</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#ab173a067eeb7295d84f5327bcc05a6c1">m_CellBias</a>                 = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a4a9d678146f572808a361dbdc5489f38">m_CellBias</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04313"></a><span class="lineno"> 4313</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a48cb83dcb58c786ea36f5d37695e75b1">m_OutputGateBias</a>           = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a8c0f6d48705f40c5590dde09be262222">m_OutputGateBias</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04314"></a><span class="lineno"> 4314</span>&#160; </div>
<div class="line"><a name="l04315"></a><span class="lineno"> 4315</span>&#160;    <span class="comment">// Inputs</span></div>
<div class="line"><a name="l04316"></a><span class="lineno"> 4316</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l04317"></a><span class="lineno"> 4317</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputStatePrevTimeStepInfo = outputStatePrevTimeStep.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l04318"></a><span class="lineno"> 4318</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; cellStatePrevTimeStepInfo = cellStatePrevTimeStep.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l04319"></a><span class="lineno"> 4319</span>&#160; </div>
<div class="line"><a name="l04320"></a><span class="lineno"> 4320</span>&#160;    <span class="comment">// Outputs</span></div>
<div class="line"><a name="l04321"></a><span class="lineno"> 4321</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputStateOutInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*outputStateOut);</div>
<div class="line"><a name="l04322"></a><span class="lineno"> 4322</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l04323"></a><span class="lineno"> 4323</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; cellStateOutInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*cellStateOut);</div>
<div class="line"><a name="l04324"></a><span class="lineno"> 4324</span>&#160; </div>
<div class="line"><a name="l04325"></a><span class="lineno"> 4325</span>&#160;    <span class="comment">// Optional parameters</span></div>
<div class="line"><a name="l04326"></a><span class="lineno"> 4326</span>&#160;    <span class="keywordflow">if</span> (!desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div>
<div class="line"><a name="l04327"></a><span class="lineno"> 4327</span>&#160;    {</div>
<div class="line"><a name="l04328"></a><span class="lineno"> 4328</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a15f9f65126ad3d4d82d6c19d0662ae01">m_InputToInputWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">m_InputToInputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04329"></a><span class="lineno"> 4329</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a9ab864961ded72f5ce7ea4eb9921f826">m_RecurrentToInputWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">m_RecurrentToInputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04330"></a><span class="lineno"> 4330</span>&#160;        <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>)</div>
<div class="line"><a name="l04331"></a><span class="lineno"> 4331</span>&#160;        {</div>
<div class="line"><a name="l04332"></a><span class="lineno"> 4332</span>&#160;            paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#ab99b2297c5a17114926b8b47c693fe43">m_CellToInputWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a484bafa2f8453a7c5a4a00b92a61b006">m_CellToInputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04333"></a><span class="lineno"> 4333</span>&#160;        }</div>
<div class="line"><a name="l04334"></a><span class="lineno"> 4334</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a042ea9d6d3842b87f112db126e806a93">m_InputGateBias</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">m_InputGateBias</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04335"></a><span class="lineno"> 4335</span>&#160;    }</div>
<div class="line"><a name="l04336"></a><span class="lineno"> 4336</span>&#160; </div>
<div class="line"><a name="l04337"></a><span class="lineno"> 4337</span>&#160; </div>
<div class="line"><a name="l04338"></a><span class="lineno"> 4338</span>&#160;    <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a>)</div>
<div class="line"><a name="l04339"></a><span class="lineno"> 4339</span>&#160;    {</div>
<div class="line"><a name="l04340"></a><span class="lineno"> 4340</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#ac6fb4a3a8e7e8a359ac34badc8178b1a">m_ProjectionWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ab03e6e1514f74427916c892f473fe04c">m_ProjectionWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04341"></a><span class="lineno"> 4341</span>&#160;        <span class="keywordflow">if</span> (params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a44b0e6b16708df7f0d2bbab141688aaa">m_ProjectionBias</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l04342"></a><span class="lineno"> 4342</span>&#160;        {</div>
<div class="line"><a name="l04343"></a><span class="lineno"> 4343</span>&#160;            paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#ae22fc962c59e7c24986718f5af0020db">m_ProjectionBias</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a44b0e6b16708df7f0d2bbab141688aaa">m_ProjectionBias</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04344"></a><span class="lineno"> 4344</span>&#160;        }</div>
<div class="line"><a name="l04345"></a><span class="lineno"> 4345</span>&#160;    }</div>
<div class="line"><a name="l04346"></a><span class="lineno"> 4346</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l04347"></a><span class="lineno"> 4347</span>&#160;    {</div>
<div class="line"><a name="l04348"></a><span class="lineno"> 4348</span>&#160;        <span class="comment">// If Projection is disabled, override non-const outputs to change the quant info with hidden params, then</span></div>
<div class="line"><a name="l04349"></a><span class="lineno"> 4349</span>&#160;        <span class="comment">// create a new const TensorInfo based on this</span></div>
<div class="line"><a name="l04350"></a><span class="lineno"> 4350</span>&#160;        outputStateOutInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(projInputScale);</div>
<div class="line"><a name="l04351"></a><span class="lineno"> 4351</span>&#160;        outputStateOutInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(projInputZeroPoint);</div>
<div class="line"><a name="l04352"></a><span class="lineno"> 4352</span>&#160;        outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(projInputScale);</div>
<div class="line"><a name="l04353"></a><span class="lineno"> 4353</span>&#160;        outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(projInputZeroPoint);</div>
<div class="line"><a name="l04354"></a><span class="lineno"> 4354</span>&#160;    }</div>
<div class="line"><a name="l04355"></a><span class="lineno"> 4355</span>&#160; </div>
<div class="line"><a name="l04356"></a><span class="lineno"> 4356</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> constOutputStateOutInfo(outputStateOutInfo);</div>
<div class="line"><a name="l04357"></a><span class="lineno"> 4357</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> constOutputInfo(outputInfo);</div>
<div class="line"><a name="l04358"></a><span class="lineno"> 4358</span>&#160; </div>
<div class="line"><a name="l04359"></a><span class="lineno"> 4359</span>&#160;    <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a>)</div>
<div class="line"><a name="l04360"></a><span class="lineno"> 4360</span>&#160;    {</div>
<div class="line"><a name="l04361"></a><span class="lineno"> 4361</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a1ddc4634491d95d37fe15049decadb8c">m_CellToForgetWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a35b112e30c3eb153806a2a8c16d178e3">m_CellToForgetWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04362"></a><span class="lineno"> 4362</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a16b4d4acd2a0d6d533ff3fe8b8e71765">m_CellToOutputWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#afe204ca375b74e9a72640c9227918d0a">m_CellToOutputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04363"></a><span class="lineno"> 4363</span>&#160;    }</div>
<div class="line"><a name="l04364"></a><span class="lineno"> 4364</span>&#160; </div>
<div class="line"><a name="l04365"></a><span class="lineno"> 4365</span>&#160;    <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a>)</div>
<div class="line"><a name="l04366"></a><span class="lineno"> 4366</span>&#160;    {</div>
<div class="line"><a name="l04367"></a><span class="lineno"> 4367</span>&#160;        <span class="keywordflow">if</span>(!desc.<a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a>)</div>
<div class="line"><a name="l04368"></a><span class="lineno"> 4368</span>&#160;        {</div>
<div class="line"><a name="l04369"></a><span class="lineno"> 4369</span>&#160;            paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#ab8c7712c0c6bc427dede8c76945e8f89">m_InputLayerNormWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a0cd848f65ec31778d708852f0042fe37">m_InputLayerNormWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04370"></a><span class="lineno"> 4370</span>&#160;        }</div>
<div class="line"><a name="l04371"></a><span class="lineno"> 4371</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a513ad7774e0f8969ab68d91a04ecca65">m_ForgetLayerNormWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#af0f796fba1a2be9c56b4c9ee534577ee">m_ForgetLayerNormWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04372"></a><span class="lineno"> 4372</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a567622530e51eaa2e82c9790a3a43f02">m_CellLayerNormWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#ad0b8c32bb5381f4cc999093ba3b98b43">m_CellLayerNormWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04373"></a><span class="lineno"> 4373</span>&#160;        paramsInfo.<a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml#a9935ad8aff43cf1e0622bf6d82710513">m_OutputLayerNormWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_lstm_input_params.xhtml#a9b18daea2e9f42386055326fd016519a">m_OutputLayerNormWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04374"></a><span class="lineno"> 4374</span>&#160;    }</div>
<div class="line"><a name="l04375"></a><span class="lineno"> 4375</span>&#160; </div>
<div class="line"><a name="l04376"></a><span class="lineno"> 4376</span>&#160;    <span class="comment">// Check if the layer is supported</span></div>
<div class="line"><a name="l04377"></a><span class="lineno"> 4377</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l04378"></a><span class="lineno"> 4378</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l04379"></a><span class="lineno"> 4379</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; cellStateOutInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l04380"></a><span class="lineno"> 4380</span>&#160;    {</div>
<div class="line"><a name="l04381"></a><span class="lineno"> 4381</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l04382"></a><span class="lineno"> 4382</span>&#160;                                   IsQLstmSupported,</div>
<div class="line"><a name="l04383"></a><span class="lineno"> 4383</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l04384"></a><span class="lineno"> 4384</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l04385"></a><span class="lineno"> 4385</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l04386"></a><span class="lineno"> 4386</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l04387"></a><span class="lineno"> 4387</span>&#160;                                   outputStatePrevTimeStepInfo,</div>
<div class="line"><a name="l04388"></a><span class="lineno"> 4388</span>&#160;                                   cellStatePrevTimeStepInfo,</div>
<div class="line"><a name="l04389"></a><span class="lineno"> 4389</span>&#160;                                   constOutputStateOutInfo,</div>
<div class="line"><a name="l04390"></a><span class="lineno"> 4390</span>&#160;                                   cellStateOutInfo,</div>
<div class="line"><a name="l04391"></a><span class="lineno"> 4391</span>&#160;                                   constOutputInfo,</div>
<div class="line"><a name="l04392"></a><span class="lineno"> 4392</span>&#160;                                   desc,</div>
<div class="line"><a name="l04393"></a><span class="lineno"> 4393</span>&#160;                                   paramsInfo);</div>
<div class="line"><a name="l04394"></a><span class="lineno"> 4394</span>&#160;    };</div>
<div class="line"><a name="l04395"></a><span class="lineno"> 4395</span>&#160; </div>
<div class="line"><a name="l04396"></a><span class="lineno"> 4396</span>&#160;    <span class="keywordtype">bool</span> isDynamic = <span class="keyword">false</span>;</div>
<div class="line"><a name="l04397"></a><span class="lineno"> 4397</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(constOutputStateOutInfo) &amp;&amp;</div>
<div class="line"><a name="l04398"></a><span class="lineno"> 4398</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(cellStateOutInfo)  &amp;&amp;</div>
<div class="line"><a name="l04399"></a><span class="lineno"> 4399</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(constOutputInfo))</div>
<div class="line"><a name="l04400"></a><span class="lineno"> 4400</span>&#160;    {</div>
<div class="line"><a name="l04401"></a><span class="lineno"> 4401</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l04402"></a><span class="lineno"> 4402</span>&#160;    }</div>
<div class="line"><a name="l04403"></a><span class="lineno"> 4403</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l04404"></a><span class="lineno"> 4404</span>&#160;    {</div>
<div class="line"><a name="l04405"></a><span class="lineno"> 4405</span>&#160;        isDynamic = <span class="keyword">true</span>;</div>
<div class="line"><a name="l04406"></a><span class="lineno"> 4406</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l04407"></a><span class="lineno"> 4407</span>&#160;    }</div>
<div class="line"><a name="l04408"></a><span class="lineno"> 4408</span>&#160; </div>
<div class="line"><a name="l04409"></a><span class="lineno"> 4409</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l04410"></a><span class="lineno"> 4410</span>&#160;    {</div>
<div class="line"><a name="l04411"></a><span class="lineno"> 4411</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l04412"></a><span class="lineno"> 4412</span>&#160;    }</div>
<div class="line"><a name="l04413"></a><span class="lineno"> 4413</span>&#160; </div>
<div class="line"><a name="l04414"></a><span class="lineno"> 4414</span>&#160;    <span class="comment">// Add the layer</span></div>
<div class="line"><a name="l04415"></a><span class="lineno"> 4415</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddQLstmLayer(desc, params, <span class="stringliteral">&quot;QLstm&quot;</span>);</div>
<div class="line"><a name="l04416"></a><span class="lineno"> 4416</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l04417"></a><span class="lineno"> 4417</span>&#160; </div>
<div class="line"><a name="l04418"></a><span class="lineno"> 4418</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l04419"></a><span class="lineno"> 4419</span>&#160;    outputStatePrevTimeStep.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div>
<div class="line"><a name="l04420"></a><span class="lineno"> 4420</span>&#160;    cellStatePrevTimeStep.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(2));</div>
<div class="line"><a name="l04421"></a><span class="lineno"> 4421</span>&#160; </div>
<div class="line"><a name="l04422"></a><span class="lineno"> 4422</span>&#160;    <span class="keywordflow">if</span> (!isDynamic)</div>
<div class="line"><a name="l04423"></a><span class="lineno"> 4423</span>&#160;    {</div>
<div class="line"><a name="l04424"></a><span class="lineno"> 4424</span>&#160;        <span class="keywordflow">return</span> ( <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(</div>
<div class="line"><a name="l04425"></a><span class="lineno"> 4425</span>&#160;                operation, 0, *layer, 0, model, data, &amp;constOutputStateOutInfo) &amp;&amp;</div>
<div class="line"><a name="l04426"></a><span class="lineno"> 4426</span>&#160;                 <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 1, *layer, 1, model, data) &amp;&amp;</div>
<div class="line"><a name="l04427"></a><span class="lineno"> 4427</span>&#160;                 <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 2, *layer, 2, model, data, &amp;constOutputInfo));</div>
<div class="line"><a name="l04428"></a><span class="lineno"> 4428</span>&#160;    }</div>
<div class="line"><a name="l04429"></a><span class="lineno"> 4429</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l04430"></a><span class="lineno"> 4430</span>&#160;    {</div>
<div class="line"><a name="l04431"></a><span class="lineno"> 4431</span>&#160;        <span class="keywordflow">return</span> ( <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(</div>
<div class="line"><a name="l04432"></a><span class="lineno"> 4432</span>&#160;                operation, 0, *layer, 0, model, data, &amp;constOutputStateOutInfo) &amp;&amp;</div>
<div class="line"><a name="l04433"></a><span class="lineno"> 4433</span>&#160;                 <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(</div>
<div class="line"><a name="l04434"></a><span class="lineno"> 4434</span>&#160;                         operation, 1, *layer, 1, model, data, <span class="keyword">nullptr</span>, validateFunc,</div>
<div class="line"><a name="l04435"></a><span class="lineno"> 4435</span>&#160;                         ActivationFn::kActivationNone, <span class="keyword">true</span>) &amp;&amp;</div>
<div class="line"><a name="l04436"></a><span class="lineno"> 4436</span>&#160;                 <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 2, *layer, 2, model, data, &amp;constOutputInfo));</div>
<div class="line"><a name="l04437"></a><span class="lineno"> 4437</span>&#160;    }</div>
<div class="line"><a name="l04438"></a><span class="lineno"> 4438</span>&#160;}</div>
<div class="line"><a name="l04439"></a><span class="lineno"> 4439</span>&#160; </div>
<div class="line"><a name="l04440"></a><span class="lineno"> 4440</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertQuantized16BitLstm(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l04441"></a><span class="lineno"> 4441</span>&#160;{</div>
<div class="line"><a name="l04442"></a><span class="lineno"> 4442</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertQuantized16BitLstm()&quot;</span>;</div>
<div class="line"><a name="l04443"></a><span class="lineno"> 4443</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Policy::ConvertQuantized16BitLstm()&quot;</span>;</div>
<div class="line"><a name="l04444"></a><span class="lineno"> 4444</span>&#160; </div>
<div class="line"><a name="l04445"></a><span class="lineno"> 4445</span>&#160;    <span class="comment">//Inputs:</span></div>
<div class="line"><a name="l04446"></a><span class="lineno"> 4446</span>&#160;    <span class="comment">// 0: The input: A 2-D tensor of type ANEURALNETWORKS_TENSOR_QUANT8_ASYMM and shape [numBatches, inputSize]</span></div>
<div class="line"><a name="l04447"></a><span class="lineno"> 4447</span>&#160;    <span class="comment">//    specifying the input to the LSTM cell. Tensor is quantized with a fixed quantization range of -1, 127/128.</span></div>
<div class="line"><a name="l04448"></a><span class="lineno"> 4448</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l04449"></a><span class="lineno"> 4449</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l04450"></a><span class="lineno"> 4450</span>&#160;    {</div>
<div class="line"><a name="l04451"></a><span class="lineno"> 4451</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 0: input&quot;</span>, __func__);</div>
<div class="line"><a name="l04452"></a><span class="lineno"> 4452</span>&#160;    }</div>
<div class="line"><a name="l04453"></a><span class="lineno"> 4453</span>&#160; </div>
<div class="line"><a name="l04454"></a><span class="lineno"> 4454</span>&#160;    <span class="comment">//13: The previous cell state: A 2-D tensor of type ANEURALNETWORKS_TENSOR_QUANT16_SYMM and shape</span></div>
<div class="line"><a name="l04455"></a><span class="lineno"> 4455</span>&#160;    <span class="comment">//    [numBatches, outputSize] specifying the cell state from the previous time step of the LSTM cell.</span></div>
<div class="line"><a name="l04456"></a><span class="lineno"> 4456</span>&#160;    <span class="comment">//    It is quantized using a quantization range of -2^4, 2^4 * 32767/32768.</span></div>
<div class="line"><a name="l04457"></a><span class="lineno"> 4457</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> previousCellStateIn = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 13, model, data);</div>
<div class="line"><a name="l04458"></a><span class="lineno"> 4458</span>&#160;    <span class="keywordflow">if</span> (!previousCellStateIn.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l04459"></a><span class="lineno"> 4459</span>&#160;    {</div>
<div class="line"><a name="l04460"></a><span class="lineno"> 4460</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 13: previousCellStateIn&quot;</span>, __func__);</div>
<div class="line"><a name="l04461"></a><span class="lineno"> 4461</span>&#160;    }</div>
<div class="line"><a name="l04462"></a><span class="lineno"> 4462</span>&#160; </div>
<div class="line"><a name="l04463"></a><span class="lineno"> 4463</span>&#160;    <span class="comment">// 14: The previous output state: A 2-D tensor of type ANEURALNETWORKS_TENSOR_QUANT8_ASYMM and shape</span></div>
<div class="line"><a name="l04464"></a><span class="lineno"> 4464</span>&#160;    <span class="comment">//     [numBathes, outputSize] specifying the output of the LSTM cell from previous time-step. Tensor</span></div>
<div class="line"><a name="l04465"></a><span class="lineno"> 4465</span>&#160;    <span class="comment">//     is quantized with a fixed quantization range of -1, 127/128.</span></div>
<div class="line"><a name="l04466"></a><span class="lineno"> 4466</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> previousOutputIn = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 14, model, data);</div>
<div class="line"><a name="l04467"></a><span class="lineno"> 4467</span>&#160;    <span class="keywordflow">if</span> (!previousOutputIn.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l04468"></a><span class="lineno"> 4468</span>&#160;    {</div>
<div class="line"><a name="l04469"></a><span class="lineno"> 4469</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 14: previousOutputIn&quot;</span>, __func__);</div>
<div class="line"><a name="l04470"></a><span class="lineno"> 4470</span>&#160;    }</div>
<div class="line"><a name="l04471"></a><span class="lineno"> 4471</span>&#160; </div>
<div class="line"><a name="l04472"></a><span class="lineno"> 4472</span>&#160;    <span class="comment">// Get the input tensors:</span></div>
<div class="line"><a name="l04473"></a><span class="lineno"> 4473</span>&#160;    <span class="comment">// 1: The input-to-input weights. A 2-D tensor of type ANEURALNETWORKS_TENSOR_QUANT8_ASYMM and shape</span></div>
<div class="line"><a name="l04474"></a><span class="lineno"> 4474</span>&#160;    <span class="comment">//    [outputSize, inputSize] specifying input-to-input part of weights for fully-connected layer inside the</span></div>
<div class="line"><a name="l04475"></a><span class="lineno"> 4475</span>&#160;    <span class="comment">//    LSTM cell. Quantization zero point and scale must be the same across all the weights.</span></div>
<div class="line"><a name="l04476"></a><span class="lineno"> 4476</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputToInputWeightsPin =</div>
<div class="line"><a name="l04477"></a><span class="lineno"> 4477</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 1, model, data);</div>
<div class="line"><a name="l04478"></a><span class="lineno"> 4478</span>&#160; </div>
<div class="line"><a name="l04479"></a><span class="lineno"> 4479</span>&#160;    <span class="comment">// 2: The input-to-forget weights. A 2-D tensor of type ANEURALNETWORKS_TENSOR_QUANT8_ASYMM and shape</span></div>
<div class="line"><a name="l04480"></a><span class="lineno"> 4480</span>&#160;    <span class="comment">//    [outputSize, inputSize] specifying input-to-forget part of weights for fully-connected layer inside the</span></div>
<div class="line"><a name="l04481"></a><span class="lineno"> 4481</span>&#160;    <span class="comment">//    LSTM cell. Quantization zero point and scale must be the same across all the weights.</span></div>
<div class="line"><a name="l04482"></a><span class="lineno"> 4482</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputToForgetWeightsPin =</div>
<div class="line"><a name="l04483"></a><span class="lineno"> 4483</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 2, model, data);</div>
<div class="line"><a name="l04484"></a><span class="lineno"> 4484</span>&#160; </div>
<div class="line"><a name="l04485"></a><span class="lineno"> 4485</span>&#160;    <span class="comment">// 3: The input-to-cell weights. A 2-D tensor of type ANEURALNETWORKS_TENSOR_QUANT8_ASYMM and shape</span></div>
<div class="line"><a name="l04486"></a><span class="lineno"> 4486</span>&#160;    <span class="comment">//    [outputSize, inputSize] specifying input-to-cell part of weights for fully-connected layer inside the</span></div>
<div class="line"><a name="l04487"></a><span class="lineno"> 4487</span>&#160;    <span class="comment">//    LSTM cell. Quantization zero point and scale must be the same across all the weights.</span></div>
<div class="line"><a name="l04488"></a><span class="lineno"> 4488</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputToCellWeightsPin =</div>
<div class="line"><a name="l04489"></a><span class="lineno"> 4489</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 3, model, data);</div>
<div class="line"><a name="l04490"></a><span class="lineno"> 4490</span>&#160; </div>
<div class="line"><a name="l04491"></a><span class="lineno"> 4491</span>&#160;    <span class="comment">// 4: The input-to-output weights. A 2-D tensor of type ANEURALNETWORKS_TENSOR_QUANT8_ASYMM and shape</span></div>
<div class="line"><a name="l04492"></a><span class="lineno"> 4492</span>&#160;    <span class="comment">//    [outputSize, inputSize] specifying input-to-output part of weights for fully-connected layer inside the</span></div>
<div class="line"><a name="l04493"></a><span class="lineno"> 4493</span>&#160;    <span class="comment">//    LSTM cell. Quantization zero point and scale must be the same across all the weights.</span></div>
<div class="line"><a name="l04494"></a><span class="lineno"> 4494</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputToOutputWeightsPin =</div>
<div class="line"><a name="l04495"></a><span class="lineno"> 4495</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 4, model, data);</div>
<div class="line"><a name="l04496"></a><span class="lineno"> 4496</span>&#160; </div>
<div class="line"><a name="l04497"></a><span class="lineno"> 4497</span>&#160;    <span class="comment">// 5: The recurrent-to-input weights. A 2-D tensor of type ANEURALNETWORKS_TENSOR_QUANT8_ASYMM and shape</span></div>
<div class="line"><a name="l04498"></a><span class="lineno"> 4498</span>&#160;    <span class="comment">//    [outputSize, outputSize] specifying recurrent-to-input part of weights for fully-connected layer inside</span></div>
<div class="line"><a name="l04499"></a><span class="lineno"> 4499</span>&#160;    <span class="comment">//    the LSTM cell. Quantization zero point and scale must be the same across all the weights.</span></div>
<div class="line"><a name="l04500"></a><span class="lineno"> 4500</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> recurrentToInputWeightsPin =</div>
<div class="line"><a name="l04501"></a><span class="lineno"> 4501</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 5, model, data);</div>
<div class="line"><a name="l04502"></a><span class="lineno"> 4502</span>&#160; </div>
<div class="line"><a name="l04503"></a><span class="lineno"> 4503</span>&#160;    <span class="comment">// 6: The recurrent-to-forget weights. A 2-D tensor of type ANEURALNETWORKS_TENSOR_QUANT8_ASYMM and shape</span></div>
<div class="line"><a name="l04504"></a><span class="lineno"> 4504</span>&#160;    <span class="comment">//    [outputSize, outputSize] specifying recurrent-to-forget part of weights for fully-connected layer inside</span></div>
<div class="line"><a name="l04505"></a><span class="lineno"> 4505</span>&#160;    <span class="comment">//    the LSTM cell. Quantization zero point and scale must be the same across all the weights.</span></div>
<div class="line"><a name="l04506"></a><span class="lineno"> 4506</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> recurrentToForgetWeightsPin =</div>
<div class="line"><a name="l04507"></a><span class="lineno"> 4507</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 6, model, data);</div>
<div class="line"><a name="l04508"></a><span class="lineno"> 4508</span>&#160; </div>
<div class="line"><a name="l04509"></a><span class="lineno"> 4509</span>&#160;    <span class="comment">// 7: The recurrent-to-cell weights. A 2-D tensor of type ANEURALNETWORKS_TENSOR_QUANT8_ASYMM and shape</span></div>
<div class="line"><a name="l04510"></a><span class="lineno"> 4510</span>&#160;    <span class="comment">//    [outputSize, outputSize] specifying recurrent-to-cell part of weights for fully-connected layer inside</span></div>
<div class="line"><a name="l04511"></a><span class="lineno"> 4511</span>&#160;    <span class="comment">//    the LSTM cell. Quantization zero point and scale must be the same across all the weights.</span></div>
<div class="line"><a name="l04512"></a><span class="lineno"> 4512</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> recurrentToCellWeightsPin =</div>
<div class="line"><a name="l04513"></a><span class="lineno"> 4513</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 7, model, data);</div>
<div class="line"><a name="l04514"></a><span class="lineno"> 4514</span>&#160; </div>
<div class="line"><a name="l04515"></a><span class="lineno"> 4515</span>&#160;    <span class="comment">// 8: The recurrent-to-output weights. A 2-D tensor of type ANEURALNETWORKS_TENSOR_QUANT8_ASYMM and shape</span></div>
<div class="line"><a name="l04516"></a><span class="lineno"> 4516</span>&#160;    <span class="comment">//    [outputSize, outputSize] specifying recurrent-to-output part of weights for fully-connected layer inside</span></div>
<div class="line"><a name="l04517"></a><span class="lineno"> 4517</span>&#160;    <span class="comment">//    the LSTM cell. Quantization zero point and scale must be the same across all the weights.</span></div>
<div class="line"><a name="l04518"></a><span class="lineno"> 4518</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> recurrentToOutputWeightsPin =</div>
<div class="line"><a name="l04519"></a><span class="lineno"> 4519</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 8, model, data);</div>
<div class="line"><a name="l04520"></a><span class="lineno"> 4520</span>&#160; </div>
<div class="line"><a name="l04521"></a><span class="lineno"> 4521</span>&#160;    <span class="comment">// 9: The input gate bias. A 1-D tensor of type ANEURALNETWORKS_TENSOR_INT32 and shape [outputSize] specifying the</span></div>
<div class="line"><a name="l04522"></a><span class="lineno"> 4522</span>&#160;    <span class="comment">//    bias for the fully-connected layer inside the LSTM cell. Bias is quantized with scale being a product</span></div>
<div class="line"><a name="l04523"></a><span class="lineno"> 4523</span>&#160;    <span class="comment">//    of input and weights scales and zeroPoint equal to 0.</span></div>
<div class="line"><a name="l04524"></a><span class="lineno"> 4524</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> inputGateBiasPin =</div>
<div class="line"><a name="l04525"></a><span class="lineno"> 4525</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 9, model, data);</div>
<div class="line"><a name="l04526"></a><span class="lineno"> 4526</span>&#160; </div>
<div class="line"><a name="l04527"></a><span class="lineno"> 4527</span>&#160;    <span class="comment">// 10: The forget gate bias. A 1-D tensor of type ANEURALNETWORKS_TENSOR_INT32 and shape [outputSize] specifying</span></div>
<div class="line"><a name="l04528"></a><span class="lineno"> 4528</span>&#160;    <span class="comment">//     the bias for the fully-connected layer inside the LSTM cell. Bias is quantized with scale being a product</span></div>
<div class="line"><a name="l04529"></a><span class="lineno"> 4529</span>&#160;    <span class="comment">//     of input and weights scales and zeroPoint equal to 0.</span></div>
<div class="line"><a name="l04530"></a><span class="lineno"> 4530</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> forgetGateBiasPin =</div>
<div class="line"><a name="l04531"></a><span class="lineno"> 4531</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 10, model, data);</div>
<div class="line"><a name="l04532"></a><span class="lineno"> 4532</span>&#160; </div>
<div class="line"><a name="l04533"></a><span class="lineno"> 4533</span>&#160;    <span class="comment">// 11:The cell bias. A 1-D tensor of type ANEURALNETWORKS_TENSOR_INT32 and shape [outputSize] specifying the bias</span></div>
<div class="line"><a name="l04534"></a><span class="lineno"> 4534</span>&#160;    <span class="comment">//    for the fully-connected layer inside the LSTM cell. Bias is quantized with scale being a product of input</span></div>
<div class="line"><a name="l04535"></a><span class="lineno"> 4535</span>&#160;    <span class="comment">//    and weights scales and zeroPoint equal to 0.</span></div>
<div class="line"><a name="l04536"></a><span class="lineno"> 4536</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> cellBiasPin =</div>
<div class="line"><a name="l04537"></a><span class="lineno"> 4537</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 11, model, data);</div>
<div class="line"><a name="l04538"></a><span class="lineno"> 4538</span>&#160; </div>
<div class="line"><a name="l04539"></a><span class="lineno"> 4539</span>&#160;    <span class="comment">// 12:The output gate bias. A 1-D tensor of type ANEURALNETWORKS_TENSOR_INT32 and shape [outputSize] specifying</span></div>
<div class="line"><a name="l04540"></a><span class="lineno"> 4540</span>&#160;    <span class="comment">//    the bias for the fully-connected layer inside the LSTM cell. Bias is quantized with scale being a product</span></div>
<div class="line"><a name="l04541"></a><span class="lineno"> 4541</span>&#160;    <span class="comment">//    of input and weights scales and zeroPoint equal to 0.</span></div>
<div class="line"><a name="l04542"></a><span class="lineno"> 4542</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> outputGateBiasPin =</div>
<div class="line"><a name="l04543"></a><span class="lineno"> 4543</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 12, model, data);</div>
<div class="line"><a name="l04544"></a><span class="lineno"> 4544</span>&#160; </div>
<div class="line"><a name="l04545"></a><span class="lineno"> 4545</span>&#160;    <span class="keywordflow">if</span> (!inputToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04546"></a><span class="lineno"> 4546</span>&#160;        !inputToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04547"></a><span class="lineno"> 4547</span>&#160;        !inputToCellWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04548"></a><span class="lineno"> 4548</span>&#160;        !inputToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04549"></a><span class="lineno"> 4549</span>&#160;        !recurrentToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04550"></a><span class="lineno"> 4550</span>&#160;        !recurrentToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04551"></a><span class="lineno"> 4551</span>&#160;        !recurrentToCellWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04552"></a><span class="lineno"> 4552</span>&#160;        !recurrentToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04553"></a><span class="lineno"> 4553</span>&#160;        !inputGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04554"></a><span class="lineno"> 4554</span>&#160;        !forgetGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04555"></a><span class="lineno"> 4555</span>&#160;        !cellBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() ||</div>
<div class="line"><a name="l04556"></a><span class="lineno"> 4556</span>&#160;        !outputGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l04557"></a><span class="lineno"> 4557</span>&#160;    {</div>
<div class="line"><a name="l04558"></a><span class="lineno"> 4558</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid tensor inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l04559"></a><span class="lineno"> 4559</span>&#160;    }</div>
<div class="line"><a name="l04560"></a><span class="lineno"> 4560</span>&#160; </div>
<div class="line"><a name="l04561"></a><span class="lineno"> 4561</span>&#160;    <span class="comment">// Outputs:</span></div>
<div class="line"><a name="l04562"></a><span class="lineno"> 4562</span>&#160;    <span class="comment">// 0: The cell state: A 2-D tensor of type ANEURALNETWORKS_TENSOR_QUANT16_SYMM and shape [numBatches, outputSize]</span></div>
<div class="line"><a name="l04563"></a><span class="lineno"> 4563</span>&#160;    <span class="comment">//    which contains a cell state from the current time step. Tensor is quantized using a quantization range</span></div>
<div class="line"><a name="l04564"></a><span class="lineno"> 4564</span>&#160;    <span class="comment">//    of -2^4, 2^4 * 32767/32768.</span></div>
<div class="line"><a name="l04565"></a><span class="lineno"> 4565</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* cellStateOut = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l04566"></a><span class="lineno"> 4566</span>&#160;    <span class="keywordflow">if</span> (!cellStateOut)</div>
<div class="line"><a name="l04567"></a><span class="lineno"> 4567</span>&#160;    {</div>
<div class="line"><a name="l04568"></a><span class="lineno"> 4568</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0: cellStateOut&quot;</span>, __func__);</div>
<div class="line"><a name="l04569"></a><span class="lineno"> 4569</span>&#160;    }</div>
<div class="line"><a name="l04570"></a><span class="lineno"> 4570</span>&#160; </div>
<div class="line"><a name="l04571"></a><span class="lineno"> 4571</span>&#160;    <span class="comment">// 1: The output: A 2-D tensor of type ANEURALNETWORKS_TENSOR_QUANT8_ASYMM and shape [numBathes, outputSize] which</span></div>
<div class="line"><a name="l04572"></a><span class="lineno"> 4572</span>&#160;    <span class="comment">//      contains the output value. Tensor is quantized with a fixed quantization range of -1, 127/128.</span></div>
<div class="line"><a name="l04573"></a><span class="lineno"> 4573</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 1, model);</div>
<div class="line"><a name="l04574"></a><span class="lineno"> 4574</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l04575"></a><span class="lineno"> 4575</span>&#160;    {</div>
<div class="line"><a name="l04576"></a><span class="lineno"> 4576</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 1: output&quot;</span>, __func__);</div>
<div class="line"><a name="l04577"></a><span class="lineno"> 4577</span>&#160;    }</div>
<div class="line"><a name="l04578"></a><span class="lineno"> 4578</span>&#160; </div>
<div class="line"><a name="l04579"></a><span class="lineno"> 4579</span>&#160;    <span class="comment">// Inputs</span></div>
<div class="line"><a name="l04580"></a><span class="lineno"> 4580</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo               = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l04581"></a><span class="lineno"> 4581</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; previousCellStateInInfo = previousCellStateIn.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l04582"></a><span class="lineno"> 4582</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; previousOutputInInfo    = previousOutputIn.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l04583"></a><span class="lineno"> 4583</span>&#160; </div>
<div class="line"><a name="l04584"></a><span class="lineno"> 4584</span>&#160;    <span class="comment">// Outputs</span></div>
<div class="line"><a name="l04585"></a><span class="lineno"> 4585</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; cellStateOutInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*cellStateOut);</div>
<div class="line"><a name="l04586"></a><span class="lineno"> 4586</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo       = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l04587"></a><span class="lineno"> 4587</span>&#160; </div>
<div class="line"><a name="l04588"></a><span class="lineno"> 4588</span>&#160;    <span class="comment">// Dynamic tensors currently not supported</span></div>
<div class="line"><a name="l04589"></a><span class="lineno"> 4589</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(cellStateOutInfo) || <a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l04590"></a><span class="lineno"> 4590</span>&#160;    {</div>
<div class="line"><a name="l04591"></a><span class="lineno"> 4591</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Dynamic output tensors are not supported&quot;</span>, __func__);</div>
<div class="line"><a name="l04592"></a><span class="lineno"> 4592</span>&#160;    }</div>
<div class="line"><a name="l04593"></a><span class="lineno"> 4593</span>&#160; </div>
<div class="line"><a name="l04594"></a><span class="lineno"> 4594</span>&#160;    <a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml">QuantizedLstmInputParams</a> params;</div>
<div class="line"><a name="l04595"></a><span class="lineno"> 4595</span>&#160; </div>
<div class="line"><a name="l04596"></a><span class="lineno"> 4596</span>&#160;    params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">m_InputToInputWeights</a>      = inputToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04597"></a><span class="lineno"> 4597</span>&#160;    params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a31da1ead6794dd64571afdd0b6efc771">m_InputToForgetWeights</a>     = inputToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04598"></a><span class="lineno"> 4598</span>&#160;    params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a49e11acda22742cbaf6f1b259ead0d84">m_InputToCellWeights</a>       = inputToCellWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04599"></a><span class="lineno"> 4599</span>&#160;    params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a6e30c7b3451da3ea9cf4259fb602e6e6">m_InputToOutputWeights</a>     = inputToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04600"></a><span class="lineno"> 4600</span>&#160;    params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">m_RecurrentToInputWeights</a>  = recurrentToInputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04601"></a><span class="lineno"> 4601</span>&#160;    params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#ae83131e16df1cace69395a5f99bc5ecb">m_RecurrentToForgetWeights</a> = recurrentToForgetWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04602"></a><span class="lineno"> 4602</span>&#160;    params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a1759754ccb88ecc9af44f3aae6e244ee">m_RecurrentToCellWeights</a>   = recurrentToCellWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04603"></a><span class="lineno"> 4603</span>&#160;    params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a56b81ca8ba4b4937e0787e4951f043fc">m_RecurrentToOutputWeights</a> = recurrentToOutputWeightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04604"></a><span class="lineno"> 4604</span>&#160;    params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">m_InputGateBias</a>            = inputGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04605"></a><span class="lineno"> 4605</span>&#160;    params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#ace7a1f1f1041b412b7d8ef82b95ff352">m_ForgetGateBias</a>           = forgetGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04606"></a><span class="lineno"> 4606</span>&#160;    params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a4a9d678146f572808a361dbdc5489f38">m_CellBias</a>                 = cellBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04607"></a><span class="lineno"> 4607</span>&#160;    params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a8c0f6d48705f40c5590dde09be262222">m_OutputGateBias</a>           = outputGateBiasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">GetConstTensorPtr</a>();</div>
<div class="line"><a name="l04608"></a><span class="lineno"> 4608</span>&#160; </div>
<div class="line"><a name="l04609"></a><span class="lineno"> 4609</span>&#160;    <a class="code" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> paramsInfo;</div>
<div class="line"><a name="l04610"></a><span class="lineno"> 4610</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a15f9f65126ad3d4d82d6c19d0662ae01">m_InputToInputWeights</a>      = &amp;(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">m_InputToInputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04611"></a><span class="lineno"> 4611</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a4b3f6e6f2268416ffd7a34fda95ffd0b">m_InputToForgetWeights</a>     = &amp;(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a31da1ead6794dd64571afdd0b6efc771">m_InputToForgetWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04612"></a><span class="lineno"> 4612</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#af07c65d3b7886a00f10c69093e76a341">m_InputToCellWeights</a>       = &amp;(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a49e11acda22742cbaf6f1b259ead0d84">m_InputToCellWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04613"></a><span class="lineno"> 4613</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a33242cb43250f04f1736161ca8ad2db9">m_InputToOutputWeights</a>     = &amp;(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a6e30c7b3451da3ea9cf4259fb602e6e6">m_InputToOutputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04614"></a><span class="lineno"> 4614</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a9ab864961ded72f5ce7ea4eb9921f826">m_RecurrentToInputWeights</a>  = &amp;(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">m_RecurrentToInputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04615"></a><span class="lineno"> 4615</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a11b90bd2694aa7f4b434aadd75fbb1c2">m_RecurrentToForgetWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#ae83131e16df1cace69395a5f99bc5ecb">m_RecurrentToForgetWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04616"></a><span class="lineno"> 4616</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a6c7873a3320a59a63aa26c006db905c0">m_RecurrentToCellWeights</a>   = &amp;(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a1759754ccb88ecc9af44f3aae6e244ee">m_RecurrentToCellWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04617"></a><span class="lineno"> 4617</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#af434b509cd5232ef762c4b21b2dfaae0">m_RecurrentToOutputWeights</a> = &amp;(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a56b81ca8ba4b4937e0787e4951f043fc">m_RecurrentToOutputWeights</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04618"></a><span class="lineno"> 4618</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a042ea9d6d3842b87f112db126e806a93">m_InputGateBias</a>            = &amp;(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">m_InputGateBias</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04619"></a><span class="lineno"> 4619</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a21626d0b91f8942c3ef8e48e17db9f21">m_ForgetGateBias</a>           = &amp;(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#ace7a1f1f1041b412b7d8ef82b95ff352">m_ForgetGateBias</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04620"></a><span class="lineno"> 4620</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#ab173a067eeb7295d84f5327bcc05a6c1">m_CellBias</a>                 = &amp;(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a4a9d678146f572808a361dbdc5489f38">m_CellBias</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04621"></a><span class="lineno"> 4621</span>&#160;    paramsInfo.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a48cb83dcb58c786ea36f5d37695e75b1">m_OutputGateBias</a>           = &amp;(params.<a class="code" href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a8c0f6d48705f40c5590dde09be262222">m_OutputGateBias</a>-&gt;<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l04622"></a><span class="lineno"> 4622</span>&#160; </div>
<div class="line"><a name="l04623"></a><span class="lineno"> 4623</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l04624"></a><span class="lineno"> 4624</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l04625"></a><span class="lineno"> 4625</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l04626"></a><span class="lineno"> 4626</span>&#160;    {</div>
<div class="line"><a name="l04627"></a><span class="lineno"> 4627</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l04628"></a><span class="lineno"> 4628</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a237992b29706fe1c1653dae916ea67ef">IsQuantizedLstmSupported</a>,</div>
<div class="line"><a name="l04629"></a><span class="lineno"> 4629</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l04630"></a><span class="lineno"> 4630</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l04631"></a><span class="lineno"> 4631</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l04632"></a><span class="lineno"> 4632</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l04633"></a><span class="lineno"> 4633</span>&#160;                                   previousCellStateInInfo,</div>
<div class="line"><a name="l04634"></a><span class="lineno"> 4634</span>&#160;                                   previousOutputInInfo,</div>
<div class="line"><a name="l04635"></a><span class="lineno"> 4635</span>&#160;                                   cellStateOutInfo,</div>
<div class="line"><a name="l04636"></a><span class="lineno"> 4636</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l04637"></a><span class="lineno"> 4637</span>&#160;                                   paramsInfo);</div>
<div class="line"><a name="l04638"></a><span class="lineno"> 4638</span>&#160;    };</div>
<div class="line"><a name="l04639"></a><span class="lineno"> 4639</span>&#160; </div>
<div class="line"><a name="l04640"></a><span class="lineno"> 4640</span>&#160;    <span class="keywordtype">bool</span> isDynamic = <span class="keyword">false</span>;</div>
<div class="line"><a name="l04641"></a><span class="lineno"> 4641</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(cellStateOutInfo) &amp;&amp;</div>
<div class="line"><a name="l04642"></a><span class="lineno"> 4642</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l04643"></a><span class="lineno"> 4643</span>&#160;    {</div>
<div class="line"><a name="l04644"></a><span class="lineno"> 4644</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l04645"></a><span class="lineno"> 4645</span>&#160;    }</div>
<div class="line"><a name="l04646"></a><span class="lineno"> 4646</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l04647"></a><span class="lineno"> 4647</span>&#160;    {</div>
<div class="line"><a name="l04648"></a><span class="lineno"> 4648</span>&#160;        isDynamic = <span class="keyword">true</span>;</div>
<div class="line"><a name="l04649"></a><span class="lineno"> 4649</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l04650"></a><span class="lineno"> 4650</span>&#160;    }</div>
<div class="line"><a name="l04651"></a><span class="lineno"> 4651</span>&#160; </div>
<div class="line"><a name="l04652"></a><span class="lineno"> 4652</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l04653"></a><span class="lineno"> 4653</span>&#160;    {</div>
<div class="line"><a name="l04654"></a><span class="lineno"> 4654</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l04655"></a><span class="lineno"> 4655</span>&#160;    }</div>
<div class="line"><a name="l04656"></a><span class="lineno"> 4656</span>&#160; </div>
<div class="line"><a name="l04657"></a><span class="lineno"> 4657</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddQuantizedLstmLayer(params, <span class="stringliteral">&quot;QuantizedLstm&quot;</span>);</div>
<div class="line"><a name="l04658"></a><span class="lineno"> 4658</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l04659"></a><span class="lineno"> 4659</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l04660"></a><span class="lineno"> 4660</span>&#160;    previousCellStateIn.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div>
<div class="line"><a name="l04661"></a><span class="lineno"> 4661</span>&#160;    previousOutputIn.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(2));</div>
<div class="line"><a name="l04662"></a><span class="lineno"> 4662</span>&#160; </div>
<div class="line"><a name="l04663"></a><span class="lineno"> 4663</span>&#160;    <span class="keywordflow">if</span> (!isDynamic)</div>
<div class="line"><a name="l04664"></a><span class="lineno"> 4664</span>&#160;    {</div>
<div class="line"><a name="l04665"></a><span class="lineno"> 4665</span>&#160;        <span class="keywordflow">return</span> (<a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, 0, model, data) &amp;&amp;</div>
<div class="line"><a name="l04666"></a><span class="lineno"> 4666</span>&#160;                <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 1, *layer, 1, model, data));</div>
<div class="line"><a name="l04667"></a><span class="lineno"> 4667</span>&#160;    }</div>
<div class="line"><a name="l04668"></a><span class="lineno"> 4668</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l04669"></a><span class="lineno"> 4669</span>&#160;    {</div>
<div class="line"><a name="l04670"></a><span class="lineno"> 4670</span>&#160;        <span class="keywordflow">return</span> (<a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, 0, model, data) &amp;&amp;</div>
<div class="line"><a name="l04671"></a><span class="lineno"> 4671</span>&#160;                <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(</div>
<div class="line"><a name="l04672"></a><span class="lineno"> 4672</span>&#160;                    operation, 1, *layer, 1, model, data, <span class="keyword">nullptr</span>, validateFunc, ActivationFn::kActivationNone, <span class="keyword">true</span>));</div>
<div class="line"><a name="l04673"></a><span class="lineno"> 4673</span>&#160;    }</div>
<div class="line"><a name="l04674"></a><span class="lineno"> 4674</span>&#160; </div>
<div class="line"><a name="l04675"></a><span class="lineno"> 4675</span>&#160;}</div>
<div class="line"><a name="l04676"></a><span class="lineno"> 4676</span>&#160; </div>
<div class="line"><a name="l04677"></a><span class="lineno"> 4677</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertRank(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l04678"></a><span class="lineno"> 4678</span>&#160;{</div>
<div class="line"><a name="l04679"></a><span class="lineno"> 4679</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertRank()&quot;</span>;</div>
<div class="line"><a name="l04680"></a><span class="lineno"> 4680</span>&#160; </div>
<div class="line"><a name="l04681"></a><span class="lineno"> 4681</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* inputOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l04682"></a><span class="lineno"> 4682</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* outputOperand = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l04683"></a><span class="lineno"> 4683</span>&#160; </div>
<div class="line"><a name="l04684"></a><span class="lineno"> 4684</span>&#160;    <span class="keywordflow">if</span> (inputOperand == <span class="keyword">nullptr</span> || outputOperand == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l04685"></a><span class="lineno"> 4685</span>&#160;    {</div>
<div class="line"><a name="l04686"></a><span class="lineno"> 4686</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l04687"></a><span class="lineno"> 4687</span>&#160;    }</div>
<div class="line"><a name="l04688"></a><span class="lineno"> 4688</span>&#160; </div>
<div class="line"><a name="l04689"></a><span class="lineno"> 4689</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">Shape</a> inputOperandShape = GetOperandShape(*inputOperand);</div>
<div class="line"><a name="l04690"></a><span class="lineno"> 4690</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">Shape</a> outputOperandShape = GetOperandShape(*outputOperand);</div>
<div class="line"><a name="l04691"></a><span class="lineno"> 4691</span>&#160; </div>
<div class="line"><a name="l04692"></a><span class="lineno"> 4692</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l04693"></a><span class="lineno"> 4693</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l04694"></a><span class="lineno"> 4694</span>&#160;    {</div>
<div class="line"><a name="l04695"></a><span class="lineno"> 4695</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 0&quot;</span>, __func__);</div>
<div class="line"><a name="l04696"></a><span class="lineno"> 4696</span>&#160;    }</div>
<div class="line"><a name="l04697"></a><span class="lineno"> 4697</span>&#160; </div>
<div class="line"><a name="l04698"></a><span class="lineno"> 4698</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*outputOperand);</div>
<div class="line"><a name="l04699"></a><span class="lineno"> 4699</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outInfo))</div>
<div class="line"><a name="l04700"></a><span class="lineno"> 4700</span>&#160;    {</div>
<div class="line"><a name="l04701"></a><span class="lineno"> 4701</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Dynamic output tensors are not supported&quot;</span>, __func__);</div>
<div class="line"><a name="l04702"></a><span class="lineno"> 4702</span>&#160;    }</div>
<div class="line"><a name="l04703"></a><span class="lineno"> 4703</span>&#160; </div>
<div class="line"><a name="l04704"></a><span class="lineno"> 4704</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l04705"></a><span class="lineno"> 4705</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l04706"></a><span class="lineno"> 4706</span>&#160;    <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l04707"></a><span class="lineno"> 4707</span>&#160;                               IsRankSupported,</div>
<div class="line"><a name="l04708"></a><span class="lineno"> 4708</span>&#160;                               data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l04709"></a><span class="lineno"> 4709</span>&#160;                               isSupported,</div>
<div class="line"><a name="l04710"></a><span class="lineno"> 4710</span>&#160;                               setBackend,</div>
<div class="line"><a name="l04711"></a><span class="lineno"> 4711</span>&#160;                               input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l04712"></a><span class="lineno"> 4712</span>&#160;                               outInfo);</div>
<div class="line"><a name="l04713"></a><span class="lineno"> 4713</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l04714"></a><span class="lineno"> 4714</span>&#160;    {</div>
<div class="line"><a name="l04715"></a><span class="lineno"> 4715</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l04716"></a><span class="lineno"> 4716</span>&#160;    }</div>
<div class="line"><a name="l04717"></a><span class="lineno"> 4717</span>&#160; </div>
<div class="line"><a name="l04718"></a><span class="lineno"> 4718</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddRankLayer();</div>
<div class="line"><a name="l04719"></a><span class="lineno"> 4719</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l04720"></a><span class="lineno"> 4720</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l04721"></a><span class="lineno"> 4721</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l04722"></a><span class="lineno"> 4722</span>&#160; </div>
<div class="line"><a name="l04723"></a><span class="lineno"> 4723</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, &amp;outInfo);</div>
<div class="line"><a name="l04724"></a><span class="lineno"> 4724</span>&#160;}</div>
<div class="line"><a name="l04725"></a><span class="lineno"> 4725</span>&#160; </div>
<div class="line"><a name="l04726"></a><span class="lineno"> 4726</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertReLu(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l04727"></a><span class="lineno"> 4727</span>&#160;{</div>
<div class="line"><a name="l04728"></a><span class="lineno"> 4728</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertReLu()&quot;</span>;</div>
<div class="line"><a name="l04729"></a><span class="lineno"> 4729</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a> desc;</div>
<div class="line"><a name="l04730"></a><span class="lineno"> 4730</span>&#160;    desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559">armnn::ActivationFunction::ReLu</a>;</div>
<div class="line"><a name="l04731"></a><span class="lineno"> 4731</span>&#160; </div>
<div class="line"><a name="l04732"></a><span class="lineno"> 4732</span>&#160; </div>
<div class="line"><a name="l04733"></a><span class="lineno"> 4733</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l04734"></a><span class="lineno"> 4734</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l04735"></a><span class="lineno"> 4735</span>&#160;    {</div>
<div class="line"><a name="l04736"></a><span class="lineno"> 4736</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Input 0 is invalid&quot;</span>, <span class="stringliteral">&quot;operationName&quot;</span>);</div>
<div class="line"><a name="l04737"></a><span class="lineno"> 4737</span>&#160;    }</div>
<div class="line"><a name="l04738"></a><span class="lineno"> 4738</span>&#160; </div>
<div class="line"><a name="l04739"></a><span class="lineno"> 4739</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* outputOperand = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l04740"></a><span class="lineno"> 4740</span>&#160;    <span class="keywordflow">if</span> (!outputOperand)</div>
<div class="line"><a name="l04741"></a><span class="lineno"> 4741</span>&#160;    {</div>
<div class="line"><a name="l04742"></a><span class="lineno"> 4742</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l04743"></a><span class="lineno"> 4743</span>&#160;    }</div>
<div class="line"><a name="l04744"></a><span class="lineno"> 4744</span>&#160; </div>
<div class="line"><a name="l04745"></a><span class="lineno"> 4745</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*outputOperand);</div>
<div class="line"><a name="l04746"></a><span class="lineno"> 4746</span>&#160; </div>
<div class="line"><a name="l04747"></a><span class="lineno"> 4747</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l04748"></a><span class="lineno"> 4748</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l04749"></a><span class="lineno"> 4749</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l04750"></a><span class="lineno"> 4750</span>&#160;    {</div>
<div class="line"><a name="l04751"></a><span class="lineno"> 4751</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l04752"></a><span class="lineno"> 4752</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a6e7dc8639c4b2f0a93031afff5182735">IsActivationSupported</a>,</div>
<div class="line"><a name="l04753"></a><span class="lineno"> 4753</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l04754"></a><span class="lineno"> 4754</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l04755"></a><span class="lineno"> 4755</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l04756"></a><span class="lineno"> 4756</span>&#160;                                   input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l04757"></a><span class="lineno"> 4757</span>&#160;                                   outInfo,</div>
<div class="line"><a name="l04758"></a><span class="lineno"> 4758</span>&#160;                                   desc);</div>
<div class="line"><a name="l04759"></a><span class="lineno"> 4759</span>&#160;    };</div>
<div class="line"><a name="l04760"></a><span class="lineno"> 4760</span>&#160; </div>
<div class="line"><a name="l04761"></a><span class="lineno"> 4761</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outInfo))</div>
<div class="line"><a name="l04762"></a><span class="lineno"> 4762</span>&#160;    {</div>
<div class="line"><a name="l04763"></a><span class="lineno"> 4763</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l04764"></a><span class="lineno"> 4764</span>&#160;    }</div>
<div class="line"><a name="l04765"></a><span class="lineno"> 4765</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l04766"></a><span class="lineno"> 4766</span>&#160;    {</div>
<div class="line"><a name="l04767"></a><span class="lineno"> 4767</span>&#160;        validateFunc(outInfo, isSupported);</div>
<div class="line"><a name="l04768"></a><span class="lineno"> 4768</span>&#160;    }</div>
<div class="line"><a name="l04769"></a><span class="lineno"> 4769</span>&#160; </div>
<div class="line"><a name="l04770"></a><span class="lineno"> 4770</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l04771"></a><span class="lineno"> 4771</span>&#160;    {</div>
<div class="line"><a name="l04772"></a><span class="lineno"> 4772</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l04773"></a><span class="lineno"> 4773</span>&#160;    }</div>
<div class="line"><a name="l04774"></a><span class="lineno"> 4774</span>&#160; </div>
<div class="line"><a name="l04775"></a><span class="lineno"> 4775</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddActivationLayer(desc);</div>
<div class="line"><a name="l04776"></a><span class="lineno"> 4776</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l04777"></a><span class="lineno"> 4777</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l04778"></a><span class="lineno"> 4778</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l04779"></a><span class="lineno"> 4779</span>&#160; </div>
<div class="line"><a name="l04780"></a><span class="lineno"> 4780</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l04781"></a><span class="lineno"> 4781</span>&#160;}</div>
<div class="line"><a name="l04782"></a><span class="lineno"> 4782</span>&#160; </div>
<div class="line"><a name="l04783"></a><span class="lineno"> 4783</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertReLu1(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l04784"></a><span class="lineno"> 4784</span>&#160;{</div>
<div class="line"><a name="l04785"></a><span class="lineno"> 4785</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertReLu1()&quot;</span>;</div>
<div class="line"><a name="l04786"></a><span class="lineno"> 4786</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a> desc;</div>
<div class="line"><a name="l04787"></a><span class="lineno"> 4787</span>&#160;    desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a>;</div>
<div class="line"><a name="l04788"></a><span class="lineno"> 4788</span>&#160;    desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a>        = 1.0f;</div>
<div class="line"><a name="l04789"></a><span class="lineno"> 4789</span>&#160;    desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">m_B</a>        = -1.0f;</div>
<div class="line"><a name="l04790"></a><span class="lineno"> 4790</span>&#160; </div>
<div class="line"><a name="l04791"></a><span class="lineno"> 4791</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a28243ca97e12ccb50e01f03d313ecc86">ConvertToActivation</a>(operation, __func__, desc, model, data);</div>
<div class="line"><a name="l04792"></a><span class="lineno"> 4792</span>&#160;}</div>
<div class="line"><a name="l04793"></a><span class="lineno"> 4793</span>&#160; </div>
<div class="line"><a name="l04794"></a><span class="lineno"> 4794</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertReLu6(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l04795"></a><span class="lineno"> 4795</span>&#160;{</div>
<div class="line"><a name="l04796"></a><span class="lineno"> 4796</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertReLu6()&quot;</span>;</div>
<div class="line"><a name="l04797"></a><span class="lineno"> 4797</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a> desc;</div>
<div class="line"><a name="l04798"></a><span class="lineno"> 4798</span>&#160;    desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a>;</div>
<div class="line"><a name="l04799"></a><span class="lineno"> 4799</span>&#160;    desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a>        = 6.0f;</div>
<div class="line"><a name="l04800"></a><span class="lineno"> 4800</span>&#160; </div>
<div class="line"><a name="l04801"></a><span class="lineno"> 4801</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a28243ca97e12ccb50e01f03d313ecc86">ConvertToActivation</a>(operation, __func__, desc, model, data);</div>
<div class="line"><a name="l04802"></a><span class="lineno"> 4802</span>&#160;}</div>
<div class="line"><a name="l04803"></a><span class="lineno"> 4803</span>&#160; </div>
<div class="line"><a name="l04804"></a><span class="lineno"> 4804</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertReshape(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l04805"></a><span class="lineno"> 4805</span>&#160;{</div>
<div class="line"><a name="l04806"></a><span class="lineno"> 4806</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertReshape()&quot;</span>;</div>
<div class="line"><a name="l04807"></a><span class="lineno"> 4807</span>&#160; </div>
<div class="line"><a name="l04808"></a><span class="lineno"> 4808</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* inputOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l04809"></a><span class="lineno"> 4809</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* requestedShapeOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 1, model);</div>
<div class="line"><a name="l04810"></a><span class="lineno"> 4810</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* outputOperand = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l04811"></a><span class="lineno"> 4811</span>&#160; </div>
<div class="line"><a name="l04812"></a><span class="lineno"> 4812</span>&#160;    <span class="keywordflow">if</span> (inputOperand == <span class="keyword">nullptr</span></div>
<div class="line"><a name="l04813"></a><span class="lineno"> 4813</span>&#160;        || requestedShapeOperand == <span class="keyword">nullptr</span></div>
<div class="line"><a name="l04814"></a><span class="lineno"> 4814</span>&#160;        || outputOperand == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l04815"></a><span class="lineno"> 4815</span>&#160;    {</div>
<div class="line"><a name="l04816"></a><span class="lineno"> 4816</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l04817"></a><span class="lineno"> 4817</span>&#160;    }</div>
<div class="line"><a name="l04818"></a><span class="lineno"> 4818</span>&#160; </div>
<div class="line"><a name="l04819"></a><span class="lineno"> 4819</span>&#160;    <span class="keywordflow">if</span> (requestedShapeOperand-&gt;dimensions.size() != 1)</div>
<div class="line"><a name="l04820"></a><span class="lineno"> 4820</span>&#160;    {</div>
<div class="line"><a name="l04821"></a><span class="lineno"> 4821</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Input 1 expected to be one-dimensional (found %i dimensions)&quot;</span>,</div>
<div class="line"><a name="l04822"></a><span class="lineno"> 4822</span>&#160;                    __func__, requestedShapeOperand-&gt;dimensions.size());</div>
<div class="line"><a name="l04823"></a><span class="lineno"> 4823</span>&#160;    }</div>
<div class="line"><a name="l04824"></a><span class="lineno"> 4824</span>&#160; </div>
<div class="line"><a name="l04825"></a><span class="lineno"> 4825</span>&#160;    std::vector&lt;int32_t&gt; targetDimensions;</div>
<div class="line"><a name="l04826"></a><span class="lineno"> 4826</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#ac8643aaee3eafc54336c5462b51bd53f">GetTensorInt32Values</a>(*requestedShapeOperand, targetDimensions, model, data))</div>
<div class="line"><a name="l04827"></a><span class="lineno"> 4827</span>&#160;    {</div>
<div class="line"><a name="l04828"></a><span class="lineno"> 4828</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read values of input 1&quot;</span>, __func__);</div>
<div class="line"><a name="l04829"></a><span class="lineno"> 4829</span>&#160;    }</div>
<div class="line"><a name="l04830"></a><span class="lineno"> 4830</span>&#160; </div>
<div class="line"><a name="l04831"></a><span class="lineno"> 4831</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">Shape</a> inputOperandShape = GetOperandShape(*inputOperand);</div>
<div class="line"><a name="l04832"></a><span class="lineno"> 4832</span>&#160; </div>
<div class="line"><a name="l04833"></a><span class="lineno"> 4833</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">Shape</a> requestedShape;</div>
<div class="line"><a name="l04834"></a><span class="lineno"> 4834</span>&#160;    <span class="comment">// targetDimensions may contain special values (e.g. -1). reshapePrepare() is an AndroidNN provided utility</span></div>
<div class="line"><a name="l04835"></a><span class="lineno"> 4835</span>&#160;    <span class="comment">// function that resolves these values into a fully specified tensor shape.</span></div>
<div class="line"><a name="l04836"></a><span class="lineno"> 4836</span>&#160;    <span class="keywordflow">if</span> (!reshapePrepare(inputOperandShape, targetDimensions.data(), targetDimensions.size(), &amp;requestedShape))</div>
<div class="line"><a name="l04837"></a><span class="lineno"> 4837</span>&#160;    {</div>
<div class="line"><a name="l04838"></a><span class="lineno"> 4838</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Failed to resolve the requested shape&quot;</span>, __func__);</div>
<div class="line"><a name="l04839"></a><span class="lineno"> 4839</span>&#160;    }</div>
<div class="line"><a name="l04840"></a><span class="lineno"> 4840</span>&#160; </div>
<div class="line"><a name="l04841"></a><span class="lineno"> 4841</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l04842"></a><span class="lineno"> 4842</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l04843"></a><span class="lineno"> 4843</span>&#160;    {</div>
<div class="line"><a name="l04844"></a><span class="lineno"> 4844</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 0&quot;</span>, __func__);</div>
<div class="line"><a name="l04845"></a><span class="lineno"> 4845</span>&#160;    }</div>
<div class="line"><a name="l04846"></a><span class="lineno"> 4846</span>&#160; </div>
<div class="line"><a name="l04847"></a><span class="lineno"> 4847</span>&#160;    <a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a> reshapeDescriptor;</div>
<div class="line"><a name="l04848"></a><span class="lineno"> 4848</span>&#160;    reshapeDescriptor.<a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml#a1178f4dafdda81f59c15145ec327f7d9">m_TargetShape</a> = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>(requestedShape.dimensions.size(),</div>
<div class="line"><a name="l04849"></a><span class="lineno"> 4849</span>&#160;                                                         requestedShape.dimensions.data());</div>
<div class="line"><a name="l04850"></a><span class="lineno"> 4850</span>&#160; </div>
<div class="line"><a name="l04851"></a><span class="lineno"> 4851</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*outputOperand);</div>
<div class="line"><a name="l04852"></a><span class="lineno"> 4852</span>&#160; </div>
<div class="line"><a name="l04853"></a><span class="lineno"> 4853</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l04854"></a><span class="lineno"> 4854</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l04855"></a><span class="lineno"> 4855</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l04856"></a><span class="lineno"> 4856</span>&#160;    {</div>
<div class="line"><a name="l04857"></a><span class="lineno"> 4857</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l04858"></a><span class="lineno"> 4858</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#af5014cbc003abcf201d4372b0012734c">IsReshapeSupported</a>,</div>
<div class="line"><a name="l04859"></a><span class="lineno"> 4859</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l04860"></a><span class="lineno"> 4860</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l04861"></a><span class="lineno"> 4861</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l04862"></a><span class="lineno"> 4862</span>&#160;                                   input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l04863"></a><span class="lineno"> 4863</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l04864"></a><span class="lineno"> 4864</span>&#160;                                   reshapeDescriptor);</div>
<div class="line"><a name="l04865"></a><span class="lineno"> 4865</span>&#160;    };</div>
<div class="line"><a name="l04866"></a><span class="lineno"> 4866</span>&#160; </div>
<div class="line"><a name="l04867"></a><span class="lineno"> 4867</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l04868"></a><span class="lineno"> 4868</span>&#160;    {</div>
<div class="line"><a name="l04869"></a><span class="lineno"> 4869</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l04870"></a><span class="lineno"> 4870</span>&#160;    }</div>
<div class="line"><a name="l04871"></a><span class="lineno"> 4871</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l04872"></a><span class="lineno"> 4872</span>&#160;    {</div>
<div class="line"><a name="l04873"></a><span class="lineno"> 4873</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l04874"></a><span class="lineno"> 4874</span>&#160;    }</div>
<div class="line"><a name="l04875"></a><span class="lineno"> 4875</span>&#160; </div>
<div class="line"><a name="l04876"></a><span class="lineno"> 4876</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l04877"></a><span class="lineno"> 4877</span>&#160;    {</div>
<div class="line"><a name="l04878"></a><span class="lineno"> 4878</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l04879"></a><span class="lineno"> 4879</span>&#160;    }</div>
<div class="line"><a name="l04880"></a><span class="lineno"> 4880</span>&#160; </div>
<div class="line"><a name="l04881"></a><span class="lineno"> 4881</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddReshapeLayer(reshapeDescriptor);</div>
<div class="line"><a name="l04882"></a><span class="lineno"> 4882</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l04883"></a><span class="lineno"> 4883</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l04884"></a><span class="lineno"> 4884</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l04885"></a><span class="lineno"> 4885</span>&#160; </div>
<div class="line"><a name="l04886"></a><span class="lineno"> 4886</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l04887"></a><span class="lineno"> 4887</span>&#160;}</div>
<div class="line"><a name="l04888"></a><span class="lineno"> 4888</span>&#160; </div>
<div class="line"><a name="l04889"></a><span class="lineno"> 4889</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertResize(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation,</div>
<div class="line"><a name="l04890"></a><span class="lineno"> 4890</span>&#160;                              <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div>
<div class="line"><a name="l04891"></a><span class="lineno"> 4891</span>&#160;                              <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data,</div>
<div class="line"><a name="l04892"></a><span class="lineno"> 4892</span>&#160;                              <a class="code" href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4">ResizeMethod</a> resizeMethod)</div>
<div class="line"><a name="l04893"></a><span class="lineno"> 4893</span>&#160;{</div>
<div class="line"><a name="l04894"></a><span class="lineno"> 4894</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertResize()&quot;</span>;</div>
<div class="line"><a name="l04895"></a><span class="lineno"> 4895</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;resizeMethod = &quot;</span> &lt;&lt; <a class="code" href="namespacearmnn.xhtml#aded981a42027bd3302b9c0f09d988659">GetResizeMethodAsCString</a>(resizeMethod);</div>
<div class="line"><a name="l04896"></a><span class="lineno"> 4896</span>&#160; </div>
<div class="line"><a name="l04897"></a><span class="lineno"> 4897</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l04898"></a><span class="lineno"> 4898</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l04899"></a><span class="lineno"> 4899</span>&#160;    {</div>
<div class="line"><a name="l04900"></a><span class="lineno"> 4900</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read input 0&quot;</span>, __func__);</div>
<div class="line"><a name="l04901"></a><span class="lineno"> 4901</span>&#160;    }</div>
<div class="line"><a name="l04902"></a><span class="lineno"> 4902</span>&#160; </div>
<div class="line"><a name="l04903"></a><span class="lineno"> 4903</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l04904"></a><span class="lineno"> 4904</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l04905"></a><span class="lineno"> 4905</span>&#160;    {</div>
<div class="line"><a name="l04906"></a><span class="lineno"> 4906</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l04907"></a><span class="lineno"> 4907</span>&#160;    }</div>
<div class="line"><a name="l04908"></a><span class="lineno"> 4908</span>&#160; </div>
<div class="line"><a name="l04909"></a><span class="lineno"> 4909</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo  = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l04910"></a><span class="lineno"> 4910</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l04911"></a><span class="lineno"> 4911</span>&#160; </div>
<div class="line"><a name="l04912"></a><span class="lineno"> 4912</span>&#160;    <a class="code" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> descriptor;</div>
<div class="line"><a name="l04913"></a><span class="lineno"> 4913</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a869254cb56968986a78a79e1d6d4a86b">m_Method</a>     = resizeMethod;</div>
<div class="line"><a name="l04914"></a><span class="lineno"> 4914</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(operation, 3, model, data);</div>
<div class="line"><a name="l04915"></a><span class="lineno"> 4915</span>&#160; </div>
<div class="line"><a name="l04916"></a><span class="lineno"> 4916</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a53bfb6eb38a90244ba166b641a6965d9">OperandType</a> operandType1;</div>
<div class="line"><a name="l04917"></a><span class="lineno"> 4917</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a53bfb6eb38a90244ba166b641a6965d9">OperandType</a> operandType2;</div>
<div class="line"><a name="l04918"></a><span class="lineno"> 4918</span>&#160; </div>
<div class="line"><a name="l04919"></a><span class="lineno"> 4919</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#adfc2c5b834fdb89e5458ddb1d9aa7830">GetOperandType</a>(operation, 1, model, operandType1) ||</div>
<div class="line"><a name="l04920"></a><span class="lineno"> 4920</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#adfc2c5b834fdb89e5458ddb1d9aa7830">GetOperandType</a>(operation, 2, model, operandType2))</div>
<div class="line"><a name="l04921"></a><span class="lineno"> 4921</span>&#160;    {</div>
<div class="line"><a name="l04922"></a><span class="lineno"> 4922</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l04923"></a><span class="lineno"> 4923</span>&#160;    }</div>
<div class="line"><a name="l04924"></a><span class="lineno"> 4924</span>&#160; </div>
<div class="line"><a name="l04925"></a><span class="lineno"> 4925</span>&#160;    <span class="keywordflow">if</span> (operandType1 != operandType2)</div>
<div class="line"><a name="l04926"></a><span class="lineno"> 4926</span>&#160;    {</div>
<div class="line"><a name="l04927"></a><span class="lineno"> 4927</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs. Type of input 1 and 2 should be the same&quot;</span>, __func__);</div>
<div class="line"><a name="l04928"></a><span class="lineno"> 4928</span>&#160;    }</div>
<div class="line"><a name="l04929"></a><span class="lineno"> 4929</span>&#160; </div>
<div class="line"><a name="l04930"></a><span class="lineno"> 4930</span>&#160;    <span class="keywordflow">if</span> (operandType1 == OperandType::INT32)</div>
<div class="line"><a name="l04931"></a><span class="lineno"> 4931</span>&#160;    {</div>
<div class="line"><a name="l04932"></a><span class="lineno"> 4932</span>&#160;        <span class="comment">// Case 1: resizing by shape</span></div>
<div class="line"><a name="l04933"></a><span class="lineno"> 4933</span>&#160;        int32_t targetWidth  = 0;</div>
<div class="line"><a name="l04934"></a><span class="lineno"> 4934</span>&#160;        int32_t targetHeight = 0;</div>
<div class="line"><a name="l04935"></a><span class="lineno"> 4935</span>&#160; </div>
<div class="line"><a name="l04936"></a><span class="lineno"> 4936</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#aa43f9c81f830559c15e5af86f8e11482">GetInputInt32</a>(operation, 1, targetWidth, model, data) ||</div>
<div class="line"><a name="l04937"></a><span class="lineno"> 4937</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#aa43f9c81f830559c15e5af86f8e11482">GetInputInt32</a>(operation, 2, targetHeight, model, data))</div>
<div class="line"><a name="l04938"></a><span class="lineno"> 4938</span>&#160;        {</div>
<div class="line"><a name="l04939"></a><span class="lineno"> 4939</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs for resizing by shape&quot;</span>, __func__);</div>
<div class="line"><a name="l04940"></a><span class="lineno"> 4940</span>&#160;        }</div>
<div class="line"><a name="l04941"></a><span class="lineno"> 4941</span>&#160; </div>
<div class="line"><a name="l04942"></a><span class="lineno"> 4942</span>&#160;        <span class="keywordflow">if</span> (targetWidth &lt; 0 || targetHeight &lt; 0)</div>
<div class="line"><a name="l04943"></a><span class="lineno"> 4943</span>&#160;        {</div>
<div class="line"><a name="l04944"></a><span class="lineno"> 4944</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs for resizing by shape. &quot;</span></div>
<div class="line"><a name="l04945"></a><span class="lineno"> 4945</span>&#160;                        <span class="stringliteral">&quot;Target width/height cannot be &lt; 0&quot;</span>, __func__);</div>
<div class="line"><a name="l04946"></a><span class="lineno"> 4946</span>&#160;        }</div>
<div class="line"><a name="l04947"></a><span class="lineno"> 4947</span>&#160; </div>
<div class="line"><a name="l04948"></a><span class="lineno"> 4948</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">m_TargetWidth</a> = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(targetWidth);</div>
<div class="line"><a name="l04949"></a><span class="lineno"> 4949</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">m_TargetHeight</a> = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(targetHeight);</div>
<div class="line"><a name="l04950"></a><span class="lineno"> 4950</span>&#160;    }</div>
<div class="line"><a name="l04951"></a><span class="lineno"> 4951</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (operandType1 == OperandType::FLOAT32)</div>
<div class="line"><a name="l04952"></a><span class="lineno"> 4952</span>&#160;    {</div>
<div class="line"><a name="l04953"></a><span class="lineno"> 4953</span>&#160;        <span class="comment">// Case 2: resizing by scale</span></div>
<div class="line"><a name="l04954"></a><span class="lineno"> 4954</span>&#160;        <span class="keywordtype">float</span> widthScale  = 1.0f;</div>
<div class="line"><a name="l04955"></a><span class="lineno"> 4955</span>&#160;        <span class="keywordtype">float</span> heightScale = 1.0f;</div>
<div class="line"><a name="l04956"></a><span class="lineno"> 4956</span>&#160; </div>
<div class="line"><a name="l04957"></a><span class="lineno"> 4957</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#a560530462631e354561c1763f695351c">GetInputFloat32</a>(operation, 1, widthScale, model, data) ||</div>
<div class="line"><a name="l04958"></a><span class="lineno"> 4958</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#a560530462631e354561c1763f695351c">GetInputFloat32</a>(operation, 2, heightScale, model, data))</div>
<div class="line"><a name="l04959"></a><span class="lineno"> 4959</span>&#160;        {</div>
<div class="line"><a name="l04960"></a><span class="lineno"> 4960</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs for resizing by scale&quot;</span>, __func__);</div>
<div class="line"><a name="l04961"></a><span class="lineno"> 4961</span>&#160;        }</div>
<div class="line"><a name="l04962"></a><span class="lineno"> 4962</span>&#160; </div>
<div class="line"><a name="l04963"></a><span class="lineno"> 4963</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inputShape = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div>
<div class="line"><a name="l04964"></a><span class="lineno"> 4964</span>&#160;        <a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml">armnnUtils::DataLayoutIndexed</a> dataLayoutIndexed(descriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>);</div>
<div class="line"><a name="l04965"></a><span class="lineno"> 4965</span>&#160; </div>
<div class="line"><a name="l04966"></a><span class="lineno"> 4966</span>&#160;        <span class="keywordtype">float</span> width  = inputShape[dataLayoutIndexed.GetWidthIndex()];</div>
<div class="line"><a name="l04967"></a><span class="lineno"> 4967</span>&#160;        <span class="keywordtype">float</span> height = inputShape[dataLayoutIndexed.GetHeightIndex()];</div>
<div class="line"><a name="l04968"></a><span class="lineno"> 4968</span>&#160; </div>
<div class="line"><a name="l04969"></a><span class="lineno"> 4969</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">m_TargetWidth</a>  = std::floor(width  * widthScale);</div>
<div class="line"><a name="l04970"></a><span class="lineno"> 4970</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">m_TargetHeight</a> = std::floor(height * heightScale);</div>
<div class="line"><a name="l04971"></a><span class="lineno"> 4971</span>&#160;    }</div>
<div class="line"><a name="l04972"></a><span class="lineno"> 4972</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (operandType1 == OperandType::FLOAT16)</div>
<div class="line"><a name="l04973"></a><span class="lineno"> 4973</span>&#160;    {</div>
<div class="line"><a name="l04974"></a><span class="lineno"> 4974</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">Half</a> widthScale;</div>
<div class="line"><a name="l04975"></a><span class="lineno"> 4975</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">Half</a> heightScale;</div>
<div class="line"><a name="l04976"></a><span class="lineno"> 4976</span>&#160; </div>
<div class="line"><a name="l04977"></a><span class="lineno"> 4977</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::FLOAT16, widthScale, model, data) ||</div>
<div class="line"><a name="l04978"></a><span class="lineno"> 4978</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 2, OperandType::FLOAT16, heightScale, model, data))</div>
<div class="line"><a name="l04979"></a><span class="lineno"> 4979</span>&#160;        {</div>
<div class="line"><a name="l04980"></a><span class="lineno"> 4980</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs for resizing by scale&quot;</span>, __func__);</div>
<div class="line"><a name="l04981"></a><span class="lineno"> 4981</span>&#160;        }</div>
<div class="line"><a name="l04982"></a><span class="lineno"> 4982</span>&#160; </div>
<div class="line"><a name="l04983"></a><span class="lineno"> 4983</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inputShape = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div>
<div class="line"><a name="l04984"></a><span class="lineno"> 4984</span>&#160;        <a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml">armnnUtils::DataLayoutIndexed</a> dataLayoutIndexed(descriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>);</div>
<div class="line"><a name="l04985"></a><span class="lineno"> 4985</span>&#160; </div>
<div class="line"><a name="l04986"></a><span class="lineno"> 4986</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">Half</a> width  = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">Half</a><span class="keyword">&gt;</span>(inputShape[dataLayoutIndexed.GetWidthIndex()]);</div>
<div class="line"><a name="l04987"></a><span class="lineno"> 4987</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">Half</a> height = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">Half</a><span class="keyword">&gt;</span>(inputShape[dataLayoutIndexed.GetHeightIndex()]);</div>
<div class="line"><a name="l04988"></a><span class="lineno"> 4988</span>&#160; </div>
<div class="line"><a name="l04989"></a><span class="lineno"> 4989</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">m_TargetWidth</a>  = std::floor(width  * widthScale);</div>
<div class="line"><a name="l04990"></a><span class="lineno"> 4990</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">m_TargetHeight</a> = std::floor(height * heightScale);</div>
<div class="line"><a name="l04991"></a><span class="lineno"> 4991</span>&#160;    }</div>
<div class="line"><a name="l04992"></a><span class="lineno"> 4992</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l04993"></a><span class="lineno"> 4993</span>&#160;    {</div>
<div class="line"><a name="l04994"></a><span class="lineno"> 4994</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operand has invalid data type for resizing by scale&quot;</span>, __func__);</div>
<div class="line"><a name="l04995"></a><span class="lineno"> 4995</span>&#160;    }</div>
<div class="line"><a name="l04996"></a><span class="lineno"> 4996</span>&#160; </div>
<div class="line"><a name="l04997"></a><span class="lineno"> 4997</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#ae1a4b3b6c60552509b89747cebb900a2">m_AlignCorners</a>     = <a class="code" href="namespacearmnn__driver.xhtml#ae28f9841f6cb1775849b7921b54da32e">GetOptionalBool</a>(operation, 4, model, data);</div>
<div class="line"><a name="l04998"></a><span class="lineno"> 4998</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a4022d5107338aaf5eb7abebf78a1360b">m_HalfPixelCenters</a> = <a class="code" href="namespacearmnn__driver.xhtml#ae28f9841f6cb1775849b7921b54da32e">GetOptionalBool</a>(operation, 5, model, data);</div>
<div class="line"><a name="l04999"></a><span class="lineno"> 4999</span>&#160; </div>
<div class="line"><a name="l05000"></a><span class="lineno"> 5000</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l05001"></a><span class="lineno"> 5001</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l05002"></a><span class="lineno"> 5002</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l05003"></a><span class="lineno"> 5003</span>&#160;    {</div>
<div class="line"><a name="l05004"></a><span class="lineno"> 5004</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l05005"></a><span class="lineno"> 5005</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a0c70182e7d26983945ae75229d607cce">IsResizeSupported</a>,</div>
<div class="line"><a name="l05006"></a><span class="lineno"> 5006</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l05007"></a><span class="lineno"> 5007</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l05008"></a><span class="lineno"> 5008</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l05009"></a><span class="lineno"> 5009</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l05010"></a><span class="lineno"> 5010</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l05011"></a><span class="lineno"> 5011</span>&#160;                                   descriptor);</div>
<div class="line"><a name="l05012"></a><span class="lineno"> 5012</span>&#160;        };</div>
<div class="line"><a name="l05013"></a><span class="lineno"> 5013</span>&#160; </div>
<div class="line"><a name="l05014"></a><span class="lineno"> 5014</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l05015"></a><span class="lineno"> 5015</span>&#160;    {</div>
<div class="line"><a name="l05016"></a><span class="lineno"> 5016</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l05017"></a><span class="lineno"> 5017</span>&#160;    }</div>
<div class="line"><a name="l05018"></a><span class="lineno"> 5018</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l05019"></a><span class="lineno"> 5019</span>&#160;    {</div>
<div class="line"><a name="l05020"></a><span class="lineno"> 5020</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l05021"></a><span class="lineno"> 5021</span>&#160;    }</div>
<div class="line"><a name="l05022"></a><span class="lineno"> 5022</span>&#160; </div>
<div class="line"><a name="l05023"></a><span class="lineno"> 5023</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l05024"></a><span class="lineno"> 5024</span>&#160;    {</div>
<div class="line"><a name="l05025"></a><span class="lineno"> 5025</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l05026"></a><span class="lineno"> 5026</span>&#160;    }</div>
<div class="line"><a name="l05027"></a><span class="lineno"> 5027</span>&#160; </div>
<div class="line"><a name="l05028"></a><span class="lineno"> 5028</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddResizeLayer(descriptor);</div>
<div class="line"><a name="l05029"></a><span class="lineno"> 5029</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l05030"></a><span class="lineno"> 5030</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l05031"></a><span class="lineno"> 5031</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l05032"></a><span class="lineno"> 5032</span>&#160; </div>
<div class="line"><a name="l05033"></a><span class="lineno"> 5033</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l05034"></a><span class="lineno"> 5034</span>&#160;}</div>
<div class="line"><a name="l05035"></a><span class="lineno"> 5035</span>&#160; </div>
<div class="line"><a name="l05036"></a><span class="lineno"> 5036</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertSpaceToBatchNd(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l05037"></a><span class="lineno"> 5037</span>&#160;{</div>
<div class="line"><a name="l05038"></a><span class="lineno"> 5038</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertSpaceToBatchNd()&quot;</span>;</div>
<div class="line"><a name="l05039"></a><span class="lineno"> 5039</span>&#160; </div>
<div class="line"><a name="l05040"></a><span class="lineno"> 5040</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l05041"></a><span class="lineno"> 5041</span>&#160;    <span class="keywordflow">if</span>(!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l05042"></a><span class="lineno"> 5042</span>&#160;    {</div>
<div class="line"><a name="l05043"></a><span class="lineno"> 5043</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l05044"></a><span class="lineno"> 5044</span>&#160;    }</div>
<div class="line"><a name="l05045"></a><span class="lineno"> 5045</span>&#160; </div>
<div class="line"><a name="l05046"></a><span class="lineno"> 5046</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;inputInfo = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l05047"></a><span class="lineno"> 5047</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rank = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l05048"></a><span class="lineno"> 5048</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> spatialDim = rank - 2;</div>
<div class="line"><a name="l05049"></a><span class="lineno"> 5049</span>&#160; </div>
<div class="line"><a name="l05050"></a><span class="lineno"> 5050</span>&#160;    <span class="keywordflow">if</span>(rank != 4)</div>
<div class="line"><a name="l05051"></a><span class="lineno"> 5051</span>&#160;    {</div>
<div class="line"><a name="l05052"></a><span class="lineno"> 5052</span>&#160;        Fail(<span class="stringliteral">&quot;%s: Only inputs with rank 4 are supported&quot;</span>, __func__);</div>
<div class="line"><a name="l05053"></a><span class="lineno"> 5053</span>&#160;    }</div>
<div class="line"><a name="l05054"></a><span class="lineno"> 5054</span>&#160; </div>
<div class="line"><a name="l05055"></a><span class="lineno"> 5055</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a> *output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l05056"></a><span class="lineno"> 5056</span>&#160;    <span class="keywordflow">if</span>(!output)</div>
<div class="line"><a name="l05057"></a><span class="lineno"> 5057</span>&#160;    {</div>
<div class="line"><a name="l05058"></a><span class="lineno"> 5058</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l05059"></a><span class="lineno"> 5059</span>&#160;    }</div>
<div class="line"><a name="l05060"></a><span class="lineno"> 5060</span>&#160; </div>
<div class="line"><a name="l05061"></a><span class="lineno"> 5061</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l05062"></a><span class="lineno"> 5062</span>&#160; </div>
<div class="line"><a name="l05063"></a><span class="lineno"> 5063</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a> *blockShapeOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 1, model);</div>
<div class="line"><a name="l05064"></a><span class="lineno"> 5064</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a> *paddingsOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 2, model);</div>
<div class="line"><a name="l05065"></a><span class="lineno"> 5065</span>&#160; </div>
<div class="line"><a name="l05066"></a><span class="lineno"> 5066</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> blockShapeOperandShape = GetTensorShapeForOperand(*blockShapeOperand);</div>
<div class="line"><a name="l05067"></a><span class="lineno"> 5067</span>&#160;    <span class="keywordflow">if</span>(blockShapeOperandShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() != 1 || blockShapeOperandShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>() != spatialDim)</div>
<div class="line"><a name="l05068"></a><span class="lineno"> 5068</span>&#160;    {</div>
<div class="line"><a name="l05069"></a><span class="lineno"> 5069</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid block shape operand: expected shape [%d]&quot;</span>, __func__, spatialDim);</div>
<div class="line"><a name="l05070"></a><span class="lineno"> 5070</span>&#160;    }</div>
<div class="line"><a name="l05071"></a><span class="lineno"> 5071</span>&#160; </div>
<div class="line"><a name="l05072"></a><span class="lineno"> 5072</span>&#160;    std::vector&lt;int32_t&gt; blockShape;</div>
<div class="line"><a name="l05073"></a><span class="lineno"> 5073</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#ac8643aaee3eafc54336c5462b51bd53f">GetTensorInt32Values</a>(*blockShapeOperand, blockShape, model, data))</div>
<div class="line"><a name="l05074"></a><span class="lineno"> 5074</span>&#160;    {</div>
<div class="line"><a name="l05075"></a><span class="lineno"> 5075</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has an invalid or unsupported block size operand&quot;</span>, __func__);</div>
<div class="line"><a name="l05076"></a><span class="lineno"> 5076</span>&#160;    }</div>
<div class="line"><a name="l05077"></a><span class="lineno"> 5077</span>&#160;    <span class="keywordflow">if</span>(std::any_of(blockShape.cbegin(), blockShape.cend(), [](int32_t i)</div>
<div class="line"><a name="l05078"></a><span class="lineno"> 5078</span>&#160;    { return i &lt; 1; }))</div>
<div class="line"><a name="l05079"></a><span class="lineno"> 5079</span>&#160;    {</div>
<div class="line"><a name="l05080"></a><span class="lineno"> 5080</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Block shape must be at least 1 in all dimensions.&quot;</span>, __func__);</div>
<div class="line"><a name="l05081"></a><span class="lineno"> 5081</span>&#160;    }</div>
<div class="line"><a name="l05082"></a><span class="lineno"> 5082</span>&#160; </div>
<div class="line"><a name="l05083"></a><span class="lineno"> 5083</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> paddingsOperandShape = GetTensorShapeForOperand(*paddingsOperand);</div>
<div class="line"><a name="l05084"></a><span class="lineno"> 5084</span>&#160;    <span class="keywordflow">if</span>(paddingsOperandShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() != 2 || paddingsOperandShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>() != 2 * spatialDim)</div>
<div class="line"><a name="l05085"></a><span class="lineno"> 5085</span>&#160;    {</div>
<div class="line"><a name="l05086"></a><span class="lineno"> 5086</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid paddings operand: expected shape [%d, 2]&quot;</span>, __func__, spatialDim);</div>
<div class="line"><a name="l05087"></a><span class="lineno"> 5087</span>&#160;    }</div>
<div class="line"><a name="l05088"></a><span class="lineno"> 5088</span>&#160; </div>
<div class="line"><a name="l05089"></a><span class="lineno"> 5089</span>&#160;    std::vector&lt;std::pair&lt;unsigned int, unsigned int&gt;&gt; paddingList;</div>
<div class="line"><a name="l05090"></a><span class="lineno"> 5090</span>&#160;    std::vector&lt;int32_t&gt; paddings;</div>
<div class="line"><a name="l05091"></a><span class="lineno"> 5091</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn__driver.xhtml#ac8643aaee3eafc54336c5462b51bd53f">GetTensorInt32Values</a>(*paddingsOperand, paddings, model, data))</div>
<div class="line"><a name="l05092"></a><span class="lineno"> 5092</span>&#160;    {</div>
<div class="line"><a name="l05093"></a><span class="lineno"> 5093</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has an invalid or unsupported paddings operand&quot;</span>, __func__);</div>
<div class="line"><a name="l05094"></a><span class="lineno"> 5094</span>&#160;    }</div>
<div class="line"><a name="l05095"></a><span class="lineno"> 5095</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; paddings.size() - 1; i += 2)</div>
<div class="line"><a name="l05096"></a><span class="lineno"> 5096</span>&#160;    {</div>
<div class="line"><a name="l05097"></a><span class="lineno"> 5097</span>&#160;        <span class="keywordtype">int</span> paddingBeforeInput = paddings[i];</div>
<div class="line"><a name="l05098"></a><span class="lineno"> 5098</span>&#160;        <span class="keywordtype">int</span> paddingAfterInput = paddings[i + 1];</div>
<div class="line"><a name="l05099"></a><span class="lineno"> 5099</span>&#160;        <span class="keywordflow">if</span>(paddingBeforeInput &lt; 0 || paddingAfterInput &lt; 0)</div>
<div class="line"><a name="l05100"></a><span class="lineno"> 5100</span>&#160;        {</div>
<div class="line"><a name="l05101"></a><span class="lineno"> 5101</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid paddings operand, invalid padding values.&quot;</span>, __func__);</div>
<div class="line"><a name="l05102"></a><span class="lineno"> 5102</span>&#160;        }</div>
<div class="line"><a name="l05103"></a><span class="lineno"> 5103</span>&#160; </div>
<div class="line"><a name="l05104"></a><span class="lineno"> 5104</span>&#160;        paddingList.emplace_back((<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>) paddingBeforeInput, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>) paddingAfterInput);</div>
<div class="line"><a name="l05105"></a><span class="lineno"> 5105</span>&#160;    }</div>
<div class="line"><a name="l05106"></a><span class="lineno"> 5106</span>&#160; </div>
<div class="line"><a name="l05107"></a><span class="lineno"> 5107</span>&#160;    <a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">armnn::SpaceToBatchNdDescriptor</a> descriptor;</div>
<div class="line"><a name="l05108"></a><span class="lineno"> 5108</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>;</div>
<div class="line"><a name="l05109"></a><span class="lineno"> 5109</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">m_BlockShape</a>.assign(blockShape.cbegin(), blockShape.cend());</div>
<div class="line"><a name="l05110"></a><span class="lineno"> 5110</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">m_PadList</a>.assign(paddingList.cbegin(), paddingList.cend());</div>
<div class="line"><a name="l05111"></a><span class="lineno"> 5111</span>&#160; </div>
<div class="line"><a name="l05112"></a><span class="lineno"> 5112</span>&#160;    <span class="keywordflow">if</span>(Is12OrLaterOperand(*output))</div>
<div class="line"><a name="l05113"></a><span class="lineno"> 5113</span>&#160;    {</div>
<div class="line"><a name="l05114"></a><span class="lineno"> 5114</span>&#160;        descriptor.<a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(operation, 3, model, data);</div>
<div class="line"><a name="l05115"></a><span class="lineno"> 5115</span>&#160;    }</div>
<div class="line"><a name="l05116"></a><span class="lineno"> 5116</span>&#160; </div>
<div class="line"><a name="l05117"></a><span class="lineno"> 5117</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l05118"></a><span class="lineno"> 5118</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l05119"></a><span class="lineno"> 5119</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;outputInfo, <span class="keywordtype">bool</span> &amp;isSupported)</div>
<div class="line"><a name="l05120"></a><span class="lineno"> 5120</span>&#160;    {</div>
<div class="line"><a name="l05121"></a><span class="lineno"> 5121</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l05122"></a><span class="lineno"> 5122</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a55f4c243c58ee7a084f4a674d3c69948">IsSpaceToBatchNdSupported</a>,</div>
<div class="line"><a name="l05123"></a><span class="lineno"> 5123</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l05124"></a><span class="lineno"> 5124</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l05125"></a><span class="lineno"> 5125</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l05126"></a><span class="lineno"> 5126</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l05127"></a><span class="lineno"> 5127</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l05128"></a><span class="lineno"> 5128</span>&#160;                                   descriptor);</div>
<div class="line"><a name="l05129"></a><span class="lineno"> 5129</span>&#160;    };</div>
<div class="line"><a name="l05130"></a><span class="lineno"> 5130</span>&#160; </div>
<div class="line"><a name="l05131"></a><span class="lineno"> 5131</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l05132"></a><span class="lineno"> 5132</span>&#160;    {</div>
<div class="line"><a name="l05133"></a><span class="lineno"> 5133</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l05134"></a><span class="lineno"> 5134</span>&#160;    } <span class="keywordflow">else</span></div>
<div class="line"><a name="l05135"></a><span class="lineno"> 5135</span>&#160;    {</div>
<div class="line"><a name="l05136"></a><span class="lineno"> 5136</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l05137"></a><span class="lineno"> 5137</span>&#160;    }</div>
<div class="line"><a name="l05138"></a><span class="lineno"> 5138</span>&#160; </div>
<div class="line"><a name="l05139"></a><span class="lineno"> 5139</span>&#160;    <span class="keywordflow">if</span>(!isSupported)</div>
<div class="line"><a name="l05140"></a><span class="lineno"> 5140</span>&#160;    {</div>
<div class="line"><a name="l05141"></a><span class="lineno"> 5141</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l05142"></a><span class="lineno"> 5142</span>&#160;    }</div>
<div class="line"><a name="l05143"></a><span class="lineno"> 5143</span>&#160; </div>
<div class="line"><a name="l05144"></a><span class="lineno"> 5144</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a> *<span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddSpaceToBatchNdLayer(descriptor);</div>
<div class="line"><a name="l05145"></a><span class="lineno"> 5145</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l05146"></a><span class="lineno"> 5146</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l05147"></a><span class="lineno"> 5147</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l05148"></a><span class="lineno"> 5148</span>&#160; </div>
<div class="line"><a name="l05149"></a><span class="lineno"> 5149</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l05150"></a><span class="lineno"> 5150</span>&#160;}</div>
<div class="line"><a name="l05151"></a><span class="lineno"> 5151</span>&#160; </div>
<div class="line"><a name="l05152"></a><span class="lineno"> 5152</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertSpaceToDepth(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l05153"></a><span class="lineno"> 5153</span>&#160;{</div>
<div class="line"><a name="l05154"></a><span class="lineno"> 5154</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertSpaceToDepth()&quot;</span>;</div>
<div class="line"><a name="l05155"></a><span class="lineno"> 5155</span>&#160; </div>
<div class="line"><a name="l05156"></a><span class="lineno"> 5156</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l05157"></a><span class="lineno"> 5157</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() )</div>
<div class="line"><a name="l05158"></a><span class="lineno"> 5158</span>&#160;    {</div>
<div class="line"><a name="l05159"></a><span class="lineno"> 5159</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l05160"></a><span class="lineno"> 5160</span>&#160;    }</div>
<div class="line"><a name="l05161"></a><span class="lineno"> 5161</span>&#160; </div>
<div class="line"><a name="l05162"></a><span class="lineno"> 5162</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l05163"></a><span class="lineno"> 5163</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rank = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l05164"></a><span class="lineno"> 5164</span>&#160;    <span class="keywordflow">if</span> (rank != 4)</div>
<div class="line"><a name="l05165"></a><span class="lineno"> 5165</span>&#160;    {</div>
<div class="line"><a name="l05166"></a><span class="lineno"> 5166</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Only inputs with rank 4 are supported&quot;</span>, __func__);</div>
<div class="line"><a name="l05167"></a><span class="lineno"> 5167</span>&#160;    }</div>
<div class="line"><a name="l05168"></a><span class="lineno"> 5168</span>&#160; </div>
<div class="line"><a name="l05169"></a><span class="lineno"> 5169</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l05170"></a><span class="lineno"> 5170</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l05171"></a><span class="lineno"> 5171</span>&#160;    {</div>
<div class="line"><a name="l05172"></a><span class="lineno"> 5172</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l05173"></a><span class="lineno"> 5173</span>&#160;    }</div>
<div class="line"><a name="l05174"></a><span class="lineno"> 5174</span>&#160; </div>
<div class="line"><a name="l05175"></a><span class="lineno"> 5175</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l05176"></a><span class="lineno"> 5176</span>&#160; </div>
<div class="line"><a name="l05177"></a><span class="lineno"> 5177</span>&#160;    <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> desc;</div>
<div class="line"><a name="l05178"></a><span class="lineno"> 5178</span>&#160; </div>
<div class="line"><a name="l05179"></a><span class="lineno"> 5179</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6c6b8957f1e176867e5fb05b1a1a1486">m_BlockSize</a>, model, data);</div>
<div class="line"><a name="l05180"></a><span class="lineno"> 5180</span>&#160; </div>
<div class="line"><a name="l05181"></a><span class="lineno"> 5181</span>&#160;    <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6c6b8957f1e176867e5fb05b1a1a1486">m_BlockSize</a> &lt;= 1)</div>
<div class="line"><a name="l05182"></a><span class="lineno"> 5182</span>&#160;    {</div>
<div class="line"><a name="l05183"></a><span class="lineno"> 5183</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Block size must be at least 1 in all dimensions&quot;</span>);</div>
<div class="line"><a name="l05184"></a><span class="lineno"> 5184</span>&#160;    }</div>
<div class="line"><a name="l05185"></a><span class="lineno"> 5185</span>&#160; </div>
<div class="line"><a name="l05186"></a><span class="lineno"> 5186</span>&#160;    desc.<a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(operation, 2, model, data);</div>
<div class="line"><a name="l05187"></a><span class="lineno"> 5187</span>&#160; </div>
<div class="line"><a name="l05188"></a><span class="lineno"> 5188</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l05189"></a><span class="lineno"> 5189</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l05190"></a><span class="lineno"> 5190</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l05191"></a><span class="lineno"> 5191</span>&#160;    {</div>
<div class="line"><a name="l05192"></a><span class="lineno"> 5192</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l05193"></a><span class="lineno"> 5193</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a32e51e4810a549b4a15d59ba73c64d2c">IsSpaceToDepthSupported</a>,</div>
<div class="line"><a name="l05194"></a><span class="lineno"> 5194</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l05195"></a><span class="lineno"> 5195</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l05196"></a><span class="lineno"> 5196</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l05197"></a><span class="lineno"> 5197</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l05198"></a><span class="lineno"> 5198</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l05199"></a><span class="lineno"> 5199</span>&#160;                                   desc);</div>
<div class="line"><a name="l05200"></a><span class="lineno"> 5200</span>&#160;    };</div>
<div class="line"><a name="l05201"></a><span class="lineno"> 5201</span>&#160; </div>
<div class="line"><a name="l05202"></a><span class="lineno"> 5202</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l05203"></a><span class="lineno"> 5203</span>&#160;    {</div>
<div class="line"><a name="l05204"></a><span class="lineno"> 5204</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l05205"></a><span class="lineno"> 5205</span>&#160;    }</div>
<div class="line"><a name="l05206"></a><span class="lineno"> 5206</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l05207"></a><span class="lineno"> 5207</span>&#160;    {</div>
<div class="line"><a name="l05208"></a><span class="lineno"> 5208</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l05209"></a><span class="lineno"> 5209</span>&#160;    }</div>
<div class="line"><a name="l05210"></a><span class="lineno"> 5210</span>&#160; </div>
<div class="line"><a name="l05211"></a><span class="lineno"> 5211</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l05212"></a><span class="lineno"> 5212</span>&#160;    {</div>
<div class="line"><a name="l05213"></a><span class="lineno"> 5213</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l05214"></a><span class="lineno"> 5214</span>&#160;    }</div>
<div class="line"><a name="l05215"></a><span class="lineno"> 5215</span>&#160; </div>
<div class="line"><a name="l05216"></a><span class="lineno"> 5216</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddSpaceToDepthLayer(desc);</div>
<div class="line"><a name="l05217"></a><span class="lineno"> 5217</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l05218"></a><span class="lineno"> 5218</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l05219"></a><span class="lineno"> 5219</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l05220"></a><span class="lineno"> 5220</span>&#160; </div>
<div class="line"><a name="l05221"></a><span class="lineno"> 5221</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l05222"></a><span class="lineno"> 5222</span>&#160;}</div>
<div class="line"><a name="l05223"></a><span class="lineno"> 5223</span>&#160; </div>
<div class="line"><a name="l05224"></a><span class="lineno"> 5224</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertSoftmax(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l05225"></a><span class="lineno"> 5225</span>&#160;{</div>
<div class="line"><a name="l05226"></a><span class="lineno"> 5226</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertSoftmax()&quot;</span>;</div>
<div class="line"><a name="l05227"></a><span class="lineno"> 5227</span>&#160; </div>
<div class="line"><a name="l05228"></a><span class="lineno"> 5228</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l05229"></a><span class="lineno"> 5229</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l05230"></a><span class="lineno"> 5230</span>&#160;    {</div>
<div class="line"><a name="l05231"></a><span class="lineno"> 5231</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l05232"></a><span class="lineno"> 5232</span>&#160;    }</div>
<div class="line"><a name="l05233"></a><span class="lineno"> 5233</span>&#160; </div>
<div class="line"><a name="l05234"></a><span class="lineno"> 5234</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* outputOperand = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l05235"></a><span class="lineno"> 5235</span>&#160;    <span class="keywordflow">if</span> (!outputOperand)</div>
<div class="line"><a name="l05236"></a><span class="lineno"> 5236</span>&#160;    {</div>
<div class="line"><a name="l05237"></a><span class="lineno"> 5237</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has no outputs&quot;</span>, __func__);</div>
<div class="line"><a name="l05238"></a><span class="lineno"> 5238</span>&#160;    }</div>
<div class="line"><a name="l05239"></a><span class="lineno"> 5239</span>&#160; </div>
<div class="line"><a name="l05240"></a><span class="lineno"> 5240</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*outputOperand);</div>
<div class="line"><a name="l05241"></a><span class="lineno"> 5241</span>&#160; </div>
<div class="line"><a name="l05242"></a><span class="lineno"> 5242</span>&#160;    <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> desc;</div>
<div class="line"><a name="l05243"></a><span class="lineno"> 5243</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a53bfb6eb38a90244ba166b641a6965d9">OperandType</a> outputType = outputOperand-&gt;type;</div>
<div class="line"><a name="l05244"></a><span class="lineno"> 5244</span>&#160; </div>
<div class="line"><a name="l05245"></a><span class="lineno"> 5245</span>&#160;    <span class="comment">// Read beta value</span></div>
<div class="line"><a name="l05246"></a><span class="lineno"> 5246</span>&#160;    <span class="keywordflow">if</span> (outputType == OperandType::TENSOR_FLOAT16)</div>
<div class="line"><a name="l05247"></a><span class="lineno"> 5247</span>&#160;    {</div>
<div class="line"><a name="l05248"></a><span class="lineno"> 5248</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">Half</a> value;</div>
<div class="line"><a name="l05249"></a><span class="lineno"> 5249</span>&#160; </div>
<div class="line"><a name="l05250"></a><span class="lineno"> 5250</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 1, OperandType::FLOAT16, value, model, data))</div>
<div class="line"><a name="l05251"></a><span class="lineno"> 5251</span>&#160;        {</div>
<div class="line"><a name="l05252"></a><span class="lineno"> 5252</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs %d&quot;</span>, __func__, outputType);</div>
<div class="line"><a name="l05253"></a><span class="lineno"> 5253</span>&#160;        }</div>
<div class="line"><a name="l05254"></a><span class="lineno"> 5254</span>&#160; </div>
<div class="line"><a name="l05255"></a><span class="lineno"> 5255</span>&#160;        desc.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">m_Beta</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(value);</div>
<div class="line"><a name="l05256"></a><span class="lineno"> 5256</span>&#160;    }</div>
<div class="line"><a name="l05257"></a><span class="lineno"> 5257</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l05258"></a><span class="lineno"> 5258</span>&#160;    {</div>
<div class="line"><a name="l05259"></a><span class="lineno"> 5259</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#a560530462631e354561c1763f695351c">GetInputFloat32</a>(operation, 1, desc.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">m_Beta</a>, model, data))</div>
<div class="line"><a name="l05260"></a><span class="lineno"> 5260</span>&#160;        {</div>
<div class="line"><a name="l05261"></a><span class="lineno"> 5261</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs %d&quot;</span>, __func__, outputType);</div>
<div class="line"><a name="l05262"></a><span class="lineno"> 5262</span>&#160;        }</div>
<div class="line"><a name="l05263"></a><span class="lineno"> 5263</span>&#160;    }</div>
<div class="line"><a name="l05264"></a><span class="lineno"> 5264</span>&#160; </div>
<div class="line"><a name="l05265"></a><span class="lineno"> 5265</span>&#160;    <span class="keywordflow">if</span> (operation.inputs.size() &gt; 2 &amp;&amp; !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation,</div>
<div class="line"><a name="l05266"></a><span class="lineno"> 5266</span>&#160;                                                                  2,</div>
<div class="line"><a name="l05267"></a><span class="lineno"> 5267</span>&#160;                                                                  OperandType::INT32,</div>
<div class="line"><a name="l05268"></a><span class="lineno"> 5268</span>&#160;                                                                  desc.<a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">m_Axis</a>,</div>
<div class="line"><a name="l05269"></a><span class="lineno"> 5269</span>&#160;                                                                  model,</div>
<div class="line"><a name="l05270"></a><span class="lineno"> 5270</span>&#160;                                                                  data))</div>
<div class="line"><a name="l05271"></a><span class="lineno"> 5271</span>&#160;    {</div>
<div class="line"><a name="l05272"></a><span class="lineno"> 5272</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l05273"></a><span class="lineno"> 5273</span>&#160;    }</div>
<div class="line"><a name="l05274"></a><span class="lineno"> 5274</span>&#160; </div>
<div class="line"><a name="l05275"></a><span class="lineno"> 5275</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l05276"></a><span class="lineno"> 5276</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l05277"></a><span class="lineno"> 5277</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l05278"></a><span class="lineno"> 5278</span>&#160;    {</div>
<div class="line"><a name="l05279"></a><span class="lineno"> 5279</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l05280"></a><span class="lineno"> 5280</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a242f6c2f0376aaacd7d65a6f1498dea9">IsSoftmaxSupported</a>,</div>
<div class="line"><a name="l05281"></a><span class="lineno"> 5281</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l05282"></a><span class="lineno"> 5282</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l05283"></a><span class="lineno"> 5283</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l05284"></a><span class="lineno"> 5284</span>&#160;                                   input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l05285"></a><span class="lineno"> 5285</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l05286"></a><span class="lineno"> 5286</span>&#160;                                   desc);</div>
<div class="line"><a name="l05287"></a><span class="lineno"> 5287</span>&#160;        };</div>
<div class="line"><a name="l05288"></a><span class="lineno"> 5288</span>&#160; </div>
<div class="line"><a name="l05289"></a><span class="lineno"> 5289</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l05290"></a><span class="lineno"> 5290</span>&#160;    {</div>
<div class="line"><a name="l05291"></a><span class="lineno"> 5291</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l05292"></a><span class="lineno"> 5292</span>&#160;    }</div>
<div class="line"><a name="l05293"></a><span class="lineno"> 5293</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l05294"></a><span class="lineno"> 5294</span>&#160;    {</div>
<div class="line"><a name="l05295"></a><span class="lineno"> 5295</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l05296"></a><span class="lineno"> 5296</span>&#160;    }</div>
<div class="line"><a name="l05297"></a><span class="lineno"> 5297</span>&#160; </div>
<div class="line"><a name="l05298"></a><span class="lineno"> 5298</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l05299"></a><span class="lineno"> 5299</span>&#160;    {</div>
<div class="line"><a name="l05300"></a><span class="lineno"> 5300</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l05301"></a><span class="lineno"> 5301</span>&#160;    }</div>
<div class="line"><a name="l05302"></a><span class="lineno"> 5302</span>&#160; </div>
<div class="line"><a name="l05303"></a><span class="lineno"> 5303</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddSoftmaxLayer(desc);</div>
<div class="line"><a name="l05304"></a><span class="lineno"> 5304</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l05305"></a><span class="lineno"> 5305</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l05306"></a><span class="lineno"> 5306</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l05307"></a><span class="lineno"> 5307</span>&#160; </div>
<div class="line"><a name="l05308"></a><span class="lineno"> 5308</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l05309"></a><span class="lineno"> 5309</span>&#160;}</div>
<div class="line"><a name="l05310"></a><span class="lineno"> 5310</span>&#160; </div>
<div class="line"><a name="l05311"></a><span class="lineno"> 5311</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertSub(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l05312"></a><span class="lineno"> 5312</span>&#160;{</div>
<div class="line"><a name="l05313"></a><span class="lineno"> 5313</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertSub()&quot;</span>;</div>
<div class="line"><a name="l05314"></a><span class="lineno"> 5314</span>&#160; </div>
<div class="line"><a name="l05315"></a><span class="lineno"> 5315</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input0 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l05316"></a><span class="lineno"> 5316</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input1 = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 1, model, data);</div>
<div class="line"><a name="l05317"></a><span class="lineno"> 5317</span>&#160; </div>
<div class="line"><a name="l05318"></a><span class="lineno"> 5318</span>&#160;    <span class="keywordflow">if</span> (!input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>() || !input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l05319"></a><span class="lineno"> 5319</span>&#160;    {</div>
<div class="line"><a name="l05320"></a><span class="lineno"> 5320</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l05321"></a><span class="lineno"> 5321</span>&#160;    }</div>
<div class="line"><a name="l05322"></a><span class="lineno"> 5322</span>&#160; </div>
<div class="line"><a name="l05323"></a><span class="lineno"> 5323</span>&#160;    <span class="comment">// The FuseActivation parameter is always the input index 2</span></div>
<div class="line"><a name="l05324"></a><span class="lineno"> 5324</span>&#160;    <span class="comment">// and it should be optional</span></div>
<div class="line"><a name="l05325"></a><span class="lineno"> 5325</span>&#160;    ActivationFn activationFunction;</div>
<div class="line"><a name="l05326"></a><span class="lineno"> 5326</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#acd62ec697055015572a6ba61eaba4f1a">GetOptionalInputActivation</a>(operation, 2, activationFunction, model, data))</div>
<div class="line"><a name="l05327"></a><span class="lineno"> 5327</span>&#160;    {</div>
<div class="line"><a name="l05328"></a><span class="lineno"> 5328</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l05329"></a><span class="lineno"> 5329</span>&#160;    }</div>
<div class="line"><a name="l05330"></a><span class="lineno"> 5330</span>&#160; </div>
<div class="line"><a name="l05331"></a><span class="lineno"> 5331</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l05332"></a><span class="lineno"> 5332</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l05333"></a><span class="lineno"> 5333</span>&#160;    {</div>
<div class="line"><a name="l05334"></a><span class="lineno"> 5334</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l05335"></a><span class="lineno"> 5335</span>&#160;    }</div>
<div class="line"><a name="l05336"></a><span class="lineno"> 5336</span>&#160; </div>
<div class="line"><a name="l05337"></a><span class="lineno"> 5337</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l05338"></a><span class="lineno"> 5338</span>&#160; </div>
<div class="line"><a name="l05339"></a><span class="lineno"> 5339</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l05340"></a><span class="lineno"> 5340</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l05341"></a><span class="lineno"> 5341</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l05342"></a><span class="lineno"> 5342</span>&#160;    {</div>
<div class="line"><a name="l05343"></a><span class="lineno"> 5343</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l05344"></a><span class="lineno"> 5344</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a1a74a4ecd0f25e6031ef05210a0cfe51">IsSubtractionSupported</a>,</div>
<div class="line"><a name="l05345"></a><span class="lineno"> 5345</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l05346"></a><span class="lineno"> 5346</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l05347"></a><span class="lineno"> 5347</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l05348"></a><span class="lineno"> 5348</span>&#160;                                   input0.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l05349"></a><span class="lineno"> 5349</span>&#160;                                   input1.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>(),</div>
<div class="line"><a name="l05350"></a><span class="lineno"> 5350</span>&#160;                                   outputInfo);</div>
<div class="line"><a name="l05351"></a><span class="lineno"> 5351</span>&#160;    };</div>
<div class="line"><a name="l05352"></a><span class="lineno"> 5352</span>&#160; </div>
<div class="line"><a name="l05353"></a><span class="lineno"> 5353</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l05354"></a><span class="lineno"> 5354</span>&#160;    {</div>
<div class="line"><a name="l05355"></a><span class="lineno"> 5355</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l05356"></a><span class="lineno"> 5356</span>&#160;    }</div>
<div class="line"><a name="l05357"></a><span class="lineno"> 5357</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l05358"></a><span class="lineno"> 5358</span>&#160;    {</div>
<div class="line"><a name="l05359"></a><span class="lineno"> 5359</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l05360"></a><span class="lineno"> 5360</span>&#160;    }</div>
<div class="line"><a name="l05361"></a><span class="lineno"> 5361</span>&#160; </div>
<div class="line"><a name="l05362"></a><span class="lineno"> 5362</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l05363"></a><span class="lineno"> 5363</span>&#160;    {</div>
<div class="line"><a name="l05364"></a><span class="lineno"> 5364</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l05365"></a><span class="lineno"> 5365</span>&#160;    }</div>
<div class="line"><a name="l05366"></a><span class="lineno"> 5366</span>&#160; </div>
<div class="line"><a name="l05367"></a><span class="lineno"> 5367</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> startLayer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddSubtractionLayer();</div>
<div class="line"><a name="l05368"></a><span class="lineno"> 5368</span>&#160;    startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l05369"></a><span class="lineno"> 5369</span>&#160; </div>
<div class="line"><a name="l05370"></a><span class="lineno"> 5370</span>&#160;    <span class="keywordtype">bool</span> isReshapeSupported = BroadcastTensor(input0, input1, startLayer, data);</div>
<div class="line"><a name="l05371"></a><span class="lineno"> 5371</span>&#160;    <span class="keywordflow">if</span> (!isReshapeSupported)</div>
<div class="line"><a name="l05372"></a><span class="lineno"> 5372</span>&#160;    {</div>
<div class="line"><a name="l05373"></a><span class="lineno"> 5373</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l05374"></a><span class="lineno"> 5374</span>&#160;    }</div>
<div class="line"><a name="l05375"></a><span class="lineno"> 5375</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *startLayer, model,</div>
<div class="line"><a name="l05376"></a><span class="lineno"> 5376</span>&#160;                                        data, <span class="keyword">nullptr</span>, validateFunc, activationFunction);</div>
<div class="line"><a name="l05377"></a><span class="lineno"> 5377</span>&#160;}</div>
<div class="line"><a name="l05378"></a><span class="lineno"> 5378</span>&#160; </div>
<div class="line"><a name="l05379"></a><span class="lineno"> 5379</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertTanH(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l05380"></a><span class="lineno"> 5380</span>&#160;{</div>
<div class="line"><a name="l05381"></a><span class="lineno"> 5381</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertTanH()&quot;</span>;</div>
<div class="line"><a name="l05382"></a><span class="lineno"> 5382</span>&#160; </div>
<div class="line"><a name="l05383"></a><span class="lineno"> 5383</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a> desc;</div>
<div class="line"><a name="l05384"></a><span class="lineno"> 5384</span>&#160;    desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e">armnn::ActivationFunction::TanH</a>;</div>
<div class="line"><a name="l05385"></a><span class="lineno"> 5385</span>&#160;    desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">m_A</a> = 1.0f; <span class="comment">// android nn does not support tanH parameters</span></div>
<div class="line"><a name="l05386"></a><span class="lineno"> 5386</span>&#160;    desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">m_B</a> = 1.0f; <span class="comment">// set to 1.0f for unity scaling</span></div>
<div class="line"><a name="l05387"></a><span class="lineno"> 5387</span>&#160; </div>
<div class="line"><a name="l05388"></a><span class="lineno"> 5388</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a28243ca97e12ccb50e01f03d313ecc86">ConvertToActivation</a>(operation, __func__, desc, model, data);</div>
<div class="line"><a name="l05389"></a><span class="lineno"> 5389</span>&#160;}</div>
<div class="line"><a name="l05390"></a><span class="lineno"> 5390</span>&#160; </div>
<div class="line"><a name="l05391"></a><span class="lineno"> 5391</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertTransposeConv2d(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l05392"></a><span class="lineno"> 5392</span>&#160;{</div>
<div class="line"><a name="l05393"></a><span class="lineno"> 5393</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertTransposeConv2d()&quot;</span>;</div>
<div class="line"><a name="l05394"></a><span class="lineno"> 5394</span>&#160; </div>
<div class="line"><a name="l05395"></a><span class="lineno"> 5395</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l05396"></a><span class="lineno"> 5396</span>&#160; </div>
<div class="line"><a name="l05397"></a><span class="lineno"> 5397</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l05398"></a><span class="lineno"> 5398</span>&#160;    {</div>
<div class="line"><a name="l05399"></a><span class="lineno"> 5399</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l05400"></a><span class="lineno"> 5400</span>&#160;    }</div>
<div class="line"><a name="l05401"></a><span class="lineno"> 5401</span>&#160; </div>
<div class="line"><a name="l05402"></a><span class="lineno"> 5402</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l05403"></a><span class="lineno"> 5403</span>&#160; </div>
<div class="line"><a name="l05404"></a><span class="lineno"> 5404</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l05405"></a><span class="lineno"> 5405</span>&#160;    {</div>
<div class="line"><a name="l05406"></a><span class="lineno"> 5406</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l05407"></a><span class="lineno"> 5407</span>&#160;    }</div>
<div class="line"><a name="l05408"></a><span class="lineno"> 5408</span>&#160; </div>
<div class="line"><a name="l05409"></a><span class="lineno"> 5409</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo  = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l05410"></a><span class="lineno"> 5410</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l05411"></a><span class="lineno"> 5411</span>&#160; </div>
<div class="line"><a name="l05412"></a><span class="lineno"> 5412</span>&#160;    <span class="comment">// ArmNN does not currently support non-fixed weights or bias</span></div>
<div class="line"><a name="l05413"></a><span class="lineno"> 5413</span>&#160;    <span class="comment">// Find the shape of the weights tensor. In AndroidNN this will be [ 1, H, W, I * M ]</span></div>
<div class="line"><a name="l05414"></a><span class="lineno"> 5414</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* weightsOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 1, model);</div>
<div class="line"><a name="l05415"></a><span class="lineno"> 5415</span>&#160; </div>
<div class="line"><a name="l05416"></a><span class="lineno"> 5416</span>&#160;    <span class="keywordflow">if</span> (weightsOperand == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l05417"></a><span class="lineno"> 5417</span>&#160;    {</div>
<div class="line"><a name="l05418"></a><span class="lineno"> 5418</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operand is invalid&quot;</span>, __func__);</div>
<div class="line"><a name="l05419"></a><span class="lineno"> 5419</span>&#160;    }</div>
<div class="line"><a name="l05420"></a><span class="lineno"> 5420</span>&#160;    <a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> desc;</div>
<div class="line"><a name="l05421"></a><span class="lineno"> 5421</span>&#160;    desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = DataLayout::NHWC;</div>
<div class="line"><a name="l05422"></a><span class="lineno"> 5422</span>&#160; </div>
<div class="line"><a name="l05423"></a><span class="lineno"> 5423</span>&#160;    <span class="comment">// Determine whether padding is implicit or explicit</span></div>
<div class="line"><a name="l05424"></a><span class="lineno"> 5424</span>&#160;    <span class="keywordtype">bool</span> implicitPadding = operation.inputs.size() == 9;</div>
<div class="line"><a name="l05425"></a><span class="lineno"> 5425</span>&#160; </div>
<div class="line"><a name="l05426"></a><span class="lineno"> 5426</span>&#160;    <span class="keywordflow">if</span> (implicitPadding )</div>
<div class="line"><a name="l05427"></a><span class="lineno"> 5427</span>&#160;    {</div>
<div class="line"><a name="l05428"></a><span class="lineno"> 5428</span>&#160;        desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(operation, 8, model, data);</div>
<div class="line"><a name="l05429"></a><span class="lineno"> 5429</span>&#160;    }</div>
<div class="line"><a name="l05430"></a><span class="lineno"> 5430</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l05431"></a><span class="lineno"> 5431</span>&#160;    {</div>
<div class="line"><a name="l05432"></a><span class="lineno"> 5432</span>&#160;        desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">OptionalDataLayout</a>(operation, 10, model, data);</div>
<div class="line"><a name="l05433"></a><span class="lineno"> 5433</span>&#160;    }</div>
<div class="line"><a name="l05434"></a><span class="lineno"> 5434</span>&#160; </div>
<div class="line"><a name="l05435"></a><span class="lineno"> 5435</span>&#160;    <a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml">armnnUtils::DataLayoutIndexed</a> dataLayoutIndexed(desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>);</div>
<div class="line"><a name="l05436"></a><span class="lineno"> 5436</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> widthIndex = dataLayoutIndexed.GetWidthIndex();</div>
<div class="line"><a name="l05437"></a><span class="lineno"> 5437</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> heightIndex = dataLayoutIndexed.GetHeightIndex();</div>
<div class="line"><a name="l05438"></a><span class="lineno"> 5438</span>&#160; </div>
<div class="line"><a name="l05439"></a><span class="lineno"> 5439</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">PermutationVector</a> OHWIToOIHW = {0, 2, 3, 1};</div>
<div class="line"><a name="l05440"></a><span class="lineno"> 5440</span>&#160; </div>
<div class="line"><a name="l05441"></a><span class="lineno"> 5441</span>&#160;    <span class="comment">// The shape of the weight is [depth_out, filter_height, filter_width, depth_in].</span></div>
<div class="line"><a name="l05442"></a><span class="lineno"> 5442</span>&#160;    <span class="comment">// We have to permute it to OIHW if the data layout is NCHW.</span></div>
<div class="line"><a name="l05443"></a><span class="lineno"> 5443</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> weightsPin = (desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> == DataLayout::NCHW) ?</div>
<div class="line"><a name="l05444"></a><span class="lineno"> 5444</span>&#160;                                      <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 1,</div>
<div class="line"><a name="l05445"></a><span class="lineno"> 5445</span>&#160;                                                                                       model, data, OHWIToOIHW) :</div>
<div class="line"><a name="l05446"></a><span class="lineno"> 5446</span>&#160;                                      <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 1, model, data);</div>
<div class="line"><a name="l05447"></a><span class="lineno"> 5447</span>&#160; </div>
<div class="line"><a name="l05448"></a><span class="lineno"> 5448</span>&#160;    <span class="comment">// Bias is a 1D tensor</span></div>
<div class="line"><a name="l05449"></a><span class="lineno"> 5449</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml">ConstTensorPin</a> biasPin =</div>
<div class="line"><a name="l05450"></a><span class="lineno"> 5450</span>&#160;        <a class="code" href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">ConvertOperationInputToConstTensorPin</a>(operation, 2, model, data);</div>
<div class="line"><a name="l05451"></a><span class="lineno"> 5451</span>&#160; </div>
<div class="line"><a name="l05452"></a><span class="lineno"> 5452</span>&#160;    <span class="keywordflow">if</span> (!weightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l05453"></a><span class="lineno"> 5453</span>&#160;    {</div>
<div class="line"><a name="l05454"></a><span class="lineno"> 5454</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid weights&quot;</span>, __func__);</div>
<div class="line"><a name="l05455"></a><span class="lineno"> 5455</span>&#160;    }</div>
<div class="line"><a name="l05456"></a><span class="lineno"> 5456</span>&#160; </div>
<div class="line"><a name="l05457"></a><span class="lineno"> 5457</span>&#160;    <span class="keywordflow">if</span> (!biasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l05458"></a><span class="lineno"> 5458</span>&#160;    {</div>
<div class="line"><a name="l05459"></a><span class="lineno"> 5459</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid biases&quot;</span>, __func__);</div>
<div class="line"><a name="l05460"></a><span class="lineno"> 5460</span>&#160;    }</div>
<div class="line"><a name="l05461"></a><span class="lineno"> 5461</span>&#160; </div>
<div class="line"><a name="l05462"></a><span class="lineno"> 5462</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> weights = weightsPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a971023b9874b0d773e8aa4c6d6744a2b">GetConstTensor</a>();</div>
<div class="line"><a name="l05463"></a><span class="lineno"> 5463</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> bias = biasPin.<a class="code" href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a971023b9874b0d773e8aa4c6d6744a2b">GetConstTensor</a>();</div>
<div class="line"><a name="l05464"></a><span class="lineno"> 5464</span>&#160;    SanitizeBiasQuantizationScale(bias.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>(), weights.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>(), inputInfo);</div>
<div class="line"><a name="l05465"></a><span class="lineno"> 5465</span>&#160; </div>
<div class="line"><a name="l05466"></a><span class="lineno"> 5466</span>&#160;    ActivationFn activation;</div>
<div class="line"><a name="l05467"></a><span class="lineno"> 5467</span>&#160; </div>
<div class="line"><a name="l05468"></a><span class="lineno"> 5468</span>&#160;    <span class="keywordflow">if</span> (implicitPadding)</div>
<div class="line"><a name="l05469"></a><span class="lineno"> 5469</span>&#160;    {</div>
<div class="line"><a name="l05470"></a><span class="lineno"> 5470</span>&#160;        int32_t strideX{0};</div>
<div class="line"><a name="l05471"></a><span class="lineno"> 5471</span>&#160;        int32_t strideY{0};</div>
<div class="line"><a name="l05472"></a><span class="lineno"> 5472</span>&#160;        int32_t padLeft{0};</div>
<div class="line"><a name="l05473"></a><span class="lineno"> 5473</span>&#160;        int32_t padRight{0};</div>
<div class="line"><a name="l05474"></a><span class="lineno"> 5474</span>&#160;        int32_t padTop{0};</div>
<div class="line"><a name="l05475"></a><span class="lineno"> 5475</span>&#160;        int32_t padBottom{0};</div>
<div class="line"><a name="l05476"></a><span class="lineno"> 5476</span>&#160; </div>
<div class="line"><a name="l05477"></a><span class="lineno"> 5477</span>&#160;        ::android::nn::PaddingScheme paddingScheme;</div>
<div class="line"><a name="l05478"></a><span class="lineno"> 5478</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#aa9ef723ace8562b9636e8387a120fbde">GetInputPaddingScheme</a>(operation, 4, paddingScheme, model, data) ||</div>
<div class="line"><a name="l05479"></a><span class="lineno"> 5479</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 5, OperandType::INT32, strideX, model, data) ||</div>
<div class="line"><a name="l05480"></a><span class="lineno"> 5480</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 6, OperandType::INT32, strideY, model, data) ||</div>
<div class="line"><a name="l05481"></a><span class="lineno"> 5481</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#ac092fff5c81f7938eea9a2479f014c66">GetInputActivationFunction</a>(operation, 7, activation, model, data))</div>
<div class="line"><a name="l05482"></a><span class="lineno"> 5482</span>&#160;        {</div>
<div class="line"><a name="l05483"></a><span class="lineno"> 5483</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs (implicit padding)&quot;</span>, __func__);</div>
<div class="line"><a name="l05484"></a><span class="lineno"> 5484</span>&#160;        }</div>
<div class="line"><a name="l05485"></a><span class="lineno"> 5485</span>&#160; </div>
<div class="line"><a name="l05486"></a><span class="lineno"> 5486</span>&#160;        <span class="keyword">const</span> uint32_t kernelX = weights.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[widthIndex];</div>
<div class="line"><a name="l05487"></a><span class="lineno"> 5487</span>&#160;        <span class="keyword">const</span> uint32_t kernelY = weights.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[heightIndex];</div>
<div class="line"><a name="l05488"></a><span class="lineno"> 5488</span>&#160; </div>
<div class="line"><a name="l05489"></a><span class="lineno"> 5489</span>&#160;        <span class="comment">// If output shape has been specified as a parameter then extract it and make it available.</span></div>
<div class="line"><a name="l05490"></a><span class="lineno"> 5490</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* outputShapeOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 3, model, <span class="keyword">false</span>);</div>
<div class="line"><a name="l05491"></a><span class="lineno"> 5491</span>&#160;        std::vector&lt;int32_t&gt; outputShape;</div>
<div class="line"><a name="l05492"></a><span class="lineno"> 5492</span>&#160;        <span class="keywordflow">if</span> ((outputShapeOperand) &amp;&amp; (<a class="code" href="namespacearmnn__driver.xhtml#ac8643aaee3eafc54336c5462b51bd53f">GetTensorInt32Values</a>(*outputShapeOperand, outputShape, model, data)))</div>
<div class="line"><a name="l05493"></a><span class="lineno"> 5493</span>&#160;        {</div>
<div class="line"><a name="l05494"></a><span class="lineno"> 5494</span>&#160;            <span class="comment">// Change from signed to unsigned int to store in TransposeConvolution2dDescriptor.</span></div>
<div class="line"><a name="l05495"></a><span class="lineno"> 5495</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> dimension : outputShape)</div>
<div class="line"><a name="l05496"></a><span class="lineno"> 5496</span>&#160;            {</div>
<div class="line"><a name="l05497"></a><span class="lineno"> 5497</span>&#160;                desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a78f5b213a603b55d0fabea389e89f203">m_OutputShape</a>.push_back(<span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(dimension));</div>
<div class="line"><a name="l05498"></a><span class="lineno"> 5498</span>&#160;            }</div>
<div class="line"><a name="l05499"></a><span class="lineno"> 5499</span>&#160;            desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a9bc46a2ad56319786bad30be9ab2dc6a">m_OutputShapeEnabled</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l05500"></a><span class="lineno"> 5500</span>&#160;        }</div>
<div class="line"><a name="l05501"></a><span class="lineno"> 5501</span>&#160; </div>
<div class="line"><a name="l05502"></a><span class="lineno"> 5502</span>&#160;        uint32_t outputX;</div>
<div class="line"><a name="l05503"></a><span class="lineno"> 5503</span>&#160;        uint32_t outputY;</div>
<div class="line"><a name="l05504"></a><span class="lineno"> 5504</span>&#160; </div>
<div class="line"><a name="l05505"></a><span class="lineno"> 5505</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l05506"></a><span class="lineno"> 5506</span>&#160;        {</div>
<div class="line"><a name="l05507"></a><span class="lineno"> 5507</span>&#160;            <span class="keywordflow">if</span> (outputShape.size() == 0)</div>
<div class="line"><a name="l05508"></a><span class="lineno"> 5508</span>&#160;            {</div>
<div class="line"><a name="l05509"></a><span class="lineno"> 5509</span>&#160;                <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Padding sizes cannot be inferred&quot;</span>, __func__);</div>
<div class="line"><a name="l05510"></a><span class="lineno"> 5510</span>&#160;            }</div>
<div class="line"><a name="l05511"></a><span class="lineno"> 5511</span>&#160; </div>
<div class="line"><a name="l05512"></a><span class="lineno"> 5512</span>&#160;            outputX = outputShape[widthIndex];</div>
<div class="line"><a name="l05513"></a><span class="lineno"> 5513</span>&#160;            outputY = outputShape[heightIndex];</div>
<div class="line"><a name="l05514"></a><span class="lineno"> 5514</span>&#160;        }</div>
<div class="line"><a name="l05515"></a><span class="lineno"> 5515</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l05516"></a><span class="lineno"> 5516</span>&#160;        {</div>
<div class="line"><a name="l05517"></a><span class="lineno"> 5517</span>&#160;            outputX = outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[widthIndex];</div>
<div class="line"><a name="l05518"></a><span class="lineno"> 5518</span>&#160;            outputY = outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[heightIndex];</div>
<div class="line"><a name="l05519"></a><span class="lineno"> 5519</span>&#160;        }</div>
<div class="line"><a name="l05520"></a><span class="lineno"> 5520</span>&#160; </div>
<div class="line"><a name="l05521"></a><span class="lineno"> 5521</span>&#160;        CalcPaddingTransposeConv(outputX, kernelX, strideX, padLeft, padRight, paddingScheme);</div>
<div class="line"><a name="l05522"></a><span class="lineno"> 5522</span>&#160;        CalcPaddingTransposeConv(outputY, kernelY, strideY, padTop, padBottom, paddingScheme);</div>
<div class="line"><a name="l05523"></a><span class="lineno"> 5523</span>&#160; </div>
<div class="line"><a name="l05524"></a><span class="lineno"> 5524</span>&#160;        <span class="comment">// NOTE: The Android NN API allows for negative padding values in TransposeConv2d,</span></div>
<div class="line"><a name="l05525"></a><span class="lineno"> 5525</span>&#160;        <span class="comment">// but Arm NN only supports values &gt;= 0</span></div>
<div class="line"><a name="l05526"></a><span class="lineno"> 5526</span>&#160;        <span class="keywordflow">if</span> (padLeft &lt; 0 || padRight &lt; 0 || padTop &lt; 0 || padBottom &lt; 0)</div>
<div class="line"><a name="l05527"></a><span class="lineno"> 5527</span>&#160;        {</div>
<div class="line"><a name="l05528"></a><span class="lineno"> 5528</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Negative padding values are not supported&quot;</span>, __func__);</div>
<div class="line"><a name="l05529"></a><span class="lineno"> 5529</span>&#160;        }</div>
<div class="line"><a name="l05530"></a><span class="lineno"> 5530</span>&#160; </div>
<div class="line"><a name="l05531"></a><span class="lineno"> 5531</span>&#160;        desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>   = armnn::numeric_cast&lt;uint32_t&gt;(strideX);</div>
<div class="line"><a name="l05532"></a><span class="lineno"> 5532</span>&#160;        desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>   = armnn::numeric_cast&lt;uint32_t&gt;(strideY);</div>
<div class="line"><a name="l05533"></a><span class="lineno"> 5533</span>&#160;        desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>   = armnn::numeric_cast&lt;uint32_t&gt;(padLeft);</div>
<div class="line"><a name="l05534"></a><span class="lineno"> 5534</span>&#160;        desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>  = armnn::numeric_cast&lt;uint32_t&gt;(padRight);</div>
<div class="line"><a name="l05535"></a><span class="lineno"> 5535</span>&#160;        desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>    = armnn::numeric_cast&lt;uint32_t&gt;(padTop);</div>
<div class="line"><a name="l05536"></a><span class="lineno"> 5536</span>&#160;        desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a> = armnn::numeric_cast&lt;uint32_t&gt;(padBottom);</div>
<div class="line"><a name="l05537"></a><span class="lineno"> 5537</span>&#160;    }</div>
<div class="line"><a name="l05538"></a><span class="lineno"> 5538</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (operation.inputs.size() == 11)</div>
<div class="line"><a name="l05539"></a><span class="lineno"> 5539</span>&#160;    {</div>
<div class="line"><a name="l05540"></a><span class="lineno"> 5540</span>&#160;        <span class="comment">// explicit padding</span></div>
<div class="line"><a name="l05541"></a><span class="lineno"> 5541</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 3, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>, model, data) ||</div>
<div class="line"><a name="l05542"></a><span class="lineno"> 5542</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 4, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>, model, data) ||</div>
<div class="line"><a name="l05543"></a><span class="lineno"> 5543</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 5, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>, model, data) ||</div>
<div class="line"><a name="l05544"></a><span class="lineno"> 5544</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 6, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>, model, data) ||</div>
<div class="line"><a name="l05545"></a><span class="lineno"> 5545</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 7, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>, model, data) ||</div>
<div class="line"><a name="l05546"></a><span class="lineno"> 5546</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">GetInputScalar</a>(operation, 8, OperandType::INT32, desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>, model, data) ||</div>
<div class="line"><a name="l05547"></a><span class="lineno"> 5547</span>&#160;            !<a class="code" href="namespacearmnn__driver.xhtml#ac092fff5c81f7938eea9a2479f014c66">GetInputActivationFunction</a>(operation,  9, activation, model, data))</div>
<div class="line"><a name="l05548"></a><span class="lineno"> 5548</span>&#160;        {</div>
<div class="line"><a name="l05549"></a><span class="lineno"> 5549</span>&#160;            <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs (explicit padding)&quot;</span>, __func__);</div>
<div class="line"><a name="l05550"></a><span class="lineno"> 5550</span>&#160;        }</div>
<div class="line"><a name="l05551"></a><span class="lineno"> 5551</span>&#160;    }</div>
<div class="line"><a name="l05552"></a><span class="lineno"> 5552</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l05553"></a><span class="lineno"> 5553</span>&#160;    {</div>
<div class="line"><a name="l05554"></a><span class="lineno"> 5554</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Unsupported number of operation inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l05555"></a><span class="lineno"> 5555</span>&#160;    }</div>
<div class="line"><a name="l05556"></a><span class="lineno"> 5556</span>&#160; </div>
<div class="line"><a name="l05557"></a><span class="lineno"> 5557</span>&#160;    desc.<a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l05558"></a><span class="lineno"> 5558</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a> biases(bias.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>());</div>
<div class="line"><a name="l05559"></a><span class="lineno"> 5559</span>&#160; </div>
<div class="line"><a name="l05560"></a><span class="lineno"> 5560</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l05561"></a><span class="lineno"> 5561</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l05562"></a><span class="lineno"> 5562</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l05563"></a><span class="lineno"> 5563</span>&#160;    {</div>
<div class="line"><a name="l05564"></a><span class="lineno"> 5564</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l05565"></a><span class="lineno"> 5565</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#ac6cc8e0bd35d229486fe6d844d88e0d4">IsTransposeConvolution2dSupported</a>,</div>
<div class="line"><a name="l05566"></a><span class="lineno"> 5566</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l05567"></a><span class="lineno"> 5567</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l05568"></a><span class="lineno"> 5568</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l05569"></a><span class="lineno"> 5569</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l05570"></a><span class="lineno"> 5570</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l05571"></a><span class="lineno"> 5571</span>&#160;                                   desc,</div>
<div class="line"><a name="l05572"></a><span class="lineno"> 5572</span>&#160;                                   weights.<a class="code" href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">GetInfo</a>(),</div>
<div class="line"><a name="l05573"></a><span class="lineno"> 5573</span>&#160;                                   biases);</div>
<div class="line"><a name="l05574"></a><span class="lineno"> 5574</span>&#160;    };</div>
<div class="line"><a name="l05575"></a><span class="lineno"> 5575</span>&#160; </div>
<div class="line"><a name="l05576"></a><span class="lineno"> 5576</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l05577"></a><span class="lineno"> 5577</span>&#160;    {</div>
<div class="line"><a name="l05578"></a><span class="lineno"> 5578</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l05579"></a><span class="lineno"> 5579</span>&#160;    }</div>
<div class="line"><a name="l05580"></a><span class="lineno"> 5580</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l05581"></a><span class="lineno"> 5581</span>&#160;    {</div>
<div class="line"><a name="l05582"></a><span class="lineno"> 5582</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l05583"></a><span class="lineno"> 5583</span>&#160;    }</div>
<div class="line"><a name="l05584"></a><span class="lineno"> 5584</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l05585"></a><span class="lineno"> 5585</span>&#160;    {</div>
<div class="line"><a name="l05586"></a><span class="lineno"> 5586</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l05587"></a><span class="lineno"> 5587</span>&#160;    }</div>
<div class="line"><a name="l05588"></a><span class="lineno"> 5588</span>&#160; </div>
<div class="line"><a name="l05589"></a><span class="lineno"> 5589</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* startLayer =</div>
<div class="line"><a name="l05590"></a><span class="lineno"> 5590</span>&#160;        data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddTransposeConvolution2dLayer(desc, weights, <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;ConstTensor&gt;</a>(bias));</div>
<div class="line"><a name="l05591"></a><span class="lineno"> 5591</span>&#160;    startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l05592"></a><span class="lineno"> 5592</span>&#160;    <span class="keywordflow">if</span> (!startLayer)</div>
<div class="line"><a name="l05593"></a><span class="lineno"> 5593</span>&#160;    {</div>
<div class="line"><a name="l05594"></a><span class="lineno"> 5594</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: AddTransposeConvolution2dLayer failed&quot;</span>, __func__);</div>
<div class="line"><a name="l05595"></a><span class="lineno"> 5595</span>&#160;    }</div>
<div class="line"><a name="l05596"></a><span class="lineno"> 5596</span>&#160; </div>
<div class="line"><a name="l05597"></a><span class="lineno"> 5597</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(startLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l05598"></a><span class="lineno"> 5598</span>&#160; </div>
<div class="line"><a name="l05599"></a><span class="lineno"> 5599</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *startLayer, model,</div>
<div class="line"><a name="l05600"></a><span class="lineno"> 5600</span>&#160;                                                   data, <span class="keyword">nullptr</span>, validateFunc, activation);</div>
<div class="line"><a name="l05601"></a><span class="lineno"> 5601</span>&#160;}</div>
<div class="line"><a name="l05602"></a><span class="lineno"> 5602</span>&#160; </div>
<div class="line"><a name="l05603"></a><span class="lineno"> 5603</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertSqrt(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l05604"></a><span class="lineno"> 5604</span>&#160;{</div>
<div class="line"><a name="l05605"></a><span class="lineno"> 5605</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertSqrt()&quot;</span>;</div>
<div class="line"><a name="l05606"></a><span class="lineno"> 5606</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> desc;</div>
<div class="line"><a name="l05607"></a><span class="lineno"> 5607</span>&#160;    desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = ActivationFunction::Sqrt;</div>
<div class="line"><a name="l05608"></a><span class="lineno"> 5608</span>&#160; </div>
<div class="line"><a name="l05609"></a><span class="lineno"> 5609</span>&#160;    <a class="code" href="namespacearmnn__driver.xhtml#a28243ca97e12ccb50e01f03d313ecc86">return ::ConvertToActivation</a>(operation, __func__, desc, model, data);</div>
<div class="line"><a name="l05610"></a><span class="lineno"> 5610</span>&#160;}</div>
<div class="line"><a name="l05611"></a><span class="lineno"> 5611</span>&#160; </div>
<div class="line"><a name="l05612"></a><span class="lineno"> 5612</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertSqueeze(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l05613"></a><span class="lineno"> 5613</span>&#160;{</div>
<div class="line"><a name="l05614"></a><span class="lineno"> 5614</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertSqueeze()&quot;</span>;</div>
<div class="line"><a name="l05615"></a><span class="lineno"> 5615</span>&#160; </div>
<div class="line"><a name="l05616"></a><span class="lineno"> 5616</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l05617"></a><span class="lineno"> 5617</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l05618"></a><span class="lineno"> 5618</span>&#160;    {</div>
<div class="line"><a name="l05619"></a><span class="lineno"> 5619</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l05620"></a><span class="lineno"> 5620</span>&#160;    }</div>
<div class="line"><a name="l05621"></a><span class="lineno"> 5621</span>&#160; </div>
<div class="line"><a name="l05622"></a><span class="lineno"> 5622</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo  = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l05623"></a><span class="lineno"> 5623</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rank = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l05624"></a><span class="lineno"> 5624</span>&#160;    <span class="keywordflow">if</span> (rank &gt; 4)</div>
<div class="line"><a name="l05625"></a><span class="lineno"> 5625</span>&#160;    {</div>
<div class="line"><a name="l05626"></a><span class="lineno"> 5626</span>&#160;        Fail(<span class="stringliteral">&quot;%s: Inputs with rank greater than 4 are not supported&quot;</span>, __func__);</div>
<div class="line"><a name="l05627"></a><span class="lineno"> 5627</span>&#160;    }</div>
<div class="line"><a name="l05628"></a><span class="lineno"> 5628</span>&#160; </div>
<div class="line"><a name="l05629"></a><span class="lineno"> 5629</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l05630"></a><span class="lineno"> 5630</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l05631"></a><span class="lineno"> 5631</span>&#160;    {</div>
<div class="line"><a name="l05632"></a><span class="lineno"> 5632</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l05633"></a><span class="lineno"> 5633</span>&#160;    }</div>
<div class="line"><a name="l05634"></a><span class="lineno"> 5634</span>&#160; </div>
<div class="line"><a name="l05635"></a><span class="lineno"> 5635</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(<a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output)) &amp;&amp; !(<a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>()))</div>
<div class="line"><a name="l05636"></a><span class="lineno"> 5636</span>&#160;    {</div>
<div class="line"><a name="l05637"></a><span class="lineno"> 5637</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Dynamic output tensors are not supported&quot;</span>, __func__);</div>
<div class="line"><a name="l05638"></a><span class="lineno"> 5638</span>&#160;    }</div>
<div class="line"><a name="l05639"></a><span class="lineno"> 5639</span>&#160; </div>
<div class="line"><a name="l05640"></a><span class="lineno"> 5640</span>&#160;    <span class="comment">// NOTE: Axis is an optional parameter to SQUEEZE, therefore we do not want to generate a failure</span></div>
<div class="line"><a name="l05641"></a><span class="lineno"> 5641</span>&#160;    <span class="comment">// if the operand index is out of bounds.</span></div>
<div class="line"><a name="l05642"></a><span class="lineno"> 5642</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* axisOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 1, model, <span class="keyword">false</span>);</div>
<div class="line"><a name="l05643"></a><span class="lineno"> 5643</span>&#160; </div>
<div class="line"><a name="l05644"></a><span class="lineno"> 5644</span>&#160;    <span class="keyword">const</span> uint32_t dimensionSequence[] = { 0, 1, 2, 3 };</div>
<div class="line"><a name="l05645"></a><span class="lineno"> 5645</span>&#160; </div>
<div class="line"><a name="l05646"></a><span class="lineno"> 5646</span>&#160;    std::vector&lt;int32_t&gt; axis;</div>
<div class="line"><a name="l05647"></a><span class="lineno"> 5647</span>&#160;    <span class="keywordflow">if</span> (!axisOperand)</div>
<div class="line"><a name="l05648"></a><span class="lineno"> 5648</span>&#160;    {</div>
<div class="line"><a name="l05649"></a><span class="lineno"> 5649</span>&#160;        axis.assign(dimensionSequence,</div>
<div class="line"><a name="l05650"></a><span class="lineno"> 5650</span>&#160;                    dimensionSequence + rank);</div>
<div class="line"><a name="l05651"></a><span class="lineno"> 5651</span>&#160;    }</div>
<div class="line"><a name="l05652"></a><span class="lineno"> 5652</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#ac8643aaee3eafc54336c5462b51bd53f">GetTensorInt32Values</a>(*axisOperand, axis, model, data))</div>
<div class="line"><a name="l05653"></a><span class="lineno"> 5653</span>&#160;    {</div>
<div class="line"><a name="l05654"></a><span class="lineno"> 5654</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has an invalid or unsupported axis operand&quot;</span>, __func__);</div>
<div class="line"><a name="l05655"></a><span class="lineno"> 5655</span>&#160;    }</div>
<div class="line"><a name="l05656"></a><span class="lineno"> 5656</span>&#160; </div>
<div class="line"><a name="l05657"></a><span class="lineno"> 5657</span>&#160;    std::vector&lt;uint32_t&gt; outputDims;</div>
<div class="line"><a name="l05658"></a><span class="lineno"> 5658</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; rank; i++)</div>
<div class="line"><a name="l05659"></a><span class="lineno"> 5659</span>&#160;    {</div>
<div class="line"><a name="l05660"></a><span class="lineno"> 5660</span>&#160;        <span class="keywordtype">bool</span> skipSqueeze = (std::find(axis.begin(), axis.end(), i) == axis.end());</div>
<div class="line"><a name="l05661"></a><span class="lineno"> 5661</span>&#160;        <span class="keyword">auto</span> currentDimension = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i];</div>
<div class="line"><a name="l05662"></a><span class="lineno"> 5662</span>&#160;        <span class="keywordflow">if</span> (skipSqueeze || currentDimension != 1)</div>
<div class="line"><a name="l05663"></a><span class="lineno"> 5663</span>&#160;        {</div>
<div class="line"><a name="l05664"></a><span class="lineno"> 5664</span>&#160;            outputDims.push_back(currentDimension);</div>
<div class="line"><a name="l05665"></a><span class="lineno"> 5665</span>&#160;        }</div>
<div class="line"><a name="l05666"></a><span class="lineno"> 5666</span>&#160;    }</div>
<div class="line"><a name="l05667"></a><span class="lineno"> 5667</span>&#160; </div>
<div class="line"><a name="l05668"></a><span class="lineno"> 5668</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> outShape = <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>(outputDims.size(), outputDims.data());</div>
<div class="line"><a name="l05669"></a><span class="lineno"> 5669</span>&#160; </div>
<div class="line"><a name="l05670"></a><span class="lineno"> 5670</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo = inputInfo;</div>
<div class="line"><a name="l05671"></a><span class="lineno"> 5671</span>&#160;    outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">SetShape</a>(outShape);</div>
<div class="line"><a name="l05672"></a><span class="lineno"> 5672</span>&#160; </div>
<div class="line"><a name="l05673"></a><span class="lineno"> 5673</span>&#160;    <a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a> reshapeDesc;</div>
<div class="line"><a name="l05674"></a><span class="lineno"> 5674</span>&#160;    reshapeDesc.<a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml#a1178f4dafdda81f59c15145ec327f7d9">m_TargetShape</a> = outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div>
<div class="line"><a name="l05675"></a><span class="lineno"> 5675</span>&#160; </div>
<div class="line"><a name="l05676"></a><span class="lineno"> 5676</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l05677"></a><span class="lineno"> 5677</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l05678"></a><span class="lineno"> 5678</span>&#160;    <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l05679"></a><span class="lineno"> 5679</span>&#160;                               <a class="code" href="namespacearmnn.xhtml#af5014cbc003abcf201d4372b0012734c">IsReshapeSupported</a>,</div>
<div class="line"><a name="l05680"></a><span class="lineno"> 5680</span>&#160;                               data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l05681"></a><span class="lineno"> 5681</span>&#160;                               isSupported,</div>
<div class="line"><a name="l05682"></a><span class="lineno"> 5682</span>&#160;                               setBackend,</div>
<div class="line"><a name="l05683"></a><span class="lineno"> 5683</span>&#160;                               inputInfo,</div>
<div class="line"><a name="l05684"></a><span class="lineno"> 5684</span>&#160;                               outputInfo,</div>
<div class="line"><a name="l05685"></a><span class="lineno"> 5685</span>&#160;                               reshapeDesc);</div>
<div class="line"><a name="l05686"></a><span class="lineno"> 5686</span>&#160; </div>
<div class="line"><a name="l05687"></a><span class="lineno"> 5687</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l05688"></a><span class="lineno"> 5688</span>&#160;    {</div>
<div class="line"><a name="l05689"></a><span class="lineno"> 5689</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l05690"></a><span class="lineno"> 5690</span>&#160;    }</div>
<div class="line"><a name="l05691"></a><span class="lineno"> 5691</span>&#160; </div>
<div class="line"><a name="l05692"></a><span class="lineno"> 5692</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddReshapeLayer(reshapeDesc);</div>
<div class="line"><a name="l05693"></a><span class="lineno"> 5693</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l05694"></a><span class="lineno"> 5694</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l05695"></a><span class="lineno"> 5695</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l05696"></a><span class="lineno"> 5696</span>&#160; </div>
<div class="line"><a name="l05697"></a><span class="lineno"> 5697</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data);</div>
<div class="line"><a name="l05698"></a><span class="lineno"> 5698</span>&#160;}</div>
<div class="line"><a name="l05699"></a><span class="lineno"> 5699</span>&#160; </div>
<div class="line"><a name="l05700"></a><span class="lineno"> 5700</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertStridedSlice(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l05701"></a><span class="lineno"> 5701</span>&#160;{</div>
<div class="line"><a name="l05702"></a><span class="lineno"> 5702</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertStridedSlice()&quot;</span>;</div>
<div class="line"><a name="l05703"></a><span class="lineno"> 5703</span>&#160; </div>
<div class="line"><a name="l05704"></a><span class="lineno"> 5704</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l05705"></a><span class="lineno"> 5705</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l05706"></a><span class="lineno"> 5706</span>&#160;    {</div>
<div class="line"><a name="l05707"></a><span class="lineno"> 5707</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l05708"></a><span class="lineno"> 5708</span>&#160;    }</div>
<div class="line"><a name="l05709"></a><span class="lineno"> 5709</span>&#160; </div>
<div class="line"><a name="l05710"></a><span class="lineno"> 5710</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l05711"></a><span class="lineno"> 5711</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rank = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l05712"></a><span class="lineno"> 5712</span>&#160;    <span class="keywordflow">if</span> (rank &gt; 4)</div>
<div class="line"><a name="l05713"></a><span class="lineno"> 5713</span>&#160;    {</div>
<div class="line"><a name="l05714"></a><span class="lineno"> 5714</span>&#160;        Fail(<span class="stringliteral">&quot;%s: Inputs with rank greater than 4 are not supported&quot;</span>, __func__);</div>
<div class="line"><a name="l05715"></a><span class="lineno"> 5715</span>&#160;    }</div>
<div class="line"><a name="l05716"></a><span class="lineno"> 5716</span>&#160; </div>
<div class="line"><a name="l05717"></a><span class="lineno"> 5717</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l05718"></a><span class="lineno"> 5718</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l05719"></a><span class="lineno"> 5719</span>&#160;    {</div>
<div class="line"><a name="l05720"></a><span class="lineno"> 5720</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l05721"></a><span class="lineno"> 5721</span>&#160;    }</div>
<div class="line"><a name="l05722"></a><span class="lineno"> 5722</span>&#160; </div>
<div class="line"><a name="l05723"></a><span class="lineno"> 5723</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l05724"></a><span class="lineno"> 5724</span>&#160; </div>
<div class="line"><a name="l05725"></a><span class="lineno"> 5725</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* beginOperand   = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 1, model);</div>
<div class="line"><a name="l05726"></a><span class="lineno"> 5726</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* endOperand     = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 2, model);</div>
<div class="line"><a name="l05727"></a><span class="lineno"> 5727</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* stridesOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 3, model);</div>
<div class="line"><a name="l05728"></a><span class="lineno"> 5728</span>&#160; </div>
<div class="line"><a name="l05729"></a><span class="lineno"> 5729</span>&#160;    std::vector&lt;int32_t&gt; beginValues;</div>
<div class="line"><a name="l05730"></a><span class="lineno"> 5730</span>&#160;    std::vector&lt;int32_t&gt; endValues;</div>
<div class="line"><a name="l05731"></a><span class="lineno"> 5731</span>&#160;    std::vector&lt;int32_t&gt; stridesValues;</div>
<div class="line"><a name="l05732"></a><span class="lineno"> 5732</span>&#160; </div>
<div class="line"><a name="l05733"></a><span class="lineno"> 5733</span>&#160;    <span class="comment">// The length of the beginOperand, endOperand and stridesOperand must be of a rank(input)</span></div>
<div class="line"><a name="l05734"></a><span class="lineno"> 5734</span>&#160;    <span class="keyword">auto</span> ValidateInputOperands = [&amp;] (<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>&amp; operand, std::vector&lt;int32_t&gt;&amp; operandValues)</div>
<div class="line"><a name="l05735"></a><span class="lineno"> 5735</span>&#160;    {</div>
<div class="line"><a name="l05736"></a><span class="lineno"> 5736</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#ac8643aaee3eafc54336c5462b51bd53f">GetTensorInt32Values</a>(operand, operandValues, model, data))</div>
<div class="line"><a name="l05737"></a><span class="lineno"> 5737</span>&#160;        {</div>
<div class="line"><a name="l05738"></a><span class="lineno"> 5738</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l05739"></a><span class="lineno"> 5739</span>&#160;        }</div>
<div class="line"><a name="l05740"></a><span class="lineno"> 5740</span>&#160; </div>
<div class="line"><a name="l05741"></a><span class="lineno"> 5741</span>&#160;        <span class="keywordflow">if</span> (operandValues.size() != rank)</div>
<div class="line"><a name="l05742"></a><span class="lineno"> 5742</span>&#160;        {</div>
<div class="line"><a name="l05743"></a><span class="lineno"> 5743</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l05744"></a><span class="lineno"> 5744</span>&#160;        }</div>
<div class="line"><a name="l05745"></a><span class="lineno"> 5745</span>&#160; </div>
<div class="line"><a name="l05746"></a><span class="lineno"> 5746</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l05747"></a><span class="lineno"> 5747</span>&#160;    };</div>
<div class="line"><a name="l05748"></a><span class="lineno"> 5748</span>&#160; </div>
<div class="line"><a name="l05749"></a><span class="lineno"> 5749</span>&#160;    <span class="keywordflow">if</span> (!ValidateInputOperands(*beginOperand, beginValues)</div>
<div class="line"><a name="l05750"></a><span class="lineno"> 5750</span>&#160;        || !ValidateInputOperands(*endOperand, endValues)</div>
<div class="line"><a name="l05751"></a><span class="lineno"> 5751</span>&#160;        || !ValidateInputOperands(*stridesOperand, stridesValues))</div>
<div class="line"><a name="l05752"></a><span class="lineno"> 5752</span>&#160;    {</div>
<div class="line"><a name="l05753"></a><span class="lineno"> 5753</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid input operand&quot;</span>, __func__);</div>
<div class="line"><a name="l05754"></a><span class="lineno"> 5754</span>&#160;    }</div>
<div class="line"><a name="l05755"></a><span class="lineno"> 5755</span>&#160; </div>
<div class="line"><a name="l05756"></a><span class="lineno"> 5756</span>&#160;    <span class="comment">// Stride cannot have value &#39;0&#39;</span></div>
<div class="line"><a name="l05757"></a><span class="lineno"> 5757</span>&#160;    <span class="keywordflow">if</span> (std::any_of(stridesValues.cbegin(), stridesValues.cend(), [](int32_t i){ return i == 0; }))</div>
<div class="line"><a name="l05758"></a><span class="lineno"> 5758</span>&#160;    {</div>
<div class="line"><a name="l05759"></a><span class="lineno"> 5759</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Stride must be non-zero value.&quot;</span>, __func__);</div>
<div class="line"><a name="l05760"></a><span class="lineno"> 5760</span>&#160;    }</div>
<div class="line"><a name="l05761"></a><span class="lineno"> 5761</span>&#160; </div>
<div class="line"><a name="l05762"></a><span class="lineno"> 5762</span>&#160;    <a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a> descriptor;</div>
<div class="line"><a name="l05763"></a><span class="lineno"> 5763</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a118fe06b7c2599da60398ee311ede923">m_Begin</a>.assign(beginValues.cbegin(), beginValues.cend());</div>
<div class="line"><a name="l05764"></a><span class="lineno"> 5764</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#aa68194dd6258ab5b04123005a066ea25">m_End</a>.assign(endValues.cbegin(), endValues.cend());</div>
<div class="line"><a name="l05765"></a><span class="lineno"> 5765</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a0d53caff836b84204adbd1c28752a201">m_Stride</a>.assign(stridesValues.cbegin(), stridesValues.cend());</div>
<div class="line"><a name="l05766"></a><span class="lineno"> 5766</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>;</div>
<div class="line"><a name="l05767"></a><span class="lineno"> 5767</span>&#160; </div>
<div class="line"><a name="l05768"></a><span class="lineno"> 5768</span>&#160;    <span class="comment">// Get the &quot;begin_mask&quot;, &quot;end_mask&quot;, and &quot;shrink_axis_mask&quot; flags</span></div>
<div class="line"><a name="l05769"></a><span class="lineno"> 5769</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#aa43f9c81f830559c15e5af86f8e11482">GetInputInt32</a>(operation, 4, descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a61081be1483984e33db452c75d569f51">m_BeginMask</a>, model, data) ||</div>
<div class="line"><a name="l05770"></a><span class="lineno"> 5770</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#aa43f9c81f830559c15e5af86f8e11482">GetInputInt32</a>(operation, 5, descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#ac37e49c0d6e6e54f9d2015d0f11f8ee7">m_EndMask</a>, model, data) ||</div>
<div class="line"><a name="l05771"></a><span class="lineno"> 5771</span>&#160;        !<a class="code" href="namespacearmnn__driver.xhtml#aa43f9c81f830559c15e5af86f8e11482">GetInputInt32</a>(operation, 6, descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6d0384878432cfc9652b7ae8bc59506f">m_ShrinkAxisMask</a>, model, data))</div>
<div class="line"><a name="l05772"></a><span class="lineno"> 5772</span>&#160;    {</div>
<div class="line"><a name="l05773"></a><span class="lineno"> 5773</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l05774"></a><span class="lineno"> 5774</span>&#160;    }</div>
<div class="line"><a name="l05775"></a><span class="lineno"> 5775</span>&#160; </div>
<div class="line"><a name="l05776"></a><span class="lineno"> 5776</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l05777"></a><span class="lineno"> 5777</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l05778"></a><span class="lineno"> 5778</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l05779"></a><span class="lineno"> 5779</span>&#160;    {</div>
<div class="line"><a name="l05780"></a><span class="lineno"> 5780</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l05781"></a><span class="lineno"> 5781</span>&#160;                                   <a class="code" href="namespacearmnn.xhtml#a8fdc5d28344915ccc0503e2e62b597ab">IsStridedSliceSupported</a>,</div>
<div class="line"><a name="l05782"></a><span class="lineno"> 5782</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l05783"></a><span class="lineno"> 5783</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l05784"></a><span class="lineno"> 5784</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l05785"></a><span class="lineno"> 5785</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l05786"></a><span class="lineno"> 5786</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l05787"></a><span class="lineno"> 5787</span>&#160;                                   descriptor);</div>
<div class="line"><a name="l05788"></a><span class="lineno"> 5788</span>&#160;    };</div>
<div class="line"><a name="l05789"></a><span class="lineno"> 5789</span>&#160; </div>
<div class="line"><a name="l05790"></a><span class="lineno"> 5790</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l05791"></a><span class="lineno"> 5791</span>&#160;    {</div>
<div class="line"><a name="l05792"></a><span class="lineno"> 5792</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l05793"></a><span class="lineno"> 5793</span>&#160;    }</div>
<div class="line"><a name="l05794"></a><span class="lineno"> 5794</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l05795"></a><span class="lineno"> 5795</span>&#160;    {</div>
<div class="line"><a name="l05796"></a><span class="lineno"> 5796</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l05797"></a><span class="lineno"> 5797</span>&#160;    }</div>
<div class="line"><a name="l05798"></a><span class="lineno"> 5798</span>&#160; </div>
<div class="line"><a name="l05799"></a><span class="lineno"> 5799</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l05800"></a><span class="lineno"> 5800</span>&#160;    {</div>
<div class="line"><a name="l05801"></a><span class="lineno"> 5801</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l05802"></a><span class="lineno"> 5802</span>&#160;    }</div>
<div class="line"><a name="l05803"></a><span class="lineno"> 5803</span>&#160; </div>
<div class="line"><a name="l05804"></a><span class="lineno"> 5804</span>&#160;    <span class="comment">// Check if slice can fit in a inferred output</span></div>
<div class="line"><a name="l05805"></a><span class="lineno"> 5805</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> inputShape = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div>
<div class="line"><a name="l05806"></a><span class="lineno"> 5806</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; inputShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); i++)</div>
<div class="line"><a name="l05807"></a><span class="lineno"> 5807</span>&#160;    {</div>
<div class="line"><a name="l05808"></a><span class="lineno"> 5808</span>&#160;        <span class="keywordtype">int</span> stride = descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a0d53caff836b84204adbd1c28752a201">m_Stride</a>[i];</div>
<div class="line"><a name="l05809"></a><span class="lineno"> 5809</span>&#160; </div>
<div class="line"><a name="l05810"></a><span class="lineno"> 5810</span>&#160;        <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6d0384878432cfc9652b7ae8bc59506f">m_ShrinkAxisMask</a> &amp; (1 &lt;&lt; i))</div>
<div class="line"><a name="l05811"></a><span class="lineno"> 5811</span>&#160;        {</div>
<div class="line"><a name="l05812"></a><span class="lineno"> 5812</span>&#160;            <span class="comment">// If the difference between the start point and the end point of the slice on an axis being shrunk</span></div>
<div class="line"><a name="l05813"></a><span class="lineno"> 5813</span>&#160;            <span class="comment">// is greater than 1 then throw an error as the output will not be large enough to hold the slice</span></div>
<div class="line"><a name="l05814"></a><span class="lineno"> 5814</span>&#160;            <span class="keywordflow">if</span> (((descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a118fe06b7c2599da60398ee311ede923">m_Begin</a>[i] - descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#aa68194dd6258ab5b04123005a066ea25">m_End</a>[i]) &gt; 1)</div>
<div class="line"><a name="l05815"></a><span class="lineno"> 5815</span>&#160;                || ((descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a118fe06b7c2599da60398ee311ede923">m_Begin</a>[i] - descriptor.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#aa68194dd6258ab5b04123005a066ea25">m_End</a>[i]) &lt; -1))</div>
<div class="line"><a name="l05816"></a><span class="lineno"> 5816</span>&#160;            {</div>
<div class="line"><a name="l05817"></a><span class="lineno"> 5817</span>&#160;                <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: StridedSlice: Output will not be large enough to hold the slice&quot;</span>, __func__);</div>
<div class="line"><a name="l05818"></a><span class="lineno"> 5818</span>&#160;            }</div>
<div class="line"><a name="l05819"></a><span class="lineno"> 5819</span>&#160; </div>
<div class="line"><a name="l05820"></a><span class="lineno"> 5820</span>&#160;            <span class="keywordflow">if</span>(stride &lt; 0)</div>
<div class="line"><a name="l05821"></a><span class="lineno"> 5821</span>&#160;            {</div>
<div class="line"><a name="l05822"></a><span class="lineno"> 5822</span>&#160;                <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: StridedSlice: Stride can not be negative while ShrinkAxisMask is set.&quot;</span>, __func__);</div>
<div class="line"><a name="l05823"></a><span class="lineno"> 5823</span>&#160;            }</div>
<div class="line"><a name="l05824"></a><span class="lineno"> 5824</span>&#160;        }</div>
<div class="line"><a name="l05825"></a><span class="lineno"> 5825</span>&#160;    }</div>
<div class="line"><a name="l05826"></a><span class="lineno"> 5826</span>&#160; </div>
<div class="line"><a name="l05827"></a><span class="lineno"> 5827</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddStridedSliceLayer(descriptor);</div>
<div class="line"><a name="l05828"></a><span class="lineno"> 5828</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l05829"></a><span class="lineno"> 5829</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l05830"></a><span class="lineno"> 5830</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l05831"></a><span class="lineno"> 5831</span>&#160; </div>
<div class="line"><a name="l05832"></a><span class="lineno"> 5832</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l05833"></a><span class="lineno"> 5833</span>&#160;}</div>
<div class="line"><a name="l05834"></a><span class="lineno"> 5834</span>&#160; </div>
<div class="line"><a name="l05835"></a><span class="lineno"> 5835</span>&#160;<span class="keywordtype">bool</span> Converter::ConvertTranspose(<span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">Operation</a>&amp; operation, <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model, <a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml">ConversionData</a>&amp; data)</div>
<div class="line"><a name="l05836"></a><span class="lineno"> 5836</span>&#160;{</div>
<div class="line"><a name="l05837"></a><span class="lineno"> 5837</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Converter::ConvertTranspose()&quot;</span>;</div>
<div class="line"><a name="l05838"></a><span class="lineno"> 5838</span>&#160; </div>
<div class="line"><a name="l05839"></a><span class="lineno"> 5839</span>&#160;    <a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml">LayerInputHandle</a> input = <a class="code" href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">ConvertToLayerInputHandle</a>(operation, 0, model, data);</div>
<div class="line"><a name="l05840"></a><span class="lineno"> 5840</span>&#160;    <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>())</div>
<div class="line"><a name="l05841"></a><span class="lineno"> 5841</span>&#160;    {</div>
<div class="line"><a name="l05842"></a><span class="lineno"> 5842</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has invalid inputs&quot;</span>, __func__);</div>
<div class="line"><a name="l05843"></a><span class="lineno"> 5843</span>&#160;    }</div>
<div class="line"><a name="l05844"></a><span class="lineno"> 5844</span>&#160; </div>
<div class="line"><a name="l05845"></a><span class="lineno"> 5845</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; inputInfo = input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">GetTensorInfo</a>();</div>
<div class="line"><a name="l05846"></a><span class="lineno"> 5846</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rank = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div>
<div class="line"><a name="l05847"></a><span class="lineno"> 5847</span>&#160;    <span class="keywordflow">if</span> (rank &gt; 4)</div>
<div class="line"><a name="l05848"></a><span class="lineno"> 5848</span>&#160;    {</div>
<div class="line"><a name="l05849"></a><span class="lineno"> 5849</span>&#160;        Fail(<span class="stringliteral">&quot;%s: Inputs with rank greater than 4 are not supported&quot;</span>, __func__);</div>
<div class="line"><a name="l05850"></a><span class="lineno"> 5850</span>&#160;    }</div>
<div class="line"><a name="l05851"></a><span class="lineno"> 5851</span>&#160; </div>
<div class="line"><a name="l05852"></a><span class="lineno"> 5852</span>&#160;    <span class="comment">// NOTE: Axis is an optional parameter to TRANSPOSE, therefore we do not want to generate a failure</span></div>
<div class="line"><a name="l05853"></a><span class="lineno"> 5853</span>&#160;    <span class="comment">// if the operand index is out of bounds.</span></div>
<div class="line"><a name="l05854"></a><span class="lineno"> 5854</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* permOperand = <a class="code" href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">GetInputOperand</a>(operation, 1, model, <span class="keyword">false</span>);</div>
<div class="line"><a name="l05855"></a><span class="lineno"> 5855</span>&#160; </div>
<div class="line"><a name="l05856"></a><span class="lineno"> 5856</span>&#160;    std::vector&lt;int32_t&gt; perm(rank);</div>
<div class="line"><a name="l05857"></a><span class="lineno"> 5857</span>&#160;    <span class="keywordflow">if</span> (!permOperand || (permOperand-&gt;lifetime == OperandLifeTime::NO_VALUE))</div>
<div class="line"><a name="l05858"></a><span class="lineno"> 5858</span>&#160;    {</div>
<div class="line"><a name="l05859"></a><span class="lineno"> 5859</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = rank; i &gt; 0; i--)</div>
<div class="line"><a name="l05860"></a><span class="lineno"> 5860</span>&#160;        {</div>
<div class="line"><a name="l05861"></a><span class="lineno"> 5861</span>&#160;            perm[rank - i] = armnn::numeric_cast&lt;int&gt; (i - 1);</div>
<div class="line"><a name="l05862"></a><span class="lineno"> 5862</span>&#160;        }</div>
<div class="line"><a name="l05863"></a><span class="lineno"> 5863</span>&#160;    }</div>
<div class="line"><a name="l05864"></a><span class="lineno"> 5864</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn__driver.xhtml#ac8643aaee3eafc54336c5462b51bd53f">GetTensorInt32Values</a>(*permOperand, perm, model, data))</div>
<div class="line"><a name="l05865"></a><span class="lineno"> 5865</span>&#160;    {</div>
<div class="line"><a name="l05866"></a><span class="lineno"> 5866</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Operation has an invalid or unsupported permutation operand&quot;</span>, __func__);</div>
<div class="line"><a name="l05867"></a><span class="lineno"> 5867</span>&#160;    }</div>
<div class="line"><a name="l05868"></a><span class="lineno"> 5868</span>&#160; </div>
<div class="line"><a name="l05869"></a><span class="lineno"> 5869</span>&#160;    std::vector&lt;uint32_t&gt; outputDims(perm.begin(), perm.begin() + rank);</div>
<div class="line"><a name="l05870"></a><span class="lineno"> 5870</span>&#160; </div>
<div class="line"><a name="l05871"></a><span class="lineno"> 5871</span>&#160;    <a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a> transposeDesc;</div>
<div class="line"><a name="l05872"></a><span class="lineno"> 5872</span>&#160;    transposeDesc.<a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">m_DimMappings</a> = <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a>(outputDims.data(), outputDims.size());</div>
<div class="line"><a name="l05873"></a><span class="lineno"> 5873</span>&#160; </div>
<div class="line"><a name="l05874"></a><span class="lineno"> 5874</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>* output = <a class="code" href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">GetOutputOperand</a>(operation, 0, model);</div>
<div class="line"><a name="l05875"></a><span class="lineno"> 5875</span>&#160;    <span class="keywordflow">if</span> (!output)</div>
<div class="line"><a name="l05876"></a><span class="lineno"> 5876</span>&#160;    {</div>
<div class="line"><a name="l05877"></a><span class="lineno"> 5877</span>&#160;        <span class="keywordflow">return</span> Fail(<span class="stringliteral">&quot;%s: Could not read output 0&quot;</span>, __func__);</div>
<div class="line"><a name="l05878"></a><span class="lineno"> 5878</span>&#160;    }</div>
<div class="line"><a name="l05879"></a><span class="lineno"> 5879</span>&#160; </div>
<div class="line"><a name="l05880"></a><span class="lineno"> 5880</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(*output);</div>
<div class="line"><a name="l05881"></a><span class="lineno"> 5881</span>&#160; </div>
<div class="line"><a name="l05882"></a><span class="lineno"> 5882</span>&#160;    <span class="keywordtype">bool</span> isSupported = <span class="keyword">false</span>;</div>
<div class="line"><a name="l05883"></a><span class="lineno"> 5883</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> setBackend;</div>
<div class="line"><a name="l05884"></a><span class="lineno"> 5884</span>&#160;    <span class="keyword">auto</span> validateFunc = [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo, <span class="keywordtype">bool</span>&amp; isSupported)</div>
<div class="line"><a name="l05885"></a><span class="lineno"> 5885</span>&#160;    {</div>
<div class="line"><a name="l05886"></a><span class="lineno"> 5886</span>&#160;        <a class="code" href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a>(__func__,</div>
<div class="line"><a name="l05887"></a><span class="lineno"> 5887</span>&#160;                                   IsTransposeSupported,</div>
<div class="line"><a name="l05888"></a><span class="lineno"> 5888</span>&#160;                                   data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">m_Backends</a>,</div>
<div class="line"><a name="l05889"></a><span class="lineno"> 5889</span>&#160;                                   isSupported,</div>
<div class="line"><a name="l05890"></a><span class="lineno"> 5890</span>&#160;                                   setBackend,</div>
<div class="line"><a name="l05891"></a><span class="lineno"> 5891</span>&#160;                                   inputInfo,</div>
<div class="line"><a name="l05892"></a><span class="lineno"> 5892</span>&#160;                                   outputInfo,</div>
<div class="line"><a name="l05893"></a><span class="lineno"> 5893</span>&#160;                                   transposeDesc);</div>
<div class="line"><a name="l05894"></a><span class="lineno"> 5894</span>&#160;    };</div>
<div class="line"><a name="l05895"></a><span class="lineno"> 5895</span>&#160; </div>
<div class="line"><a name="l05896"></a><span class="lineno"> 5896</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">IsDynamicTensor</a>(outputInfo))</div>
<div class="line"><a name="l05897"></a><span class="lineno"> 5897</span>&#160;    {</div>
<div class="line"><a name="l05898"></a><span class="lineno"> 5898</span>&#160;        isSupported = <a class="code" href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">AreDynamicTensorsSupported</a>();</div>
<div class="line"><a name="l05899"></a><span class="lineno"> 5899</span>&#160;    }</div>
<div class="line"><a name="l05900"></a><span class="lineno"> 5900</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l05901"></a><span class="lineno"> 5901</span>&#160;    {</div>
<div class="line"><a name="l05902"></a><span class="lineno"> 5902</span>&#160;        validateFunc(outputInfo, isSupported);</div>
<div class="line"><a name="l05903"></a><span class="lineno"> 5903</span>&#160;    }</div>
<div class="line"><a name="l05904"></a><span class="lineno"> 5904</span>&#160; </div>
<div class="line"><a name="l05905"></a><span class="lineno"> 5905</span>&#160;    <span class="keywordflow">if</span> (!isSupported)</div>
<div class="line"><a name="l05906"></a><span class="lineno"> 5906</span>&#160;    {</div>
<div class="line"><a name="l05907"></a><span class="lineno"> 5907</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l05908"></a><span class="lineno"> 5908</span>&#160;    }</div>
<div class="line"><a name="l05909"></a><span class="lineno"> 5909</span>&#160; </div>
<div class="line"><a name="l05910"></a><span class="lineno"> 5910</span>&#160;    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* <span class="keyword">const</span> layer = data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddTransposeLayer(transposeDesc);</div>
<div class="line"><a name="l05911"></a><span class="lineno"> 5911</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">SetBackendId</a>(setBackend);</div>
<div class="line"><a name="l05912"></a><span class="lineno"> 5912</span>&#160;    assert(layer != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l05913"></a><span class="lineno"> 5913</span>&#160;    input.<a class="code" href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div>
<div class="line"><a name="l05914"></a><span class="lineno"> 5914</span>&#160; </div>
<div class="line"><a name="l05915"></a><span class="lineno"> 5915</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">SetupAndTrackLayerOutputSlot</a>(operation, 0, *layer, model, data, <span class="keyword">nullptr</span>, validateFunc);</div>
<div class="line"><a name="l05916"></a><span class="lineno"> 5916</span>&#160;}</div>
<div class="line"><a name="l05917"></a><span class="lineno"> 5917</span>&#160; </div>
<div class="line"><a name="l05918"></a><span class="lineno"> 5918</span>&#160;} <span class="comment">// namespace armnn_driver</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearmnn__driver_xhtml_a5890dee5ebd8c09d4b3787136d8170d8"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a5890dee5ebd8c09d4b3787136d8170d8">armnn_driver::GetOutputOperand</a></div><div class="ttdeci">const Operand * GetOutputOperand(const Operation &amp;operation, uint32_t outputIndex, const Model &amp;model)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00662">ConversionUtils.hpp:662</a></div></div>
<div class="ttc" id="astructarmnn_1_1_q_lstm_descriptor_xhtml_ac81fb0e66dc623dc37c77f219f53a6d3"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#ac81fb0e66dc623dc37c77f219f53a6d3">armnn::QLstmDescriptor::m_CellClip</a></div><div class="ttdeci">float m_CellClip</div><div class="ttdoc">Clipping threshold value for the cell state.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01361">Descriptors.hpp:1361</a></div></div>
<div class="ttc" id="astructarmnn_1_1_q_lstm_descriptor_xhtml_a4a8ec49f130084445d44297549254780"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">armnn::QLstmDescriptor::m_LayerNormEnabled</a></div><div class="ttdeci">bool m_LayerNormEnabled</div><div class="ttdoc">Enable/disable layer normalization.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01371">Descriptors.hpp:1371</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a56e87ad879b142327b822beff44ca171"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a56e87ad879b142327b822beff44ca171">armnn_driver::IsWeightsValid</a></div><div class="ttdeci">bool IsWeightsValid(const Operation &amp;operation, uint32_t inputIndex, const Model &amp;model)</div><div class="ttdoc">Utility functions.</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00134">ConversionUtils.cpp:134</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_ad3a9c1424b37970a54624f514196b985"><div class="ttname"><a href="namespacearmnn__driver.xhtml#ad3a9c1424b37970a54624f514196b985">armnn_driver::Operation</a></div><div class="ttdeci">::android::nn::Operation Operation</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00047">ConversionUtils.hpp:47</a></div></div>
<div class="ttc" id="astructarmnn_1_1_transpose_convolution2d_descriptor_xhtml_a9bc46a2ad56319786bad30be9ab2dc6a"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a9bc46a2ad56319786bad30be9ab2dc6a">armnn::TransposeConvolution2dDescriptor::m_OutputShapeEnabled</a></div><div class="ttdeci">bool m_OutputShapeEnabled</div><div class="ttdoc">Output shape if it has been specified.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01432">Descriptors.hpp:1432</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_a35b112e30c3eb153806a2a8c16d178e3"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a35b112e30c3eb153806a2a8c16d178e3">armnn::LstmInputParams::m_CellToForgetWeights</a></div><div class="ttdeci">const ConstTensor * m_CellToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00049">LstmParams.hpp:49</a></div></div>
<div class="ttc" id="astructarmnn_1_1_instance_normalization_descriptor_xhtml_a11c821c7524251004a72ed13c510853c"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a11c821c7524251004a72ed13c510853c">armnn::InstanceNormalizationDescriptor::m_Eps</a></div><div class="ttdeci">float m_Eps</div><div class="ttdoc">Epsilon, small scalar value added to variance to avoid dividing by zero. Defaults to 1e-12f.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00837">Descriptors.hpp:837</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a242f6c2f0376aaacd7d65a6f1498dea9"><div class="ttname"><a href="namespacearmnn.xhtml#a242f6c2f0376aaacd7d65a6f1498dea9">armnn::IsSoftmaxSupported</a></div><div class="ttdeci">bool IsSoftmaxSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const SoftmaxDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_convolution2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::Convolution2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00552">Descriptors.hpp:552</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
<div class="ttc" id="anamespacearmnn_utils_xhtml_a0d3b1be320610515e0cac8d745d9f8c2"><div class="ttname"><a href="namespacearmnn_utils.xhtml#a0d3b1be320610515e0cac8d745d9f8c2">armnnUtils::ExpandDims</a></div><div class="ttdeci">armnn::TensorShape ExpandDims(const armnn::TensorShape &amp;tensorShape, int axis)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_utils_8cpp_source.xhtml#l00140">TensorUtils.cpp:140</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_info_xhtml_a48cb83dcb58c786ea36f5d37695e75b1"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a48cb83dcb58c786ea36f5d37695e75b1">armnn::QuantizedLstmInputParamsInfo::m_OutputGateBias</a></div><div class="ttdeci">const TensorInfo * m_OutputGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00152">QuantizedLstmParams.hpp:152</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aff785aa7c076b1d2f51f76fa0f0647e4"><div class="ttname"><a href="namespacearmnn.xhtml#aff785aa7c076b1d2f51f76fa0f0647e4">armnn::IsConvolution2dSupported</a></div><div class="ttdeci">bool IsConvolution2dSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="aclassarmnn__driver_1_1_converter_xhtml_ad3a9c1424b37970a54624f514196b985"><div class="ttname"><a href="classarmnn__driver_1_1_converter.xhtml#ad3a9c1424b37970a54624f514196b985">armnn_driver::Converter::Operation</a></div><div class="ttdeci">::android::nn::Operation Operation</div><div class="ttdef"><b>Definition:</b> <a href="_converter_8hpp_source.xhtml#l00028">Converter.hpp:28</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a770b51078da02f44a819e9f95d8058b5"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a770b51078da02f44a819e9f95d8058b5">armnn::TensorInfo::GetQuantizationOffset</a></div><div class="ttdeci">int32_t GetQuantizationOffset() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00478">Tensor.cpp:478</a></div></div>
<div class="ttc" id="astructarmnn_1_1_batch_mat_mul_descriptor_xhtml_acb441bb8db19bcce78d15cdd8ceb5ea0"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#acb441bb8db19bcce78d15cdd8ceb5ea0">armnn::BatchMatMulDescriptor::m_TransposeX</a></div><div class="ttdeci">bool m_TransposeX</div><div class="ttdoc">Transpose the slices of each input tensor Transpose and Adjoint can not both be set to true for the s...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01559">Descriptors.hpp:1559</a></div></div>
<div class="ttc" id="astructarmnn_1_1_transpose_convolution2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::TransposeConvolution2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01422">Descriptors.hpp:1422</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a047ca888c43bd7fb5702853bf72410d0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a047ca888c43bd7fb5702853bf72410d0">armnn::TensorInfo::GetQuantizationScale</a></div><div class="ttdeci">float GetQuantizationScale() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00461">Tensor.cpp:461</a></div></div>
<div class="ttc" id="astructarmnn_1_1_convolution2d_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::Convolution2dDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00550">Descriptors.hpp:550</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_af07c65d3b7886a00f10c69093e76a341"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#af07c65d3b7886a00f10c69093e76a341">armnn::LstmInputParamsInfo::m_InputToCellWeights</a></div><div class="ttdeci">const TensorInfo * m_InputToCellWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00091">LstmParams.hpp:91</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a7bf2bd59bc8ca21e0dd906044bfc2faf"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a7bf2bd59bc8ca21e0dd906044bfc2faf">armnn_driver::IsConnectedToDequantize</a></div><div class="ttdeci">bool IsConnectedToDequantize(armnn::IOutputSlot *ioutputSlot)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l01040">ConversionUtils.cpp:1040</a></div></div>
<div class="ttc" id="astructarmnn_1_1_q_lstm_descriptor_xhtml_aa6a518b65088f34803b3214334bdff61"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa6a518b65088f34803b3214334bdff61">armnn::QLstmDescriptor::m_ProjectionClip</a></div><div class="ttdeci">float m_ProjectionClip</div><div class="ttdoc">Clipping threshold value for the projection.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01363">Descriptors.hpp:1363</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml">armnn::LstmInputParamsInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00063">LstmParams.hpp:63</a></div></div>
<div class="ttc" id="astructarmnn_1_1_transpose_convolution2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::TransposeConvolution2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01416">Descriptors.hpp:1416</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a5cda3502382f06a64c3cbeb1829bd850"><div class="ttname"><a href="namespacearmnn.xhtml#a5cda3502382f06a64c3cbeb1829bd850">armnn::GetArgMinMaxFunctionAsCString</a></div><div class="ttdeci">constexpr char const  * GetArgMinMaxFunctionAsCString(ArgMinMaxFunction function)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00051">TypesUtils.hpp:51</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div><div class="ttdeci">@ QAsymmU8</div></div>
<div class="ttc" id="astructarmnn_1_1_fully_connected_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::FullyConnectedDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00494">Descriptors.hpp:494</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml"><div class="ttname"><a href="namespacearmnn__driver.xhtml">armnn_driver</a></div><div class="ttdoc">Helper classes.</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_device_8cpp_source.xhtml#l00037">ArmnnDevice.cpp:37</a></div></div>
<div class="ttc" id="astructarmnn_1_1_gather_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_gather_descriptor.xhtml">armnn::GatherDescriptor</a></div><div class="ttdoc">A GatherDescriptor for the GatherLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00912">Descriptors.hpp:912</a></div></div>
<div class="ttc" id="astructarmnn_1_1_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a></div><div class="ttdoc">A NormalizationDescriptor for the NormalizationLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00737">Descriptors.hpp:737</a></div></div>
<div class="ttc" id="astructarmnn_1_1_transpose_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a></div><div class="ttdoc">A TransposeDescriptor for the TransposeLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01437">Descriptors.hpp:1437</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a8d4f662a4fb5b9272724bdaeacbd370a"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a8d4f662a4fb5b9272724bdaeacbd370a">armnn_driver::ConvertPaddings</a></div><div class="ttdeci">bool ConvertPaddings(const Operation &amp;operation, const Model &amp;model, ConversionData &amp;data, unsigned int rank, armnn::PadDescriptor &amp;padDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00338">ConversionUtils.cpp:338</a></div></div>
<div class="ttc" id="astructarmnn_1_1_q_lstm_descriptor_xhtml_afec7f36158448f723b426a9527acb189"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#afec7f36158448f723b426a9527acb189">armnn::QLstmDescriptor::m_ForgetIntermediateScale</a></div><div class="ttdeci">float m_ForgetIntermediateScale</div><div class="ttdoc">Forget intermediate quantization scale.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01375">Descriptors.hpp:1375</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ac6cc8e0bd35d229486fe6d844d88e0d4"><div class="ttname"><a href="namespacearmnn.xhtml#ac6cc8e0bd35d229486fe6d844d88e0d4">armnn::IsTransposeConvolution2dSupported</a></div><div class="ttdeci">bool IsTransposeConvolution2dSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_transpose_convolution2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::TransposeConvolution2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01420">Descriptors.hpp:1420</a></div></div>
<div class="ttc" id="astructarmnn_1_1_elementwise_unary_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">armnn::ElementwiseUnaryDescriptor</a></div><div class="ttdoc">A ElementwiseUnaryDescriptor for the ElementwiseUnaryLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00109">Descriptors.hpp:109</a></div></div>
<div class="ttc" id="astructarmnn_1_1_pad_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a></div><div class="ttdoc">A PadDescriptor for the PadLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01143">Descriptors.hpp:1143</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00062">Types.hpp:62</a></div></div>
<div class="ttc" id="astructarmnn_1_1_softmax_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::SoftmaxDescriptor</a></div><div class="ttdoc">A SoftmaxDescriptor for the SoftmaxLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00157">Descriptors.hpp:157</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a57862de9b939281d1fe0242a8f04ead9"><div class="ttname"><a href="namespacearmnn.xhtml#a57862de9b939281d1fe0242a8f04ead9">armnn::IsL2NormalizationSupported</a></div><div class="ttdeci">bool IsL2NormalizationSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const L2NormalizationDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="a_test_utils_8cpp_xhtml_a0b295acb179f15eb3fb862b32008f782"><div class="ttname"><a href="_test_utils_8cpp.xhtml#a0b295acb179f15eb3fb862b32008f782">Connect</a></div><div class="ttdeci">void Connect(armnn::IConnectableLayer *from, armnn::IConnectableLayer *to, const armnn::TensorInfo &amp;tensorInfo, unsigned int fromIndex, unsigned int toIndex)</div><div class="ttdef"><b>Definition:</b> <a href="_test_utils_8cpp_source.xhtml#l00014">TestUtils.cpp:14</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_ab99b2297c5a17114926b8b47c693fe43"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#ab99b2297c5a17114926b8b47c693fe43">armnn::LstmInputParamsInfo::m_CellToInputWeights</a></div><div class="ttdeci">const TensorInfo * m_CellToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00097">LstmParams.hpp:97</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_ab3c135a0d4b1152f6b989ea6afddd6bc"><div class="ttname"><a href="namespacearmnn__driver.xhtml#ab3c135a0d4b1152f6b989ea6afddd6bc">armnn_driver::isQuantizedOperand</a></div><div class="ttdeci">bool isQuantizedOperand(const OperandType &amp;operandType)</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00505">CanonicalUtils.cpp:505</a></div></div>
<div class="ttc" id="astructarmnn_1_1_convolution2d_descriptor_xhtml_a302b688d88dd73cde0fb1faef6679907"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a302b688d88dd73cde0fb1faef6679907">armnn::Convolution2dDescriptor::m_DilationY</a></div><div class="ttdeci">uint32_t m_DilationY</div><div class="ttdoc">Dilation along y axis.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00548">Descriptors.hpp:548</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00473">Tensor.cpp:473</a></div></div>
<div class="ttc" id="astructarmnn_1_1_convolution2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::Convolution2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00540">Descriptors.hpp:540</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_a042ea9d6d3842b87f112db126e806a93"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#a042ea9d6d3842b87f112db126e806a93">armnn::LstmInputParamsInfo::m_InputGateBias</a></div><div class="ttdeci">const TensorInfo * m_InputGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00100">LstmParams.hpp:100</a></div></div>
<div class="ttc" id="astructarmnn_1_1_batch_to_space_nd_descriptor_xhtml_a3941f674c071c9503e00d2b59e92e454"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a3941f674c071c9503e00d2b59e92e454">armnn::BatchToSpaceNdDescriptor::m_Crops</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; m_Crops</div><div class="ttdoc">The values to crop from the input dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00868">Descriptors.hpp:868</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_xhtml_a435d3651482bbfcc11263b4e4e0c900f"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">armnn::QuantizedLstmInputParams::m_RecurrentToInputWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00038">QuantizedLstmParams.hpp:38</a></div></div>
<div class="ttc" id="astructarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00036">Descriptors.hpp:36</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_a56b81ca8ba4b4937e0787e4951f043fc"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a56b81ca8ba4b4937e0787e4951f043fc">armnn::LstmInputParams::m_RecurrentToOutputWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00047">LstmParams.hpp:47</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots.</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00068">INetwork.hpp:68</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::LstmDescriptor</a></div><div class="ttdoc">An LstmDescriptor for the LstmLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01049">Descriptors.hpp:1049</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorShape::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdoc">Function that calculates the tensor elements by multiplying all dimension size which are Specified.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00181">Tensor.cpp:181</a></div></div>
<div class="ttc" id="astructarmnn_1_1_fully_connected_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a></div><div class="ttdoc">A FullyConnectedDescriptor for the FullyConnectedLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00475">Descriptors.hpp:475</a></div></div>
<div class="ttc" id="astructarmnn_1_1_strided_slice_descriptor_xhtml_a61081be1483984e33db452c75d569f51"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a61081be1483984e33db452c75d569f51">armnn::StridedSliceDescriptor::m_BeginMask</a></div><div class="ttdeci">int32_t m_BeginMask</div><div class="ttdoc">Begin mask value.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01297">Descriptors.hpp:1297</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a1f6b85ab26d684241babcde2d659116b"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a1f6b85ab26d684241babcde2d659116b">armnn_driver::ConvertToLayerInputHandle</a></div><div class="ttdeci">LayerInputHandle ConvertToLayerInputHandle(const Operation &amp;operation, uint32_t inputIndex, const Model &amp;model, ConversionData &amp;data, const armnn::PermutationVector &amp;dimensionMappings, const LayerInputHandle *inputHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00204">ConversionUtils.cpp:204</a></div></div>
<div class="ttc" id="aclassarmnn__driver_1_1_const_tensor_pin_xhtml_a4103db28319d5fc58ba0b7ee20b5da22"><div class="ttname"><a href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a4103db28319d5fc58ba0b7ee20b5da22">armnn_driver::ConstTensorPin::GetConstTensorPtr</a></div><div class="ttdeci">const armnn::ConstTensor * GetConstTensorPtr() const</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00120">ConversionUtils.cpp:120</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_a4b3f6e6f2268416ffd7a34fda95ffd0b"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#a4b3f6e6f2268416ffd7a34fda95ffd0b">armnn::LstmInputParamsInfo::m_InputToForgetWeights</a></div><div class="ttdeci">const TensorInfo * m_InputToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00090">LstmParams.hpp:90</a></div></div>
<div class="ttc" id="astructarmnn_1_1_transpose_convolution2d_descriptor_xhtml_a78f5b213a603b55d0fabea389e89f203"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a78f5b213a603b55d0fabea389e89f203">armnn::TransposeConvolution2dDescriptor::m_OutputShape</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_OutputShape</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01433">Descriptors.hpp:1433</a></div></div>
<div class="ttc" id="astructarmnn_1_1_arg_min_max_descriptor_xhtml_a214c3636fdf0ea5bac8edb42d0e6c7f0"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">armnn::ArgMinMaxDescriptor::m_Axis</a></div><div class="ttdeci">int m_Axis</div><div class="ttdoc">Axis to reduce across the input tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00083">Descriptors.hpp:83</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a0a72d1f8a0d43ee551c7ac654f8816fa"><div class="ttname"><a href="namespacearmnn.xhtml#a0a72d1f8a0d43ee551c7ac654f8816fa">armnn::IsFullyConnectedSupported</a></div><div class="ttdeci">bool IsFullyConnectedSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const TensorInfo &amp;biases, const FullyConnectedDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_a33242cb43250f04f1736161ca8ad2db9"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#a33242cb43250f04f1736161ca8ad2db9">armnn::LstmInputParamsInfo::m_InputToOutputWeights</a></div><div class="ttdeci">const TensorInfo * m_InputToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00092">LstmParams.hpp:92</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a8fdc5d28344915ccc0503e2e62b597ab"><div class="ttname"><a href="namespacearmnn.xhtml#a8fdc5d28344915ccc0503e2e62b597ab">armnn::IsStridedSliceSupported</a></div><div class="ttdeci">bool IsStridedSliceSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const StridedSliceDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_space_to_batch_nd_descriptor_xhtml_a85f98c94e11f65a6b73f831735c040f3"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a85f98c94e11f65a6b73f831735c040f3">armnn::SpaceToBatchNdDescriptor::m_PadList</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; m_PadList</div><div class="ttdoc">Specifies the padding values for the input dimension: heightPad{top, bottom} widthPad{left,...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01016">Descriptors.hpp:1016</a></div></div>
<div class="ttc" id="astructarmnn_1_1_batch_mat_mul_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml">armnn::BatchMatMulDescriptor</a></div><div class="ttdoc">A BatchMatMulDescriptor for the BatchMatMul operator.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01531">Descriptors.hpp:1531</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_ae22fc962c59e7c24986718f5af0020db"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#ae22fc962c59e7c24986718f5af0020db">armnn::LstmInputParamsInfo::m_ProjectionBias</a></div><div class="ttdeci">const TensorInfo * m_ProjectionBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00105">LstmParams.hpp:105</a></div></div>
<div class="ttc" id="astructarmnn_1_1_resize_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a></div><div class="ttdoc">A ResizeDescriptor for the ResizeLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00932">Descriptors.hpp:932</a></div></div>
<div class="ttc" id="astructarmnn_1_1_fully_connected_descriptor_xhtml_a2d3dcfc10f90adedc995b64211dab6e9"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml#a2d3dcfc10f90adedc995b64211dab6e9">armnn::FullyConnectedDescriptor::m_ConstantWeights</a></div><div class="ttdeci">bool m_ConstantWeights</div><div class="ttdoc">Enable/disable constant weights and biases.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00498">Descriptors.hpp:498</a></div></div>
<div class="ttc" id="astructarmnn_1_1_strided_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a></div><div class="ttdoc">A StridedSliceDescriptor for the StridedSliceLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01250">Descriptors.hpp:1250</a></div></div>
<div class="ttc" id="astructarmnn_1_1_strided_slice_descriptor_xhtml_a118fe06b7c2599da60398ee311ede923"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a118fe06b7c2599da60398ee311ede923">armnn::StridedSliceDescriptor::m_Begin</a></div><div class="ttdeci">std::vector&lt; int &gt; m_Begin</div><div class="ttdoc">Begin values for the input that will be sliced.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01289">Descriptors.hpp:1289</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_ae28f9841f6cb1775849b7921b54da32e"><div class="ttname"><a href="namespacearmnn__driver.xhtml#ae28f9841f6cb1775849b7921b54da32e">armnn_driver::GetOptionalBool</a></div><div class="ttdeci">bool GetOptionalBool(const Operation &amp;operation, uint32_t inputIndex, const Model &amp;model, const ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00900">ConversionUtils.hpp:900</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_a4a9d678146f572808a361dbdc5489f38"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a4a9d678146f572808a361dbdc5489f38">armnn::LstmInputParams::m_CellBias</a></div><div class="ttdeci">const ConstTensor * m_CellBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00053">LstmParams.hpp:53</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_xhtml_a6e30c7b3451da3ea9cf4259fb602e6e6"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a6e30c7b3451da3ea9cf4259fb602e6e6">armnn::QuantizedLstmInputParams::m_InputToOutputWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00036">QuantizedLstmParams.hpp:36</a></div></div>
<div class="ttc" id="astructarmnn_1_1_transpose_convolution2d_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::TransposeConvolution2dDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01428">Descriptors.hpp:1428</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_a11b90bd2694aa7f4b434aadd75fbb1c2"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#a11b90bd2694aa7f4b434aadd75fbb1c2">armnn::LstmInputParamsInfo::m_RecurrentToForgetWeights</a></div><div class="ttdeci">const TensorInfo * m_RecurrentToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00094">LstmParams.hpp:94</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_xhtml_a49e11acda22742cbaf6f1b259ead0d84"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a49e11acda22742cbaf6f1b259ead0d84">armnn::QuantizedLstmInputParams::m_InputToCellWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToCellWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00035">QuantizedLstmParams.hpp:35</a></div></div>
<div class="ttc" id="a_tensor_utils_8hpp_xhtml"><div class="ttname"><a href="_tensor_utils_8hpp.xhtml">TensorUtils.hpp</a></div></div>
<div class="ttc" id="astructarmnn_1_1_origins_descriptor_xhtml_a5b192c5fcd96a0f75542524cf646b355"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml#a5b192c5fcd96a0f75542524cf646b355">armnn::OriginsDescriptor::SetConcatAxis</a></div><div class="ttdeci">void SetConcatAxis(unsigned int concatAxis)</div><div class="ttdoc">Set the concatenation axis value.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00158">Descriptors.cpp:158</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">armnn::LayerType::Shape</a></div><div class="ttdeci">@ Shape</div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_ac8643aaee3eafc54336c5462b51bd53f"><div class="ttname"><a href="namespacearmnn__driver.xhtml#ac8643aaee3eafc54336c5462b51bd53f">armnn_driver::GetTensorInt32Values</a></div><div class="ttdeci">bool GetTensorInt32Values(const Operand &amp;operand, std::vector&lt; int32_t &gt; &amp;outValues, const Model &amp;model, const ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00822">ConversionUtils.cpp:822</a></div></div>
<div class="ttc" id="astructarmnn_1_1_convolution2d_descriptor_xhtml_aa3c6a77a963a98ccb8ea7b8fd008a8c1"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa3c6a77a963a98ccb8ea7b8fd008a8c1">armnn::Convolution2dDescriptor::m_DilationX</a></div><div class="ttdeci">uint32_t m_DilationX</div><div class="ttdoc">Dilation along x axis.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00546">Descriptors.hpp:546</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_a9b18daea2e9f42386055326fd016519a"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a9b18daea2e9f42386055326fd016519a">armnn::LstmInputParams::m_OutputLayerNormWeights</a></div><div class="ttdeci">const ConstTensor * m_OutputLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00060">LstmParams.hpp:60</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_xhtml_affcee5f4ab5994a21bee3b78b4e43de3"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">armnn::QuantizedLstmInputParams::m_InputToInputWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00033">QuantizedLstmParams.hpp:33</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_ab173a067eeb7295d84f5327bcc05a6c1"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#ab173a067eeb7295d84f5327bcc05a6c1">armnn::LstmInputParamsInfo::m_CellBias</a></div><div class="ttdeci">const TensorInfo * m_CellBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00102">LstmParams.hpp:102</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a923b39ec5f83672f50289cbaf5de6798"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">armnn_driver::Model</a></div><div class="ttdeci">::android::nn::Model Model</div><div class="ttdoc">Helper classes.</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00043">ConversionUtils.hpp:43</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a85d53debffd9611a3b5bc6031afd5073"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a85d53debffd9611a3b5bc6031afd5073">armnn_driver::AreDynamicTensorsSupported</a></div><div class="ttdeci">bool AreDynamicTensorsSupported()</div><div class="ttdoc">Checks for ArmNN support of dynamic tensors.</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00500">CanonicalUtils.cpp:500</a></div></div>
<div class="ttc" id="astructarmnn_1_1_comparison_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_comparison_descriptor.xhtml">armnn::ComparisonDescriptor</a></div><div class="ttdoc">A ComparisonDescriptor for the ComparisonLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00089">Descriptors.hpp:89</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_descriptor_xhtml_ad474e5c51a0b194ef32e812b86c0cbdb"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">armnn::LstmDescriptor::m_CifgEnabled</a></div><div class="ttdeci">bool m_CifgEnabled</div><div class="ttdoc">Enable/disable cifg (coupled input &amp; forget gate).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01093">Descriptors.hpp:1093</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_xhtml_a1759754ccb88ecc9af44f3aae6e244ee"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a1759754ccb88ecc9af44f3aae6e244ee">armnn::QuantizedLstmInputParams::m_RecurrentToCellWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToCellWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00040">QuantizedLstmParams.hpp:40</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_xhtml_a56b81ca8ba4b4937e0787e4951f043fc"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a56b81ca8ba4b4937e0787e4951f043fc">armnn::QuantizedLstmInputParams::m_RecurrentToOutputWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00041">QuantizedLstmParams.hpp:41</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_info_xhtml_a6c7873a3320a59a63aa26c006db905c0"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a6c7873a3320a59a63aa26c006db905c0">armnn::QuantizedLstmInputParamsInfo::m_RecurrentToCellWeights</a></div><div class="ttdeci">const TensorInfo * m_RecurrentToCellWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00146">QuantizedLstmParams.hpp:146</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a6dac966f265381903c8ef4f392becced"><div class="ttname"><a href="namespacearmnn.xhtml#a6dac966f265381903c8ef4f392becced">armnn::GetUnaryOperationAsCString</a></div><div class="ttdeci">constexpr char const  * GetUnaryOperationAsCString(UnaryOperation operation)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00075">TypesUtils.hpp:75</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_descriptor_xhtml_a4a8ec49f130084445d44297549254780"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">armnn::LstmDescriptor::m_LayerNormEnabled</a></div><div class="ttdeci">bool m_LayerNormEnabled</div><div class="ttdoc">Enable/disable layer normalization.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01099">Descriptors.hpp:1099</a></div></div>
<div class="ttc" id="astructarmnn_1_1_views_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml">armnn::ViewsDescriptor</a></div><div class="ttdoc">A ViewsDescriptor for the SplitterLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00224">Descriptors.hpp:224</a></div></div>
<div class="ttc" id="astructarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::DepthwiseConvolution2dDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00676">Descriptors.hpp:676</a></div></div>
<div class="ttc" id="astructarmnn_1_1_mean_descriptor_xhtml_a1f0d67b087c491248bd1cde3ff995a95"><div class="ttname"><a href="structarmnn_1_1_mean_descriptor.xhtml#a1f0d67b087c491248bd1cde3ff995a95">armnn::MeanDescriptor::m_Axis</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_Axis</div><div class="ttdoc">Values for the dimensions to reduce.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01137">Descriptors.hpp:1137</a></div></div>
<div class="ttc" id="astructarmnn_1_1_convolution2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::Convolution2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00538">Descriptors.hpp:538</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2c62d8aa5aeab36458f9ecfa5db1f785"><div class="ttname"><a href="namespacearmnn.xhtml#a2c62d8aa5aeab36458f9ecfa5db1f785">armnn::IsLstmSupported</a></div><div class="ttdeci">bool IsLstmSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;scratchBuffer, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_convolution2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::Convolution2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00536">Descriptors.hpp:536</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a4c6b55ca5080b58c2cc6d7c6c7347d96"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a4c6b55ca5080b58c2cc6d7c6c7347d96">armnn_driver::GetInputActivationFunctionFromTensor</a></div><div class="ttdeci">bool GetInputActivationFunctionFromTensor(const Operation &amp;operation, uint32_t inputIndex, ActivationFn &amp;outActivationFunction, const Model &amp;model, const ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00837">ConversionUtils.hpp:837</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a37ca67c646393225921543233a873803"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a37ca67c646393225921543233a873803">armnn_driver::DequantizeAndMakeConstTensorPin</a></div><div class="ttdeci">ConstTensorPin DequantizeAndMakeConstTensorPin(const Operation &amp;operation, const Model &amp;model, const ConversionData &amp;data, size_t operandIndex, bool optional)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00731">ConversionUtils.cpp:731</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index.</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div><div class="ttdeci">@ QAsymmS8</div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_info_xhtml_a21626d0b91f8942c3ef8e48e17db9f21"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a21626d0b91f8942c3ef8e48e17db9f21">armnn::QuantizedLstmInputParamsInfo::m_ForgetGateBias</a></div><div class="ttdeci">const TensorInfo * m_ForgetGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00150">QuantizedLstmParams.hpp:150</a></div></div>
<div class="ttc" id="astructarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::DepthwiseConvolution2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00668">Descriptors.hpp:668</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ae7e8cbf71db6a490789ca6dcaa8deeae"><div class="ttname"><a href="namespacearmnn.xhtml#ae7e8cbf71db6a490789ca6dcaa8deeae">armnn::ArgMinMaxFunction</a></div><div class="ttdeci">ArgMinMaxFunction</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00102">Types.hpp:102</a></div></div>
<div class="ttc" id="astructarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_aa3c6a77a963a98ccb8ea7b8fd008a8c1"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aa3c6a77a963a98ccb8ea7b8fd008a8c1">armnn::DepthwiseConvolution2dDescriptor::m_DilationX</a></div><div class="ttdeci">uint32_t m_DilationX</div><div class="ttdoc">Dilation factor value for width dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00672">Descriptors.hpp:672</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_a15f9f65126ad3d4d82d6c19d0662ae01"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#a15f9f65126ad3d4d82d6c19d0662ae01">armnn::LstmInputParamsInfo::m_InputToInputWeights</a></div><div class="ttdeci">const TensorInfo * m_InputToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00089">LstmParams.hpp:89</a></div></div>
<div class="ttc" id="anamespacearmnn_utils_xhtml_a428a9a6ffdf0e8d723b50c038c56c336"><div class="ttname"><a href="namespacearmnn_utils.xhtml#a428a9a6ffdf0e8d723b50c038c56c336">armnnUtils::TransposeTensorShape</a></div><div class="ttdeci">armnn::TensorShape TransposeTensorShape(const armnn::TensorShape &amp;srcShape, const armnn::PermutationVector &amp;mappings)</div><div class="ttdef"><b>Definition:</b> <a href="_transpose_8cpp_source.xhtml#l00098">Transpose.cpp:98</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_a6e30c7b3451da3ea9cf4259fb602e6e6"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a6e30c7b3451da3ea9cf4259fb602e6e6">armnn::LstmInputParams::m_InputToOutputWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00043">LstmParams.hpp:43</a></div></div>
<div class="ttc" id="astructarmnn__driver_1_1_conversion_data_xhtml"><div class="ttname"><a href="structarmnn__driver_1_1_conversion_data.xhtml">armnn_driver::ConversionData</a></div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00051">ConversionUtils.hpp:51</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_output_slot_xhtml_ab4e57caf059794897b17266090ebcb39"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ab4e57caf059794897b17266090ebcb39">armnn::IOutputSlot::IsTensorInfoSet</a></div><div class="ttdeci">virtual bool IsTensorInfoSet() const =0</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_output_slot_xhtml_ac1835f8756a9f03c02fcf9664e3a0fce"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">armnn::IOutputSlot::Connect</a></div><div class="ttdeci">virtual int Connect(IInputSlot &amp;destination)=0</div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_ace7a1f1f1041b412b7d8ef82b95ff352"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#ace7a1f1f1041b412b7d8ef82b95ff352">armnn::LstmInputParams::m_ForgetGateBias</a></div><div class="ttdeci">const ConstTensor * m_ForgetGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00052">LstmParams.hpp:52</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_a1ddc4634491d95d37fe15049decadb8c"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#a1ddc4634491d95d37fe15049decadb8c">armnn::LstmInputParamsInfo::m_CellToForgetWeights</a></div><div class="ttdeci">const TensorInfo * m_CellToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00098">LstmParams.hpp:98</a></div></div>
<div class="ttc" id="astructarmnn_1_1_normalization_descriptor_xhtml_a05945f080edf694b631960728b87aadb"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml#a05945f080edf694b631960728b87aadb">armnn::NormalizationDescriptor::m_NormMethodType</a></div><div class="ttdeci">NormalizationAlgorithmMethod m_NormMethodType</div><div class="ttdoc">Normalization method algorithm to use (LocalBrightness, LocalContrast).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00763">Descriptors.hpp:763</a></div></div>
<div class="ttc" id="astructarmnn_1_1_q_lstm_descriptor_xhtml_a0477ee1b44ace6090119178eea78cb0b"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a0477ee1b44ace6090119178eea78cb0b">armnn::QLstmDescriptor::m_CellIntermediateScale</a></div><div class="ttdeci">float m_CellIntermediateScale</div><div class="ttdoc">Cell intermediate quantization scale.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01377">Descriptors.hpp:1377</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_af5014cbc003abcf201d4372b0012734c"><div class="ttname"><a href="namespacearmnn.xhtml#af5014cbc003abcf201d4372b0012734c">armnn::IsReshapeSupported</a></div><div class="ttdeci">bool IsReshapeSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const ReshapeDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aa02b9e06fb20fa3c13da0427e6ee5ab2"><div class="ttname"><a href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">armnn::GetDataTypeSize</a></div><div class="ttdeci">constexpr unsigned int GetDataTypeSize(DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00155">TypesUtils.hpp:155</a></div></div>
<div class="ttc" id="astructarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::DepthwiseConvolution2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00660">Descriptors.hpp:660</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_ad0b8c32bb5381f4cc999093ba3b98b43"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#ad0b8c32bb5381f4cc999093ba3b98b43">armnn::LstmInputParams::m_CellLayerNormWeights</a></div><div class="ttdeci">const ConstTensor * m_CellLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00059">LstmParams.hpp:59</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_afe204ca375b74e9a72640c9227918d0a"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#afe204ca375b74e9a72640c9227918d0a">armnn::LstmInputParams::m_CellToOutputWeights</a></div><div class="ttdeci">const ConstTensor * m_CellToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00050">LstmParams.hpp:50</a></div></div>
<div class="ttc" id="astructarmnn_1_1_fill_descriptor_xhtml_ab3ebc5cf4a617d43371a4cb7fecdeb32"><div class="ttname"><a href="structarmnn_1_1_fill_descriptor.xhtml#ab3ebc5cf4a617d43371a4cb7fecdeb32">armnn::FillDescriptor::m_Value</a></div><div class="ttdeci">float m_Value</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00908">Descriptors.hpp:908</a></div></div>
<div class="ttc" id="astructarmnn_1_1_q_lstm_descriptor_xhtml_aa43409f9b457352c95c89f20ce5d844d"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#aa43409f9b457352c95c89f20ce5d844d">armnn::QLstmDescriptor::m_OutputIntermediateScale</a></div><div class="ttdeci">float m_OutputIntermediateScale</div><div class="ttdoc">Output intermediate quantization scale.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01379">Descriptors.hpp:1379</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_info_xhtml_a15f9f65126ad3d4d82d6c19d0662ae01"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a15f9f65126ad3d4d82d6c19d0662ae01">armnn::QuantizedLstmInputParamsInfo::m_InputToInputWeights</a></div><div class="ttdeci">const TensorInfo * m_InputToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00139">QuantizedLstmParams.hpp:139</a></div></div>
<div class="ttc" id="astructarmnn_1_1_normalization_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::NormalizationDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00773">Descriptors.hpp:773</a></div></div>
<div class="ttc" id="astructarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::DepthwiseConvolution2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00664">Descriptors.hpp:664</a></div></div>
<div class="ttc" id="astructarmnn_1_1_batch_to_space_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a></div><div class="ttdoc">A BatchToSpaceNdDescriptor for the BatchToSpaceNdLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00843">Descriptors.hpp:843</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_aa9b4bc8d4cfb04be14771dbb1bc1a1ac"><div class="ttname"><a href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">armnn_driver::Operand</a></div><div class="ttdeci">::android::nn::Operand Operand</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00044">ConversionUtils.hpp:44</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index.</div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a0f38fa92b2468d5378258a2b074c1a31"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a0f38fa92b2468d5378258a2b074c1a31">armnn_driver::Half</a></div><div class="ttdeci">half_float::half Half</div><div class="ttdef"><b>Definition:</b> <a href="_converter_8cpp_source.xhtml#l00014">Converter.cpp:14</a></div></div>
<div class="ttc" id="astructarmnn_1_1_space_to_depth_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::SpaceToDepthDescriptor</a></div><div class="ttdoc">A SpaceToDepthDescriptor for the SpaceToDepthLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01022">Descriptors.hpp:1022</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_abc05539fc6e7907f32ef0fb242e3b3b0a78d811e98514cd165dda532286610fd2"><div class="ttname"><a href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0a78d811e98514cd165dda532286610fd2">armnn::ReduceOperation::Min</a></div><div class="ttdeci">@ Min</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_adf1e16300483fadf9fd19299ca8a67c4"><div class="ttname"><a href="namespacearmnn.xhtml#adf1e16300483fadf9fd19299ca8a67c4">armnn::IsSplitterSupported</a></div><div class="ttdeci">bool IsSplitterSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt;&gt; &amp;outputs, const ViewsDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_strided_slice_descriptor_xhtml_aa68194dd6258ab5b04123005a066ea25"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#aa68194dd6258ab5b04123005a066ea25">armnn::StridedSliceDescriptor::m_End</a></div><div class="ttdeci">std::vector&lt; int &gt; m_End</div><div class="ttdoc">End values for the input that will be sliced.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01291">Descriptors.hpp:1291</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00489">Tensor.cpp:489</a></div></div>
<div class="ttc" id="astructarmnn__driver_1_1_conversion_data_xhtml_a2db3ae8d422f17d455e0ba0cb6291d2a"><div class="ttname"><a href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">armnn_driver::ConversionData::m_Network</a></div><div class="ttdeci">armnn::INetworkPtr m_Network</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00060">ConversionUtils.hpp:60</a></div></div>
<div class="ttc" id="astructarmnn_1_1_resize_descriptor_xhtml_ae1a4b3b6c60552509b89747cebb900a2"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#ae1a4b3b6c60552509b89747cebb900a2">armnn::ResizeDescriptor::m_AlignCorners</a></div><div class="ttdeci">bool m_AlignCorners</div><div class="ttdoc">Aligned corners.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00963">Descriptors.hpp:963</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1a74a4ecd0f25e6031ef05210a0cfe51"><div class="ttname"><a href="namespacearmnn.xhtml#a1a74a4ecd0f25e6031ef05210a0cfe51">armnn::IsSubtractionSupported</a></div><div class="ttdeci">bool IsSubtractionSupported(const BackendId &amp;backend, const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2da4db0140d1a6dc69c9c82e9ef5379e"><div class="ttname"><a href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379e">armnn::LogicalBinaryOperation</a></div><div class="ttdeci">LogicalBinaryOperation</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00118">Types.hpp:118</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_a31da1ead6794dd64571afdd0b6efc771"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a31da1ead6794dd64571afdd0b6efc771">armnn::LstmInputParams::m_InputToForgetWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00041">LstmParams.hpp:41</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a0ad431ff1600c845fda078ac58a47809"><div class="ttname"><a href="namespacearmnn.xhtml#a0ad431ff1600c845fda078ac58a47809">armnn::GetLogicalBinaryOperationAsCString</a></div><div class="ttdeci">constexpr char const  * GetLogicalBinaryOperationAsCString(LogicalBinaryOperation operation)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00091">TypesUtils.hpp:91</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a7863c179ff92feec660c48ab7b95ae55"><div class="ttname"><a href="namespacearmnn.xhtml#a7863c179ff92feec660c48ab7b95ae55">armnn::ConcatDescriptor</a></div><div class="ttdeci">OriginsDescriptor ConcatDescriptor</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_fwd_8hpp_source.xhtml#l00055">DescriptorsFwd.hpp:55</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_info_xhtml_af07c65d3b7886a00f10c69093e76a341"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#af07c65d3b7886a00f10c69093e76a341">armnn::QuantizedLstmInputParamsInfo::m_InputToCellWeights</a></div><div class="ttdeci">const TensorInfo * m_InputToCellWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00141">QuantizedLstmParams.hpp:141</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="astructarmnn_1_1_fill_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fill_descriptor.xhtml">armnn::FillDescriptor</a></div><div class="ttdoc">A FillDescriptor for the FillLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00893">Descriptors.hpp:893</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a0b49aa352b84d572942185ce72cef751"><div class="ttname"><a href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">armnn::Half</a></div><div class="ttdeci">half_float::half Half</div><div class="ttdef"><b>Definition:</b> <a href="_half_8hpp_source.xhtml#l00022">Half.hpp:22</a></div></div>
<div class="ttc" id="aclassarmnn__driver_1_1_const_tensor_pin_xhtml"><div class="ttname"><a href="classarmnn__driver_1_1_const_tensor_pin.xhtml">armnn_driver::ConstTensorPin</a></div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00090">ConversionUtils.hpp:90</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a9a2af2f8c4af4f9efa8e79417d505ac4"><div class="ttname"><a href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4">armnn::ResizeMethod</a></div><div class="ttdeci">ResizeMethod</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00152">Types.hpp:152</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_abc05539fc6e7907f32ef0fb242e3b3b0aa0ec87054b5e5b7847d0d8780a01a3d5"><div class="ttname"><a href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0aa0ec87054b5e5b7847d0d8780a01a3d5">armnn::ReduceOperation::Sum</a></div><div class="ttdeci">@ Sum</div></div>
<div class="ttc" id="astructarmnn_1_1_resize_descriptor_xhtml_a46c3fa15c46fb0d1dcdc24d0ea5cb5cd"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">armnn::ResizeDescriptor::m_TargetHeight</a></div><div class="ttdeci">uint32_t m_TargetHeight</div><div class="ttdoc">Target height value.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00956">Descriptors.hpp:956</a></div></div>
<div class="ttc" id="aclassarmnn__driver_1_1_layer_input_handle_xhtml"><div class="ttname"><a href="classarmnn__driver_1_1_layer_input_handle.xhtml">armnn_driver::LayerInputHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00066">ConversionUtils.hpp:66</a></div></div>
<div class="ttc" id="astructarmnn_1_1_space_to_depth_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::SpaceToDepthDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01042">Descriptors.hpp:1042</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_output_slot_xhtml_a9943775a364fc4ab53b85ac88f311886"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">armnn::IOutputSlot::GetTensorInfo</a></div><div class="ttdeci">virtual const TensorInfo &amp; GetTensorInfo() const =0</div></div>
<div class="ttc" id="astructarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_a302b688d88dd73cde0fb1faef6679907"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a302b688d88dd73cde0fb1faef6679907">armnn::DepthwiseConvolution2dDescriptor::m_DilationY</a></div><div class="ttdeci">uint32_t m_DilationY</div><div class="ttdoc">Dilation factor value for height dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00674">Descriptors.hpp:674</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_ae83131e16df1cace69395a5f99bc5ecb"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#ae83131e16df1cace69395a5f99bc5ecb">armnn::LstmInputParams::m_RecurrentToForgetWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00045">LstmParams.hpp:45</a></div></div>
<div class="ttc" id="astructarmnn_1_1_gather_descriptor_xhtml_a35d11c7d509d1adbae1ae01c58394a7f"><div class="ttname"><a href="structarmnn_1_1_gather_descriptor.xhtml#a35d11c7d509d1adbae1ae01c58394a7f">armnn::GatherDescriptor::m_Axis</a></div><div class="ttdeci">int32_t m_Axis</div><div class="ttdoc">The axis in params to gather indices from.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00928">Descriptors.hpp:928</a></div></div>
<div class="ttc" id="aclassarmnn__driver_1_1_converter_xhtml_a923b39ec5f83672f50289cbaf5de6798"><div class="ttname"><a href="classarmnn__driver_1_1_converter.xhtml#a923b39ec5f83672f50289cbaf5de6798">armnn_driver::Converter::Model</a></div><div class="ttdeci">::android::nn::Model Model</div><div class="ttdef"><b>Definition:</b> <a href="_converter_8hpp_source.xhtml#l00024">Converter.hpp:24</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_abc05539fc6e7907f32ef0fb242e3b3b0a6a061313d22e51e0f25b7cd4dc065233"><div class="ttname"><a href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0a6a061313d22e51e0f25b7cd4dc065233">armnn::ReduceOperation::Max</a></div><div class="ttdeci">@ Max</div></div>
<div class="ttc" id="astructarmnn_1_1_arg_min_max_descriptor_xhtml_ab1ae6f520bb1a4da191a0ae907477f23"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_descriptor.xhtml#ab1ae6f520bb1a4da191a0ae907477f23">armnn::ArgMinMaxDescriptor::m_Function</a></div><div class="ttdeci">ArgMinMaxFunction m_Function</div><div class="ttdoc">Specify if the function is to find Min or Max.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00081">Descriptors.hpp:81</a></div></div>
<div class="ttc" id="astructarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::DepthwiseConvolution2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00678">Descriptors.hpp:678</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_info_xhtml_a042ea9d6d3842b87f112db126e806a93"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a042ea9d6d3842b87f112db126e806a93">armnn::QuantizedLstmInputParamsInfo::m_InputGateBias</a></div><div class="ttdeci">const TensorInfo * m_InputGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00149">QuantizedLstmParams.hpp:149</a></div></div>
<div class="ttc" id="astructarmnn_1_1_softmax_descriptor_xhtml_a214c3636fdf0ea5bac8edb42d0e6c7f0"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml#a214c3636fdf0ea5bac8edb42d0e6c7f0">armnn::SoftmaxDescriptor::m_Axis</a></div><div class="ttdeci">int m_Axis</div><div class="ttdoc">Scalar, defaulted to the last index (-1), specifying the dimension the activation will be performed o...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00172">Descriptors.hpp:172</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a2eb75cb48464cf87c290503d7bea79a4"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a2eb75cb48464cf87c290503d7bea79a4">armnn_driver::ConvertPooling2d</a></div><div class="ttdeci">bool ConvertPooling2d(const Operation &amp;operation, const char *operationName, armnn::PoolingAlgorithm poolType, const Model &amp;model, ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00380">ConversionUtils.cpp:380</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_abe18a5033f2ab9c0de82c676b48f5437a810f43f3996922151c39b76143faeecc"><div class="ttname"><a href="namespacearmnn.xhtml#abe18a5033f2ab9c0de82c676b48f5437a810f43f3996922151c39b76143faeecc">armnn::NormalizationAlgorithmChannel::Across</a></div><div class="ttdeci">@ Across</div></div>
<div class="ttc" id="astructarmnn_1_1_convolution2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::Convolution2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00534">Descriptors.hpp:534</a></div></div>
<div class="ttc" id="astructarmnn_1_1_depthwise_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a></div><div class="ttdoc">A DepthwiseConvolution2dDescriptor for the DepthwiseConvolution2dLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00627">Descriptors.hpp:627</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aded981a42027bd3302b9c0f09d988659"><div class="ttname"><a href="namespacearmnn.xhtml#aded981a42027bd3302b9c0f09d988659">armnn::GetResizeMethodAsCString</a></div><div class="ttdeci">constexpr const char * GetResizeMethodAsCString(ResizeMethod method)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00258">TypesUtils.hpp:258</a></div></div>
<div class="ttc" id="astructarmnn_1_1_mean_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mean_descriptor.xhtml">armnn::MeanDescriptor</a></div><div class="ttdoc">A MeanDescriptor for the MeanLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01119">Descriptors.hpp:1119</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ad605d1661fa0d8c7fea651d82fbe11c9ac65d2e51c610dd3853a3c777aa8bfe9d"><div class="ttname"><a href="namespacearmnn.xhtml#ad605d1661fa0d8c7fea651d82fbe11c9ac65d2e51c610dd3853a3c777aa8bfe9d">armnn::NormalizationAlgorithmMethod::LocalBrightness</a></div><div class="ttdeci">@ LocalBrightness</div><div class="ttdoc">Krichevsky 2012: Local Brightness Normalization.</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa21eebb164e4b8b9bcf64fdb4d8d5dff4">armnn::ActivationFunction::Sigmoid</a></div><div class="ttdeci">@ Sigmoid</div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_connectable_layer_xhtml_ac2dac3b61c94de52093616be4ab17f8d"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#ac2dac3b61c94de52093616be4ab17f8d">armnn::IConnectableLayer::GetNumOutputSlots</a></div><div class="ttdeci">virtual unsigned int GetNumOutputSlots() const =0</div><div class="ttdoc">Returns the number of connectable output slots.</div></div>
<div class="ttc" id="astructarmnn_1_1_normalization_descriptor_xhtml_aa70c05f1aad12fbd9d9ec43ea4557b03"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml#aa70c05f1aad12fbd9d9ec43ea4557b03">armnn::NormalizationDescriptor::m_NormSize</a></div><div class="ttdeci">uint32_t m_NormSize</div><div class="ttdoc">Depth radius value.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00765">Descriptors.hpp:765</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_aa43f9c81f830559c15e5af86f8e11482"><div class="ttname"><a href="namespacearmnn__driver.xhtml#aa43f9c81f830559c15e5af86f8e11482">armnn_driver::GetInputInt32</a></div><div class="ttdeci">bool GetInputInt32(const Operation &amp;operation, uint32_t inputIndex, int32_t &amp;outValue, const Model &amp;model, const ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00782">ConversionUtils.hpp:782</a></div></div>
<div class="ttc" id="aclassarmnn__driver_1_1_layer_input_handle_xhtml_a7a886c1735beae3f31f2062e1b327ac4"><div class="ttname"><a href="classarmnn__driver_1_1_layer_input_handle.xhtml#a7a886c1735beae3f31f2062e1b327ac4">armnn_driver::LayerInputHandle::GetOutputSlot</a></div><div class="ttdeci">armnn::IOutputSlot * GetOutputSlot() const</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00070">ConversionUtils.cpp:70</a></div></div>
<div class="ttc" id="astructarmnn_1_1_batch_to_space_nd_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::BatchToSpaceNdDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00870">Descriptors.hpp:870</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_xhtml_a4a9d678146f572808a361dbdc5489f38"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a4a9d678146f572808a361dbdc5489f38">armnn::QuantizedLstmInputParams::m_CellBias</a></div><div class="ttdeci">const ConstTensor * m_CellBias</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00045">QuantizedLstmParams.hpp:45</a></div></div>
<div class="ttc" id="astructarmnn_1_1_l2_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_l2_normalization_descriptor.xhtml">armnn::L2NormalizationDescriptor</a></div><div class="ttdoc">A L2NormalizationDescriptor for the L2NormalizationLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00777">Descriptors.hpp:777</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_a49e11acda22742cbaf6f1b259ead0d84"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a49e11acda22742cbaf6f1b259ead0d84">armnn::LstmInputParams::m_InputToCellWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToCellWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00042">LstmParams.hpp:42</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_info_xhtml_ab173a067eeb7295d84f5327bcc05a6c1"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#ab173a067eeb7295d84f5327bcc05a6c1">armnn::QuantizedLstmInputParamsInfo::m_CellBias</a></div><div class="ttdeci">const TensorInfo * m_CellBias</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00151">QuantizedLstmParams.hpp:151</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a0c70182e7d26983945ae75229d607cce"><div class="ttname"><a href="namespacearmnn.xhtml#a0c70182e7d26983945ae75229d607cce">armnn::IsResizeSupported</a></div><div class="ttdeci">bool IsResizeSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_xhtml_ae83131e16df1cace69395a5f99bc5ecb"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#ae83131e16df1cace69395a5f99bc5ecb">armnn::QuantizedLstmInputParams::m_RecurrentToForgetWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00039">QuantizedLstmParams.hpp:39</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_descriptor_xhtml_a2837b4396f20c956952d1a7286cab5f8"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">armnn::LstmDescriptor::m_PeepholeEnabled</a></div><div class="ttdeci">bool m_PeepholeEnabled</div><div class="ttdoc">Enable/disable peephole.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01095">Descriptors.hpp:1095</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2d299363c9fc33334c571fa29ca4f58c"><div class="ttname"><a href="namespacearmnn.xhtml#a2d299363c9fc33334c571fa29ca4f58c">armnn::ComparisonOperation</a></div><div class="ttdeci">ComparisonOperation</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00108">Types.hpp:108</a></div></div>
<div class="ttc" id="astructarmnn_1_1_batch_mat_mul_descriptor_xhtml_a112b466e5d2ab9d1887178adbe3afa1c"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#a112b466e5d2ab9d1887178adbe3afa1c">armnn::BatchMatMulDescriptor::m_TransposeY</a></div><div class="ttdeci">bool m_TransposeY</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01560">Descriptors.hpp:1560</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_acfe37581bc8296b5d4cdb311b1e3f142"><div class="ttname"><a href="namespacearmnn__driver.xhtml#acfe37581bc8296b5d4cdb311b1e3f142">armnn_driver::GetOptionalConvolutionDilationParams</a></div><div class="ttdeci">bool GetOptionalConvolutionDilationParams(const Operation &amp;operation, uint32_t dilationXIndex, ConvolutionDescriptor &amp;descriptor, const Model &amp;model, const ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00874">ConversionUtils.hpp:874</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_adfc2c5b834fdb89e5458ddb1d9aa7830"><div class="ttname"><a href="namespacearmnn__driver.xhtml#adfc2c5b834fdb89e5458ddb1d9aa7830">armnn_driver::GetOperandType</a></div><div class="ttdeci">bool GetOperandType(const Operation &amp;operation, uint32_t inputIndex, const Model &amp;model, OperandType &amp;type)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00683">ConversionUtils.hpp:683</a></div></div>
<div class="ttc" id="astructarmnn_1_1_space_to_batch_nd_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::SpaceToBatchNdDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01018">Descriptors.hpp:1018</a></div></div>
<div class="ttc" id="astructarmnn_1_1_resize_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::ResizeDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00961">Descriptors.hpp:961</a></div></div>
<div class="ttc" id="astructarmnn_1_1_space_to_depth_descriptor_xhtml_a6c6b8957f1e176867e5fb05b1a1a1486"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml#a6c6b8957f1e176867e5fb05b1a1a1486">armnn::SpaceToDepthDescriptor::m_BlockSize</a></div><div class="ttdeci">unsigned int m_BlockSize</div><div class="ttdoc">Scalar specifying the input block size. It must be &gt;= 1.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01039">Descriptors.hpp:1039</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a3378acd6bc867577ee4bf1657945f1b5"><div class="ttname"><a href="namespacearmnn.xhtml#a3378acd6bc867577ee4bf1657945f1b5">armnn::IsDivisionSupported</a></div><div class="ttdeci">bool IsDivisionSupported(const BackendId &amp;backend, const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a></div><div class="ttdoc">A Convolution2dDescriptor for the Convolution2dLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00502">Descriptors.hpp:502</a></div></div>
<div class="ttc" id="a_converter_8hpp_xhtml"><div class="ttname"><a href="_converter_8hpp.xhtml">Converter.hpp</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_a48cb83dcb58c786ea36f5d37695e75b1"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#a48cb83dcb58c786ea36f5d37695e75b1">armnn::LstmInputParamsInfo::m_OutputGateBias</a></div><div class="ttdeci">const TensorInfo * m_OutputGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00103">LstmParams.hpp:103</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8">armnn::UnaryOperation</a></div><div class="ttdeci">UnaryOperation</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00124">Types.hpp:124</a></div></div>
<div class="ttc" id="astructarmnn_1_1_transpose_convolution2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::TransposeConvolution2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01418">Descriptors.hpp:1418</a></div></div>
<div class="ttc" id="aclassarmnn__driver_1_1_layer_input_handle_xhtml_a9b63bdf08709bc5302b3c1a9198d06a3"><div class="ttname"><a href="classarmnn__driver_1_1_layer_input_handle.xhtml#a9b63bdf08709bc5302b3c1a9198d06a3">armnn_driver::LayerInputHandle::Connect</a></div><div class="ttdeci">void Connect(armnn::IInputSlot &amp;inputSlot)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00032">ConversionUtils.cpp:32</a></div></div>
<div class="ttc" id="aclassarmnn__driver_1_1_layer_input_handle_xhtml_a594af6896fa4bf3de9ee961fa8e2aade"><div class="ttname"><a href="classarmnn__driver_1_1_layer_input_handle.xhtml#a594af6896fa4bf3de9ee961fa8e2aade">armnn_driver::LayerInputHandle::SanitizeQuantizationScale</a></div><div class="ttdeci">void SanitizeQuantizationScale(LayerInputHandle &amp;weight, LayerInputHandle &amp;input)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00055">ConversionUtils.cpp:55</a></div></div>
<div class="ttc" id="astructarmnn_1_1_q_lstm_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml">armnn::QLstmDescriptor</a></div><div class="ttdoc">A QLstmDescriptor for the QLstmLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01327">Descriptors.hpp:1327</a></div></div>
<div class="ttc" id="astructarmnn_1_1_activation_descriptor_xhtml_a017b2990003a014234f13e999dc7c689"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a017b2990003a014234f13e999dc7c689">armnn::ActivationDescriptor::m_A</a></div><div class="ttdeci">float m_A</div><div class="ttdoc">Alpha upper bound value used by the activation functions. (BoundedReLu, Linear, TanH,...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00061">Descriptors.hpp:61</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_acd62ec697055015572a6ba61eaba4f1a"><div class="ttname"><a href="namespacearmnn__driver.xhtml#acd62ec697055015572a6ba61eaba4f1a">armnn_driver::GetOptionalInputActivation</a></div><div class="ttdeci">bool GetOptionalInputActivation(const Operation &amp;operation, uint32_t inputIndex, ActivationFn &amp;activationFunction, const Model &amp;model, const ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00853">ConversionUtils.hpp:853</a></div></div>
<div class="ttc" id="astructarmnn_1_1_instance_normalization_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::InstanceNormalizationDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00839">Descriptors.hpp:839</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_ab85cd8cc10c96a7c99c14042c251fc48"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#ab85cd8cc10c96a7c99c14042c251fc48">armnn::TensorInfo::HasPerAxisQuantization</a></div><div class="ttdeci">bool HasPerAxisQuantization() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00446">Tensor.cpp:446</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aabb76a77e95921785f576bb29b495cd8"><div class="ttname"><a href="namespacearmnn.xhtml#aabb76a77e95921785f576bb29b495cd8">armnn::GetComparisonOperationAsCString</a></div><div class="ttdeci">constexpr char const  * GetComparisonOperationAsCString(ComparisonOperation operation)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00061">TypesUtils.hpp:61</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a14977f94479f2f7e13bdf915ac8ce8d0"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a14977f94479f2f7e13bdf915ac8ce8d0">armnn_driver::GetInputOperand</a></div><div class="ttdeci">const Operand * GetInputOperand(const Operation &amp;operation, uint32_t inputIndex, const Model &amp;model, bool failOnIndexOutOfBounds=true)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00643">ConversionUtils.hpp:643</a></div></div>
<div class="ttc" id="astructarmnn_1_1_softmax_descriptor_xhtml_a8275d51ef9a584feb95726ea0522f6e5"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">armnn::SoftmaxDescriptor::m_Beta</a></div><div class="ttdeci">float m_Beta</div><div class="ttdoc">Exponentiation value.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00170">Descriptors.hpp:170</a></div></div>
<div class="ttc" id="astructarmnn_1_1_resize_descriptor_xhtml_a869254cb56968986a78a79e1d6d4a86b"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a869254cb56968986a78a79e1d6d4a86b">armnn::ResizeDescriptor::m_Method</a></div><div class="ttdeci">ResizeMethod m_Method</div><div class="ttdoc">The Interpolation method to use (Bilinear, NearestNeighbor).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00959">Descriptors.hpp:959</a></div></div>
<div class="ttc" id="aclassarmnn__driver_1_1_converter_xhtml_a066acd78f531b709b725a730bfbee887"><div class="ttname"><a href="classarmnn__driver_1_1_converter.xhtml#a066acd78f531b709b725a730bfbee887">armnn_driver::Converter::ConvertOperation</a></div><div class="ttdeci">static bool ConvertOperation(const Operation &amp;operation, const Model &amp;model, ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_converter_8cpp_source.xhtml#l00021">Converter.cpp:21</a></div></div>
<div class="ttc" id="astructarmnn_1_1_q_lstm_descriptor_xhtml_af8f724af7210b52529216feefa993c98"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#af8f724af7210b52529216feefa993c98">armnn::QLstmDescriptor::m_HiddenStateScale</a></div><div class="ttdeci">float m_HiddenStateScale</div><div class="ttdoc">Hidden State quantization scale.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01383">Descriptors.hpp:1383</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_aa9ef723ace8562b9636e8387a120fbde"><div class="ttname"><a href="namespacearmnn__driver.xhtml#aa9ef723ace8562b9636e8387a120fbde">armnn_driver::GetInputPaddingScheme</a></div><div class="ttdeci">bool GetInputPaddingScheme(const Operation &amp;operation, uint32_t inputIndex, PaddingScheme &amp;outPaddingScheme, const Model &amp;model, const ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00761">ConversionUtils.cpp:761</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="astructarmnn_1_1_transpose_descriptor_xhtml_a14433af2b223695b40d8c8f8ba2ebb8f"><div class="ttname"><a href="structarmnn_1_1_transpose_descriptor.xhtml#a14433af2b223695b40d8c8f8ba2ebb8f">armnn::TransposeDescriptor::m_DimMappings</a></div><div class="ttdeci">PermutationVector m_DimMappings</div><div class="ttdoc">Indicates how to translate tensor elements from a given source into the target destination,...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01461">Descriptors.hpp:1461</a></div></div>
<div class="ttc" id="astructarmnn_1_1_q_lstm_descriptor_xhtml_a4556cbd764d4848d8ad0637a9eed580d"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a4556cbd764d4848d8ad0637a9eed580d">armnn::QLstmDescriptor::m_HiddenStateZeroPoint</a></div><div class="ttdeci">int32_t m_HiddenStateZeroPoint</div><div class="ttdoc">Hidden State zero point.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01381">Descriptors.hpp:1381</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_a435d3651482bbfcc11263b4e4e0c900f"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a435d3651482bbfcc11263b4e4e0c900f">armnn::LstmInputParams::m_RecurrentToInputWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00044">LstmParams.hpp:44</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_a513ad7774e0f8969ab68d91a04ecca65"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#a513ad7774e0f8969ab68d91a04ecca65">armnn::LstmInputParamsInfo::m_ForgetLayerNormWeights</a></div><div class="ttdeci">const TensorInfo * m_ForgetLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00107">LstmParams.hpp:107</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_info_xhtml_a11b90bd2694aa7f4b434aadd75fbb1c2"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a11b90bd2694aa7f4b434aadd75fbb1c2">armnn::QuantizedLstmInputParamsInfo::m_RecurrentToForgetWeights</a></div><div class="ttdeci">const TensorInfo * m_RecurrentToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00145">QuantizedLstmParams.hpp:145</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_xhtml"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml">armnn::QuantizedLstmInputParams</a></div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00013">QuantizedLstmParams.hpp:13</a></div></div>
<div class="ttc" id="astructarmnn_1_1_strided_slice_descriptor_xhtml_a0d53caff836b84204adbd1c28752a201"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a0d53caff836b84204adbd1c28752a201">armnn::StridedSliceDescriptor::m_Stride</a></div><div class="ttdeci">std::vector&lt; int &gt; m_Stride</div><div class="ttdoc">Stride values for the input that will be sliced.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01293">Descriptors.hpp:1293</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a208149d5c08f84debf8b265bb508fe02"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a208149d5c08f84debf8b265bb508fe02">armnn_driver::IsDynamicTensor</a></div><div class="ttdeci">bool IsDynamicTensor(const armnn::TensorInfo &amp;tensorInfo)</div><div class="ttdoc">Checks if a tensor info represents a dynamic tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00486">CanonicalUtils.cpp:486</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div><div class="ttdeci">@ NHWC</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1b4b4304198668d3af8e9d0c40d9343d"><div class="ttname"><a href="namespacearmnn.xhtml#a1b4b4304198668d3af8e9d0c40d9343d">armnn::IsDequantizeSupported</a></div><div class="ttdeci">bool IsDequantizeSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_ab8c7712c0c6bc427dede8c76945e8f89"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#ab8c7712c0c6bc427dede8c76945e8f89">armnn::LstmInputParamsInfo::m_InputLayerNormWeights</a></div><div class="ttdeci">const TensorInfo * m_InputLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00106">LstmParams.hpp:106</a></div></div>
<div class="ttc" id="astructarmnn_1_1_activation_descriptor_xhtml_af10fa7883e3579950f477bee92a64844"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">armnn::ActivationDescriptor::m_Function</a></div><div class="ttdeci">ActivationFunction m_Function</div><div class="ttdoc">The activation function to use (Sigmoid, TanH, Linear, ReLu, BoundedReLu, SoftReLu,...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00059">Descriptors.hpp:59</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_a9935ad8aff43cf1e0622bf6d82710513"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#a9935ad8aff43cf1e0622bf6d82710513">armnn::LstmInputParamsInfo::m_OutputLayerNormWeights</a></div><div class="ttdeci">const TensorInfo * m_OutputLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00109">LstmParams.hpp:109</a></div></div>
<div class="ttc" id="astructarmnn_1_1_convolution2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::Convolution2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00542">Descriptors.hpp:542</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_ac6fb4a3a8e7e8a359ac34badc8178b1a"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#ac6fb4a3a8e7e8a359ac34badc8178b1a">armnn::LstmInputParamsInfo::m_ProjectionWeights</a></div><div class="ttdeci">const TensorInfo * m_ProjectionWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00104">LstmParams.hpp:104</a></div></div>
<div class="ttc" id="astructarmnn_1_1_normalization_descriptor_xhtml_a8526ea7cf860d8e7f8340e9f9354f9f0"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml#a8526ea7cf860d8e7f8340e9f9354f9f0">armnn::NormalizationDescriptor::m_K</a></div><div class="ttdeci">float m_K</div><div class="ttdoc">Kappa value used for the across channel normalization equation.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00771">Descriptors.hpp:771</a></div></div>
<div class="ttc" id="astructarmnn_1_1_pad_descriptor_xhtml_a410fa919f78af0f0f100bd1594eca4ab"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml#a410fa919f78af0f0f100bd1594eca4ab">armnn::PadDescriptor::m_PadValue</a></div><div class="ttdeci">float m_PadValue</div><div class="ttdoc">Optional value to use for padding, defaults to 0.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01168">Descriptors.hpp:1168</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_permutation_vector_xhtml"><div class="ttname"><a href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a></div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00295">Types.hpp:295</a></div></div>
<div class="ttc" id="aclassarmnn__driver_1_1_layer_input_handle_xhtml_ac532c4b500b1a85ea22217f2c65a70ed"><div class="ttname"><a href="classarmnn__driver_1_1_layer_input_handle.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">armnn_driver::LayerInputHandle::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00027">ConversionUtils.cpp:27</a></div></div>
<div class="ttc" id="astructarmnn_1_1_batch_to_space_nd_descriptor_xhtml_a02e143524aefddd40b485fcf7dea6696"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">armnn::BatchToSpaceNdDescriptor::m_BlockShape</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_BlockShape</div><div class="ttdoc">Block shape values.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00866">Descriptors.hpp:866</a></div></div>
<div class="ttc" id="astructarmnn_1_1_strided_slice_descriptor_xhtml_a6d0384878432cfc9652b7ae8bc59506f"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6d0384878432cfc9652b7ae8bc59506f">armnn::StridedSliceDescriptor::m_ShrinkAxisMask</a></div><div class="ttdeci">int32_t m_ShrinkAxisMask</div><div class="ttdoc">Shrink axis mask value. If set, the nth specification shrinks the dimensionality by 1.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01302">Descriptors.hpp:1302</a></div></div>
<div class="ttc" id="astructarmnn_1_1_space_to_batch_nd_descriptor_xhtml_a02e143524aefddd40b485fcf7dea6696"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml#a02e143524aefddd40b485fcf7dea6696">armnn::SpaceToBatchNdDescriptor::m_BlockShape</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; m_BlockShape</div><div class="ttdoc">Block shape value.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01013">Descriptors.hpp:1013</a></div></div>
<div class="ttc" id="astructarmnn_1_1_normalization_descriptor_xhtml_a8275d51ef9a584feb95726ea0522f6e5"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">armnn::NormalizationDescriptor::m_Beta</a></div><div class="ttdeci">float m_Beta</div><div class="ttdoc">Beta value for the normalization equation.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00769">Descriptors.hpp:769</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_a1759754ccb88ecc9af44f3aae6e244ee"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a1759754ccb88ecc9af44f3aae6e244ee">armnn::LstmInputParams::m_RecurrentToCellWeights</a></div><div class="ttdeci">const ConstTensor * m_RecurrentToCellWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00046">LstmParams.hpp:46</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a87f06345ddd902d027eb8f792ca8cdb4"><div class="ttname"><a href="namespacearmnn.xhtml#a87f06345ddd902d027eb8f792ca8cdb4">armnn::IsDepthwiseConvolutionSupported</a></div><div class="ttdeci">bool IsDepthwiseConvolutionSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_descriptor_xhtml_a531a3907ec13d3772370da88030191a5"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">armnn::LstmDescriptor::m_ClippingThresCell</a></div><div class="ttdeci">float m_ClippingThresCell</div><div class="ttdoc">Clipping threshold value for the cell state.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01089">Descriptors.hpp:1089</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_connectable_layer_xhtml_a99cc75f524d831824c5f3730a88e9ca3"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a99cc75f524d831824c5f3730a88e9ca3">armnn::IConnectableLayer::SetBackendId</a></div><div class="ttdeci">virtual void SetBackendId(const BackendId &amp;id)=0</div><div class="ttdoc">Set the backend of the IConnectableLayer.</div></div>
<div class="ttc" id="astructarmnn_1_1_origins_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml">armnn::OriginsDescriptor</a></div><div class="ttdoc">An OriginsDescriptor for the ConcatLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00181">Descriptors.hpp:181</a></div></div>
<div class="ttc" id="astructarmnn_1_1_reshape_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a></div><div class="ttdoc">A ReshapeDescriptor for the ReshapeLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00970">Descriptors.hpp:970</a></div></div>
<div class="ttc" id="astructarmnn_1_1_transpose_convolution2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::TransposeConvolution2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01430">Descriptors.hpp:1430</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdoc">Function that returns the tensor rank.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00174">Tensor.cpp:174</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_ab03e6e1514f74427916c892f473fe04c"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#ab03e6e1514f74427916c892f473fe04c">armnn::LstmInputParams::m_ProjectionWeights</a></div><div class="ttdeci">const ConstTensor * m_ProjectionWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00055">LstmParams.hpp:55</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_affcee5f4ab5994a21bee3b78b4e43de3"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#affcee5f4ab5994a21bee3b78b4e43de3">armnn::LstmInputParams::m_InputToInputWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00040">LstmParams.hpp:40</a></div></div>
<div class="ttc" id="astructarmnn_1_1_transpose_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">armnn::TransposeConvolution2dDescriptor</a></div><div class="ttdoc">A TransposeConvolution2dDescriptor for the TransposeConvolution2dLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01387">Descriptors.hpp:1387</a></div></div>
<div class="ttc" id="astructarmnn_1_1_fully_connected_descriptor_xhtml_a281fcaec86e17c97f7b8402633f6b55a"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml#a281fcaec86e17c97f7b8402633f6b55a">armnn::FullyConnectedDescriptor::m_TransposeWeightMatrix</a></div><div class="ttdeci">bool m_TransposeWeightMatrix</div><div class="ttdoc">Enable/disable transpose weight matrix.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00496">Descriptors.hpp:496</a></div></div>
<div class="ttc" id="astructarmnn_1_1_l2_normalization_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_l2_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::L2NormalizationDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00792">Descriptors.hpp:792</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a8b8fc85ce966c035d789cf22db5088a1"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">armnn::TensorInfo::GetQuantizationDim</a></div><div class="ttdeci">Optional&lt; unsigned int &gt; GetQuantizationDim() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00494">Tensor.cpp:494</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_info_xhtml_af434b509cd5232ef762c4b21b2dfaae0"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#af434b509cd5232ef762c4b21b2dfaae0">armnn::QuantizedLstmInputParamsInfo::m_RecurrentToOutputWeights</a></div><div class="ttdeci">const TensorInfo * m_RecurrentToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00147">QuantizedLstmParams.hpp:147</a></div></div>
<div class="ttc" id="a_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="aclassarmnn__driver_1_1_const_tensor_pin_xhtml_a0325a5d8b692252432a6bf2069cefebf"><div class="ttname"><a href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a0325a5d8b692252432a6bf2069cefebf">armnn_driver::ConstTensorPin::IsOptional</a></div><div class="ttdeci">bool IsOptional() const</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00110">ConversionUtils.cpp:110</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_xhtml_ace7a1f1f1041b412b7d8ef82b95ff352"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#ace7a1f1f1041b412b7d8ef82b95ff352">armnn::QuantizedLstmInputParams::m_ForgetGateBias</a></div><div class="ttdeci">const ConstTensor * m_ForgetGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00044">QuantizedLstmParams.hpp:44</a></div></div>
<div class="ttc" id="aclassarmnn_utils_1_1_data_layout_indexed_xhtml"><div class="ttname"><a href="classarmnn_utils_1_1_data_layout_indexed.xhtml">armnnUtils::DataLayoutIndexed</a></div><div class="ttdoc">Provides access to the appropriate indexes for Channels, Height and Width based on DataLayout.</div><div class="ttdef"><b>Definition:</b> <a href="_data_layout_indexed_8hpp_source.xhtml#l00017">DataLayoutIndexed.hpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa23b68da1de2b77d74da9da2635722a3e">armnn::ActivationFunction::TanH</a></div><div class="ttdeci">@ TanH</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a977729771e5ab4263e933f785fa532a6"><div class="ttname"><a href="namespacearmnn.xhtml#a977729771e5ab4263e933f785fa532a6">armnn::IsMaximumSupported</a></div><div class="ttdeci">bool IsMaximumSupported(const BackendId &amp;backend, const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, char *reasonIfUnSupported=nullptr, size_t reasonIfUnSupportedMaxLength=0)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_info_xhtml_a9ab864961ded72f5ce7ea4eb9921f826"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a9ab864961ded72f5ce7ea4eb9921f826">armnn::QuantizedLstmInputParamsInfo::m_RecurrentToInputWeights</a></div><div class="ttdeci">const TensorInfo * m_RecurrentToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00144">QuantizedLstmParams.hpp:144</a></div></div>
<div class="ttc" id="astructarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::DepthwiseConvolution2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00662">Descriptors.hpp:662</a></div></div>
<div class="ttc" id="aclassarmnn__driver_1_1_layer_input_handle_xhtml_acbafd23115b06f0a82eab45bd1e3cff9"><div class="ttname"><a href="classarmnn__driver_1_1_layer_input_handle.xhtml#acbafd23115b06f0a82eab45bd1e3cff9">armnn_driver::LayerInputHandle::GetTensorInfo</a></div><div class="ttdeci">const armnn::TensorInfo &amp; GetTensorInfo() const</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00050">ConversionUtils.cpp:50</a></div></div>
<div class="ttc" id="astructarmnn_1_1_logical_binary_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_logical_binary_descriptor.xhtml">armnn::LogicalBinaryDescriptor</a></div><div class="ttdoc">A LogicalBinaryDescriptor for the LogicalBinaryLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01465">Descriptors.hpp:1465</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_descriptor_xhtml_a6c9de81fc65b3c4924cab11907075a17"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">armnn::LstmDescriptor::m_ProjectionEnabled</a></div><div class="ttdeci">bool m_ProjectionEnabled</div><div class="ttdoc">Enable/disable the projection layer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01097">Descriptors.hpp:1097</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_abb893c7adb7b64d0964bd244c46dd06b"><div class="ttname"><a href="namespacearmnn.xhtml#abb893c7adb7b64d0964bd244c46dd06b">armnn::IsBatchToSpaceNdSupported</a></div><div class="ttdeci">bool IsBatchToSpaceNdSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const BatchToSpaceNdDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a8c749c18e62c59a5c1254aac342c995a"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a8c749c18e62c59a5c1254aac342c995a">armnn_driver::ConvertOperationInputToConstTensorPin</a></div><div class="ttdeci">ConstTensorPin ConvertOperationInputToConstTensorPin(const Operation &amp;operation, uint32_t inputIndex, const Model &amp;model, const ConversionData &amp;data, const armnn::PermutationVector &amp;dimensionMappings=g_DontPermute, const armnn::TensorShape *overrideTensorShape=nullptr, bool optional=false)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00718">ConversionUtils.hpp:718</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a29bdc2efd75bb437f4292dd9fcb5c89a"><div class="ttname"><a href="namespacearmnn.xhtml#a29bdc2efd75bb437f4292dd9fcb5c89a">armnn::IsMinimumSupported</a></div><div class="ttdeci">bool IsMinimumSupported(const BackendId &amp;backend, const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_q_lstm_descriptor_xhtml_a09e1f097944f61cc901240f9300364cf"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a09e1f097944f61cc901240f9300364cf">armnn::QLstmDescriptor::m_InputIntermediateScale</a></div><div class="ttdeci">float m_InputIntermediateScale</div><div class="ttdoc">Input intermediate quantization scale.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01373">Descriptors.hpp:1373</a></div></div>
<div class="ttc" id="astructarmnn_1_1_strided_slice_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::StridedSliceDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01310">Descriptors.hpp:1310</a></div></div>
<div class="ttc" id="astructarmnn_1_1_mean_descriptor_xhtml_a28e0548abfc4e79c48f29a3d11a062e9"><div class="ttname"><a href="structarmnn_1_1_mean_descriptor.xhtml#a28e0548abfc4e79c48f29a3d11a062e9">armnn::MeanDescriptor::m_KeepDims</a></div><div class="ttdeci">bool m_KeepDims</div><div class="ttdoc">Enable/disable keep dimensions. If true, then the reduced dimensions that are of length 1 are kept.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01139">Descriptors.hpp:1139</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_ae059aea66ee0867a204aa2f2d9abb42c"><div class="ttname"><a href="namespacearmnn__driver.xhtml#ae059aea66ee0867a204aa2f2d9abb42c">armnn_driver::g_DontPermute</a></div><div class="ttdeci">const armnn::PermutationVector g_DontPermute</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00038">CanonicalUtils.cpp:38</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a79698fa98352bffccc6723de84677680"><div class="ttname"><a href="namespacearmnn.xhtml#a79698fa98352bffccc6723de84677680">armnn::IsMeanSupported</a></div><div class="ttdeci">bool IsMeanSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const MeanDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_transpose_convolution2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::TransposeConvolution2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01424">Descriptors.hpp:1424</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a23d54c0b96b63178811174d5e7b2d328"><div class="ttname"><a href="namespacearmnn.xhtml#a23d54c0b96b63178811174d5e7b2d328">armnn::IsNormalizationSupported</a></div><div class="ttdeci">bool IsNormalizationSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const NormalizationDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a3f3a756df9dee4b33566cddd786b83c9"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a3f3a756df9dee4b33566cddd786b83c9">armnn_driver::OptionalDataLayout</a></div><div class="ttdeci">armnn::DataLayout OptionalDataLayout(const Operation &amp;operation, uint32_t inputIndex, const Model &amp;model, ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00853">ConversionUtils.cpp:853</a></div></div>
<div class="ttc" id="astructarmnn_1_1_q_lstm_descriptor_xhtml_ad474e5c51a0b194ef32e812b86c0cbdb"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">armnn::QLstmDescriptor::m_CifgEnabled</a></div><div class="ttdeci">bool m_CifgEnabled</div><div class="ttdoc">Enable/disable CIFG (coupled input &amp; forget gate).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01365">Descriptors.hpp:1365</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_ac092fff5c81f7938eea9a2479f014c66"><div class="ttname"><a href="namespacearmnn__driver.xhtml#ac092fff5c81f7938eea9a2479f014c66">armnn_driver::GetInputActivationFunction</a></div><div class="ttdeci">bool GetInputActivationFunction(const Operation &amp;operation, uint32_t inputIndex, ActivationFn &amp;outActivationFunction, const Model &amp;model, const ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00823">ConversionUtils.hpp:823</a></div></div>
<div class="ttc" id="astructarmnn_1_1_strided_slice_descriptor_xhtml_ac37e49c0d6e6e54f9d2015d0f11f8ee7"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#ac37e49c0d6e6e54f9d2015d0f11f8ee7">armnn::StridedSliceDescriptor::m_EndMask</a></div><div class="ttdeci">int32_t m_EndMask</div><div class="ttdoc">End mask value.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01300">Descriptors.hpp:1300</a></div></div>
<div class="ttc" id="astructarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::DepthwiseConvolution2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00666">Descriptors.hpp:666</a></div></div>
<div class="ttc" id="aclassarmnn__driver_1_1_const_tensor_pin_xhtml_a971023b9874b0d773e8aa4c6d6744a2b"><div class="ttname"><a href="classarmnn__driver_1_1_const_tensor_pin.xhtml#a971023b9874b0d773e8aa4c6d6744a2b">armnn_driver::ConstTensorPin::GetConstTensor</a></div><div class="ttdeci">const armnn::ConstTensor &amp; GetConstTensor() const</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00115">ConversionUtils.cpp:115</a></div></div>
<div class="ttc" id="astructarmnn_1_1_instance_normalization_descriptor_xhtml_a5e078fd505aef7bccaa05c8058e096cc"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a5e078fd505aef7bccaa05c8058e096cc">armnn::InstanceNormalizationDescriptor::m_Gamma</a></div><div class="ttdeci">float m_Gamma</div><div class="ttdoc">Gamma, the scale scalar value applied for the normalized tensor. Defaults to 1.0.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00833">Descriptors.hpp:833</a></div></div>
<div class="ttc" id="aclassarmnn__driver_1_1_const_tensor_pin_xhtml_ac532c4b500b1a85ea22217f2c65a70ed"><div class="ttname"><a href="classarmnn__driver_1_1_const_tensor_pin.xhtml#ac532c4b500b1a85ea22217f2c65a70ed">armnn_driver::ConstTensorPin::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00105">ConversionUtils.cpp:105</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_xhtml_a31da1ead6794dd64571afdd0b6efc771"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a31da1ead6794dd64571afdd0b6efc771">armnn::QuantizedLstmInputParams::m_InputToForgetWeights</a></div><div class="ttdeci">const ConstTensor * m_InputToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00034">QuantizedLstmParams.hpp:34</a></div></div>
<div class="ttc" id="astructarmnn_1_1_normalization_descriptor_xhtml_afe1f0f09d49ad2befc01f8789187b7dd"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml#afe1f0f09d49ad2befc01f8789187b7dd">armnn::NormalizationDescriptor::m_NormChannelType</a></div><div class="ttdeci">NormalizationAlgorithmChannel m_NormChannelType</div><div class="ttdoc">Normalization channel algorithm to use (Across, Within).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00761">Descriptors.hpp:761</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_a484bafa2f8453a7c5a4a00b92a61b006"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a484bafa2f8453a7c5a4a00b92a61b006">armnn::LstmInputParams::m_CellToInputWeights</a></div><div class="ttdeci">const ConstTensor * m_CellToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00048">LstmParams.hpp:48</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_descriptor_xhtml_ae1b07ed928036004bd257169e5aeeef4"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">armnn::LstmDescriptor::m_ActivationFunc</a></div><div class="ttdeci">uint32_t m_ActivationFunc</div><div class="ttdoc">The activation function to use.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01087">Descriptors.hpp:1087</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a733ae6b70d0bfa43433c3e7606992328"><div class="ttname"><a href="namespacearmnn.xhtml#a733ae6b70d0bfa43433c3e7606992328">armnn::CreateDescriptorForConcatenation</a></div><div class="ttdeci">OriginsDescriptor CreateDescriptorForConcatenation(TensorShapeIt first, TensorShapeIt last, unsigned int concatenationDimension)</div><div class="ttdoc">Convenience template to create an OriginsDescriptor to use when creating a ConcatLayer for performing...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00268">Descriptors.hpp:268</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_descriptor_xhtml_a86e88bef0df4df96df752b4b8955a3af"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">armnn::LstmDescriptor::m_ClippingThresProj</a></div><div class="ttdeci">float m_ClippingThresProj</div><div class="ttdoc">Clipping threshold value for the projection.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01091">Descriptors.hpp:1091</a></div></div>
<div class="ttc" id="astructarmnn_1_1_arg_min_max_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_descriptor.xhtml">armnn::ArgMinMaxDescriptor</a></div><div class="ttdoc">An ArgMinMaxDescriptor for ArgMinMaxLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00067">Descriptors.hpp:67</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_abe8889e8150beef5fd204b2d87b49298"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abe8889e8150beef5fd204b2d87b49298">armnn::TensorInfo::SetShape</a></div><div class="ttdeci">void SetShape(const TensorShape &amp;newShape)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00193">Tensor.hpp:193</a></div></div>
<div class="ttc" id="astructarmnn_1_1_q_lstm_descriptor_xhtml_a2837b4396f20c956952d1a7286cab5f8"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">armnn::QLstmDescriptor::m_PeepholeEnabled</a></div><div class="ttdeci">bool m_PeepholeEnabled</div><div class="ttdoc">Enable/disable peephole.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01367">Descriptors.hpp:1367</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_a567622530e51eaa2e82c9790a3a43f02"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#a567622530e51eaa2e82c9790a3a43f02">armnn::LstmInputParamsInfo::m_CellLayerNormWeights</a></div><div class="ttdeci">const TensorInfo * m_CellLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00108">LstmParams.hpp:108</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::BaseTensor::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00297">Tensor.hpp:297</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_info_xhtml_a33242cb43250f04f1736161ca8ad2db9"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a33242cb43250f04f1736161ca8ad2db9">armnn::QuantizedLstmInputParamsInfo::m_InputToOutputWeights</a></div><div class="ttdeci">const TensorInfo * m_InputToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00142">QuantizedLstmParams.hpp:142</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a9624be7520f71d00bfb769d94e0b088b"><div class="ttname"><a href="namespacearmnn.xhtml#a9624be7520f71d00bfb769d94e0b088b">armnn::IsMultiplicationSupported</a></div><div class="ttdeci">bool IsMultiplicationSupported(const BackendId &amp;backend, const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a3f6b313fd199d1552844f3f95fd25cd2"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a3f6b313fd199d1552844f3f95fd25cd2">armnn_driver::ConvertReduce</a></div><div class="ttdeci">bool ConvertReduce(const Operation &amp;operation, const Model &amp;model, ConversionData &amp;data, armnn::ReduceOperation reduceOperation)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00508">ConversionUtils.cpp:508</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_a21626d0b91f8942c3ef8e48e17db9f21"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#a21626d0b91f8942c3ef8e48e17db9f21">armnn::LstmInputParamsInfo::m_ForgetGateBias</a></div><div class="ttdeci">const TensorInfo * m_ForgetGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00101">LstmParams.hpp:101</a></div></div>
<div class="ttc" id="astructarmnn_1_1_activation_descriptor_xhtml_a28c4c9cb15f6be3499abbc46b356060b"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#a28c4c9cb15f6be3499abbc46b356060b">armnn::ActivationDescriptor::m_B</a></div><div class="ttdeci">float m_B</div><div class="ttdoc">Beta lower bound value used by the activation functions. (BoundedReLu, Linear, TanH).</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00063">Descriptors.hpp:63</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a36d55a20000a7b50f7369c3ceeca46bd"><div class="ttname"><a href="namespacearmnn.xhtml#a36d55a20000a7b50f7369c3ceeca46bd">armnn::IsPreluSupported</a></div><div class="ttdeci">bool IsPreluSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;alpha, const TensorInfo &amp;output, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::DepthwiseConvolution2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00670">Descriptors.hpp:670</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa3d90c0a5ab3fcf8e6f6608cb3d3a1559">armnn::ActivationFunction::ReLu</a></div><div class="ttdeci">@ ReLu</div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_a0cd848f65ec31778d708852f0042fe37"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a0cd848f65ec31778d708852f0042fe37">armnn::LstmInputParams::m_InputLayerNormWeights</a></div><div class="ttdeci">const ConstTensor * m_InputLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00057">LstmParams.hpp:57</a></div></div>
<div class="ttc" id="astructarmnn_1_1_transpose_convolution2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::TransposeConvolution2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01426">Descriptors.hpp:1426</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml">armnn::LstmInputParams</a></div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00013">LstmParams.hpp:13</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">armnn::QuantizedLstmInputParamsInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00119">QuantizedLstmParams.hpp:119</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_af434b509cd5232ef762c4b21b2dfaae0"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#af434b509cd5232ef762c4b21b2dfaae0">armnn::LstmInputParamsInfo::m_RecurrentToOutputWeights</a></div><div class="ttdeci">const TensorInfo * m_RecurrentToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00096">LstmParams.hpp:96</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a6e7dc8639c4b2f0a93031afff5182735"><div class="ttname"><a href="namespacearmnn.xhtml#a6e7dc8639c4b2f0a93031afff5182735">armnn::IsActivationSupported</a></div><div class="ttdeci">bool IsActivationSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_convolution2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::Convolution2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00544">Descriptors.hpp:544</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2b6003e1d9226301e4badcac0b53c0ef"><div class="ttname"><a href="namespacearmnn.xhtml#a2b6003e1d9226301e4badcac0b53c0ef">armnn::IsFloorSupported</a></div><div class="ttdeci">bool IsFloorSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a5378da53b59c1c826e6320383ca0257e"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a5378da53b59c1c826e6320383ca0257e">armnn_driver::SetupAndTrackLayerOutputSlot</a></div><div class="ttdeci">bool SetupAndTrackLayerOutputSlot(const Operation &amp;operation, uint32_t operationOutputIndex, armnn::IConnectableLayer &amp;layer, uint32_t layerOutputIndex, const Model &amp;model, ConversionData &amp;data, const armnn::TensorInfo *overrideOutputInfo, const std::function&lt; void(const armnn::TensorInfo &amp;, bool &amp;)&gt; &amp;validateFunc, const ActivationFn &amp;activationFunction, bool inferOutputShapes)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00963">ConversionUtils.cpp:963</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a8bc11f1fa23ef42532f9fdd04d355270"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8bc11f1fa23ef42532f9fdd04d355270">armnn::TensorInfo::GetQuantizationScales</a></div><div class="ttdeci">std::vector&lt; float &gt; GetQuantizationScales() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00451">Tensor.cpp:451</a></div></div>
<div class="ttc" id="astructarmnn_1_1_resize_descriptor_xhtml_a4022d5107338aaf5eb7abebf78a1360b"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a4022d5107338aaf5eb7abebf78a1360b">armnn::ResizeDescriptor::m_HalfPixelCenters</a></div><div class="ttdeci">bool m_HalfPixelCenters</div><div class="ttdoc">Half Pixel Centers.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00965">Descriptors.hpp:965</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a237992b29706fe1c1653dae916ea67ef"><div class="ttname"><a href="namespacearmnn.xhtml#a237992b29706fe1c1653dae916ea67ef">armnn::IsQuantizedLstmSupported</a></div><div class="ttdeci">bool IsQuantizedLstmSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QuantizedLstmInputParamsInfo &amp;paramsInfo, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_connectable_layer_xhtml_a9c2cba04b6d7ace4fc2a2436b82a5a63"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a9c2cba04b6d7ace4fc2a2436b82a5a63">armnn::IConnectableLayer::GetNumInputSlots</a></div><div class="ttdeci">virtual unsigned int GetNumInputSlots() const =0</div><div class="ttdoc">Returns the number of connectable input slots.</div></div>
<div class="ttc" id="astructarmnn_1_1_reshape_descriptor_xhtml_a1178f4dafdda81f59c15145ec327f7d9"><div class="ttname"><a href="structarmnn_1_1_reshape_descriptor.xhtml#a1178f4dafdda81f59c15145ec327f7d9">armnn::ReshapeDescriptor::m_TargetShape</a></div><div class="ttdeci">TensorShape m_TargetShape</div><div class="ttdoc">Target shape value.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00986">Descriptors.hpp:986</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_a9ab864961ded72f5ce7ea4eb9921f826"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#a9ab864961ded72f5ce7ea4eb9921f826">armnn::LstmInputParamsInfo::m_RecurrentToInputWeights</a></div><div class="ttdeci">const TensorInfo * m_RecurrentToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00093">LstmParams.hpp:93</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_xhtml_a9e081a9b94defb30d1558dc912507e0e"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">armnn::QuantizedLstmInputParams::m_InputGateBias</a></div><div class="ttdeci">const ConstTensor * m_InputGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00043">QuantizedLstmParams.hpp:43</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_a9e081a9b94defb30d1558dc912507e0e"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a9e081a9b94defb30d1558dc912507e0e">armnn::LstmInputParams::m_InputGateBias</a></div><div class="ttdeci">const ConstTensor * m_InputGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00051">LstmParams.hpp:51</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_xhtml_a8c0f6d48705f40c5590dde09be262222"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params.xhtml#a8c0f6d48705f40c5590dde09be262222">armnn::QuantizedLstmInputParams::m_OutputGateBias</a></div><div class="ttdeci">const ConstTensor * m_OutputGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00046">QuantizedLstmParams.hpp:46</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_aa81f67ac64f0c249e26499600c45d996"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#aa81f67ac64f0c249e26499600c45d996">armnn::BaseTensor::GetMemoryArea</a></div><div class="ttdeci">MemoryType GetMemoryArea() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00305">Tensor.hpp:305</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a93f4874062e34819806d36b74c73dc61"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">armnn_driver::GetTensorInfoForOperand</a></div><div class="ttdeci">armnn::TensorInfo GetTensorInfoForOperand(const Operand &amp;operand)</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00097">CanonicalUtils.cpp:97</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a560530462631e354561c1763f695351c"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a560530462631e354561c1763f695351c">armnn_driver::GetInputFloat32</a></div><div class="ttdeci">bool GetInputFloat32(const Operation &amp;operation, uint32_t inputIndex, float &amp;outValue, const Model &amp;model, const ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00791">ConversionUtils.hpp:791</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_a16b4d4acd2a0d6d533ff3fe8b8e71765"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#a16b4d4acd2a0d6d533ff3fe8b8e71765">armnn::LstmInputParamsInfo::m_CellToOutputWeights</a></div><div class="ttdeci">const TensorInfo * m_CellToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00099">LstmParams.hpp:99</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a53bfb6eb38a90244ba166b641a6965d9"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a53bfb6eb38a90244ba166b641a6965d9">armnn_driver::OperandType</a></div><div class="ttdeci">::android::nn::OperandType OperandType</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00046">ConversionUtils.hpp:46</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a9ddfceb499ef7b3d01053399bc79b852"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a9ddfceb499ef7b3d01053399bc79b852">armnn_driver::IsOperandConstant</a></div><div class="ttdeci">bool IsOperandConstant(const Operand &amp;operand)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00698">ConversionUtils.hpp:698</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_af0f796fba1a2be9c56b4c9ee534577ee"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#af0f796fba1a2be9c56b4c9ee534577ee">armnn::LstmInputParams::m_ForgetLayerNormWeights</a></div><div class="ttdeci">const ConstTensor * m_ForgetLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00058">LstmParams.hpp:58</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::BoostLogSeverityMapping::error</a></div><div class="ttdeci">@ error</div></div>
<div class="ttc" id="astructarmnn_1_1_q_lstm_descriptor_xhtml_a6c9de81fc65b3c4924cab11907075a17"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">armnn::QLstmDescriptor::m_ProjectionEnabled</a></div><div class="ttdeci">bool m_ProjectionEnabled</div><div class="ttdoc">Enable/disable the projection layer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01369">Descriptors.hpp:1369</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaabc5a0f0d6e7cf7fca73299dcd46c0f0d">armnn::ActivationFunction::BoundedReLu</a></div><div class="ttdeci">@ BoundedReLu</div><div class="ttdoc">min(a, max(b, input)) ReLu1 &amp; ReLu6.</div></div>
<div class="ttc" id="astructarmnn_1_1_instance_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml">armnn::InstanceNormalizationDescriptor</a></div><div class="ttdoc">An InstanceNormalizationDescriptor for InstanceNormalizationLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00815">Descriptors.hpp:815</a></div></div>
<div class="ttc" id="astructarmnn_1_1_normalization_descriptor_xhtml_a174279be57d7596eeb04c6b7f7510f99"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml#a174279be57d7596eeb04c6b7f7510f99">armnn::NormalizationDescriptor::m_Alpha</a></div><div class="ttdeci">float m_Alpha</div><div class="ttdoc">Alpha value for the normalization equation.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00767">Descriptors.hpp:767</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_abf92490dc588f48af86fc12184841fd5"><div class="ttname"><a href="namespacearmnn__driver.xhtml#abf92490dc588f48af86fc12184841fd5">armnn_driver::GetInputScalar</a></div><div class="ttdeci">bool GetInputScalar(const Operation &amp;operation, uint32_t inputIndex, OperandType type, OutputType &amp;outValue, const Model &amp;model, const ConversionData &amp;data, bool optional=false)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00742">ConversionUtils.hpp:742</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_a44b0e6b16708df7f0d2bbab141688aaa"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a44b0e6b16708df7f0d2bbab141688aaa">armnn::LstmInputParams::m_ProjectionBias</a></div><div class="ttdeci">const ConstTensor * m_ProjectionBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00056">LstmParams.hpp:56</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_xhtml_a8c0f6d48705f40c5590dde09be262222"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params.xhtml#a8c0f6d48705f40c5590dde09be262222">armnn::LstmInputParams::m_OutputGateBias</a></div><div class="ttdeci">const ConstTensor * m_OutputGateBias</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00054">LstmParams.hpp:54</a></div></div>
<div class="ttc" id="a_conversion_utils_8hpp_xhtml_a00e2c074a81ec0d41495ed9287dcc542"><div class="ttname"><a href="_conversion_utils_8hpp.xhtml#a00e2c074a81ec0d41495ed9287dcc542">FORWARD_LAYER_SUPPORT_FUNC</a></div><div class="ttdeci">#define FORWARD_LAYER_SUPPORT_FUNC(funcName, func, backends, supported, setBackend,...)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00153">ConversionUtils.hpp:153</a></div></div>
<div class="ttc" id="astructarmnn_1_1_quantized_lstm_input_params_info_xhtml_a4b3f6e6f2268416ffd7a34fda95ffd0b"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml#a4b3f6e6f2268416ffd7a34fda95ffd0b">armnn::QuantizedLstmInputParamsInfo::m_InputToForgetWeights</a></div><div class="ttdeci">const TensorInfo * m_InputToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00140">QuantizedLstmParams.hpp:140</a></div></div>
<div class="ttc" id="astructarmnn_1_1_lstm_input_params_info_xhtml_a6c7873a3320a59a63aa26c006db905c0"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml#a6c7873a3320a59a63aa26c006db905c0">armnn::LstmInputParamsInfo::m_RecurrentToCellWeights</a></div><div class="ttdeci">const TensorInfo * m_RecurrentToCellWeights</div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00095">LstmParams.hpp:95</a></div></div>
<div class="ttc" id="astructarmnn_1_1_origins_descriptor_xhtml_a2b125117aa61f9baf3a9cb8658aa61a2"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml#a2b125117aa61f9baf3a9cb8658aa61a2">armnn::OriginsDescriptor::SetViewOriginCoord</a></div><div class="ttdeci">Status SetViewOriginCoord(uint32_t view, uint32_t coord, uint32_t value)</div><div class="ttdoc">@Brief Set the view origin coordinates.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00167">Descriptors.cpp:167</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="astructarmnn__driver_1_1_conversion_data_xhtml_af3239731a47cf4c08a040c42ee855edc"><div class="ttname"><a href="structarmnn__driver_1_1_conversion_data.xhtml#af3239731a47cf4c08a040c42ee855edc">armnn_driver::ConversionData::m_Backends</a></div><div class="ttdeci">const std::vector&lt; armnn::BackendId &gt; m_Backends</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00059">ConversionUtils.hpp:59</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_base_tensor_xhtml_a8aeddebdcf02e1832b22203c08a6b678"><div class="ttname"><a href="classarmnn_1_1_base_tensor.xhtml#a8aeddebdcf02e1832b22203c08a6b678">armnn::BaseTensor::GetInfo</a></div><div class="ttdeci">const TensorInfo &amp; GetInfo() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00295">Tensor.hpp:295</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a32e51e4810a549b4a15d59ba73c64d2c"><div class="ttname"><a href="namespacearmnn.xhtml#a32e51e4810a549b4a15d59ba73c64d2c">armnn::IsSpaceToDepthSupported</a></div><div class="ttdeci">bool IsSpaceToDepthSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToDepthDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ac8b3d64c6b38fe4bc59bd05959577fb6"><div class="ttname"><a href="namespacearmnn.xhtml#ac8b3d64c6b38fe4bc59bd05959577fb6">armnn::IsConcatSupported</a></div><div class="ttdeci">bool IsConcatSupported(const BackendId &amp;backend, const std::vector&lt; const TensorInfo * &gt; inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_instance_normalization_descriptor_xhtml_a8275d51ef9a584feb95726ea0522f6e5"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml#a8275d51ef9a584feb95726ea0522f6e5">armnn::InstanceNormalizationDescriptor::m_Beta</a></div><div class="ttdeci">float m_Beta</div><div class="ttdoc">Beta, the offset scalar value applied for the normalized tensor. Defaults to 1.0.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00835">Descriptors.hpp:835</a></div></div>
<div class="ttc" id="anamespacearmnn__driver_xhtml_a28243ca97e12ccb50e01f03d313ecc86"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a28243ca97e12ccb50e01f03d313ecc86">armnn_driver::ConvertToActivation</a></div><div class="ttdeci">bool ConvertToActivation(const Operation &amp;operation, const char *operationName, const armnn::ActivationDescriptor &amp;activationDesc, const Model &amp;model, ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8cpp_source.xhtml#l00592">ConversionUtils.cpp:592</a></div></div>
<div class="ttc" id="astructarmnn_1_1_resize_descriptor_xhtml_adcf5037208faac36c0788239a073f75c"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">armnn::ResizeDescriptor::m_TargetWidth</a></div><div class="ttdeci">uint32_t m_TargetWidth</div><div class="ttdoc">Target width value.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00954">Descriptors.hpp:954</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ab5569e5b664498e011e8bd92cc3cc5b2"><div class="ttname"><a href="namespacearmnn.xhtml#ab5569e5b664498e011e8bd92cc3cc5b2">armnn::IsAdditionSupported</a></div><div class="ttdeci">bool IsAdditionSupported(const BackendId &amp;backend, const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="astructarmnn_1_1_space_to_batch_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">armnn::SpaceToBatchNdDescriptor</a></div><div class="ttdoc">A SpaceToBatchNdDescriptor for the SpaceToBatchNdLayer.</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00990">Descriptors.hpp:990</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ae467c9a579c8fb41427227a1c1e1cb4c"><div class="ttname"><a href="namespacearmnn.xhtml#ae467c9a579c8fb41427227a1c1e1cb4c">armnn::IsPadSupported</a></div><div class="ttdeci">bool IsPadSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const PadDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<div class="ttc" id="anamespaceandroid_1_1nn_xhtml"><div class="ttname"><a href="namespaceandroid_1_1nn.xhtml">android::nn</a></div><div class="ttdef"><b>Definition:</b> <a href="support__library__service_8cpp_source.xhtml#l00010">support_library_service.cpp:10</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a55f4c243c58ee7a084f4a674d3c69948"><div class="ttname"><a href="namespacearmnn.xhtml#a55f4c243c58ee7a084f4a674d3c69948">armnn::IsSpaceToBatchNdSupported</a></div><div class="ttdeci">bool IsSpaceToBatchNdSupported(const BackendId &amp;backend, const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToBatchNdDescriptor &amp;descriptor, char *reasonIfUnsupported=nullptr, size_t reasonIfUnsupportedMaxLength=1024)</div><div class="ttdoc">Deprecated in favor of IBackend and ILayerSupport interfaces.</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_b4dbf96392bc72a402a7206cbda88a03.xhtml">shim</a></li><li class="navelem"><a class="el" href="dir_09eea26cf0279feb9fcfb9b796a3e57e.xhtml">sl</a></li><li class="navelem"><a class="el" href="dir_6de13b49022bb7cfc6557e28050d5cbe.xhtml">canonical</a></li><li class="navelem"><a class="el" href="_converter_8cpp.xhtml">Converter.cpp</a></li>
    <li class="footer">Generated on Wed Mar 22 2023 15:52:59 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
