<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: CounterDirectory Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1profiling_1_1_counter_directory.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1profiling_1_1_counter_directory-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">CounterDirectory Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml">CounterDirectory.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for CounterDirectory:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1profiling_1_1_counter_directory.png" usemap="#CounterDirectory_map" alt=""/>
  <map id="CounterDirectory_map" name="CounterDirectory_map">
<area href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml" alt="ICounterDirectory" shape="rect" coords="0,0,113,24"/>
<area href="classarmnn_1_1profiling_1_1_i_counter_registry.xhtml" alt="ICounterRegistry" shape="rect" coords="123,0,236,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a0fc9b7d9a197eef913fddc3f2e4e8b74"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a0fc9b7d9a197eef913fddc3f2e4e8b74">CounterDirectory</a> ()=default</td></tr>
<tr class="separator:a0fc9b7d9a197eef913fddc3f2e4e8b74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf7538e5b98c77d22e3df30360a071a2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#acf7538e5b98c77d22e3df30360a071a2">~CounterDirectory</a> ()=default</td></tr>
<tr class="separator:acf7538e5b98c77d22e3df30360a071a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a220a83a3433b6da68d41efe07c39b552"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1profiling_1_1_category.xhtml">Category</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a220a83a3433b6da68d41efe07c39b552">RegisterCategory</a> (const std::string &amp;categoryName) override</td></tr>
<tr class="separator:a220a83a3433b6da68d41efe07c39b552"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ec101239653ba9260e1362c5381e81d"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1profiling_1_1_device.xhtml">Device</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a6ec101239653ba9260e1362c5381e81d">RegisterDevice</a> (const std::string &amp;deviceName, uint16_t cores=0, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &gt; &amp;parentCategoryName=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) override</td></tr>
<tr class="separator:a6ec101239653ba9260e1362c5381e81d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a161604d904508d5b86b459c2c2ace4be"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1profiling_1_1_counter_set.xhtml">CounterSet</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a161604d904508d5b86b459c2c2ace4be">RegisterCounterSet</a> (const std::string &amp;counterSetName, uint16_t count=0, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &gt; &amp;parentCategoryName=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) override</td></tr>
<tr class="separator:a161604d904508d5b86b459c2c2ace4be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9756dfaf9b36cc51262369a27d1384f"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#ab9756dfaf9b36cc51262369a27d1384f">RegisterCounter</a> (const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;backendId, const uint16_t uid, const std::string &amp;parentCategoryName, uint16_t counterClass, uint16_t interpolation, double multiplier, const std::string &amp;name, const std::string &amp;description, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &gt; &amp;units=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(), const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; uint16_t &gt; &amp;numberOfCores=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(), const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; uint16_t &gt; &amp;deviceUid=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(), const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; uint16_t &gt; &amp;counterSetUid=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) override</td></tr>
<tr class="separator:ab9756dfaf9b36cc51262369a27d1384f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4626db62503c13042a745a40399f8317"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a4626db62503c13042a745a40399f8317">GetCategoryCount</a> () const override</td></tr>
<tr class="separator:a4626db62503c13042a745a40399f8317"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad742b37bc2beb568e083225f3fd8160b"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#ad742b37bc2beb568e083225f3fd8160b">GetDeviceCount</a> () const override</td></tr>
<tr class="separator:ad742b37bc2beb568e083225f3fd8160b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3b7dbaa7317dacbcec25f30f6a16075"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#ae3b7dbaa7317dacbcec25f30f6a16075">GetCounterSetCount</a> () const override</td></tr>
<tr class="separator:ae3b7dbaa7317dacbcec25f30f6a16075"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9062caad1836f8e6b810e4e97bb19d1"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#ad9062caad1836f8e6b810e4e97bb19d1">GetCounterCount</a> () const override</td></tr>
<tr class="separator:ad9062caad1836f8e6b810e4e97bb19d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af55b37f13ace15889ce8a0b18dda3ed9"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#af55bc6e5233a4720fe8a813db470b06f">Categories</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#af55b37f13ace15889ce8a0b18dda3ed9">GetCategories</a> () const override</td></tr>
<tr class="separator:af55b37f13ace15889ce8a0b18dda3ed9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9bdbed464222fa06875096a4f373ca8"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a3ff1066867cb9bd3b08338957c414401">Devices</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#ac9bdbed464222fa06875096a4f373ca8">GetDevices</a> () const override</td></tr>
<tr class="separator:ac9bdbed464222fa06875096a4f373ca8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcb72c4151fd72abfffcb7dae0ed2817"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#acfe20da73b5dc66439a65b49f04f7a21">CounterSets</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#afcb72c4151fd72abfffcb7dae0ed2817">GetCounterSets</a> () const override</td></tr>
<tr class="separator:afcb72c4151fd72abfffcb7dae0ed2817"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d7f92b987338cab6cbfbad8d53a9738"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#aeeb6904ffbae435c8d0a7138427688f4">Counters</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a6d7f92b987338cab6cbfbad8d53a9738">GetCounters</a> () const override</td></tr>
<tr class="separator:a6d7f92b987338cab6cbfbad8d53a9738"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab31f60f412b119002a465e13d5165f0"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1profiling_1_1_category.xhtml">Category</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#aab31f60f412b119002a465e13d5165f0">GetCategory</a> (const std::string &amp;name) const override</td></tr>
<tr class="separator:aab31f60f412b119002a465e13d5165f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa898e858d26d200fbc3788ac6d14fd90"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1profiling_1_1_device.xhtml">Device</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#aa898e858d26d200fbc3788ac6d14fd90">GetDevice</a> (uint16_t uid) const override</td></tr>
<tr class="separator:aa898e858d26d200fbc3788ac6d14fd90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad368fc6d788ff64cc25cafe2b40265c6"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1profiling_1_1_counter_set.xhtml">CounterSet</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#ad368fc6d788ff64cc25cafe2b40265c6">GetCounterSet</a> (uint16_t uid) const override</td></tr>
<tr class="separator:ad368fc6d788ff64cc25cafe2b40265c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefdd6df4feb698935d16311be966fda5"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#aefdd6df4feb698935d16311be966fda5">GetCounter</a> (uint16_t uid) const override</td></tr>
<tr class="separator:aefdd6df4feb698935d16311be966fda5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63fc4d050f681a84653c1d861e989f45"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a63fc4d050f681a84653c1d861e989f45">IsCategoryRegistered</a> (const std::string &amp;categoryName) const</td></tr>
<tr class="separator:a63fc4d050f681a84653c1d861e989f45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82cdaf1dbfea445bda6018760140ab50"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a82cdaf1dbfea445bda6018760140ab50">IsDeviceRegistered</a> (uint16_t deviceUid) const</td></tr>
<tr class="separator:a82cdaf1dbfea445bda6018760140ab50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1e135cd44b3b612ded4decaed61ae1b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#ae1e135cd44b3b612ded4decaed61ae1b">IsDeviceRegistered</a> (const std::string &amp;deviceName) const</td></tr>
<tr class="separator:ae1e135cd44b3b612ded4decaed61ae1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38edfdaaf346b8b2ad60ba9ab591fdff"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a38edfdaaf346b8b2ad60ba9ab591fdff">IsCounterSetRegistered</a> (uint16_t counterSetUid) const</td></tr>
<tr class="separator:a38edfdaaf346b8b2ad60ba9ab591fdff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59397e9294a483953bdf682f16a8a3cd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a59397e9294a483953bdf682f16a8a3cd">IsCounterSetRegistered</a> (const std::string &amp;counterSetName) const</td></tr>
<tr class="separator:a59397e9294a483953bdf682f16a8a3cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd87d40b4a54b7e1625cb765768553b9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#abd87d40b4a54b7e1625cb765768553b9">IsCounterRegistered</a> (uint16_t counterUid) const</td></tr>
<tr class="separator:abd87d40b4a54b7e1625cb765768553b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74ff6a2d9003a0713863df27450f42ed"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a74ff6a2d9003a0713863df27450f42ed">IsCounterRegistered</a> (const std::string &amp;counterName) const</td></tr>
<tr class="separator:a74ff6a2d9003a0713863df27450f42ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa71d36872f416feaa853788a7a7a7ef8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#aa71d36872f416feaa853788a7a7a7ef8">Clear</a> ()</td></tr>
<tr class="separator:aa71d36872f416feaa853788a7a7a7ef8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1profiling_1_1_i_counter_directory"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1profiling_1_1_i_counter_directory')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml">ICounterDirectory</a></td></tr>
<tr class="memitem:ad5186479ccb3343cad2dcf8a288bede1 inherit pub_methods_classarmnn_1_1profiling_1_1_i_counter_directory"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#ad5186479ccb3343cad2dcf8a288bede1">~ICounterDirectory</a> ()</td></tr>
<tr class="separator:ad5186479ccb3343cad2dcf8a288bede1 inherit pub_methods_classarmnn_1_1profiling_1_1_i_counter_directory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1profiling_1_1_i_counter_registry"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1profiling_1_1_i_counter_registry')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_registry.xhtml">ICounterRegistry</a></td></tr>
<tr class="memitem:ae975a04ac3e352f5ed0c13501a684cb5 inherit pub_methods_classarmnn_1_1profiling_1_1_i_counter_registry"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_counter_registry.xhtml#ae975a04ac3e352f5ed0c13501a684cb5">~ICounterRegistry</a> ()</td></tr>
<tr class="separator:ae975a04ac3e352f5ed0c13501a684cb5 inherit pub_methods_classarmnn_1_1profiling_1_1_i_counter_registry"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00023">23</a> of file <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml">CounterDirectory.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a0fc9b7d9a197eef913fddc3f2e4e8b74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fc9b7d9a197eef913fddc3f2e4e8b74">&#9670;&nbsp;</a></span>CounterDirectory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml">CounterDirectory</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="acf7538e5b98c77d22e3df30360a071a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf7538e5b98c77d22e3df30360a071a2">&#9670;&nbsp;</a></span>~CounterDirectory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml">CounterDirectory</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa71d36872f416feaa853788a7a7a7ef8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa71d36872f416feaa853788a7a7a7ef8">&#9670;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00438">438</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00060">CounterDirectory::GetCounters()</a>, and <a class="el" href="_profiling_service_8cpp_source.xhtml#l00329">ProfilingService::GetSendTimelinePacket()</a>.</p>
<div class="fragment"><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;{</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="comment">// Clear all the counter directory contents</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    m_Categories.clear();</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    m_Devices.clear();</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    m_CounterSets.clear();</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    m_Counters.clear();</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af55b37f13ace15889ce8a0b18dda3ed9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af55b37f13ace15889ce8a0b18dda3ed9">&#9670;&nbsp;</a></span>GetCategories()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#af55bc6e5233a4720fe8a813db470b06f">Categories</a>&amp; GetCategories </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#a718a75d4c178cf3f687b3f27b8f55091">ICounterDirectory</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00057">57</a> of file <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml">CounterDirectory.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{ <span class="keywordflow">return</span> m_Categories;  }</div></div><!-- fragment -->
</div>
</div>
<a id="aab31f60f412b119002a465e13d5165f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab31f60f412b119002a465e13d5165f0">&#9670;&nbsp;</a></span>GetCategory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1profiling_1_1_category.xhtml">Category</a> * GetCategory </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#a90890aee41059d8fed244538acc4044f">ICounterDirectory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00329">329</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00060">CounterDirectory::GetCounters()</a>, and <a class="el" href="_profiling_tests_8cpp_source.xhtml#l00057">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;{</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keyword">auto</span> it = FindCategory(categoryName);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordflow">if</span> (it == m_Categories.end())</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    {</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    }</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">const</span> Category* category = it-&gt;get();</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(category);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keywordflow">return</span> category;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;}</div><div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4626db62503c13042a745a40399f8317"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4626db62503c13042a745a40399f8317">&#9670;&nbsp;</a></span>GetCategoryCount()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t GetCategoryCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#ab43b0472c37fe51694977ae9b4132404">ICounterDirectory</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00051">51</a> of file <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml">CounterDirectory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_tests_8cpp_source.xhtml#l00057">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{ <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;uint16_t&gt;(m_Categories.size());  }</div><div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aefdd6df4feb698935d16311be966fda5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefdd6df4feb698935d16311be966fda5">&#9670;&nbsp;</a></span>GetCounter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a> * GetCounter </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>uid</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#a81881e3910b23455b46ec30c8420c695">ICounterDirectory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00373">373</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00124">Counter::m_MaxCounterUid</a>, and <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00123">Counter::m_Uid</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00060">CounterDirectory::GetCounters()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00181">CounterDirectory::RegisterCounter()</a>, and <a class="el" href="_profiling_tests_8cpp_source.xhtml#l00057">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;{</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keyword">auto</span> it = FindCounter(counterUid);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">if</span> (it == m_Counters.end())</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    {</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    }</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keyword">const</span> Counter* counter = it-&gt;second.get();</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counter);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counter-&gt;m_Uid &lt;= counterUid);</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counter-&gt;m_Uid &lt;= counter-&gt;m_MaxCounterUid);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keywordflow">return</span> counter;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;}</div><div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad9062caad1836f8e6b810e4e97bb19d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9062caad1836f8e6b810e4e97bb19d1">&#9670;&nbsp;</a></span>GetCounterCount()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t GetCounterCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#acab78d0987a9cca5a9cac957be610a7d">ICounterDirectory</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00054">54</a> of file <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml">CounterDirectory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_service_8cpp_source.xhtml#l00237">ProfilingService::GetCounterCount()</a>, and <a class="el" href="_profiling_tests_8cpp_source.xhtml#l00057">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{ <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;uint16_t&gt;(m_Counters.size());    }</div><div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6d7f92b987338cab6cbfbad8d53a9738"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d7f92b987338cab6cbfbad8d53a9738">&#9670;&nbsp;</a></span>GetCounters()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#aeeb6904ffbae435c8d0a7138427688f4">Counters</a>&amp; GetCounters </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#ad9fa9b8364fcaa2c940ef8e78eff8df2">ICounterDirectory</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00060">60</a> of file <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml">CounterDirectory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_counter_directory_8cpp_source.xhtml#l00438">CounterDirectory::Clear()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00329">CounterDirectory::GetCategory()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00373">CounterDirectory::GetCounter()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00358">CounterDirectory::GetCounterSet()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00343">CounterDirectory::GetDevice()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00389">CounterDirectory::IsCategoryRegistered()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00424">CounterDirectory::IsCounterRegistered()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00410">CounterDirectory::IsCounterSetRegistered()</a>, and <a class="el" href="_counter_directory_8cpp_source.xhtml#l00396">CounterDirectory::IsDeviceRegistered()</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{ <span class="keywordflow">return</span> m_Counters;    }</div></div><!-- fragment -->
</div>
</div>
<a id="ad368fc6d788ff64cc25cafe2b40265c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad368fc6d788ff64cc25cafe2b40265c6">&#9670;&nbsp;</a></span>GetCounterSet()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1profiling_1_1_counter_set.xhtml">CounterSet</a> * GetCounterSet </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>uid</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#a67693dcf840ffeadc066ce77ef7b2044">ICounterDirectory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00358">358</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, and <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00088">CounterSet::m_Uid</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00060">CounterDirectory::GetCounters()</a>, and <a class="el" href="_profiling_tests_8cpp_source.xhtml#l00057">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;{</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keyword">auto</span> it = FindCounterSet(counterSetUid);</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keywordflow">if</span> (it == m_CounterSets.end())</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    {</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    }</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keyword">const</span> CounterSet* counterSet = it-&gt;second.get();</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counterSet);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counterSet-&gt;m_Uid == counterSetUid);</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keywordflow">return</span> counterSet;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;}</div><div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae3b7dbaa7317dacbcec25f30f6a16075"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3b7dbaa7317dacbcec25f30f6a16075">&#9670;&nbsp;</a></span>GetCounterSetCount()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t GetCounterSetCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#aef59fdca57a5bb822e22cacfc5836fab">ICounterDirectory</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00053">53</a> of file <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml">CounterDirectory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_tests_8cpp_source.xhtml#l00057">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{ <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;uint16_t&gt;(m_CounterSets.size()); }</div><div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afcb72c4151fd72abfffcb7dae0ed2817"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afcb72c4151fd72abfffcb7dae0ed2817">&#9670;&nbsp;</a></span>GetCounterSets()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#acfe20da73b5dc66439a65b49f04f7a21">CounterSets</a>&amp; GetCounterSets </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#a8908490db3b8a0003a639ac56b956cee">ICounterDirectory</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00059">59</a> of file <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml">CounterDirectory.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{ <span class="keywordflow">return</span> m_CounterSets; }</div></div><!-- fragment -->
</div>
</div>
<a id="aa898e858d26d200fbc3788ac6d14fd90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa898e858d26d200fbc3788ac6d14fd90">&#9670;&nbsp;</a></span>GetDevice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1profiling_1_1_device.xhtml">Device</a> * GetDevice </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>uid</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#a228989d3c53e86e779567ca5c2033ec2">ICounterDirectory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00343">343</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, and <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00072">Device::m_Uid</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00060">CounterDirectory::GetCounters()</a>, and <a class="el" href="_profiling_tests_8cpp_source.xhtml#l00057">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;{</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keyword">auto</span> it = FindDevice(deviceUid);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordflow">if</span> (it == m_Devices.end())</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    {</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    }</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keyword">const</span> Device* device = it-&gt;second.get();</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(device);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(device-&gt;m_Uid == deviceUid);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordflow">return</span> device;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;}</div><div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad742b37bc2beb568e083225f3fd8160b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad742b37bc2beb568e083225f3fd8160b">&#9670;&nbsp;</a></span>GetDeviceCount()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint16_t GetDeviceCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#aecd5912045fd41fe41dc96c9844f6deb">ICounterDirectory</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00052">52</a> of file <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml">CounterDirectory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_tests_8cpp_source.xhtml#l00057">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{ <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;uint16_t&gt;(m_Devices.size());    }</div><div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac9bdbed464222fa06875096a4f373ca8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9bdbed464222fa06875096a4f373ca8">&#9670;&nbsp;</a></span>GetDevices()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="namespacearmnn_1_1profiling.xhtml#a3ff1066867cb9bd3b08338957c414401">Devices</a>&amp; GetDevices </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_directory.xhtml#a98e6769cb933d30bfd3ca25f61bd8438">ICounterDirectory</a>.</p>

<p class="definition">Definition at line <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00058">58</a> of file <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml">CounterDirectory.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{ <span class="keywordflow">return</span> m_Devices;     }</div></div><!-- fragment -->
</div>
</div>
<a id="a63fc4d050f681a84653c1d861e989f45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63fc4d050f681a84653c1d861e989f45">&#9670;&nbsp;</a></span>IsCategoryRegistered()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCategoryRegistered </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>categoryName</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00389">389</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00060">CounterDirectory::GetCounters()</a>, <a class="el" href="_profiling_service_8cpp_source.xhtml#l00329">ProfilingService::GetSendTimelinePacket()</a>, and <a class="el" href="_counter_directory_8cpp_source.xhtml#l00023">CounterDirectory::RegisterCategory()</a>.</p>
<div class="fragment"><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;{</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keyword">auto</span> it = FindCategory(categoryName);</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordflow">return</span> it != m_Categories.end();</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abd87d40b4a54b7e1625cb765768553b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd87d40b4a54b7e1625cb765768553b9">&#9670;&nbsp;</a></span>IsCounterRegistered() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCounterRegistered </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>counterUid</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00424">424</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00060">CounterDirectory::GetCounters()</a>, <a class="el" href="_profiling_service_8cpp_source.xhtml#l00329">ProfilingService::GetSendTimelinePacket()</a>, and <a class="el" href="_profiling_service_8cpp_source.xhtml#l00242">ProfilingService::IsCounterRegistered()</a>.</p>
<div class="fragment"><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;{</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keyword">auto</span> it = FindCounter(counterUid);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keywordflow">return</span> it != m_Counters.end();</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a74ff6a2d9003a0713863df27450f42ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74ff6a2d9003a0713863df27450f42ed">&#9670;&nbsp;</a></span>IsCounterRegistered() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCounterRegistered </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>counterName</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00431">431</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;{</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keyword">auto</span> it = FindCounter(counterName);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keywordflow">return</span> it != m_Counters.end();</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a38edfdaaf346b8b2ad60ba9ab591fdff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38edfdaaf346b8b2ad60ba9ab591fdff">&#9670;&nbsp;</a></span>IsCounterSetRegistered() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCounterSetRegistered </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>counterSetUid</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00410">410</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00060">CounterDirectory::GetCounters()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00181">CounterDirectory::RegisterCounter()</a>, and <a class="el" href="_counter_directory_8cpp_source.xhtml#l00114">CounterDirectory::RegisterCounterSet()</a>.</p>
<div class="fragment"><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;{</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keyword">auto</span> it = FindCounterSet(counterSetUid);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keywordflow">return</span> it != m_CounterSets.end();</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a59397e9294a483953bdf682f16a8a3cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59397e9294a483953bdf682f16a8a3cd">&#9670;&nbsp;</a></span>IsCounterSetRegistered() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCounterSetRegistered </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>counterSetName</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00417">417</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;{</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keyword">auto</span> it = FindCounterSet(counterSetName);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="keywordflow">return</span> it != m_CounterSets.end();</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a82cdaf1dbfea445bda6018760140ab50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82cdaf1dbfea445bda6018760140ab50">&#9670;&nbsp;</a></span>IsDeviceRegistered() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDeviceRegistered </td>
          <td>(</td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>deviceUid</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00396">396</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml#l00060">CounterDirectory::GetCounters()</a>, and <a class="el" href="_counter_directory_8cpp_source.xhtml#l00053">CounterDirectory::RegisterDevice()</a>.</p>
<div class="fragment"><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;{</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keyword">auto</span> it = FindDevice(deviceUid);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordflow">return</span> it != m_Devices.end();</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae1e135cd44b3b612ded4decaed61ae1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1e135cd44b3b612ded4decaed61ae1b">&#9670;&nbsp;</a></span>IsDeviceRegistered() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDeviceRegistered </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>deviceName</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00403">403</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;{</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keyword">auto</span> it = FindDevice(deviceName);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordflow">return</span> it != m_Devices.end();</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a220a83a3433b6da68d41efe07c39b552"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a220a83a3433b6da68d41efe07c39b552">&#9670;&nbsp;</a></span>RegisterCategory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1profiling_1_1_category.xhtml">Category</a> * RegisterCategory </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>categoryName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_registry.xhtml#aefa3b1cd8c21711b682a9291c0203a8f">ICounterRegistry</a>.</p>

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00023">23</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, and <a class="el" href="_counter_directory_8cpp_source.xhtml#l00389">CounterDirectory::IsCategoryRegistered()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_service_8cpp_source.xhtml#l00329">ProfilingService::GetSendTimelinePacket()</a>, and <a class="el" href="_profiling_tests_8cpp_source.xhtml#l00057">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="comment">// Check that the given category name is valid</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordflow">if</span> (categoryName.empty() ||</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;            !arm::pipe::IsValidSwTraceString&lt;arm::pipe::SwTraceNameCharPolicy&gt;(categoryName))</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Trying to register a category with an invalid name&quot;</span>);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    }</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="comment">// Check that the given category is not already registered</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a63fc4d050f681a84653c1d861e989f45">IsCategoryRegistered</a>(categoryName))</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(fmt::format(<span class="stringliteral">&quot;Trying to register a category already registered (\&quot;{}\&quot;)&quot;</span>,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                                       categoryName));</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="comment">// Create the category</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a8adee535828386656b4c8acfa8bcf871">CategoryPtr</a> category = std::make_unique&lt;Category&gt;(categoryName);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(category);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// Get the raw category pointer</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> Category* categoryPtr = category.get();</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(categoryPtr);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="comment">// Register the category</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    m_Categories.insert(std::move(category));</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">return</span> categoryPtr;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_counter_directory_xhtml_a63fc4d050f681a84653c1d861e989f45"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a63fc4d050f681a84653c1d861e989f45">armnn::profiling::CounterDirectory::IsCategoryRegistered</a></div><div class="ttdeci">bool IsCategoryRegistered(const std::string &amp;categoryName) const</div><div class="ttdef"><b>Definition:</b> <a href="_counter_directory_8cpp_source.xhtml#l00389">CounterDirectory.cpp:389</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a8adee535828386656b4c8acfa8bcf871"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a8adee535828386656b4c8acfa8bcf871">armnn::profiling::CategoryPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Category &gt; CategoryPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_counter_directory_8hpp_source.xhtml#l00029">ICounterDirectory.hpp:29</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab9756dfaf9b36cc51262369a27d1384f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9756dfaf9b36cc51262369a27d1384f">&#9670;&nbsp;</a></span>RegisterCounter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1profiling_1_1_counter.xhtml">Counter</a> * RegisterCounter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td>
          <td class="paramname"><em>backendId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>uid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>parentCategoryName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>counterClass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>interpolation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>description</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>units</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; uint16_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>numberOfCores</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; uint16_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>deviceUid</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; uint16_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>counterSetUid</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_registry.xhtml#a1d4c2bc2310f063afdf3691f3228012f">ICounterRegistry</a>.</p>

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00181">181</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00373">CounterDirectory::GetCounter()</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00078">armnn::profiling::GetNextCounterUids()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00410">CounterDirectory::IsCounterSetRegistered()</a>, <a class="el" href="_i_counter_directory_8hpp_source.xhtml#l00128">Counter::m_Name</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_service_8cpp_source.xhtml#l00329">ProfilingService::GetSendTimelinePacket()</a>, and <a class="el" href="_profiling_tests_8cpp_source.xhtml#l00057">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;{</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(backendId);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// Check that the given parent category name is valid</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">if</span> (parentCategoryName.empty() ||</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            !arm::pipe::IsValidSwTraceString&lt;arm::pipe::SwTraceNameCharPolicy&gt;(parentCategoryName))</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Trying to register a counter with an invalid parent category name&quot;</span>);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="comment">// Check that the given class is valid</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">if</span> (counterClass != 0 &amp;&amp; counterClass != 1)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Trying to register a counter with an invalid class&quot;</span>);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="comment">// Check that the given interpolation is valid</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">if</span> (interpolation != 0 &amp;&amp; interpolation != 1)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Trying to register a counter with an invalid interpolation&quot;</span>);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    }</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="comment">// Check that the given multiplier is valid</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">if</span> (multiplier == .0f)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Trying to register a counter with an invalid multiplier&quot;</span>);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="comment">// Check that the given name is valid</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">if</span> (name.empty() ||</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            !arm::pipe::IsValidSwTraceString&lt;arm::pipe::SwTraceCharPolicy&gt;(name))</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Trying to register a counter with an invalid name&quot;</span>);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="comment">// Check that the given description is valid</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">if</span> (description.empty() ||</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            !arm::pipe::IsValidSwTraceString&lt;arm::pipe::SwTraceCharPolicy&gt;(description))</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Trying to register a counter with an invalid description&quot;</span>);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="comment">// Check that the given units are valid</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordflow">if</span> (units.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>()</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            &amp;&amp; !arm::pipe::IsValidSwTraceString&lt;arm::pipe::SwTraceNameCharPolicy&gt;(units.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>()))</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Trying to register a counter with a invalid units&quot;</span>);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="comment">// Check that the given parent category is registered</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">auto</span> categoryIt = FindCategory(parentCategoryName);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">if</span> (categoryIt == m_Categories.end())</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                    fmt::format(<span class="stringliteral">&quot;Trying to connect a counter to a category that is not registered (name: \&quot;{}\&quot;)&quot;</span>,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                parentCategoryName));</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="comment">// Get the parent category</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn_1_1profiling.xhtml#a8adee535828386656b4c8acfa8bcf871">CategoryPtr</a>&amp; parentCategory = *categoryIt;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(parentCategory);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="comment">// Check that a counter with the given name is not already registered within the parent category</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">const</span> std::vector&lt;uint16_t&gt;&amp; parentCategoryCounters = parentCategory-&gt;m_Counters;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordflow">for</span> (uint16_t parentCategoryCounterUid : parentCategoryCounters)</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keyword">const</span> Counter* parentCategoryCounter = <a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#aefdd6df4feb698935d16311be966fda5">GetCounter</a>(parentCategoryCounterUid);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(parentCategoryCounter);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keywordflow">if</span> (parentCategoryCounter-&gt;m_Name == name)</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                        fmt::format(<span class="stringliteral">&quot;Trying to register a counter to category \&quot;{}\&quot; with a name that &quot;</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                                    <span class="stringliteral">&quot;is already used within that category (name: \&quot;{}\&quot;)&quot;</span>,</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                    parentCategoryName,</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                    name));</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        }</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="comment">// Check that a counter set with the given (optional) UID is already registered</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    uint16_t counterSetUidValue = counterSetUid.has_value() ? counterSetUid.value() : 0;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">if</span> (counterSetUidValue &gt; 0)</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="comment">// Check that the (optional) counter set is already registered</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a38edfdaaf346b8b2ad60ba9ab591fdff">IsCounterSetRegistered</a>(counterSetUidValue))</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        {</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                        fmt::format(<span class="stringliteral">&quot;Trying to connect a counter to a counter set that is &quot;</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                    <span class="stringliteral">&quot;not registered (counter set UID: {})&quot;</span>,</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                    counterSetUidValue));</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    }</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="comment">// Get the number of cores (this call may throw)</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    uint16_t deviceUidValue = deviceUid.has_value() ? deviceUid.value() : 0;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    uint16_t deviceCores = GetNumberOfCores(numberOfCores, deviceUidValue);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="comment">// Get the counter UIDs and calculate the max counter UID</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    std::vector&lt;uint16_t&gt; counterUids = <a class="code" href="namespacearmnn_1_1profiling.xhtml#a6605c82bc625fbd40f24d35edee15fe3">GetNextCounterUids</a>(uid, deviceCores);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(!counterUids.empty());</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    uint16_t maxCounterUid = deviceCores &lt;= 1 ? counterUids.front() : counterUids.back();</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="comment">// Get the counter units</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keyword">const</span> std::string unitsValue = units.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>() ? units.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>() : <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">// Create the counter</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a38de53725b010ce63ea7557bb1d270e7">CounterPtr</a> counter = std::make_shared&lt;Counter&gt;(armnn::profiling::BACKEND_ID,</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                                   counterUids.front(),</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                                   maxCounterUid,</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                                                   counterClass,</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                                   interpolation,</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                                   multiplier,</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                                   name,</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                                   description,</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                                   unitsValue,</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                                   deviceUidValue,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                                   counterSetUidValue);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counter);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="comment">// Get the raw counter pointer</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keyword">const</span> Counter* counterPtr = counter.get();</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counterPtr);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="comment">// Process multiple counters if necessary</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordflow">for</span> (uint16_t counterUid : counterUids)</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    {</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="comment">// Connect the counter to the parent category</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        parentCategory-&gt;m_Counters.push_back(counterUid);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="comment">// Register the counter</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        m_Counters.insert(std::make_pair(counterUid, counter));</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    }</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">return</span> counterPtr;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a38de53725b010ce63ea7557bb1d270e7"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a38de53725b010ce63ea7557bb1d270e7">armnn::profiling::CounterPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Counter &gt; CounterPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_counter_directory_8hpp_source.xhtml#l00032">ICounterDirectory.hpp:32</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a6605c82bc625fbd40f24d35edee15fe3"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a6605c82bc625fbd40f24d35edee15fe3">armnn::profiling::GetNextCounterUids</a></div><div class="ttdeci">std::vector&lt; uint16_t &gt; GetNextCounterUids(uint16_t firstUid, uint16_t cores)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00078">ProfilingUtils.cpp:78</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_counter_directory_xhtml_aefdd6df4feb698935d16311be966fda5"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#aefdd6df4feb698935d16311be966fda5">armnn::profiling::CounterDirectory::GetCounter</a></div><div class="ttdeci">const Counter * GetCounter(uint16_t uid) const override</div><div class="ttdef"><b>Definition:</b> <a href="_counter_directory_8cpp_source.xhtml#l00373">CounterDirectory.cpp:373</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a8adee535828386656b4c8acfa8bcf871"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a8adee535828386656b4c8acfa8bcf871">armnn::profiling::CategoryPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Category &gt; CategoryPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_counter_directory_8hpp_source.xhtml#l00029">ICounterDirectory.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_counter_directory_xhtml_a38edfdaaf346b8b2ad60ba9ab591fdff"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a38edfdaaf346b8b2ad60ba9ab591fdff">armnn::profiling::CounterDirectory::IsCounterSetRegistered</a></div><div class="ttdeci">bool IsCounterSetRegistered(uint16_t counterSetUid) const</div><div class="ttdef"><b>Definition:</b> <a href="_counter_directory_8cpp_source.xhtml#l00410">CounterDirectory.cpp:410</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a161604d904508d5b86b459c2c2ace4be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a161604d904508d5b86b459c2c2ace4be">&#9670;&nbsp;</a></span>RegisterCounterSet()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1profiling_1_1_counter_set.xhtml">CounterSet</a> * RegisterCounterSet </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>counterSetName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>count</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>parentCategoryName</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_registry.xhtml#a0338e5b744c9c2d08143cf70d319940f">ICounterRegistry</a>.</p>

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00114">114</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00058">armnn::profiling::GetNextUid()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00410">CounterDirectory::IsCounterSetRegistered()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_tests_8cpp_source.xhtml#l00057">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;{</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">// Check that the given counter set name is valid</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">if</span> (counterSetName.empty() ||</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            !arm::pipe::IsValidSwTraceString&lt;arm::pipe::SwTraceNameCharPolicy&gt;(counterSetName))</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Trying to register a counter set with an invalid name&quot;</span>);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">// Check that a counter set with the given name is not already registered</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a38edfdaaf346b8b2ad60ba9ab591fdff">IsCounterSetRegistered</a>(counterSetName))</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    fmt::format(<span class="stringliteral">&quot;Trying to register a counter set already registered (\&quot;{}\&quot;)&quot;</span>,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                                counterSetName));</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="comment">// Peek the next UID, do not get an actual valid UID just now as we don&#39;t want to waste a good UID in case</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="comment">// the registration fails. We&#39;ll get a proper one once we&#39;re sure that the counter set can be registered</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    uint16_t counterSetUidPeek = <a class="code" href="namespacearmnn_1_1profiling.xhtml#a982b094fe2faa67a3560cdaf3901d0f8">GetNextUid</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// Check that a category with the given (optional) parent category name is already registered</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">if</span> (parentCategoryName.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>())</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="comment">// Get the (optional) parent category name</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keyword">const</span> std::string&amp; parentCategoryNameValue = parentCategoryName.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">if</span> (parentCategoryNameValue.empty())</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                        fmt::format(<span class="stringliteral">&quot;Trying to connect a counter set (UID: {}) to an invalid &quot;</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                    <span class="stringliteral">&quot;parent category (name: \&quot;{}\&quot;)&quot;</span>,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                    counterSetUidPeek,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                                    parentCategoryNameValue));</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="comment">// Check that the given parent category is already registered</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keyword">auto</span> it = FindCategory(parentCategoryNameValue);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">if</span> (it == m_Categories.end())</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        fmt::format(<span class="stringliteral">&quot;Trying to connect a counter set (UID: {}) to a parent category &quot;</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                    <span class="stringliteral">&quot;that is not registered (name: \&quot;{}\&quot;)&quot;</span>,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                    counterSetUidPeek,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                    parentCategoryNameValue));</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">// Get the counter set UID</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    uint16_t counterSetUid = <a class="code" href="namespacearmnn_1_1profiling.xhtml#a982b094fe2faa67a3560cdaf3901d0f8">GetNextUid</a>();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counterSetUid == counterSetUidPeek);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// Create the counter set</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#abaedc7fcb8ecb2e086482afe10737fb7">CounterSetPtr</a> counterSet = std::make_unique&lt;CounterSet&gt;(counterSetUid, counterSetName, count);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counterSet);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// Get the raw counter set pointer</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">const</span> CounterSet* counterSetPtr = counterSet.get();</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(counterSetPtr);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="comment">// Register the counter set</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    m_CounterSets.insert(std::make_pair(counterSetUid, std::move(counterSet)));</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">return</span> counterSetPtr;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_abaedc7fcb8ecb2e086482afe10737fb7"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#abaedc7fcb8ecb2e086482afe10737fb7">armnn::profiling::CounterSetPtr</a></div><div class="ttdeci">std::unique_ptr&lt; CounterSet &gt; CounterSetPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_counter_directory_8hpp_source.xhtml#l00031">ICounterDirectory.hpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a982b094fe2faa67a3560cdaf3901d0f8"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a982b094fe2faa67a3560cdaf3901d0f8">armnn::profiling::GetNextUid</a></div><div class="ttdeci">uint16_t GetNextUid(bool peekOnly)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00058">ProfilingUtils.cpp:58</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_counter_directory_xhtml_a38edfdaaf346b8b2ad60ba9ab591fdff"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a38edfdaaf346b8b2ad60ba9ab591fdff">armnn::profiling::CounterDirectory::IsCounterSetRegistered</a></div><div class="ttdeci">bool IsCounterSetRegistered(uint16_t counterSetUid) const</div><div class="ttdef"><b>Definition:</b> <a href="_counter_directory_8cpp_source.xhtml#l00410">CounterDirectory.cpp:410</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6ec101239653ba9260e1362c5381e81d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ec101239653ba9260e1362c5381e81d">&#9670;&nbsp;</a></span>RegisterDevice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1profiling_1_1_device.xhtml">Device</a> * RegisterDevice </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>deviceName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t&#160;</td>
          <td class="paramname"><em>cores</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>parentCategoryName</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_counter_registry.xhtml#a552c43eab6a2ba99f68f98802631db8e">ICounterRegistry</a>.</p>

<p class="definition">Definition at line <a class="el" href="_counter_directory_8cpp_source.xhtml#l00053">53</a> of file <a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_profiling_utils_8cpp_source.xhtml#l00058">armnn::profiling::GetNextUid()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, <a class="el" href="_counter_directory_8cpp_source.xhtml#l00396">CounterDirectory::IsDeviceRegistered()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_tests_8cpp_source.xhtml#l00057">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// Check that the given device name is valid</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">if</span> (deviceName.empty() ||</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            !arm::pipe::IsValidSwTraceString&lt;arm::pipe::SwTraceCharPolicy&gt;(deviceName))</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Trying to register a device with an invalid name&quot;</span>);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">// Check that a device with the given name is not already registered</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a82cdaf1dbfea445bda6018760140ab50">IsDeviceRegistered</a>(deviceName))</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(fmt::format(<span class="stringliteral">&quot;Trying to register a device already registered (\&quot;{}\&quot;)&quot;</span>,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                                       deviceName));</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// Check that a category with the given (optional) parent category name is already registered</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">if</span> (parentCategoryName.<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>())</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="comment">// Get the (optional) parent category name</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">const</span> std::string&amp; parentCategoryNameValue = parentCategoryName.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">if</span> (parentCategoryNameValue.empty())</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                        fmt::format(<span class="stringliteral">&quot;Trying to connect a device (name: \&quot;{}\&quot;) to an invalid &quot;</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                                    <span class="stringliteral">&quot;parent category (name: \&quot;{}\&quot;)&quot;</span>,</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                    deviceName,</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                                    parentCategoryNameValue));</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="comment">// Check that the given parent category is already registered</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keyword">auto</span> categoryIt = FindCategory(parentCategoryNameValue);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">if</span> (categoryIt == m_Categories.end())</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                        fmt::format(<span class="stringliteral">&quot;Trying to connect a device (name: \&quot;{}\&quot;) to a parent category that &quot;</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                    <span class="stringliteral">&quot;is not registered (name: \&quot;{}\&quot;)&quot;</span>,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                    deviceName,</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                    parentCategoryNameValue));</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// Get the device UID</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    uint16_t deviceUid = <a class="code" href="namespacearmnn_1_1profiling.xhtml#a982b094fe2faa67a3560cdaf3901d0f8">GetNextUid</a>();</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Create the device</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a22a0d730c0d08335585e6e8999be8f8b">DevicePtr</a> device = std::make_unique&lt;Device&gt;(deviceUid, deviceName, cores);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(device);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="comment">// Get the raw device pointer</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">const</span> Device* devicePtr = device.get();</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(devicePtr);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// Register the device</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    m_Devices.insert(std::make_pair(deviceUid, std::move(device)));</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">return</span> devicePtr;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a22a0d730c0d08335585e6e8999be8f8b"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a22a0d730c0d08335585e6e8999be8f8b">armnn::profiling::DevicePtr</a></div><div class="ttdeci">std::unique_ptr&lt; Device &gt; DevicePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_counter_directory_8hpp_source.xhtml#l00030">ICounterDirectory.hpp:30</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_counter_directory_xhtml_a82cdaf1dbfea445bda6018760140ab50"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_counter_directory.xhtml#a82cdaf1dbfea445bda6018760140ab50">armnn::profiling::CounterDirectory::IsDeviceRegistered</a></div><div class="ttdeci">bool IsDeviceRegistered(uint16_t deviceUid) const</div><div class="ttdef"><b>Definition:</b> <a href="_counter_directory_8cpp_source.xhtml#l00396">CounterDirectory.cpp:396</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a982b094fe2faa67a3560cdaf3901d0f8"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a982b094fe2faa67a3560cdaf3901d0f8">armnn::profiling::GetNextUid</a></div><div class="ttdeci">uint16_t GetNextUid(bool peekOnly)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00058">ProfilingUtils.cpp:58</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/profiling/<a class="el" href="src_2profiling_2_counter_directory_8hpp_source.xhtml">CounterDirectory.hpp</a></li>
<li>src/profiling/<a class="el" href="_counter_directory_8cpp_source.xhtml">CounterDirectory.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="namespacearmnn_1_1profiling.xhtml">profiling</a></li><li class="navelem"><a class="el" href="classarmnn_1_1profiling_1_1_counter_directory.xhtml">CounterDirectory</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:52 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
