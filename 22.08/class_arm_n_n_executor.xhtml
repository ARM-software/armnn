<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: ArmNNExecutor Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('class_arm_n_n_executor.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="class_arm_n_n_executor-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ArmNNExecutor Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_arm_n_n_executor_8hpp_source.xhtml">ArmNNExecutor.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ArmNNExecutor:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_arm_n_n_executor.png" usemap="#ArmNNExecutor_map" alt=""/>
  <map id="ArmNNExecutor_map" name="ArmNNExecutor_map">
<area href="class_i_executor.xhtml" title="IExecutor executes a network. " alt="IExecutor" shape="rect" coords="0,0,103,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aa9bcc5837a0ef0e503f56d634b1e7184"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_arm_n_n_executor.xhtml#aa9bcc5837a0ef0e503f56d634b1e7184">ArmNNExecutor</a> (const <a class="el" href="struct_execute_network_params.xhtml">ExecuteNetworkParams</a> &amp;params, <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> runtimeOptions)</td></tr>
<tr class="separator:aa9bcc5837a0ef0e503f56d634b1e7184"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b274ddaba15738d696359ad327a88ca"><td class="memItemLeft" align="right" valign="top">std::vector&lt; const void *&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_arm_n_n_executor.xhtml#a7b274ddaba15738d696359ad327a88ca">Execute</a> () override</td></tr>
<tr class="memdesc:a7b274ddaba15738d696359ad327a88ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Execute the given network.  <a href="#a7b274ddaba15738d696359ad327a88ca">More...</a><br /></td></tr>
<tr class="separator:a7b274ddaba15738d696359ad327a88ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21887e76c6b67797ada411a163d81a62"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_arm_n_n_executor.xhtml#a21887e76c6b67797ada411a163d81a62">PrintNetworkInfo</a> () override</td></tr>
<tr class="memdesc:a21887e76c6b67797ada411a163d81a62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print available information about the network.  <a href="#a21887e76c6b67797ada411a163d81a62">More...</a><br /></td></tr>
<tr class="separator:a21887e76c6b67797ada411a163d81a62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac65a3d900d923c4582e059c2281e70e3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_arm_n_n_executor.xhtml#ac65a3d900d923c4582e059c2281e70e3">CompareAndPrintResult</a> (std::vector&lt; const void *&gt; otherOutput) override</td></tr>
<tr class="memdesc:ac65a3d900d923c4582e059c2281e70e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare the output with the result of another <a class="el" href="class_i_executor.xhtml" title="IExecutor executes a network. ">IExecutor</a>.  <a href="#ac65a3d900d923c4582e059c2281e70e3">More...</a><br /></td></tr>
<tr class="separator:ac65a3d900d923c4582e059c2281e70e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_class_i_executor"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_class_i_executor')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="class_i_executor.xhtml">IExecutor</a></td></tr>
<tr class="memitem:a35ce388d080edd9b1fc52dd91cf80deb inherit pub_methods_class_i_executor"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_i_executor.xhtml#a35ce388d080edd9b1fc52dd91cf80deb">~IExecutor</a> ()</td></tr>
<tr class="separator:a35ce388d080edd9b1fc52dd91cf80deb inherit pub_methods_class_i_executor"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_arm_n_n_executor_8hpp_source.xhtml#l00037">37</a> of file <a class="el" href="_arm_n_n_executor_8hpp_source.xhtml">ArmNNExecutor.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aa9bcc5837a0ef0e503f56d634b1e7184"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9bcc5837a0ef0e503f56d634b1e7184">&#9670;&nbsp;</a></span>ArmNNExecutor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_arm_n_n_executor.xhtml">ArmNNExecutor</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="struct_execute_network_params.xhtml">ExecuteNetworkParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a>&#160;</td>
          <td class="paramname"><em>runtimeOptions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_arm_n_n_executor_8cpp_source.xhtml#l00017">17</a> of file <a class="el" href="_arm_n_n_executor_8cpp_source.xhtml">ArmNNExecutor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00017">CheckInferenceTimeThreshold()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00049">IRuntime::Create()</a>, <a class="el" href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa566666dfc3a9a82da0d7b0816b19f278">armnn::DetailsOnly</a>, <a class="el" href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa497ab261a562e316736c2cb59b839d32">armnn::DetailsWithEvents</a>, <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Failure</a>, <a class="el" href="_async_execution_callback_8cpp_source.xhtml#l00046">AsyncCallbackManager::GetNewCallback()</a>, <a class="el" href="_async_execution_callback_8cpp_source.xhtml#l00060">AsyncCallbackManager::GetNotifiedCallback()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00019">armnn::GetTimeDuration()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00014">armnn::GetTimeNow()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00029">ExecuteNetworkParams::m_Concurrent</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00053">ExecuteNetworkParams::m_DontPrintOutputs</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00031">ExecuteNetworkParams::m_DynamicBackendsPath</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00098">IRuntime::CreationOptions::m_DynamicBackendsPath</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00093">IRuntime::CreationOptions::m_EnableGpuProfiling</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00036">ExecuteNetworkParams::m_EnableProfiling</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00037">ExecuteNetworkParams::m_GenerateTensorData</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00063">ExecuteNetworkParams::m_ImportInputsIfAligned</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00044">ExecuteNetworkParams::m_Iterations</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00048">ExecuteNetworkParams::m_OutputDetailsOnlyToStdOut</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00047">ExecuteNetworkParams::m_OutputDetailsToStdOut</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00062">ExecuteNetworkParams::m_ThreadPoolSize</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00057">ExecuteNetworkParams::m_ThresholdTime</a>, <a class="el" href="namespacearmnn.xhtml#a8e72227ebe5ac505cf44790f2e6eb488a87f8a6ab85c9ced3702b4ea641ad4bb5">armnn::Medium</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::warning</a>.</p>
<div class="fragment"><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;: m_Params(params)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    runtimeOptions.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a2fe8c3eadf4f4f9c0c664a24a2a298f9">m_EnableGpuProfiling</a> = params.<a class="code" href="struct_execute_network_params.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    runtimeOptions.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a> = params.<a class="code" href="struct_execute_network_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    m_Runtime = <a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(runtimeOptions);</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">auto</span> parser = CreateParser();</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">auto</span> network = parser-&gt;CreateNetwork(m_Params);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keyword">auto</span> optNet = OptimizeNetwork(network.get());</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    m_IOInfo = GetIOInfo(optNet.get());</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    SetupInputsAndOutputs();</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    std::string errorMsg;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1f">armnn::ProfilingDetailsMethod</a> profilingDetailsMethod = ProfilingDetailsMethod::Undefined;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#ab17deb382179697b4702cc4f909e71f8">m_OutputDetailsOnlyToStdOut</a>)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        profilingDetailsMethod = <a class="code" href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa566666dfc3a9a82da0d7b0816b19f278">armnn::ProfilingDetailsMethod::DetailsOnly</a>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#ae96fc745917a3a0c0de7a818c9a05012">m_OutputDetailsToStdOut</a>)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        profilingDetailsMethod = <a class="code" href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa497ab261a562e316736c2cb59b839d32">armnn::ProfilingDetailsMethod::DetailsWithEvents</a>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> networkProperties{m_Params.<a class="code" href="struct_execute_network_params.xhtml#abf3cb45be3828b72b4ac08f87ac6c779">m_Concurrent</a>,</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                         MemorySource::Undefined,</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                                         MemorySource::Undefined,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                                         params.<a class="code" href="struct_execute_network_params.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                                         profilingDetailsMethod};</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    m_Runtime-&gt;LoadNetwork(m_NetworkId, std::move(optNet), errorMsg, networkProperties);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">if</span> (m_Params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a> &gt; 1)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        std::stringstream msg;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        msg &lt;&lt; <span class="stringliteral">&quot;Network will be executed &quot;</span> &lt;&lt; m_Params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">if</span> (m_Params.<a class="code" href="struct_execute_network_params.xhtml#abf3cb45be3828b72b4ac08f87ac6c779">m_Concurrent</a>)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            msg &lt;&lt; <span class="stringliteral">&quot; times in an asynchronous manner. &quot;</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            msg &lt;&lt; <span class="stringliteral">&quot; times successively. &quot;</span>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        msg &lt;&lt; <span class="stringliteral">&quot;The input-tensor-data files will be reused recursively if the user didn&#39;t provide enough to &quot;</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;               <span class="stringliteral">&quot;cover each execution.&quot;</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; msg.str();</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">if</span> (m_Params.<a class="code" href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">m_GenerateTensorData</a>)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;The input data was generated, note that the output will not be useful&quot;</span>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">if</span> (m_Params.<a class="code" href="struct_execute_network_params.xhtml#ac828647e0c753c3727c8c1f81939f7e4">m_DontPrintOutputs</a>)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Printing outputs to console is disabled.&quot;</span>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00049">Runtime.cpp:49</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ac828647e0c753c3727c8c1f81939f7e4"><div class="ttname"><a href="struct_execute_network_params.xhtml#ac828647e0c753c3727c8c1f81939f7e4">ExecuteNetworkParams::m_DontPrintOutputs</a></div><div class="ttdeci">bool m_DontPrintOutputs</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00053">ExecuteNetworkParams.hpp:53</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ab17deb382179697b4702cc4f909e71f8"><div class="ttname"><a href="struct_execute_network_params.xhtml#ab17deb382179697b4702cc4f909e71f8">ExecuteNetworkParams::m_OutputDetailsOnlyToStdOut</a></div><div class="ttdeci">bool m_OutputDetailsOnlyToStdOut</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00048">ExecuteNetworkParams.hpp:48</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="struct_execute_network_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">ExecuteNetworkParams::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00031">ExecuteNetworkParams.hpp:31</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae060224135f57f926cbda9d2732a2b1fa566666dfc3a9a82da0d7b0816b19f278"><div class="ttname"><a href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa566666dfc3a9a82da0d7b0816b19f278">armnn::ProfilingDetailsMethod::DetailsOnly</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_abf3cb45be3828b72b4ac08f87ac6c779"><div class="ttname"><a href="struct_execute_network_params.xhtml#abf3cb45be3828b72b4ac08f87ac6c779">ExecuteNetworkParams::m_Concurrent</a></div><div class="ttdeci">bool m_Concurrent</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00029">ExecuteNetworkParams.hpp:29</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ae96fc745917a3a0c0de7a818c9a05012"><div class="ttname"><a href="struct_execute_network_params.xhtml#ae96fc745917a3a0c0de7a818c9a05012">ExecuteNetworkParams::m_OutputDetailsToStdOut</a></div><div class="ttdeci">bool m_OutputDetailsToStdOut</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00047">ExecuteNetworkParams.hpp:47</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae060224135f57f926cbda9d2732a2b1f"><div class="ttname"><a href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1f">armnn::ProfilingDetailsMethod</a></div><div class="ttdeci">ProfilingDetailsMethod</div><div class="ttdoc">Define the behaviour of the internal profiler when outputting network details. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00071">Types.hpp:71</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00035">IRuntime.hpp:35</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae060224135f57f926cbda9d2732a2b1fa497ab261a562e316736c2cb59b839d32"><div class="ttname"><a href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa497ab261a562e316736c2cb59b839d32">armnn::ProfilingDetailsMethod::DetailsWithEvents</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a6e4eff6a5f40cb026ea76d3c13c96341"><div class="ttname"><a href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">ExecuteNetworkParams::m_Iterations</a></div><div class="ttdeci">size_t m_Iterations</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00044">ExecuteNetworkParams.hpp:44</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a99c7360a4d4b248b3f10607bc5d2fe7b"><div class="ttname"><a href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">ExecuteNetworkParams::m_GenerateTensorData</a></div><div class="ttdeci">bool m_GenerateTensorData</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00037">ExecuteNetworkParams.hpp:37</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">armnn::IRuntime::CreationOptions::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdoc">Setting this value will override the paths set by the DYNAMIC_BACKEND_PATHS compiler directive Only a...</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00098">IRuntime.hpp:98</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml_a2fe8c3eadf4f4f9c0c664a24a2a298f9"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a2fe8c3eadf4f4f9c0c664a24a2a298f9">armnn::IRuntime::CreationOptions::m_EnableGpuProfiling</a></div><div class="ttdeci">bool m_EnableGpuProfiling</div><div class="ttdoc">Setting this flag will allow the user to obtain GPU profiling information from the runtime...</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00093">IRuntime.hpp:93</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a26d42007440bb01a1a6d0ab3b5a657ee"><div class="ttname"><a href="struct_execute_network_params.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">ExecuteNetworkParams::m_EnableProfiling</a></div><div class="ttdeci">bool m_EnableProfiling</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00036">ExecuteNetworkParams.hpp:36</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac65a3d900d923c4582e059c2281e70e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac65a3d900d923c4582e059c2281e70e3">&#9670;&nbsp;</a></span>CompareAndPrintResult()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CompareAndPrintResult </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; const void *&gt;&#160;</td>
          <td class="paramname"><em>otherOutput</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare the output with the result of another <a class="el" href="class_i_executor.xhtml" title="IExecutor executes a network. ">IExecutor</a>. </p>

<p>Implements <a class="el" href="class_i_executor.xhtml#aa5ca9ff9e89dbc47623206d4e7b98376">IExecutor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_arm_n_n_executor_8cpp_source.xhtml#l00671">671</a> of file <a class="el" href="_arm_n_n_executor_8cpp_source.xhtml">ArmNNExecutor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00038">IOnnxParser::Create()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00047">IDeserializer::Create()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l00063">ITfLiteParser::Create()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00075">LogAndThrow()</a>, <a class="el" href="_i_deserializer_8hpp_source.xhtml#l00020">BindingPointInfo::m_BindingId</a>, <a class="el" href="_i_tf_lite_parser_8hpp_source.xhtml#l00038">ITfLiteParser::TfLiteParserOptions::m_InferAndValidate</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00038">ExecuteNetworkParams::m_InferOutputShape</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00041">ExecuteNetworkParams::m_InputNames</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00043">ExecuteNetworkParams::m_InputTensorShapes</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00040">ExecuteNetworkParams::m_IsModelBinary</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00045">ExecuteNetworkParams::m_ModelPath</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00051">ExecuteNetworkParams::m_ParseUnsupported</a>, <a class="el" href="_i_tf_lite_parser_8hpp_source.xhtml#l00037">ITfLiteParser::TfLiteParserOptions::m_StandInLayerForUnsupported</a>, <a class="el" href="_i_deserializer_8hpp_source.xhtml#l00021">BindingPointInfo::m_TensorInfo</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::QSymmS16</a>, and <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>.</p>
<div class="fragment"><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;{</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index = 0;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; outputTensors: m_OutputTensorsVec)</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    {</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; outputTensor: outputTensors)</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        {</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;            <span class="keywordtype">float</span> result = 0;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            <span class="keywordtype">size_t</span> size = outputTensor.second.GetNumBytes();</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;            <span class="keywordflow">switch</span> (outputTensor.second.GetDataType())</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;            {</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>:</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                {</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                    result = ComputeRMSE&lt;float&gt;(outputTensor.second.GetMemoryArea(), otherOutput[index++], size);</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                }</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a>:</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                {</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                    result = ComputeRMSE&lt;int16_t&gt;(outputTensor.second.GetMemoryArea(), otherOutput[index++], size);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                }</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::DataType::QSymmS8</a>:</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>:</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                {</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                    result = ComputeRMSE&lt;int8_t&gt;(outputTensor.second.GetMemoryArea(), otherOutput[index++], size);</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                }</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a>:</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                {</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                    result = ComputeRMSE&lt;uint8_t&gt;(outputTensor.second.GetMemoryArea(), otherOutput[index++], size);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                }</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                {</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                    <a class="code" href="_network_execution_utils_8cpp.xhtml#a0d853d3a7b138f39cc775c26e2c0821a">LogAndThrow</a>(<span class="stringliteral">&quot;Unexpected DataType&quot;</span>);</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                }</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;            }</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;RMSE: of &quot;</span> &lt;&lt; result &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        }</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    }</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;}</div><div class="ttc" id="_network_execution_utils_8cpp_xhtml_a0d853d3a7b138f39cc775c26e2c0821a"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#a0d853d3a7b138f39cc775c26e2c0821a">LogAndThrow</a></div><div class="ttdeci">void LogAndThrow(std::string eMsg)</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00075">NetworkExecutionUtils.cpp:75</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::DataType::QSymmS8</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7b274ddaba15738d696359ad327a88ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b274ddaba15738d696359ad327a88ca">&#9670;&nbsp;</a></span>Execute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; const void * &gt; Execute </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Execute the given network. </p>
<dl class="section return"><dt>Returns</dt><dd>std::vector&lt;const void*&gt; A type erased vector of the outputs, that can be compared with the output of another <a class="el" href="class_i_executor.xhtml" title="IExecutor executes a network. ">IExecutor</a> </dd></dl>

<p>Implements <a class="el" href="class_i_executor.xhtml#ab11f3f9cae37ecd9f9760d5ea82f47b3">IExecutor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_arm_n_n_executor_8cpp_source.xhtml#l00198">198</a> of file <a class="el" href="_arm_n_n_executor_8cpp_source.xhtml">ArmNNExecutor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00062">ExecuteNetworkParams::m_ThreadPoolSize</a>.</p>
<div class="fragment"><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;{</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">if</span>(m_Params.<a class="code" href="struct_execute_network_params.xhtml#a7adc5dcfe3d76ac489f253c4d5f439c8">m_ThreadPoolSize</a> == 0)</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        ExecuteSync();</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        ExecuteAsync();</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    std::vector&lt;const void*&gt; results;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; output : m_OutputStorage)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        results.push_back(output.m_Mem);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">return</span> results;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div><div class="ttc" id="struct_execute_network_params_xhtml_a7adc5dcfe3d76ac489f253c4d5f439c8"><div class="ttname"><a href="struct_execute_network_params.xhtml#a7adc5dcfe3d76ac489f253c4d5f439c8">ExecuteNetworkParams::m_ThreadPoolSize</a></div><div class="ttdeci">size_t m_ThreadPoolSize</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00062">ExecuteNetworkParams.hpp:62</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a21887e76c6b67797ada411a163d81a62"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21887e76c6b67797ada411a163d81a62">&#9670;&nbsp;</a></span>PrintNetworkInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void PrintNetworkInfo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Print available information about the network. </p>

<p>Implements <a class="el" href="class_i_executor.xhtml#a225e907393c46b20bbed09e1a6a48e6d">IExecutor</a>.</p>

<p class="definition">Definition at line <a class="el" href="_arm_n_n_executor_8cpp_source.xhtml#l00217">217</a> of file <a class="el" href="_arm_n_n_executor_8cpp_source.xhtml">ArmNNExecutor.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::BFloat16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::Boolean</a>, <a class="el" href="_network_8cpp_source.xhtml#l02956">IOptimizedNetwork::ExecuteStrategy()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::Float16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="classarmnn_1_1_i_input_slot.xhtml#a81fbf6103761e55061b62ba989b00f10">IInputSlot::GetConnection()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_types_utils_8hpp_source.xhtml#l00202">armnn::GetDataTypeName()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">IConnectableLayer::GetInputSlot()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00427">TensorInfo::GetNumBytes()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00196">TensorInfo::GetNumElements()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">IConnectableLayer::GetOutputSlot()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00478">TensorInfo::GetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00461">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="classarmnn_1_1_i_output_slot.xhtml#a9943775a364fc4ab53b85ac88f311886">IOutputSlot::GetTensorInfo()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00019">armnn::GetTimeDuration()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00014">armnn::GetTimeNow()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">IConnectableLayer::GetType()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb">armnn::InferAndValidate</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00075">LogAndThrow()</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00211">OptimizerOptions::m_Debug</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00037">ExecuteNetworkParams::m_GenerateTensorData</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00063">ExecuteNetworkParams::m_ImportInputsIfAligned</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00041">ExecuteNetworkParams::m_InputNames</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00042">ExecuteNetworkParams::m_InputTensorDataFilePaths</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00044">ExecuteNetworkParams::m_Iterations</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00227">OptimizerOptions::m_ModelOptions</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00050">ExecuteNetworkParams::m_OutputTensorFiles</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00230">OptimizerOptions::m_ProfilingEnabled</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00218">OptimizerOptions::m_ReduceFp32ToBf16</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00208">OptimizerOptions::m_ReduceFp32ToFp16</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00064">ExecuteNetworkParams::m_ReuseBuffers</a>, <a class="el" href="_i_network_8hpp_source.xhtml#l00221">OptimizerOptions::m_shapeInferenceMethod</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00062">ExecuteNetworkParams::m_ThreadPoolSize</a>, <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::Malloc</a>, <a class="el" href="_network_8cpp_source.xhtml#l01864">armnn::Optimize()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::QSymmS16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>, <a class="el" href="_network_8cpp_source.xhtml#l00509">IOptimizedNetwork::SerializeToDot()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ae1b3c9c6087a93b07c83e0b04f377a8d">armnn::Signed64</a>, and <a class="el" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">armnn::ValidateOnly</a>.</p>
<div class="fragment"><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; inputNames = m_Params.<a class="code" href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">m_InputNames</a>.size() != 0 ?</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                                 m_Params.<a class="code" href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">m_InputNames</a> :</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                                 m_IOInfo.m_InputNames;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    ss &lt;&lt; <span class="stringliteral">&quot;===== Network Info =====\n&quot;</span>;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    ss &lt;&lt; <span class="stringliteral">&quot;Inputs in order:\n&quot;</span>;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; inputName : inputNames)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> inputInfo = m_IOInfo.m_InputInfoMap[inputName].second;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        ss &lt;&lt;  inputName &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; inputInfo.GetShape() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a81b5ff8545adad19a1c9d4ca076d552c">GetDataTypeName</a>(inputInfo.GetDataType());</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keywordflow">if</span> (inputInfo.IsQuantized())</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            ss &lt;&lt; <span class="stringliteral">&quot; Quantization Offset: &quot;</span> &lt;&lt; inputInfo.GetQuantizationOffset();</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            <span class="keywordflow">if</span> (inputInfo.HasMultipleQuantizationScales())</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                ss &lt;&lt; <span class="stringliteral">&quot; Quantization scales: &quot;</span>;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> scale: inputInfo.GetQuantizationScales())</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    ss &lt;&lt; scale &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                }</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            {</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                ss &lt;&lt; <span class="stringliteral">&quot; Quantization scale: &quot;</span> &lt;&lt; inputInfo.GetQuantizationScale();</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        ss  &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    }</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    ss &lt;&lt; <span class="stringliteral">&quot;Outputs in order:\n&quot;</span>;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; outputName : m_IOInfo.m_OutputNames)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> outputInfo = m_IOInfo.m_OutputInfoMap[outputName].second;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        ss &lt;&lt;  outputName &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; outputInfo.GetShape() &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a81b5ff8545adad19a1c9d4ca076d552c">GetDataTypeName</a>(outputInfo.GetDataType());</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">if</span> (outputInfo.IsQuantized())</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            ss &lt;&lt; <span class="stringliteral">&quot; Quantization Offset: &quot;</span> &lt;&lt; outputInfo.GetQuantizationOffset();</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="keywordflow">if</span> (outputInfo.HasMultipleQuantizationScales())</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                ss &lt;&lt; <span class="stringliteral">&quot; Quantization scales: &quot;</span>;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> scale: outputInfo.GetQuantizationScales())</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    ss &lt;&lt; scale &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                }</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            }</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                ss &lt;&lt; <span class="stringliteral">&quot; Quantization scale: &quot;</span> &lt;&lt; outputInfo.GetQuantizationScale();</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            }</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        }</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        ss  &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    std::cout &lt;&lt; ss.str() &lt;&lt; std::endl;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a81b5ff8545adad19a1c9d4ca076d552c"><div class="ttname"><a href="namespacearmnn.xhtml#a81b5ff8545adad19a1c9d4ca076d552c">armnn::GetDataTypeName</a></div><div class="ttdeci">constexpr const char * GetDataTypeName(DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00202">TypesUtils.hpp:202</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_aaf3c7f286030842a31025309ab6a8329"><div class="ttname"><a href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">ExecuteNetworkParams::m_InputNames</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_InputNames</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00041">ExecuteNetworkParams.hpp:41</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>tests/ExecuteNetwork/<a class="el" href="_arm_n_n_executor_8hpp_source.xhtml">ArmNNExecutor.hpp</a></li>
<li>tests/ExecuteNetwork/<a class="el" href="_arm_n_n_executor_8cpp_source.xhtml">ArmNNExecutor.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="class_arm_n_n_executor.xhtml">ArmNNExecutor</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:36 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
