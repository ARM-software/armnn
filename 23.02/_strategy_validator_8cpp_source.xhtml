<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/memoryOptimizerStrategyLibrary/strategies/StrategyValidator.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_strategy_validator_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">StrategyValidator.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_strategy_validator_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2021 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_strategy_validator_8hpp.xhtml">StrategyValidator.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;{</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno"><a class="line" href="classarmnn_1_1_strategy_validator.xhtml#ada820fb9d89d2fb75bacaffe511791b7">   13</a></span>&#160;std::vector&lt;MemBin&gt; <a class="code" href="classarmnn_1_1_strategy_validator.xhtml#ada820fb9d89d2fb75bacaffe511791b7">StrategyValidator::Optimize</a>(std::vector&lt;MemBlock&gt;&amp; memBlocks)</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    <span class="comment">// Condition #1: All Memblocks have been assigned to a MemBin</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <span class="comment">// Condition #2: No Memblock is assigned to multiple MemBins</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="comment">// Condition #3: No two Memblocks in a MemBin overlap in both the X and Y axis</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="comment">//               Memblocks in a MemBin can overlap on the X axis for SingleAxisPacking</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="comment">//               Memblocks in a MemBin can overlap on the Y axis or the X for MultiAxisPacking but not both</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    std::unordered_map&lt;unsigned int, bool&gt; validationMap;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> memBlock : memBlocks)</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        validationMap[memBlock.m_Index] = <span class="keyword">false</span>;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    }</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keyword">auto</span> memBinVect = m_Strategy-&gt;Optimize(memBlocks);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="comment">// Compare each of the input memblocks against every assignedBlock in each bin</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="comment">// if we get through all bins without finding a block return</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="comment">// if at any stage the block is found twice return</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> memBin : memBinVect)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> block : memBin.m_MemBlocks)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            <span class="keywordflow">try</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                <span class="keywordflow">if</span> (!validationMap.at(block.m_Index))</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                    validationMap.at(block.m_Index) = <span class="keyword">true</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_memory_validation_exception.xhtml">MemoryValidationException</a>(<span class="stringliteral">&quot;Condition #2: Memblock is assigned to multiple MemBins&quot;</span>);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::out_of_range&amp;)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_memory_validation_exception.xhtml">MemoryValidationException</a>(<span class="stringliteral">&quot;Unknown index &quot;</span>);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> memBlock : memBlocks)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">if</span> (!validationMap.at(memBlock.m_Index))</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_memory_validation_exception.xhtml">MemoryValidationException</a>(<span class="stringliteral">&quot;Condition #1: Block not found in any bin&quot;</span>);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// Check for overlaps once we know blocks are all assigned and no duplicates</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> bin : memBinVect)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; bin.m_MemBlocks.size(); ++i)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keyword">auto</span> Block1 = bin.m_MemBlocks[i];</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keyword">auto</span> B1Left = Block1.m_Offset;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keyword">auto</span> B1Right = Block1.m_Offset + Block1.m_MemSize;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="keyword">auto</span> B1Top = Block1.m_StartOfLife;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keyword">auto</span> B1Bottom = Block1.m_EndOfLife;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="comment">// Only compare with blocks after the current one as previous have already been checked</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = i + 1; j &lt; bin.m_MemBlocks.size(); ++j)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="keyword">auto</span> Block2 = bin.m_MemBlocks[j];</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                <span class="keyword">auto</span> B2Left = Block2.m_Offset;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="keyword">auto</span> B2Right = Block2.m_Offset + Block2.m_MemSize;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keyword">auto</span> B2Top = Block2.m_StartOfLife;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keyword">auto</span> B2Bottom = Block2.m_EndOfLife;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keywordflow">switch</span> (m_Strategy-&gt;GetMemBlockStrategyType())</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    <span class="keywordflow">case</span> (<a class="code" href="namespacearmnn.xhtml#a7100de49939c3e393101f78d425a98c6a568437eb3752bdf14546b5c221ba5be7">MemBlockStrategyType::SingleAxisPacking</a>):</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                        <span class="keywordflow">if</span> (B1Top &lt;= B2Bottom &amp;&amp; B1Bottom &gt;= B2Top)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                        {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_memory_validation_exception.xhtml">MemoryValidationException</a>(<span class="stringliteral">&quot;Condition #3: &quot;</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                        <span class="stringliteral">&quot;invalid as two Memblocks overlap on the Y axis for SingleAxisPacking&quot;</span>);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                        }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    <span class="keywordflow">case</span> (<a class="code" href="namespacearmnn.xhtml#a7100de49939c3e393101f78d425a98c6ab093fa975bc79c72c686e6d9773a0d1f">MemBlockStrategyType::MultiAxisPacking</a>):</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                        <span class="comment">// If overlapping on both X and Y then invalid</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        <span class="keywordflow">if</span> (B1Left &lt;= B2Right &amp;&amp; B1Right &gt;= B2Left &amp;&amp;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                            B1Top &lt;= B2Bottom &amp;&amp; B1Bottom &gt;= B2Top)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                        {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                            <span class="comment">// Condition #3: two Memblocks overlap on both the X and Y axis</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_memory_validation_exception.xhtml">MemoryValidationException</a>(<span class="stringliteral">&quot;Condition #3: &quot;</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                                            <span class="stringliteral">&quot;two Memblocks overlap on both the X and Y axis&quot;</span>);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                        }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_memory_validation_exception.xhtml">MemoryValidationException</a>(<span class="stringliteral">&quot;Unknown MemBlockStrategyType&quot;</span>);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">// None of the conditions broken so return true</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">return</span> memBinVect;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="_strategy_validator_8hpp_xhtml"><div class="ttname"><a href="_strategy_validator_8hpp.xhtml">StrategyValidator.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7100de49939c3e393101f78d425a98c6ab093fa975bc79c72c686e6d9773a0d1f"><div class="ttname"><a href="namespacearmnn.xhtml#a7100de49939c3e393101f78d425a98c6ab093fa975bc79c72c686e6d9773a0d1f">armnn::MemBlockStrategyType::MultiAxisPacking</a></div></div>
<div class="ttc" id="classarmnn_1_1_strategy_validator_xhtml_ada820fb9d89d2fb75bacaffe511791b7"><div class="ttname"><a href="classarmnn_1_1_strategy_validator.xhtml#ada820fb9d89d2fb75bacaffe511791b7">armnn::StrategyValidator::Optimize</a></div><div class="ttdeci">std::vector&lt; MemBin &gt; Optimize(std::vector&lt; MemBlock &gt; &amp;memBlocks) override</div><div class="ttdef"><b>Definition:</b> <a href="_strategy_validator_8cpp_source.xhtml#l00013">StrategyValidator.cpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7100de49939c3e393101f78d425a98c6a568437eb3752bdf14546b5c221ba5be7"><div class="ttname"><a href="namespacearmnn.xhtml#a7100de49939c3e393101f78d425a98c6a568437eb3752bdf14546b5c221ba5be7">armnn::MemBlockStrategyType::SingleAxisPacking</a></div></div>
<div class="ttc" id="classarmnn_1_1_memory_validation_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_memory_validation_exception.xhtml">armnn::MemoryValidationException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00158">Exceptions.hpp:158</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_222b9efbf86b09050d83daeffd81e1d1.xhtml">memoryOptimizerStrategyLibrary</a></li><li class="navelem"><a class="el" href="dir_d49dbf30bb5f789805533dd1aa43d8d9.xhtml">strategies</a></li><li class="navelem"><a class="el" href="_strategy_validator_8cpp.xhtml">StrategyValidator.cpp</a></li>
    <li class="footer">Generated on Fri Feb 24 2023 10:24:25 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
