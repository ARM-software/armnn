<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: include/armnn/utility/PolymorphicDowncast.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_polymorphic_downcast_8hpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">PolymorphicDowncast.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_polymorphic_downcast_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2020 Arm Ltd. All rights reserved.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160; </div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_assert_8hpp.xhtml">Assert.hpp</a>&quot;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_exceptions_8hpp.xhtml">armnn/Exceptions.hpp</a>&gt;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; </div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160; </div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;{</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">// If we are testing then throw an exception, otherwise regular assert</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#if defined(ARMNN_POLYMORPHIC_CAST_TESTABLE)</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#   define ARMNN_POLYMORPHIC_CAST_CHECK_METHOD(cond) ConditionalThrow&lt;std::bad_cast&gt;(cond)</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="_polymorphic_downcast_8hpp.xhtml#a0849536b79d8d3f3d62b21e04f820bce">   22</a></span>&#160;<span class="preprocessor">#   define ARMNN_POLYMORPHIC_CAST_CHECK_METHOD(cond) ARMNN_ASSERT(cond)</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">//Only check the condition if debug build or during testing</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#if !defined(NDEBUG) || defined(ARMNN_POLYMORPHIC_CAST_TESTABLE)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="_polymorphic_downcast_8hpp.xhtml#a816fdb1ce84860c918a1915b3ea23459">   27</a></span>&#160;<span class="preprocessor">#   define ARMNN_POLYMORPHIC_CAST_CHECK(cond)  ARMNN_POLYMORPHIC_CAST_CHECK_METHOD(cond)</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#   define ARMNN_POLYMORPHIC_CAST_CHECK(cond) // release builds dont check the cast</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1utility.xhtml">   33</a></span>&#160;<span class="keyword">namespace </span>utility</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">// static_pointer_cast overload for std::shared_ptr</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;</div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1utility.xhtml#a202fd3128ce49c1113410ae8d54c5b76">   37</a></span>&#160;std::shared_ptr&lt;T1&gt; <a class="code" href="namespacearmnn_1_1utility.xhtml#a202fd3128ce49c1113410ae8d54c5b76">StaticPointerCast</a> (<span class="keyword">const</span> std::shared_ptr&lt;T2&gt;&amp; sp)</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">return</span> std::static_pointer_cast&lt;T1&gt;(sp);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">// dynamic_pointer_cast overload for std::shared_ptr</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;</div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1utility.xhtml#acd97c478143c3351ee920ba02111bb35">   44</a></span>&#160;std::shared_ptr&lt;T1&gt; <a class="code" href="namespacearmnn_1_1utility.xhtml#acd97c478143c3351ee920ba02111bb35">DynamicPointerCast</a> (<span class="keyword">const</span> std::shared_ptr&lt;T2&gt;&amp; sp)</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">return</span> std::dynamic_pointer_cast&lt;T1&gt;(sp);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">// static_pointer_cast overload for raw pointers</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;</div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1utility.xhtml#ac97864a595a81c8b8ce8b9d593ef8923">   51</a></span>&#160;<span class="keyword">inline</span> T1* <a class="code" href="namespacearmnn_1_1utility.xhtml#a202fd3128ce49c1113410ae8d54c5b76">StaticPointerCast</a>(T2* ptr)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T1*<span class="keyword">&gt;</span>(ptr);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">// dynamic_pointer_cast overload for raw pointers</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;</div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="namespacearmnn_1_1utility.xhtml#aeee59a68793b736996fd5423b6fbdf4e">   58</a></span>&#160;<span class="keyword">inline</span> T1* <a class="code" href="namespacearmnn_1_1utility.xhtml#acd97c478143c3351ee920ba02111bb35">DynamicPointerCast</a>(T2* ptr)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">dynamic_cast&lt;</span>T1*<span class="keyword">&gt;</span>(ptr);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;} <span class="comment">// namespace utility</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">/// Polymorphic downcast for build in pointers only</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">///</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">/// Usage: Child* pChild = PolymorphicDowncast&lt;Child*&gt;(pBase);</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">///</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">/// \tparam DestType    Pointer type to the target object (Child pointer type)</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">/// \tparam SourceType  Pointer type to the source object (Base pointer type)</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">/// \param value        Pointer to the source object</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">/// \return             Pointer of type DestType (Pointer of type child)</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"></span><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DestType, <span class="keyword">typename</span> SourceType&gt;</div>
<div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#aa4e89c644c511e255f6a7ecbd5d14686">   74</a></span>&#160;DestType <a class="code" href="namespacearmnn.xhtml#aa4e89c644c511e255f6a7ecbd5d14686">PolymorphicDowncast</a>(SourceType* value)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    static_assert(std::is_pointer&lt;DestType&gt;::value,</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                  <span class="stringliteral">&quot;PolymorphicDowncast only works with pointer types.&quot;</span>);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="_polymorphic_downcast_8hpp.xhtml#a816fdb1ce84860c918a1915b3ea23459">ARMNN_POLYMORPHIC_CAST_CHECK</a>(<span class="keyword">dynamic_cast&lt;</span>DestType<span class="keyword">&gt;</span>(value) == value);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>DestType<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">/// Polymorphic downcast for shared pointers and build in pointers</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">///</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">/// Usage: auto pChild = PolymorphicPointerDowncast&lt;Child&gt;(pBase)</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">///</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">/// \tparam DestType    Type of the target object (Child type)</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">/// \tparam SourceType  Pointer type to the source object (Base (shared) pointer type)</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">/// \param value        Pointer to the source object</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">/// \return             Pointer of type DestType ((Shared) pointer of type child)</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"></span><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DestType, <span class="keyword">typename</span> SourceType&gt;</div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a6baab222db3195a0bd77f488a81fd316">   93</a></span>&#160;<span class="keyword">auto</span> <a class="code" href="namespacearmnn.xhtml#a6baab222db3195a0bd77f488a81fd316">PolymorphicPointerDowncast</a>(<span class="keyword">const</span> SourceType&amp; value)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="_polymorphic_downcast_8hpp.xhtml#a816fdb1ce84860c918a1915b3ea23459">ARMNN_POLYMORPHIC_CAST_CHECK</a>(utility::DynamicPointerCast&lt;DestType&gt;(value)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                 == value);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">return</span> utility::StaticPointerCast&lt;DestType&gt;(value);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;} <span class="comment">//namespace armnn</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="a_assert_8hpp_xhtml"><div class="ttname"><a href="_assert_8hpp.xhtml">Assert.hpp</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors.</div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a6baab222db3195a0bd77f488a81fd316"><div class="ttname"><a href="namespacearmnn.xhtml#a6baab222db3195a0bd77f488a81fd316">armnn::PolymorphicPointerDowncast</a></div><div class="ttdeci">auto PolymorphicPointerDowncast(const SourceType &amp;value)</div><div class="ttdoc">Polymorphic downcast for shared pointers and build in pointers.</div><div class="ttdef"><b>Definition:</b> <a href="_polymorphic_downcast_8hpp_source.xhtml#l00093">PolymorphicDowncast.hpp:93</a></div></div>
<div class="ttc" id="anamespacearmnn_1_1utility_xhtml_acd97c478143c3351ee920ba02111bb35"><div class="ttname"><a href="namespacearmnn_1_1utility.xhtml#acd97c478143c3351ee920ba02111bb35">armnn::utility::DynamicPointerCast</a></div><div class="ttdeci">std::shared_ptr&lt; T1 &gt; DynamicPointerCast(const std::shared_ptr&lt; T2 &gt; &amp;sp)</div><div class="ttdef"><b>Definition:</b> <a href="_polymorphic_downcast_8hpp_source.xhtml#l00044">PolymorphicDowncast.hpp:44</a></div></div>
<div class="ttc" id="anamespacearmnn_1_1utility_xhtml_a202fd3128ce49c1113410ae8d54c5b76"><div class="ttname"><a href="namespacearmnn_1_1utility.xhtml#a202fd3128ce49c1113410ae8d54c5b76">armnn::utility::StaticPointerCast</a></div><div class="ttdeci">std::shared_ptr&lt; T1 &gt; StaticPointerCast(const std::shared_ptr&lt; T2 &gt; &amp;sp)</div><div class="ttdef"><b>Definition:</b> <a href="_polymorphic_downcast_8hpp_source.xhtml#l00037">PolymorphicDowncast.hpp:37</a></div></div>
<div class="ttc" id="a_exceptions_8hpp_xhtml"><div class="ttname"><a href="_exceptions_8hpp.xhtml">Exceptions.hpp</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aa4e89c644c511e255f6a7ecbd5d14686"><div class="ttname"><a href="namespacearmnn.xhtml#aa4e89c644c511e255f6a7ecbd5d14686">armnn::PolymorphicDowncast</a></div><div class="ttdeci">DestType PolymorphicDowncast(SourceType *value)</div><div class="ttdoc">Polymorphic downcast for build in pointers only.</div><div class="ttdef"><b>Definition:</b> <a href="_polymorphic_downcast_8hpp_source.xhtml#l00074">PolymorphicDowncast.hpp:74</a></div></div>
<div class="ttc" id="a_polymorphic_downcast_8hpp_xhtml_a816fdb1ce84860c918a1915b3ea23459"><div class="ttname"><a href="_polymorphic_downcast_8hpp.xhtml#a816fdb1ce84860c918a1915b3ea23459">ARMNN_POLYMORPHIC_CAST_CHECK</a></div><div class="ttdeci">#define ARMNN_POLYMORPHIC_CAST_CHECK(cond)</div><div class="ttdef"><b>Definition:</b> <a href="_polymorphic_downcast_8hpp_source.xhtml#l00027">PolymorphicDowncast.hpp:27</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_2b72cc348e06937955e62ebdd8a13436.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_a8fc954923c193e6d993e59ec24545df.xhtml">utility</a></li><li class="navelem"><a class="el" href="_polymorphic_downcast_8hpp.xhtml">PolymorphicDowncast.hpp</a></li>
    <li class="footer">Generated on Wed Mar 22 2023 15:52:59 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
