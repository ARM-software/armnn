<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: AsyncExecutionSample.cpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_async_execution_sample_8cpp-example.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">AsyncExecutionSample.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<p>Yet another variant of the SimpleSample application. In this little sample app you will be shown how to run a network multiple times asynchronously.</p>
<dl class="section note"><dt>Note</dt><dd>This is currently an experimental interface</dd></dl>
<div class="fragment"><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Copyright Â© 2021 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="_i_network_8hpp.xhtml">armnn/INetwork.hpp</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="_i_runtime_8hpp.xhtml">armnn/IRuntime.hpp</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="_utils_8hpp.xhtml">armnn/Utils.hpp</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="_descriptors_8hpp.xhtml">armnn/Descriptors.hpp</a>&gt;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;thread&gt;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">/// A simple example of using the ArmNN SDK API to run a network multiple times with different inputs in an asynchronous</span></div><div class="line"><span class="comment">/// manner.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// Background info: The usual runtime-&gt;EnqueueWorkload, which is used to trigger the execution of a network, is not</span></div><div class="line"><span class="comment">///                  thread safe. Each workload has memory assigned to it which would be overwritten by each thread.</span></div><div class="line"><span class="comment">///                  Before we added support for this you had to load a network multiple times to execute it at the</span></div><div class="line"><span class="comment">///                  same time. Every time a network is loaded, it takes up memory on your device. Making the</span></div><div class="line"><span class="comment">///                  execution thread safe helps to reduce the memory footprint for concurrent executions significantly.</span></div><div class="line"><span class="comment">///                  This example shows you how to execute a model concurrently (multiple threads) while still only</span></div><div class="line"><span class="comment">///                  loading it once.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// As in most of our simple samples, the network in this example will ask the user for a single input number for each</span></div><div class="line"><span class="comment">/// execution of the network.</span></div><div class="line"><span class="comment">/// The network consists of a single fully connected layer with a single neuron. The neurons weight is set to 1.0f</span></div><div class="line"><span class="comment">/// to produce an output number that is the same as the input.</span></div><div class="line"><span class="comment"></span><span class="keywordtype">int</span> <a name="a0"></a><a class="code" href="_armnn_converter_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a>()</div><div class="line">{</div><div class="line">    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"></div><div class="line">    <span class="comment">// The first part of this code is very similar to the SimpleSample.cpp you should check it out for comparison</span></div><div class="line">    <span class="comment">// The interesting part starts when the graph is loaded into the runtime</span></div><div class="line"></div><div class="line">    std::vector&lt;float&gt; inputs;</div><div class="line">    <span class="keywordtype">float</span> number1;</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Please enter a number for the first iteration: &quot;</span> &lt;&lt; std::endl;</div><div class="line">    std::cin &gt;&gt; number1;</div><div class="line">    <span class="keywordtype">float</span> number2;</div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Please enter a number for the second iteration: &quot;</span> &lt;&lt; std::endl;</div><div class="line">    std::cin &gt;&gt; number2;</div><div class="line"></div><div class="line">    <span class="comment">// Turn on logging to standard output</span></div><div class="line">    <span class="comment">// This is useful in this sample so that users can learn more about what is going on</span></div><div class="line">    <a name="a1"></a><a class="code" href="namespacearmnn.xhtml#aa59f7a819c3e29d10ffc41e5c0616872">ConfigureLogging</a>(<span class="keyword">true</span>, <span class="keyword">false</span>, <a name="a2"></a><a class="code" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da0eaadb4fcb48a0a0ed7bc9868be9fbaa">LogSeverity::Warning</a>);</div><div class="line"></div><div class="line">    <span class="comment">// Construct ArmNN network</span></div><div class="line">    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> networkIdentifier;</div><div class="line">    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">INetworkPtr</a> myNetwork = <a name="a3"></a><a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>();</div><div class="line"></div><div class="line">    <span class="keywordtype">float</span> weightsData[] = {1.0f}; <span class="comment">// Identity</span></div><div class="line">    <a name="_a4"></a><a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> weightsInfo(<a name="_a5"></a><a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({1, 1}), <a name="a6"></a><a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>);</div><div class="line">    weightsInfo.<a name="a7"></a><a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">SetConstant</a>();</div><div class="line">    <a name="_a8"></a><a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> weights(weightsInfo, weightsData);</div><div class="line"></div><div class="line">    <span class="comment">// Constant layer that now holds weights data for FullyConnected</span></div><div class="line">    <a name="_a9"></a><a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* <span class="keyword">const</span> constantWeightsLayer = myNetwork-&gt;AddConstantLayer(weights, <span class="stringliteral">&quot;const weights&quot;</span>);</div><div class="line"></div><div class="line">    <a name="_a10"></a><a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> fullyConnectedDesc;</div><div class="line">    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* <span class="keyword">const</span> fullyConnectedLayer = myNetwork-&gt;AddFullyConnectedLayer(fullyConnectedDesc,</div><div class="line">                                                                                     <span class="stringliteral">&quot;fully connected&quot;</span>);</div><div class="line">    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* <a name="_a11"></a><a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>  = myNetwork-&gt;AddInputLayer(0);</div><div class="line">    <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* <a name="_a12"></a><a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a> = myNetwork-&gt;AddOutputLayer(0);</div><div class="line"></div><div class="line">    InputLayer-&gt;<a name="a13"></a><a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a name="a14"></a><a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(fullyConnectedLayer-&gt;<a name="a15"></a><a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line">    constantWeightsLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(fullyConnectedLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(1));</div><div class="line">    fullyConnectedLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#ac1835f8756a9f03c02fcf9664e3a0fce">Connect</a>(OutputLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"></div><div class="line">    <span class="comment">// Create ArmNN runtime</span></div><div class="line">    <a name="_a16"></a><a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> options; <span class="comment">// default options</span></div><div class="line">    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">IRuntimePtr</a> run = <a name="a17"></a><a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">IRuntime::Create</a>(options);</div><div class="line"></div><div class="line">    <span class="comment">//Set the tensors in the network.</span></div><div class="line">    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputTensorInfo(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({1, 1}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line">    InputLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a name="a18"></a><a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(inputTensorInfo);</div><div class="line"></div><div class="line">    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputTensorInfo(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({1, 1}), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line">    fullyConnectedLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(outputTensorInfo);</div><div class="line">    constantWeightsLayer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(weightsInfo);</div><div class="line"></div><div class="line">    <span class="comment">// Optimise ArmNN network</span></div><div class="line">    <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">IOptimizedNetworkPtr</a> optNet = <a name="a19"></a><a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*myNetwork, {<a name="a20"></a><a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">Compute::CpuRef</a>}, run-&gt;GetDeviceSpec());</div><div class="line">    <span class="keywordflow">if</span> (!optNet)</div><div class="line">    {</div><div class="line">        <span class="comment">// This shouldn&#39;t happen for this simple sample, with reference backend.</span></div><div class="line">        <span class="comment">// But in general usage Optimize could fail if the hardware at runtime cannot</span></div><div class="line">        <span class="comment">// support the model that has been provided.</span></div><div class="line">        std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: Failed to optimise the input network.&quot;</span> &lt;&lt; std::endl;</div><div class="line">        <span class="keywordflow">return</span> 1;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// Load graph into runtime.</span></div><div class="line">    std::string errmsg; <span class="comment">// To hold an eventual error message if loading the network fails</span></div><div class="line">    <span class="comment">// Add network properties to enable async execution. The MemorySource::Undefined variables indicate</span></div><div class="line">    <span class="comment">// that neither inputs nor outputs will be imported. Importing will be covered in another example.</span></div><div class="line">    <a name="_a21"></a><a class="code" href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a> networkProperties(<span class="keyword">true</span>, <a name="a22"></a><a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a>, <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a>);</div><div class="line">    run-&gt;LoadNetwork(networkIdentifier,</div><div class="line">                     std::move(optNet),</div><div class="line">                     errmsg,</div><div class="line">                     networkProperties);</div><div class="line"></div><div class="line">    <span class="comment">// Creates structures for inputs and outputs. A vector of float for each execution.</span></div><div class="line">    std::vector&lt;std::vector&lt;float&gt;&gt; inputData{{number1}, {number2}};</div><div class="line">    std::vector&lt;std::vector&lt;float&gt;&gt; outputData;</div><div class="line">    outputData.resize(2, std::vector&lt;float&gt;(1));</div><div class="line"></div><div class="line">    inputTensorInfo = run-&gt;GetInputTensorInfo(networkIdentifier, 0);</div><div class="line">    inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">SetConstant</a>(<span class="keyword">true</span>);</div><div class="line">    std::vector&lt;InputTensors&gt; inputTensors</div><div class="line">    {</div><div class="line">        {{0, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(inputTensorInfo, inputData[0].data())}},</div><div class="line">        {{0, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(inputTensorInfo, inputData[1].data())}}</div><div class="line">    };</div><div class="line">    std::vector&lt;OutputTensors&gt; outputTensors</div><div class="line">    {</div><div class="line">        {{0, <a name="_a23"></a><a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(run-&gt;GetOutputTensorInfo(networkIdentifier, 0), outputData[0].data())}},</div><div class="line">        {{0, <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(run-&gt;GetOutputTensorInfo(networkIdentifier, 0), outputData[1].data())}}</div><div class="line">    };</div><div class="line"></div><div class="line">    <span class="comment">// Lambda function to execute the network. We use it as thread function.</span></div><div class="line">    <span class="keyword">auto</span> execute = [&amp;](<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> executionIndex)</div><div class="line">    {</div><div class="line">        <span class="keyword">auto</span> memHandle = run-&gt;CreateWorkingMemHandle(networkIdentifier);</div><div class="line">        run-&gt;Execute(*memHandle, inputTensors[executionIndex], outputTensors[executionIndex]);</div><div class="line">    };</div><div class="line"></div><div class="line">    <span class="comment">// Prepare some threads and let each execute the network with a different input</span></div><div class="line">    std::vector&lt;std::thread&gt; threads;</div><div class="line">    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; inputTensors.size(); ++i)</div><div class="line">    {</div><div class="line">        threads.emplace_back(std::thread(execute, i));</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// Wait for the threads to finish</span></div><div class="line">    <span class="keywordflow">for</span> (std::thread&amp; t : threads)</div><div class="line">    {</div><div class="line">        <span class="keywordflow">if</span>(t.joinable())</div><div class="line">        {</div><div class="line">            t.join();</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Your numbers were &quot;</span> &lt;&lt; outputData[0][0] &lt;&lt; <span class="stringliteral">&quot; and &quot;</span> &lt;&lt; outputData[1][0] &lt;&lt; std::endl;</div><div class="line">    <span class="keywordflow">return</span> 0;</div><div class="line"></div><div class="line">}</div></div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Wed Mar 9 2022 12:00:05 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
