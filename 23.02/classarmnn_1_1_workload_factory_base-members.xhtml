<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: Member List</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_workload_factory_base.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">WorkloadFactoryBase Member List</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is the complete list of members for <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a>, including all inherited members.</p>
<table class="directory">
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a54a596adc0162c80f33a6cda4f33a6ef">AfterWorkloadsCreated</a>()</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a789a347180c49b2403e435857501f623">CreateActivation</a>(const ActivationQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ac1f4d42be05893f74b1237c3356c3c0c">CreateAddition</a>(const AdditionQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4269d65bcf8068290752d75164934a25">CreateArgMinMax</a>(const ArgMinMaxQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a666c75e9db051b9b07f137a74af8d8b4">CreateBatchNormalization</a>(const BatchNormalizationQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a52094433136e6cae57398d861cd483f9">CreateBatchToSpaceNd</a>(const BatchToSpaceNdQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a3d5de4e35ccddc5cfe79e530558d5184">CreateComparison</a>(const ComparisonQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a713c3685138355b145f4d17e473bf543">CreateConcat</a>(const ConcatQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a0da6f270ae7ce126b29a8918d858e814">CreateConstant</a>(const ConstantQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4e3b8d5650cb78c97a2eceb034209187">CreateConvertFp16ToFp32</a>(const ConvertFp16ToFp32QueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a17042914356fe13b708c3702cb82ab7f">CreateConvertFp32ToFp16</a>(const ConvertFp32ToFp16QueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4a781a9541d2c44c5fec0ffc8434447c">CreateConvolution2d</a>(const Convolution2dQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ad99e6a9f4e78ba4690429850de69fadd">CreateDebug</a>(const DebugQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1b2165c83d6501e8ede91324c31a95f4">CreateDepthToSpace</a>(const DepthToSpaceQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a2314defaf9c8b1ffcf59e7e509a959d6">CreateDepthwiseConvolution2d</a>(const DepthwiseConvolution2dQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1f17745331f928011cc1ea162866b8e7">CreateDequantize</a>(const DequantizeQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ac8ff2a4e63a9954fd6b3e9fc6dfa9bf0">CreateDetectionPostProcess</a>(const DetectionPostProcessQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1c7e383368cb078a1faac0a4e4f763a1">CreateDivision</a>(const DivisionQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a09f09645c2289d5d47dbea7c011d5f0e">CreateElementwiseUnary</a>(const ElementwiseUnaryQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a5ebad711e7e91ca3fd60eed73686a482">CreateFakeQuantization</a>(const FakeQuantizationQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4101fcf76e3bbc979b2276631617aabe">CreateFloor</a>(const FloorQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#af5ace6034148c3fe048db884058f04cf">CreateFullyConnected</a>(const FullyConnectedQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ada3f450379ba7b4989344de72a16f1d2">CreateGather</a>(const GatherQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a3dcc96078130874f1be15a7148868539">CreateInput</a>(const InputQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a77110c4dd8fe747ba0d441265f781076">CreateInstanceNormalization</a>(const InstanceNormalizationQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#af12076c82b1b7f0c48c1ed71df206b4d">CreateL2Normalization</a>(const L2NormalizationQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a04a3ae3944eb63e7e94c6e9676815864">CreateLogSoftmax</a>(const LogSoftmaxQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#af6cc3669898b498592dc28600aa6f0cd">CreateLstm</a>(const LstmQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a9e67be0a653c173ba94e38137dc4bbde">CreateMaximum</a>(const MaximumQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#aabe4842ade5647ac5bbee5e446e49a5c">CreateMean</a>(const MeanQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a73e9a5c2c3eff38766f03adb98abdd26">CreateMemCopy</a>(const MemCopyQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ad16ff72d909eb48f3dc8e1015c4a5078">CreateMemImport</a>(const MemImportQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ac05fd4710da8c304db555fb5f597d614">CreateMerge</a>(const MergeQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1ba2b05e3c2028d4bc3db29fc0edf122">CreateMinimum</a>(const MinimumQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a848fc4ff47d5e9c68d2e26f6523b4e58">CreateMultiplication</a>(const MultiplicationQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a6df587611b4c46b591527f3d594f4a11">CreateNormalization</a>(const NormalizationQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#afd952ccd68a1b2231b77db1f9131a61b">CreateOutput</a>(const OutputQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a06a69eab86af31e0daa17c99b9038bf1">CreatePad</a>(const PadQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a32983845590ec2dc9e644491793fd557">CreatePermute</a>(const PermuteQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#abf1f324933ada657d13faf8d1d32a907">CreatePooling2d</a>(const Pooling2dQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#aee9613f077164ed4968a299b40b961e4">CreatePooling3d</a>(const Pooling3dQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a21a5aef5f1850d8b5f797d97632409b8">CreatePreCompiled</a>(const PreCompiledQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a8040319bef721ad05a9fdf75060aaafe">CreatePrelu</a>(const PreluQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#ae51a441630e32e5a850d3d639f0e7847">CreateQuantize</a>(const QuantizeQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#abd228c95f2ec95cbb2abcaa0dbacc018">CreateQuantizedLstm</a>(const QuantizedLstmQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#af8ce0da98340225c76ec512e5483dd89">CreateRank</a>(const RankQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a655697a3bf827352acadc5f1dd3a8a34">CreateReshape</a>(const ReshapeQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#aa9390326e8445e71c5dee9858084a1b8">CreateResize</a>(const ResizeQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a67ee4f8373684cb67f033976fc563081">CreateSlice</a>(const SliceQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a6d49c282026484eb1c6e56f56f35348e">CreateSoftmax</a>(const SoftmaxQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a1c9cd3cd798df38358e9047ac4621fe2">CreateSpaceToBatchNd</a>(const SpaceToBatchNdQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a4069efcce4abfd80a88827ea1509b2f8">CreateSpaceToDepth</a>(const SpaceToDepthQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a49428ff12e031e5af8bcc66161fa09fd">CreateSplitter</a>(const SplitterQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a90c2655fd294c445ca2727491c8a8c79">CreateStack</a>(const StackQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a757d3084d3e11a1840bd2170eb990235">CreateStridedSlice</a>(const StridedSliceQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a99251f9711c087d7c1b5a08236ef0201">CreateSubTensorHandle</a>(ITensorHandle &amp;, TensorShape const &amp;, unsigned int const *) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a088ed247c7ec3bc1603c60f1145014e8">CreateSubtraction</a>(const SubtractionQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a032cba0444de559937381f17bcbe48f5">CreateSwitch</a>(const SwitchQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a526eaec84398bc8067f407769b31f4a9">CreateTensorHandle</a>(const TensorInfo &amp;, const bool) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a68f34fb8ec9a7921a1f6c17b4f5312e6">CreateTensorHandle</a>(const TensorInfo &amp;, DataLayout, const bool) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a07446244299bc12305593358695ea1b4">CreateTranspose</a>(const TransposeQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#acb80cd4ff2c145b80554376643fc54db">CreateTransposeConvolution2d</a>(const TransposeConvolution2dQueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a30b9965b6bce898c027235de615e2331">CreateWorkload</a>(LayerType, const QueueDescriptor &amp;, const WorkloadInfo &amp;) const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9f7e4296485d2812e7996089149c96d1">GetBackendId</a>() const =0</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">pure virtual</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IsLayerSupported</a>(const BackendId &amp;backendId, const IConnectableLayer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported)</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">static</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a7d94ea841143b76fe08ccb308839bfd7">IsLayerSupported</a>(const IConnectableLayer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported)</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">static</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aeaff50773427132e1066a7de56a53db1">IsLayerSupported</a>(const IConnectableLayer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported, const ModelOptions &amp;modelOptions)</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">static</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a52ba8d60c6582a847ef7bc914116d394">IsLayerSupported</a>(const BackendId &amp;backendId, const IConnectableLayer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported, const ModelOptions &amp;modelOptions)</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">static</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#aed0a782f32856bde72bc10d9381dc11e">SupportsSubTensors</a>() const override</td><td class="entry"><a class="el" href="classarmnn_1_1_workload_factory_base.xhtml">WorkloadFactoryBase</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">virtual</span></td></tr>
  <tr><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aab62208f96483015c29ad58549efedd8">~IWorkloadFactory</a>()</td><td class="entry"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td><td class="entry"><span class="mlabel">inline</span><span class="mlabel">virtual</span></td></tr>
</table></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Fri Feb 24 2023 10:24:33 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
