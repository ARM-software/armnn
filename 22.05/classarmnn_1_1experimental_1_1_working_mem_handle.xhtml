<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: WorkingMemHandle Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1experimental_1_1_working_mem_handle.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1experimental_1_1_working_mem_handle-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">WorkingMemHandle Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for WorkingMemHandle:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1experimental_1_1_working_mem_handle.png" usemap="#WorkingMemHandle_map" alt=""/>
  <map id="WorkingMemHandle_map" name="WorkingMemHandle_map">
<area href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml" alt="IWorkingMemHandle" shape="rect" coords="0,0,128,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1experimental_1_1_working_mem_handle_1_1_input_mem_descriptor_coords.xhtml">InputMemDescriptorCoords</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1experimental_1_1_working_mem_handle_1_1_output_mem_descriptor_coords.xhtml">OutputMemDescriptorCoords</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:af67131ba41e1e6df7fe1428bd0475b92"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#af67131ba41e1e6df7fe1428bd0475b92">WorkingMemHandle</a> (<a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> networkId)</td></tr>
<tr class="separator:af67131ba41e1e6df7fe1428bd0475b92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabaae7222f86eb25396a3fd9f8739c18"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#aabaae7222f86eb25396a3fd9f8739c18">WorkingMemHandle</a> (<a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> networkId, std::vector&lt; <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_handle_1_1_input_mem_descriptor_coords.xhtml">InputMemDescriptorCoords</a> &gt; inputLayerInfo, std::vector&lt; <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_handle_1_1_output_mem_descriptor_coords.xhtml">OutputMemDescriptorCoords</a> &gt; outputLayerInfo, std::vector&lt; <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &gt; workingMemDescriptors, std::unordered_map&lt; <a class="el" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a>, <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &gt; workingMemDescriptorMap, std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_memory_manager.xhtml">MemoryManager</a> &gt; memoryManager, std::vector&lt; std::pair&lt; std::shared_ptr&lt; <a class="el" href="structarmnn_1_1_tensor_memory.xhtml">TensorMemory</a> &gt;, <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a> &gt;&gt; tensorMemory, std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&gt; managedTensorHandles, std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&gt; unmanagedTensorHandles)</td></tr>
<tr class="separator:aabaae7222f86eb25396a3fd9f8739c18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37c7b7f79e6b8dc05aaf5926fd975622"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a37c7b7f79e6b8dc05aaf5926fd975622">~WorkingMemHandle</a> ()</td></tr>
<tr class="separator:a37c7b7f79e6b8dc05aaf5926fd975622"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d485a38c5d662a4aa9471587b4688bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a6d485a38c5d662a4aa9471587b4688bb">GetNetworkId</a> () override</td></tr>
<tr class="memdesc:a6d485a38c5d662a4aa9471587b4688bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the NetworkId of the Network that this <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a> works with.  <a href="#a6d485a38c5d662a4aa9471587b4688bb">More...</a><br /></td></tr>
<tr class="separator:a6d485a38c5d662a4aa9471587b4688bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8518772c5d692e334a76617582b10b92"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a8518772c5d692e334a76617582b10b92">Allocate</a> () override</td></tr>
<tr class="memdesc:a8518772c5d692e334a76617582b10b92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate the backing memory required for execution.  <a href="#a8518772c5d692e334a76617582b10b92">More...</a><br /></td></tr>
<tr class="separator:a8518772c5d692e334a76617582b10b92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2688c89e6bdec61e0f483d9be6fd688c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a2688c89e6bdec61e0f483d9be6fd688c">Free</a> () override</td></tr>
<tr class="memdesc:a2688c89e6bdec61e0f483d9be6fd688c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free the backing memory required for execution.  <a href="#a2688c89e6bdec61e0f483d9be6fd688c">More...</a><br /></td></tr>
<tr class="separator:a2688c89e6bdec61e0f483d9be6fd688c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a573373f4505385578f830caebf6adb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a1a573373f4505385578f830caebf6adb">IsAllocated</a> () override</td></tr>
<tr class="memdesc:a1a573373f4505385578f830caebf6adb"><td class="mdescLeft">&#160;</td><td class="mdescRight">IsAllocated returns true if the backing memory is currently allocated.  <a href="#a1a573373f4505385578f830caebf6adb">More...</a><br /></td></tr>
<tr class="separator:a1a573373f4505385578f830caebf6adb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70e0e7889988786ac840bf2785f3db95"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a70e0e7889988786ac840bf2785f3db95">GetWorkingMemDescriptor</a> (<a class="el" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> id) override</td></tr>
<tr class="memdesc:a70e0e7889988786ac840bf2785f3db95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> for a <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a>.  <a href="#a70e0e7889988786ac840bf2785f3db95">More...</a><br /></td></tr>
<tr class="separator:a70e0e7889988786ac840bf2785f3db95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1915a1eb2ba2554103a09de391a9f6bd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a1915a1eb2ba2554103a09de391a9f6bd">GetWorkingMemDescriptorAt</a> (unsigned int id) override</td></tr>
<tr class="memdesc:a1915a1eb2ba2554103a09de391a9f6bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> at an index.  <a href="#a1915a1eb2ba2554103a09de391a9f6bd">More...</a><br /></td></tr>
<tr class="separator:a1915a1eb2ba2554103a09de391a9f6bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0ba2e3d5e666b99e28a485d117ddfc3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#ab0ba2e3d5e666b99e28a485d117ddfc3">GetInputHandle</a> (<a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerBindingId) const</td></tr>
<tr class="separator:ab0ba2e3d5e666b99e28a485d117ddfc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5e03a241b63b19580f8fdd08c3647b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#ad5e03a241b63b19580f8fdd08c3647b7">GetOutputHandle</a> (<a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerBindingId) const</td></tr>
<tr class="separator:ad5e03a241b63b19580f8fdd08c3647b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae65834ecb69e3bc6a41ca1a57e4b63ab"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::vector&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> * &gt;::iterator &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#ae65834ecb69e3bc6a41ca1a57e4b63ab">GetInputConnections</a> (<a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerBindingId) const</td></tr>
<tr class="separator:ae65834ecb69e3bc6a41ca1a57e4b63ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39754dbf5b5cb692d3ba97f23b23962f"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::vector&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> * &gt;::iterator &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a39754dbf5b5cb692d3ba97f23b23962f">GetOutputConnection</a> (<a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerBindingId) const</td></tr>
<tr class="separator:a39754dbf5b5cb692d3ba97f23b23962f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7487c3835e842582920969f2663bcc30"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a7487c3835e842582920969f2663bcc30">MemSyncOutputs</a> ()</td></tr>
<tr class="separator:a7487c3835e842582920969f2663bcc30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdfaf46d2e4cd003c0f13cdb1f1e6a20"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#abdfaf46d2e4cd003c0f13cdb1f1e6a20">GetBindingIdVector</a> ()</td></tr>
<tr class="separator:abdfaf46d2e4cd003c0f13cdb1f1e6a20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab35a0f45d4b1bdad5c8e6614c7bf8d18"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#ab35a0f45d4b1bdad5c8e6614c7bf8d18">ValidateBindingIds</a> ()</td></tr>
<tr class="separator:ab35a0f45d4b1bdad5c8e6614c7bf8d18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1experimental_1_1_i_working_mem_handle"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1experimental_1_1_i_working_mem_handle')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a></td></tr>
<tr class="memitem:aee41760526014b30f5daa1177357eb0d inherit pub_methods_classarmnn_1_1experimental_1_1_i_working_mem_handle"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml#aee41760526014b30f5daa1177357eb0d">~IWorkingMemHandle</a> ()</td></tr>
<tr class="separator:aee41760526014b30f5daa1177357eb0d inherit pub_methods_classarmnn_1_1experimental_1_1_i_working_mem_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00026">26</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="af67131ba41e1e6df7fe1428bd0475b92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af67131ba41e1e6df7fe1428bd0475b92">&#9670;&nbsp;</a></span>WorkingMemHandle() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml">WorkingMemHandle</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a>&#160;</td>
          <td class="paramname"><em>networkId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00045">45</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;: m_NetworkId(networkId){}</div></div><!-- fragment -->
</div>
</div>
<a id="aabaae7222f86eb25396a3fd9f8739c18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabaae7222f86eb25396a3fd9f8739c18">&#9670;&nbsp;</a></span>WorkingMemHandle() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml">WorkingMemHandle</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a>&#160;</td>
          <td class="paramname"><em>networkId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_handle_1_1_input_mem_descriptor_coords.xhtml">InputMemDescriptorCoords</a> &gt;&#160;</td>
          <td class="paramname"><em>inputLayerInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_handle_1_1_output_mem_descriptor_coords.xhtml">OutputMemDescriptorCoords</a> &gt;&#160;</td>
          <td class="paramname"><em>outputLayerInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &gt;&#160;</td>
          <td class="paramname"><em>workingMemDescriptors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::unordered_map&lt; <a class="el" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a>, <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &gt;&#160;</td>
          <td class="paramname"><em>workingMemDescriptorMap</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_memory_manager.xhtml">MemoryManager</a> &gt;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::pair&lt; std::shared_ptr&lt; <a class="el" href="structarmnn_1_1_tensor_memory.xhtml">TensorMemory</a> &gt;, <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a> &gt;&gt;&#160;</td>
          <td class="paramname"><em>tensorMemory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&gt;&#160;</td>
          <td class="paramname"><em>managedTensorHandles</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&gt;&#160;</td>
          <td class="paramname"><em>unmanagedTensorHandles</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00018">18</a> of file <a class="el" href="_working_mem_handle_8cpp_source.xhtml">WorkingMemHandle.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_working_mem_descriptor_8hpp_source.xhtml#l00020">WorkingMemDescriptor::m_Inputs</a>, and <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>
<div class="fragment"><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    : m_NetworkId(networkId)</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    , m_WorkingMemDescriptors(workingMemDescriptors)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    , m_WorkingMemDescriptorMap(workingMemDescriptorMap)</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    , m_MemoryManager(std::move(memoryManager))</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    , m_TensorMemory(std::move(tensorMemory))</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    , m_ManagedTensorHandles(std::move(managedTensorHandles))</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    , m_UnmanagedTensorHandles(std::move(unmanagedTensorHandles))</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    , m_InputSize(numeric_cast&lt;DifferenceType&gt;(inputLayerInfo.size()))</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    , m_IsAllocated(<span class="keyword">false</span>)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; inputInfo : inputLayerInfo)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        m_InputValidationMap[inputInfo.m_LayerBindingId] = <span class="keyword">false</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="comment">// Map the LayerBindingIds to the corresponding input ITensorHandle*</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keyword">auto</span> memDesc = m_WorkingMemDescriptors.at(inputInfo.m_InputSlotCoords[0].first);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        ITensorHandle* inputTensorHandle = memDesc.m_Inputs[inputInfo.m_InputSlotCoords[0].second];</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        m_InputHandleMap[inputInfo.m_LayerBindingId] = inputTensorHandle;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="comment">// For every input we need to store all locations from which that input&#39;s ITensorHandle* is read.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="comment">// So we can, at a later point, swap in and out the ITensorHandle* at that location.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> inputSlot : inputInfo.m_InputSlotCoords)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            WorkingMemDescriptor&amp; workingMemDescriptor = m_WorkingMemDescriptors.at(inputSlot.first);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keyword">auto</span> inputPos = workingMemDescriptor.m_Inputs.begin();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="comment">// The DifferenceType of a vector can be unsigned int or signed int depending on the std implementation</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="comment">// This cast removes any conversion warnings</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            inputPos += <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">numeric_cast</a>&lt;DifferenceType&gt;(inputSlot.second);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            m_InputConnectionMap[inputInfo.m_LayerBindingId].push_back(inputPos);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordtype">size_t</span> bindingIdCount = inputLayerInfo.size();</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; outputInfo : outputLayerInfo)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> bindingId : outputInfo.m_LayerBindingIds)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            m_OutputValidationMap[bindingId] = <span class="keyword">false</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="comment">// Store the outputSlot position of the tensorhandle</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keyword">auto</span> outputPos = m_WorkingMemDescriptors.at(outputInfo.m_OutputSlotCoords.first).m_Outputs.begin();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            outputPos += <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">numeric_cast</a>&lt;DifferenceType&gt;(outputInfo.m_OutputSlotCoords.second);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            m_OutputHandleMap[bindingId] = *outputPos;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        bindingIdCount += outputInfo.m_LayerBindingIds.size();</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="comment">// More than one layerBinding id means the tensorhandle is connected to more than one OutputLayer.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="comment">// Importing in this case would likely cause unexpected behaviour, so we disallow it.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">if</span> (outputInfo.m_LayerBindingIds.size() != 1)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="comment">// Store the inputSlot positions of the tensorhandle</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> outputSlot : outputInfo.m_InputSlotCoords)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            WorkingMemDescriptor&amp; workingMemDescriptor = m_WorkingMemDescriptors.at(outputSlot.first);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keyword">auto</span> inputPos = workingMemDescriptor.m_Inputs.begin();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="comment">// The DifferenceType of a vector can be unsigned int or signed int depending on the std implementation</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="comment">// This cast removes any conversion warnings</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            inputPos += <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">numeric_cast</a>&lt;DifferenceType&gt;(outputSlot.second);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            m_OutputConnectionMap[outputInfo.m_LayerBindingIds[0]].push_back(inputPos);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    m_BindingIdVec = std::vector&lt;LayerBindingId&gt;(bindingIdCount);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(m_UnmanagedTensorHandles);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a37c7b7f79e6b8dc05aaf5926fd975622"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37c7b7f79e6b8dc05aaf5926fd975622">&#9670;&nbsp;</a></span>~WorkingMemHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml">WorkingMemHandle</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00057">57</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">References <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00114">WorkingMemHandle::Free()</a>.</p>
<div class="fragment"><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    { <a class="code" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a2688c89e6bdec61e0f483d9be6fd688c">Free</a>(); }</div><div class="ttc" id="classarmnn_1_1experimental_1_1_working_mem_handle_xhtml_a2688c89e6bdec61e0f483d9be6fd688c"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml#a2688c89e6bdec61e0f483d9be6fd688c">armnn::experimental::WorkingMemHandle::Free</a></div><div class="ttdeci">void Free() override</div><div class="ttdoc">Free the backing memory required for execution. </div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_handle_8cpp_source.xhtml#l00114">WorkingMemHandle.cpp:114</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a8518772c5d692e334a76617582b10b92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8518772c5d692e334a76617582b10b92">&#9670;&nbsp;</a></span>Allocate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Allocate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allocate the backing memory required for execution. </p>
<p>If this is not called, then allocation will be deferred to execution time. </p>

<p>Implements <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml#a5cceed8b707a09bf27eb61f17acf8a88">IWorkingMemHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00098">98</a> of file <a class="el" href="_working_mem_handle_8cpp_source.xhtml">WorkingMemHandle.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_loaded_network_8cpp_source.xhtml#l01628">LoadedNetwork::Execute()</a>, and <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00060">WorkingMemHandle::GetNetworkId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">if</span> (m_IsAllocated)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    m_IsAllocated = <span class="keyword">true</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    m_MemoryManager-&gt;Allocate();</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; m_TensorMemory.size(); ++i)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        m_ManagedTensorHandles[i]-&gt;Import(m_TensorMemory[i].first-&gt;m_Data, m_TensorMemory[i].second);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2688c89e6bdec61e0f483d9be6fd688c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2688c89e6bdec61e0f483d9be6fd688c">&#9670;&nbsp;</a></span>Free()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Free </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Free the backing memory required for execution. </p>

<p>Implements <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml#a49db2bfde3ca4fac7d1042a3aa5778aa">IWorkingMemHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00114">114</a> of file <a class="el" href="_working_mem_handle_8cpp_source.xhtml">WorkingMemHandle.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00060">WorkingMemHandle::GetNetworkId()</a>, and <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00057">WorkingMemHandle::~WorkingMemHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">if</span> (!m_IsAllocated)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    m_IsAllocated = <span class="keyword">false</span>;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    m_MemoryManager-&gt;Deallocate();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abdfaf46d2e4cd003c0f13cdb1f1e6a20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abdfaf46d2e4cd003c0f13cdb1f1e6a20">&#9670;&nbsp;</a></span>GetBindingIdVector()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&gt;&amp; GetBindingIdVector </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00115">115</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">References <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00134">WorkingMemHandle::ValidateBindingIds()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_loaded_network_8cpp_source.xhtml#l01628">LoadedNetwork::Execute()</a>.</p>
<div class="fragment"><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">return</span> m_BindingIdVec;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    };</div></div><!-- fragment -->
</div>
</div>
<a id="ae65834ecb69e3bc6a41ca1a57e4b63ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae65834ecb69e3bc6a41ca1a57e4b63ab">&#9670;&nbsp;</a></span>GetInputConnections()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;std::vector&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>*&gt;::iterator&gt;&amp; GetInputConnections </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>layerBindingId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00103">103</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_loaded_network_8cpp_source.xhtml#l01628">LoadedNetwork::Execute()</a>.</p>
<div class="fragment"><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">return</span> m_InputConnectionMap.at(layerBindingId);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    };</div></div><!-- fragment -->
</div>
</div>
<a id="ab0ba2e3d5e666b99e28a485d117ddfc3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0ba2e3d5e666b99e28a485d117ddfc3">&#9670;&nbsp;</a></span>GetInputHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>* GetInputHandle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>layerBindingId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00093">93</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_loaded_network_8cpp_source.xhtml#l01628">LoadedNetwork::Execute()</a>.</p>
<div class="fragment"><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">return</span> m_InputHandleMap.at(layerBindingId);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    };</div></div><!-- fragment -->
</div>
</div>
<a id="a6d485a38c5d662a4aa9471587b4688bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d485a38c5d662a4aa9471587b4688bb">&#9670;&nbsp;</a></span>GetNetworkId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> GetNetworkId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the NetworkId of the Network that this <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a> works with. </p>

<p>Implements <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml#abd6c4b9a4ef8432f47d0df514cd4a014">IWorkingMemHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00060">60</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">References <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00098">WorkingMemHandle::Allocate()</a>, and <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00114">WorkingMemHandle::Free()</a>.</p>
<div class="fragment"><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">return</span> m_NetworkId;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a39754dbf5b5cb692d3ba97f23b23962f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39754dbf5b5cb692d3ba97f23b23962f">&#9670;&nbsp;</a></span>GetOutputConnection()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;std::vector&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>*&gt;::iterator&gt;&amp; GetOutputConnection </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>layerBindingId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00108">108</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">References <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00125">WorkingMemHandle::MemSyncOutputs()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_loaded_network_8cpp_source.xhtml#l01628">LoadedNetwork::Execute()</a>.</p>
<div class="fragment"><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">return</span> m_OutputConnectionMap.at(layerBindingId);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    };</div></div><!-- fragment -->
</div>
</div>
<a id="ad5e03a241b63b19580f8fdd08c3647b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5e03a241b63b19580f8fdd08c3647b7">&#9670;&nbsp;</a></span>GetOutputHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>* GetOutputHandle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>layerBindingId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00098">98</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_loaded_network_8cpp_source.xhtml#l01628">LoadedNetwork::Execute()</a>.</p>
<div class="fragment"><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">return</span> m_OutputHandleMap.at(layerBindingId);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    };</div></div><!-- fragment -->
</div>
</div>
<a id="a70e0e7889988786ac840bf2785f3db95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70e0e7889988786ac840bf2785f3db95">&#9670;&nbsp;</a></span>GetWorkingMemDescriptor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a>&amp; GetWorkingMemDescriptor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> for a <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a>. </p>

<p>Implements <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml#a7dff4a1178f4339890153f2314056e50">IWorkingMemHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00079">79</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>.</p>
<div class="fragment"><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keyword">auto</span> result = m_WorkingMemDescriptorMap.find(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(result != m_WorkingMemDescriptorMap.end());</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">return</span> result-&gt;second;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1915a1eb2ba2554103a09de391a9f6bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1915a1eb2ba2554103a09de391a9f6bd">&#9670;&nbsp;</a></span>GetWorkingMemDescriptorAt()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a>&amp; GetWorkingMemDescriptorAt </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> at an index. </p>
<p>The WorkingMemDescriptors are stored in the same order as the Workloads in a topologically sorted graph. </p>

<p>Implements <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml#a43a1da35a1d1d6f78f656717736ad99c">IWorkingMemHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00088">88</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_loaded_network_8cpp_source.xhtml#l01628">LoadedNetwork::Execute()</a>.</p>
<div class="fragment"><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">return</span> m_WorkingMemDescriptors[id];</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a1a573373f4505385578f830caebf6adb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a573373f4505385578f830caebf6adb">&#9670;&nbsp;</a></span>IsAllocated()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsAllocated </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>IsAllocated returns true if the backing memory is currently allocated. </p>

<p>Implements <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml#a7dc65e81254ebe49a20d5d420fb4f47f">IWorkingMemHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00073">73</a> of file <a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_loaded_network_8cpp_source.xhtml#l01628">LoadedNetwork::Execute()</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">return</span> m_IsAllocated;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a7487c3835e842582920969f2663bcc30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7487c3835e842582920969f2663bcc30">&#9670;&nbsp;</a></span>MemSyncOutputs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void MemSyncOutputs </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00125">125</a> of file <a class="el" href="_working_mem_handle_8cpp_source.xhtml">WorkingMemHandle.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a46f3ea056caa3126b91f3f70beea068c">armnn::Map</a>, and <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a48180ddd584de21589006d56a86d3410">armnn::Unmap</a>.</p>

<p class="reference">Referenced by <a class="el" href="_loaded_network_8cpp_source.xhtml#l01628">LoadedNetwork::Execute()</a>, and <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00108">WorkingMemHandle::GetOutputConnection()</a>.</p>
<div class="fragment"><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> output : m_OutputConnectionMap)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        (*output.second[0])-&gt;<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a46f3ea056caa3126b91f3f70beea068c">Map</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        (*output.second[0])-&gt;<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a48180ddd584de21589006d56a86d3410">Unmap</a>();</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a48180ddd584de21589006d56a86d3410"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a48180ddd584de21589006d56a86d3410">armnn::LayerType::Unmap</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a46f3ea056caa3126b91f3f70beea068c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a46f3ea056caa3126b91f3f70beea068c">armnn::LayerType::Map</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab35a0f45d4b1bdad5c8e6614c7bf8d18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab35a0f45d4b1bdad5c8e6614c7bf8d18">&#9670;&nbsp;</a></span>ValidateBindingIds()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ValidateBindingIds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00134">134</a> of file <a class="el" href="_working_mem_handle_8cpp_source.xhtml">WorkingMemHandle.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_loaded_network_8cpp_source.xhtml#l01628">LoadedNetwork::Execute()</a>, and <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00115">WorkingMemHandle::GetBindingIdVector()</a>.</p>
<div class="fragment"><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;{</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">auto</span> resetInputValidationMap = [&amp;]()</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; pair: m_InputValidationMap)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            pair.second = <span class="keyword">false</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    };</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">auto</span> resetOutputValidationMap = [&amp;]()</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; pair: m_OutputValidationMap)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            pair.second = <span class="keyword">false</span>;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    };</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    std::for_each(m_BindingIdVec.begin(), m_BindingIdVec.begin() + m_InputSize, [&amp;](<a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> id)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordtype">bool</span>&amp; isUsed = m_InputValidationMap.at(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keywordflow">if</span> (isUsed)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                resetInputValidationMap();</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(fmt::format(<span class="stringliteral">&quot;Duplicate Input LayerBindingId: {}&quot;</span>, <span class="keywordtype">id</span>));</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            isUsed = <span class="keyword">true</span>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        }</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::out_of_range&amp;)</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            resetInputValidationMap();</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(fmt::format(<span class="stringliteral">&quot;Unknown Input LayerBindingId: {}&quot;</span>, <span class="keywordtype">id</span>));</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    });</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    resetInputValidationMap();</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    std::for_each(m_BindingIdVec.begin() + m_InputSize, m_BindingIdVec.end(), [&amp;](<a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> id)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">try</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keywordtype">bool</span>&amp; isUsed = m_OutputValidationMap.at(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordflow">if</span> (isUsed)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                resetOutputValidationMap();</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(fmt::format(<span class="stringliteral">&quot;Duplicate Output LayerBindingId: {}&quot;</span>, <span class="keywordtype">id</span>));</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            isUsed = <span class="keyword">true</span>;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::out_of_range&amp;)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            resetOutputValidationMap();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(fmt::format(<span class="stringliteral">&quot;Unknown Output LayerBindingId: {}&quot;</span>, <span class="keywordtype">id</span>));</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    });</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    resetOutputValidationMap();</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00290">Types.hpp:290</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/<a class="el" href="_working_mem_handle_8hpp_source.xhtml">WorkingMemHandle.hpp</a></li>
<li>src/armnn/<a class="el" href="_working_mem_handle_8cpp_source.xhtml">WorkingMemHandle.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="namespacearmnn_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="classarmnn_1_1experimental_1_1_working_mem_handle.xhtml">WorkingMemHandle</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:27:26 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
