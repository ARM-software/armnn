<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/profiling/PeriodicCounterCapture.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_periodic_counter_capture_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">PeriodicCounterCapture.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_periodic_counter_capture_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2019 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_periodic_counter_capture_8hpp.xhtml">PeriodicCounterCapture.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_logging_8hpp.xhtml">armnn/Logging.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;{</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">namespace </span>profiling</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;{</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_periodic_counter_capture.xhtml#a156f3866ca69d98b4d9e6e1c1b3ec7da">   18</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_periodic_counter_capture.xhtml#a156f3866ca69d98b4d9e6e1c1b3ec7da">PeriodicCounterCapture::Start</a>()</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="comment">// Check if the capture thread is already running</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keywordflow">if</span> (m_IsRunning)</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    {</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        <span class="comment">// The capture thread is already running</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    }</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="comment">// Mark the capture thread as running</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    m_IsRunning = <span class="keyword">true</span>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="comment">// Keep the capture procedure going until the capture thread is signalled to stop</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    m_KeepRunning.store(<span class="keyword">true</span>);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="comment">// Start the new capture thread.</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    m_PeriodCaptureThread = std::thread(&amp;PeriodicCounterCapture::Capture, <span class="keyword">this</span>, std::ref(m_ReadCounterValues));</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_periodic_counter_capture.xhtml#a634c58de2126b4a4e6a2a093e60e1290">   37</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_periodic_counter_capture.xhtml#a634c58de2126b4a4e6a2a093e60e1290">PeriodicCounterCapture::Stop</a>()</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="comment">// Signal the capture thread to stop</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    m_KeepRunning.store(<span class="keyword">false</span>);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="comment">// Check that the capture thread is running</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">if</span> (m_PeriodCaptureThread.joinable())</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="comment">// Wait for the capture thread to complete operations</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        m_PeriodCaptureThread.join();</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// Mark the capture thread as not running</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    m_IsRunning = <span class="keyword">false</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<a class="code" href="classarmnn_1_1profiling_1_1_capture_data.xhtml">CaptureData</a> PeriodicCounterCapture::ReadCaptureData()</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> m_CaptureDataHolder.<a class="code" href="classarmnn_1_1profiling_1_1_holder.xhtml#a95c8634416821480a8140c87054718f6">GetCaptureData</a>();</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keywordtype">void</span> PeriodicCounterCapture::DispatchPeriodicCounterCapturePacket(</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a>&amp; backendId, <span class="keyword">const</span> std::vector&lt;Timestamp&gt;&amp; timestampValues)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// Report counter values</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; timestampInfo : timestampValues)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        std::vector&lt;CounterValue&gt; backendCounterValues = timestampInfo.counterValues;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        for_each(backendCounterValues.begin(), backendCounterValues.end(), [&amp;](<a class="code" href="structarmnn_1_1profiling_1_1_counter_value.xhtml">CounterValue</a>&amp; backendCounterValue)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="comment">// translate the counterId to globalCounterId</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            backendCounterValue.counterId = m_CounterIdMap.<a class="code" href="classarmnn_1_1profiling_1_1_i_counter_mappings.xhtml#a83e6db8d13e21158334ca6722b20fa67">GetGlobalId</a>(backendCounterValue.counterId, backendId);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        });</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="comment">// Send Periodic Counter Capture Packet for the Timestamp</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        m_SendCounterPacket.<a class="code" href="classarmnn_1_1profiling_1_1_i_send_counter_packet.xhtml#aeacf0722dbf513d511b46a9bf43bfa4a">SendPeriodicCounterCapturePacket</a>(timestampInfo.timestamp, backendCounterValues);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keywordtype">void</span> PeriodicCounterCapture::Capture(<a class="code" href="classarmnn_1_1profiling_1_1_i_read_counter_values.xhtml">IReadCounterValues</a>&amp; readCounterValues)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">do</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="comment">// Check if the current capture data indicates that there&#39;s data capture</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keyword">auto</span> currentCaptureData = ReadCaptureData();</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keyword">const</span> std::vector&lt;uint16_t&gt;&amp; counterIds = currentCaptureData.GetCounterIds();</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keyword">const</span> uint32_t capturePeriod = currentCaptureData.GetCapturePeriod();</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">if</span> (capturePeriod == 0)</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="comment">// No data capture, wait the indicated capture period (milliseconds), if it is not zero</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            std::this_thread::sleep_for(std::chrono::milliseconds(50u));</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">if</span>(counterIds.size() != 0)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            std::vector&lt;CounterValue&gt; counterValues;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keyword">auto</span> numCounters = counterIds.size();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            counterValues.reserve(numCounters);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="comment">// Create a vector of pairs of CounterIndexes and Values</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">for</span> (uint16_t index = 0; index &lt; numCounters; ++index)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keyword">auto</span> requestedId = counterIds[index];</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                uint32_t counterValue = 0;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keywordflow">try</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    counterValue = readCounterValues.<a class="code" href="classarmnn_1_1profiling_1_1_i_read_counter_values.xhtml#a4d2478902a75d38fd9acd57829d125f3">GetDeltaCounterValue</a>(requestedId);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_exception.xhtml">Exception</a>&amp; e)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="comment">// Report the error and continue</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">warning</a>) &lt;&lt; <span class="stringliteral">&quot;An error has occurred when getting a counter value: &quot;</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                       &lt;&lt; e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                counterValues.emplace_back(<a class="code" href="structarmnn_1_1profiling_1_1_counter_value.xhtml">CounterValue</a> {requestedId, counterValue });</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="comment">// Send Periodic Counter Capture Packet for the Timestamp</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            m_SendCounterPacket.<a class="code" href="classarmnn_1_1profiling_1_1_i_send_counter_packet.xhtml#aeacf0722dbf513d511b46a9bf43bfa4a">SendPeriodicCounterCapturePacket</a>(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a77a41a7625d3134c0cccdf11d169acb4">GetTimestamp</a>(), counterValues);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="comment">// Report counter values for each active backend</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keyword">auto</span> activeBackends = currentCaptureData.GetActiveBackends();</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        for_each(activeBackends.begin(), activeBackends.end(), [&amp;](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a>&amp; backendId)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            DispatchPeriodicCounterCapturePacket(</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                backendId, m_BackendProfilingContexts.at(backendId)-&gt;ReportCounterValues());</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        });</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="comment">// Wait the indicated capture period (microseconds)</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        std::this_thread::sleep_for(std::chrono::microseconds(capturePeriod));</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">while</span> (m_KeepRunning.load());</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;} <span class="comment">// namespace profiling</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="structarmnn_1_1profiling_1_1_counter_value_xhtml"><div class="ttname"><a href="structarmnn_1_1profiling_1_1_counter_value.xhtml">armnn::profiling::CounterValue</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_profiling_8hpp_source.xhtml#l00021">IBackendProfiling.hpp:21</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_read_counter_values_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_read_counter_values.xhtml">armnn::profiling::IReadCounterValues</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_counter_values_8hpp_source.xhtml#l00016">ICounterValues.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_capture_data_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_capture_data.xhtml">armnn::profiling::CaptureData</a></div><div class="ttdef"><b>Definition:</b> <a href="_holder_8hpp_source.xhtml#l00019">Holder.hpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml_abf843cbb29dec939d0731e491bab6f70"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">armnn::Exception::what</a></div><div class="ttdeci">virtual const char * what() const noexcept override</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8cpp_source.xhtml#l00032">Exceptions.cpp:32</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_periodic_counter_capture_xhtml_a634c58de2126b4a4e6a2a093e60e1290"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_periodic_counter_capture.xhtml#a634c58de2126b4a4e6a2a093e60e1290">armnn::profiling::PeriodicCounterCapture::Stop</a></div><div class="ttdeci">void Stop() override</div><div class="ttdef"><b>Definition:</b> <a href="_periodic_counter_capture_8cpp_source.xhtml#l00037">PeriodicCounterCapture.cpp:37</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_holder_xhtml_a95c8634416821480a8140c87054718f6"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_holder.xhtml#a95c8634416821480a8140c87054718f6">armnn::profiling::Holder::GetCaptureData</a></div><div class="ttdeci">CaptureData GetCaptureData() const</div><div class="ttdef"><b>Definition:</b> <a href="_holder_8cpp_source.xhtml#l00054">Holder.cpp:54</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::BoostLogSeverityMapping::warning</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_read_counter_values_xhtml_a4d2478902a75d38fd9acd57829d125f3"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_read_counter_values.xhtml#a4d2478902a75d38fd9acd57829d125f3">armnn::profiling::IReadCounterValues::GetDeltaCounterValue</a></div><div class="ttdeci">virtual uint32_t GetDeltaCounterValue(uint16_t counterUid)=0</div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_periodic_counter_capture_xhtml_a156f3866ca69d98b4d9e6e1c1b3ec7da"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_periodic_counter_capture.xhtml#a156f3866ca69d98b4d9e6e1c1b3ec7da">armnn::profiling::PeriodicCounterCapture::Start</a></div><div class="ttdeci">void Start() override</div><div class="ttdef"><b>Definition:</b> <a href="_periodic_counter_capture_8cpp_source.xhtml#l00018">PeriodicCounterCapture.cpp:18</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml"><div class="ttname"><a href="_logging_8hpp.xhtml">Logging.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_send_counter_packet_xhtml_aeacf0722dbf513d511b46a9bf43bfa4a"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_send_counter_packet.xhtml#aeacf0722dbf513d511b46a9bf43bfa4a">armnn::profiling::ISendCounterPacket::SendPeriodicCounterCapturePacket</a></div><div class="ttdeci">virtual void SendPeriodicCounterCapturePacket(uint64_t timestamp, const IndexValuePairsVector &amp;values)=0</div><div class="ttdoc">Create and write a PeriodicCounterCapturePacket from the parameters to the buffer. </div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a77a41a7625d3134c0cccdf11d169acb4"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a77a41a7625d3134c0cccdf11d169acb4">armnn::profiling::GetTimestamp</a></div><div class="ttdeci">uint64_t GetTimestamp()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_utils_8cpp_source.xhtml#l00904">ProfilingUtils.cpp:904</a></div></div>
<div class="ttc" id="_periodic_counter_capture_8hpp_xhtml"><div class="ttname"><a href="_periodic_counter_capture_8hpp.xhtml">PeriodicCounterCapture.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_counter_mappings_xhtml_a83e6db8d13e21158334ca6722b20fa67"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_counter_mappings.xhtml#a83e6db8d13e21158334ca6722b20fa67">armnn::profiling::ICounterMappings::GetGlobalId</a></div><div class="ttdeci">virtual uint16_t GetGlobalId(uint16_t backendCounterId, const armnn::BackendId &amp;backendId) const =0</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_637c692f14729569dd2eac0c18e2a54a.xhtml">profiling</a></li><li class="navelem"><a class="el" href="_periodic_counter_capture_8cpp.xhtml">PeriodicCounterCapture.cpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:00 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
