<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: armnnUtils Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearmnn_utils.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">armnnUtils Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearmnn_utils_1_1_filesystem"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils_1_1_filesystem.xhtml">Filesystem</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearmnn_utils_1_1_processes"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils_1_1_processes.xhtml">Processes</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearmnn_utils_1_1_threads"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils_1_1_threads.xhtml">Threads</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_utils_1_1_data_layout_indexed.xhtml">DataLayoutIndexed</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides access to the appropriate indexes for Channels, Height and Width based on DataLayout.  <a href="classarmnn_utils_1_1_data_layout_indexed.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_utils_1_1_floating_point_converter.xhtml">FloatingPointConverter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_is_floating_point_iterator.xhtml">IsFloatingPointIterator</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_utils_1_1_model_accuracy_checker.xhtml">ModelAccuracyChecker</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_parser_prototxt_fixture.xhtml">ParserPrototxtFixture</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_selective_quantizer.xhtml">SelectiveQuantizer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_selective_quantizer_3_01armnn_1_1_b_float16_00_01false_01_4.xhtml">SelectiveQuantizer&lt; armnn::BFloat16, false &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_selective_quantizer_3_01armnn_1_1_half_00_01false_01_4.xhtml">SelectiveQuantizer&lt; armnn::Half, false &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_utils_1_1_selective_quantizer_3_01_t_00_01false_01_4.xhtml">SelectiveQuantizer&lt; T, false &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ac7bd4ea667375c07718086368507ed44"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer</a> = mapbox::util::variant&lt; std::vector&lt; float &gt;, std::vector&lt; int &gt;, std::vector&lt; unsigned char &gt;, std::vector&lt; int8_t &gt; &gt;</td></tr>
<tr class="separator:ac7bd4ea667375c07718086368507ed44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab175d8bf2482d5a39c2331d1f0ddcece"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#ab175d8bf2482d5a39c2331d1f0ddcece">LabelCategoryNames</a> = std::vector&lt; std::string &gt;</td></tr>
<tr class="separator:ab175d8bf2482d5a39c2331d1f0ddcece"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:afb0302d3269537af9680c698599deac5"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:afb0302d3269537af9680c698599deac5"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#afb0302d3269537af9680c698599deac5">CompatibleTypes</a> (<a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a>)</td></tr>
<tr class="separator:afb0302d3269537af9680c698599deac5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49ba5984d8cde4299d8ef15c9e556587"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a49ba5984d8cde4299d8ef15c9e556587">operator==</a> (const <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a> &amp;dataLayout, const <a class="el" href="classarmnn_utils_1_1_data_layout_indexed.xhtml">DataLayoutIndexed</a> &amp;indexed)</td></tr>
<tr class="memdesc:a49ba5984d8cde4299d8ef15c9e556587"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equality methods.  <a href="#a49ba5984d8cde4299d8ef15c9e556587">More...</a><br /></td></tr>
<tr class="separator:a49ba5984d8cde4299d8ef15c9e556587"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0448088ed94f810bd2464f3afd1859f0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a0448088ed94f810bd2464f3afd1859f0">operator==</a> (const <a class="el" href="classarmnn_utils_1_1_data_layout_indexed.xhtml">DataLayoutIndexed</a> &amp;indexed, const <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a> &amp;dataLayout)</td></tr>
<tr class="separator:a0448088ed94f810bd2464f3afd1859f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56b0e17341e000fa1d4561890294520c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a56b0e17341e000fa1d4561890294520c">within_percentage_tolerance</a> (float a, float b, float tolerancePercent=1.0f)</td></tr>
<tr class="memdesc:a56b0e17341e000fa1d4561890294520c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compare two floats and return true if their values are within a specified tolerance of each other.  <a href="#a56b0e17341e000fa1d4561890294520c">More...</a><br /></td></tr>
<tr class="separator:a56b0e17341e000fa1d4561890294520c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abeaf4f6785039866fd075f4569ba8e84"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#abeaf4f6785039866fd075f4569ba8e84">Permuted</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;srcShape, const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> &amp;mappings)</td></tr>
<tr class="separator:abeaf4f6785039866fd075f4569ba8e84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ba6f6f40c7382b61b00ac02f961ba22"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a2ba6f6f40c7382b61b00ac02f961ba22">Permuted</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;info, const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> &amp;mappings)</td></tr>
<tr class="separator:a2ba6f6f40c7382b61b00ac02f961ba22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3c74017185773dd61d8ca6662d65d43"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#af3c74017185773dd61d8ca6662d65d43">Permute</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;dstShape, const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> &amp;mappings, const void *src, void *dst, size_t dataTypeSize)</td></tr>
<tr class="separator:af3c74017185773dd61d8ca6662d65d43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21b249bca87a5ad47359abd9ec7acada"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a21b249bca87a5ad47359abd9ec7acada"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a21b249bca87a5ad47359abd9ec7acada">SelectiveQuantize</a> (float value, float scale, int32_t offset)</td></tr>
<tr class="separator:a21b249bca87a5ad47359abd9ec7acada"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5135dc1ce7a8aeb97623c1a92c5a3543"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5135dc1ce7a8aeb97623c1a92c5a3543"><td class="memTemplItemLeft" align="right" valign="top">float&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a5135dc1ce7a8aeb97623c1a92c5a3543">SelectiveDequantize</a> (T value, float scale, int32_t offset)</td></tr>
<tr class="separator:a5135dc1ce7a8aeb97623c1a92c5a3543"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb0aab92dc5b9bc5d7ebe2ea036f3809"><td class="memTemplParams" colspan="2">template&lt;typename T , typename FloatIt , typename std::enable_if&lt; IsFloatingPointIterator&lt; FloatIt &gt;::value, int &gt;::type  = 0&gt; </td></tr>
<tr class="memitem:afb0aab92dc5b9bc5d7ebe2ea036f3809"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#afb0aab92dc5b9bc5d7ebe2ea036f3809">QuantizedVector</a> (FloatIt first, FloatIt last, float qScale, int32_t qOffset)</td></tr>
<tr class="separator:afb0aab92dc5b9bc5d7ebe2ea036f3809"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad10541679f7d9740ba7a3c96b9843456"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad10541679f7d9740ba7a3c96b9843456"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#ad10541679f7d9740ba7a3c96b9843456">QuantizedVector</a> (const std::vector&lt; float &gt; &amp;array, float qScale=1.f, int32_t qOffset=0)</td></tr>
<tr class="separator:ad10541679f7d9740ba7a3c96b9843456"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af29a7b903bf7ae9639ea29bc05ccb289"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:af29a7b903bf7ae9639ea29bc05ccb289"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#af29a7b903bf7ae9639ea29bc05ccb289">QuantizedVector</a> (std::initializer_list&lt; float &gt; array, float qScale=1.f, int32_t qOffset=0)</td></tr>
<tr class="separator:af29a7b903bf7ae9639ea29bc05ccb289"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab53d94ea22b51c6bcdf9584644bd67bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#ab53d94ea22b51c6bcdf9584644bd67bb">GetTensorShape</a> (unsigned int numberOfBatches, unsigned int numberOfChannels, unsigned int height, unsigned int width, const <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a> dataLayout)</td></tr>
<tr class="separator:ab53d94ea22b51c6bcdf9584644bd67bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acee63cd08da47910fc166a1990988fa8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#acee63cd08da47910fc166a1990988fa8">GetTensorInfo</a> (unsigned int numberOfBatches, unsigned int numberOfChannels, unsigned int height, unsigned int width, const <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a> dataLayout, const <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> dataType)</td></tr>
<tr class="separator:acee63cd08da47910fc166a1990988fa8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee5883b056e03a22db41b7b471fb598e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#aee5883b056e03a22db41b7b471fb598e">GetTensorInfo</a> (unsigned int numberOfBatches, unsigned int numberOfChannels, unsigned int depth, unsigned int height, unsigned int width, const <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a> dataLayout, const <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> dataType)</td></tr>
<tr class="separator:aee5883b056e03a22db41b7b471fb598e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c9097ab13afc54b48c503c6487aaee1"><td class="memItemLeft" align="right" valign="top">std::pair&lt; float, float &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a1c9097ab13afc54b48c503c6487aaee1">FindMinMax</a> (<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a> *tensorHandle)</td></tr>
<tr class="separator:a1c9097ab13afc54b48c503c6487aaee1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d3b1be320610515e0cac8d745d9f8c2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a0d3b1be320610515e0cac8d745d9f8c2">ExpandDims</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;tensorShape, int axis)</td></tr>
<tr class="separator:a0d3b1be320610515e0cac8d745d9f8c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af57864f5e03358d14c2988edae912b8b"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#af57864f5e03358d14c2988edae912b8b">GetNumElementsBetween</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;shape, unsigned int firstAxisInclusive, unsigned int lastAxisExclusive)</td></tr>
<tr class="separator:af57864f5e03358d14c2988edae912b8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac93cb1365b4bcb67df2a3164606096c5"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#ac93cb1365b4bcb67df2a3164606096c5">GetUnsignedAxis</a> (const unsigned int inputDimension, const int axis)</td></tr>
<tr class="separator:ac93cb1365b4bcb67df2a3164606096c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a276aac5f7a8bdc3db4f62203870ca13b"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a276aac5f7a8bdc3db4f62203870ca13b">GetNumElementsAfter</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;shape, unsigned int axis)</td></tr>
<tr class="separator:a276aac5f7a8bdc3db4f62203870ca13b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1826e433f7e6817976a8175b4ef8296c"><td class="memItemLeft" align="right" valign="top">std::pair&lt; unsigned int, std::vector&lt; float &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a1826e433f7e6817976a8175b4ef8296c">GetPerAxisParams</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;info)</td></tr>
<tr class="separator:a1826e433f7e6817976a8175b4ef8296c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a428a9a6ffdf0e8d723b50c038c56c336"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a428a9a6ffdf0e8d723b50c038c56c336">TransposeTensorShape</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;srcShape, const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> &amp;mappings)</td></tr>
<tr class="separator:a428a9a6ffdf0e8d723b50c038c56c336"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49e3aa80e05abc7b4643aad600e8d827"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a49e3aa80e05abc7b4643aad600e8d827">TransposeTensorShape</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;info, const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> &amp;mappings)</td></tr>
<tr class="separator:a49e3aa80e05abc7b4643aad600e8d827"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a405d5f966ec992d1717711e5a2d7909d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a405d5f966ec992d1717711e5a2d7909d">Transpose</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;dstShape, const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> &amp;mappings, const void *src, void *dst, size_t dataTypeSize)</td></tr>
<tr class="separator:a405d5f966ec992d1717711e5a2d7909d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98d44e19d84d59e129721628a46de7ae"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a98d44e19d84d59e129721628a46de7ae">ConstructTensorShapeString</a> (const std::vector&lt; int &gt; &amp;shape)</td></tr>
<tr class="separator:a98d44e19d84d59e129721628a46de7ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a277cc41f9f2918c5263dd3a160d077"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a7a277cc41f9f2918c5263dd3a160d077">ConstructIntsAttribute</a> (const std::string &amp;name, const std::vector&lt; int &gt; &amp;values)</td></tr>
<tr class="separator:a7a277cc41f9f2918c5263dd3a160d077"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af75354033a8fe40804ef8c0fda1663a4"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:af75354033a8fe40804ef8c0fda1663a4"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#af75354033a8fe40804ef8c0fda1663a4">CompatibleTypes&lt; float &gt;</a> (<a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType)</td></tr>
<tr class="separator:af75354033a8fe40804ef8c0fda1663a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acabe92532fe8b1e897a8f57045ee4708"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:acabe92532fe8b1e897a8f57045ee4708"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#acabe92532fe8b1e897a8f57045ee4708">CompatibleTypes&lt; Half &gt;</a> (<a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType)</td></tr>
<tr class="separator:acabe92532fe8b1e897a8f57045ee4708"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bb19e0cf0c632e27058a609f05a5d02"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a6bb19e0cf0c632e27058a609f05a5d02"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a6bb19e0cf0c632e27058a609f05a5d02">CompatibleTypes&lt; BFloat16 &gt;</a> (<a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType)</td></tr>
<tr class="separator:a6bb19e0cf0c632e27058a609f05a5d02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a438e61647ca0873180d75c9f035b1611"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a438e61647ca0873180d75c9f035b1611"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a438e61647ca0873180d75c9f035b1611">CompatibleTypes&lt; uint8_t &gt;</a> (<a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType)</td></tr>
<tr class="separator:a438e61647ca0873180d75c9f035b1611"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6c6b22d4ce4b9aa733236f9cb92608e"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ae6c6b22d4ce4b9aa733236f9cb92608e"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#ae6c6b22d4ce4b9aa733236f9cb92608e">CompatibleTypes&lt; int8_t &gt;</a> (<a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType)</td></tr>
<tr class="separator:ae6c6b22d4ce4b9aa733236f9cb92608e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a787be51827fb835b5c60be66e00ceaac"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a787be51827fb835b5c60be66e00ceaac"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a787be51827fb835b5c60be66e00ceaac">CompatibleTypes&lt; int16_t &gt;</a> (<a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType)</td></tr>
<tr class="separator:a787be51827fb835b5c60be66e00ceaac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0324d8bcec2695e460417fdd5823f914"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a0324d8bcec2695e460417fdd5823f914"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a0324d8bcec2695e460417fdd5823f914">CompatibleTypes&lt; int32_t &gt;</a> (<a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType)</td></tr>
<tr class="separator:a0324d8bcec2695e460417fdd5823f914"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a662b45b5a4d48a01e967c0b28b6a552b"><td class="memTemplParams" colspan="2">template&lt;typename TNodeId , typename TTargetNodes &gt; </td></tr>
<tr class="memitem:a662b45b5a4d48a01e967c0b28b6a552b"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a662b45b5a4d48a01e967c0b28b6a552b">GraphTopologicalSort</a> (const TTargetNodes &amp;targetNodes, std::function&lt; std::vector&lt; TNodeId &gt;(TNodeId)&gt; getIncomingEdges, std::vector&lt; TNodeId &gt; &amp;outSorted)</td></tr>
<tr class="separator:a662b45b5a4d48a01e967c0b28b6a552b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a158a68b143d2564fa1ca047646cf4185"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a158a68b143d2564fa1ca047646cf4185">SplitBy</a> (const std::string &amp;originalString, const std::string &amp;delimiter=&quot; &quot;, bool includeEmptyToken=false)</td></tr>
<tr class="memdesc:a158a68b143d2564fa1ca047646cf4185"><td class="mdescLeft">&#160;</td><td class="mdescRight">Split a string into tokens by a delimiter.  <a href="#a158a68b143d2564fa1ca047646cf4185">More...</a><br /></td></tr>
<tr class="separator:a158a68b143d2564fa1ca047646cf4185"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14be0364a6fc0975d45e84737dfe21bc"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a14be0364a6fc0975d45e84737dfe21bc">Strip</a> (const std::string &amp;originalString, const std::string &amp;characterSet=&quot; &quot;)</td></tr>
<tr class="memdesc:a14be0364a6fc0975d45e84737dfe21bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Remove any preceding and trailing character specified in the characterSet.  <a href="#a14be0364a6fc0975d45e84737dfe21bc">More...</a><br /></td></tr>
<tr class="separator:a14be0364a6fc0975d45e84737dfe21bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a523deabeb7d0a884028b35eebfd1cb6c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a523deabeb7d0a884028b35eebfd1cb6c">ProcessConcatInputTensorInfo</a> (<a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;inputTensorInfo, <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">armnn::OriginsDescriptor</a> &amp;concatDescriptor, const unsigned int &amp;concatAxis, unsigned int inputIndex, unsigned int &amp;mergeDimOrigin)</td></tr>
<tr class="separator:a523deabeb7d0a884028b35eebfd1cb6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac34adc5b96d744ae53eac580213f855"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#aac34adc5b96d744ae53eac580213f855">CalculateReducedOutputTensoInfo</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;inputTensorInfo, const std::set&lt; unsigned int &gt; &amp;axisSet, bool keepDims, <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;outputTensorInfo)</td></tr>
<tr class="memdesc:aac34adc5b96d744ae53eac580213f855"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a tensor info after reducing the dimensions mentioned in axisData.  <a href="#aac34adc5b96d744ae53eac580213f855">More...</a><br /></td></tr>
<tr class="separator:aac34adc5b96d744ae53eac580213f855"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9300450bab29bb951d6f8755b7d9d3a8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a9300450bab29bb951d6f8755b7d9d3a8">CalculateStridedSliceOutputTensorInfo</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;inputTensorInfo, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a> &amp;desc, <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;outputTensorInfo)</td></tr>
<tr class="memdesc:a9300450bab29bb951d6f8755b7d9d3a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create output tensor info for a StridedSlice operator.  <a href="#a9300450bab29bb951d6f8755b7d9d3a8">More...</a><br /></td></tr>
<tr class="separator:a9300450bab29bb951d6f8755b7d9d3a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4a89c3d0ff243bdabae3e404248d04a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#ab4a89c3d0ff243bdabae3e404248d04a">ConvertInt32ToOctalString</a> (int value)</td></tr>
<tr class="memdesc:ab4a89c3d0ff243bdabae3e404248d04a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts an int value into the Prototxt octal representation.  <a href="#ab4a89c3d0ff243bdabae3e404248d04a">More...</a><br /></td></tr>
<tr class="separator:ab4a89c3d0ff243bdabae3e404248d04a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78f149bb07186307e19e00015a8d151c"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a78f149bb07186307e19e00015a8d151c">ConvertTensorShapeToString</a> (const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;shape)</td></tr>
<tr class="memdesc:a78f149bb07186307e19e00015a8d151c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts an TensorShape into Prototxt representation.  <a href="#a78f149bb07186307e19e00015a8d151c">More...</a><br /></td></tr>
<tr class="separator:a78f149bb07186307e19e00015a8d151c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5310a199d4969927169ed084b1f6c28"><td class="memTemplParams" colspan="2">template&lt;typename TContainer &gt; </td></tr>
<tr class="memitem:ad5310a199d4969927169ed084b1f6c28"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#ad5310a199d4969927169ed084b1f6c28">MakeInputTensors</a> (const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &gt; &amp;inputBindings, const std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer</a> &gt; &amp;inputDataContainers)</td></tr>
<tr class="separator:ad5310a199d4969927169ed084b1f6c28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4efd5a7fa660df5246466d83517220d"><td class="memTemplParams" colspan="2">template&lt;typename TContainer &gt; </td></tr>
<tr class="memitem:ad4efd5a7fa660df5246466d83517220d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#ad4efd5a7fa660df5246466d83517220d">MakeOutputTensors</a> (const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &gt; &amp;outputBindings, std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer</a> &gt; &amp;outputDataContainers)</td></tr>
<tr class="separator:ad4efd5a7fa660df5246466d83517220d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97dc68ae76f04b81c833184724836c9a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a97dc68ae76f04b81c833184724836c9a">CheckValidSize</a> (std::initializer_list&lt; size_t &gt; validInputCounts, size_t actualValue, const char *validExpr, const char *actualExpr, const <a class="el" href="structarmnn_1_1_check_location.xhtml">CheckLocation</a> &amp;location)</td></tr>
<tr class="separator:a97dc68ae76f04b81c833184724836c9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab075020544612cd151ebdd08db537396"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#ab075020544612cd151ebdd08db537396">NonNegative</a> (const char *expr, int32_t value, const <a class="el" href="structarmnn_1_1_check_location.xhtml">CheckLocation</a> &amp;location)</td></tr>
<tr class="separator:ab075020544612cd151ebdd08db537396"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e0aa273755368a1bf5fc65102df4a92"><td class="memItemLeft" align="right" valign="top">int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a2e0aa273755368a1bf5fc65102df4a92">VerifyInt32</a> (const char *expr, int64_t value, const <a class="el" href="structarmnn_1_1_check_location.xhtml">armnn::CheckLocation</a> &amp;location)</td></tr>
<tr class="separator:a2e0aa273755368a1bf5fc65102df4a92"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a12124184ac6aec018beb98b9715330c7"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a12124184ac6aec018beb98b9715330c7">NHWCToArmNN</a> = { 0, 2, 3, 1 }</td></tr>
<tr class="separator:a12124184ac6aec018beb98b9715330c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59cbccbfbae7633020d200f8c23fe69e"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_utils.xhtml#a59cbccbfbae7633020d200f8c23fe69e">ArmNNToNHWC</a> = { 0, 3, 1, 2 }</td></tr>
<tr class="separator:a59cbccbfbae7633020d200f8c23fe69e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="ab175d8bf2482d5a39c2331d1f0ddcece"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab175d8bf2482d5a39c2331d1f0ddcece">&#9670;&nbsp;</a></span>LabelCategoryNames</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_utils.xhtml#ab175d8bf2482d5a39c2331d1f0ddcece">LabelCategoryNames</a> =  std::vector&lt;std::string&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_model_accuracy_checker_8hpp_source.xhtml#l00025">25</a> of file <a class="el" href="_model_accuracy_checker_8hpp_source.xhtml">ModelAccuracyChecker.hpp</a>.</p>

</div>
</div>
<a id="ac7bd4ea667375c07718086368507ed44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7bd4ea667375c07718086368507ed44">&#9670;&nbsp;</a></span>TContainer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer</a> =  mapbox::util::variant&lt;std::vector&lt;float&gt;, std::vector&lt;int&gt;, std::vector&lt;unsigned char&gt;, std::vector&lt;int8_t&gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_t_container_8hpp_source.xhtml#l00018">18</a> of file <a class="el" href="_t_container_8hpp_source.xhtml">TContainer.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="aac34adc5b96d744ae53eac580213f855"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac34adc5b96d744ae53eac580213f855">&#9670;&nbsp;</a></span>CalculateReducedOutputTensoInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CalculateReducedOutputTensoInfo </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::set&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>axisSet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keepDims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputTensorInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a tensor info after reducing the dimensions mentioned in axisData. </p>

<p class="definition">Definition at line <a class="el" href="_parser_helper_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="_parser_helper_8cpp_source.xhtml">ParserHelper.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, and <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_parser_helper_test_8cpp_source.xhtml#l00017">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    std::vector&lt;unsigned int&gt; outputShapeVector;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordtype">bool</span> dimensionFound = <span class="keyword">false</span>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size = 1;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); ++i)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        dimensionFound = <span class="keyword">false</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> axis: axisSet)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keywordflow">if</span> (axis == i)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                dimensionFound = <span class="keyword">true</span>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">if</span> (!dimensionFound)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            size *= inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i];</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keywordflow">if</span> (keepDims)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                outputShapeVector.push_back(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i]);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">if</span> (keepDims)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                outputShapeVector.push_back(1);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">if</span> (keepDims)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> outputTensorShape(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(), &amp;outputShapeVector[0]);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(outputTensorShape, inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>());</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>({size}, inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9300450bab29bb951d6f8755b7d9d3a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9300450bab29bb951d6f8755b7d9d3a8">&#9670;&nbsp;</a></span>CalculateStridedSliceOutputTensorInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CalculateStridedSliceOutputTensorInfo </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputTensorInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create output tensor info for a StridedSlice operator. </p>

<p class="definition">Definition at line <a class="el" href="_parser_helper_8cpp_source.xhtml#l00103">103</a> of file <a class="el" href="_parser_helper_8cpp_source.xhtml">ParserHelper.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00366">StridedSliceDescriptor::GetStartForAxis()</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00393">StridedSliceDescriptor::GetStopForAxis()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01307">StridedSliceDescriptor::m_ShrinkAxisMask</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l01298">StridedSliceDescriptor::m_Stride</a>.</p>
<div class="fragment"><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&amp; inputShape = inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    std::vector&lt;unsigned int&gt; outputShapeVector;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); i++)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6d0384878432cfc9652b7ae8bc59506f">m_ShrinkAxisMask</a> &amp; (1 &lt;&lt; i))</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordtype">int</span> stride = desc.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#a0d53caff836b84204adbd1c28752a201">m_Stride</a>[i];</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordtype">int</span> start = desc.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#add849c1188ee7ff60774755b746aa526">GetStartForAxis</a>(inputShape, i);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordtype">int</span> stop = desc.<a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml#afc4731b55776f71af1e14c799c6e6e2c">GetStopForAxis</a>(inputShape, i, start);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordtype">int</span> newSize = stride &gt; 0 ? ((stop - start) + stride - 1) / stride :</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                      ((start - stop) - stride - 1) / -stride;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        newSize = std::max(0, newSize);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        outputShapeVector.push_back(static_cast&lt;unsigned int&gt;(newSize));</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> outputTensorShape(inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(), &amp;outputShapeVector[0]);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    outputTensorInfo = <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>(outputTensorShape), inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>());</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a6d0384878432cfc9652b7ae8bc59506f"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a6d0384878432cfc9652b7ae8bc59506f">armnn::StridedSliceDescriptor::m_ShrinkAxisMask</a></div><div class="ttdeci">int32_t m_ShrinkAxisMask</div><div class="ttdoc">Shrink axis mask value. If set, the nth specification shrinks the dimensionality by 1...</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01307">Descriptors.hpp:1307</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_add849c1188ee7ff60774755b746aa526"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#add849c1188ee7ff60774755b746aa526">armnn::StridedSliceDescriptor::GetStartForAxis</a></div><div class="ttdeci">int GetStartForAxis(const TensorShape &amp;inputShape, unsigned int axis) const</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00366">Descriptors.cpp:366</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_a0d53caff836b84204adbd1c28752a201"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#a0d53caff836b84204adbd1c28752a201">armnn::StridedSliceDescriptor::m_Stride</a></div><div class="ttdeci">std::vector&lt; int &gt; m_Stride</div><div class="ttdoc">Stride values for the input that will be sliced. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01298">Descriptors.hpp:1298</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml_afc4731b55776f71af1e14c799c6e6e2c"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml#afc4731b55776f71af1e14c799c6e6e2c">armnn::StridedSliceDescriptor::GetStopForAxis</a></div><div class="ttdeci">int GetStopForAxis(const TensorShape &amp;inputShape, unsigned int axis, int startForAxis) const</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00393">Descriptors.cpp:393</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a97dc68ae76f04b81c833184724836c9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97dc68ae76f04b81c833184724836c9a">&#9670;&nbsp;</a></span>CheckValidSize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CheckValidSize </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; size_t &gt;&#160;</td>
          <td class="paramname"><em>validInputCounts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>actualValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>validExpr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>actualExpr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_check_location.xhtml">CheckLocation</a> &amp;&#160;</td>
          <td class="paramname"><em>location</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_verification_helpers_8cpp_source.xhtml#l00016">16</a> of file <a class="el" href="_verification_helpers_8cpp_source.xhtml">VerificationHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00029">CheckLocation::AsString()</a>.</p>
<div class="fragment"><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keywordtype">bool</span> isValid = std::any_of(validInputCounts.begin(),</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;                               validInputCounts.end(),</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;                               [&amp;actualValue](<span class="keywordtype">size_t</span> x) { <span class="keywordflow">return</span> x == actualValue; } );</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">if</span> (!isValid)</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(fmt::format(<span class="stringliteral">&quot;{} = {} is not valid, not in {{}}. {}&quot;</span>,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                                         actualExpr,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                                         actualValue,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                                         validExpr,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                                         location.<a class="code" href="structarmnn_1_1_check_location.xhtml#a5e3562cda960da001597e7dd5679b140">AsString</a>()));</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    }</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_check_location_xhtml_a5e3562cda960da001597e7dd5679b140"><div class="ttname"><a href="structarmnn_1_1_check_location.xhtml#a5e3562cda960da001597e7dd5679b140">armnn::CheckLocation::AsString</a></div><div class="ttdeci">std::string AsString() const</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00029">Exceptions.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afb0302d3269537af9680c698599deac5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb0302d3269537af9680c698599deac5">&#9670;&nbsp;</a></span>CompatibleTypes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CompatibleTypes </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a>&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_compatible_types_8cpp_source.xhtml#l00017">17</a> of file <a class="el" href="_compatible_types_8cpp_source.xhtml">CompatibleTypes.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6bb19e0cf0c632e27058a609f05a5d02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bb19e0cf0c632e27058a609f05a5d02">&#9670;&nbsp;</a></span>CompatibleTypes< BFloat16 >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="namespacearmnn_utils.xhtml#afb0302d3269537af9680c698599deac5">armnnUtils::CompatibleTypes</a>&lt; <a class="el" href="classarmnn_1_1_b_float16.xhtml">BFloat16</a> &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_compatible_types_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="_compatible_types_8cpp_source.xhtml">CompatibleTypes.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::BFloat16</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> dataType == DataType::BFloat16;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af75354033a8fe40804ef8c0fda1663a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af75354033a8fe40804ef8c0fda1663a4">&#9670;&nbsp;</a></span>CompatibleTypes< float >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="namespacearmnn_utils.xhtml#afb0302d3269537af9680c698599deac5">armnnUtils::CompatibleTypes</a>&lt; float &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_compatible_types_8cpp_source.xhtml#l00023">23</a> of file <a class="el" href="_compatible_types_8cpp_source.xhtml">CompatibleTypes.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>.</p>
<div class="fragment"><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">return</span> dataType == DataType::Float32;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="acabe92532fe8b1e897a8f57045ee4708"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acabe92532fe8b1e897a8f57045ee4708">&#9670;&nbsp;</a></span>CompatibleTypes< Half >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="namespacearmnn_utils.xhtml#afb0302d3269537af9680c698599deac5">armnnUtils::CompatibleTypes</a>&lt; <a class="el" href="namespacearmnn.xhtml#a0f38fa92b2468d5378258a2b074c1a31">Half</a> &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_compatible_types_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="_compatible_types_8cpp_source.xhtml">CompatibleTypes.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::Float16</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">return</span> dataType == DataType::Float16;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a787be51827fb835b5c60be66e00ceaac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a787be51827fb835b5c60be66e00ceaac">&#9670;&nbsp;</a></span>CompatibleTypes< int16_t >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="namespacearmnn_utils.xhtml#afb0302d3269537af9680c698599deac5">armnnUtils::CompatibleTypes</a>&lt; int16_t &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_compatible_types_8cpp_source.xhtml#l00054">54</a> of file <a class="el" href="_compatible_types_8cpp_source.xhtml">CompatibleTypes.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::QSymmS16</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">return</span> dataType == DataType::QSymmS16;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0324d8bcec2695e460417fdd5823f914"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0324d8bcec2695e460417fdd5823f914">&#9670;&nbsp;</a></span>CompatibleTypes< int32_t >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="namespacearmnn_utils.xhtml#afb0302d3269537af9680c698599deac5">armnnUtils::CompatibleTypes</a>&lt; int32_t &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_compatible_types_8cpp_source.xhtml#l00060">60</a> of file <a class="el" href="_compatible_types_8cpp_source.xhtml">CompatibleTypes.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>.</p>
<div class="fragment"><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">return</span> dataType == DataType::Signed32;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae6c6b22d4ce4b9aa733236f9cb92608e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6c6b22d4ce4b9aa733236f9cb92608e">&#9670;&nbsp;</a></span>CompatibleTypes< int8_t >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="namespacearmnn_utils.xhtml#afb0302d3269537af9680c698599deac5">armnnUtils::CompatibleTypes</a>&lt; int8_t &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_compatible_types_8cpp_source.xhtml#l00047">47</a> of file <a class="el" href="_compatible_types_8cpp_source.xhtml">CompatibleTypes.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, and <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> dataType == DataType::QSymmS8</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        || dataType == DataType::QAsymmS8;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a438e61647ca0873180d75c9f035b1611"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a438e61647ca0873180d75c9f035b1611">&#9670;&nbsp;</a></span>CompatibleTypes< uint8_t >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="namespacearmnn_utils.xhtml#afb0302d3269537af9680c698599deac5">armnnUtils::CompatibleTypes</a>&lt; uint8_t &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_compatible_types_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="_compatible_types_8cpp_source.xhtml">CompatibleTypes.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::Boolean</a>, and <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> dataType == DataType::Boolean || dataType == DataType::QAsymmU8;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7a277cc41f9f2918c5263dd3a160d077"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a277cc41f9f2918c5263dd3a160d077">&#9670;&nbsp;</a></span>ConstructIntsAttribute()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string ConstructIntsAttribute </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_onnx_parser_test_utils_8cpp_source.xhtml#l00023">23</a> of file <a class="el" href="_onnx_parser_test_utils_8cpp_source.xhtml">OnnxParserTestUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_unsqueeze_8cpp_source.xhtml#l00010">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    std::string attrString = fmt::format(<span class="stringliteral">&quot;attribute {{ name: &#39;{}&#39;&quot;</span>, name);;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i : values)</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        attrString = fmt::format(<span class="stringliteral">&quot; {} ints: {}&quot;</span>, attrString, i);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    }</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    attrString = fmt::format(<span class="stringliteral">&quot; {} type: INTS }}&quot;</span>, attrString);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">return</span> attrString;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a98d44e19d84d59e129721628a46de7ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98d44e19d84d59e129721628a46de7ae">&#9670;&nbsp;</a></span>ConstructTensorShapeString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string ConstructTensorShapeString </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_onnx_parser_test_utils_8cpp_source.xhtml#l00013">13</a> of file <a class="el" href="_onnx_parser_test_utils_8cpp_source.xhtml">OnnxParserTestUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_concat_8cpp_source.xhtml#l00010">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    std::string shapeStr;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i : shape)</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    {</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;        shapeStr = fmt::format(<span class="stringliteral">&quot;{} dim {{ dim_value: {} }}&quot;</span>, shapeStr, i);</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    }</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keywordflow">return</span> shapeStr;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab4a89c3d0ff243bdabae3e404248d04a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4a89c3d0ff243bdabae3e404248d04a">&#9670;&nbsp;</a></span>ConvertInt32ToOctalString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string ConvertInt32ToOctalString </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts an int value into the Prototxt octal representation. </p>

<p class="definition">Definition at line <a class="el" href="_prototxt_conversions_8cpp_source.xhtml#l00017">17</a> of file <a class="el" href="_prototxt_conversions_8cpp_source.xhtml">PrototxtConversions.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_prototxt_conversions_test_8cpp_source.xhtml#l00011">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    std::string returnString;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 4; ++i)</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    {</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;\\&quot;</span>;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        ss &lt;&lt; std::setw(3) &lt;&lt; std::setfill(&#39;0&#39;) &lt;&lt; std::oct &lt;&lt; ((value &gt;&gt; (i * 8)) &amp; 0xFF);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    }</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    ss &gt;&gt; returnString;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">return</span> returnString;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a78f149bb07186307e19e00015a8d151c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78f149bb07186307e19e00015a8d151c">&#9670;&nbsp;</a></span>ConvertTensorShapeToString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string ConvertTensorShapeToString </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts an TensorShape into Prototxt representation. </p>

<p class="definition">Definition at line <a class="el" href="_prototxt_conversions_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="_prototxt_conversions_8cpp_source.xhtml">PrototxtConversions.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_prototxt_conversions_test_8cpp_source.xhtml#l00011">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0 ; i &lt; shape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() ; i++)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;dim {\n&quot;</span>;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;size: &quot;</span> &lt;&lt; std::to_string(shape[i]) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;}\n&quot;</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">return</span> ss.str();</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdoc">Function that returns the tensor rank. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00174">Tensor.cpp:174</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0d3b1be320610515e0cac8d745d9f8c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d3b1be320610515e0cac8d745d9f8c2">&#9670;&nbsp;</a></span>ExpandDims()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> ExpandDims </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00106">106</a> of file <a class="el" href="_tensor_utils_8cpp_source.xhtml">TensorUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, and <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_utils_test_8cpp_source.xhtml#l00015">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputDim = tensorShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() + 1;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">if</span> (axis &lt; -armnn::numeric_cast&lt;int&gt;(outputDim) || axis &gt; armnn::numeric_cast&lt;int&gt;(tensorShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()))</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(fmt::format(<span class="stringliteral">&quot;Invalid expansion axis {} for {}D input tensor. {}&quot;</span>,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                                   axis,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                                   tensorShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(),</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                                   <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">if</span> (axis &lt; 0)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        axis = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">int</span>&gt;(outputDim) + axis;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    std::vector&lt;unsigned int&gt; outputShape;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    outputShape.reserve(tensorShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>());</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; tensorShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); ++i)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        outputShape.push_back(tensorShape[i]);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    outputShape.insert(outputShape.begin() + axis, 1);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(outputDim, outputShape.data());</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00209">Exceptions.hpp:209</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdoc">Function that returns the tensor rank. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00174">Tensor.cpp:174</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1c9097ab13afc54b48c503c6487aaee1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c9097ab13afc54b48c503c6487aaee1">&#9670;&nbsp;</a></span>FindMinMax()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; float, float &gt; FindMinMax </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a> *&#160;</td>
          <td class="paramname"><em>tensorHandle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00079">79</a> of file <a class="el" href="_tensor_utils_8cpp_source.xhtml">TensorUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00181">TensorShape::GetNumElements()</a>, <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">ITensorHandle::GetShape()</a>, <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a9afbc055a017adf1bc38ee137bca6e90">ITensorHandle::Map()</a>, and <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a563609828050f1b3a7868c23f3365923">ITensorHandle::Unmap()</a>.</p>
<div class="fragment"><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">auto</span> tensor_data = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(tensorHandle-&gt;<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#a9afbc055a017adf1bc38ee137bca6e90">Map</a>(<span class="keyword">true</span>));</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">auto</span> tensor_size = tensorHandle-&gt;<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">GetShape</a>().<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>();</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="comment">// Set min/max initially to first value in tensor</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordtype">float</span> min = tensor_data[0];</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordtype">float</span> max = tensor_data[0];</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">// Loop over rest of tensor and update min/max if necessary</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> val = 1; val &lt; tensor_size; val++)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">if</span> (tensor_data[val] &lt; min)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            min = tensor_data[val];</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (tensor_data[val] &gt; max)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            max = tensor_data[val];</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    tensorHandle-&gt;<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#a563609828050f1b3a7868c23f3365923">Unmap</a>();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> std::make_pair(min, max);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorShape::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdoc">Function that calculates the tensor elements by multiplying all dimension size which are Specified...</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00181">Tensor.cpp:181</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_xhtml_affd5aae75cad90f472f96cfd25a13f29"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">armnn::ITensorHandle::GetShape</a></div><div class="ttdeci">virtual TensorShape GetShape() const =0</div><div class="ttdoc">Get the number of elements for each dimension ordered from slowest iterating dimension to fastest ite...</div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_xhtml_a9afbc055a017adf1bc38ee137bca6e90"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle.xhtml#a9afbc055a017adf1bc38ee137bca6e90">armnn::ITensorHandle::Map</a></div><div class="ttdeci">virtual const void * Map(bool blocking=true) const =0</div><div class="ttdoc">Map the tensor data for access. </div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_xhtml_a563609828050f1b3a7868c23f3365923"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle.xhtml#a563609828050f1b3a7868c23f3365923">armnn::ITensorHandle::Unmap</a></div><div class="ttdeci">virtual void Unmap() const =0</div><div class="ttdoc">Unmap the tensor data. </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a276aac5f7a8bdc3db4f62203870ca13b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a276aac5f7a8bdc3db4f62203870ca13b">&#9670;&nbsp;</a></span>GetNumElementsAfter()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumElementsAfter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00161">161</a> of file <a class="el" href="_tensor_utils_8cpp_source.xhtml">TensorUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00173">GetPerAxisParams()</a>, and <a class="el" href="_base_iterator_8hpp_source.xhtml#l00768">PerAxisIterator&lt; const int8_t, Decoder&lt; float &gt; &gt;::PerAxisIterator()</a>.</p>
<div class="fragment"><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDim = shape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(axis &lt;= numDim - 1);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> count = 1;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = axis+1; i &lt; numDim; i++)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        count *= shape[i];</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">return</span> count;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div><div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdoc">Function that returns the tensor rank. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00174">Tensor.cpp:174</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af57864f5e03358d14c2988edae912b8b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af57864f5e03358d14c2988edae912b8b">&#9670;&nbsp;</a></span>GetNumElementsBetween()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNumElementsBetween </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>firstAxisInclusive</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>lastAxisExclusive</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00134">134</a> of file <a class="el" href="_tensor_utils_8cpp_source.xhtml">TensorUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>.</p>

<p class="reference">Referenced by <a class="el" href="backends_2reference_2workloads_2_arg_min_max_8cpp_source.xhtml#l00016">armnn::ArgMinMax()</a>, <a class="el" href="_log_softmax_8cpp_source.xhtml#l00029">armnn::LogSoftmax()</a>, and <a class="el" href="backends_2reference_2workloads_2_softmax_8cpp_source.xhtml#l00017">armnn::Softmax()</a>.</p>
<div class="fragment"><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;{</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(firstAxisInclusive &lt;= lastAxisExclusive);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(lastAxisExclusive &lt;= shape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>());</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> count = 1;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = firstAxisInclusive; i &lt; lastAxisExclusive; i++)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        count *= shape[i];</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">return</span> count;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdoc">Function that returns the tensor rank. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00174">Tensor.cpp:174</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1826e433f7e6817976a8175b4ef8296c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1826e433f7e6817976a8175b4ef8296c">&#9670;&nbsp;</a></span>GetPerAxisParams()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt; unsigned int, std::vector&lt; float &gt; &gt; GetPerAxisParams </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00173">173</a> of file <a class="el" href="_tensor_utils_8cpp_source.xhtml">TensorUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_types_utils_8hpp_source.xhtml#l00202">armnn::GetDataTypeName()</a>, <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00161">GetNumElementsAfter()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00496">TensorInfo::GetQuantizationDim()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00453">TensorInfo::GetQuantizationScales()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00448">TensorInfo::HasPerAxisQuantization()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_decoders_8hpp_source.xhtml#l00066">armnn::MakeDecoder()</a>, and <a class="el" href="_encoders_8hpp_source.xhtml#l00021">armnn::MakeEncoder()</a>.</p>
<div class="fragment"><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;{</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt;&amp; scales = info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8bc11f1fa23ef42532f9fdd04d355270">GetQuantizationScales</a>();</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;unsigned int&gt;</a> quantizationDim = info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">GetQuantizationDim</a>();</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">if</span> (!info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#ab85cd8cc10c96a7c99c14042c251fc48">HasPerAxisQuantization</a>())</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            std::string(<span class="stringliteral">&quot;Per-axis quantization params not set for tensor of type &quot;</span>) +</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a81b5ff8545adad19a1c9d4ca076d552c">armnn::GetDataTypeName</a>(info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()), <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>());</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> axisFactor = <a class="code" href="namespacearmnn_utils.xhtml#a276aac5f7a8bdc3db4f62203870ca13b">GetNumElementsAfter</a>(info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>(), quantizationDim.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>()) ;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">return</span> { axisFactor, scales };</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt; unsigned int &gt;</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_ab85cd8cc10c96a7c99c14042c251fc48"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#ab85cd8cc10c96a7c99c14042c251fc48">armnn::TensorInfo::HasPerAxisQuantization</a></div><div class="ttdeci">bool HasPerAxisQuantization() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00448">Tensor.cpp:448</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b8fc85ce966c035d789cf22db5088a1"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">armnn::TensorInfo::GetQuantizationDim</a></div><div class="ttdeci">Optional&lt; unsigned int &gt; GetQuantizationDim() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00496">Tensor.cpp:496</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8bc11f1fa23ef42532f9fdd04d355270"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8bc11f1fa23ef42532f9fdd04d355270">armnn::TensorInfo::GetQuantizationScales</a></div><div class="ttdeci">std::vector&lt; float &gt; GetQuantizationScales() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00453">Tensor.cpp:453</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a81b5ff8545adad19a1c9d4ca076d552c"><div class="ttname"><a href="namespacearmnn.xhtml#a81b5ff8545adad19a1c9d4ca076d552c">armnn::GetDataTypeName</a></div><div class="ttdeci">constexpr const char * GetDataTypeName(DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00202">TypesUtils.hpp:202</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00209">Exceptions.hpp:209</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_a276aac5f7a8bdc3db4f62203870ca13b"><div class="ttname"><a href="namespacearmnn_utils.xhtml#a276aac5f7a8bdc3db4f62203870ca13b">armnnUtils::GetNumElementsAfter</a></div><div class="ttdeci">unsigned int GetNumElementsAfter(const armnn::TensorShape &amp;shape, unsigned int axis)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_utils_8cpp_source.xhtml#l00161">TensorUtils.cpp:161</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acee63cd08da47910fc166a1990988fa8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acee63cd08da47910fc166a1990988fa8">&#9670;&nbsp;</a></span>GetTensorInfo() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> GetTensorInfo </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numberOfBatches</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numberOfChannels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a>&#160;</td>
          <td class="paramname"><em>dataLayout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00038">38</a> of file <a class="el" href="_tensor_utils_8cpp_source.xhtml">TensorUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>

<p class="reference">Referenced by <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01645">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01785">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01935">DepthwiseConvolution2dTestImpl()</a>, and <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00194">SimpleConvolution2dTestImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">switch</span> (dataLayout)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">case</span> DataLayout::NCHW:</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({numberOfBatches, numberOfChannels, height, width}, dataType);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">case</span> DataLayout::NHWC:</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({numberOfBatches, height, width, numberOfChannels}, dataType);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Unknown data layout [&quot;</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                                                  + std::to_string(static_cast&lt;int&gt;(dataLayout)) +</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                                                  <span class="stringliteral">&quot;]&quot;</span>, <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>());</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00209">Exceptions.hpp:209</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aee5883b056e03a22db41b7b471fb598e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee5883b056e03a22db41b7b471fb598e">&#9670;&nbsp;</a></span>GetTensorInfo() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> GetTensorInfo </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numberOfBatches</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numberOfChannels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a>&#160;</td>
          <td class="paramname"><em>dataLayout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a>&#160;</td>
          <td class="paramname"><em>dataType</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00058">58</a> of file <a class="el" href="_tensor_utils_8cpp_source.xhtml">TensorUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a884e0167ebf9bbe6cfd6ca5ab97ab015">armnn::NCDHW</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a4dd0194b114cbf51da5b3a72569863ef">armnn::NDHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">switch</span> (dataLayout)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">case</span> DataLayout::NDHWC:</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({numberOfBatches, depth, height, width, numberOfChannels}, dataType);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">case</span> DataLayout::NCDHW:</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>({numberOfBatches, numberOfChannels, depth, height, width}, dataType);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Unknown data layout [&quot;</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                                  + std::to_string(static_cast&lt;int&gt;(dataLayout)) +</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                                  <span class="stringliteral">&quot;]&quot;</span>, <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>());</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00209">Exceptions.hpp:209</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab53d94ea22b51c6bcdf9584644bd67bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab53d94ea22b51c6bcdf9584644bd67bb">&#9670;&nbsp;</a></span>GetTensorShape()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> GetTensorShape </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numberOfBatches</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numberOfChannels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a>&#160;</td>
          <td class="paramname"><em>dataLayout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00019">19</a> of file <a class="el" href="_tensor_utils_8cpp_source.xhtml">TensorUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">switch</span> (dataLayout)</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keywordflow">case</span> DataLayout::NCHW:</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({numberOfBatches, numberOfChannels, height, width});</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keywordflow">case</span> DataLayout::NHWC:</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({numberOfBatches, height, width, numberOfChannels});</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Unknown data layout [&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                                                  + std::to_string(static_cast&lt;int&gt;(dataLayout)) +</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                                                  <span class="stringliteral">&quot;]&quot;</span>, <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>());</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    }</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00209">Exceptions.hpp:209</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac93cb1365b4bcb67df2a3164606096c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac93cb1365b4bcb67df2a3164606096c5">&#9670;&nbsp;</a></span>GetUnsignedAxis()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetUnsignedAxis </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>inputDimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_utils_8cpp_source.xhtml#l00148">148</a> of file <a class="el" href="_tensor_utils_8cpp_source.xhtml">TensorUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>, and <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>.</p>

<p class="reference">Referenced by <a class="el" href="backends_2reference_2workloads_2_arg_min_max_8cpp_source.xhtml#l00016">armnn::ArgMinMax()</a>, <a class="el" href="_cl_arg_min_max_workload_8cpp_source.xhtml#l00055">ClArgMinMaxWorkload::ClArgMinMaxWorkload()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00037">ArgMinMaxLayer::InferOutputShapes()</a>, <a class="el" href="_neon_arg_min_max_workload_8cpp_source.xhtml#l00055">NeonArgMinMaxWorkload::NeonArgMinMaxWorkload()</a>, <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02575">TfLiteParserImpl::OutputShapeOfReshape()</a>, and <a class="el" href="_workload_data_8cpp_source.xhtml#l00629">ArgMinMaxQueueDescriptor::Validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(axis &lt; armnn::numeric_cast&lt;int&gt;(inputDimension),</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                     <span class="stringliteral">&quot;Required axis index greater than number of dimensions.&quot;</span>);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(axis &gt;= -armnn::numeric_cast&lt;int&gt;(inputDimension),</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                     <span class="stringliteral">&quot;Required axis index lower than negative of the number of dimensions&quot;</span>);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uAxis = axis &lt; 0  ?</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                         inputDimension - <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(<a class="code" href="structarmnn_1_1abs.xhtml">abs</a>(axis))</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                         : armnn::numeric_cast&lt;unsigned int&gt;(axis);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">return</span> uAxis;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;}</div><div class="ttc" id="structarmnn_1_1abs_xhtml"><div class="ttname"><a href="structarmnn_1_1abs.xhtml">armnn::abs</a></div><div class="ttdef"><b>Definition:</b> <a href="_abs_8hpp_source.xhtml#l00013">Abs.hpp:13</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a662b45b5a4d48a01e967c0b28b6a552b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a662b45b5a4d48a01e967c0b28b6a552b">&#9670;&nbsp;</a></span>GraphTopologicalSort()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool armnnUtils::GraphTopologicalSort </td>
          <td>(</td>
          <td class="paramtype">const TTargetNodes &amp;&#160;</td>
          <td class="paramname"><em>targetNodes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; std::vector&lt; TNodeId &gt;(TNodeId)&gt;&#160;</td>
          <td class="paramname"><em>getIncomingEdges</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; TNodeId &gt; &amp;&#160;</td>
          <td class="paramname"><em>outSorted</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_graph_topological_sort_8hpp_source.xhtml#l00110">110</a> of file <a class="el" href="_graph_topological_sort_8hpp_source.xhtml">GraphTopologicalSort.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    outSorted.clear();</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    std::map&lt;TNodeId, NodeState&gt; nodeStates;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">for</span> (TNodeId targetNode : targetNodes)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">if</span> (!TopologicallySort(targetNode, getIncomingEdges, outSorted, nodeStates))</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad5310a199d4969927169ed084b1f6c28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5310a199d4969927169ed084b1f6c28">&#9670;&nbsp;</a></span>MakeInputTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> armnnUtils::MakeInputTensors </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputBindings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputDataContainers</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_i_o_utils_8hpp_source.xhtml#l00017">17</a> of file <a class="el" href="_tensor_i_o_utils_8hpp_source.xhtml">TensorIOUtils.hpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00516">TensorInfo::SetConstant()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_model_8hpp_source.xhtml#l00772">InferenceModel&lt; IParser, TDataType &gt;::CreateWorkingMemHandle()</a>, and <a class="el" href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00049">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> inputTensors;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> numInputs = inputBindings.size();</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordflow">if</span> (numInputs != inputDataContainers.size())</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    {</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(fmt::format(<span class="stringliteral">&quot;The number of inputs does not match number of &quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                                           <span class="stringliteral">&quot;tensor data containers: {0} != {1}&quot;</span>,</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                                           numInputs,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                                           inputDataContainers.size()));</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    }</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numInputs; i++)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a>&amp; inputBinding = inputBindings[i];</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer</a>&amp; inputData = inputDataContainers[i];</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        mapbox::util::apply_visitor([&amp;](<span class="keyword">auto</span>&amp;&amp; value)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            <span class="keywordflow">if</span> (value.size() != inputBinding.second.GetNumElements())</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;               <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(fmt::format(<span class="stringliteral">&quot;The input tensor has incorrect size (expected {0} got {1})&quot;</span>,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                                  inputBinding.second.GetNumElements(),</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                                  value.size()));</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo = inputBinding.second;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">SetConstant</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> inputTensor(inputTensorInfo, value.data());</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            inputTensors.push_back(std::make_pair(inputBinding.first, inputTensor));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        },</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        inputData);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> inputTensors;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a280670a263dc4fd40491f6d0a2737f44"><div class="ttname"><a href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></div><div class="ttdeci">std::pair&lt; armnn::LayerBindingId, armnn::TensorInfo &gt; BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00274">Tensor.hpp:274</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_ac7bd4ea667375c07718086368507ed44"><div class="ttname"><a href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a></div><div class="ttdeci">mapbox::util::variant&lt; std::vector&lt; float &gt;, std::vector&lt; int &gt;, std::vector&lt; unsigned char &gt;, std::vector&lt; int8_t &gt; &gt; TContainer</div><div class="ttdef"><b>Definition:</b> <a href="_t_container_8hpp_source.xhtml#l00018">TContainer.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8ffca1e21bdfa7f945617acd606aac91"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8ffca1e21bdfa7f945617acd606aac91">armnn::TensorInfo::SetConstant</a></div><div class="ttdeci">void SetConstant(const bool IsConstant=true)</div><div class="ttdoc">Marks the data corresponding to this tensor info as constant. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00516">Tensor.cpp:516</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad4efd5a7fa660df5246466d83517220d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4efd5a7fa660df5246466d83517220d">&#9670;&nbsp;</a></span>MakeOutputTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> armnnUtils::MakeOutputTensors </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>outputBindings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>outputDataContainers</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_tensor_i_o_utils_8hpp_source.xhtml#l00056">56</a> of file <a class="el" href="_tensor_i_o_utils_8hpp_source.xhtml">TensorIOUtils.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_inference_model_8hpp_source.xhtml#l00772">InferenceModel&lt; IParser, TDataType &gt;::CreateWorkingMemHandle()</a>, and <a class="el" href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00049">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> outputTensors;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> numOutputs = outputBindings.size();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">if</span> (numOutputs != outputDataContainers.size())</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(fmt::format(<span class="stringliteral">&quot;Number of outputs does not match number&quot;</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                           <span class="stringliteral">&quot;of tensor data containers: {0} != {1}&quot;</span>,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                           numOutputs,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                                           outputDataContainers.size()));</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numOutputs; i++)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a>&amp; outputBinding = outputBindings[i];</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <a class="code" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">TContainer</a>&amp; outputData = outputDataContainers[i];</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        mapbox::util::apply_visitor([&amp;](<span class="keyword">auto</span>&amp;&amp; value)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keywordflow">if</span> (value.size() != outputBinding.second.GetNumElements())</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;Output tensor has incorrect size&quot;</span>);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a> outputTensor(outputBinding.second, value.data());</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            outputTensors.push_back(std::make_pair(outputBinding.first, outputTensor));</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        },</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        outputData);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">return</span> outputTensors;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00319">Tensor.hpp:319</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a280670a263dc4fd40491f6d0a2737f44"><div class="ttname"><a href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></div><div class="ttdeci">std::pair&lt; armnn::LayerBindingId, armnn::TensorInfo &gt; BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00274">Tensor.hpp:274</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_ac7bd4ea667375c07718086368507ed44"><div class="ttname"><a href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a></div><div class="ttdeci">mapbox::util::variant&lt; std::vector&lt; float &gt;, std::vector&lt; int &gt;, std::vector&lt; unsigned char &gt;, std::vector&lt; int8_t &gt; &gt; TContainer</div><div class="ttdef"><b>Definition:</b> <a href="_t_container_8hpp_source.xhtml#l00018">TContainer.hpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab075020544612cd151ebdd08db537396"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab075020544612cd151ebdd08db537396">&#9670;&nbsp;</a></span>NonNegative()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t NonNegative </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>expr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_check_location.xhtml">CheckLocation</a> &amp;&#160;</td>
          <td class="paramname"><em>location</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_verification_helpers_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="_verification_helpers_8cpp_source.xhtml">VerificationHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00029">CheckLocation::AsString()</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">if</span> (value &lt; 0)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(fmt::format(<span class="stringliteral">&quot;&#39;{}&#39; must be non-negative, received: {} at {}&quot;</span>,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                         expr,</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                         value,</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                         location.<a class="code" href="structarmnn_1_1_check_location.xhtml#a5e3562cda960da001597e7dd5679b140">AsString</a>()));</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(value);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_check_location_xhtml_a5e3562cda960da001597e7dd5679b140"><div class="ttname"><a href="structarmnn_1_1_check_location.xhtml#a5e3562cda960da001597e7dd5679b140">armnn::CheckLocation::AsString</a></div><div class="ttdeci">std::string AsString() const</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00029">Exceptions.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a49ba5984d8cde4299d8ef15c9e556587"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49ba5984d8cde4299d8ef15c9e556587">&#9670;&nbsp;</a></span>operator==() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a> &amp;&#160;</td>
          <td class="paramname"><em>dataLayout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_utils_1_1_data_layout_indexed.xhtml">DataLayoutIndexed</a> &amp;&#160;</td>
          <td class="paramname"><em>indexed</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Equality methods. </p>

<p class="definition">Definition at line <a class="el" href="_data_layout_indexed_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="_data_layout_indexed_8cpp_source.xhtml">DataLayoutIndexed.cpp</a>.</p>

<p class="reference">References <a class="el" href="_data_layout_indexed_8hpp_source.xhtml#l00022">DataLayoutIndexed::GetDataLayout()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_8hpp_source.xhtml#l00156">OutputSlot::Disconnect()</a>, <a class="el" href="_data_layout_indexed_8hpp_source.xhtml#l00028">DataLayoutIndexed::GetIndex()</a>, and <a class="el" href="_optional_test_8cpp_source.xhtml#l00027">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> dataLayout == indexed.<a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a7d8b3d755b6ca8f5533657969efb06c4">GetDataLayout</a>();</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="ttc" id="classarmnn_utils_1_1_data_layout_indexed_xhtml_a7d8b3d755b6ca8f5533657969efb06c4"><div class="ttname"><a href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a7d8b3d755b6ca8f5533657969efb06c4">armnnUtils::DataLayoutIndexed::GetDataLayout</a></div><div class="ttdeci">armnn::DataLayout GetDataLayout() const</div><div class="ttdef"><b>Definition:</b> <a href="_data_layout_indexed_8hpp_source.xhtml#l00022">DataLayoutIndexed.hpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0448088ed94f810bd2464f3afd1859f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0448088ed94f810bd2464f3afd1859f0">&#9670;&nbsp;</a></span>operator==() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_utils_1_1_data_layout_indexed.xhtml">DataLayoutIndexed</a> &amp;&#160;</td>
          <td class="paramname"><em>indexed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a> &amp;&#160;</td>
          <td class="paramname"><em>dataLayout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_data_layout_indexed_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="_data_layout_indexed_8cpp_source.xhtml">DataLayoutIndexed.cpp</a>.</p>

<p class="reference">References <a class="el" href="_data_layout_indexed_8hpp_source.xhtml#l00022">DataLayoutIndexed::GetDataLayout()</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> indexed.<a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a7d8b3d755b6ca8f5533657969efb06c4">GetDataLayout</a>() == dataLayout;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="ttc" id="classarmnn_utils_1_1_data_layout_indexed_xhtml_a7d8b3d755b6ca8f5533657969efb06c4"><div class="ttname"><a href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a7d8b3d755b6ca8f5533657969efb06c4">armnnUtils::DataLayoutIndexed::GetDataLayout</a></div><div class="ttdeci">armnn::DataLayout GetDataLayout() const</div><div class="ttdef"><b>Definition:</b> <a href="_data_layout_indexed_8hpp_source.xhtml#l00022">DataLayoutIndexed.hpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af3c74017185773dd61d8ca6662d65d43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3c74017185773dd61d8ca6662d65d43">&#9670;&nbsp;</a></span>Permute()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Permute </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>dstShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> &amp;&#160;</td>
          <td class="paramname"><em>mappings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dataTypeSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_permute_8cpp_source.xhtml#l00131">131</a> of file <a class="el" href="_permute_8cpp_source.xhtml">Permute.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00566">armnnOnnxParser::CreateConstTensorImpl()</a>, <a class="el" href="backends_2reference_2workloads_2_depth_to_space_8cpp_source.xhtml#l00018">armnn::DepthToSpace()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01645">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01785">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l03552">DepthwiseConvolution2dDepthMul64Test()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01935">DepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00899">IDeserializer::DeserializerImpl::GetNetworkOutputBindingInfo()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00020">PermuteLayer::PermuteLayer()</a>, <a class="el" href="include_2armnn_test_utils_2_data_layout_utils_8hpp_source.xhtml#l00051">PermuteTensorNcdhwToNdhwc()</a>, <a class="el" href="include_2armnn_test_utils_2_data_layout_utils_8hpp_source.xhtml#l00014">PermuteTensorNchwToNhwc()</a>, <a class="el" href="include_2armnn_test_utils_2_data_layout_utils_8hpp_source.xhtml#l00039">PermuteTensorNdhwcToNcdhw()</a>, <a class="el" href="include_2armnn_test_utils_2_data_layout_utils_8hpp_source.xhtml#l00026">PermuteTensorNhwcToNchw()</a>, <a class="el" href="_image_tensor_generator_8hpp_source.xhtml#l00091">PrepareImageTensor&lt; float &gt;()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00194">SimpleConvolution2dTestImpl()</a>, and <a class="el" href="_test_name_and_descriptor_layer_visitor_8cpp_source.xhtml#l00274">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    PermuteLoop(dstShape, mappings).Unroll(src, dst, dataTypeSize);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abeaf4f6785039866fd075f4569ba8e84"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abeaf4f6785039866fd075f4569ba8e84">&#9670;&nbsp;</a></span>Permuted() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> Permuted </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>srcShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> &amp;&#160;</td>
          <td class="paramname"><em>mappings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_permute_8cpp_source.xhtml#l00098">98</a> of file <a class="el" href="_permute_8cpp_source.xhtml">Permute.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_types_8hpp_source.xhtml#l00325">PermutationVector::GetSize()</a>, and <a class="el" href="_types_8hpp_source.xhtml#l00018">armnn::MaxNumOfTensorDimensions</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_utils_8cpp_source.xhtml#l00169">armnn::Convert1HWOTensorInfoToAcl()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00114">armnn::ConvertWeightTensorInfoFromArmnnToAcl()</a>, <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00566">armnnOnnxParser::CreateConstTensorImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l03552">DepthwiseConvolution2dDepthMul64Test()</a>, <a class="el" href="_ref_unidirectional_sequence_lstm_workload_8cpp_source.xhtml#l00051">RefUnidirectionalSequenceLstmWorkload::ExecuteAsync()</a>, <a class="el" href="_deserializer_8cpp_source.xhtml#l00899">IDeserializer::DeserializerImpl::GetNetworkOutputBindingInfo()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00038">PermuteLayer::InferOutputShapes()</a>, <a class="el" href="_permute_8cpp_source.xhtml#l00115">Permuted()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00173">PermuteInputsForConcat()</a>, <a class="el" href="_workload_utils_8cpp_source.xhtml#l00017">armnn::PermuteTensor()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00121">PermuteTensorData()</a>, <a class="el" href="include_2armnn_test_utils_2_data_layout_utils_8hpp_source.xhtml#l00051">PermuteTensorNcdhwToNdhwc()</a>, <a class="el" href="include_2armnn_test_utils_2_data_layout_utils_8hpp_source.xhtml#l00014">PermuteTensorNchwToNhwc()</a>, <a class="el" href="include_2armnn_test_utils_2_data_layout_utils_8hpp_source.xhtml#l00039">PermuteTensorNdhwcToNcdhw()</a>, <a class="el" href="include_2armnn_test_utils_2_data_layout_utils_8hpp_source.xhtml#l00026">PermuteTensorNhwcToNchw()</a>, <a class="el" href="_move_permute_up_8hpp_source.xhtml#l00023">MovePermuteUpImpl::Run()</a>, and <a class="el" href="_utils_tests_8cpp_source.xhtml#l00018">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    assert(srcShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() == mappings.<a class="code" href="classarmnn_1_1_permutation_vector.xhtml#a490ec6b59006d1fe1ec2ea30e69fb97c">GetSize</a>());</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDims = mappings.<a class="code" href="classarmnn_1_1_permutation_vector.xhtml#a490ec6b59006d1fe1ec2ea30e69fb97c">GetSize</a>();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outDims[<a class="code" href="namespacearmnn.xhtml#abdcd184ed3bd648bb31d385040cafd5d">armnn::MaxNumOfTensorDimensions</a>];</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0U; i &lt; numDims; ++i)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        outDims[mappings[i]] = srcShape[i];</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> permutedShape(numDims, outDims);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">return</span> permutedShape;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_permutation_vector_xhtml_a490ec6b59006d1fe1ec2ea30e69fb97c"><div class="ttname"><a href="classarmnn_1_1_permutation_vector.xhtml#a490ec6b59006d1fe1ec2ea30e69fb97c">armnn::PermutationVector::GetSize</a></div><div class="ttdeci">SizeType GetSize() const</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00325">Types.hpp:325</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdoc">Function that returns the tensor rank. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00174">Tensor.cpp:174</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abdcd184ed3bd648bb31d385040cafd5d"><div class="ttname"><a href="namespacearmnn.xhtml#abdcd184ed3bd648bb31d385040cafd5d">armnn::MaxNumOfTensorDimensions</a></div><div class="ttdeci">constexpr unsigned int MaxNumOfTensorDimensions</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00018">Types.hpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2ba6f6f40c7382b61b00ac02f961ba22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ba6f6f40c7382b61b00ac02f961ba22">&#9670;&nbsp;</a></span>Permuted() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> Permuted </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> &amp;&#160;</td>
          <td class="paramname"><em>mappings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_permute_8cpp_source.xhtml#l00115">115</a> of file <a class="el" href="_permute_8cpp_source.xhtml">Permute.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00496">TensorInfo::GetQuantizationDim()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_optional_8hpp_source.xhtml#l00053">OptionalBase::has_value()</a>, <a class="el" href="_permute_8cpp_source.xhtml#l00098">Permuted()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00501">TensorInfo::SetQuantizationDim()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00193">TensorInfo::SetShape()</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; IsReference, T &gt;::value()</a>.</p>
<div class="fragment"><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;{</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outInfo(info);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    outInfo.SetShape(<a class="code" href="namespacearmnn_utils.xhtml#abeaf4f6785039866fd075f4569ba8e84">Permuted</a>(info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>(), mappings));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// If TensorInfo has Per-Axis Quantization then it also has a QuantizationDim which needs to</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">// be permuted according to the mapping</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">if</span> (info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">GetQuantizationDim</a>().<a class="code" href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">has_value</a>())</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        outInfo.SetQuantizationDim(mappings[info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">GetQuantizationDim</a>().<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>()]);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">return</span> outInfo;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b8fc85ce966c035d789cf22db5088a1"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b8fc85ce966c035d789cf22db5088a1">armnn::TensorInfo::GetQuantizationDim</a></div><div class="ttdeci">Optional&lt; unsigned int &gt; GetQuantizationDim() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00496">Tensor.cpp:496</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_base_xhtml_a86b749ce2c4bc627fa8a1fcfaf0e314f"><div class="ttname"><a href="classarmnn_1_1_optional_base.xhtml#a86b749ce2c4bc627fa8a1fcfaf0e314f">armnn::OptionalBase::has_value</a></div><div class="ttdeci">bool has_value() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00053">Optional.hpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_abeaf4f6785039866fd075f4569ba8e84"><div class="ttname"><a href="namespacearmnn_utils.xhtml#abeaf4f6785039866fd075f4569ba8e84">armnnUtils::Permuted</a></div><div class="ttdeci">armnn::TensorShape Permuted(const armnn::TensorShape &amp;srcShape, const armnn::PermutationVector &amp;mappings)</div><div class="ttdef"><b>Definition:</b> <a href="_permute_8cpp_source.xhtml#l00098">Permute.cpp:98</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a523deabeb7d0a884028b35eebfd1cb6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a523deabeb7d0a884028b35eebfd1cb6c">&#9670;&nbsp;</a></span>ProcessConcatInputTensorInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ProcessConcatInputTensorInfo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">armnn::OriginsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>concatDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int &amp;&#160;</td>
          <td class="paramname"><em>concatAxis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>inputIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>mergeDimOrigin</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_helper_8cpp_source.xhtml#l00019">19</a> of file <a class="el" href="_parser_helper_8cpp_source.xhtml">ParserHelper.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00209">CHECK_LOCATION</a>, <a class="el" href="_descriptors_8cpp_source.xhtml#l00192">OriginsDescriptor::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, and <a class="el" href="_descriptors_8cpp_source.xhtml#l00167">OriginsDescriptor::SetViewOriginCoord()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_onnx_parser_8cpp_source.xhtml#l00797">OnnxParserImpl::CreateNetworkFromString()</a>, and <a class="el" href="_tf_lite_parser_8cpp_source.xhtml#l02575">TfLiteParserImpl::OutputShapeOfReshape()</a>.</p>
<div class="fragment"><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">const</span> uint32_t inputRank = concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">GetNumDimensions</a>();</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="comment">// double check dimensions of the tensors</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">if</span> (inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() != inputRank)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a>(fmt::format(</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                                    <span class="stringliteral">&quot;The number of dimensions: {0} for input tensors of the &quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                                    <span class="stringliteral">&quot;concatenation op should be {1} {2}&quot;</span>,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                                    inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(),</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                                    inputRank,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                                    <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    }</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; concatAxis; ++j)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a2b125117aa61f9baf3a9cb8658aa61a2">SetViewOriginCoord</a>(inputIndex, j, 0);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a2b125117aa61f9baf3a9cb8658aa61a2">SetViewOriginCoord</a>(inputIndex, concatAxis, mergeDimOrigin);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    mergeDimOrigin += inputTensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[concatAxis];</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = concatAxis + 1; j &lt; inputRank; ++j)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        concatDescriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a2b125117aa61f9baf3a9cb8658aa61a2">SetViewOriginCoord</a>(inputIndex, j, 0);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00209">Exceptions.hpp:209</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml_a78e8266be865fdd92cadd04d6e25ae1f"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">armnn::OriginsDescriptor::GetNumDimensions</a></div><div class="ttdeci">uint32_t GetNumDimensions() const</div><div class="ttdoc">Get the number of dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00192">Descriptors.cpp:192</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml_a2b125117aa61f9baf3a9cb8658aa61a2"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml#a2b125117aa61f9baf3a9cb8658aa61a2">armnn::OriginsDescriptor::SetViewOriginCoord</a></div><div class="ttdeci">Status SetViewOriginCoord(uint32_t view, uint32_t coord, uint32_t value)</div><div class="ttdoc">Set the view origin coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00167">Descriptors.cpp:167</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afb0aab92dc5b9bc5d7ebe2ea036f3809"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb0aab92dc5b9bc5d7ebe2ea036f3809">&#9670;&nbsp;</a></span>QuantizedVector() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;T&gt; armnnUtils::QuantizedVector </td>
          <td>(</td>
          <td class="paramtype">FloatIt&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FloatIt&#160;</td>
          <td class="paramname"><em>last</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_quantize_helper_8hpp_source.xhtml#l00105">105</a> of file <a class="el" href="_quantize_helper_8hpp_source.xhtml">QuantizeHelper.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    std::vector&lt;T&gt; quantized;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    quantized.reserve(armnn::numeric_cast&lt;size_t&gt;(std::distance(first, last)));</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = first; it != last; ++it)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keyword">auto</span> f = *it;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        T q = SelectiveQuantize&lt;T&gt;(f, qScale, qOffset);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        quantized.push_back(q);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> quantized;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad10541679f7d9740ba7a3c96b9843456"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad10541679f7d9740ba7a3c96b9843456">&#9670;&nbsp;</a></span>QuantizedVector() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;T&gt; armnnUtils::QuantizedVector </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; float &gt; &amp;&#160;</td>
          <td class="paramname"><em>array</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em> = <code>1.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_quantize_helper_8hpp_source.xhtml#l00121">121</a> of file <a class="el" href="_quantize_helper_8hpp_source.xhtml">QuantizeHelper.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;{</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">return</span> QuantizedVector&lt;T&gt;(array.begin(), array.end(), qScale, qOffset);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af29a7b903bf7ae9639ea29bc05ccb289"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af29a7b903bf7ae9639ea29bc05ccb289">&#9670;&nbsp;</a></span>QuantizedVector() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;T&gt; armnnUtils::QuantizedVector </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; float &gt;&#160;</td>
          <td class="paramname"><em>array</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>qScale</em> = <code>1.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>qOffset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_quantize_helper_8hpp_source.xhtml#l00127">127</a> of file <a class="el" href="_quantize_helper_8hpp_source.xhtml">QuantizeHelper.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;{</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">return</span> QuantizedVector&lt;T&gt;(array.begin(), array.end(), qScale, qOffset);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a5135dc1ce7a8aeb97623c1a92c5a3543"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5135dc1ce7a8aeb97623c1a92c5a3543">&#9670;&nbsp;</a></span>SelectiveDequantize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float armnnUtils::SelectiveDequantize </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_quantize_helper_8hpp_source.xhtml#l00091">91</a> of file <a class="el" href="_quantize_helper_8hpp_source.xhtml">QuantizeHelper.hpp</a>.</p>

<p class="reference">References <a class="el" href="_quantize_helper_8hpp_source.xhtml#l00030">SelectiveQuantizer&lt; T, DoQuantize &gt;::Dequantize()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00162">ApplyBias()</a>, and <a class="el" href="_conv3d_test_impl_8cpp_source.xhtml#l00056">ApplyBiasToData()</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">return</span> SelectiveQuantizer&lt;T, armnn::IsQuantizedType&lt;T&gt;()&gt;::<a class="code" href="namespacearmnn.xhtml#a855293b1be0581fb61ef6a1c5b027d0f">Dequantize</a>(value, scale, offset);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;};</div><div class="ttc" id="namespacearmnn_xhtml_a855293b1be0581fb61ef6a1c5b027d0f"><div class="ttname"><a href="namespacearmnn.xhtml#a855293b1be0581fb61ef6a1c5b027d0f">armnn::Dequantize</a></div><div class="ttdeci">float Dequantize(QuantizedType value, float scale, int32_t offset)</div><div class="ttdoc">Dequantize an 8-bit data type into a floating point data type. </div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8cpp_source.xhtml#l00046">TypesUtils.cpp:46</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a21b249bca87a5ad47359abd9ec7acada"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21b249bca87a5ad47359abd9ec7acada">&#9670;&nbsp;</a></span>SelectiveQuantize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T armnnUtils::SelectiveQuantize </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_quantize_helper_8hpp_source.xhtml#l00085">85</a> of file <a class="el" href="_quantize_helper_8hpp_source.xhtml">QuantizeHelper.hpp</a>.</p>

<p class="reference">References <a class="el" href="_quantize_helper_8hpp_source.xhtml#l00025">SelectiveQuantizer&lt; T, DoQuantize &gt;::Quantize()</a>.</p>
<div class="fragment"><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;{</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">return</span> SelectiveQuantizer&lt;T, armnn::IsQuantizedType&lt;T&gt;()&gt;::<a class="code" href="namespacearmnn.xhtml#ad773a034fb9983e15f3094b4c5c7c30c">Quantize</a>(value, scale, offset);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;};</div><div class="ttc" id="namespacearmnn_xhtml_ad773a034fb9983e15f3094b4c5c7c30c"><div class="ttname"><a href="namespacearmnn.xhtml#ad773a034fb9983e15f3094b4c5c7c30c">armnn::Quantize</a></div><div class="ttdeci">QuantizedType Quantize(float value, float scale, int32_t offset)</div><div class="ttdoc">Quantize a floating point data type into an 8-bit data type. </div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8cpp_source.xhtml#l00030">TypesUtils.cpp:30</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a158a68b143d2564fa1ca047646cf4185"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a158a68b143d2564fa1ca047646cf4185">&#9670;&nbsp;</a></span>SplitBy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; SplitBy </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>originalString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>delimiter</em> = <code>&quot;&#160;&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>includeEmptyToken</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Split a string into tokens by a delimiter. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">originalString</td><td>Original string to be split </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">delimiter</td><td>Delimiter used to split <code>originalString</code> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">includeEmptyToekn</td><td>If true, include empty tokens in the result </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A vector of tokens split from <code>originalString</code> by  </dd></dl>

<p class="definition">Definition at line <a class="el" href="_model_accuracy_checker_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="_model_accuracy_checker_8cpp_source.xhtml">ModelAccuracyChecker.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00492">LoadModelOutputLabels()</a>, and <a class="el" href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00049">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    std::vector&lt;std::string&gt; tokens;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordtype">size_t</span> cur  = 0;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordtype">size_t</span> next = 0;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">while</span> ((next = originalString.find(delimiter, cur)) != std::string::npos)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="comment">// Skip empty tokens, unless explicitly stated to include them.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">if</span> (next - cur &gt; 0 || includeEmptyToken)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            tokens.push_back(originalString.substr(cur, next - cur));</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        cur = next + delimiter.size();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="comment">// Get the remaining token</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="comment">// Skip empty tokens, unless explicitly stated to include them.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">if</span> (originalString.size() - cur &gt; 0 || includeEmptyToken)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        tokens.push_back(originalString.substr(cur, originalString.size() - cur));</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> tokens;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a14be0364a6fc0975d45e84737dfe21bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14be0364a6fc0975d45e84737dfe21bc">&#9670;&nbsp;</a></span>Strip()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string Strip </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>originalString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>characterSet</em> = <code>&quot;&#160;&quot;</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove any preceding and trailing character specified in the characterSet. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">originalString</td><td>Original string to be stripped </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">characterSet</td><td>Set of characters to be stripped from <code>originalString</code> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A string stripped of all characters specified in <code>characterSet</code> from <code>originalString</code> </dd></dl>

<p class="definition">Definition at line <a class="el" href="_model_accuracy_checker_8cpp_source.xhtml#l00064">64</a> of file <a class="el" href="_model_accuracy_checker_8cpp_source.xhtml">ModelAccuracyChecker.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>.</p>

<p class="reference">Referenced by <a class="el" href="_model_accuracy_tool-_armnn_8cpp_source.xhtml#l00492">LoadModelOutputLabels()</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(!characterSet.empty());</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> std::size_t firstFound = originalString.find_first_not_of(characterSet);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> std::size_t lastFound  = originalString.find_last_not_of(characterSet);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// Return empty if the originalString is empty or the originalString contains only to-be-striped characters</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">if</span> (firstFound == std::string::npos || lastFound == std::string::npos)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">return</span> originalString.substr(firstFound, lastFound + 1 - firstFound);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div><div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a405d5f966ec992d1717711e5a2d7909d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a405d5f966ec992d1717711e5a2d7909d">&#9670;&nbsp;</a></span>Transpose()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Transpose </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>dstShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> &amp;&#160;</td>
          <td class="paramname"><em>mappings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dataTypeSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="armnn_utils_2_transpose_8cpp_source.xhtml#l00120">120</a> of file <a class="el" href="armnn_utils_2_transpose_8cpp_source.xhtml">Transpose.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_test_name_and_descriptor_layer_visitor_8cpp_source.xhtml#l00274">TEST_SUITE()</a>, and <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00020">TransposeLayer::TransposeLayer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;{</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    TransposeLoop(srcShape, mappings).Unroll(src, dst, dataTypeSize);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a428a9a6ffdf0e8d723b50c038c56c336"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a428a9a6ffdf0e8d723b50c038c56c336">&#9670;&nbsp;</a></span>TransposeTensorShape() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> TransposeTensorShape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>srcShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> &amp;&#160;</td>
          <td class="paramname"><em>mappings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="armnn_utils_2_transpose_8cpp_source.xhtml#l00098">98</a> of file <a class="el" href="armnn_utils_2_transpose_8cpp_source.xhtml">Transpose.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00174">TensorShape::GetNumDimensions()</a>, <a class="el" href="_types_8hpp_source.xhtml#l00325">PermutationVector::GetSize()</a>, and <a class="el" href="_types_8hpp_source.xhtml#l00018">armnn::MaxNumOfTensorDimensions</a>.</p>

<p class="reference">Referenced by <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00038">TransposeLayer::InferOutputShapes()</a>, <a class="el" href="_move_transpose_up_8hpp_source.xhtml#l00023">MoveTransposeUpImpl::Run()</a>, and <a class="el" href="armnn_utils_2_transpose_8cpp_source.xhtml#l00113">TransposeTensorShape()</a>.</p>
<div class="fragment"><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    assert(srcShape.<a class="code" href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() == mappings.<a class="code" href="classarmnn_1_1_permutation_vector.xhtml#a490ec6b59006d1fe1ec2ea30e69fb97c">GetSize</a>());</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDims = mappings.<a class="code" href="classarmnn_1_1_permutation_vector.xhtml#a490ec6b59006d1fe1ec2ea30e69fb97c">GetSize</a>();</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outDims[<a class="code" href="namespacearmnn.xhtml#abdcd184ed3bd648bb31d385040cafd5d">armnn::MaxNumOfTensorDimensions</a>];</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0U; i &lt; numDims; ++i)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        outDims[i] = srcShape[mappings[i]];</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> permutedShape(numDims, outDims);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">return</span> permutedShape;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_permutation_vector_xhtml_a490ec6b59006d1fe1ec2ea30e69fb97c"><div class="ttname"><a href="classarmnn_1_1_permutation_vector.xhtml#a490ec6b59006d1fe1ec2ea30e69fb97c">armnn::PermutationVector::GetSize</a></div><div class="ttdeci">SizeType GetSize() const</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00325">Types.hpp:325</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorShape::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdoc">Function that returns the tensor rank. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00174">Tensor.cpp:174</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abdcd184ed3bd648bb31d385040cafd5d"><div class="ttname"><a href="namespacearmnn.xhtml#abdcd184ed3bd648bb31d385040cafd5d">armnn::MaxNumOfTensorDimensions</a></div><div class="ttdeci">constexpr unsigned int MaxNumOfTensorDimensions</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00018">Types.hpp:18</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a49e3aa80e05abc7b4643aad600e8d827"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49e3aa80e05abc7b4643aad600e8d827">&#9670;&nbsp;</a></span>TransposeTensorShape() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> TransposeTensorShape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> &amp;&#160;</td>
          <td class="paramname"><em>mappings</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="armnn_utils_2_transpose_8cpp_source.xhtml#l00113">113</a> of file <a class="el" href="armnn_utils_2_transpose_8cpp_source.xhtml">Transpose.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00193">TensorInfo::SetShape()</a>, and <a class="el" href="armnn_utils_2_transpose_8cpp_source.xhtml#l00098">TransposeTensorShape()</a>.</p>
<div class="fragment"><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;{</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outInfo(info);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    outInfo.SetShape(<a class="code" href="namespacearmnn_utils.xhtml#a428a9a6ffdf0e8d723b50c038c56c336">TransposeTensorShape</a>(info.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>(), mappings));</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> outInfo;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_a428a9a6ffdf0e8d723b50c038c56c336"><div class="ttname"><a href="namespacearmnn_utils.xhtml#a428a9a6ffdf0e8d723b50c038c56c336">armnnUtils::TransposeTensorShape</a></div><div class="ttdeci">armnn::TensorShape TransposeTensorShape(const armnn::TensorShape &amp;srcShape, const armnn::PermutationVector &amp;mappings)</div><div class="ttdef"><b>Definition:</b> <a href="armnn_utils_2_transpose_8cpp_source.xhtml#l00098">Transpose.cpp:98</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2e0aa273755368a1bf5fc65102df4a92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e0aa273755368a1bf5fc65102df4a92">&#9670;&nbsp;</a></span>VerifyInt32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int32_t VerifyInt32 </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>expr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_check_location.xhtml">armnn::CheckLocation</a> &amp;&#160;</td>
          <td class="paramname"><em>location</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_verification_helpers_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="_verification_helpers_8cpp_source.xhtml">VerificationHelpers.cpp</a>.</p>

<p class="reference">References <a class="el" href="_exceptions_8hpp_source.xhtml#l00029">CheckLocation::AsString()</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">if</span> (value &lt; std::numeric_limits&lt;int&gt;::min()  || value &gt; std::numeric_limits&lt;int&gt;::max())</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_parse_exception.xhtml">ParseException</a>(fmt::format(<span class="stringliteral">&quot;&#39;{}&#39; must should fit into a int32 (ArmNN don&#39;t support int64),&quot;</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                                         <span class="stringliteral">&quot; received: {} at {}&quot;</span>,</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                                         expr,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                         value,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                         location.<a class="code" href="structarmnn_1_1_check_location.xhtml#a5e3562cda960da001597e7dd5679b140">AsString</a>()));</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(value);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_check_location_xhtml_a5e3562cda960da001597e7dd5679b140"><div class="ttname"><a href="structarmnn_1_1_check_location.xhtml#a5e3562cda960da001597e7dd5679b140">armnn::CheckLocation::AsString</a></div><div class="ttdeci">std::string AsString() const</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00029">Exceptions.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_parse_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_parse_exception.xhtml">armnn::ParseException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00092">Exceptions.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a56b0e17341e000fa1d4561890294520c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56b0e17341e000fa1d4561890294520c">&#9670;&nbsp;</a></span>within_percentage_tolerance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool armnnUtils::within_percentage_tolerance </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>tolerancePercent</em> = <code>1.0f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compare two floats and return true if their values are within a specified tolerance of each other. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td></td></tr>
    <tr><td class="paramname">b</td><td></td></tr>
    <tr><td class="paramname">tolerancePercentage</td><td>If not supplied default will be 1% tolerance (1.0f) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the value of float b is within tolerancePercentage of the value for float a. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_floating_point_comparison_8hpp_source.xhtml#l00020">20</a> of file <a class="el" href="_floating_point_comparison_8hpp_source.xhtml">FloatingPointComparison.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="include_2armnn_test_utils_2_tensor_helpers_8hpp_source.xhtml#l00037">SelectiveComparer&lt; T, false &gt;::Compare()</a>, <a class="el" href="_yolo_inference_test_8hpp_source.xhtml#l00032">YoloTestCase&lt; Model &gt;::ProcessResult()</a>, and <a class="el" href="_floating_point_comparison_test_8cpp_source.xhtml#l00012">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keywordtype">float</span> toleranceValue = std::fabs(a * (tolerancePercent / 100));</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordflow">return</span> std::fabs(a - b) &lt;= toleranceValue;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a59cbccbfbae7633020d200f8c23fe69e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59cbccbfbae7633020d200f8c23fe69e">&#9670;&nbsp;</a></span>ArmNNToNHWC</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> ArmNNToNHWC = { 0, 3, 1, 2 }</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_helper_8cpp_source.xhtml#l00017">17</a> of file <a class="el" href="_parser_helper_8cpp_source.xhtml">ParserHelper.cpp</a>.</p>

</div>
</div>
<a id="a12124184ac6aec018beb98b9715330c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12124184ac6aec018beb98b9715330c7">&#9670;&nbsp;</a></span>NHWCToArmNN</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> NHWCToArmNN = { 0, 2, 3, 1 }</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_parser_helper_8cpp_source.xhtml#l00016">16</a> of file <a class="el" href="_parser_helper_8cpp_source.xhtml">ParserHelper.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_image_tensor_generator_8hpp_source.xhtml#l00091">PrepareImageTensor&lt; float &gt;()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn_utils.xhtml">armnnUtils</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:31 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
