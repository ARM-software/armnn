<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/reference/test/RefPerAxisIteratorTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_ref_per_axis_iterator_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">RefPerAxisIteratorTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="_decoders_8hpp_source.xhtml">reference/workloads/Decoders.hpp</a>&gt;</code><br />
<code>#include &lt;fmt/format.h&gt;</code><br />
<code>#include &lt;doctest/doctest.h&gt;</code><br />
<code>#include &lt;chrono&gt;</code><br />
</div>
<p><a href="_ref_per_axis_iterator_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aa2ddefcfe0af6d5a81a259a72f075a36"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa2ddefcfe0af6d5a81a259a72f075a36"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_ref_per_axis_iterator_tests_8cpp.xhtml#aa2ddefcfe0af6d5a81a259a72f075a36">CompareVector</a> (std::vector&lt; T &gt; vec1, std::vector&lt; T &gt; vec2)</td></tr>
<tr class="separator:aa2ddefcfe0af6d5a81a259a72f075a36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6f73f047b9a23b0941d08b9f26a3679"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_ref_per_axis_iterator_tests_8cpp.xhtml#ad6f73f047b9a23b0941d08b9f26a3679">TEST_SUITE</a> (&quot;RefPerAxisIterator&quot;)</td></tr>
<tr class="separator:ad6f73f047b9a23b0941d08b9f26a3679"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="aa2ddefcfe0af6d5a81a259a72f075a36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2ddefcfe0af6d5a81a259a72f075a36">&#9670;&nbsp;</a></span>CompareVector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CompareVector </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; T &gt;&#160;</td>
          <td class="paramname"><em>vec1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; T &gt;&#160;</td>
          <td class="paramname"><em>vec2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_per_axis_iterator_tests_8cpp_source.xhtml#l00015">15</a> of file <a class="el" href="_ref_per_axis_iterator_tests_8cpp_source.xhtml">RefPerAxisIteratorTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00181">TensorShape::GetNumElements()</a>, and <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ref_per_axis_iterator_tests_8cpp_source.xhtml#l00080">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;{</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    CHECK(vec1.size() == vec2.size());</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keywordtype">bool</span> mismatch = <span class="keyword">false</span>;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; vec1.size(); ++i)</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    {</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="keywordflow">if</span> (vec1[i] != vec2[i])</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;            MESSAGE(fmt::format(<span class="stringliteral">&quot;Vector value mismatch: index={}  {} != {}&quot;</span>,</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;                                i,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                                vec1[i],</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                                vec2[i]));</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            mismatch = <span class="keyword">true</span>;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        }</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    }</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">if</span> (mismatch)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        FAIL(<span class="stringliteral">&quot;Error in CompareVector. Vectors don&#39;t match.&quot;</span>);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    }</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad6f73f047b9a23b0941d08b9f26a3679"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6f73f047b9a23b0941d08b9f26a3679">&#9670;&nbsp;</a></span>TEST_SUITE()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">TEST_SUITE </td>
          <td>(</td>
          <td class="paramtype">&quot;RefPerAxisIterator&quot;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ref_per_axis_iterator_tests_8cpp_source.xhtml#l00080">80</a> of file <a class="el" href="_ref_per_axis_iterator_tests_8cpp_source.xhtml">RefPerAxisIteratorTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ref_per_axis_iterator_tests_8cpp_source.xhtml#l00015">CompareVector()</a>, and <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>.</p>
<div class="fragment"><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;{</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">// Test Loop (Equivalent to DecodeTensor) and Axis = 0</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PerAxisIteratorTest1&quot;</span>)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    std::vector&lt;int8_t&gt; input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> tensorInfo ({3,1,2,2},DataType::QSymmS8);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">// test axis=0</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    std::vector&lt;int8_t&gt; expOutput = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">auto</span> iterator = MockPerAxisIterator(input.data(), tensorInfo.GetShape(), 0);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    std::vector&lt;int8_t&gt; output = iterator.Loop();</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="_ref_per_axis_iterator_tests_8cpp.xhtml#aa2ddefcfe0af6d5a81a259a72f075a36">CompareVector</a>(output, expOutput);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="comment">// Set iterator to index and check if the axis index is correct</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    iterator[5];</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    CHECK(iterator.GetAxisIndex() == 1u);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    iterator[1];</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    CHECK(iterator.GetAxisIndex() == 0u);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    iterator[10];</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    CHECK(iterator.GetAxisIndex() == 2u);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">// Test Axis = 1</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PerAxisIteratorTest2&quot;</span>)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    std::vector&lt;int8_t&gt; input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> tensorInfo ({3,1,2,2},DataType::QSymmS8);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="comment">// test axis=1</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    std::vector&lt;int8_t&gt; expOutput = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">auto</span> iterator = MockPerAxisIterator(input.data(), tensorInfo.GetShape(), 1);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    std::vector&lt;int8_t&gt; output = iterator.Loop();</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <a class="code" href="_ref_per_axis_iterator_tests_8cpp.xhtml#aa2ddefcfe0af6d5a81a259a72f075a36">CompareVector</a>(output, expOutput);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">// Set iterator to index and check if the axis index is correct</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    iterator[5];</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    CHECK(iterator.GetAxisIndex() == 0u);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    iterator[1];</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    CHECK(iterator.GetAxisIndex() == 0u);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    iterator[10];</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    CHECK(iterator.GetAxisIndex() == 0u);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">// Test Axis = 2</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PerAxisIteratorTest3&quot;</span>)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;{</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    std::vector&lt;int8_t&gt; input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> tensorInfo ({3,1,2,2},DataType::QSymmS8);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="comment">// test axis=2</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    std::vector&lt;int8_t&gt; expOutput = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">auto</span> iterator = MockPerAxisIterator(input.data(), tensorInfo.GetShape(), 2);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    std::vector&lt;int8_t&gt; output = iterator.Loop();</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="_ref_per_axis_iterator_tests_8cpp.xhtml#aa2ddefcfe0af6d5a81a259a72f075a36">CompareVector</a>(output, expOutput);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// Set iterator to index and check if the axis index is correct</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    iterator[5];</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    CHECK(iterator.GetAxisIndex() == 0u);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    iterator[1];</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    CHECK(iterator.GetAxisIndex() == 0u);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    iterator[10];</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    CHECK(iterator.GetAxisIndex() == 1u);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;}</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">// Test Axis = 3</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PerAxisIteratorTest4&quot;</span>)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    std::vector&lt;int8_t&gt; input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> tensorInfo ({3,1,2,2},DataType::QSymmS8);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">// test axis=3</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    std::vector&lt;int8_t&gt; expOutput = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">auto</span> iterator = MockPerAxisIterator(input.data(), tensorInfo.GetShape(), 3);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    std::vector&lt;int8_t&gt; output = iterator.Loop();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="_ref_per_axis_iterator_tests_8cpp.xhtml#aa2ddefcfe0af6d5a81a259a72f075a36">CompareVector</a>(output, expOutput);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">// Set iterator to index and check if the axis index is correct</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    iterator[5];</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    CHECK(iterator.GetAxisIndex() == 1u);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    iterator[1];</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    CHECK(iterator.GetAxisIndex() == 1u);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    iterator[10];</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    CHECK(iterator.GetAxisIndex() == 0u);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">// Test Axis = 1. Different tensor shape</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PerAxisIteratorTest5&quot;</span>)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;{</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    std::vector&lt;int8_t&gt; input =</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;         0,  1,  2,  3,</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;         4,  5,  6,  7,</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;         8,  9, 10, 11,</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        12, 13, 14, 15</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    };</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    std::vector&lt;int8_t&gt; expOutput =</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;         0,  1,  2,  3,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;         4,  5,  6,  7,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;         8,  9, 10, 11,</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        12, 13, 14, 15</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    };</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> tensorInfo ({2,2,2,2},<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">DataType::QSymmS8</a>);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">auto</span> iterator = MockPerAxisIterator(input.data(), tensorInfo.GetShape(), 1);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    std::vector&lt;int8_t&gt; output = iterator.Loop();</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <a class="code" href="_ref_per_axis_iterator_tests_8cpp.xhtml#aa2ddefcfe0af6d5a81a259a72f075a36">CompareVector</a>(output, expOutput);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">// Set iterator to index and check if the axis index is correct</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    iterator[5];</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    CHECK(iterator.GetAxisIndex() == 1u);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    iterator[1];</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    CHECK(iterator.GetAxisIndex() == 0u);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    iterator[10];</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    CHECK(iterator.GetAxisIndex() == 0u);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">// Test the increment and decrement operator</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PerAxisIteratorTest7&quot;</span>)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;{</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    std::vector&lt;int8_t&gt; input =</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        0, 1,  2,  3,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        4, 5,  6,  7,</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        8, 9, 10, 11</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    };</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    std::vector&lt;int8_t&gt; expOutput =</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        0, 1,  2,  3,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        4, 5,  6,  7,</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        8, 9, 10, 11</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    };</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> tensorInfo ({3,1,2,2},<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">DataType::QSymmS8</a>);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">auto</span> iterator = MockPerAxisIterator(input.data(), tensorInfo.GetShape(), 2);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    iterator += 3;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    CHECK(iterator.Get() == expOutput[3]);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    CHECK(iterator.GetAxisIndex() == 1u);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    iterator += 3;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    CHECK(iterator.Get() == expOutput[6]);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    CHECK(iterator.GetAxisIndex() == 1u);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    iterator -= 2;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    CHECK(iterator.Get() == expOutput[4]);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    CHECK(iterator.GetAxisIndex() == 0u);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    iterator -= 1;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    CHECK(iterator.Get() == expOutput[3]);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    CHECK(iterator.GetAxisIndex() == 1u);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="_ref_per_axis_iterator_tests_8cpp_xhtml_aa2ddefcfe0af6d5a81a259a72f075a36"><div class="ttname"><a href="_ref_per_axis_iterator_tests_8cpp.xhtml#aa2ddefcfe0af6d5a81a259a72f075a36">CompareVector</a></div><div class="ttdeci">void CompareVector(std::vector&lt; T &gt; vec1, std::vector&lt; T &gt; vec2)</div><div class="ttdef"><b>Definition:</b> <a href="_ref_per_axis_iterator_tests_8cpp_source.xhtml#l00015">RefPerAxisIteratorTests.cpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::DataType::QSymmS8</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_efae4012d0e357ebeaba7d02491d70e5.xhtml">reference</a></li><li class="navelem"><a class="el" href="dir_820f114a135ae891c13c0cafd2ecf138.xhtml">test</a></li><li class="navelem"><a class="el" href="_ref_per_axis_iterator_tests_8cpp.xhtml">RefPerAxisIteratorTests.cpp</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:27:19 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
