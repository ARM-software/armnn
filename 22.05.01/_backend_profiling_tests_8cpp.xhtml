<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/BackendProfilingTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_backend_profiling_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">BackendProfilingTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_arm_n_n_profiling_service_initialiser_8hpp_source.xhtml">ArmNNProfilingServiceInitialiser.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_mock_backend_id_8hpp_source.xhtml">MockBackendId.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_profiling_options_converter_8hpp_source.xhtml">ProfilingOptionsConverter.hpp</a>&quot;</code><br />
<code>#include &lt;TestUtils.hpp&gt;</code><br />
<code>#include &lt;<a class="el" href="_backend_id_8hpp_source.xhtml">armnn/BackendId.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_logging_8hpp_source.xhtml">armnn/Logging.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_arm_n_n_profiling_8hpp_source.xhtml">armnn/profiling/ArmNNProfiling.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_ignore_unused_8hpp_source.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_mock_backend_8hpp_source.xhtml">armnnTestUtils/MockBackend.hpp</a>&gt;</code><br />
<code>#include &lt;client/include/CounterIdMap.hpp&gt;</code><br />
<code>#include &lt;client/include/Holder.hpp&gt;</code><br />
<code>#include &lt;client/include/ISendTimelinePacket.hpp&gt;</code><br />
<code>#include &lt;client/include/ProfilingOptions.hpp&gt;</code><br />
<code>#include &lt;client/src/PeriodicCounterCapture.hpp&gt;</code><br />
<code>#include &lt;client/src/PeriodicCounterSelectionCommandHandler.hpp&gt;</code><br />
<code>#include &lt;client/src/ProfilingStateMachine.hpp&gt;</code><br />
<code>#include &lt;client/src/ProfilingUtils.hpp&gt;</code><br />
<code>#include &lt;client/src/RequestCounterDirectoryCommandHandler.hpp&gt;</code><br />
<code>#include &lt;client/src/backends/BackendProfiling.hpp&gt;</code><br />
<code>#include &lt;common/include/CounterDirectory.hpp&gt;</code><br />
<code>#include &lt;common/include/PacketVersionResolver.hpp&gt;</code><br />
<code>#include &lt;doctest/doctest.h&gt;</code><br />
<code>#include &lt;vector&gt;</code><br />
<code>#include &lt;cstdint&gt;</code><br />
<code>#include &lt;limits&gt;</code><br />
</div>
<p><a href="_backend_profiling_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm.xhtml">arm</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm_1_1pipe"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm_1_1pipe.xhtml">arm::pipe</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a93c3362a6279636bea35fc700d8cfb6b"><td class="memItemLeft" align="right" valign="top">arm::pipe::Packet&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_backend_profiling_tests_8cpp.xhtml#a93c3362a6279636bea35fc700d8cfb6b">PacketWriter</a> (uint32_t period, std::vector&lt; uint16_t &gt; countervalues)</td></tr>
<tr class="separator:a93c3362a6279636bea35fc700d8cfb6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe7ce3329c681efe78431b02cd445d1e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_backend_profiling_tests_8cpp.xhtml#abe7ce3329c681efe78431b02cd445d1e">TEST_SUITE</a> (&quot;BackendProfilingTestSuite&quot;)</td></tr>
<tr class="separator:abe7ce3329c681efe78431b02cd445d1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a93c3362a6279636bea35fc700d8cfb6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93c3362a6279636bea35fc700d8cfb6b">&#9670;&nbsp;</a></span>PacketWriter()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">arm::pipe::Packet PacketWriter </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>period</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; uint16_t &gt;&#160;</td>
          <td class="paramname"><em>countervalues</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_backend_profiling_tests_8cpp_source.xhtml#l00137">137</a> of file <a class="el" href="_backend_profiling_tests_8cpp_source.xhtml">BackendProfilingTests.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_backend_profiling_tests_8cpp_source.xhtml#l00156">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">const</span> uint32_t packetId = 0x40000;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    uint32_t offset = 0;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    uint32_t dataLength = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(4 + countervalues.size() * 2);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::unique_ptr&lt;unsigned char[]&gt; uniqueData = std::make_unique&lt;unsigned char[]&gt;(dataLength);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* data1                        = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(uniqueData.get());</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    WriteUint32(data1, offset, period);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    offset += 4;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> countervalue : countervalues)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        WriteUint16(data1, offset, countervalue);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        offset += 2;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">return</span> {packetId, dataLength, uniqueData};</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abe7ce3329c681efe78431b02cd445d1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe7ce3329c681efe78431b02cd445d1e">&#9670;&nbsp;</a></span>TEST_SUITE()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">TEST_SUITE </td>
          <td>(</td>
          <td class="paramtype">&quot;BackendProfilingTestSuite&quot;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_backend_profiling_tests_8cpp_source.xhtml#l00156">156</a> of file <a class="el" href="_backend_profiling_tests_8cpp_source.xhtml">BackendProfilingTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_options_converter_8cpp_source.xhtml#l00017">arm::pipe::ConvertExternalProfilingOptions()</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::CpuAcc</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00049">IRuntime::Create()</a>, <a class="el" href="_mock_backend_8hpp_source.xhtml#l00140">MockBackendProfilingContext::GetBackendProfiling()</a>, <a class="el" href="_backend_id_8hpp_source.xhtml#l00034">armnn::GetComputeDeviceAsCString()</a>, <a class="el" href="_mock_backend_8hpp_source.xhtml#l00229">MockBackendProfilingService::GetContext()</a>, <a class="el" href="_test_utils_8cpp_source.xhtml#l00059">armnn::GetProfilingService()</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::GpuAcc</a>, <a class="el" href="_mock_backend_8hpp_source.xhtml#l00223">MockBackendProfilingService::Instance()</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00138">IRuntime::CreationOptions::ExternalProfilingOptions::m_EnableProfiling</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00153">IRuntime::CreationOptions::m_ProfilingOptions</a>, <a class="el" href="_mock_backend_id_8hpp_source.xhtml#l00011">armnn::MockBackendId()</a>, <a class="el" href="_backend_profiling_tests_8cpp_source.xhtml#l00137">PacketWriter()</a>, <a class="el" href="_logging_8cpp_source.xhtml#l00191">armnn::SetAllLoggingSinks()</a>, and <a class="el" href="_logging_8cpp_source.xhtml#l00073">armnn::SetLogFilter()</a>.</p>
<div class="fragment"><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;{</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;TEST_CASE(<span class="stringliteral">&quot;BackendProfilingCounterRegisterMockBackendTest&quot;</span>)</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    arm::pipe::LogLevelSwapper logLevelSwapper(arm::pipe::LogSeverity::Fatal);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="comment">// Reset the profiling service to the uninitialized state</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <a class="code" href="classarmnn_1_1_mock_backend_initialiser.xhtml">armnn::MockBackendInitialiser</a> initialiser;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// Create a runtime</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="structarmnn_1_1_runtime_impl.xhtml">armnn::RuntimeImpl</a> runtime(options);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shiftedId = 0;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_backend_registry.xhtml">armnn::BackendRegistry</a>().IsBackendRegistered(<span class="stringliteral">&quot;EthosNAcc&quot;</span>))</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        shiftedId = 4;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="comment">// Check if the MockBackends 3 dummy counters {0, 1, 2-5 (four cores)} are registered</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> mockId = <a class="code" href="namespacearmnn.xhtml#a17955517b0d148f7ffdbffe8b46e41e0">armnn::MockBackendId</a>();</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">const</span> ICounterMappings&amp; counterMap = <a class="code" href="namespacearmnn.xhtml#a292c96e5bbde0ca0242b1138bea6195d">GetProfilingService</a>(&amp;runtime).GetCounterMappings();</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    CHECK(counterMap.GetGlobalId(0, mockId) == 5 + shiftedId);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    CHECK(counterMap.GetGlobalId(1, mockId) == 6 + shiftedId);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    CHECK(counterMap.GetGlobalId(2, mockId) == 7 + shiftedId);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    CHECK(counterMap.GetGlobalId(3, mockId) == 8 + shiftedId);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    CHECK(counterMap.GetGlobalId(4, mockId) == 9 + shiftedId);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    CHECK(counterMap.GetGlobalId(5, mockId) == 10 + shiftedId);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a292c96e5bbde0ca0242b1138bea6195d">GetProfilingService</a>(&amp;runtime).ResetExternalProfilingOptions(</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <a class="code" href="namespacearm_1_1pipe.xhtml#aedd5bf7f3d6df99a1b42e7826c5b380b">ConvertExternalProfilingOptions</a>(options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>), <span class="keyword">true</span>);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;}</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;TEST_CASE(<span class="stringliteral">&quot;TestBackendCounters&quot;</span>)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    arm::pipe::LogLevelSwapper logLevelSwapper(arm::pipe::LogSeverity::Fatal);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    Holder holder;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    arm::pipe::PacketVersionResolver packetVersionResolver;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    ProfilingStateMachine stateMachine;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    ReadCounterVals readCounterVals;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    CounterIdMap counterIdMap;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    MockBackendSendCounterPacket sendCounterPacket;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">const</span> std::string cpuAccId(<a class="code" href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">GetComputeDeviceAsCString</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>));</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">const</span> std::string gpuAccId(<a class="code" href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">GetComputeDeviceAsCString</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::Compute::GpuAcc</a>));</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    ProfilingOptions options;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    options.m_EnableProfiling = <span class="keyword">true</span>;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <a class="code" href="classarmnn_1_1_arm_n_n_profiling_service_initialiser.xhtml">armnn::ArmNNProfilingServiceInitialiser</a> initialiser;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    std::unique_ptr&lt;IProfilingService&gt; profilingService = arm::pipe::IProfilingService::CreateProfilingService(</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        arm::pipe::MAX_ARMNN_COUNTER,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        initialiser,</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    std::unique_ptr&lt;IBackendProfiling&gt; cpuBackendProfilingPtr =</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        std::make_unique&lt;BackendProfiling&gt;(options, *profilingService.get(), cpuAccId);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    std::unique_ptr&lt;IBackendProfiling&gt; gpuBackendProfilingPtr =</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        std::make_unique&lt;BackendProfiling&gt;(options, *profilingService.get(), gpuAccId);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    std::shared_ptr&lt;IBackendProfilingContext&gt; cpuProfilingContextPtr =</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            std::make_shared&lt;armnn::MockBackendProfilingContext&gt;(cpuBackendProfilingPtr);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    std::shared_ptr&lt;IBackendProfilingContext&gt; gpuProfilingContextPtr =</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            std::make_shared&lt;armnn::MockBackendProfilingContext&gt;(gpuBackendProfilingPtr);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    std::unordered_map&lt;std::string,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            std::shared_ptr&lt;IBackendProfilingContext&gt;&gt; backendProfilingContexts;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    backendProfilingContexts[cpuAccId] = cpuProfilingContextPtr;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    backendProfilingContexts[gpuAccId] = gpuProfilingContextPtr;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    uint16_t globalId = 5;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    counterIdMap.RegisterMapping(globalId++, 0, cpuAccId);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    counterIdMap.RegisterMapping(globalId++, 1, cpuAccId);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    counterIdMap.RegisterMapping(globalId++, 2, cpuAccId);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    counterIdMap.RegisterMapping(globalId++, 0, gpuAccId);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    counterIdMap.RegisterMapping(globalId++, 1, gpuAccId);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    counterIdMap.RegisterMapping(globalId++, 2, gpuAccId);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    backendProfilingContexts[cpuAccId] = cpuProfilingContextPtr;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    backendProfilingContexts[gpuAccId] = gpuProfilingContextPtr;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    PeriodicCounterCapture periodicCounterCapture(holder, sendCounterPacket, readCounterVals,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                                  counterIdMap, backendProfilingContexts);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    uint16_t maxArmnnCounterId = 4;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    PeriodicCounterSelectionCommandHandler periodicCounterSelectionCommandHandler(0,</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                                  4,</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                                  packetVersionResolver.ResolvePacketVersion(0, 4).GetEncodedValue(),</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                                  backendProfilingContexts,</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                                  counterIdMap,</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                                  holder,</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                                  maxArmnnCounterId,</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                                  periodicCounterCapture,</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                                                  readCounterVals,</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                                                  sendCounterPacket,</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                                                  stateMachine);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    stateMachine.TransitionToState(ProfilingState::NotConnected);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    stateMachine.TransitionToState(ProfilingState::WaitingForAck);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    stateMachine.TransitionToState(ProfilingState::Active);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    uint32_t period = 12345u;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    std::vector&lt;uint16_t&gt; cpuCounters{5, 6, 7};</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    std::vector&lt;uint16_t&gt; gpuCounters{8, 9, 10};</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="comment">// Request only gpu counters</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    periodicCounterSelectionCommandHandler(<a class="code" href="_backend_profiling_tests_8cpp.xhtml#a93c3362a6279636bea35fc700d8cfb6b">PacketWriter</a>(period, gpuCounters));</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    periodicCounterCapture.Stop();</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    std::set&lt;std::string&gt; activeIds = holder.GetCaptureData().GetActiveBackends();</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    CHECK(activeIds.size() == 1);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    CHECK((activeIds.find(gpuAccId) != activeIds.end()));</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    std::vector&lt;Timestamp&gt; recievedTimestamp = sendCounterPacket.GetTimestamps();</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    CHECK(recievedTimestamp[0].timestamp == period);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    CHECK(recievedTimestamp.size() == 1);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    CHECK(recievedTimestamp[0].counterValues.size() == gpuCounters.size());</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> i=0; i&lt; gpuCounters.size(); ++i)</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    {</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        CHECK(recievedTimestamp[0].counterValues[i].counterId == gpuCounters[i]);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        CHECK(recievedTimestamp[0].counterValues[i].counterValue == i + 1u);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    }</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    sendCounterPacket.ClearTimestamps();</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="comment">// Request only cpu counters</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    periodicCounterSelectionCommandHandler(<a class="code" href="_backend_profiling_tests_8cpp.xhtml#a93c3362a6279636bea35fc700d8cfb6b">PacketWriter</a>(period, cpuCounters));</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    periodicCounterCapture.Stop();</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    activeIds = holder.GetCaptureData().GetActiveBackends();</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    CHECK(activeIds.size() == 1);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    CHECK((activeIds.find(cpuAccId) != activeIds.end()));</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    recievedTimestamp = sendCounterPacket.GetTimestamps();</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    CHECK(recievedTimestamp[0].timestamp == period);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    CHECK(recievedTimestamp.size() == 1);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    CHECK(recievedTimestamp[0].counterValues.size() == cpuCounters.size());</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> i=0; i&lt; cpuCounters.size(); ++i)</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    {</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        CHECK(recievedTimestamp[0].counterValues[i].counterId == cpuCounters[i]);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        CHECK(recievedTimestamp[0].counterValues[i].counterValue == i + 1u);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    }</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    sendCounterPacket.ClearTimestamps();</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="comment">// Request combination of cpu &amp; gpu counters with new period</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    period = 12222u;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    periodicCounterSelectionCommandHandler(<a class="code" href="_backend_profiling_tests_8cpp.xhtml#a93c3362a6279636bea35fc700d8cfb6b">PacketWriter</a>(period, {cpuCounters[0], gpuCounters[2],</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                                                                 gpuCounters[1], cpuCounters[1], gpuCounters[0]}));</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    periodicCounterCapture.Stop();</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    activeIds = holder.GetCaptureData().GetActiveBackends();</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    CHECK(activeIds.size() == 2);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    CHECK((activeIds.find(cpuAccId) != activeIds.end()));</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    CHECK((activeIds.find(gpuAccId) != activeIds.end()));</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    recievedTimestamp = sendCounterPacket.GetTimestamps();</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    CHECK(recievedTimestamp[0].timestamp == period);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    CHECK(recievedTimestamp[1].timestamp == period);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    CHECK(recievedTimestamp.size() == 2);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    CHECK(recievedTimestamp[0].counterValues.size() == 2);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    CHECK(recievedTimestamp[1].counterValues.size() == gpuCounters.size());</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    CHECK(recievedTimestamp[0].counterValues[0].counterId == cpuCounters[0]);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    CHECK(recievedTimestamp[0].counterValues[0].counterValue == 1u);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    CHECK(recievedTimestamp[0].counterValues[1].counterId == cpuCounters[1]);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    CHECK(recievedTimestamp[0].counterValues[1].counterValue == 2u);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> i=0; i&lt; gpuCounters.size(); ++i)</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    {</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        CHECK(recievedTimestamp[1].counterValues[i].counterId == gpuCounters[i]);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        CHECK(recievedTimestamp[1].counterValues[i].counterValue == i + 1u);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    sendCounterPacket.ClearTimestamps();</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="comment">// Request all counters</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    std::vector&lt;uint16_t&gt; counterValues;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    counterValues.insert(counterValues.begin(), cpuCounters.begin(), cpuCounters.end());</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    counterValues.insert(counterValues.begin(), gpuCounters.begin(), gpuCounters.end());</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    periodicCounterSelectionCommandHandler(<a class="code" href="_backend_profiling_tests_8cpp.xhtml#a93c3362a6279636bea35fc700d8cfb6b">PacketWriter</a>(period, counterValues));</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    periodicCounterCapture.Stop();</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    activeIds = holder.GetCaptureData().GetActiveBackends();</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    CHECK(activeIds.size() == 2);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    CHECK((activeIds.find(cpuAccId) != activeIds.end()));</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    CHECK((activeIds.find(gpuAccId) != activeIds.end()));</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    recievedTimestamp = sendCounterPacket.GetTimestamps();</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    CHECK(recievedTimestamp[0].counterValues.size() == cpuCounters.size());</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> i=0; i&lt; cpuCounters.size(); ++i)</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    {</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        CHECK(recievedTimestamp[0].counterValues[i].counterId == cpuCounters[i]);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        CHECK(recievedTimestamp[0].counterValues[i].counterValue == i + 1u);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    }</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    CHECK(recievedTimestamp[1].counterValues.size() == gpuCounters.size());</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> i=0; i&lt; gpuCounters.size(); ++i)</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    {</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        CHECK(recievedTimestamp[1].counterValues[i].counterId == gpuCounters[i]);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        CHECK(recievedTimestamp[1].counterValues[i].counterValue == i + 1u);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    }</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    sendCounterPacket.ClearTimestamps();</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="comment">// Request random counters with duplicates and invalid counters</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    counterValues = {0, 0, 200, cpuCounters[2], gpuCounters[0],3 ,30, cpuCounters[0],cpuCounters[2], gpuCounters[1], 3,</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                     90, 0, 30, gpuCounters[0], gpuCounters[0]};</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    periodicCounterSelectionCommandHandler(<a class="code" href="_backend_profiling_tests_8cpp.xhtml#a93c3362a6279636bea35fc700d8cfb6b">PacketWriter</a>(period, counterValues));</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    periodicCounterCapture.Stop();</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    activeIds = holder.GetCaptureData().GetActiveBackends();</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    CHECK(activeIds.size() == 2);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    CHECK((activeIds.find(cpuAccId) != activeIds.end()));</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    CHECK((activeIds.find(gpuAccId) != activeIds.end()));</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    recievedTimestamp = sendCounterPacket.GetTimestamps();</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    CHECK(recievedTimestamp.size() == 2);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    CHECK(recievedTimestamp[0].counterValues.size() == 2);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    CHECK(recievedTimestamp[0].counterValues[0].counterId == cpuCounters[0]);</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    CHECK(recievedTimestamp[0].counterValues[0].counterValue == 1u);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    CHECK(recievedTimestamp[0].counterValues[1].counterId == cpuCounters[2]);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    CHECK(recievedTimestamp[0].counterValues[1].counterValue == 3u);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    CHECK(recievedTimestamp[1].counterValues.size() == 2);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    CHECK(recievedTimestamp[1].counterValues[0].counterId == gpuCounters[0]);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    CHECK(recievedTimestamp[1].counterValues[0].counterValue == 1u);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    CHECK(recievedTimestamp[1].counterValues[1].counterId == gpuCounters[1]);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    CHECK(recievedTimestamp[1].counterValues[1].counterValue == 2u);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    sendCounterPacket.ClearTimestamps();</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="comment">// Request no counters</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    periodicCounterSelectionCommandHandler(<a class="code" href="_backend_profiling_tests_8cpp.xhtml#a93c3362a6279636bea35fc700d8cfb6b">PacketWriter</a>(period, {}));</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    periodicCounterCapture.Stop();</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    activeIds = holder.GetCaptureData().GetActiveBackends();</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    CHECK(activeIds.size() == 0);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    recievedTimestamp = sendCounterPacket.GetTimestamps();</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    CHECK(recievedTimestamp.size() == 0);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    sendCounterPacket.ClearTimestamps();</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="comment">// Request period of zero</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    periodicCounterSelectionCommandHandler(<a class="code" href="_backend_profiling_tests_8cpp.xhtml#a93c3362a6279636bea35fc700d8cfb6b">PacketWriter</a>(0, counterValues));</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    periodicCounterCapture.Stop();</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    activeIds = holder.GetCaptureData().GetActiveBackends();</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    CHECK(activeIds.size() == 0);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    recievedTimestamp = sendCounterPacket.GetTimestamps();</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    CHECK(recievedTimestamp.size() == 0);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;}</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;TEST_CASE(<span class="stringliteral">&quot;TestBackendCounterLogging&quot;</span>)</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;{</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keyword">struct </span><a class="code" href="structarm_1_1pipe_1_1_stream_redirector.xhtml">StreamRedirector</a></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    {</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        <a class="code" href="structarm_1_1pipe_1_1_stream_redirector.xhtml">StreamRedirector</a>(std::ostream &amp;stream, std::streambuf *newStreamBuffer)</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                : m_Stream(stream), m_BackupBuffer(m_Stream.rdbuf(newStreamBuffer))</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        {}</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        ~<a class="code" href="structarm_1_1pipe_1_1_stream_redirector.xhtml">StreamRedirector</a>()</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        { m_Stream.rdbuf(m_BackupBuffer); }</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        std::ostream &amp;m_Stream;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        std::streambuf *m_BackupBuffer;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    };</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    Holder holder;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    arm::pipe::PacketVersionResolver packetVersionResolver;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    ProfilingStateMachine stateMachine;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    ReadCounterVals readCounterVals;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <a class="code" href="structarm_1_1pipe_1_1_stream_redirector.xhtml">StreamRedirector</a> redirect(std::cout, ss.rdbuf());</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    CounterIdMap counterIdMap;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    MockBackendSendCounterPacket sendCounterPacket;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keyword">const</span> std::string cpuAccId(<a class="code" href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">GetComputeDeviceAsCString</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>));</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keyword">const</span> std::string gpuAccId(<a class="code" href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">GetComputeDeviceAsCString</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::Compute::GpuAcc</a>));</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    ProfilingOptions options;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    options.m_EnableProfiling = <span class="keyword">true</span>;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <a class="code" href="classarmnn_1_1_arm_n_n_profiling_service_initialiser.xhtml">armnn::ArmNNProfilingServiceInitialiser</a> initialiser;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    std::unique_ptr&lt;IProfilingService&gt; profilingService = arm::pipe::IProfilingService::CreateProfilingService(</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        arm::pipe::MAX_ARMNN_COUNTER,</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        initialiser,</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    std::unique_ptr&lt;IBackendProfiling&gt; cpuBackendProfilingPtr =</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        std::make_unique&lt;BackendProfiling&gt;(options, *profilingService.get(), cpuAccId);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    std::shared_ptr&lt;IBackendProfilingContext&gt; cpuProfilingContextPtr =</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            std::make_shared&lt;armnn::MockBackendProfilingContext&gt;(cpuBackendProfilingPtr);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    std::unordered_map&lt;std::string,</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            std::shared_ptr&lt;IBackendProfilingContext&gt;&gt; backendProfilingContexts;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    uint16_t globalId = 5;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    counterIdMap.RegisterMapping(globalId, 0, cpuAccId);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    backendProfilingContexts[cpuAccId] = cpuProfilingContextPtr;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    PeriodicCounterCapture periodicCounterCapture(holder, sendCounterPacket, readCounterVals,</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                                                  counterIdMap, backendProfilingContexts);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    uint16_t maxArmnnCounterId = 4;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    PeriodicCounterSelectionCommandHandler periodicCounterSelectionCommandHandler(0,</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                                                  4,</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                                                  packetVersionResolver.ResolvePacketVersion(0, 4).GetEncodedValue(),</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                                                  backendProfilingContexts,</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                                                  counterIdMap,</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                                                  holder,</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                                                  maxArmnnCounterId,</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                                                  periodicCounterCapture,</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                                                  readCounterVals,</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                                                  sendCounterPacket,</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                                                  stateMachine);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    stateMachine.TransitionToState(ProfilingState::NotConnected);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    stateMachine.TransitionToState(ProfilingState::WaitingForAck);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    stateMachine.TransitionToState(ProfilingState::Active);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    uint32_t period = 15939u;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a7f8325a4bc02f2f687ba1968b595ec0a">arm::pipe::SetAllLoggingSinks</a>(<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ac9aad76a34137b6359a867b282ea7cfb">arm::pipe::SetLogFilter</a>(arm::pipe::LogSeverity::Warning);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    periodicCounterSelectionCommandHandler(<a class="code" href="_backend_profiling_tests_8cpp.xhtml#a93c3362a6279636bea35fc700d8cfb6b">PacketWriter</a>(period, {5}));</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    periodicCounterCapture.Stop();</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ac9aad76a34137b6359a867b282ea7cfb">arm::pipe::SetLogFilter</a>(arm::pipe::LogSeverity::Fatal);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    CHECK(ss.str().find(<span class="stringliteral">&quot;ActivateCounters example test error&quot;</span>) != std::string::npos);</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;}</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;TEST_CASE(<span class="stringliteral">&quot;BackendProfilingContextGetSendTimelinePacket&quot;</span>)</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;{</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    arm::pipe::LogLevelSwapper logLevelSwapper(arm::pipe::LogSeverity::Fatal);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="comment">// Reset the profiling service to the uninitialized state</span></div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <a class="code" href="classarmnn_1_1_arm_n_n_profiling_service_initialiser.xhtml">armnn::ArmNNProfilingServiceInitialiser</a> psInitialiser;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    std::unique_ptr&lt;IProfilingService&gt; profilingService = arm::pipe::IProfilingService::CreateProfilingService(</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        arm::pipe::MAX_ARMNN_COUNTER,</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        psInitialiser,</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        arm::pipe::ARMNN_SOFTWARE_INFO,</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        arm::pipe::ARMNN_SOFTWARE_VERSION,</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        arm::pipe::ARMNN_HARDWARE_VERSION);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    profilingService-&gt;ConfigureProfilingService(</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        <a class="code" href="namespacearm_1_1pipe.xhtml#aedd5bf7f3d6df99a1b42e7826c5b380b">ConvertExternalProfilingOptions</a>(options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>), <span class="keyword">true</span>);</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <a class="code" href="classarmnn_1_1_mock_backend_initialiser.xhtml">armnn::MockBackendInitialiser</a> initialiser;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <span class="comment">// Create a runtime. During this the mock backend will be registered and context returned.</span></div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(options));</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <a class="code" href="classarmnn_1_1_mock_backend_profiling_service.xhtml">armnn::MockBackendProfilingService</a> mockProfilingService = <a class="code" href="classarmnn_1_1_mock_backend_profiling_service.xhtml#a15a5e913e48840d7b767a4453d83f361">armnn::MockBackendProfilingService::Instance</a>();</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <a class="code" href="classarmnn_1_1_mock_backend_profiling_context.xhtml">armnn::MockBackendProfilingContext</a>* mockBackEndProfilingContext = mockProfilingService.<a class="code" href="classarmnn_1_1_mock_backend_profiling_service.xhtml#ae0e8de63fb5fb93f646543e89a0e1386">GetContext</a>();</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="comment">// Check that there is a valid context set.</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    CHECK(mockBackEndProfilingContext);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a335964abd41c91f7e6ef5c65865a7b98">armnn::IBackendInternal::IBackendProfilingPtr</a>&amp; backendProfilingIface =</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        mockBackEndProfilingContext-&gt;<a class="code" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a5d24e91b1e41268d821891ced802b811">GetBackendProfiling</a>();</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    CHECK(backendProfilingIface);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="comment">// Now for the meat of the test. We&#39;re just going to send a random packet and make sure there</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="comment">// are no exceptions or errors. The sending of packets is already tested in SendTimelinePacketTests.</span></div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    std::unique_ptr&lt;ISendTimelinePacket&gt; timelinePacket =</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        backendProfilingIface-&gt;GetSendTimelinePacket();</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="comment">// Send TimelineEntityClassBinaryPacket</span></div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keyword">const</span> uint64_t entityBinaryPacketProfilingGuid = 123456u;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    timelinePacket-&gt;SendTimelineEntityBinaryPacket(entityBinaryPacketProfilingGuid);</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    timelinePacket-&gt;Commit();</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="comment">// Reset the profiling servie after the test.</span></div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    profilingService-&gt;ResetExternalProfilingOptions(</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        <a class="code" href="namespacearm_1_1pipe.xhtml#aedd5bf7f3d6df99a1b42e7826c5b380b">ConvertExternalProfilingOptions</a>(options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>), <span class="keyword">true</span>);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;}</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;TEST_CASE(<span class="stringliteral">&quot;GetProfilingGuidGenerator&quot;</span>)</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;{</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    arm::pipe::LogLevelSwapper logLevelSwapper(arm::pipe::LogSeverity::Fatal);</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="comment">// Reset the profiling service to the uninitialized state</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <a class="code" href="classarmnn_1_1_mock_backend_initialiser.xhtml">armnn::MockBackendInitialiser</a> initialiser;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="comment">// Create a runtime. During this the mock backend will be registered and context returned.</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(options));</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <a class="code" href="classarmnn_1_1_mock_backend_profiling_service.xhtml">armnn::MockBackendProfilingService</a> mockProfilingService = <a class="code" href="classarmnn_1_1_mock_backend_profiling_service.xhtml#a15a5e913e48840d7b767a4453d83f361">armnn::MockBackendProfilingService::Instance</a>();</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <a class="code" href="classarmnn_1_1_mock_backend_profiling_context.xhtml">armnn::MockBackendProfilingContext</a> *mockBackEndProfilingContext = mockProfilingService.<a class="code" href="classarmnn_1_1_mock_backend_profiling_service.xhtml#ae0e8de63fb5fb93f646543e89a0e1386">GetContext</a>();</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="comment">// Check that there is a valid context set.</span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    CHECK(mockBackEndProfilingContext);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a335964abd41c91f7e6ef5c65865a7b98">armnn::IBackendInternal::IBackendProfilingPtr</a>&amp; backendProfilingIface =</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        mockBackEndProfilingContext-&gt;<a class="code" href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a5d24e91b1e41268d821891ced802b811">GetBackendProfiling</a>();</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    CHECK(backendProfilingIface);</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="comment">// Get the Guid generator and check the getting two Guid&#39;s results in the second being greater than the first.</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    IProfilingGuidGenerator&amp; guidGenerator = backendProfilingIface-&gt;GetProfilingGuidGenerator();</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keyword">const</span> ProfilingDynamicGuid&amp; firstGuid = guidGenerator.NextGuid();</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="keyword">const</span> ProfilingDynamicGuid&amp; secondGuid = guidGenerator.NextGuid();</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    CHECK(secondGuid &gt; firstGuid);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="comment">// Reset the profiling servie after the test.</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">m_ProfilingOptions</a>.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;}</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00049">Runtime.cpp:49</a></div></div>
<div class="ttc" id="structarm_1_1pipe_1_1_stream_redirector_xhtml"><div class="ttname"><a href="structarm_1_1pipe_1_1_stream_redirector.xhtml">arm::pipe::StreamRedirector</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_test_utils_8hpp_source.xhtml#l00115">ProfilingTestUtils.hpp:115</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7f8325a4bc02f2f687ba1968b595ec0a"><div class="ttname"><a href="namespacearmnn.xhtml#a7f8325a4bc02f2f687ba1968b595ec0a">armnn::SetAllLoggingSinks</a></div><div class="ttdeci">void SetAllLoggingSinks(bool standardOut, bool debugOut, bool coloured)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8cpp_source.xhtml#l00191">Logging.cpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_service_xhtml"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_service.xhtml">armnn::MockBackendProfilingService</a></div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_8hpp_source.xhtml#l00219">MockBackend.hpp:219</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00033">IRuntime.hpp:33</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a17955517b0d148f7ffdbffe8b46e41e0"><div class="ttname"><a href="namespacearmnn.xhtml#a17955517b0d148f7ffdbffe8b46e41e0">armnn::MockBackendId</a></div><div class="ttdeci">constexpr const char * MockBackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_id_8hpp_source.xhtml#l00011">MockBackendId.hpp:11</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml">armnn::BackendRegistry</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00035">BackendRegistry.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_context_xhtml"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_context.xhtml">armnn::MockBackendProfilingContext</a></div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_8hpp_source.xhtml#l00129">MockBackend.hpp:129</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options_xhtml_a26d42007440bb01a1a6d0ab3b5a657ee"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options_1_1_external_profiling_options.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">armnn::IRuntime::CreationOptions::ExternalProfilingOptions::m_EnableProfiling</a></div><div class="ttdeci">bool m_EnableProfiling</div><div class="ttdoc">Indicates whether external profiling is enabled or not. </div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00138">IRuntime.hpp:138</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_initialiser_xhtml"><div class="ttname"><a href="classarmnn_1_1_mock_backend_initialiser.xhtml">armnn::MockBackendInitialiser</a></div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_8hpp_source.xhtml#l00122">MockBackend.hpp:122</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac9aad76a34137b6359a867b282ea7cfb"><div class="ttname"><a href="namespacearmnn.xhtml#ac9aad76a34137b6359a867b282ea7cfb">armnn::SetLogFilter</a></div><div class="ttdeci">void SetLogFilter(LogSeverity level)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8cpp_source.xhtml#l00073">Logging.cpp:73</a></div></div>
<div class="ttc" id="namespacearm_1_1pipe_xhtml_aedd5bf7f3d6df99a1b42e7826c5b380b"><div class="ttname"><a href="namespacearm_1_1pipe.xhtml#aedd5bf7f3d6df99a1b42e7826c5b380b">arm::pipe::ConvertExternalProfilingOptions</a></div><div class="ttdeci">ProfilingOptions ConvertExternalProfilingOptions(const armnn::IRuntime::CreationOptions::ExternalProfilingOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_options_converter_8cpp_source.xhtml#l00017">ProfilingOptionsConverter.cpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a6bab17bfd45c2fa4592c431bc25ad10e"><div class="ttname"><a href="namespacearmnn.xhtml#a6bab17bfd45c2fa4592c431bc25ad10e">armnn::GetComputeDeviceAsCString</a></div><div class="ttdeci">constexpr char const  * GetComputeDeviceAsCString(Compute compute)</div><div class="ttdoc">Deprecated function that will be removed together with the Compute enum. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00034">BackendId.hpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeafaa4524e3df19ada32643ce9a222362b">armnn::Compute::GpuAcc</a></div><div class="ttdoc">GPU Execution: OpenCL: ArmCompute. </div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_service_xhtml_a15a5e913e48840d7b767a4453d83f361"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_service.xhtml#a15a5e913e48840d7b767a4453d83f361">armnn::MockBackendProfilingService::Instance</a></div><div class="ttdeci">static MockBackendProfilingService &amp; Instance()</div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_8hpp_source.xhtml#l00223">MockBackend.hpp:223</a></div></div>
<div class="ttc" id="structarmnn_1_1_runtime_impl_xhtml"><div class="ttname"><a href="structarmnn_1_1_runtime_impl.xhtml">armnn::RuntimeImpl</a></div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8hpp_source.xhtml#l00030">Runtime.hpp:30</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00077">IRuntime.hpp:77</a></div></div>
<div class="ttc" id="_backend_profiling_tests_8cpp_xhtml_a93c3362a6279636bea35fc700d8cfb6b"><div class="ttname"><a href="_backend_profiling_tests_8cpp.xhtml#a93c3362a6279636bea35fc700d8cfb6b">PacketWriter</a></div><div class="ttdeci">arm::pipe::Packet PacketWriter(uint32_t period, std::vector&lt; uint16_t &gt; countervalues)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_profiling_tests_8cpp_source.xhtml#l00137">BackendProfilingTests.cpp:137</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_service_xhtml_ae0e8de63fb5fb93f646543e89a0e1386"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_service.xhtml#ae0e8de63fb5fb93f646543e89a0e1386">armnn::MockBackendProfilingService::GetContext</a></div><div class="ttdeci">MockBackendProfilingContext * GetContext()</div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_8hpp_source.xhtml#l00229">MockBackend.hpp:229</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a335964abd41c91f7e6ef5c65865a7b98"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a335964abd41c91f7e6ef5c65865a7b98">armnn::IBackendInternal::IBackendProfilingPtr</a></div><div class="ttdeci">std::unique_ptr&lt; arm::pipe::IBackendProfiling &gt; IBackendProfilingPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00091">IBackendInternal.hpp:91</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a></div><div class="ttdoc">CPU Execution: NEON: ArmCompute. </div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_context_xhtml_a5d24e91b1e41268d821891ced802b811"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_context.xhtml#a5d24e91b1e41268d821891ced802b811">armnn::MockBackendProfilingContext::GetBackendProfiling</a></div><div class="ttdeci">IBackendInternal::IBackendProfilingPtr &amp; GetBackendProfiling()</div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_8hpp_source.xhtml#l00140">MockBackend.hpp:140</a></div></div>
<div class="ttc" id="classarmnn_1_1_arm_n_n_profiling_service_initialiser_xhtml"><div class="ttname"><a href="classarmnn_1_1_arm_n_n_profiling_service_initialiser.xhtml">armnn::ArmNNProfilingServiceInitialiser</a></div><div class="ttdef"><b>Definition:</b> <a href="_arm_n_n_profiling_service_initialiser_8hpp_source.xhtml#l00014">ArmNNProfilingServiceInitialiser.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml_a30412a91cadff138686eaeb12f5357cc"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a30412a91cadff138686eaeb12f5357cc">armnn::IRuntime::CreationOptions::m_ProfilingOptions</a></div><div class="ttdeci">ExternalProfilingOptions m_ProfilingOptions</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00153">IRuntime.hpp:153</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a292c96e5bbde0ca0242b1138bea6195d"><div class="ttname"><a href="namespacearmnn.xhtml#a292c96e5bbde0ca0242b1138bea6195d">armnn::GetProfilingService</a></div><div class="ttdeci">arm::pipe::IProfilingService &amp; GetProfilingService(armnn::RuntimeImpl *runtime)</div><div class="ttdef"><b>Definition:</b> <a href="_test_utils_8cpp_source.xhtml#l00059">TestUtils.cpp:59</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="_backend_profiling_tests_8cpp.xhtml">BackendProfilingTests.cpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:25 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
