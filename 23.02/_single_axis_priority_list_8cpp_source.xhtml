<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/memoryOptimizerStrategyLibrary/strategies/SingleAxisPriorityList.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_single_axis_priority_list_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">SingleAxisPriorityList.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_single_axis_priority_list_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2021 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_single_axis_priority_list_8hpp.xhtml">SingleAxisPriorityList.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">// This strategy uses a vector of size_ts/words to represent occupancy of a memBlock in a memBin.</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">// Where each bit represents occupancy of a single time-step in that lifetime.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">// We can then use bit masks to check for overlaps of memBlocks along the lifetime</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">// For more information on the algorithm itself see: https://arxiv.org/pdf/2001.03288.pdf</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">// This strategy is an implementation of 4.3 Greedy by Size</span></div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#aa2b4a5cd5b7f1555cba80a6072824024">   22</a></span>&#160;constexpr <span class="keywordtype">size_t</span> <a class="code" href="namespacearmnn.xhtml#aa2b4a5cd5b7f1555cba80a6072824024">wordSize</a> = <span class="keyword">sizeof</span>(size_t) * 8;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="classarmnn_1_1_single_axis_priority_list.xhtml#a84ae72d221e80b93c2246b44a50fa361">   24</a></span>&#160;std::string <a class="code" href="classarmnn_1_1_single_axis_priority_list.xhtml#a84ae72d221e80b93c2246b44a50fa361">SingleAxisPriorityList::GetName</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">return</span> m_Name;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;}</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="classarmnn_1_1_single_axis_priority_list.xhtml#acd35ef4810ce3b938f5454bdee0cb826">   28</a></span>&#160;<a class="code" href="namespacearmnn.xhtml#a7100de49939c3e393101f78d425a98c6">MemBlockStrategyType</a> <a class="code" href="classarmnn_1_1_single_axis_priority_list.xhtml#acd35ef4810ce3b938f5454bdee0cb826">SingleAxisPriorityList::GetMemBlockStrategyType</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordflow">return</span> m_MemBlockStrategyType;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;}</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">struct </span>SingleAxisPriorityList::BinTracker</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="comment">// maxLifeTime is the number of operators in the model</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="comment">// We then divide that by wordSize to get the number of words we need to store all the lifetimes</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    BinTracker(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxLifeTime)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            : m_OccupiedSpaces(1 + maxLifeTime/wordSize, 0)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {}</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="comment">// Add a block of a single word size to the bin</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordtype">void</span> AddBlock(<a class="code" href="structarmnn_1_1_mem_block.xhtml">MemBlock</a>* block, <span class="keyword">const</span> <span class="keywordtype">size_t</span> word, <span class="keyword">const</span> <span class="keywordtype">size_t</span> index)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        m_OccupiedSpaces[index] = m_OccupiedSpaces[index] | word;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        m_PlacedBlocks.push_back(block);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        m_MemSize = std::max(m_MemSize, block-&gt;<a class="code" href="structarmnn_1_1_mem_block.xhtml#ac972eed0c811e23b9e1060cee4ac5a53">m_MemSize</a>);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// Add a block with a word size of two or more to the bin</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordtype">void</span> AddBlock(<a class="code" href="structarmnn_1_1_mem_block.xhtml">MemBlock</a>* block,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                  <span class="keyword">const</span> <span class="keywordtype">size_t</span> startIndex,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                  <span class="keyword">const</span> <span class="keywordtype">size_t</span> endIndex,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                  <span class="keyword">const</span> <span class="keywordtype">size_t</span> firstWord,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                  <span class="keyword">const</span> <span class="keywordtype">size_t</span> lastWord)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        m_OccupiedSpaces[startIndex] = m_OccupiedSpaces[startIndex] | firstWord;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        m_OccupiedSpaces[endIndex] = m_OccupiedSpaces[endIndex] | lastWord;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = startIndex +1; i &lt;= endIndex -1; ++i)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            m_OccupiedSpaces[i] = std::numeric_limits&lt;size_t&gt;::max();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        m_PlacedBlocks.push_back(block);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        m_MemSize = std::max(m_MemSize, block-&gt;<a class="code" href="structarmnn_1_1_mem_block.xhtml#ac972eed0c811e23b9e1060cee4ac5a53">m_MemSize</a>);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordtype">size_t</span> m_MemSize = 0;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    std::vector&lt;size_t&gt; m_OccupiedSpaces;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    std::vector&lt;MemBlock*&gt; m_PlacedBlocks;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;};</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keywordtype">void</span> SingleAxisPriorityList::PlaceBlocks(<span class="keyword">const</span> std::list&lt;MemBlock*&gt;&amp; priorityList,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                         std::vector&lt;BinTracker&gt;&amp; placedBlocks,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxLifetime)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// This function is used when the given block start and end lifetimes fit within a single word.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">auto</span> singleWordLoop = [&amp;](<a class="code" href="structarmnn_1_1_mem_block.xhtml">MemBlock</a>* curBlock, <span class="keyword">const</span> <span class="keywordtype">size_t</span> firstWord, <span class="keyword">const</span> <span class="keywordtype">size_t</span> index)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordtype">bool</span> placed = <span class="keyword">false</span>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="comment">// loop through all existing bins</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; blockList : placedBlocks)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="comment">// Check if the lifetimes at the given index overlap with the lifetimes of the block</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keywordflow">if</span> ((blockList.m_OccupiedSpaces[index] &amp; firstWord) == 0)</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="comment">// If the binary AND is 0 there is no overlap between the words and the block will fit</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                blockList.AddBlock(curBlock, firstWord, index);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                placed = <span class="keyword">true</span>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="comment">// No suitable bin was found, create a new bin/BinTracker and add it to the placedBlocks vector</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">if</span> (!placed)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            placedBlocks.emplace_back(BinTracker{maxLifetime});</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            placedBlocks.back().AddBlock(curBlock, firstWord, index);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    };</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">// This function is used when the given block start and end lifetimes fit within two words.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">auto</span> doubleWordLoop =[&amp;](<a class="code" href="structarmnn_1_1_mem_block.xhtml">MemBlock</a>* curBlock,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                             <span class="keyword">const</span> <span class="keywordtype">size_t</span> firstWord,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                             <span class="keyword">const</span> <span class="keywordtype">size_t</span> firstIndex,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                             <span class="keyword">const</span> <span class="keywordtype">size_t</span> lastWord,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                             <span class="keyword">const</span> <span class="keywordtype">size_t</span> lastIndex)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordtype">bool</span> placed = <span class="keyword">false</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; blockList : placedBlocks)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="comment">// Check if the lifetimes at the given indexes overlap with the lifetimes of the block</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">if</span> ((blockList.m_OccupiedSpaces[firstIndex] &amp; firstWord) == 0 &amp;&amp;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                (blockList.m_OccupiedSpaces[lastIndex] &amp; lastWord) == 0)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                blockList.AddBlock(curBlock, firstIndex, lastIndex, firstWord, lastWord);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                placed = <span class="keyword">true</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="comment">// No suitable bin was found, create a new bin/BinTracker and add it to the placedBlocks vector</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">if</span> (!placed)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            placedBlocks.emplace_back(BinTracker{maxLifetime});</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            placedBlocks.back().AddBlock(curBlock, firstIndex, lastIndex, firstWord, lastWord);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    };</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// Loop through the blocks to place</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> curBlock : priorityList)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="comment">// The lifetimes of both the block and bin are represented by single bits on a word/s</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="comment">// Each bin has maxLifetime/wordSize words</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="comment">// The number of words for a block depends on the size of the blocks lifetime</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="comment">// and the alignment of the block&#39;s lifetimes</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="comment">// This allows for checking sizeof(size_t) * 8 lifetimes at once with a binary AND</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> firstWordIndex = curBlock-&gt;<a class="code" href="structarmnn_1_1_mem_block.xhtml#a709b862a06a33e0f77e0d5cfb95daaf3">m_StartOfLife</a>/<a class="code" href="namespacearmnn.xhtml#aa2b4a5cd5b7f1555cba80a6072824024">wordSize</a>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> lastWordIndex = curBlock-&gt;<a class="code" href="structarmnn_1_1_mem_block.xhtml#afb654a0f03aca4f7f73a9008fab83b11">m_EndOfLife</a>/<a class="code" href="namespacearmnn.xhtml#aa2b4a5cd5b7f1555cba80a6072824024">wordSize</a>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="comment">// Align and right shift the first word</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="comment">// This sets the bits before curBlock-&gt;m_StartOfLife to 0</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordtype">size_t</span> remainder = (curBlock-&gt;<a class="code" href="structarmnn_1_1_mem_block.xhtml#a709b862a06a33e0f77e0d5cfb95daaf3">m_StartOfLife</a> - firstWordIndex * <a class="code" href="namespacearmnn.xhtml#aa2b4a5cd5b7f1555cba80a6072824024">wordSize</a>);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordtype">size_t</span> firstWord = std::numeric_limits&lt;size_t&gt;::max() &gt;&gt; remainder;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="comment">// If the indexes match the block can fit into a single word</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">if</span>(firstWordIndex == lastWordIndex)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="comment">// We then need to zero the bits to the right of curBlock-&gt;m_EndOfLife</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            remainder += curBlock-&gt;<a class="code" href="structarmnn_1_1_mem_block.xhtml#afb654a0f03aca4f7f73a9008fab83b11">m_EndOfLife</a> + 1 - curBlock-&gt;<a class="code" href="structarmnn_1_1_mem_block.xhtml#a709b862a06a33e0f77e0d5cfb95daaf3">m_StartOfLife</a>;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            firstWord = firstWord &gt;&gt; (wordSize - remainder);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            firstWord = firstWord &lt;&lt; (wordSize - remainder);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            singleWordLoop(curBlock, firstWord, firstWordIndex);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="comment">// The indexes don&#39;t match we need at least two words</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="comment">// Zero the bits to the right of curBlock-&gt;m_EndOfLife</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        remainder = (curBlock-&gt;<a class="code" href="structarmnn_1_1_mem_block.xhtml#afb654a0f03aca4f7f73a9008fab83b11">m_EndOfLife</a> + 1 - lastWordIndex * <a class="code" href="namespacearmnn.xhtml#aa2b4a5cd5b7f1555cba80a6072824024">wordSize</a>);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordtype">size_t</span> lastWord = std::numeric_limits&lt;size_t&gt;::max() &lt;&lt; (wordSize - remainder);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">if</span>(firstWordIndex + 1 == lastWordIndex)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            doubleWordLoop(curBlock, firstWord, firstWordIndex, lastWord, lastWordIndex);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="comment">// The block cannot fit into two words</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="comment">// We don&#39;t need to create any more words to represent this,</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="comment">// as any word between the first and last block would always equal the maximum value of size_t,</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="comment">// all the lifetimes would be occupied</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="comment">// Instead, we just check that the corresponding word in the bin is completely empty</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordtype">bool</span> placed = <span class="keyword">false</span>;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; blockList : placedBlocks)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="comment">// Check the first and last word</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keywordflow">if</span> ((blockList.m_OccupiedSpaces[firstWordIndex] &amp; firstWord) != 0 ||</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                (blockList.m_OccupiedSpaces[lastWordIndex] &amp; lastWord) != 0)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordtype">bool</span> fits = <span class="keyword">true</span>;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="comment">// Check that all spaces in between are clear</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = firstWordIndex +1; i &lt;= lastWordIndex -1; ++i)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keywordflow">if</span> (blockList.m_OccupiedSpaces[i] != 0)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    fits = <span class="keyword">false</span>;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keywordflow">if</span> (!fits)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            blockList.AddBlock(curBlock, firstWordIndex, lastWordIndex, firstWord, lastWord);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            placed = <span class="keyword">true</span>;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="comment">// No suitable bin was found, create a new bin/BinTracker and add it to the placedBlocks vector</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">if</span> (!placed)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            placedBlocks.emplace_back(BinTracker{maxLifetime});</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            placedBlocks.back().AddBlock(curBlock, firstWordIndex, lastWordIndex, firstWord, lastWord);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="classarmnn_1_1_single_axis_priority_list.xhtml#ada820fb9d89d2fb75bacaffe511791b7">  214</a></span>&#160;std::vector&lt;MemBin&gt; <a class="code" href="classarmnn_1_1_single_axis_priority_list.xhtml#ada820fb9d89d2fb75bacaffe511791b7">SingleAxisPriorityList::Optimize</a>(std::vector&lt;MemBlock&gt;&amp; blocks)</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxLifetime = 0;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    std::list&lt;MemBlock*&gt; priorityList;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; block: blocks)</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        maxLifetime = std::max(maxLifetime, block.m_EndOfLife);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        priorityList.emplace_back(&amp;block);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    maxLifetime++;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="comment">// From testing ordering by m_MemSize in non-descending order gives the best results overall</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    priorityList.sort([](<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_block.xhtml">MemBlock</a>* lhs, <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_block.xhtml">MemBlock</a>* rhs)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                      {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                          <span class="keywordflow">return</span>  lhs-&gt;<a class="code" href="structarmnn_1_1_mem_block.xhtml#ac972eed0c811e23b9e1060cee4ac5a53">m_MemSize</a> &gt; rhs-&gt;<a class="code" href="structarmnn_1_1_mem_block.xhtml#ac972eed0c811e23b9e1060cee4ac5a53">m_MemSize</a> ;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                      });</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    std::vector&lt;BinTracker&gt; placedBlocks;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    placedBlocks.reserve(maxLifetime);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    PlaceBlocks(priorityList, placedBlocks, maxLifetime);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    std::vector&lt;MemBin&gt; bins;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    bins.reserve(placedBlocks.size());</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> blockList: placedBlocks)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <a class="code" href="structarmnn_1_1_mem_bin.xhtml">MemBin</a> bin;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        bin.<a class="code" href="structarmnn_1_1_mem_bin.xhtml#aeb1783f0f3f528e11f9ce70f0214f8bb">m_MemBlocks</a>.reserve(blockList.m_PlacedBlocks.size());</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        bin.<a class="code" href="structarmnn_1_1_mem_bin.xhtml#a08e50de8fcc7560644bdabc7356bb270">m_MemSize</a> = blockList.m_MemSize;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> block : blockList.m_PlacedBlocks)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            bin.<a class="code" href="structarmnn_1_1_mem_bin.xhtml#aeb1783f0f3f528e11f9ce70f0214f8bb">m_MemBlocks</a>.emplace_back(<a class="code" href="structarmnn_1_1_mem_block.xhtml">MemBlock</a>{block-&gt;<a class="code" href="structarmnn_1_1_mem_block.xhtml#a709b862a06a33e0f77e0d5cfb95daaf3">m_StartOfLife</a>,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                                  block-&gt;m_EndOfLife,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                                  block-&gt;m_MemSize,</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                                  0,</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                                  block-&gt;m_Index,});</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        bins.push_back(std::move(bin));</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">return</span> bins;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;}</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="ttc" id="structarmnn_1_1_mem_block_xhtml_a709b862a06a33e0f77e0d5cfb95daaf3"><div class="ttname"><a href="structarmnn_1_1_mem_block.xhtml#a709b862a06a33e0f77e0d5cfb95daaf3">armnn::MemBlock::m_StartOfLife</a></div><div class="ttdeci">const unsigned int m_StartOfLife</div><div class="ttdef"><b>Definition:</b> <a href="_i_memory_optimizer_strategy_8hpp_source.xhtml#l00022">IMemoryOptimizerStrategy.hpp:22</a></div></div>
<div class="ttc" id="structarmnn_1_1_mem_bin_xhtml_aeb1783f0f3f528e11f9ce70f0214f8bb"><div class="ttname"><a href="structarmnn_1_1_mem_bin.xhtml#aeb1783f0f3f528e11f9ce70f0214f8bb">armnn::MemBin::m_MemBlocks</a></div><div class="ttdeci">std::vector&lt; MemBlock &gt; m_MemBlocks</div><div class="ttdef"><b>Definition:</b> <a href="_i_memory_optimizer_strategy_8hpp_source.xhtml#l00034">IMemoryOptimizerStrategy.hpp:34</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="structarmnn_1_1_mem_block_xhtml"><div class="ttname"><a href="structarmnn_1_1_mem_block.xhtml">armnn::MemBlock</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_memory_optimizer_strategy_8hpp_source.xhtml#l00013">IMemoryOptimizerStrategy.hpp:13</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa2b4a5cd5b7f1555cba80a6072824024"><div class="ttname"><a href="namespacearmnn.xhtml#aa2b4a5cd5b7f1555cba80a6072824024">armnn::wordSize</a></div><div class="ttdeci">constexpr size_t wordSize</div><div class="ttdef"><b>Definition:</b> <a href="_single_axis_priority_list_8cpp_source.xhtml#l00022">SingleAxisPriorityList.cpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_single_axis_priority_list_xhtml_ada820fb9d89d2fb75bacaffe511791b7"><div class="ttname"><a href="classarmnn_1_1_single_axis_priority_list.xhtml#ada820fb9d89d2fb75bacaffe511791b7">armnn::SingleAxisPriorityList::Optimize</a></div><div class="ttdeci">std::vector&lt; MemBin &gt; Optimize(std::vector&lt; MemBlock &gt; &amp;memBlocks) override</div><div class="ttdef"><b>Definition:</b> <a href="_single_axis_priority_list_8cpp_source.xhtml#l00214">SingleAxisPriorityList.cpp:214</a></div></div>
<div class="ttc" id="classarmnn_1_1_single_axis_priority_list_xhtml_acd35ef4810ce3b938f5454bdee0cb826"><div class="ttname"><a href="classarmnn_1_1_single_axis_priority_list.xhtml#acd35ef4810ce3b938f5454bdee0cb826">armnn::SingleAxisPriorityList::GetMemBlockStrategyType</a></div><div class="ttdeci">MemBlockStrategyType GetMemBlockStrategyType() const override</div><div class="ttdef"><b>Definition:</b> <a href="_single_axis_priority_list_8cpp_source.xhtml#l00028">SingleAxisPriorityList.cpp:28</a></div></div>
<div class="ttc" id="structarmnn_1_1_mem_bin_xhtml"><div class="ttname"><a href="structarmnn_1_1_mem_bin.xhtml">armnn::MemBin</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_memory_optimizer_strategy_8hpp_source.xhtml#l00032">IMemoryOptimizerStrategy.hpp:32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7100de49939c3e393101f78d425a98c6"><div class="ttname"><a href="namespacearmnn.xhtml#a7100de49939c3e393101f78d425a98c6">armnn::MemBlockStrategyType</a></div><div class="ttdeci">MemBlockStrategyType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00239">Types.hpp:239</a></div></div>
<div class="ttc" id="classarmnn_1_1_single_axis_priority_list_xhtml_a84ae72d221e80b93c2246b44a50fa361"><div class="ttname"><a href="classarmnn_1_1_single_axis_priority_list.xhtml#a84ae72d221e80b93c2246b44a50fa361">armnn::SingleAxisPriorityList::GetName</a></div><div class="ttdeci">std::string GetName() const override</div><div class="ttdef"><b>Definition:</b> <a href="_single_axis_priority_list_8cpp_source.xhtml#l00024">SingleAxisPriorityList.cpp:24</a></div></div>
<div class="ttc" id="structarmnn_1_1_mem_block_xhtml_ac972eed0c811e23b9e1060cee4ac5a53"><div class="ttname"><a href="structarmnn_1_1_mem_block.xhtml#ac972eed0c811e23b9e1060cee4ac5a53">armnn::MemBlock::m_MemSize</a></div><div class="ttdeci">const size_t m_MemSize</div><div class="ttdef"><b>Definition:</b> <a href="_i_memory_optimizer_strategy_8hpp_source.xhtml#l00025">IMemoryOptimizerStrategy.hpp:25</a></div></div>
<div class="ttc" id="structarmnn_1_1_mem_bin_xhtml_a08e50de8fcc7560644bdabc7356bb270"><div class="ttname"><a href="structarmnn_1_1_mem_bin.xhtml#a08e50de8fcc7560644bdabc7356bb270">armnn::MemBin::m_MemSize</a></div><div class="ttdeci">size_t m_MemSize</div><div class="ttdef"><b>Definition:</b> <a href="_i_memory_optimizer_strategy_8hpp_source.xhtml#l00035">IMemoryOptimizerStrategy.hpp:35</a></div></div>
<div class="ttc" id="structarmnn_1_1_mem_block_xhtml_afb654a0f03aca4f7f73a9008fab83b11"><div class="ttname"><a href="structarmnn_1_1_mem_block.xhtml#afb654a0f03aca4f7f73a9008fab83b11">armnn::MemBlock::m_EndOfLife</a></div><div class="ttdeci">const unsigned int m_EndOfLife</div><div class="ttdef"><b>Definition:</b> <a href="_i_memory_optimizer_strategy_8hpp_source.xhtml#l00023">IMemoryOptimizerStrategy.hpp:23</a></div></div>
<div class="ttc" id="_single_axis_priority_list_8hpp_xhtml"><div class="ttname"><a href="_single_axis_priority_list_8hpp.xhtml">SingleAxisPriorityList.hpp</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_222b9efbf86b09050d83daeffd81e1d1.xhtml">memoryOptimizerStrategyLibrary</a></li><li class="navelem"><a class="el" href="dir_d49dbf30bb5f789805533dd1aa43d8d9.xhtml">strategies</a></li><li class="navelem"><a class="el" href="_single_axis_priority_list_8cpp.xhtml">SingleAxisPriorityList.cpp</a></li>
    <li class="footer">Generated on Fri Feb 24 2023 10:24:25 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
