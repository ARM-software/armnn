<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: BufferManager Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1profiling_1_1_buffer_manager.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1profiling_1_1_buffer_manager-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">BufferManager Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_buffer_manager_8hpp_source.xhtml">BufferManager.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for BufferManager:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1profiling_1_1_buffer_manager.png" usemap="#BufferManager_map" alt=""/>
  <map id="BufferManager_map" name="BufferManager_map">
<area href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml" alt="IBufferManager" shape="rect" coords="0,0,101,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a0aee89a45e5c21933b2f16b46bec25e3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a0aee89a45e5c21933b2f16b46bec25e3">BufferManager</a> (unsigned int numberOfBuffers=5, unsigned int maxPacketSize=4096)</td></tr>
<tr class="separator:a0aee89a45e5c21933b2f16b46bec25e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8224229b6953f986d6fb2d4d00fe6ee2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a8224229b6953f986d6fb2d4d00fe6ee2">~BufferManager</a> ()</td></tr>
<tr class="separator:a8224229b6953f986d6fb2d4d00fe6ee2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3f43b4dd3fafd6b13342acc2263bbb4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#ac3f43b4dd3fafd6b13342acc2263bbb4">Reserve</a> (unsigned int requestedSize, unsigned int &amp;reservedSize) override</td></tr>
<tr class="separator:ac3f43b4dd3fafd6b13342acc2263bbb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a372de693ad40b3f42839c8ec6ac845f4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a372de693ad40b3f42839c8ec6ac845f4">Reset</a> ()</td></tr>
<tr class="separator:a372de693ad40b3f42839c8ec6ac845f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a183eaa37ccd326bd82179bed901c7122"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a183eaa37ccd326bd82179bed901c7122">Commit</a> (<a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;packetBuffer, unsigned int size, bool notifyConsumer=true) override</td></tr>
<tr class="separator:a183eaa37ccd326bd82179bed901c7122"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a226108649851aa1b1a8168560c5228b5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a226108649851aa1b1a8168560c5228b5">Release</a> (<a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;packetBuffer) override</td></tr>
<tr class="separator:a226108649851aa1b1a8168560c5228b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abce8709dc1b666a26f427ba7ff08b737"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">GetReadableBuffer</a> () override</td></tr>
<tr class="separator:abce8709dc1b666a26f427ba7ff08b737"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae717263b3243e9f88f4caea6d31b0652"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">MarkRead</a> (<a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;packetBuffer) override</td></tr>
<tr class="separator:ae717263b3243e9f88f4caea6d31b0652"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad675ff4e9053375bd41d0aad6b3bbb63"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#ad675ff4e9053375bd41d0aad6b3bbb63">SetConsumer</a> (<a class="el" href="classarmnn_1_1profiling_1_1_i_consumer.xhtml">IConsumer</a> *consumer) override</td></tr>
<tr class="memdesc:ad675ff4e9053375bd41d0aad6b3bbb63"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set Consumer on the buffer manager to be notified when there is a Commit Can only be one consumer.  <a href="#ad675ff4e9053375bd41d0aad6b3bbb63">More...</a><br /></td></tr>
<tr class="separator:ad675ff4e9053375bd41d0aad6b3bbb63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af22fdc7450c285c4d7449425c8fe994f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#af22fdc7450c285c4d7449425c8fe994f">FlushReadList</a> () override</td></tr>
<tr class="memdesc:af22fdc7450c285c4d7449425c8fe994f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Notify the Consumer buffer can be read.  <a href="#af22fdc7450c285c4d7449425c8fe994f">More...</a><br /></td></tr>
<tr class="separator:af22fdc7450c285c4d7449425c8fe994f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1profiling_1_1_i_buffer_manager"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1profiling_1_1_i_buffer_manager')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml">IBufferManager</a></td></tr>
<tr class="memitem:a18c16b4ff70efb2663a4c4c1144babee inherit pub_methods_classarmnn_1_1profiling_1_1_i_buffer_manager"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml#a18c16b4ff70efb2663a4c4c1144babee">~IBufferManager</a> ()</td></tr>
<tr class="separator:a18c16b4ff70efb2663a4c4c1144babee inherit pub_methods_classarmnn_1_1profiling_1_1_i_buffer_manager"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_buffer_manager_8hpp_source.xhtml#l00022">22</a> of file <a class="el" href="_buffer_manager_8hpp_source.xhtml">BufferManager.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a0aee89a45e5c21933b2f16b46bec25e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0aee89a45e5c21933b2f16b46bec25e3">&#9670;&nbsp;</a></span>BufferManager()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">BufferManager</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numberOfBuffers</em> = <code>5</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>maxPacketSize</em> = <code>4096</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00015">15</a> of file <a class="el" href="_buffer_manager_8cpp_source.xhtml">BufferManager.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    : m_MaxBufferSize(maxPacketSize),</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;      m_NumberOfBuffers(numberOfBuffers),</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;      m_MaxNumberOfBuffers(numberOfBuffers * 3),</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;      m_CurrentNumberOfBuffers(numberOfBuffers)</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    Initialize();</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8224229b6953f986d6fb2d4d00fe6ee2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8224229b6953f986d6fb2d4d00fe6ee2">&#9670;&nbsp;</a></span>~BufferManager()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">BufferManager</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_buffer_manager_8hpp_source.xhtml#l00027">27</a> of file <a class="el" href="_buffer_manager_8hpp_source.xhtml">BufferManager.hpp</a>.</p>

<p class="reference">References <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00058">BufferManager::Commit()</a>, <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00155">BufferManager::FlushReadList()</a>, <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00116">BufferManager::GetReadableBuffer()</a>, <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00129">BufferManager::MarkRead()</a>, <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00083">BufferManager::Release()</a>, <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00024">BufferManager::Reserve()</a>, <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00104">BufferManager::Reset()</a>, and <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00150">BufferManager::SetConsumer()</a>.</p>
<div class="fragment"><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a183eaa37ccd326bd82179bed901c7122"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a183eaa37ccd326bd82179bed901c7122">&#9670;&nbsp;</a></span>Commit()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Commit </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>packetBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>notifyConsumer</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml#ad0faa8a317506b2e72252f087c7f3c46">IBufferManager</a>.</p>

<p class="definition">Definition at line <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00058">58</a> of file <a class="el" href="_buffer_manager_8cpp_source.xhtml">BufferManager.cpp</a>.</p>

<p class="reference">References <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00155">BufferManager::FlushReadList()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00018">TEST_SUITE()</a>, and <a class="el" href="_buffer_manager_8hpp_source.xhtml#l00027">BufferManager::~BufferManager()</a>.</p>
<div class="fragment"><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    std::unique_lock&lt;std::mutex&gt; readableListLock(m_ReadableMutex, std::defer_lock);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    packetBuffer-&gt;Commit(size);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    readableListLock.lock();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    m_ReadableList.push(std::move(packetBuffer));</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    readableListLock.unlock();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">if</span> (notifyConsumer)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#af22fdc7450c285c4d7449425c8fe994f">FlushReadList</a>();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml_af22fdc7450c285c4d7449425c8fe994f"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#af22fdc7450c285c4d7449425c8fe994f">armnn::profiling::BufferManager::FlushReadList</a></div><div class="ttdeci">void FlushReadList() override</div><div class="ttdoc">Notify the Consumer buffer can be read. </div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8cpp_source.xhtml#l00155">BufferManager.cpp:155</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af22fdc7450c285c4d7449425c8fe994f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af22fdc7450c285c4d7449425c8fe994f">&#9670;&nbsp;</a></span>FlushReadList()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void FlushReadList </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Notify the Consumer buffer can be read. </p>

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml#abb12c72b032fda64ab5a596f5e49fc56">IBufferManager</a>.</p>

<p class="definition">Definition at line <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00155">155</a> of file <a class="el" href="_buffer_manager_8cpp_source.xhtml">BufferManager.cpp</a>.</p>

<p class="reference">References <a class="el" href="classarmnn_1_1profiling_1_1_i_consumer.xhtml#a4b4fe1cfea0198d9defd88178f073365">IConsumer::SetReadyToRead()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00058">BufferManager::Commit()</a>, and <a class="el" href="_buffer_manager_8hpp_source.xhtml#l00027">BufferManager::~BufferManager()</a>.</p>
<div class="fragment"><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">// notify consumer that packet is ready to read</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">if</span> (m_Consumer != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        m_Consumer-&gt;<a class="code" href="classarmnn_1_1profiling_1_1_i_consumer.xhtml#a4b4fe1cfea0198d9defd88178f073365">SetReadyToRead</a>();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div><div class="ttc" id="classarmnn_1_1profiling_1_1_i_consumer_xhtml_a4b4fe1cfea0198d9defd88178f073365"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_consumer.xhtml#a4b4fe1cfea0198d9defd88178f073365">armnn::profiling::IConsumer::SetReadyToRead</a></div><div class="ttdeci">virtual void SetReadyToRead()=0</div><div class="ttdoc">Set a &quot;ready to read&quot; flag in the buffer to notify the reading thread to start reading it...</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abce8709dc1b666a26f427ba7ff08b737"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abce8709dc1b666a26f427ba7ff08b737">&#9670;&nbsp;</a></span>GetReadableBuffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> GetReadableBuffer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml#acc2e97eddda6324261ba202634cc8ef8">IBufferManager</a>.</p>

<p class="definition">Definition at line <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00116">116</a> of file <a class="el" href="_buffer_manager_8cpp_source.xhtml">BufferManager.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_tests_8cpp_source.xhtml#l00037">TEST_SUITE()</a>, <a class="el" href="_profiling_test_utils_8cpp_source.xhtml#l00363">VerifyPostOptimisationStructureTestImpl()</a>, and <a class="el" href="_buffer_manager_8hpp_source.xhtml#l00027">BufferManager::~BufferManager()</a>.</p>
<div class="fragment"><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;{</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    std::unique_lock&lt;std::mutex&gt; readableListLock(m_ReadableMutex);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">if</span> (!m_ReadableList.empty())</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> buffer = std::move(m_ReadableList.front());</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        m_ReadableList.pop();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        readableListLock.unlock();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">return</span> buffer;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a14328d977cec3abadcfd5935f04f3409"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">armnn::profiling::IPacketBufferPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IPacketBuffer &gt; IPacketBufferPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_packet_buffer_8hpp_source.xhtml#l00044">IPacketBuffer.hpp:44</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae717263b3243e9f88f4caea6d31b0652"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae717263b3243e9f88f4caea6d31b0652">&#9670;&nbsp;</a></span>MarkRead()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void MarkRead </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>packetBuffer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml#a033cae4e6d00fc1958f79f09216a3437">IBufferManager</a>.</p>

<p class="definition">Definition at line <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00129">129</a> of file <a class="el" href="_buffer_manager_8cpp_source.xhtml">BufferManager.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00018">TEST_SUITE()</a>, and <a class="el" href="_buffer_manager_8hpp_source.xhtml#l00027">BufferManager::~BufferManager()</a>.</p>
<div class="fragment"><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;{</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    std::unique_lock&lt;std::mutex&gt; availableListLock(m_AvailableMutex, std::defer_lock);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    packetBuffer-&gt;MarkRead();</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    availableListLock.lock();</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">if</span> (m_AvailableList.size() &lt;= m_NumberOfBuffers)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        m_AvailableList.push_back(std::move(packetBuffer));</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="comment">// we have been handed a temporary overflow/surge buffer get rid of it</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        packetBuffer-&gt;Destroy();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">if</span> (m_CurrentNumberOfBuffers &gt; m_NumberOfBuffers)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            --m_CurrentNumberOfBuffers;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    availableListLock.unlock();</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a226108649851aa1b1a8168560c5228b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a226108649851aa1b1a8168560c5228b5">&#9670;&nbsp;</a></span>Release()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Release </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>packetBuffer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml#a3712fbb9506d016ac2ed7d56b8788a16">IBufferManager</a>.</p>

<p class="definition">Definition at line <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00083">83</a> of file <a class="el" href="_buffer_manager_8cpp_source.xhtml">BufferManager.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00018">TEST_SUITE()</a>, and <a class="el" href="_buffer_manager_8hpp_source.xhtml#l00027">BufferManager::~BufferManager()</a>.</p>
<div class="fragment"><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    std::unique_lock&lt;std::mutex&gt; availableListLock(m_AvailableMutex, std::defer_lock);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    packetBuffer-&gt;Release();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    availableListLock.lock();</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">if</span> (m_AvailableList.size() &lt;= m_NumberOfBuffers)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        m_AvailableList.push_back(std::move(packetBuffer));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="comment">// we have been handed a temporary overflow/surge buffer get rid of it</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        packetBuffer-&gt;Destroy();</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">if</span> (m_CurrentNumberOfBuffers &gt; m_NumberOfBuffers)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            --m_CurrentNumberOfBuffers;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    availableListLock.unlock();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac3f43b4dd3fafd6b13342acc2263bbb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac3f43b4dd3fafd6b13342acc2263bbb4">&#9670;&nbsp;</a></span>Reserve()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> Reserve </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>requestedSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>reservedSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml#a49c88b0e052621f30462c3bdbf3e4a7a">IBufferManager</a>.</p>

<p class="definition">Definition at line <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00024">24</a> of file <a class="el" href="_buffer_manager_8cpp_source.xhtml">BufferManager.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_buffer_tests_8cpp_source.xhtml#l00018">TEST_SUITE()</a>, and <a class="el" href="_buffer_manager_8hpp_source.xhtml#l00027">BufferManager::~BufferManager()</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    reservedSize = 0;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    std::unique_lock&lt;std::mutex&gt; availableListLock(m_AvailableMutex, std::defer_lock);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">if</span> (requestedSize &gt; m_MaxBufferSize)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    }</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    availableListLock.lock();</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">if</span> (m_AvailableList.empty())</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordflow">if</span> (m_CurrentNumberOfBuffers &lt; m_MaxNumberOfBuffers)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            <span class="comment">// create a temporary overflow/surge buffer and hand it back</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            m_CurrentNumberOfBuffers++;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            availableListLock.unlock();</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            <a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> buffer = std::make_unique&lt;PacketBuffer&gt;(m_MaxBufferSize);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            reservedSize = requestedSize;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="keywordflow">return</span> buffer;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="comment">// we have totally busted the limit. call a halt to new memory allocations.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            availableListLock.unlock();</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> buffer = std::move(m_AvailableList.back());</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    m_AvailableList.pop_back();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    availableListLock.unlock();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    reservedSize = requestedSize;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> buffer;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a14328d977cec3abadcfd5935f04f3409"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">armnn::profiling::IPacketBufferPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IPacketBuffer &gt; IPacketBufferPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_packet_buffer_8hpp_source.xhtml#l00044">IPacketBuffer.hpp:44</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a372de693ad40b3f42839c8ec6ac845f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a372de693ad40b3f42839c8ec6ac845f4">&#9670;&nbsp;</a></span>Reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Reset </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00104">104</a> of file <a class="el" href="_buffer_manager_8cpp_source.xhtml">BufferManager.cpp</a>.</p>

<p class="reference">References <a class="el" href="_descriptors_8cpp_source.xhtml#l00350">armnn::swap()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_profiling_service_8cpp_source.xhtml#l00329">ProfilingService::GetSendTimelinePacket()</a>, and <a class="el" href="_buffer_manager_8hpp_source.xhtml#l00027">BufferManager::~BufferManager()</a>.</p>
<div class="fragment"><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">//This method should only be called once all threads have been joined</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    std::lock_guard&lt;std::mutex&gt; readableListLock(m_ReadableMutex);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    std::lock_guard&lt;std::mutex&gt; availableListLock(m_AvailableMutex);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    m_AvailableList.clear();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    std::queue&lt;IPacketBufferPtr&gt;().<a class="code" href="namespacearmnn.xhtml#a14d7f180bf51e86850305965c3707e07">swap</a>(m_ReadableList);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    Initialize();</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a14d7f180bf51e86850305965c3707e07"><div class="ttname"><a href="namespacearmnn.xhtml#a14d7f180bf51e86850305965c3707e07">armnn::swap</a></div><div class="ttdeci">void swap(OriginsDescriptor &amp;first, OriginsDescriptor &amp;second)</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00350">Descriptors.cpp:350</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad675ff4e9053375bd41d0aad6b3bbb63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad675ff4e9053375bd41d0aad6b3bbb63">&#9670;&nbsp;</a></span>SetConsumer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetConsumer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1profiling_1_1_i_consumer.xhtml">IConsumer</a> *&#160;</td>
          <td class="paramname"><em>consumer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set Consumer on the buffer manager to be notified when there is a Commit Can only be one consumer. </p>

<p>Implements <a class="el" href="classarmnn_1_1profiling_1_1_i_buffer_manager.xhtml#a2d5f60e55b59ae8667ff593b5bfc5deb">IBufferManager</a>.</p>

<p class="definition">Definition at line <a class="el" href="_buffer_manager_8cpp_source.xhtml#l00150">150</a> of file <a class="el" href="_buffer_manager_8cpp_source.xhtml">BufferManager.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_buffer_manager_8hpp_source.xhtml#l00027">BufferManager::~BufferManager()</a>.</p>
<div class="fragment"><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;{</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    m_Consumer = consumer;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/profiling/<a class="el" href="_buffer_manager_8hpp_source.xhtml">BufferManager.hpp</a></li>
<li>src/profiling/<a class="el" href="_buffer_manager_8cpp_source.xhtml">BufferManager.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="namespacearmnn_1_1profiling.xhtml">profiling</a></li><li class="navelem"><a class="el" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml">BufferManager</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:25 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
