<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: include/armnn/BackendOptions.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_backend_options_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">BackendOptions.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_backend_options_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2019 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_backend_id_8hpp.xhtml">BackendId.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_exceptions_8hpp.xhtml">armnn/Exceptions.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;cassert&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;{</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">struct </span>BackendOptions;</div><div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a4de71c3661093e5c4ae7775114f43413">   16</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#a4de71c3661093e5c4ae7775114f43413">NetworkOptions</a> = std::vector&lt;BackendOptions&gt;;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">   18</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> = std::vector&lt;BackendOptions&gt;;</div><div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#aa9c506b558b8aa33a228b15164f40dc3">   19</a></span>&#160;<span class="keyword">using</span> <a class="code" href="structarmnn_1_1_backend_options.xhtml">BackendCapabilities</a> = <a class="code" href="structarmnn_1_1_backend_options.xhtml">BackendOptions</a>;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">/// Struct for the users to pass backend specific options</span></div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options.xhtml">   22</a></span>&#160;<span class="comment"></span><span class="keyword">struct </span><a class="code" href="structarmnn_1_1_backend_options.xhtml">BackendOptions</a></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keyword">struct </span>CheckAllowed</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> value = std::is_same&lt;T, int&gt;::value ||</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                                  std::is_same&lt;T, unsigned int&gt;::value ||</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                                  std::is_same&lt;T, float&gt;::value ||</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                                  std::is_same&lt;T, bool&gt;::value ||</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                                  std::is_same&lt;T, std::string&gt;::value ||</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                                  std::is_same&lt;T, const char*&gt;::value;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    };</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">    /// Very basic type safe variant</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml">   38</a></span>&#160;<span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml">Var</a></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">        /// Constructors</span></div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a4305aa015c6ed8cd837325b56ee960b0">   43</a></span>&#160;<span class="comment"></span>        <span class="keyword">explicit</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a4305aa015c6ed8cd837325b56ee960b0">Var</a>(<span class="keywordtype">int</span> i) : m_Vals(i), m_Type(VarTypes::Integer) {};</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#abeb3693c3c0d562cb1cd925fdc049072">   44</a></span>&#160;        <span class="keyword">explicit</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#abeb3693c3c0d562cb1cd925fdc049072">Var</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> u) : m_Vals(u), m_Type(VarTypes::UnsignedInteger) {};</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#ab6c2f675729a38585596c741faed7344">   45</a></span>&#160;        <span class="keyword">explicit</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#ab6c2f675729a38585596c741faed7344">Var</a>(<span class="keywordtype">float</span> f) : m_Vals(f), m_Type(VarTypes::Float) {};</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a8f4755d02b85f734358879244e35fa10">   46</a></span>&#160;        <span class="keyword">explicit</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a8f4755d02b85f734358879244e35fa10">Var</a>(<span class="keywordtype">bool</span> b) : m_Vals(b), m_Type(VarTypes::<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">Boolean</a>) {};</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a6e10c790d55840f4f9bc97c77da1bcb2">   47</a></span>&#160;        <span class="keyword">explicit</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a6e10c790d55840f4f9bc97c77da1bcb2">Var</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* s) : m_Vals(s), m_Type(VarTypes::String) {};</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a60460f783b1670e96cf9f603befb8729">   48</a></span>&#160;        <span class="keyword">explicit</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a60460f783b1670e96cf9f603befb8729">Var</a>(std::string s) : m_Vals(s), m_Type(VarTypes::String) {};</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">        /// Disallow implicit conversions from types not explicitly allowed below.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span>        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> DisallowedType&gt;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a32767c732b24e882f70c72b5f562bb3e">   52</a></span>&#160;        <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a32767c732b24e882f70c72b5f562bb3e">Var</a>(DisallowedType)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            static_assert(CheckAllowed&lt;DisallowedType&gt;::value, <span class="stringliteral">&quot;Type is not allowed for Var&lt;DisallowedType&gt;.&quot;</span>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            assert(<span class="keyword">false</span> &amp;&amp; <span class="stringliteral">&quot;Unreachable code&quot;</span>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">        /// Copy Construct</span></div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a811be67f63c9e96c6e41cfd607952060">   59</a></span>&#160;<span class="comment"></span>        <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a811be67f63c9e96c6e41cfd607952060">Var</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml">Var</a>&amp; other)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            : m_Type(other.m_Type)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordflow">switch</span>(m_Type)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <span class="keywordflow">case</span> VarTypes::String:</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                    <span class="keyword">new</span> (&amp;m_Vals.s) std::string(other.m_Vals.s);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                    DoOp(other, [](<span class="keyword">auto</span>&amp; a, <span class="keyword">auto</span>&amp; b)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                        {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                            a = b;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                        });</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">        /// Copy operator</span></div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a79b66a8aa64a1aaa64b3d5a482e9876c">   81</a></span>&#160;<span class="comment"></span>        <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml">Var</a>&amp; <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a79b66a8aa64a1aaa64b3d5a482e9876c">operator=</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml">Var</a>&amp; other)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="comment">// Destroy existing string</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">if</span> (m_Type == VarTypes::String)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                Destruct(m_Vals.s);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            m_Type = other.m_Type;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keywordflow">switch</span>(m_Type)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordflow">case</span> VarTypes::String:</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    <span class="keyword">new</span> (&amp;m_Vals.s) std::string(other.m_Vals.s);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    DoOp(other, [](<span class="keyword">auto</span>&amp; a, <span class="keyword">auto</span>&amp; b)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                        {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                            a = b;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        });</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        };</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">        /// Type getters</span></div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#aec3bdef27fa2d4de29db82d2334ad2d8">  112</a></span>&#160;<span class="comment"></span>        <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#aec3bdef27fa2d4de29db82d2334ad2d8">IsBool</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Type == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">VarTypes::Boolean</a>; }</div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#aba7f9d096eda6d34bc0c668ee44dd665">  113</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#aba7f9d096eda6d34bc0c668ee44dd665">IsInt</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Type == VarTypes::Integer; }</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a3a298f343faf362973e3a893555c9c61">  114</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a3a298f343faf362973e3a893555c9c61">IsUnsignedInt</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Type == VarTypes::UnsignedInteger; }</div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#aec0a6f81c7581924db00ea960358d91b">  115</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#aec0a6f81c7581924db00ea960358d91b">IsFloat</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Type == VarTypes::Float; }</div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a7c412f98489e7d252ef40ed053a3908c">  116</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a7c412f98489e7d252ef40ed053a3908c">IsString</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Type == VarTypes::String; }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">        /// Value getters</span></div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#ac488187ef67bf8905cbe686daab95183">  119</a></span>&#160;<span class="comment"></span>        <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#ac488187ef67bf8905cbe686daab95183">AsBool</a>()<span class="keyword"> const </span>{ assert(IsBool()); <span class="keywordflow">return</span> m_Vals.b; }</div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#ad0c302a166dc669426251446bca2748a">  120</a></span>&#160;        <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#ad0c302a166dc669426251446bca2748a">AsInt</a>()<span class="keyword"> const </span>{ assert(IsInt()); <span class="keywordflow">return</span> m_Vals.i; }</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a8e1f21bd37f13d6a990f35127974c5d0">  121</a></span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a8e1f21bd37f13d6a990f35127974c5d0">AsUnsignedInt</a>()<span class="keyword"> const </span>{ assert(IsUnsignedInt()); <span class="keywordflow">return</span> m_Vals.u; }</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a8f86682f960b846e1c3a59eb7fc6ae95">  122</a></span>&#160;        <span class="keywordtype">float</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a8f86682f960b846e1c3a59eb7fc6ae95">AsFloat</a>()<span class="keyword"> const </span>{ assert(IsFloat()); <span class="keywordflow">return</span> m_Vals.f; }</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a5e3562cda960da001597e7dd5679b140">  123</a></span>&#160;        std::string <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a5e3562cda960da001597e7dd5679b140">AsString</a>()<span class="keyword"> const </span>{ assert(IsString()); <span class="keywordflow">return</span> m_Vals.s; }</div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a7ef596a0c429a1a74709cf14d8fa15d2">  124</a></span>&#160;        std::string <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a7ef596a0c429a1a74709cf14d8fa15d2">ToString</a>()</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">if</span> (IsBool()) { <span class="keywordflow">return</span> AsBool() ? <span class="stringliteral">&quot;true&quot;</span> : <span class="stringliteral">&quot;false&quot;</span>; }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IsInt()) { <span class="keywordflow">return</span> std::to_string(AsInt()); }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IsUnsignedInt()) { <span class="keywordflow">return</span> std::to_string(AsUnsignedInt()); }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IsFloat()) { <span class="keywordflow">return</span> std::to_string(AsFloat()); }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (IsString()) { <span class="keywordflow">return</span> AsString(); }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;Unknown data type for string conversion&quot;</span>);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">        /// Destructor</span></div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a237e1f27f83ecf13949cdd83c78d5f6b">  138</a></span>&#160;<span class="comment"></span>        <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a237e1f27f83ecf13949cdd83c78d5f6b">~Var</a>()</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            DoOp(*<span class="keyword">this</span>, [<span class="keyword">this</span>](<span class="keyword">auto</span>&amp; a, <span class="keyword">auto</span>&amp;)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                    Destruct(a);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                });</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Func&gt;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordtype">void</span> DoOp(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml">Var</a>&amp; other, Func func)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="keywordflow">if</span> (other.<a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#aec3bdef27fa2d4de29db82d2334ad2d8">IsBool</a>())</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                func(m_Vals.b, other.m_Vals.b);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (other.<a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#aba7f9d096eda6d34bc0c668ee44dd665">IsInt</a>())</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                func(m_Vals.i, other.m_Vals.i);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (other.<a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a3a298f343faf362973e3a893555c9c61">IsUnsignedInt</a>())</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                func(m_Vals.u, other.m_Vals.u);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (other.<a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#aec0a6f81c7581924db00ea960358d91b">IsFloat</a>())</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                func(m_Vals.f, other.m_Vals.f);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (other.<a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a7c412f98489e7d252ef40ed053a3908c">IsString</a>())</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                func(m_Vals.s, other.m_Vals.s);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Destructable&gt;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordtype">void</span> Destruct(Destructable&amp; d)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">if</span> (std::is_destructible&lt;Destructable&gt;::value)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                d.~Destructable();</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">        /// Types which can be stored</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment"></span>        <span class="keyword">enum class</span> VarTypes</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">Boolean</a>,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            Integer,</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            Float,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            String,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            UnsignedInteger</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        };</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">        /// Union of potential type values.</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment"></span>        <span class="keyword">union </span>Vals</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordtype">int</span> i;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> u;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordtype">float</span> f;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keywordtype">bool</span> b;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            std::string s;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            Vals(){}</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            ~Vals(){}</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keyword">explicit</span> Vals(<span class="keywordtype">int</span> i) : i(i) {};</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keyword">explicit</span> Vals(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> u) : u(u) {};</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keyword">explicit</span> Vals(<span class="keywordtype">float</span> f) : f(f) {};</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="keyword">explicit</span> Vals(<span class="keywordtype">bool</span> b) : b(b) {};</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keyword">explicit</span> Vals(<span class="keyword">const</span> <span class="keywordtype">char</span>* s) : s(std::string(s)) {}</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="keyword">explicit</span> Vals(std::string s) : s(s) {}</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;       };</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        Vals m_Vals;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        VarTypes m_Type;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    };</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">  215</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">BackendOption</a></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#ad80ba63777c766ad6e7ec36edb4bd1e1">  218</a></span>&#160;        <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#ad80ba63777c766ad6e7ec36edb4bd1e1">BackendOption</a>(std::string name, <span class="keywordtype">bool</span> value)</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            : m_Name(name), m_Value(value)</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        {}</div><div class="line"><a name="l00221"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#a92203c699943e7ca7df9775b454d4ee6">  221</a></span>&#160;        <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#a92203c699943e7ca7df9775b454d4ee6">BackendOption</a>(std::string name, <span class="keywordtype">int</span> value)</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            : m_Name(name), m_Value(value)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        {}</div><div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#adbbd4a2f0680b8909d232a5aecb02f7e">  224</a></span>&#160;        <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#adbbd4a2f0680b8909d232a5aecb02f7e">BackendOption</a>(std::string name, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> value)</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                : m_Name(name), m_Value(value)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        {}</div><div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#aa50f2aa5fb2d6dfe0e86edfe069e6eac">  227</a></span>&#160;        <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#aa50f2aa5fb2d6dfe0e86edfe069e6eac">BackendOption</a>(std::string name, <span class="keywordtype">float</span> value)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            : m_Name(name), m_Value(value)</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        {}</div><div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#a7d0b7fb390fbbb8f5e5392ab3c5cf307">  230</a></span>&#160;        <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#a7d0b7fb390fbbb8f5e5392ab3c5cf307">BackendOption</a>(std::string name, std::string value)</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            : m_Name(name), m_Value(value)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        {}</div><div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#ac669a27ac5da650f8df891fb7b198eba">  233</a></span>&#160;        <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#ac669a27ac5da650f8df891fb7b198eba">BackendOption</a>(std::string name, <span class="keyword">const</span> <span class="keywordtype">char</span>* value)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            : m_Name(name), m_Value(value)</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        {}</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> DisallowedType&gt;</div><div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#ae1afc2bc88aaf55d7b9e1fc4d6b3ed71">  238</a></span>&#160;        <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#ae1afc2bc88aaf55d7b9e1fc4d6b3ed71">BackendOption</a>(std::string, DisallowedType)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            : m_Value(0)</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            static_assert(CheckAllowed&lt;DisallowedType&gt;::value, <span class="stringliteral">&quot;Type is not allowed for BackendOption.&quot;</span>);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            assert(<span class="keyword">false</span> &amp;&amp; <span class="stringliteral">&quot;Unreachable code&quot;</span>);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">BackendOption</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">BackendOption</a>&amp; other) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">BackendOption</a>(<a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">BackendOption</a>&amp;&amp; other) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">BackendOption</a>&amp; <a class="code" href="structarmnn_1_1_backend_options.xhtml#a31676f0c75a2af59d2aea2cf8f0a1ee1">operator=</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">BackendOption</a>&amp; other) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">BackendOption</a>&amp; <a class="code" href="structarmnn_1_1_backend_options.xhtml#a31676f0c75a2af59d2aea2cf8f0a1ee1">operator=</a>(<a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">BackendOption</a>&amp;&amp; other) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        ~<a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">BackendOption</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#a9a98946a64f3893b085f650932c9dfee">  251</a></span>&#160;        std::string <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#a9a98946a64f3893b085f650932c9dfee">GetName</a>()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> m_Name; }</div><div class="line"><a name="l00252"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#a9dd404db54065d13616225910db3dec4">  252</a></span>&#160;        <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml">Var</a> <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#a9dd404db54065d13616225910db3dec4">GetValue</a>()<span class="keyword"> const          </span>{ <span class="keywordflow">return</span> m_Value; }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        std::string m_Name;         <span class="comment">///&lt; Name of the option</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment"></span>        <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml">Var</a>         m_Value;        <span class="comment">///&lt; Value of the option. (Bool, int, Float, String)</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"></span>    };</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options.xhtml#ad6fe0bdd3b79749986ab50e6b4085b76">  259</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="structarmnn_1_1_backend_options.xhtml#ad6fe0bdd3b79749986ab50e6b4085b76">BackendOptions</a>(<a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> backend)</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        : m_TargetBackend(backend)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    {}</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options.xhtml#a5ee8856d02d66b99926518c9b5fbea85">  263</a></span>&#160;    <a class="code" href="structarmnn_1_1_backend_options.xhtml#a5ee8856d02d66b99926518c9b5fbea85">BackendOptions</a>(<a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> backend, std::initializer_list&lt;BackendOption&gt; options)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        : m_TargetBackend(backend)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        , m_Options(options)</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    {}</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="structarmnn_1_1_backend_options.xhtml#ad6fe0bdd3b79749986ab50e6b4085b76">BackendOptions</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_backend_options.xhtml">BackendOptions</a>&amp; other) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <a class="code" href="structarmnn_1_1_backend_options.xhtml#ad6fe0bdd3b79749986ab50e6b4085b76">BackendOptions</a>(<a class="code" href="structarmnn_1_1_backend_options.xhtml">BackendOptions</a>&amp;&amp; other) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <a class="code" href="structarmnn_1_1_backend_options.xhtml">BackendOptions</a>&amp; <a class="code" href="structarmnn_1_1_backend_options.xhtml#a31676f0c75a2af59d2aea2cf8f0a1ee1">operator=</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_backend_options.xhtml">BackendOptions</a>&amp; other) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="structarmnn_1_1_backend_options.xhtml">BackendOptions</a>&amp; <a class="code" href="structarmnn_1_1_backend_options.xhtml#a31676f0c75a2af59d2aea2cf8f0a1ee1">operator=</a>(<a class="code" href="structarmnn_1_1_backend_options.xhtml">BackendOptions</a>&amp;&amp; other) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options.xhtml#a6b8ddb05dcd6f1058b1db5b4f4aa89e1">  273</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarmnn_1_1_backend_options.xhtml#a6b8ddb05dcd6f1058b1db5b4f4aa89e1">AddOption</a>(<a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">BackendOption</a>&amp;&amp; option)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        m_Options.push_back(option);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    }</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options.xhtml#aa0dcad79dc1aa59c7b7df6dbf86b25cf">  278</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="structarmnn_1_1_backend_options.xhtml#aa0dcad79dc1aa59c7b7df6dbf86b25cf">AddOption</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">BackendOption</a>&amp; option)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    {</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        m_Options.push_back(option);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options.xhtml#a4a33da17aee21f4877eda951d7d5babd">  283</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; <a class="code" href="structarmnn_1_1_backend_options.xhtml#a4a33da17aee21f4877eda951d7d5babd">GetBackendId</a>() const noexcept { <span class="keywordflow">return</span> m_TargetBackend; }</div><div class="line"><a name="l00284"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options.xhtml#aac6574986901c29b5e0b81083c13502f">  284</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="structarmnn_1_1_backend_options.xhtml#aac6574986901c29b5e0b81083c13502f">GetOptionCount</a>() const noexcept { <span class="keywordflow">return</span> m_Options.size(); }</div><div class="line"><a name="l00285"></a><span class="lineno"><a class="line" href="structarmnn_1_1_backend_options.xhtml#a6eb7000b48e63e0e05b94dbc36dd6c30">  285</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">BackendOption</a>&amp; <a class="code" href="structarmnn_1_1_backend_options.xhtml#a6eb7000b48e63e0e05b94dbc36dd6c30">GetOption</a>(<span class="keywordtype">size_t</span> idx)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Options[idx]; }</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">    /// The id for the backend to which the options should be passed.</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment"></span>    <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> m_TargetBackend;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">    /// The array of options to pass to the backend context</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment"></span>    std::vector&lt;BackendOption&gt; m_Options;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;};</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> F&gt;</div><div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#af457790132251cde6545072d879c7684">  297</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#af457790132251cde6545072d879c7684">ParseOptions</a>(<span class="keyword">const</span> std::vector&lt;BackendOptions&gt;&amp; options, <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> backend, F f)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;{</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> optionsGroup : options)</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    {</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keywordflow">if</span> (optionsGroup.GetBackendId() == backend)</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        {</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; optionsGroup.GetOptionCount(); i++)</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            {</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">BackendOptions::BackendOption</a> option = optionsGroup.GetOption(i);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                f(option.<a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#a9a98946a64f3893b085f650932c9dfee">GetName</a>(), option.<a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#a9dd404db54065d13616225910db3dec4">GetValue</a>());</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        }</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    }</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;}</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#abe4073b0af144421b53828ef752e4ee3">  312</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespacearmnn.xhtml#abe4073b0af144421b53828ef752e4ee3">ParseBooleanBackendOption</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml">armnn::BackendOptions::Var</a>&amp; value, <span class="keywordtype">bool</span> defaultValue)</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;{</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordflow">if</span> (value.<a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#aec3bdef27fa2d4de29db82d2334ad2d8">IsBool</a>())</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    {</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">return</span> value.<a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#ac488187ef67bf8905cbe686daab95183">AsBool</a>();</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordflow">return</span> defaultValue;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;}</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a79a7e943477406c7211f8800e24e5074">  321</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="namespacearmnn.xhtml#a79a7e943477406c7211f8800e24e5074">ParseStringBackendOption</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml">armnn::BackendOptions::Var</a>&amp; value, std::string defaultValue)</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;{</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">if</span> (value.<a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a7c412f98489e7d252ef40ed053a3908c">IsString</a>())</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    {</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="keywordflow">return</span> value.<a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#a5e3562cda960da001597e7dd5679b140">AsString</a>();</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">return</span> defaultValue;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;}</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a884361aad1fe11d630c8588cba16c6f1">  330</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearmnn.xhtml#a884361aad1fe11d630c8588cba16c6f1">ParseIntBackendOption</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml">armnn::BackendOptions::Var</a>&amp; value, <span class="keywordtype">int</span> defaultValue)</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;{</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordflow">if</span> (value.<a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#aba7f9d096eda6d34bc0c668ee44dd665">IsInt</a>())</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    {</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="keywordflow">return</span> value.<a class="code" href="classarmnn_1_1_backend_options_1_1_var.xhtml#ad0c302a166dc669426251446bca2748a">AsInt</a>();</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    }</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keywordflow">return</span> defaultValue;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;}</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;} <span class="comment">//namespace armnn</span></div><div class="ttc" id="structarmnn_1_1_backend_options_xhtml_a6eb7000b48e63e0e05b94dbc36dd6c30"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml#a6eb7000b48e63e0e05b94dbc36dd6c30">armnn::BackendOptions::GetOption</a></div><div class="ttdeci">const BackendOption &amp; GetOption(size_t idx) const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00285">BackendOptions.hpp:285</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_ab6c2f675729a38585596c741faed7344"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#ab6c2f675729a38585596c741faed7344">armnn::BackendOptions::Var::Var</a></div><div class="ttdeci">Var(float f)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00045">BackendOptions.hpp:45</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a79a7e943477406c7211f8800e24e5074"><div class="ttname"><a href="namespacearmnn.xhtml#a79a7e943477406c7211f8800e24e5074">armnn::ParseStringBackendOption</a></div><div class="ttdeci">std::string ParseStringBackendOption(const armnn::BackendOptions::Var &amp;value, std::string defaultValue)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00321">BackendOptions.hpp:321</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_a8f4755d02b85f734358879244e35fa10"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#a8f4755d02b85f734358879244e35fa10">armnn::BackendOptions::Var::Var</a></div><div class="ttdeci">Var(bool b)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00046">BackendOptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_aec0a6f81c7581924db00ea960358d91b"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#aec0a6f81c7581924db00ea960358d91b">armnn::BackendOptions::Var::IsFloat</a></div><div class="ttdeci">bool IsFloat() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00115">BackendOptions.hpp:115</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_xhtml_a5ee8856d02d66b99926518c9b5fbea85"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml#a5ee8856d02d66b99926518c9b5fbea85">armnn::BackendOptions::BackendOptions</a></div><div class="ttdeci">BackendOptions(BackendId backend, std::initializer_list&lt; BackendOption &gt; options)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00263">BackendOptions.hpp:263</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml">armnn::BackendOptions::Var</a></div><div class="ttdoc">Very basic type safe variant. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00038">BackendOptions.hpp:38</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_1_1_backend_option_xhtml_ad80ba63777c766ad6e7ec36edb4bd1e1"><div class="ttname"><a href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#ad80ba63777c766ad6e7ec36edb4bd1e1">armnn::BackendOptions::BackendOption::BackendOption</a></div><div class="ttdeci">BackendOption(std::string name, bool value)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00218">BackendOptions.hpp:218</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_1_1_backend_option_xhtml_a9dd404db54065d13616225910db3dec4"><div class="ttname"><a href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#a9dd404db54065d13616225910db3dec4">armnn::BackendOptions::BackendOption::GetValue</a></div><div class="ttdeci">Var GetValue() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00252">BackendOptions.hpp:252</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_a811be67f63c9e96c6e41cfd607952060"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#a811be67f63c9e96c6e41cfd607952060">armnn::BackendOptions::Var::Var</a></div><div class="ttdeci">Var(const Var &amp;other)</div><div class="ttdoc">Copy Construct. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00059">BackendOptions.hpp:59</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_aba7f9d096eda6d34bc0c668ee44dd665"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#aba7f9d096eda6d34bc0c668ee44dd665">armnn::BackendOptions::Var::IsInt</a></div><div class="ttdeci">bool IsInt() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00113">BackendOptions.hpp:113</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_1_1_backend_option_xhtml_adbbd4a2f0680b8909d232a5aecb02f7e"><div class="ttname"><a href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#adbbd4a2f0680b8909d232a5aecb02f7e">armnn::BackendOptions::BackendOption::BackendOption</a></div><div class="ttdeci">BackendOption(std::string name, unsigned int value)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00224">BackendOptions.hpp:224</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_af457790132251cde6545072d879c7684"><div class="ttname"><a href="namespacearmnn.xhtml#af457790132251cde6545072d879c7684">armnn::ParseOptions</a></div><div class="ttdeci">void ParseOptions(const std::vector&lt; BackendOptions &gt; &amp;options, BackendId backend, F f)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00297">BackendOptions.hpp:297</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5b6893cda5b69359a4244c06054da18f"><div class="ttname"><a href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">armnn::ModelOptions</a></div><div class="ttdeci">std::vector&lt; BackendOptions &gt; ModelOptions</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00018">BackendOptions.hpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abe4073b0af144421b53828ef752e4ee3"><div class="ttname"><a href="namespacearmnn.xhtml#abe4073b0af144421b53828ef752e4ee3">armnn::ParseBooleanBackendOption</a></div><div class="ttdeci">bool ParseBooleanBackendOption(const armnn::BackendOptions::Var &amp;value, bool defaultValue)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00312">BackendOptions.hpp:312</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4de71c3661093e5c4ae7775114f43413"><div class="ttname"><a href="namespacearmnn.xhtml#a4de71c3661093e5c4ae7775114f43413">armnn::NetworkOptions</a></div><div class="ttdeci">std::vector&lt; BackendOptions &gt; NetworkOptions</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00016">BackendOptions.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_a7c412f98489e7d252ef40ed053a3908c"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#a7c412f98489e7d252ef40ed053a3908c">armnn::BackendOptions::Var::IsString</a></div><div class="ttdeci">bool IsString() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00116">BackendOptions.hpp:116</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_xhtml_ad6fe0bdd3b79749986ab50e6b4085b76"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml#ad6fe0bdd3b79749986ab50e6b4085b76">armnn::BackendOptions::BackendOptions</a></div><div class="ttdeci">BackendOptions(BackendId backend)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00259">BackendOptions.hpp:259</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_ad0c302a166dc669426251446bca2748a"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#ad0c302a166dc669426251446bca2748a">armnn::BackendOptions::Var::AsInt</a></div><div class="ttdeci">int AsInt() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00120">BackendOptions.hpp:120</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_a6e10c790d55840f4f9bc97c77da1bcb2"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#a6e10c790d55840f4f9bc97c77da1bcb2">armnn::BackendOptions::Var::Var</a></div><div class="ttdeci">Var(const char *s)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00047">BackendOptions.hpp:47</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_xhtml_aac6574986901c29b5e0b81083c13502f"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml#aac6574986901c29b5e0b81083c13502f">armnn::BackendOptions::GetOptionCount</a></div><div class="ttdeci">size_t GetOptionCount() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00284">BackendOptions.hpp:284</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_a4305aa015c6ed8cd837325b56ee960b0"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#a4305aa015c6ed8cd837325b56ee960b0">armnn::BackendOptions::Var::Var</a></div><div class="ttdeci">Var(int i)</div><div class="ttdoc">Constructors. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00043">BackendOptions.hpp:43</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_a237e1f27f83ecf13949cdd83c78d5f6b"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#a237e1f27f83ecf13949cdd83c78d5f6b">armnn::BackendOptions::Var::~Var</a></div><div class="ttdeci">~Var()</div><div class="ttdoc">Destructor. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00138">BackendOptions.hpp:138</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_xhtml_a6b8ddb05dcd6f1058b1db5b4f4aa89e1"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml#a6b8ddb05dcd6f1058b1db5b4f4aa89e1">armnn::BackendOptions::AddOption</a></div><div class="ttdeci">void AddOption(BackendOption &amp;&amp;option)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00273">BackendOptions.hpp:273</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_a79b66a8aa64a1aaa64b3d5a482e9876c"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#a79b66a8aa64a1aaa64b3d5a482e9876c">armnn::BackendOptions::Var::operator=</a></div><div class="ttdeci">Var &amp; operator=(const Var &amp;other)</div><div class="ttdoc">Copy operator. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00081">BackendOptions.hpp:81</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_1_1_backend_option_xhtml_a92203c699943e7ca7df9775b454d4ee6"><div class="ttname"><a href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#a92203c699943e7ca7df9775b454d4ee6">armnn::BackendOptions::BackendOption::BackendOption</a></div><div class="ttdeci">BackendOption(std::string name, int value)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00221">BackendOptions.hpp:221</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_a5e3562cda960da001597e7dd5679b140"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#a5e3562cda960da001597e7dd5679b140">armnn::BackendOptions::Var::AsString</a></div><div class="ttdeci">std::string AsString() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00123">BackendOptions.hpp:123</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_a32767c732b24e882f70c72b5f562bb3e"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#a32767c732b24e882f70c72b5f562bb3e">armnn::BackendOptions::Var::Var</a></div><div class="ttdeci">Var(DisallowedType)</div><div class="ttdoc">Disallow implicit conversions from types not explicitly allowed below. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00052">BackendOptions.hpp:52</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_a60460f783b1670e96cf9f603befb8729"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#a60460f783b1670e96cf9f603befb8729">armnn::BackendOptions::Var::Var</a></div><div class="ttdeci">Var(std::string s)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00048">BackendOptions.hpp:48</a></div></div>
<div class="ttc" id="_backend_id_8hpp_xhtml"><div class="ttname"><a href="_backend_id_8hpp.xhtml">BackendId.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_xhtml_a31676f0c75a2af59d2aea2cf8f0a1ee1"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml#a31676f0c75a2af59d2aea2cf8f0a1ee1">armnn::BackendOptions::operator=</a></div><div class="ttdeci">BackendOptions &amp; operator=(const BackendOptions &amp;other)=default</div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_a8e1f21bd37f13d6a990f35127974c5d0"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#a8e1f21bd37f13d6a990f35127974c5d0">armnn::BackendOptions::Var::AsUnsignedInt</a></div><div class="ttdeci">unsigned int AsUnsignedInt() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00121">BackendOptions.hpp:121</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a></div><div class="ttdoc">Struct for the users to pass backend specific options. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00022">BackendOptions.hpp:22</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_xhtml_aa0dcad79dc1aa59c7b7df6dbf86b25cf"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml#aa0dcad79dc1aa59c7b7df6dbf86b25cf">armnn::BackendOptions::AddOption</a></div><div class="ttdeci">void AddOption(const BackendOption &amp;option)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00278">BackendOptions.hpp:278</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_ac488187ef67bf8905cbe686daab95183"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#ac488187ef67bf8905cbe686daab95183">armnn::BackendOptions::Var::AsBool</a></div><div class="ttdeci">bool AsBool() const</div><div class="ttdoc">Value getters. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00119">BackendOptions.hpp:119</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_1_1_backend_option_xhtml_a9a98946a64f3893b085f650932c9dfee"><div class="ttname"><a href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#a9a98946a64f3893b085f650932c9dfee">armnn::BackendOptions::BackendOption::GetName</a></div><div class="ttdeci">std::string GetName() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00251">BackendOptions.hpp:251</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_abeb3693c3c0d562cb1cd925fdc049072"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#abeb3693c3c0d562cb1cd925fdc049072">armnn::BackendOptions::Var::Var</a></div><div class="ttdeci">Var(unsigned int u)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00044">BackendOptions.hpp:44</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_aec3bdef27fa2d4de29db82d2334ad2d8"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#aec3bdef27fa2d4de29db82d2334ad2d8">armnn::BackendOptions::Var::IsBool</a></div><div class="ttdeci">bool IsBool() const</div><div class="ttdoc">Type getters. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00112">BackendOptions.hpp:112</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml"><div class="ttname"><a href="_exceptions_8hpp.xhtml">Exceptions.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a884361aad1fe11d630c8588cba16c6f1"><div class="ttname"><a href="namespacearmnn.xhtml#a884361aad1fe11d630c8588cba16c6f1">armnn::ParseIntBackendOption</a></div><div class="ttdeci">int ParseIntBackendOption(const armnn::BackendOptions::Var &amp;value, int defaultValue)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00330">BackendOptions.hpp:330</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_a8f86682f960b846e1c3a59eb7fc6ae95"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#a8f86682f960b846e1c3a59eb7fc6ae95">armnn::BackendOptions::Var::AsFloat</a></div><div class="ttdeci">float AsFloat() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00122">BackendOptions.hpp:122</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_1_1_backend_option_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">armnn::BackendOptions::BackendOption</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00215">BackendOptions.hpp:215</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_a7ef596a0c429a1a74709cf14d8fa15d2"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#a7ef596a0c429a1a74709cf14d8fa15d2">armnn::BackendOptions::Var::ToString</a></div><div class="ttdeci">std::string ToString()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00124">BackendOptions.hpp:124</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_1_1_backend_option_xhtml_aa50f2aa5fb2d6dfe0e86edfe069e6eac"><div class="ttname"><a href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#aa50f2aa5fb2d6dfe0e86edfe069e6eac">armnn::BackendOptions::BackendOption::BackendOption</a></div><div class="ttdeci">BackendOption(std::string name, float value)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00227">BackendOptions.hpp:227</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_options_1_1_var_xhtml_a3a298f343faf362973e3a893555c9c61"><div class="ttname"><a href="classarmnn_1_1_backend_options_1_1_var.xhtml#a3a298f343faf362973e3a893555c9c61">armnn::BackendOptions::Var::IsUnsignedInt</a></div><div class="ttdeci">bool IsUnsignedInt() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00114">BackendOptions.hpp:114</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_1_1_backend_option_xhtml_ac669a27ac5da650f8df891fb7b198eba"><div class="ttname"><a href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#ac669a27ac5da650f8df891fb7b198eba">armnn::BackendOptions::BackendOption::BackendOption</a></div><div class="ttdeci">BackendOption(std::string name, const char *value)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00233">BackendOptions.hpp:233</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_1_1_backend_option_xhtml_ae1afc2bc88aaf55d7b9e1fc4d6b3ed71"><div class="ttname"><a href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#ae1afc2bc88aaf55d7b9e1fc4d6b3ed71">armnn::BackendOptions::BackendOption::BackendOption</a></div><div class="ttdeci">BackendOption(std::string, DisallowedType)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00238">BackendOptions.hpp:238</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_xhtml_a4a33da17aee21f4877eda951d7d5babd"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml#a4a33da17aee21f4877eda951d7d5babd">armnn::BackendOptions::GetBackendId</a></div><div class="ttdeci">const BackendId &amp; GetBackendId() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00283">BackendOptions.hpp:283</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_1_1_backend_option_xhtml_a7d0b7fb390fbbb8f5e5392ab3c5cf307"><div class="ttname"><a href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml#a7d0b7fb390fbbb8f5e5392ab3c5cf307">armnn::BackendOptions::BackendOption::BackendOption</a></div><div class="ttdeci">BackendOption(std::string name, std::string value)</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00230">BackendOptions.hpp:230</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_2b72cc348e06937955e62ebdd8a13436.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_backend_options_8hpp.xhtml">BackendOptions.hpp</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:38:54 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
