<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: OpenClTimer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_open_cl_timer.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_open_cl_timer-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">OpenClTimer Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classarmnn_1_1_open_cl_timer.xhtml" title="OpenClTimer instrument that times all OpenCl kernels executed between calls to Start() and Stop()...">OpenClTimer</a> instrument that times all OpenCl kernels executed between calls to <a class="el" href="classarmnn_1_1_open_cl_timer.xhtml#a156f3866ca69d98b4d9e6e1c1b3ec7da" title="Start the OpenCl timer. ">Start()</a> and <a class="el" href="classarmnn_1_1_open_cl_timer.xhtml#a634c58de2126b4a4e6a2a093e60e1290" title="Stop the OpenCl timer. ">Stop()</a>.  
 <a href="classarmnn_1_1_open_cl_timer.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_open_cl_timer_8hpp_source.xhtml">OpenClTimer.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for OpenClTimer:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_open_cl_timer.png" usemap="#OpenClTimer_map" alt=""/>
  <map id="OpenClTimer_map" name="OpenClTimer_map">
<area href="classarmnn_1_1_instrument.xhtml" alt="Instrument" shape="rect" coords="0,0,86,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:adcd19a0c31e8ffa4411fa05e905c0cf4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_open_cl_timer.xhtml#adcd19a0c31e8ffa4411fa05e905c0cf4">OpenClTimer</a> ()</td></tr>
<tr class="separator:adcd19a0c31e8ffa4411fa05e905c0cf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a596f6581a916e95f60c2f203b8bda367"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_open_cl_timer.xhtml#a596f6581a916e95f60c2f203b8bda367">~OpenClTimer</a> ()=default</td></tr>
<tr class="separator:a596f6581a916e95f60c2f203b8bda367"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a156f3866ca69d98b4d9e6e1c1b3ec7da"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_open_cl_timer.xhtml#a156f3866ca69d98b4d9e6e1c1b3ec7da">Start</a> () override</td></tr>
<tr class="memdesc:a156f3866ca69d98b4d9e6e1c1b3ec7da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start the OpenCl timer.  <a href="#a156f3866ca69d98b4d9e6e1c1b3ec7da">More...</a><br /></td></tr>
<tr class="separator:a156f3866ca69d98b4d9e6e1c1b3ec7da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a634c58de2126b4a4e6a2a093e60e1290"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_open_cl_timer.xhtml#a634c58de2126b4a4e6a2a093e60e1290">Stop</a> () override</td></tr>
<tr class="memdesc:a634c58de2126b4a4e6a2a093e60e1290"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stop the OpenCl timer.  <a href="#a634c58de2126b4a4e6a2a093e60e1290">More...</a><br /></td></tr>
<tr class="separator:a634c58de2126b4a4e6a2a093e60e1290"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ddf0cf6f620d59c10e63495ace795d0"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_open_cl_timer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">GetName</a> () const override</td></tr>
<tr class="memdesc:a7ddf0cf6f620d59c10e63495ace795d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the name of the timer.  <a href="#a7ddf0cf6f620d59c10e63495ace795d0">More...</a><br /></td></tr>
<tr class="separator:a7ddf0cf6f620d59c10e63495ace795d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86ea36032637c02c045f2d433036a203"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="structarmnn_1_1_measurement.xhtml">Measurement</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_open_cl_timer.xhtml#a86ea36032637c02c045f2d433036a203">GetMeasurements</a> () const override</td></tr>
<tr class="memdesc:a86ea36032637c02c045f2d433036a203"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the recorded measurements.  <a href="#a86ea36032637c02c045f2d433036a203">More...</a><br /></td></tr>
<tr class="separator:a86ea36032637c02c045f2d433036a203"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_instrument"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_instrument')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_instrument.xhtml">Instrument</a></td></tr>
<tr class="memitem:a37a2de9b867820a7ab15b8dc8d62b153 inherit pub_methods_classarmnn_1_1_instrument"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_instrument.xhtml#a37a2de9b867820a7ab15b8dc8d62b153">~Instrument</a> ()</td></tr>
<tr class="separator:a37a2de9b867820a7ab15b8dc8d62b153 inherit pub_methods_classarmnn_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classarmnn_1_1_open_cl_timer.xhtml" title="OpenClTimer instrument that times all OpenCl kernels executed between calls to Start() and Stop()...">OpenClTimer</a> instrument that times all OpenCl kernels executed between calls to <a class="el" href="classarmnn_1_1_open_cl_timer.xhtml#a156f3866ca69d98b4d9e6e1c1b3ec7da" title="Start the OpenCl timer. ">Start()</a> and <a class="el" href="classarmnn_1_1_open_cl_timer.xhtml#a634c58de2126b4a4e6a2a093e60e1290" title="Stop the OpenCl timer. ">Stop()</a>. </p>

<p class="definition">Definition at line <a class="el" href="_open_cl_timer_8hpp_source.xhtml#l00020">20</a> of file <a class="el" href="_open_cl_timer_8hpp_source.xhtml">OpenClTimer.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="adcd19a0c31e8ffa4411fa05e905c0cf4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcd19a0c31e8ffa4411fa05e905c0cf4">&#9670;&nbsp;</a></span>OpenClTimer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_open_cl_timer.xhtml">OpenClTimer</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_cl_timer_8cpp_source.xhtml#l00017">17</a> of file <a class="el" href="_open_cl_timer_8cpp_source.xhtml">OpenClTimer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a596f6581a916e95f60c2f203b8bda367"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a596f6581a916e95f60c2f203b8bda367">&#9670;&nbsp;</a></span>~OpenClTimer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_open_cl_timer.xhtml">OpenClTimer</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a86ea36032637c02c045f2d433036a203"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86ea36032637c02c045f2d433036a203">&#9670;&nbsp;</a></span>GetMeasurements()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="structarmnn_1_1_measurement.xhtml">Measurement</a> &gt; GetMeasurements </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the recorded measurements. </p>
<p>This will be a list of the execution durations for all the OpenCl kernels. </p><dl class="section return"><dt>Returns</dt><dd>Recorded measurements </dd></dl>

<p>Implements <a class="el" href="classarmnn_1_1_instrument.xhtml#a4055fcf05306a7478db7e192cf1e679d">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_open_cl_timer_8cpp_source.xhtml#l00088">88</a> of file <a class="el" href="_open_cl_timer_8cpp_source.xhtml">OpenClTimer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_open_cl_timer_8hpp_source.xhtml#l00034">OpenClTimer::GetName()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_cl_timer_8hpp_source.xhtml#l00034">OpenClTimer::GetName()</a>.</p>
<div class="fragment"><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;{</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    std::vector&lt;Measurement&gt; measurements;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    cl_command_queue_properties clQueueProperties = CLScheduler::get().queue().getInfo&lt;CL_QUEUE_PROPERTIES&gt;();</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordtype">int</span> idx = 0;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; kernel : m_Kernels)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        std::string name = std::string(this-&gt;<a class="code" href="classarmnn_1_1_open_cl_timer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">GetName</a>()) + <span class="stringliteral">&quot;/&quot;</span> + std::to_string(idx++) + <span class="stringliteral">&quot;: &quot;</span> + kernel.m_Name;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordtype">double</span> timeUs = 0.0;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">if</span>((clQueueProperties &amp; CL_QUEUE_PROFILING_ENABLE) != 0)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="comment">// Wait for the event to finish before accessing profile results.</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            kernel.m_Event.wait();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            cl_ulong start = kernel.m_Event.getProfilingInfo&lt;CL_PROFILING_COMMAND_START&gt;();</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            cl_ulong end   = kernel.m_Event.getProfilingInfo&lt;CL_PROFILING_COMMAND_END&gt;();</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            timeUs = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start) / 1000.0;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        measurements.emplace_back(name, timeUs, Measurement::Unit::TIME_US);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> measurements;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_open_cl_timer_xhtml_a7ddf0cf6f620d59c10e63495ace795d0"><div class="ttname"><a href="classarmnn_1_1_open_cl_timer.xhtml#a7ddf0cf6f620d59c10e63495ace795d0">armnn::OpenClTimer::GetName</a></div><div class="ttdeci">const char * GetName() const override</div><div class="ttdoc">Get the name of the timer. </div><div class="ttdef"><b>Definition:</b> <a href="_open_cl_timer_8hpp_source.xhtml#l00034">OpenClTimer.hpp:34</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7ddf0cf6f620d59c10e63495ace795d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ddf0cf6f620d59c10e63495ace795d0">&#9670;&nbsp;</a></span>GetName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* GetName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the name of the timer. </p>
<dl class="section return"><dt>Returns</dt><dd>Name of the timer </dd></dl>

<p>Implements <a class="el" href="classarmnn_1_1_instrument.xhtml#afcc1c3a20bd2860e0ddd21674389246f">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_open_cl_timer_8hpp_source.xhtml#l00034">34</a> of file <a class="el" href="_open_cl_timer_8hpp_source.xhtml">OpenClTimer.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4e2dd387ba6f0dc5164b4cdf8de3262aaa4ecfc70574394990cf17bd83df499f7">armnn::Event</a>, and <a class="el" href="_open_cl_timer_8cpp_source.xhtml#l00088">OpenClTimer::GetMeasurements()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_cl_timer_8cpp_source.xhtml#l00088">OpenClTimer::GetMeasurements()</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{ <span class="keywordflow">return</span> <span class="stringliteral">&quot;OpenClKernelTimer&quot;</span>; }</div></div><!-- fragment -->
</div>
</div>
<a id="a156f3866ca69d98b4d9e6e1c1b3ec7da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a156f3866ca69d98b4d9e6e1c1b3ec7da">&#9670;&nbsp;</a></span>Start()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Start </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Start the OpenCl timer. </p>

<p>Implements <a class="el" href="classarmnn_1_1_instrument.xhtml#a63ce9b9c6710c0dae98f88d6c602313a">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_open_cl_timer_8cpp_source.xhtml#l00021">21</a> of file <a class="el" href="_open_cl_timer_8cpp_source.xhtml">OpenClTimer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>
<div class="fragment"><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    m_Kernels.clear();</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">auto</span> interceptor = [<span class="keyword">this</span>](  cl_command_queue command_queue,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                                cl_kernel        kernel,</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                                cl_uint          work_dim,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                                <span class="keyword">const</span> <span class="keywordtype">size_t</span>    *gwo,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                                <span class="keyword">const</span> <span class="keywordtype">size_t</span>    *gws,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                                <span class="keyword">const</span> <span class="keywordtype">size_t</span>    *lws,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                                cl_uint          num_events_in_wait_list,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                                <span class="keyword">const</span> cl_event * event_wait_list,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                                cl_event *       event)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(event);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            cl_int retVal = 0;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            <span class="comment">// Get the name of the kernel</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            cl::Kernel retainedKernel(kernel, <span class="keyword">true</span>);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            std::stringstream ss;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            ss &lt;&lt; retainedKernel.getInfo&lt;CL_KERNEL_FUNCTION_NAME&gt;();</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="comment">// Embed workgroup sizes into the name</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="keywordflow">if</span>(gws != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                ss &lt;&lt; <span class="stringliteral">&quot; GWS[&quot;</span> &lt;&lt; gws[0] &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; gws[1] &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; gws[2] &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="keywordflow">if</span>(lws != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                ss &lt;&lt; <span class="stringliteral">&quot; LWS[&quot;</span> &lt;&lt; lws[0] &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; lws[1] &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; lws[2] &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            cl_event customEvent;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="comment">// Forward to original OpenCl function</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            retVal = m_OriginalEnqueueFunction( command_queue,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                                                kernel,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                                                work_dim,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                                                gwo,</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                                                gws,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                                lws,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                                num_events_in_wait_list,</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                                event_wait_list,</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                                &amp;customEvent);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="comment">// Store the Kernel info for later GetMeasurements() call</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            m_Kernels.emplace_back(ss.str(), customEvent);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keywordflow">if</span>(event != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                <span class="comment">//return cl_event from the intercepted call</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                clRetainEvent(customEvent);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                *<span class="keyword">event</span> = customEvent;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">return</span> retVal;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        };</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    m_OriginalEnqueueFunction = CLSymbols::get().clEnqueueNDRangeKernel_ptr;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    CLSymbols::get().clEnqueueNDRangeKernel_ptr = interceptor;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a634c58de2126b4a4e6a2a093e60e1290"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a634c58de2126b4a4e6a2a093e60e1290">&#9670;&nbsp;</a></span>Stop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Stop </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Stop the OpenCl timer. </p>

<p>Implements <a class="el" href="classarmnn_1_1_instrument.xhtml#a4d7bebcc22c1b09cf961b83bf84033b6">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_open_cl_timer_8cpp_source.xhtml#l00083">83</a> of file <a class="el" href="_open_cl_timer_8cpp_source.xhtml">OpenClTimer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    CLSymbols::get().clEnqueueNDRangeKernel_ptr = m_OriginalEnqueueFunction;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/backends/cl/<a class="el" href="_open_cl_timer_8hpp_source.xhtml">OpenClTimer.hpp</a></li>
<li>src/backends/cl/<a class="el" href="_open_cl_timer_8cpp_source.xhtml">OpenClTimer.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_open_cl_timer.xhtml">OpenClTimer</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:49 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
