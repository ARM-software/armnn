<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/ExecuteNetwork/ExecuteNetwork.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_execute_network_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ExecuteNetwork.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_network_execution_utils_8hpp_source.xhtml">NetworkExecutionUtils/NetworkExecutionUtils.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_execute_network_program_options_8hpp_source.xhtml">ExecuteNetworkProgramOptions.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_i_async_execution_callback_8hpp_source.xhtml">armnn/IAsyncExecutionCallback.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_async_execution_callback_8hpp_source.xhtml">AsyncExecutionCallback.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_logging_8hpp_source.xhtml">armnn/Logging.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_filesystem_8hpp_source.xhtml">armnnUtils/Filesystem.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_t_container_8hpp_source.xhtml">armnnUtils/TContainer.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_profiling_options_converter_8hpp_source.xhtml">ProfilingOptionsConverter.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_inference_test_8hpp_source.xhtml">InferenceTest.hpp</a>&gt;</code><br />
<code>#include &lt;future&gt;</code><br />
</div>
<p><a href="_execute_network_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab9be7e320a1879b362298cb198250dae"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_execute_network_8cpp.xhtml#ab9be7e320a1879b362298cb198250dae">CheckInferenceTimeThreshold</a> (const std::chrono::duration&lt; double, std::milli &gt; &amp;duration, const double &amp;thresholdTime)</td></tr>
<tr class="memdesc:ab9be7e320a1879b362298cb198250dae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Given a measured duration and a threshold time tell the user whether we succeeded or not.  <a href="#ab9be7e320a1879b362298cb198250dae">More...</a><br /></td></tr>
<tr class="separator:ab9be7e320a1879b362298cb198250dae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc1c3398fd2de1051edf23a171cfa01b"><td class="memTemplParams" colspan="2">template&lt;typename TParser , typename TDataType &gt; </td></tr>
<tr class="memitem:afc1c3398fd2de1051edf23a171cfa01b"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="_execute_network_8cpp.xhtml#afc1c3398fd2de1051edf23a171cfa01b">MainImpl</a> (const <a class="el" href="struct_execute_network_params.xhtml">ExecuteNetworkParams</a> &amp;params, const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> &gt; &amp;runtime=nullptr)</td></tr>
<tr class="separator:afc1c3398fd2de1051edf23a171cfa01b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0f2228420376f4db7e1274f2b41667c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_execute_network_8cpp.xhtml#ac0f2228420376f4db7e1274f2b41667c">main</a> (int argc, const char *argv[])</td></tr>
<tr class="separator:ac0f2228420376f4db7e1274f2b41667c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="ab9be7e320a1879b362298cb198250dae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9be7e320a1879b362298cb198250dae">&#9670;&nbsp;</a></span>CheckInferenceTimeThreshold()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CheckInferenceTimeThreshold </td>
          <td>(</td>
          <td class="paramtype">const std::chrono::duration&lt; double, std::milli &gt; &amp;&#160;</td>
          <td class="paramname"><em>duration</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>thresholdTime</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Given a measured duration and a threshold time tell the user whether we succeeded or not. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">duration</td><td>the measured inference duration. </td></tr>
    <tr><td class="paramname">thresholdTime</td><td>the threshold time in milliseconds. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>false if the measured time exceeded the threshold. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_execute_network_8cpp_source.xhtml#l00048">48</a> of file <a class="el" href="_execute_network_8cpp_source.xhtml">ExecuteNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="struct_execute_network_params.xhtml#a721fa5f104533ca06589330accc2857da34feb52e49daeff4cae20f668187ec5c">ExecuteNetworkParams::ArmNNTfLiteDelegate</a>, <a class="el" href="_profiling_options_converter_8cpp_source.xhtml#l00017">arm::pipe::ConvertExternalProfilingOptions()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00019">armnn::GetTimeDuration()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00014">armnn::GetTimeNow()</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00058">ExecuteNetworkParams::m_DontPrintOutputs</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00039">ExecuteNetworkParams::m_GenerateTensorData</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00042">ExecuteNetworkParams::m_InputNames</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00043">ExecuteNetworkParams::m_InputTensorDataFilePaths</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00044">ExecuteNetworkParams::m_InputTensorShapes</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00045">ExecuteNetworkParams::m_InputTypes</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00047">ExecuteNetworkParams::m_Iterations</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00049">ExecuteNetworkParams::m_ModelPath</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00053">ExecuteNetworkParams::m_OutputNames</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00054">ExecuteNetworkParams::m_OutputTensorFiles</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00055">ExecuteNetworkParams::m_OutputTypes</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00153">IRuntime::CreationOptions::m_ProfilingOptions</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00067">ExecuteNetworkParams::m_TfLiteExecutor</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00063">ExecuteNetworkParams::m_ThresholdTime</a>, <a class="el" href="_numeric_cast_8hpp_source.xhtml#l00035">armnn::numeric_cast()</a>, <a class="el" href="_delegate_options_8hpp_source.xhtml#l00244">DelegateOptions::SetExternalProfilingParams()</a>, <a class="el" href="namespacearmnn_delegate.xhtml#aaab840e387d9a4e7de223fbc8c969eb3">armnnDelegate::TfLiteArmnnDelegateCreate()</a>, and <a class="el" href="namespacearmnn_delegate.xhtml#a29bbb05765039d65532d61301b56749e">armnnDelegate::TfLiteArmnnDelegateDelete()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_execute_network_8cpp_source.xhtml#l00379">MainImpl()</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Inference time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                    &lt;&lt; std::fixed &lt;&lt; duration.count() &lt;&lt; <span class="stringliteral">&quot; ms\n&quot;</span>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="comment">// If thresholdTime == 0.0 (default), then it hasn&#39;t been supplied at command line</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">if</span> (thresholdTime != 0.0)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Threshold time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                        &lt;&lt; std::fixed &lt;&lt; thresholdTime &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keyword">auto</span> thresholdMinusInference = thresholdTime - duration.count();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Threshold time - Inference time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                        &lt;&lt; std::fixed &lt;&lt; thresholdMinusInference &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;       <span class="keywordflow">if</span> (thresholdMinusInference &lt; 0)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            std::string errorMessage = <span class="stringliteral">&quot;Elapsed inference time is greater than provided threshold time.&quot;</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; errorMessage;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div><div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac0f2228420376f4db7e1274f2b41667c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0f2228420376f4db7e1274f2b41667c">&#9670;&nbsp;</a></span>main()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int main </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_execute_network_8cpp_source.xhtml#l00996">996</a> of file <a class="el" href="_execute_network_8cpp_source.xhtml">ExecuteNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="struct_execute_network_params.xhtml#a721fa5f104533ca06589330accc2857da34feb52e49daeff4cae20f668187ec5c">ExecuteNetworkParams::ArmNNTfLiteDelegate</a>, <a class="el" href="struct_execute_network_params.xhtml#a721fa5f104533ca06589330accc2857daf36e3b2e1fe4ec94cab683d237883fee">ExecuteNetworkParams::ArmNNTfLiteParser</a>, <a class="el" href="_utils_8cpp_source.xhtml#l00018">armnn::ConfigureLogging()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00049">IRuntime::Create()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">armnn::Debug</a>, <a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">armnn::Info</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00038">ExecuteNetworkParams::m_EnableProfiling</a>, <a class="el" href="_execute_network_program_options_8hpp_source.xhtml#l00044">ProgramOptions::m_ExNetParams</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00048">ExecuteNetworkParams::m_ModelFormat</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00052">ExecuteNetworkParams::m_OutputDetailsOnlyToStdOut</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00051">ExecuteNetworkParams::m_OutputDetailsToStdOut</a>, <a class="el" href="_execute_network_program_options_8hpp_source.xhtml#l00045">ProgramOptions::m_RuntimeOptions</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00067">ExecuteNetworkParams::m_TfLiteExecutor</a>, <a class="el" href="_execute_network_program_options_8cpp_source.xhtml#l00457">ProgramOptions::ParseOptions()</a>, and <a class="el" href="struct_execute_network_params.xhtml#a721fa5f104533ca06589330accc2857da979cb18d483aeb3c0c636e340ba011df">ExecuteNetworkParams::TfliteInterpreter</a>.</p>
<div class="fragment"><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;{</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    <span class="comment">// Configures logging for both the ARMNN library and this test program.</span></div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;<span class="preprocessor">    #ifdef NDEBUG</span></div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3d">armnn::LogSeverity</a> level = <a class="code" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">armnn::LogSeverity::Info</a>;</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;<span class="preprocessor">    #else</span></div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3d">armnn::LogSeverity</a> level = <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">armnn::LogSeverity::Debug</a>;</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa59f7a819c3e29d10ffc41e5c0616872">armnn::ConfigureLogging</a>(<span class="keyword">true</span>, <span class="keyword">true</span>, level);</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    <span class="comment">// Get ExecuteNetwork parameters and runtime options from command line</span></div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    <span class="comment">// This might throw an InvalidArgumentException if the user provided invalid inputs</span></div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;    <a class="code" href="struct_program_options.xhtml">ProgramOptions</a> <a class="code" href="struct_program_options.xhtml">ProgramOptions</a>;</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;        ProgramOptions.<a class="code" href="struct_program_options.xhtml#a59cc301c978c454abd5ce1851a63e59e">ParseOptions</a>(argc, argv);</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    } <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception &amp;e){</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; e.what();</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    }</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    <span class="keywordflow">if</span> ((ProgramOptions.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>.<a class="code" href="struct_execute_network_params.xhtml#ae96fc745917a3a0c0de7a818c9a05012">m_OutputDetailsToStdOut</a> ||</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;         ProgramOptions.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>.<a class="code" href="struct_execute_network_params.xhtml#ab17deb382179697b4702cc4f909e71f8">m_OutputDetailsOnlyToStdOut</a>)</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;         &amp;&amp; !ProgramOptions.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>.<a class="code" href="struct_execute_network_params.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>)</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;    {</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;You must enable profiling if you would like to output layer details&quot;</span>;</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    }</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    std::string modelFormat = ProgramOptions.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>.<a class="code" href="struct_execute_network_params.xhtml#a86800ee44cdb3d1bfd169ec4200212d2">m_ModelFormat</a>;</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <span class="comment">// Forward to implementation based on the parser type</span></div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;armnn&quot;</span>) != std::string::npos)</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    {</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;<span class="preprocessor">    #if defined(ARMNN_SERIALIZER)</span></div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;        std::shared_ptr&lt;armnn::IRuntime&gt; runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(ProgramOptions.<a class="code" href="struct_program_options.xhtml#a521b82f1467d6ede7a11db36f4d0823d">m_RuntimeOptions</a>));</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;        <span class="keywordflow">return</span> MainImpl&lt;armnnDeserializer::IDeserializer, float&gt;(ProgramOptions.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>, runtime);</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;<span class="preprocessor">    #else</span></div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Not built with serialization support.&quot;</span>;</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    }</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (modelFormat.find(<span class="stringliteral">&quot;onnx&quot;</span>) != std::string::npos)</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    {</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;<span class="preprocessor">    #if defined(ARMNN_ONNX_PARSER)</span></div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;        std::shared_ptr&lt;armnn::IRuntime&gt; runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(ProgramOptions.<a class="code" href="struct_program_options.xhtml#a521b82f1467d6ede7a11db36f4d0823d">m_RuntimeOptions</a>));</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;        <span class="keywordflow">return</span> MainImpl&lt;armnnOnnxParser::IOnnxParser, float&gt;(ProgramOptions.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>, runtime);</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;<span class="preprocessor">    #else</span></div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Not built with Onnx parser support.&quot;</span>;</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    }</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(modelFormat.find(<span class="stringliteral">&quot;tflite&quot;</span>) != std::string::npos)</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;    {</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;        <span class="keywordflow">if</span> (ProgramOptions.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>.<a class="code" href="struct_execute_network_params.xhtml#a876462c8d3a74b51c890820df24f42f9">m_TfLiteExecutor</a> == <a class="code" href="struct_execute_network_params.xhtml#a721fa5f104533ca06589330accc2857daf36e3b2e1fe4ec94cab683d237883fee">ExecuteNetworkParams::TfLiteExecutor::ArmNNTfLiteParser</a>)</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;        {</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;<span class="preprocessor">            #if defined(ARMNN_TF_LITE_PARSER)</span></div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;                std::shared_ptr&lt;armnn::IRuntime&gt; runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(ProgramOptions.<a class="code" href="struct_program_options.xhtml#a521b82f1467d6ede7a11db36f4d0823d">m_RuntimeOptions</a>));</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;                <span class="keywordflow">return</span> MainImpl&lt;armnnTfLiteParser::ITfLiteParser, float&gt;(ProgramOptions.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>, runtime);</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;<span class="preprocessor">            #else</span></div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Not built with Tensorflow-Lite parser support.&quot;</span>;</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;                <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;<span class="preprocessor">            #endif</span></div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;        }</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ProgramOptions.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>.<a class="code" href="struct_execute_network_params.xhtml#a876462c8d3a74b51c890820df24f42f9">m_TfLiteExecutor</a> ==</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;                    <a class="code" href="struct_execute_network_params.xhtml#a721fa5f104533ca06589330accc2857da34feb52e49daeff4cae20f668187ec5c">ExecuteNetworkParams::TfLiteExecutor::ArmNNTfLiteDelegate</a> ||</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;                ProgramOptions.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>.<a class="code" href="struct_execute_network_params.xhtml#a876462c8d3a74b51c890820df24f42f9">m_TfLiteExecutor</a> ==</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;                    <a class="code" href="struct_execute_network_params.xhtml#a721fa5f104533ca06589330accc2857da979cb18d483aeb3c0c636e340ba011df">ExecuteNetworkParams::TfLiteExecutor::TfliteInterpreter</a>)</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;        {</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;<span class="preprocessor">        #if defined(ARMNN_TF_LITE_DELEGATE)</span></div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;            <span class="keywordflow">return</span> TfLiteDelegateMainImpl(ProgramOptions.<a class="code" href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">m_ExNetParams</a>, ProgramOptions.<a class="code" href="struct_program_options.xhtml#a521b82f1467d6ede7a11db36f4d0823d">m_RuntimeOptions</a>);</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;<span class="preprocessor">        #else</span></div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Not built with Arm NN Tensorflow-Lite delegate support.&quot;</span>;</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;            <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;<span class="preprocessor">        #endif</span></div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;        }</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;    }</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    {</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Unknown model format: &#39;&quot;</span> &lt;&lt; modelFormat</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;                         &lt;&lt; <span class="stringliteral">&quot;&#39;. Please include &#39;tflite&#39; or &#39;onnx&#39;&quot;</span>;</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;    }</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;}</div><div class="ttc" id="struct_program_options_xhtml_a85f77fe8adc087571402b9e204ad77dd"><div class="ttname"><a href="struct_program_options.xhtml#a85f77fe8adc087571402b9e204ad77dd">ProgramOptions::m_ExNetParams</a></div><div class="ttdeci">ExecuteNetworkParams m_ExNetParams</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_program_options_8hpp_source.xhtml#l00044">ExecuteNetworkProgramOptions.hpp:44</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00049">Runtime.cpp:49</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a721fa5f104533ca06589330accc2857da34feb52e49daeff4cae20f668187ec5c"><div class="ttname"><a href="struct_execute_network_params.xhtml#a721fa5f104533ca06589330accc2857da34feb52e49daeff4cae20f668187ec5c">ExecuteNetworkParams::TfLiteExecutor::ArmNNTfLiteDelegate</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ab17deb382179697b4702cc4f909e71f8"><div class="ttname"><a href="struct_execute_network_params.xhtml#ab17deb382179697b4702cc4f909e71f8">ExecuteNetworkParams::m_OutputDetailsOnlyToStdOut</a></div><div class="ttdeci">bool m_OutputDetailsOnlyToStdOut</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00052">ExecuteNetworkParams.hpp:52</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa59f7a819c3e29d10ffc41e5c0616872"><div class="ttname"><a href="namespacearmnn.xhtml#aa59f7a819c3e29d10ffc41e5c0616872">armnn::ConfigureLogging</a></div><div class="ttdeci">void ConfigureLogging(bool printToStandardOutput, bool printToDebugOutput, LogSeverity severity)</div><div class="ttdoc">Configures the logging behaviour of the ARMNN library. </div><div class="ttdef"><b>Definition:</b> <a href="_utils_8cpp_source.xhtml#l00018">Utils.cpp:18</a></div></div>
<div class="ttc" id="struct_program_options_xhtml_a521b82f1467d6ede7a11db36f4d0823d"><div class="ttname"><a href="struct_program_options.xhtml#a521b82f1467d6ede7a11db36f4d0823d">ProgramOptions::m_RuntimeOptions</a></div><div class="ttdeci">armnn::IRuntime::CreationOptions m_RuntimeOptions</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_program_options_8hpp_source.xhtml#l00045">ExecuteNetworkProgramOptions.hpp:45</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a721fa5f104533ca06589330accc2857daf36e3b2e1fe4ec94cab683d237883fee"><div class="ttname"><a href="struct_execute_network_params.xhtml#a721fa5f104533ca06589330accc2857daf36e3b2e1fe4ec94cab683d237883fee">ExecuteNetworkParams::TfLiteExecutor::ArmNNTfLiteParser</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a876462c8d3a74b51c890820df24f42f9"><div class="ttname"><a href="struct_execute_network_params.xhtml#a876462c8d3a74b51c890820df24f42f9">ExecuteNetworkParams::m_TfLiteExecutor</a></div><div class="ttdeci">TfLiteExecutor m_TfLiteExecutor</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00067">ExecuteNetworkParams.hpp:67</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ae96fc745917a3a0c0de7a818c9a05012"><div class="ttname"><a href="struct_execute_network_params.xhtml#ae96fc745917a3a0c0de7a818c9a05012">ExecuteNetworkParams::m_OutputDetailsToStdOut</a></div><div class="ttdeci">bool m_OutputDetailsToStdOut</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00051">ExecuteNetworkParams.hpp:51</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875"><div class="ttname"><a href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">armnn::LogSeverity::Info</a></div></div>
<div class="ttc" id="struct_program_options_xhtml_a59cc301c978c454abd5ce1851a63e59e"><div class="ttname"><a href="struct_program_options.xhtml#a59cc301c978c454abd5ce1851a63e59e">ProgramOptions::ParseOptions</a></div><div class="ttdeci">void ParseOptions(int ac, const char *av[])</div><div class="ttdoc">Parses program options from the command line or another source and stores the values in member variab...</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_program_options_8cpp_source.xhtml#l00457">ExecuteNetworkProgramOptions.cpp:457</a></div></div>
<div class="ttc" id="struct_program_options_xhtml"><div class="ttname"><a href="struct_program_options.xhtml">ProgramOptions</a></div><div class="ttdoc">Holds and parses program options for the ExecuteNetwork application. </div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_program_options_8hpp_source.xhtml#l00021">ExecuteNetworkProgramOptions.hpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a93a3ba385cad27c4774e5fe64c025d3d"><div class="ttname"><a href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3d">armnn::LogSeverity</a></div><div class="ttdeci">LogSeverity</div><div class="ttdef"><b>Definition:</b> <a href="_utils_8hpp_source.xhtml#l00014">Utils.hpp:14</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a86800ee44cdb3d1bfd169ec4200212d2"><div class="ttname"><a href="struct_execute_network_params.xhtml#a86800ee44cdb3d1bfd169ec4200212d2">ExecuteNetworkParams::m_ModelFormat</a></div><div class="ttdeci">std::string m_ModelFormat</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00048">ExecuteNetworkParams.hpp:48</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">armnn::LayerType::Debug</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a26d42007440bb01a1a6d0ab3b5a657ee"><div class="ttname"><a href="struct_execute_network_params.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">ExecuteNetworkParams::m_EnableProfiling</a></div><div class="ttdeci">bool m_EnableProfiling</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00038">ExecuteNetworkParams.hpp:38</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a721fa5f104533ca06589330accc2857da979cb18d483aeb3c0c636e340ba011df"><div class="ttname"><a href="struct_execute_network_params.xhtml#a721fa5f104533ca06589330accc2857da979cb18d483aeb3c0c636e340ba011df">ExecuteNetworkParams::TfLiteExecutor::TfliteInterpreter</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afc1c3398fd2de1051edf23a171cfa01b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc1c3398fd2de1051edf23a171cfa01b">&#9670;&nbsp;</a></span>MainImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int MainImpl </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="struct_execute_network_params.xhtml">ExecuteNetworkParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_runtime.xhtml">armnn::IRuntime</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>runtime</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_execute_network_8cpp_source.xhtml#l00379">379</a> of file <a class="el" href="_execute_network_8cpp_source.xhtml">ExecuteNetwork.cpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="_execute_network_8cpp_source.xhtml#l00048">CheckInferenceTimeThreshold()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00796">InferenceModel&lt; IParser, TDataType &gt;::CreateWorkingMemHandle()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00779">InferenceModel&lt; IParser, TDataType &gt;::GetInputQuantizationParams()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00582">InferenceModel&lt; IParser, TDataType &gt;::GetInputSize()</a>, <a class="el" href="_async_execution_callback_8cpp_source.xhtml#l00046">AsyncCallbackManager::GetNewCallback()</a>, <a class="el" href="_async_execution_callback_8cpp_source.xhtml#l00060">AsyncCallbackManager::GetNotifiedCallback()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00761">InferenceModel&lt; IParser, TDataType &gt;::GetOutputBindingInfo()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00767">InferenceModel&lt; IParser, TDataType &gt;::GetOutputBindingInfos()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00588">InferenceModel&lt; IParser, TDataType &gt;::GetOutputSize()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00019">armnn::GetTimeDuration()</a>, <a class="el" href="_timer_8hpp_source.xhtml#l00014">armnn::GetTimeNow()</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00028">ExecuteNetworkParams::m_AllowExpandedDims</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00098">Params::m_AllowExpandedDims</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00113">Params::m_AsyncEnabled</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00029">ExecuteNetworkParams::m_CachedNetworkFilePath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00110">Params::m_CachedNetworkFilePath</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00030">ExecuteNetworkParams::m_ComputeDevices</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00095">Params::m_ComputeDevices</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00031">ExecuteNetworkParams::m_Concurrent</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00032">ExecuteNetworkParams::m_DequantizeOutput</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00058">ExecuteNetworkParams::m_DontPrintOutputs</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00033">ExecuteNetworkParams::m_DynamicBackendsPath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00096">Params::m_DynamicBackendsPath</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00034">ExecuteNetworkParams::m_EnableBf16TurboMode</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00102">Params::m_EnableBf16TurboMode</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00035">ExecuteNetworkParams::m_EnableFastMath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00106">Params::m_EnableFastMath</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00036">ExecuteNetworkParams::m_EnableFp16TurboMode</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00101">Params::m_EnableFp16TurboMode</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00037">ExecuteNetworkParams::m_EnableLayerDetails</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00038">ExecuteNetworkParams::m_EnableProfiling</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00039">ExecuteNetworkParams::m_GenerateTensorData</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00069">ExecuteNetworkParams::m_ImportInputsIfAligned</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00115">Params::m_ImportInputsIfAligned</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00040">ExecuteNetworkParams::m_InferOutputShape</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00105">Params::m_InferOutputShape</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00092">Params::m_InputBindings</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00042">ExecuteNetworkParams::m_InputNames</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00093">Params::m_InputShapes</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00043">ExecuteNetworkParams::m_InputTensorDataFilePaths</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00044">ExecuteNetworkParams::m_InputTensorShapes</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00045">ExecuteNetworkParams::m_InputTypes</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00046">ExecuteNetworkParams::m_IsModelBinary</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00099">Params::m_IsModelBinary</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00047">ExecuteNetworkParams::m_Iterations</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00066">ExecuteNetworkParams::m_MLGOTuningFilePath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00112">Params::m_MLGOTuningFilePath</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00049">ExecuteNetworkParams::m_ModelPath</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00091">Params::m_ModelPath</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00050">ExecuteNetworkParams::m_NumberOfThreads</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00111">Params::m_NumberOfThreads</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00094">Params::m_OutputBindings</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00052">ExecuteNetworkParams::m_OutputDetailsOnlyToStdOut</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00109">Params::m_OutputDetailsOnlyToStdOut</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00051">ExecuteNetworkParams::m_OutputDetailsToStdOut</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00108">Params::m_OutputDetailsToStdOut</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00053">ExecuteNetworkParams::m_OutputNames</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00054">ExecuteNetworkParams::m_OutputTensorFiles</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00055">ExecuteNetworkParams::m_OutputTypes</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00056">ExecuteNetworkParams::m_ParseUnsupported</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00104">Params::m_ParseUnsupported</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00057">ExecuteNetworkParams::m_PrintIntermediate</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00103">Params::m_PrintIntermediateLayers</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00059">ExecuteNetworkParams::m_QuantizeInput</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00070">ExecuteNetworkParams::m_ReuseBuffers</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00060">ExecuteNetworkParams::m_SaveCachedNetwork</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00107">Params::m_SaveCachedNetwork</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00062">ExecuteNetworkParams::m_SubgraphId</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00097">Params::m_SubgraphId</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00068">ExecuteNetworkParams::m_ThreadPoolSize</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00114">Params::m_ThreadPoolSize</a>, <a class="el" href="_execute_network_params_8hpp_source.xhtml#l00063">ExecuteNetworkParams::m_ThresholdTime</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00100">Params::m_VisualizePostOptimizationModel</a>, <a class="el" href="_network_execution_utils_8cpp_source.xhtml#l00231">PopulateTensorWithData()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00594">InferenceModel&lt; IParser, TDataType &gt;::Run()</a>, <a class="el" href="_inference_model_8hpp_source.xhtml#l00660">InferenceModel&lt; IParser, TDataType &gt;::RunAsync()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00032">Exception::what()</a>.</p>
<div class="fragment"><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;{</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacestd_1_1chrono.xhtml">std::chrono</a>;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    std::vector&lt;std::vector&lt;armnnUtils::TContainer&gt;&gt; inputs;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    std::vector&lt;std::vector&lt;armnnUtils::TContainer&gt;&gt; outputs;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    {</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="comment">// Creates an InferenceModel, which will parse the model and load it into an IRuntime.</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <span class="keyword">typename</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">InferenceModel&lt;TParser, TDataType&gt;::Params</a> inferenceModelParams;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a>                      = params.<a class="code" href="struct_execute_network_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a>;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a9ef8ddbeee4b869e4c68eb2ed278b8d9">m_AllowExpandedDims</a>              = params.<a class="code" href="struct_execute_network_params.xhtml#a9ef8ddbeee4b869e4c68eb2ed278b8d9">m_AllowExpandedDims</a>;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">m_IsModelBinary</a>                  = params.<a class="code" href="struct_execute_network_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">m_IsModelBinary</a>;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">m_ComputeDevices</a>                 = params.<a class="code" href="struct_execute_network_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">m_ComputeDevices</a>;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>            = params.<a class="code" href="struct_execute_network_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#acde2af8cbbd224a9f94e509ca538a775">m_PrintIntermediateLayers</a>        = params.<a class="code" href="struct_execute_network_params.xhtml#a5acc5b4076604db15ee13ee19fa623c4">m_PrintIntermediate</a>;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aaae50a6c0f73e4c210c2e4331c439482">m_VisualizePostOptimizationModel</a> = params.<a class="code" href="struct_execute_network_params.xhtml#a7efc68309e76bfefbfa16fe94501b060">m_EnableLayerDetails</a>;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">m_ParseUnsupported</a>               = params.<a class="code" href="struct_execute_network_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">m_ParseUnsupported</a>;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2a245a63e87f363df491ad8c35be54c5">m_InferOutputShape</a>               = params.<a class="code" href="struct_execute_network_params.xhtml#a2a245a63e87f363df491ad8c35be54c5">m_InferOutputShape</a>;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a66f9597b152215daba3211379dad63d3">m_EnableFastMath</a>                 = params.<a class="code" href="struct_execute_network_params.xhtml#a66f9597b152215daba3211379dad63d3">m_EnableFastMath</a>;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a9a04b8c7f19a84f63125edec509b6d53">m_SaveCachedNetwork</a>              = params.<a class="code" href="struct_execute_network_params.xhtml#a9a04b8c7f19a84f63125edec509b6d53">m_SaveCachedNetwork</a>;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a9f8881646a38f828f92d3354930c4165">m_CachedNetworkFilePath</a>          = params.<a class="code" href="struct_execute_network_params.xhtml#a9f8881646a38f828f92d3354930c4165">m_CachedNetworkFilePath</a>;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#adc650e032e7fce99f15e2bf903e7167b">m_NumberOfThreads</a>                = params.<a class="code" href="struct_execute_network_params.xhtml#adc650e032e7fce99f15e2bf903e7167b">m_NumberOfThreads</a>;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ac609a217f4de4c647422dbb358a5f2ef">m_MLGOTuningFilePath</a>             = params.<a class="code" href="struct_execute_network_params.xhtml#ac609a217f4de4c647422dbb358a5f2ef">m_MLGOTuningFilePath</a>;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#af5e88d9bb91dff85ad5a6f7e190aff4e">m_AsyncEnabled</a>                   = params.<a class="code" href="struct_execute_network_params.xhtml#abf3cb45be3828b72b4ac08f87ac6c779">m_Concurrent</a>;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a7adc5dcfe3d76ac489f253c4d5f439c8">m_ThreadPoolSize</a>                 = params.<a class="code" href="struct_execute_network_params.xhtml#a7adc5dcfe3d76ac489f253c4d5f439c8">m_ThreadPoolSize</a>;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ae96fc745917a3a0c0de7a818c9a05012">m_OutputDetailsToStdOut</a>          = params.<a class="code" href="struct_execute_network_params.xhtml#ae96fc745917a3a0c0de7a818c9a05012">m_OutputDetailsToStdOut</a>;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ab17deb382179697b4702cc4f909e71f8">m_OutputDetailsOnlyToStdOut</a>      = params.<a class="code" href="struct_execute_network_params.xhtml#ab17deb382179697b4702cc4f909e71f8">m_OutputDetailsOnlyToStdOut</a>;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a1697b9751b4ba381f89b8c81cd9dfc3c">m_ImportInputsIfAligned</a>          = params.<a class="code" href="struct_execute_network_params.xhtml#a1697b9751b4ba381f89b8c81cd9dfc3c">m_ImportInputsIfAligned</a>;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> std::string&amp; inputName: params.<a class="code" href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">m_InputNames</a>)</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        {</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>.push_back(inputName);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        }</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>.size(); ++i)</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        {</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ad69aa6b4967ce55ee4a915c52c71bf2e">m_InputShapes</a>.push_back(*params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>[i]);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        }</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> std::string&amp; outputName: params.<a class="code" href="struct_execute_network_params.xhtml#a982d4141ecde3eb220a136610d853df2">m_OutputNames</a>)</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        {</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>.push_back(outputName);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        }</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2d4582aa74998c397bd064ae73745b62">m_SubgraphId</a>          = params.<a class="code" href="struct_execute_network_params.xhtml#a2d4582aa74998c397bd064ae73745b62">m_SubgraphId</a>;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a513151623e8d448951a0b94ad1946fbe">m_EnableFp16TurboMode</a> = params.<a class="code" href="struct_execute_network_params.xhtml#a513151623e8d448951a0b94ad1946fbe">m_EnableFp16TurboMode</a>;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a0b99050baebe1d169392461b3a9be08d">m_EnableBf16TurboMode</a> = params.<a class="code" href="struct_execute_network_params.xhtml#a0b99050baebe1d169392461b3a9be08d">m_EnableBf16TurboMode</a>;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <a class="code" href="class_inference_model.xhtml">InferenceModel&lt;TParser, TDataType&gt;</a> model(inferenceModelParams,</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                                 params.<a class="code" href="struct_execute_network_params.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">m_EnableProfiling</a>,</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                                 params.<a class="code" href="struct_execute_network_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>,</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                                 runtime);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> numInputs = inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>.size();</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;QuantizationParams&gt;</a> qParams = params.<a class="code" href="struct_execute_network_params.xhtml#a077f6963fc555d9d42f98cf9ed3e7e03">m_QuantizeInput</a> ?</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                                                      armnn::MakeOptional&lt;QuantizationParams&gt;(</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                                                          model.GetInputQuantizationParams()) :</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                                                      <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>();</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">m_InputTensorDataFilePaths</a>.size() &gt; numInputs)</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        {</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Given network has &quot;</span> &lt;&lt; numInputs &lt;&lt; <span class="stringliteral">&quot; input/s. One input-tensor-data file is required &quot;</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                            &lt;&lt; <span class="stringliteral">&quot;for each input. The user provided &quot;</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                            &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">m_InputTensorDataFilePaths</a>.size()</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                            &lt;&lt; <span class="stringliteral">&quot; input-tensor-data file/s which will be used to fill the input/s.\n&quot;</span>;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        }</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> numOutputs = inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>.size();</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        <span class="comment">// The user is allowed to specify the data type of each output tensor. It is used here to construct the</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        <span class="comment">// result tensors for each iteration. It is possible for the user to specify a type that does not match</span></div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="comment">// the data type of the corresponding model output. It may not make sense, but it is historically allowed.</span></div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <span class="comment">// The potential problem here is a buffer overrun when a larger data type is written into the space for a</span></div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="comment">// smaller one. Issue a warning to highlight the potential problem.</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIdx = 0; outputIdx &lt; model.GetOutputBindingInfos().size(); ++outputIdx)</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        {</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> type = model.GetOutputBindingInfo(outputIdx).second.GetDataType();</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <span class="keywordflow">switch</span> (type)</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            {</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                <span class="comment">// --output-type only supports float, int,  qasymms8 or qasymmu8.</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>:</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                    <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[outputIdx].compare(<span class="stringliteral">&quot;float&quot;</span>) != 0)</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                    {</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;Model output index: &quot;</span> &lt;&lt; outputIdx &lt;&lt; <span class="stringliteral">&quot; has data type Float32. The &quot;</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                                           &lt;&lt; <span class="stringliteral">&quot;corresponding --output-type is &quot;</span> &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[outputIdx] &lt;&lt;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                                           <span class="stringliteral">&quot;. This may cause unexpected problems or random failures.&quot;</span>;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                    }</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a>:</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                    <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[outputIdx].compare(<span class="stringliteral">&quot;qasymmu8&quot;</span>) != 0)</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                    {</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;Model output index: &quot;</span> &lt;&lt; outputIdx &lt;&lt; <span class="stringliteral">&quot; has data type QAsymmU8. The &quot;</span></div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                                           &lt;&lt; <span class="stringliteral">&quot;corresponding --output-type is &quot;</span> &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[outputIdx] &lt;&lt;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                                           <span class="stringliteral">&quot;. This may cause unexpected problems or random failures.&quot;</span>;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                    }</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a>:</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                    <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[outputIdx].compare(<span class="stringliteral">&quot;int&quot;</span>) != 0)</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                    {</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;Model output index: &quot;</span> &lt;&lt; outputIdx &lt;&lt; <span class="stringliteral">&quot; has data type Signed32. The &quot;</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                                           &lt;&lt; <span class="stringliteral">&quot;corresponding --output-type is &quot;</span> &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[outputIdx] &lt;&lt;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                                           <span class="stringliteral">&quot;. This may cause unexpected problems or random failures.&quot;</span>;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                    }</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>:</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                    <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[outputIdx].compare(<span class="stringliteral">&quot;qasymms8&quot;</span>) != 0)</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                    {</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;Model output index: &quot;</span> &lt;&lt; outputIdx &lt;&lt; <span class="stringliteral">&quot; has data type QAsymmS8. The &quot;</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                                           &lt;&lt; <span class="stringliteral">&quot;corresponding --output-type is &quot;</span> &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[outputIdx] &lt;&lt;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                                           <span class="stringliteral">&quot;. This may cause unexpected problems or random failures.&quot;</span>;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                    }</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            }</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        }</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        <span class="keywordflow">if</span> (!params.<a class="code" href="struct_execute_network_params.xhtml#acb9376adc0f7174b7d4295e00315a084">m_ReuseBuffers</a>)</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        {</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>; ++j)</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            {</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                std::vector&lt;armnnUtils::TContainer&gt; inputDataContainers;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numInputs; ++i)</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                {</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                    <span class="comment">// If there are fewer input files given than required for the execution of</span></div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                    <span class="comment">// params.m_Iterations we simply start with the first input file again</span></div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                    <span class="keywordtype">size_t</span> inputFileIndex = j * numInputs + i;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                    <span class="keywordflow">if</span> (!params.<a class="code" href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">m_InputTensorDataFilePaths</a>.empty())</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                    {</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                        inputFileIndex = inputFileIndex % params.<a class="code" href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">m_InputTensorDataFilePaths</a>.size();</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                    }</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&gt;</a> dataFile = params.<a class="code" href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">m_GenerateTensorData</a> ?</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                                                            <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>() :</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                                                            <a class="code" href="namespacearmnn.xhtml">armnn</a>::<a class="code" href="namespacearmnn.xhtml#a77780137c47f528921f6537447060f05">MakeOptional</a>&lt;<a class="code" href="namespacestd.xhtml">std</a>::string&gt;(</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                                                                    params.m_InputTensorDataFilePaths.at(</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                                                                            inputFileIndex));</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numElements = model.GetInputSize(i);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                    <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>.size() &gt; i &amp;&amp; params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>[i])</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                    {</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                        <span class="comment">// If the user has provided a tensor shape for the current input,</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                        <span class="comment">// override numElements</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                        numElements = params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>[i]-&gt;GetNumElements();</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                    }</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                    <a class="code" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> tensorData;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                    <a class="code" href="_network_execution_utils_8cpp.xhtml#afcaa1d8d70f62d28c2cb7779b6155afb">PopulateTensorWithData</a>(tensorData,</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                                           numElements,</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                                           params.<a class="code" href="struct_execute_network_params.xhtml#acc7592cbdfe2e70cbc3794fb1e7eaeb9">m_InputTypes</a>[i],</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                           qParams,</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                                           dataFile);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                    inputDataContainers.push_back(tensorData);</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                }</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                inputs.push_back(inputDataContainers);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            }</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>; ++j)</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            {</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                std::vector&lt;armnnUtils::TContainer&gt; outputDataContainers;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numOutputs; ++i)</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                {</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                    <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;float&quot;</span>) == 0)</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                    {</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                        outputDataContainers.push_back(std::vector&lt;float&gt;(model.GetOutputSize(i)));</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                    }</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;int&quot;</span>) == 0)</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                    {</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                        outputDataContainers.push_back(std::vector&lt;int&gt;(model.GetOutputSize(i)));</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                    }</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;qasymm8&quot;</span>) == 0 ||</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                               params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;qasymmu8&quot;</span>) == 0)</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                    {</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                        outputDataContainers.push_back(std::vector&lt;uint8_t&gt;(model.GetOutputSize(i)));</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                    }</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;qasymms8&quot;</span>) == 0)</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                    {</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                        outputDataContainers.push_back(std::vector&lt;int8_t&gt;(model.GetOutputSize(i)));</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                    }</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                    <span class="keywordflow">else</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                    {</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Unsupported tensor data type \&quot;&quot;</span> &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\&quot;. &quot;</span>;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                    }</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                }</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                outputs.push_back(outputDataContainers);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            }</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        }</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a> &gt; 1)</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        {</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;            std::stringstream msg;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            msg &lt;&lt; <span class="stringliteral">&quot;Network will be executed &quot;</span> &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>;</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#abf3cb45be3828b72b4ac08f87ac6c779">m_Concurrent</a>)</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            {</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                msg &lt;&lt; <span class="stringliteral">&quot; times in an asynchronous manner. &quot;</span>;</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;            }</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            {</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                msg &lt;&lt; <span class="stringliteral">&quot; times successively. &quot;</span>;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            }</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;            msg &lt;&lt; <span class="stringliteral">&quot;The input-tensor-data files will be reused recursively if the user didn&#39;t provide enough to &quot;</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                   <span class="stringliteral">&quot;cover each execution.&quot;</span>;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; msg.str();</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        }</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        <span class="comment">// Synchronous execution</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        <span class="keywordflow">if</span> (!params.<a class="code" href="struct_execute_network_params.xhtml#abf3cb45be3828b72b4ac08f87ac6c779">m_Concurrent</a> &amp;&amp; !params.<a class="code" href="struct_execute_network_params.xhtml#acb9376adc0f7174b7d4295e00315a084">m_ReuseBuffers</a>)</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;        {</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> x = 0; x &lt; params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>; x++)</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;            {</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                <span class="comment">// model.Run returns the inference time elapsed in EnqueueWorkload (in milliseconds)</span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                <span class="keyword">auto</span> inference_duration = model.Run(inputs[x], outputs[x]);</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">m_GenerateTensorData</a>)</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                {</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;The input data was generated, note that the output will not be useful&quot;</span>;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                }</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#ac828647e0c753c3727c8c1f81939f7e4">m_DontPrintOutputs</a>)</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                {</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Printing outputs to console is disabled.&quot;</span>;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                }</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                <span class="comment">// Print output tensors</span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>&amp; infosOut = model.GetOutputBindingInfos();</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numOutputs; i++)</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                {</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; infoOut = infosOut[i].second;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                    <span class="comment">// We&#39;ve made sure before that the number of output files either equals numOutputs, in which</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                    <span class="comment">// case we override those files when processing the results of each iteration (only the result</span></div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                    <span class="comment">// of the last iteration will be stored), or there are enough</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                    <span class="comment">// output files for each output of each iteration.</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                    <span class="keywordtype">size_t</span> outputFileIndex = x * numOutputs + i;</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                    <span class="keywordflow">if</span> (!params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.empty())</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                    {</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                        outputFileIndex = outputFileIndex % params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.size();</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Writing output &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; named: &#39;&quot;</span></div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                                        &lt;&lt; inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>[i]</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                                        &lt;&lt; <span class="stringliteral">&quot;&#39; of iteration: &quot;</span> &lt;&lt; x+1 &lt;&lt; <span class="stringliteral">&quot; to file: &#39;&quot;</span></div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                                        &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>[outputFileIndex] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span>;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                    }</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                    <span class="keyword">auto</span> outputTensorFile = params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.empty()</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                                            ? <span class="stringliteral">&quot;&quot;</span></div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                                            : params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>[outputFileIndex];</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                    <a class="code" href="struct_tensor_printer.xhtml">TensorPrinter</a> printer(inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>[i],</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                                          infoOut,</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                                          outputTensorFile,</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                                          params.<a class="code" href="struct_execute_network_params.xhtml#a85929a48c5e7b16af8f5bc637e45a37f">m_DequantizeOutput</a>,</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                                          !params.<a class="code" href="struct_execute_network_params.xhtml#ac828647e0c753c3727c8c1f81939f7e4">m_DontPrintOutputs</a>);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                    mapbox::util::apply_visitor(printer, outputs[x][i]);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                }</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;\nInference time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                                &lt;&lt; std::fixed &lt;&lt; inference_duration.count() &lt;&lt; <span class="stringliteral">&quot; ms\n&quot;</span>;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                <span class="comment">// If thresholdTime == 0.0 (default), then it hasn&#39;t been supplied at command line</span></div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a> != 0.0)</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                {</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Threshold time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                                    &lt;&lt; std::fixed &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a> &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span>;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                    <span class="keyword">auto</span> thresholdMinusInference = params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a> - inference_duration.count();</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Threshold time - Inference time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                                    &lt;&lt; std::fixed &lt;&lt; thresholdMinusInference &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                    <span class="keywordflow">if</span> (thresholdMinusInference &lt; 0)</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                    {</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                        std::string errorMessage = <span class="stringliteral">&quot;Elapsed inference time is greater than provided threshold time.&quot;</span>;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; errorMessage;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                    }</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                }</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;            }</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        }</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <span class="comment">// Synchronous Execution using a single buffer for input and output data</span></div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(!params.<a class="code" href="struct_execute_network_params.xhtml#abf3cb45be3828b72b4ac08f87ac6c779">m_Concurrent</a>)</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        {</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;            std::vector&lt;armnnUtils::TContainer&gt; input;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;            std::vector&lt;armnnUtils::TContainer&gt; output;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numInputs; ++i)</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;            {</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                <span class="comment">// If there are fewer input files given than required for the execution of</span></div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                <span class="comment">// params.m_Iterations we simply start with the first input file again</span></div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                <span class="keywordtype">size_t</span> inputFileIndex = numInputs + i;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                <span class="keywordflow">if</span> (!params.<a class="code" href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">m_InputTensorDataFilePaths</a>.empty())</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                {</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                    inputFileIndex = inputFileIndex % params.<a class="code" href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">m_InputTensorDataFilePaths</a>.size();</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                }</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&gt;</a> dataFile = params.<a class="code" href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">m_GenerateTensorData</a> ?</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                                                        <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>() :</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                                                        <a class="code" href="namespacearmnn.xhtml">armnn</a>::<a class="code" href="namespacearmnn.xhtml#a77780137c47f528921f6537447060f05">MakeOptional</a>&lt;<a class="code" href="namespacestd.xhtml">std</a>::string&gt;(</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                                                                params.m_InputTensorDataFilePaths.at(</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                                                                        inputFileIndex));</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numElements = model.GetInputSize(i);</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>.size() &gt; i &amp;&amp; params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>[i])</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                {</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                    <span class="comment">// If the user has provided a tensor shape for the current input,</span></div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                    <span class="comment">// override numElements</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                    numElements = params.<a class="code" href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">m_InputTensorShapes</a>[i]-&gt;GetNumElements();</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                }</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                <a class="code" href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a> tensorData;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                <a class="code" href="_network_execution_utils_8cpp.xhtml#afcaa1d8d70f62d28c2cb7779b6155afb">PopulateTensorWithData</a>(tensorData,</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                                       numElements,</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                                       params.<a class="code" href="struct_execute_network_params.xhtml#acc7592cbdfe2e70cbc3794fb1e7eaeb9">m_InputTypes</a>[i],</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                                       qParams,</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                                       dataFile);</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                input.push_back(tensorData);</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;            }</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numOutputs; ++i)</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;            {</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;float&quot;</span>) == 0)</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                {</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                    output.push_back(std::vector&lt;float&gt;(model.GetOutputSize(i)));</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;int&quot;</span>) == 0) {</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                    output.push_back(std::vector&lt;int&gt;(model.GetOutputSize(i)));</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;qasymm8&quot;</span>) == 0 ||</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                           params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;qasymmu8&quot;</span>) == 0)</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                {</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                    output.push_back(std::vector&lt;uint8_t&gt;(model.GetOutputSize(i)));</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i].compare(<span class="stringliteral">&quot;qasymms8&quot;</span>) == 0)</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                {</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                    output.push_back(std::vector&lt;int8_t&gt;(model.GetOutputSize(i)));</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Unsupported tensor data type \&quot;&quot;</span> &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">m_OutputTypes</a>[i] &lt;&lt; <span class="stringliteral">&quot;\&quot;. &quot;</span>;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                    <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                }</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;            }</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            std::vector&lt;std::chrono::duration&lt;double, std::milli&gt;&gt; timings;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            timings.reserve(params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>);</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> x = 0; x &lt; params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>; x++)</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;            {</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                <span class="comment">// model.Run returns the inference time elapsed in EnqueueWorkload (in milliseconds)</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                <span class="keyword">auto</span> inference_duration = model.Run(input, output);</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                timings.push_back(inference_duration);</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;            }</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;            <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">m_GenerateTensorData</a>)</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            {</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;The input data was generated, note that the output will not be useful&quot;</span>;</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            }</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#ac828647e0c753c3727c8c1f81939f7e4">m_DontPrintOutputs</a>)</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;            {</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Printing outputs to console is disabled.&quot;</span>;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            }</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            <span class="comment">// Print output. This only needs to happen once as input is the same for each iteration.</span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> &amp;infosOut = model.GetOutputBindingInfos();</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numOutputs; i++)</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            {</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;infoOut = infosOut[i].second;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                <span class="comment">// We&#39;ve made sure before that the number of output files either equals numOutputs, in which</span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                <span class="comment">// case we override those files when processing the results of each iteration (only the result</span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                <span class="comment">// of the last iteration will be stored), or there are enough</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                <span class="comment">// output files for each output of each iteration.</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                <span class="keywordtype">size_t</span> outputFileIndex = numOutputs + i;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                <span class="keywordflow">if</span> (!params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.empty())</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                {</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                    outputFileIndex = outputFileIndex % params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.size();</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Writing output &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; named: &#39;&quot;</span></div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                                    &lt;&lt; inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>[i] &lt;&lt;<span class="stringliteral">&quot; to file: &#39;&quot;</span></div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                                    &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>[outputFileIndex] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span>;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                }</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                <span class="keyword">auto</span> outputTensorFile = params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.empty()</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                                        ? <span class="stringliteral">&quot;&quot;</span></div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                                        : params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>[outputFileIndex];</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                <a class="code" href="struct_tensor_printer.xhtml">TensorPrinter</a> printer(inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>[i],</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                                      infoOut,</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                                      outputTensorFile,</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                                      params.<a class="code" href="struct_execute_network_params.xhtml#a85929a48c5e7b16af8f5bc637e45a37f">m_DequantizeOutput</a>,</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                                      !params.<a class="code" href="struct_execute_network_params.xhtml#ac828647e0c753c3727c8c1f81939f7e4">m_DontPrintOutputs</a>);</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                mapbox::util::apply_visitor(printer, output[i]);</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            }</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> inference: timings)</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            {</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;\nInference time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                                &lt;&lt; std::fixed &lt;&lt; inference.count() &lt;&lt; <span class="stringliteral">&quot; ms\n&quot;</span>;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;                <span class="comment">// If thresholdTime == 0.0 (default), then it hasn&#39;t been supplied at command line</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;                <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a> != 0.0)</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;                {</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;                    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Threshold time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                                    &lt;&lt; std::fixed &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a> &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span>;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                    <span class="keyword">auto</span> thresholdMinusInference = params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a> - inference.count();</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Threshold time - Inference time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                                    &lt;&lt; std::fixed &lt;&lt; thresholdMinusInference &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                    <span class="keywordflow">if</span> (thresholdMinusInference &lt; 0)</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                    {</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;                        std::string errorMessage = <span class="stringliteral">&quot;Elapsed inference time is greater than provided threshold time.&quot;</span>;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; errorMessage;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                    }</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                }</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;            }</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        }</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        <span class="comment">// Asynchronous execution using the Arm NN thread pool</span></div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a7adc5dcfe3d76ac489f253c4d5f439c8">m_ThreadPoolSize</a> &gt;= 1)</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        {</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;            <span class="keywordflow">try</span></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;            {</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Asynchronous execution with Arm NN thread pool...  \n&quot;</span>;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;                <a class="code" href="classarmnn_1_1experimental_1_1_async_callback_manager.xhtml">armnn::AsyncCallbackManager</a> callbackManager;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                std::unordered_map&lt;armnn::InferenceId, std::vector&lt;armnnUtils::TContainer&gt;&amp;&gt; inferenceOutputMap;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                <span class="comment">// Declare the latest and earliest inference times here to be used when calculating overall time</span></div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                std::chrono::high_resolution_clock::time_point earliestStartTime;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                std::chrono::high_resolution_clock::time_point latestEndTime =</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                    std::chrono::high_resolution_clock::now();</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                <span class="comment">// For the asynchronous execution, we are adding a pool of working memory handles (1 per thread) in the</span></div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;                <span class="comment">// LoadedNetwork with each scheduled inference having a specific priority</span></div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>; ++i)</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                {</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;                    std::shared_ptr&lt;armnn::AsyncExecutionCallback&gt; cb = callbackManager.<a class="code" href="classarmnn_1_1experimental_1_1_async_callback_manager.xhtml#a27aff9e4e5d9bce49988a2de6a1ebc59">GetNewCallback</a>();</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                    inferenceOutputMap.insert({cb-&gt;GetInferenceId(), outputs[i]});</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                    model.RunAsync(inputs[i], outputs[i], cb);</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                }</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                <span class="comment">// Check the results</span></div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0;</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> iteration = 0; iteration &lt; params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>; ++iteration)</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                {</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;                    <span class="keyword">auto</span> cb = callbackManager.<a class="code" href="classarmnn_1_1experimental_1_1_async_callback_manager.xhtml#a9ee5b1dd7d3a6f619d2ed3d97d75d9b1">GetNotifiedCallback</a>();</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;                    <span class="comment">// Get the results</span></div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                    <span class="keyword">auto</span> endTime = time_point_cast&lt;std::chrono::milliseconds&gt;(cb-&gt;GetEndTime());</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                    <span class="keyword">auto</span> startTime = time_point_cast&lt;std::chrono::milliseconds&gt;(cb-&gt;GetStartTime());</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                    <span class="keyword">auto</span> inferenceDuration = endTime - startTime;</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                    <span class="keywordflow">if</span> (latestEndTime &lt; cb-&gt;GetEndTime())</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;                    {</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                        latestEndTime = cb-&gt;GetEndTime();</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                    }</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;                    <span class="keywordflow">if</span> (earliestStartTime.time_since_epoch().count() == 0)</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;                    {</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;                        earliestStartTime = cb-&gt;GetStartTime();</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                    }</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (earliestStartTime &gt; cb-&gt;GetStartTime())</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;                    {</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                        earliestStartTime = cb-&gt;GetStartTime();</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;                    }</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;                    <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">m_GenerateTensorData</a>)</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;                    {</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;The input data was generated, note that the output will not be useful&quot;</span>;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;                    }</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;                    <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#ac828647e0c753c3727c8c1f81939f7e4">m_DontPrintOutputs</a>)</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                    {</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Printing outputs to console is disabled.&quot;</span>;</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                    }</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;                    <span class="comment">// Print output tensors</span></div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; infosOut = model.GetOutputBindingInfos();</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numOutputs; i++)</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;                    {</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                        <span class="comment">// We&#39;ve made sure before that the number of output files either equals numOutputs, in which</span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                        <span class="comment">// case we override those files when processing the results of each iteration (only the</span></div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                        <span class="comment">// result of the last iteration will be stored), or there are enough</span></div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;                        <span class="comment">// output files for each output of each iteration.</span></div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;                        <span class="keywordtype">size_t</span> outputFileIndex = iteration * numOutputs + i;</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                        <span class="keywordflow">if</span> (!params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.empty())</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;                        {</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                            outputFileIndex = outputFileIndex % params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.size();</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Writing output &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; named: &#39;&quot;</span></div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;                                            &lt;&lt; inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>[i]</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                                            &lt;&lt; <span class="stringliteral">&quot;&#39; of iteration: &quot;</span> &lt;&lt; iteration+1 &lt;&lt; <span class="stringliteral">&quot; to file: &#39;&quot;</span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                                            &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>[outputFileIndex] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span>;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;                        }</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; infoOut = infosOut[i].second;</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;                        <span class="keyword">auto</span> outputTensorFile = params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.empty()</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;                                                ? <span class="stringliteral">&quot;&quot;</span></div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;                                                : params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>[outputFileIndex];</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;                        <a class="code" href="struct_tensor_printer.xhtml">TensorPrinter</a> printer(inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>[i],</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;                                              infoOut,</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;                                              outputTensorFile,</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;                                              params.<a class="code" href="struct_execute_network_params.xhtml#a85929a48c5e7b16af8f5bc637e45a37f">m_DequantizeOutput</a>,</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;                                              !params.<a class="code" href="struct_execute_network_params.xhtml#ac828647e0c753c3727c8c1f81939f7e4">m_DontPrintOutputs</a>);</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                        mapbox::util::apply_visitor(printer, inferenceOutputMap.at(cb-&gt;GetInferenceId())[i]);</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                    }</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                    <a class="code" href="_execute_network_8cpp.xhtml#ab9be7e320a1879b362298cb198250dae">CheckInferenceTimeThreshold</a>(inferenceDuration, params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a>);</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                    ++j;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                }</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                <span class="comment">//print duration difference between overallStartTime and overallEndTime</span></div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;                <span class="keyword">auto</span> overallEndTime = time_point_cast&lt;std::chrono::milliseconds&gt;(latestEndTime);</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;                <span class="keyword">auto</span> overallStartTime = time_point_cast&lt;std::chrono::milliseconds&gt;(earliestStartTime);</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;                <span class="keyword">auto</span> totalInferenceDuration = overallEndTime - overallStartTime;</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;\nOverall Inference time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;                                &lt;&lt; std::fixed &lt;&lt; totalInferenceDuration.count() &lt;&lt; <span class="stringliteral">&quot; ms\n&quot;</span>;</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;            }</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;            <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>&amp; e)</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;            {</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Armnn Error: &quot;</span> &lt;&lt; e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;                <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;            }</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;        }</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;        <span class="comment">// Asynchronous execution using std::launch::async</span></div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;        {</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;            <span class="keywordflow">try</span></div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;            {</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Asynchronous Execution with std::launch:async...  \n&quot;</span>;</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;                std::vector&lt;std::future&lt;std::tuple&lt;<span class="keywordtype">unsigned</span> int,</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                    std::chrono::duration&lt;double, std::milli&gt;&gt;&gt;&gt; inferenceResults;</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;                inferenceResults.reserve(params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>);</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;                <span class="comment">// Create WorkingMemHandles for each inference</span></div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;                std::vector&lt;std::unique_ptr&lt;armnn::experimental::IWorkingMemHandle&gt;&gt; workingMemHandles;</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;                workingMemHandles.reserve(params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>);</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>; ++i)</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;                {</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;                    workingMemHandles.push_back(model.CreateWorkingMemHandle());</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;                }</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;                <span class="comment">// Run each inference in its own thread</span></div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;                <span class="comment">// start a timer</span></div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> start_time = <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>();</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; params.<a class="code" href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">m_Iterations</a>; ++i)</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;                {</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;                    <a class="code" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">armnn::experimental::IWorkingMemHandle</a>&amp; workingMemHandleRef = *workingMemHandles[i].get();</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;                    inferenceResults.push_back(std::async(</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;                        std::launch::async, [&amp;model, &amp;workingMemHandleRef, &amp;inputs, &amp;outputs, i]() {</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;                            <span class="keywordflow">return</span> model.RunAsync(workingMemHandleRef, inputs[i], outputs[i], i);</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;                        }</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;                        ));</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;                }</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;                <span class="comment">// Check the results</span></div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; inferenceResults.size(); ++j)</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;                {</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;                    <span class="comment">// Get the results</span></div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;                    <span class="keyword">auto</span> inferenceResult = inferenceResults[j].get();</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;                    <span class="keyword">auto</span> inferenceDuration = std::get&lt;1&gt;(inferenceResult);</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;                    <span class="keyword">auto</span> inferenceID = std::get&lt;0&gt;(inferenceResult);</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;                    <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">m_GenerateTensorData</a>)</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                    {</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;The input data was generated, note that the output will not be useful&quot;</span>;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                    }</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;                    <span class="keywordflow">if</span> (params.<a class="code" href="struct_execute_network_params.xhtml#ac828647e0c753c3727c8c1f81939f7e4">m_DontPrintOutputs</a>)</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                    {</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Printing outputs to console is disabled.&quot;</span>;</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                    }</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                    <span class="comment">// Print output tensors</span></div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; infosOut = model.GetOutputBindingInfos();</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numOutputs; i++)</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                    {</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;                        <span class="comment">// We&#39;ve made sure before that the number of output files either equals numOutputs, in which</span></div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                        <span class="comment">// case we override those files when processing the results of each iteration (only the</span></div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                        <span class="comment">// result of the last iteration will be stored), or there are enough</span></div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;                        <span class="comment">// output files for each output of each iteration.</span></div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;                        <span class="keywordtype">size_t</span> outputFileIndex = j * numOutputs + i;</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                        <span class="keywordflow">if</span> (!params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.empty())</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                        {</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                            outputFileIndex = outputFileIndex % params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.size();</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Writing output &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; named: &#39;&quot;</span></div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;                                            &lt;&lt; inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>[i]</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                                            &lt;&lt; <span class="stringliteral">&quot;&#39; of iteration: &quot;</span> &lt;&lt; j+1 &lt;&lt; <span class="stringliteral">&quot; to file: &#39;&quot;</span></div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                                            &lt;&lt; params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>[outputFileIndex] &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span>;</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                        }</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; infoOut = infosOut[i].second;</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                        <span class="keyword">auto</span> outputTensorFile = params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>.empty()</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                                                ? <span class="stringliteral">&quot;&quot;</span></div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                                                : params.<a class="code" href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">m_OutputTensorFiles</a>[outputFileIndex];</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                        <a class="code" href="struct_tensor_printer.xhtml">TensorPrinter</a> printer(inferenceModelParams.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>[i],</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;                                              infoOut,</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                                              outputTensorFile,</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;                                              params.<a class="code" href="struct_execute_network_params.xhtml#a85929a48c5e7b16af8f5bc637e45a37f">m_DequantizeOutput</a>,</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;                                              !params.<a class="code" href="struct_execute_network_params.xhtml#ac828647e0c753c3727c8c1f81939f7e4">m_DontPrintOutputs</a>);</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                        mapbox::util::apply_visitor(printer, outputs[j][i]);</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;                    }</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                    <a class="code" href="_execute_network_8cpp.xhtml#ab9be7e320a1879b362298cb198250dae">CheckInferenceTimeThreshold</a>(inferenceDuration, params.<a class="code" href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">m_ThresholdTime</a>);</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;                    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Asynchronous Execution is finished for Inference ID: &quot;</span> &lt;&lt; inferenceID &lt;&lt; <span class="stringliteral">&quot; \n&quot;</span>;</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;                }</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                <span class="comment">// finish timer</span></div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> duration = <a class="code" href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a>(start_time);</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;\nOverall Inference time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;                                &lt;&lt; std::fixed &lt;&lt; duration.count() &lt;&lt; <span class="stringliteral">&quot; ms\n&quot;</span>;</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;            }</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;            <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>&amp; e)</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;            {</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Armnn Error: &quot;</span> &lt;&lt; e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;            }</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;        }</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    }</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>&amp; e)</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;    {</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Armnn Error: &quot;</span> &lt;&lt; e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    }</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    <span class="keywordflow">return</span> EXIT_SUCCESS;</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;}</div><div class="ttc" id="struct_execute_network_params_xhtml_acc7592cbdfe2e70cbc3794fb1e7eaeb9"><div class="ttname"><a href="struct_execute_network_params.xhtml#acc7592cbdfe2e70cbc3794fb1e7eaeb9">ExecuteNetworkParams::m_InputTypes</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_InputTypes</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00045">ExecuteNetworkParams.hpp:45</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a4fa312cf0d60fbd3988a7c76ab8e2980"><div class="ttname"><a href="struct_execute_network_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">ExecuteNetworkParams::m_ModelPath</a></div><div class="ttdeci">std::string m_ModelPath</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00049">ExecuteNetworkParams.hpp:49</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a85929a48c5e7b16af8f5bc637e45a37f"><div class="ttname"><a href="struct_execute_network_params.xhtml#a85929a48c5e7b16af8f5bc637e45a37f">ExecuteNetworkParams::m_DequantizeOutput</a></div><div class="ttdeci">bool m_DequantizeOutput</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00032">ExecuteNetworkParams.hpp:32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a441621f00fd5665898c81a5ae3473c6b"><div class="ttname"><a href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a></div><div class="ttdeci">std::chrono::duration&lt; double, std::milli &gt; GetTimeDuration(std::chrono::high_resolution_clock::time_point start_time)</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00019">Timer.hpp:19</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ac609a217f4de4c647422dbb358a5f2ef"><div class="ttname"><a href="struct_execute_network_params.xhtml#ac609a217f4de4c647422dbb358a5f2ef">ExecuteNetworkParams::m_MLGOTuningFilePath</a></div><div class="ttdeci">std::string m_MLGOTuningFilePath</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00066">ExecuteNetworkParams.hpp:66</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_async_callback_manager_xhtml_a27aff9e4e5d9bce49988a2de6a1ebc59"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_async_callback_manager.xhtml#a27aff9e4e5d9bce49988a2de6a1ebc59">armnn::experimental::AsyncCallbackManager::GetNewCallback</a></div><div class="ttdeci">std::shared_ptr&lt; AsyncExecutionCallback &gt; GetNewCallback()</div><div class="ttdef"><b>Definition:</b> <a href="_async_execution_callback_8cpp_source.xhtml#l00046">AsyncExecutionCallback.cpp:46</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a9ef8ddbeee4b869e4c68eb2ed278b8d9"><div class="ttname"><a href="struct_execute_network_params.xhtml#a9ef8ddbeee4b869e4c68eb2ed278b8d9">ExecuteNetworkParams::m_AllowExpandedDims</a></div><div class="ttdeci">bool m_AllowExpandedDims</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00028">ExecuteNetworkParams.hpp:28</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ac828647e0c753c3727c8c1f81939f7e4"><div class="ttname"><a href="struct_execute_network_params.xhtml#ac828647e0c753c3727c8c1f81939f7e4">ExecuteNetworkParams::m_DontPrintOutputs</a></div><div class="ttdeci">bool m_DontPrintOutputs</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00058">ExecuteNetworkParams.hpp:58</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a091cda9098c6f03f91f477a22327892d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a091cda9098c6f03f91f477a22327892d">ExecuteNetworkParams::m_InputTensorShapes</a></div><div class="ttdeci">std::vector&lt; TensorShapePtr &gt; m_InputTensorShapes</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00044">ExecuteNetworkParams.hpp:44</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ab17deb382179697b4702cc4f909e71f8"><div class="ttname"><a href="struct_execute_network_params.xhtml#ab17deb382179697b4702cc4f909e71f8">ExecuteNetworkParams::m_OutputDetailsOnlyToStdOut</a></div><div class="ttdeci">bool m_OutputDetailsOnlyToStdOut</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00052">ExecuteNetworkParams.hpp:52</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a513151623e8d448951a0b94ad1946fbe"><div class="ttname"><a href="struct_execute_network_params.xhtml#a513151623e8d448951a0b94ad1946fbe">ExecuteNetworkParams::m_EnableFp16TurboMode</a></div><div class="ttdeci">bool m_EnableFp16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00036">ExecuteNetworkParams.hpp:36</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="struct_execute_network_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">ExecuteNetworkParams::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00033">ExecuteNetworkParams.hpp:33</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">InferenceModelInternal::Params::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00096">InferenceModel.hpp:96</a></div></div>
<div class="ttc" id="class_inference_model_xhtml"><div class="ttname"><a href="class_inference_model.xhtml">InferenceModel</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00377">InferenceModel.hpp:377</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml_abf843cbb29dec939d0731e491bab6f70"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">armnn::Exception::what</a></div><div class="ttdeci">virtual const char * what() const noexcept override</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8cpp_source.xhtml#l00032">Exceptions.cpp:32</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="_execute_network_8cpp_xhtml_ab9be7e320a1879b362298cb198250dae"><div class="ttname"><a href="_execute_network_8cpp.xhtml#ab9be7e320a1879b362298cb198250dae">CheckInferenceTimeThreshold</a></div><div class="ttdeci">bool CheckInferenceTimeThreshold(const std::chrono::duration&lt; double, std::milli &gt; &amp;duration, const double &amp;thresholdTime)</div><div class="ttdoc">Given a measured duration and a threshold time tell the user whether we succeeded or not...</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_8cpp_source.xhtml#l00048">ExecuteNetwork.cpp:48</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a513151623e8d448951a0b94ad1946fbe"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a513151623e8d448951a0b94ad1946fbe">InferenceModelInternal::Params::m_EnableFp16TurboMode</a></div><div class="ttdeci">bool m_EnableFp16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00101">InferenceModel.hpp:101</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a5acc5b4076604db15ee13ee19fa623c4"><div class="ttname"><a href="struct_execute_network_params.xhtml#a5acc5b4076604db15ee13ee19fa623c4">ExecuteNetworkParams::m_PrintIntermediate</a></div><div class="ttdeci">bool m_PrintIntermediate</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00057">ExecuteNetworkParams.hpp:57</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac895f6f6897ce335b7b433201bae0b48"><div class="ttname"><a href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a></div><div class="ttdeci">std::chrono::high_resolution_clock::time_point GetTimeNow()</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00014">Timer.hpp:14</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_abf3cb45be3828b72b4ac08f87ac6c779"><div class="ttname"><a href="struct_execute_network_params.xhtml#abf3cb45be3828b72b4ac08f87ac6c779">ExecuteNetworkParams::m_Concurrent</a></div><div class="ttdeci">bool m_Concurrent</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00031">ExecuteNetworkParams.hpp:31</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a982d4141ecde3eb220a136610d853df2"><div class="ttname"><a href="struct_execute_network_params.xhtml#a982d4141ecde3eb220a136610d853df2">ExecuteNetworkParams::m_OutputNames</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_OutputNames</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00053">ExecuteNetworkParams.hpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a5c7f0c083da98e7b6e9ba79d2fcd985d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">ExecuteNetworkParams::m_ParseUnsupported</a></div><div class="ttdeci">bool m_ParseUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00056">ExecuteNetworkParams.hpp:56</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a74d346297c55b516908c541030adc88d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a74d346297c55b516908c541030adc88d">ExecuteNetworkParams::m_OutputTensorFiles</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_OutputTensorFiles</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00054">ExecuteNetworkParams.hpp:54</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a9a04b8c7f19a84f63125edec509b6d53"><div class="ttname"><a href="struct_execute_network_params.xhtml#a9a04b8c7f19a84f63125edec509b6d53">ExecuteNetworkParams::m_SaveCachedNetwork</a></div><div class="ttdeci">bool m_SaveCachedNetwork</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00060">ExecuteNetworkParams.hpp:60</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_aaae50a6c0f73e4c210c2e4331c439482"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#aaae50a6c0f73e4c210c2e4331c439482">InferenceModelInternal::Params::m_VisualizePostOptimizationModel</a></div><div class="ttdeci">bool m_VisualizePostOptimizationModel</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00100">InferenceModel.hpp:100</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a7adc5dcfe3d76ac489f253c4d5f439c8"><div class="ttname"><a href="struct_execute_network_params.xhtml#a7adc5dcfe3d76ac489f253c4d5f439c8">ExecuteNetworkParams::m_ThreadPoolSize</a></div><div class="ttdeci">size_t m_ThreadPoolSize</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00068">ExecuteNetworkParams.hpp:68</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a66f9597b152215daba3211379dad63d3"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a66f9597b152215daba3211379dad63d3">InferenceModelInternal::Params::m_EnableFastMath</a></div><div class="ttdeci">bool m_EnableFastMath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00106">InferenceModel.hpp:106</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ae96fc745917a3a0c0de7a818c9a05012"><div class="ttname"><a href="struct_execute_network_params.xhtml#ae96fc745917a3a0c0de7a818c9a05012">ExecuteNetworkParams::m_OutputDetailsToStdOut</a></div><div class="ttdeci">bool m_OutputDetailsToStdOut</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00051">ExecuteNetworkParams.hpp:51</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a9f8881646a38f828f92d3354930c4165"><div class="ttname"><a href="struct_execute_network_params.xhtml#a9f8881646a38f828f92d3354930c4165">ExecuteNetworkParams::m_CachedNetworkFilePath</a></div><div class="ttdeci">std::string m_CachedNetworkFilePath</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00029">ExecuteNetworkParams.hpp:29</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a2d4582aa74998c397bd064ae73745b62"><div class="ttname"><a href="struct_execute_network_params.xhtml#a2d4582aa74998c397bd064ae73745b62">ExecuteNetworkParams::m_SubgraphId</a></div><div class="ttdeci">size_t m_SubgraphId</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00062">ExecuteNetworkParams.hpp:62</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a0b99050baebe1d169392461b3a9be08d"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a0b99050baebe1d169392461b3a9be08d">InferenceModelInternal::Params::m_EnableBf16TurboMode</a></div><div class="ttdeci">bool m_EnableBf16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00102">InferenceModel.hpp:102</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_aad2ac35d4cb83ee4da9fad5fbcb907e0"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">InferenceModelInternal::Params::m_InputBindings</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_InputBindings</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00092">InferenceModel.hpp:92</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a2d54e6252c1c9a0e29f7706ba03b2b74"><div class="ttname"><a href="struct_execute_network_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">ExecuteNetworkParams::m_ComputeDevices</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; m_ComputeDevices</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00030">ExecuteNetworkParams.hpp:30</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a810addfa426b5ac1476035dedee7cda5"><div class="ttname"><a href="struct_execute_network_params.xhtml#a810addfa426b5ac1476035dedee7cda5">ExecuteNetworkParams::m_OutputTypes</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_OutputTypes</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00055">ExecuteNetworkParams.hpp:55</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a6bf2f586c403977d31c7d32d371918cf"><div class="ttname"><a href="struct_execute_network_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">ExecuteNetworkParams::m_IsModelBinary</a></div><div class="ttdeci">bool m_IsModelBinary</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00046">ExecuteNetworkParams.hpp:46</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_ad69aa6b4967ce55ee4a915c52c71bf2e"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#ad69aa6b4967ce55ee4a915c52c71bf2e">InferenceModelInternal::Params::m_InputShapes</a></div><div class="ttdeci">std::vector&lt; armnn::TensorShape &gt; m_InputShapes</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00093">InferenceModel.hpp:93</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00149">BackendId.hpp:149</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a1697b9751b4ba381f89b8c81cd9dfc3c"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a1697b9751b4ba381f89b8c81cd9dfc3c">InferenceModelInternal::Params::m_ImportInputsIfAligned</a></div><div class="ttdeci">bool m_ImportInputsIfAligned</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00115">InferenceModel.hpp:115</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a9a04b8c7f19a84f63125edec509b6d53"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a9a04b8c7f19a84f63125edec509b6d53">InferenceModelInternal::Params::m_SaveCachedNetwork</a></div><div class="ttdeci">bool m_SaveCachedNetwork</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00107">InferenceModel.hpp:107</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a7adc5dcfe3d76ac489f253c4d5f439c8"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a7adc5dcfe3d76ac489f253c4d5f439c8">InferenceModelInternal::Params::m_ThreadPoolSize</a></div><div class="ttdeci">size_t m_ThreadPoolSize</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00114">InferenceModel.hpp:114</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_af5e88d9bb91dff85ad5a6f7e190aff4e"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#af5e88d9bb91dff85ad5a6f7e190aff4e">InferenceModelInternal::Params::m_AsyncEnabled</a></div><div class="ttdeci">bool m_AsyncEnabled</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00113">InferenceModel.hpp:113</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a6e4eff6a5f40cb026ea76d3c13c96341"><div class="ttname"><a href="struct_execute_network_params.xhtml#a6e4eff6a5f40cb026ea76d3c13c96341">ExecuteNetworkParams::m_Iterations</a></div><div class="ttdeci">size_t m_Iterations</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00047">ExecuteNetworkParams.hpp:47</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00048">Types.hpp:48</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a99c7360a4d4b248b3f10607bc5d2fe7b"><div class="ttname"><a href="struct_execute_network_params.xhtml#a99c7360a4d4b248b3f10607bc5d2fe7b">ExecuteNetworkParams::m_GenerateTensorData</a></div><div class="ttdeci">bool m_GenerateTensorData</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00039">ExecuteNetworkParams.hpp:39</a></div></div>
<div class="ttc" id="_network_execution_utils_8cpp_xhtml_afcaa1d8d70f62d28c2cb7779b6155afb"><div class="ttname"><a href="_network_execution_utils_8cpp.xhtml#afcaa1d8d70f62d28c2cb7779b6155afb">PopulateTensorWithData</a></div><div class="ttdeci">void PopulateTensorWithData(armnnUtils::TContainer &amp;tensorData, unsigned int numElements, const std::string &amp;dataTypeStr, const armnn::Optional&lt; QuantizationParams &gt; &amp;qParams, const armnn::Optional&lt; std::string &gt; &amp;dataFile)</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8cpp_source.xhtml#l00231">NetworkExecutionUtils.cpp:231</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_abeacb4ed1ca9256ee0e8aea73185a0cc"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">InferenceModelInternal::Params::m_OutputBindings</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_OutputBindings</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00094">InferenceModel.hpp:94</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a2d54e6252c1c9a0e29f7706ba03b2b74"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">InferenceModelInternal::Params::m_ComputeDevices</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; m_ComputeDevices</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00095">InferenceModel.hpp:95</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_adc650e032e7fce99f15e2bf903e7167b"><div class="ttname"><a href="struct_execute_network_params.xhtml#adc650e032e7fce99f15e2bf903e7167b">ExecuteNetworkParams::m_NumberOfThreads</a></div><div class="ttdeci">unsigned int m_NumberOfThreads</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00050">ExecuteNetworkParams.hpp:50</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a318999172ae5197f56326b12d29104b7"><div class="ttname"><a href="struct_execute_network_params.xhtml#a318999172ae5197f56326b12d29104b7">ExecuteNetworkParams::m_ThresholdTime</a></div><div class="ttdeci">double m_ThresholdTime</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00063">ExecuteNetworkParams.hpp:63</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_aaf3c7f286030842a31025309ab6a8329"><div class="ttname"><a href="struct_execute_network_params.xhtml#aaf3c7f286030842a31025309ab6a8329">ExecuteNetworkParams::m_InputNames</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_InputNames</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00042">ExecuteNetworkParams.hpp:42</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a9ef8ddbeee4b869e4c68eb2ed278b8d9"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a9ef8ddbeee4b869e4c68eb2ed278b8d9">InferenceModelInternal::Params::m_AllowExpandedDims</a></div><div class="ttdeci">bool m_AllowExpandedDims</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00098">InferenceModel.hpp:98</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_i_working_mem_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">armnn::experimental::IWorkingMemHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_working_mem_handle_8hpp_source.xhtml#l00018">IWorkingMemHandle.hpp:18</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a5c7f0c083da98e7b6e9ba79d2fcd985d"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">InferenceModelInternal::Params::m_ParseUnsupported</a></div><div class="ttdeci">bool m_ParseUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00104">InferenceModel.hpp:104</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a66f9597b152215daba3211379dad63d3"><div class="ttname"><a href="struct_execute_network_params.xhtml#a66f9597b152215daba3211379dad63d3">ExecuteNetworkParams::m_EnableFastMath</a></div><div class="ttdeci">bool m_EnableFastMath</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00035">ExecuteNetworkParams.hpp:35</a></div></div>
<div class="ttc" id="namespacestd_1_1chrono_xhtml"><div class="ttname"><a href="namespacestd_1_1chrono.xhtml">chrono</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a0b99050baebe1d169392461b3a9be08d"><div class="ttname"><a href="struct_execute_network_params.xhtml#a0b99050baebe1d169392461b3a9be08d">ExecuteNetworkParams::m_EnableBf16TurboMode</a></div><div class="ttdeci">bool m_EnableBf16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00034">ExecuteNetworkParams.hpp:34</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_ae3c3ae097395afea488cd3e0244269fa"><div class="ttname"><a href="struct_execute_network_params.xhtml#ae3c3ae097395afea488cd3e0244269fa">ExecuteNetworkParams::m_InputTensorDataFilePaths</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_InputTensorDataFilePaths</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00043">ExecuteNetworkParams.hpp:43</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a2a245a63e87f363df491ad8c35be54c5"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a2a245a63e87f363df491ad8c35be54c5">InferenceModelInternal::Params::m_InferOutputShape</a></div><div class="ttdeci">bool m_InferOutputShape</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00105">InferenceModel.hpp:105</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_acde2af8cbbd224a9f94e509ca538a775"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#acde2af8cbbd224a9f94e509ca538a775">InferenceModelInternal::Params::m_PrintIntermediateLayers</a></div><div class="ttdeci">bool m_PrintIntermediateLayers</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00103">InferenceModel.hpp:103</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a9f8881646a38f828f92d3354930c4165"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a9f8881646a38f828f92d3354930c4165">InferenceModelInternal::Params::m_CachedNetworkFilePath</a></div><div class="ttdeci">std::string m_CachedNetworkFilePath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00110">InferenceModel.hpp:110</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a1697b9751b4ba381f89b8c81cd9dfc3c"><div class="ttname"><a href="struct_execute_network_params.xhtml#a1697b9751b4ba381f89b8c81cd9dfc3c">ExecuteNetworkParams::m_ImportInputsIfAligned</a></div><div class="ttdeci">bool m_ImportInputsIfAligned</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00069">ExecuteNetworkParams.hpp:69</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a7efc68309e76bfefbfa16fe94501b060"><div class="ttname"><a href="struct_execute_network_params.xhtml#a7efc68309e76bfefbfa16fe94501b060">ExecuteNetworkParams::m_EnableLayerDetails</a></div><div class="ttdeci">bool m_EnableLayerDetails</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00037">ExecuteNetworkParams.hpp:37</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_ac7bd4ea667375c07718086368507ed44"><div class="ttname"><a href="namespacearmnn_utils.xhtml#ac7bd4ea667375c07718086368507ed44">armnnUtils::TContainer</a></div><div class="ttdeci">mapbox::util::variant&lt; std::vector&lt; float &gt;, std::vector&lt; int &gt;, std::vector&lt; unsigned char &gt;, std::vector&lt; int8_t &gt; &gt; TContainer</div><div class="ttdef"><b>Definition:</b> <a href="_t_container_8hpp_source.xhtml#l00018">TContainer.hpp:18</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_ae96fc745917a3a0c0de7a818c9a05012"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#ae96fc745917a3a0c0de7a818c9a05012">InferenceModelInternal::Params::m_OutputDetailsToStdOut</a></div><div class="ttdeci">bool m_OutputDetailsToStdOut</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00108">InferenceModel.hpp:108</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_ac609a217f4de4c647422dbb358a5f2ef"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#ac609a217f4de4c647422dbb358a5f2ef">InferenceModelInternal::Params::m_MLGOTuningFilePath</a></div><div class="ttdeci">std::string m_MLGOTuningFilePath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00112">InferenceModel.hpp:112</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a77780137c47f528921f6537447060f05"><div class="ttname"><a href="namespacearmnn.xhtml#a77780137c47f528921f6537447060f05">armnn::MakeOptional</a></div><div class="ttdeci">Optional&lt; T &gt; MakeOptional(Args &amp;&amp;... args)</div><div class="ttdoc">Utility template that constructs an object of type T in-place and wraps it inside an Optional&lt;T&gt; obje...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00305">Optional.hpp:305</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_adc650e032e7fce99f15e2bf903e7167b"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#adc650e032e7fce99f15e2bf903e7167b">InferenceModelInternal::Params::m_NumberOfThreads</a></div><div class="ttdeci">unsigned int m_NumberOfThreads</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00111">InferenceModel.hpp:111</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_ab17deb382179697b4702cc4f909e71f8"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#ab17deb382179697b4702cc4f909e71f8">InferenceModelInternal::Params::m_OutputDetailsOnlyToStdOut</a></div><div class="ttdeci">bool m_OutputDetailsOnlyToStdOut</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00109">InferenceModel.hpp:109</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a4fa312cf0d60fbd3988a7c76ab8e2980"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">InferenceModelInternal::Params::m_ModelPath</a></div><div class="ttdeci">std::string m_ModelPath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00091">InferenceModel.hpp:91</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_async_callback_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_async_callback_manager.xhtml">armnn::experimental::AsyncCallbackManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_async_execution_callback_8hpp_source.xhtml#l00076">AsyncExecutionCallback.hpp:76</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a6bf2f586c403977d31c7d32d371918cf"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">InferenceModelInternal::Params::m_IsModelBinary</a></div><div class="ttdeci">bool m_IsModelBinary</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00099">InferenceModel.hpp:99</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a2d4582aa74998c397bd064ae73745b62"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a2d4582aa74998c397bd064ae73745b62">InferenceModelInternal::Params::m_SubgraphId</a></div><div class="ttdeci">size_t m_SubgraphId</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00097">InferenceModel.hpp:97</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_acb9376adc0f7174b7d4295e00315a084"><div class="ttname"><a href="struct_execute_network_params.xhtml#acb9376adc0f7174b7d4295e00315a084">ExecuteNetworkParams::m_ReuseBuffers</a></div><div class="ttdeci">bool m_ReuseBuffers</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00070">ExecuteNetworkParams.hpp:70</a></div></div>
<div class="ttc" id="struct_tensor_printer_xhtml"><div class="ttname"><a href="struct_tensor_printer.xhtml">TensorPrinter</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00023">NetworkExecutionUtils.hpp:23</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a077f6963fc555d9d42f98cf9ed3e7e03"><div class="ttname"><a href="struct_execute_network_params.xhtml#a077f6963fc555d9d42f98cf9ed3e7e03">ExecuteNetworkParams::m_QuantizeInput</a></div><div class="ttdeci">bool m_QuantizeInput</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00059">ExecuteNetworkParams.hpp:59</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml">InferenceModelInternal::Params</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00089">InferenceModel.hpp:89</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a2a245a63e87f363df491ad8c35be54c5"><div class="ttname"><a href="struct_execute_network_params.xhtml#a2a245a63e87f363df491ad8c35be54c5">ExecuteNetworkParams::m_InferOutputShape</a></div><div class="ttdeci">bool m_InferOutputShape</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00040">ExecuteNetworkParams.hpp:40</a></div></div>
<div class="ttc" id="struct_execute_network_params_xhtml_a26d42007440bb01a1a6d0ab3b5a657ee"><div class="ttname"><a href="struct_execute_network_params.xhtml#a26d42007440bb01a1a6d0ab3b5a657ee">ExecuteNetworkParams::m_EnableProfiling</a></div><div class="ttdeci">bool m_EnableProfiling</div><div class="ttdef"><b>Definition:</b> <a href="_execute_network_params_8hpp_source.xhtml#l00038">ExecuteNetworkParams.hpp:38</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_async_callback_manager_xhtml_a9ee5b1dd7d3a6f619d2ed3d97d75d9b1"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_async_callback_manager.xhtml#a9ee5b1dd7d3a6f619d2ed3d97d75d9b1">armnn::experimental::AsyncCallbackManager::GetNotifiedCallback</a></div><div class="ttdeci">std::shared_ptr&lt; AsyncExecutionCallback &gt; GetNotifiedCallback()</div><div class="ttdef"><b>Definition:</b> <a href="_async_execution_callback_8cpp_source.xhtml#l00060">AsyncExecutionCallback.cpp:60</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_3502d64799b714c597b8fa7662494b65.xhtml">ExecuteNetwork</a></li><li class="navelem"><a class="el" href="_execute_network_8cpp.xhtml">ExecuteNetwork.cpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:29 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
