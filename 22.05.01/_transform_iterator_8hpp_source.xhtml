<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: include/armnn/utility/TransformIterator.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_transform_iterator_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">TransformIterator.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_transform_iterator_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2020 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;iterator&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;{</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Function,</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;        <span class="keyword">typename</span> Iterator,</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;        <span class="keyword">typename</span> Category = <span class="keyword">typename</span> std::iterator_traits&lt;Iterator&gt;::iterator_category,</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;        <span class="keyword">typename</span> T = <span class="keyword">typename</span> std::iterator_traits&lt;Iterator&gt;::value_type,</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;        <span class="keyword">typename</span> Distance = <span class="keyword">typename</span> std::iterator_traits&lt;Iterator&gt;::difference_type,</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;        <span class="keyword">typename</span> Pointer = <span class="keyword">typename</span> std::iterator_traits&lt;Iterator&gt;::pointer,</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;        <span class="keyword">typename</span> Reference =</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        <span class="keyword">typename</span> std::result_of&lt;const Function(typename std::iterator_traits&lt;Iterator&gt;::reference)&gt;::type</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;&gt;</div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml">   21</a></span>&#160;<span class="keyword">class</span> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a> : <span class="keyword">public</span> std::iterator&lt;Category, T, Distance, Pointer, Reference&gt;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a>(<a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a> <span class="keyword">const</span>&amp; transformIterator) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a>(<a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a>&amp;&amp; transformIterator) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#a0bdbfbfe34f9d3f0eb1d9e613613da39">   30</a></span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#a0bdbfbfe34f9d3f0eb1d9e613613da39">TransformIterator</a>(Iterator&amp; it, Function fn) : m_it(it), m_fn(fn) {}</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#a830c3e05f7a78bf84f6c6d051f556f7e">   31</a></span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#a830c3e05f7a78bf84f6c6d051f556f7e">TransformIterator</a>(Iterator&amp;&amp; it, Function fn) : m_it(it), m_fn(fn) {}</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    ~<a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#ad239ecc52f796872d11172acf131d85c">   35</a></span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a>&amp; <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#ad239ecc52f796872d11172acf131d85c">operator=</a>(<a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a> <span class="keyword">const</span>&amp; rhs)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        m_fn = rhs.m_fn;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        m_it = rhs.m_it;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#a4b6c1881fc2da8befb604ddd7a1f849e">   42</a></span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a>&amp; <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#a4b6c1881fc2da8befb604ddd7a1f849e">operator=</a>(<a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a>&amp;&amp; rhs)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        m_fn = std::move(rhs.m_fn);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        m_it = std::move(rhs.m_it);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#a0376fb7018070d15845f038305909857">   49</a></span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#a0376fb7018070d15845f038305909857">operator++</a>() {++m_it; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#a02de5519c2a29d51ed94a62bc540d931">   50</a></span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#a02de5519c2a29d51ed94a62bc540d931">operator--</a>() {--m_it; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#a32a799a5f71c8c38c3b3642599654009">   52</a></span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#a32a799a5f71c8c38c3b3642599654009">operator++</a>()<span class="keyword"> const </span>{++m_it; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#a907199ef7b74c0ece50905bc7d012390">   53</a></span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#a907199ef7b74c0ece50905bc7d012390">operator--</a>()<span class="keyword"> const </span>{--m_it; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#a29c3cf3dc837cf6e453a4a8905d4c092">   55</a></span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#a29c3cf3dc837cf6e453a4a8905d4c092">operator++</a>(<span class="keywordtype">int</span> n)<span class="keyword"> const </span>{m_it += n; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#a0939a6e938e12c3dda35da6a89435a97">   56</a></span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#a0939a6e938e12c3dda35da6a89435a97">operator--</a>(<span class="keywordtype">int</span> n)<span class="keyword"> const </span>{m_it -= n; <span class="keywordflow">return</span> *<span class="keyword">this</span>;}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#a8787f134c06e64cf86602bf1f7ce321d">   58</a></span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#a8787f134c06e64cf86602bf1f7ce321d">operator[]</a>(Distance n)<span class="keyword"> const </span>{m_it[n]; <span class="keywordflow">return</span>  *<span class="keyword">this</span>;};</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#ae9332b6604e42ddaf423b827b3bb8308">   60</a></span>&#160;    Distance <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#ae9332b6604e42ddaf423b827b3bb8308">operator-</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a>&amp; other) {<span class="keywordflow">return</span> m_it - other.m_it;}</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#ac79c3c17d779d6e89301b18f583fed18">   62</a></span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#ac79c3c17d779d6e89301b18f583fed18">operator-</a>(<span class="keyword">const</span> Distance n) {<span class="keywordflow">return</span> {m_it - n, m_fn};}</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#a9c70a14da3e9016e2572f02ff3c9e983">   63</a></span>&#160;    <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#a9c70a14da3e9016e2572f02ff3c9e983">operator+</a>(<span class="keyword">const</span> Distance n) {<span class="keywordflow">return</span> {m_it + n, m_fn};}</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#aff66f9d5905e9a47bb7c52c591be489a">   65</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#aff66f9d5905e9a47bb7c52c591be489a">operator&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a>&amp; rhs)<span class="keyword"> const </span>{<span class="keywordflow">return</span> m_it &gt; rhs.m_it;}</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#adf33f47a0b9dab1b3da8efa7edeea818">   66</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#adf33f47a0b9dab1b3da8efa7edeea818">operator&lt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a>&amp; rhs)<span class="keyword"> const </span>{<span class="keywordflow">return</span> m_it &lt; rhs.m_it;}</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#a7e9c529ee9fa90dc5bb239b9c31d7876">   67</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#a7e9c529ee9fa90dc5bb239b9c31d7876">operator&gt;=</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a>&amp; rhs)<span class="keyword"> const </span>{<span class="keywordflow">return</span> m_it &gt;= rhs.m_it;}</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#a381002cfc4927df5bb9dc04a558deffd">   68</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#a381002cfc4927df5bb9dc04a558deffd">operator&lt;=</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a>&amp; rhs)<span class="keyword"> const </span>{<span class="keywordflow">return</span> m_it &lt;= rhs.m_it;}</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#ab364f98a571a0f9de7f12def424ca142">   70</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#ab364f98a571a0f9de7f12def424ca142">operator==</a>(<a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a> other)<span class="keyword"> const </span>{<span class="keywordflow">return</span> (m_it == other.m_it);}</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#a3f02ad28ab5cf74ede7c043a936358e8">   71</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#a3f02ad28ab5cf74ede7c043a936358e8">operator!=</a>(<a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator</a> other)<span class="keyword"> const </span>{<span class="keywordflow">return</span> !(m_it == other.m_it);}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classarmnn_1_1_transform_iterator.xhtml#a426d44f1694411b25618ea6e7d4e31ef">   73</a></span>&#160;    Reference <a class="code" href="classarmnn_1_1_transform_iterator.xhtml#a426d44f1694411b25618ea6e7d4e31ef">operator*</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> m_fn(*m_it);}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    Iterator m_it;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    Function m_fn;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;};</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Function, <span class="keyword">typename</span> Iterator&gt;</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a2cf1ea7140f419eba6d60d01dd0a795a">   81</a></span>&#160;constexpr <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator&lt;Function, Iterator&gt;</a> <a class="code" href="namespacearmnn.xhtml#a2cf1ea7140f419eba6d60d01dd0a795a">MakeTransformIterator</a>(Iterator i, Function f)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_transform_iterator.xhtml">TransformIterator&lt;Function, Iterator&gt;</a>(i, f);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_a0939a6e938e12c3dda35da6a89435a97"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#a0939a6e938e12c3dda35da6a89435a97">armnn::TransformIterator::operator--</a></div><div class="ttdeci">TransformIterator operator--(int n) const</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00056">TransformIterator.hpp:56</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_a9c70a14da3e9016e2572f02ff3c9e983"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#a9c70a14da3e9016e2572f02ff3c9e983">armnn::TransformIterator::operator+</a></div><div class="ttdeci">TransformIterator operator+(const Distance n)</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00063">TransformIterator.hpp:63</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_adf33f47a0b9dab1b3da8efa7edeea818"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#adf33f47a0b9dab1b3da8efa7edeea818">armnn::TransformIterator::operator&lt;</a></div><div class="ttdeci">bool operator&lt;(const TransformIterator &amp;rhs) const</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00066">TransformIterator.hpp:66</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_a907199ef7b74c0ece50905bc7d012390"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#a907199ef7b74c0ece50905bc7d012390">armnn::TransformIterator::operator--</a></div><div class="ttdeci">TransformIterator operator--() const</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00053">TransformIterator.hpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2cf1ea7140f419eba6d60d01dd0a795a"><div class="ttname"><a href="namespacearmnn.xhtml#a2cf1ea7140f419eba6d60d01dd0a795a">armnn::MakeTransformIterator</a></div><div class="ttdeci">constexpr TransformIterator&lt; Function, Iterator &gt; MakeTransformIterator(Iterator i, Function f)</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00081">TransformIterator.hpp:81</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_a0bdbfbfe34f9d3f0eb1d9e613613da39"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#a0bdbfbfe34f9d3f0eb1d9e613613da39">armnn::TransformIterator::TransformIterator</a></div><div class="ttdeci">TransformIterator(Iterator &amp;it, Function fn)</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00030">TransformIterator.hpp:30</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_aff66f9d5905e9a47bb7c52c591be489a"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#aff66f9d5905e9a47bb7c52c591be489a">armnn::TransformIterator::operator&gt;</a></div><div class="ttdeci">bool operator&gt;(const TransformIterator &amp;rhs) const</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00065">TransformIterator.hpp:65</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_ac79c3c17d779d6e89301b18f583fed18"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#ac79c3c17d779d6e89301b18f583fed18">armnn::TransformIterator::operator-</a></div><div class="ttdeci">TransformIterator operator-(const Distance n)</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00062">TransformIterator.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_a3f02ad28ab5cf74ede7c043a936358e8"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#a3f02ad28ab5cf74ede7c043a936358e8">armnn::TransformIterator::operator!=</a></div><div class="ttdeci">bool operator!=(TransformIterator other) const</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00071">TransformIterator.hpp:71</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_a426d44f1694411b25618ea6e7d4e31ef"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#a426d44f1694411b25618ea6e7d4e31ef">armnn::TransformIterator::operator*</a></div><div class="ttdeci">Reference operator*() const</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00073">TransformIterator.hpp:73</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_a7e9c529ee9fa90dc5bb239b9c31d7876"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#a7e9c529ee9fa90dc5bb239b9c31d7876">armnn::TransformIterator::operator&gt;=</a></div><div class="ttdeci">bool operator&gt;=(const TransformIterator &amp;rhs) const</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00067">TransformIterator.hpp:67</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_ab364f98a571a0f9de7f12def424ca142"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#ab364f98a571a0f9de7f12def424ca142">armnn::TransformIterator::operator==</a></div><div class="ttdeci">bool operator==(TransformIterator other) const</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00070">TransformIterator.hpp:70</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_a0376fb7018070d15845f038305909857"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#a0376fb7018070d15845f038305909857">armnn::TransformIterator::operator++</a></div><div class="ttdeci">TransformIterator operator++()</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00049">TransformIterator.hpp:49</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_a02de5519c2a29d51ed94a62bc540d931"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#a02de5519c2a29d51ed94a62bc540d931">armnn::TransformIterator::operator--</a></div><div class="ttdeci">TransformIterator operator--()</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00050">TransformIterator.hpp:50</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_ae9332b6604e42ddaf423b827b3bb8308"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#ae9332b6604e42ddaf423b827b3bb8308">armnn::TransformIterator::operator-</a></div><div class="ttdeci">Distance operator-(const TransformIterator &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00060">TransformIterator.hpp:60</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_ad239ecc52f796872d11172acf131d85c"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#ad239ecc52f796872d11172acf131d85c">armnn::TransformIterator::operator=</a></div><div class="ttdeci">TransformIterator &amp; operator=(TransformIterator const &amp;rhs)</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00035">TransformIterator.hpp:35</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_a29c3cf3dc837cf6e453a4a8905d4c092"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#a29c3cf3dc837cf6e453a4a8905d4c092">armnn::TransformIterator::operator++</a></div><div class="ttdeci">TransformIterator operator++(int n) const</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00055">TransformIterator.hpp:55</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_a32a799a5f71c8c38c3b3642599654009"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#a32a799a5f71c8c38c3b3642599654009">armnn::TransformIterator::operator++</a></div><div class="ttdeci">TransformIterator operator++() const</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00052">TransformIterator.hpp:52</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml">armnn::TransformIterator</a></div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00021">TransformIterator.hpp:21</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_a381002cfc4927df5bb9dc04a558deffd"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#a381002cfc4927df5bb9dc04a558deffd">armnn::TransformIterator::operator&lt;=</a></div><div class="ttdeci">bool operator&lt;=(const TransformIterator &amp;rhs) const</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00068">TransformIterator.hpp:68</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_a830c3e05f7a78bf84f6c6d051f556f7e"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#a830c3e05f7a78bf84f6c6d051f556f7e">armnn::TransformIterator::TransformIterator</a></div><div class="ttdeci">TransformIterator(Iterator &amp;&amp;it, Function fn)</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00031">TransformIterator.hpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_a8787f134c06e64cf86602bf1f7ce321d"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#a8787f134c06e64cf86602bf1f7ce321d">armnn::TransformIterator::operator[]</a></div><div class="ttdeci">TransformIterator operator[](Distance n) const</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00058">TransformIterator.hpp:58</a></div></div>
<div class="ttc" id="classarmnn_1_1_transform_iterator_xhtml_a4b6c1881fc2da8befb604ddd7a1f849e"><div class="ttname"><a href="classarmnn_1_1_transform_iterator.xhtml#a4b6c1881fc2da8befb604ddd7a1f849e">armnn::TransformIterator::operator=</a></div><div class="ttdeci">TransformIterator &amp; operator=(TransformIterator &amp;&amp;rhs)</div><div class="ttdef"><b>Definition:</b> <a href="_transform_iterator_8hpp_source.xhtml#l00042">TransformIterator.hpp:42</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_2b72cc348e06937955e62ebdd8a13436.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_a8fc954923c193e6d993e59ec24545df.xhtml">utility</a></li><li class="navelem"><a class="el" href="_transform_iterator_8hpp.xhtml">TransformIterator.hpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:19:41 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
