<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/test/OptimizerTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_optimizer_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">OptimizerTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="test_2_test_utils_8hpp_source.xhtml">TestUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_backend_settings_8hpp_source.xhtml">BackendSettings.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_graph_8hpp_source.xhtml">Graph.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_network_8hpp_source.xhtml">Network.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_optimizer_8hpp_source.xhtml">Optimizer.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_backend_helper_8hpp_source.xhtml">armnn/BackendHelper.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_backend_registry_8hpp_source.xhtml">armnn/BackendRegistry.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_i_network_8hpp_source.xhtml">armnn/INetwork.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_strategy_base_8hpp_source.xhtml">armnn/StrategyBase.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_assert_8hpp_source.xhtml">armnn/utility/Assert.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_polymorphic_downcast_8hpp_source.xhtml">armnn/utility/PolymorphicDowncast.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_i_backend_internal_8hpp_source.xhtml">armnn/backends/IBackendInternal.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_layer_support_base_8hpp_source.xhtml">backendsCommon/LayerSupportBase.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml">armnn/backends/TensorHandle.hpp</a>&gt;</code><br />
<code>#include &lt;doctest/doctest.h&gt;</code><br />
</div>
<p><a href="_optimizer_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a77a062dba8ec73047ae4e734519f5ef8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_optimizer_tests_8cpp.xhtml#a77a062dba8ec73047ae4e734519f5ef8">TEST_SUITE</a> (&quot;Optimizer&quot;)</td></tr>
<tr class="separator:a77a062dba8ec73047ae4e734519f5ef8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a77a062dba8ec73047ae4e734519f5ef8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77a062dba8ec73047ae4e734519f5ef8">&#9670;&nbsp;</a></span>TEST_SUITE()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">TEST_SUITE </td>
          <td>(</td>
          <td class="paramtype">&quot;Optimizer&quot;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_optimizer_tests_8cpp_source.xhtml#l00306">306</a> of file <a class="el" href="_optimizer_tests_8cpp_source.xhtml">OptimizerTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::Activation</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::Addition</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00425">Graph::AddLayer()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00184">ILayerSupport::anchors</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_network_8cpp_source.xhtml#l01018">armnn::AssignBackends()</a>, <a class="el" href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718ab1897515d548a960afe49ecf66a29021">armnn::Average</a>, <a class="el" href="_backend_registry_8cpp_source.xhtml#l00015">armnn::BackendRegistryInstance()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00336">Layer::BackendSelectionHint()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00169">Graph::begin()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00062">ILayerSupport::beta</a>, <a class="el" href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">armnn::Bilinear</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00179">Graph::cbegin()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00181">Graph::cend()</a>, <a class="el" href="est_utils_2_test_utils_8hpp_source.xhtml#l00021">CheckSequence()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00112">OutputSlot::Connect()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">armnn::ConvertFp16ToFp32</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">armnn::ConvertFp32ToFp16</a>, <a class="el" href="_network_8cpp_source.xhtml#l00476">INetwork::Create()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::descriptor</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00171">Graph::end()</a>, <a class="el" href="namespacearmnn.xhtml#a3888429b6ebc79f9a7df549e5e4d9a2fa843f2812f595e7ec7c5036e89fde02d6">armnn::Exclude</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::Float16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::Floor</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00062">ILayerSupport::gamma</a>, <a class="el" href="_backend_helper_8cpp_source.xhtml#l00030">armnn::GetCapability()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00313">Layer::GetDataType()</a>, <a class="el" href="_optimized_network_impl_8hpp_source.xhtml#l00027">OptimizedNetworkImpl::GetGraph()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00322">Layer::GetInputSlot()</a>, <a class="el" href="_internal_types_8cpp_source.xhtml#l00013">armnn::GetLayerTypeAsCString()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00225">Layer::GetNameStr()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00198">Graph::GetNumLayers()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00230">Layer::GetOutputHandler()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00324">Layer::GetOutputSlot()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00092">OutputSlot::GetTensorInfo()</a>, <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">IConnectableLayer::GetType()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00271">Layer::GetType()</a>, <a class="el" href="_backend_helper_8cpp_source.xhtml#l00058">armnn::HasCapability()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00562">Graph::InferTensorInfos()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00138">armnn::InsertConvertFp16ToFp32LayersBefore()</a>, <a class="el" href="_network_utils_8cpp_source.xhtml#l00210">armnn::InsertConvertFp32ToFp16LayersAfter()</a>, <a class="el" href="_network_8hpp_source.xhtml#l00285">OptimizationResult::IsOk()</a>, <a class="el" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b">armnn::Linear</a>, <a class="el" href="_detection_post_process_layer_8hpp_source.xhtml#l00020">DetectionPostProcessLayer::m_Anchors</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00547">Convolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00673">DepthwiseConvolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00388">Pooling2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00549">Convolution2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00675">DepthwiseConvolution2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00808">BatchNormalizationDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00995">ResizeDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00059">ActivationDescriptor::m_Function</a>, <a class="el" href="_constant_layer_8hpp_source.xhtml#l00048">ConstantLayer::m_LayerOutput</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00710">DetectionPostProcessDescriptor::m_MaxDetections</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00993">ResizeDescriptor::m_Method</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00374">Pooling2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00386">Pooling2dDescriptor::m_PaddingMethod</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00368">Pooling2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00370">Pooling2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00372">Pooling2dDescriptor::m_PadTop</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00378">Pooling2dDescriptor::m_PoolHeight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00366">Pooling2dDescriptor::m_PoolType</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00376">Pooling2dDescriptor::m_PoolWidth</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00380">Pooling2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00539">Convolution2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00665">DepthwiseConvolution2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00382">Pooling2dDescriptor::m_StrideY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00541">Convolution2dDescriptor::m_StrideY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00667">DepthwiseConvolution2dDescriptor::m_StrideY</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00990">ResizeDescriptor::m_TargetHeight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00988">ResizeDescriptor::m_TargetWidth</a>, <a class="el" href="_convolution2d_layer_8hpp_source.xhtml#l00021">Convolution2dLayer::m_Weight</a>, <a class="el" href="_optimizer_8hpp_source.xhtml#l00043">armnn::MakeOptimizations()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00062">ILayerSupport::mean</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport::paramsInfo</a>, <a class="el" href="_optimizer_8cpp_source.xhtml#l00016">Optimizer::Pass()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="_output_handler_8cpp_source.xhtml#l00015">OutputHandler::SetTensorInfo()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00087">OutputSlot::SetTensorInfo()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport::weights</a>.</p>
<div class="fragment"><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;{</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearmnn_1_1optimizations.xhtml">armnn::optimizations</a>;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;TEST_CASE(<span class="stringliteral">&quot;LSTMValidateTensorShapesFromInputsCIFGDisabledTest&quot;</span>)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;{</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="comment">//Helper function creates graph containing LSTM layer with required input and output layers</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    CreateLSTMLayerHelper(graph, <span class="keyword">false</span>);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="comment">//This function used to call ValidateShapesFromInputs();</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    CHECK_NOTHROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;}</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;TEST_CASE(<span class="stringliteral">&quot;LSTMValidateTensorShapesFromInputsCIFGEnabledTest&quot;</span>)</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;{</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="comment">//Helper function creates graph containing LSTM layer with required input and output layers</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    CreateLSTMLayerHelper(graph, <span class="keyword">true</span>);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="comment">//This function used to call ValidateShapesFromInputs();</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    CHECK_NOTHROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;}</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;TEST_CASE(<span class="stringliteral">&quot;InsertConvertersTest&quot;</span>)</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;{</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>({ 1, 5, 2, 3 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a>);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">armnn::Graph</a> graph;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> inputId = 0;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* head = graph.AddLayer&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">armnn::OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    head = graph.InsertNewLayer&lt;<a class="code" href="classarmnn_1_1_addition_layer.xhtml">armnn::AdditionLayer</a>&gt;(head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0), <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#af2c0edc7ea62a8baaec4d3d9b2b09256">GetOutputHandler</a>().<a class="code" href="classarmnn_1_1_output_handler.xhtml#a97db12c41024f5545ef5cc4153e5443b">SetTensorInfo</a>(info);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    graph.InsertNewLayer&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">armnn::InputLayer</a>&gt;(head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(1), inputId++, <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        -&gt;GetOutputHandler().SetTensorInfo(info);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    head = graph.InsertNewLayer&lt;<a class="code" href="classarmnn_1_1_floor_layer.xhtml">armnn::FloorLayer</a>&gt;(head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0), <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#af2c0edc7ea62a8baaec4d3d9b2b09256">GetOutputHandler</a>().<a class="code" href="classarmnn_1_1_output_handler.xhtml#a97db12c41024f5545ef5cc4153e5443b">SetTensorInfo</a>(info);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    head = graph.InsertNewLayer&lt;<a class="code" href="classarmnn_1_1_mem_copy_layer.xhtml">armnn::MemCopyLayer</a>&gt;(head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0), <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#af2c0edc7ea62a8baaec4d3d9b2b09256">GetOutputHandler</a>().<a class="code" href="classarmnn_1_1_output_handler.xhtml#a97db12c41024f5545ef5cc4153e5443b">SetTensorInfo</a>(info);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    graph.InsertNewLayer&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">armnn::InputLayer</a>&gt;(head-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0), inputId++, <span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        -&gt;GetOutputHandler().SetTensorInfo(info);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="comment">// Check graph layer sequence before inserting convert layers</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    CHECK(<a class="code" href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.cbegin(),</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                             graph.cend(),</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                             &amp;IsLayerOfType&lt;armnn::InputLayer&gt;,</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                             &amp;IsLayerOfType&lt;armnn::InputLayer&gt;,</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                             &amp;IsLayerOfType&lt;armnn::MemCopyLayer&gt;,</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                             &amp;IsLayerOfType&lt;armnn::FloorLayer&gt;,</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                             &amp;IsLayerOfType&lt;armnn::AdditionLayer&gt;,</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                             &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;));</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="comment">// Check layers have Float16 DataType</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; layer : graph)</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    {</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="keywordflow">if</span>(layer-&gt;GetType()==<a class="code" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">LayerType::Floor</a> || layer-&gt;GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a>)</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        {</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;GetOutputSlot(0).GetTensorInfo().GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        }</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    }</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="comment">// Insert convert layers either side of unsupported layer</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; layer : graph)</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    {</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        <span class="keywordflow">if</span>(layer-&gt;GetType()==<a class="code" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">LayerType::Floor</a> || layer-&gt;GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a>)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        {</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            <a class="code" href="namespacearmnn.xhtml#ad31c56533e4f9f9f51719599fbfcf7bb">InsertConvertFp16ToFp32LayersBefore</a>(graph, *layer);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            <a class="code" href="namespacearmnn.xhtml#abf625e50a5eaeafce5b39580dc95a9d3">InsertConvertFp32ToFp16LayersAfter</a>(graph, *layer);</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        }</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    }</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="comment">// Check layers have correct DataType after inserting convert layers</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; layer : graph)</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    {</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <span class="keywordflow">if</span> (layer-&gt;GetType()==<a class="code" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">LayerType::Floor</a> || layer-&gt;GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a>)</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        {</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;GetOutputSlot(0).GetTensorInfo().GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        }</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (layer-&gt;GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">LayerType::ConvertFp16ToFp32</a>)</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        {</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;GetOutputSlot(0).GetTensorInfo().GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        }</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (layer-&gt;GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">LayerType::ConvertFp32ToFp16</a>)</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        {</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;GetOutputSlot(0).GetTensorInfo().GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(layer-&gt;GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        }</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    }</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="comment">// Check sequence of layers after inserting convert layers</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    CHECK(<a class="code" href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.cbegin(),</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                             graph.cend(),</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                             &amp;IsLayerOfType&lt;armnn::InputLayer&gt;,</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                             &amp;IsLayerOfType&lt;armnn::InputLayer&gt;,</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                             &amp;IsLayerOfType&lt;armnn::ConvertFp16ToFp32Layer&gt;,</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                             &amp;IsLayerOfType&lt;armnn::MemCopyLayer&gt;,</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                             &amp;IsLayerOfType&lt;armnn::ConvertFp16ToFp32Layer&gt;,</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                             &amp;IsLayerOfType&lt;armnn::FloorLayer&gt;,</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                             &amp;IsLayerOfType&lt;armnn::ConvertFp32ToFp16Layer&gt;,</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                             &amp;IsLayerOfType&lt;armnn::ConvertFp16ToFp32Layer&gt;,</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                             &amp;IsLayerOfType&lt;armnn::AdditionLayer&gt;,</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                             &amp;IsLayerOfType&lt;armnn::ConvertFp32ToFp16Layer&gt;,</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                             &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;));</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;}</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="keywordtype">void</span> CreateConvolution2dGraph(<a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;graph, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* inputShape,</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                              <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* weightsShape, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* outputShape,</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                              <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;{</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputInfo(4, inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo(4, outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    std::vector&lt;float&gt; weightsVector(90);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> weights(</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>(4, weightsShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>),</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            weightsVector);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> desc;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>     = 1;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>     = 1;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    desc.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>  = dataLayout;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(inputInfo);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <a class="code" href="classarmnn_1_1_constant_layer.xhtml">ConstantLayer</a>* weightsLayer = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    weightsLayer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_constant_layer.xhtml">ConstantLayer</a>&gt;(<span class="stringliteral">&quot;Weights&quot;</span>);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    weightsLayer-&gt;<a class="code" href="classarmnn_1_1_constant_layer.xhtml#ad0c4b8ee0efd8f9336571cbeab8a53fe">m_LayerOutput</a> = std::make_shared&lt;ScopedTensorHandle&gt;(weights);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    weightsLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(weightsLayer-&gt;<a class="code" href="classarmnn_1_1_constant_layer.xhtml#ad0c4b8ee0efd8f9336571cbeab8a53fe">m_LayerOutput</a>-&gt;GetTensorInfo());</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml">Convolution2dLayer</a>* layer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml">Convolution2dLayer</a>&gt;(desc, <span class="stringliteral">&quot;conv2d&quot;</span>);</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml#a6266a703017d7296f87cc4923df2d725">m_Weight</a>           = std::make_unique&lt;armnn::ScopedTensorHandle&gt;(weights);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* output = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    weightsLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(1));</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;}</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;TEST_CASE(<span class="stringliteral">&quot;Conv2dValidateTensorShapesFromInputs&quot;</span>)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;{</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = { 1, 3, 8, 16 };</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsShape[] = { 2, 3, 5, 3 };</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 1, 2, 4, 14 };</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    CreateConvolution2dGraph(graph, inputShape, weightsShape, outputShape);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    CHECK_NOTHROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;}</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;TEST_CASE(<span class="stringliteral">&quot;Conv2dValidateTensorShapesFromInputsNhwc&quot;</span>)</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;{</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = { 1, 8, 16, 3 };</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsShape[] = { 2, 5, 3, 3 };</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 1, 4, 14, 2 };</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    CreateConvolution2dGraph(graph, inputShape, weightsShape, outputShape, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    CHECK_NOTHROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;}</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="keywordtype">void</span> CreateDepthwiseConvolution2dGraph(<a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;graph, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* inputShape,</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                                       <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* weightsShape, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* outputShape,</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                                       <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;{</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputInfo(4, inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo(4, outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> weightsInfo(<a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(4, weightsShape), <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    std::vector&lt;float&gt; weightsVector(18);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> weights(weightsInfo, weightsVector);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> desc;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>     = 1;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>     = 1;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    desc.<a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>  = dataLayout;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>* input                  = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <a class="code" href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml">DepthwiseConvolution2dLayer</a>* layer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml">DepthwiseConvolution2dLayer</a>&gt;(desc, <span class="stringliteral">&quot;depthwiseConv2d&quot;</span>);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <a class="code" href="classarmnn_1_1_constant_layer.xhtml">ConstantLayer</a>* weightsLayer        = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_constant_layer.xhtml">ConstantLayer</a>&gt;(<span class="stringliteral">&quot;weights&quot;</span>);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>* output                = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(inputInfo);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    layer-&gt;GetOutputSlot().SetTensorInfo(outputInfo);</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    weightsLayer-&gt;GetOutputSlot().SetTensorInfo(weightsInfo);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    weightsLayer-&gt;m_LayerOutput = std::make_unique&lt;armnn::ScopedTensorHandle&gt;(weights);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(layer-&gt;GetInputSlot(0));</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    weightsLayer-&gt;GetOutputSlot().Connect(layer-&gt;GetInputSlot(1));</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    layer-&gt;GetOutputSlot().Connect(output-&gt;GetInputSlot(0));</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;}</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;TEST_CASE(<span class="stringliteral">&quot;DepthwiseConv2dValidateTensorShapesFromInputs&quot;</span>)</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;{</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = { 1, 2, 3, 3 };</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsShape[] = { 1, 3, 3, 2 };</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 1, 2, 1, 1 };</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    CreateDepthwiseConvolution2dGraph(graph, inputShape, weightsShape, outputShape);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    CHECK_NOTHROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;}</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;TEST_CASE(<span class="stringliteral">&quot;DepthwiseConv2dValidateTensorShapesFromInputsNhwc&quot;</span>)</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;{</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[] = { 1, 3, 3, 2 };</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsShape[] = { 1, 3, 3, 2 };</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 1, 1, 1, 2 };</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    CreateDepthwiseConvolution2dGraph(graph, inputShape, weightsShape, outputShape, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    CHECK_NOTHROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;}</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="keywordtype">void</span> CreatePooling2dGraph(<a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* inputShape,  <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* outputShape,</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                          <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;{</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputInfo(4, inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo(4, outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> desc;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a0031997bf43bd2747656c31e4977793a">m_PoolType</a>  = <a class="code" href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718ab1897515d548a960afe49ecf66a29021">armnn::PoolingAlgorithm::Average</a>;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">m_PoolWidth</a> = desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">m_PoolHeight</a> = 100;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a> = desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a> = 5;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>                  = 50;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>                 = 50;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>                   = 50;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>                = 50;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a8c29d6ea9b4186d69aad5961c910939c">m_PaddingMethod</a>            = <a class="code" href="namespacearmnn.xhtml#a3888429b6ebc79f9a7df549e5e4d9a2fa843f2812f595e7ec7c5036e89fde02d6">armnn::PaddingMethod::Exclude</a>;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    desc.<a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>               = dataLayout;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(inputInfo);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <a class="code" href="classarmnn_1_1_pooling2d_layer.xhtml">Pooling2dLayer</a>* layer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_pooling2d_layer.xhtml">Pooling2dLayer</a>&gt;(desc, <span class="stringliteral">&quot;pooling2d&quot;</span>);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* output = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;}</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;TEST_CASE(<span class="stringliteral">&quot;Pooling2dValidateTensorShapesFromInputs&quot;</span>)</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;{</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[]  = { 5, 3, 52, 60 };</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 5, 3, 11, 13 };</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    CreatePooling2dGraph(graph, inputShape, outputShape, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    CHECK_NOTHROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;}</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;TEST_CASE(<span class="stringliteral">&quot;Pooling2dValidateTensorShapesFromInputsNhwc&quot;</span>)</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;{</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[]  = { 5, 52, 60, 3 };</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 5, 11, 13, 3 };</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    CreatePooling2dGraph(graph, inputShape, outputShape, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    CHECK_NOTHROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;}</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="keywordtype">void</span> CreateResizeBilinearGraph(<a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph,</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                               <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* inputShape,</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                               <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* outputShape,</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                               <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>)</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;{</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputInfo(4, inputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputInfo(4, outputShape, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <a class="code" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> desc;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    desc.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a869254cb56968986a78a79e1d6d4a86b">m_Method</a>       = <a class="code" href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">ResizeMethod::Bilinear</a>;</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    desc.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">m_TargetHeight</a> = 3;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    desc.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">m_TargetWidth</a>  = 4;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    desc.<a class="code" href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>   = dataLayout;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(inputInfo);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <a class="code" href="classarmnn_1_1_resize_layer.xhtml">ResizeLayer</a>* layer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_resize_layer.xhtml">ResizeLayer</a>&gt;(desc, <span class="stringliteral">&quot;resizeBilinear&quot;</span>);</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* output = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;}</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;TEST_CASE(<span class="stringliteral">&quot;ResizeBilinearValidateTensorShapesFromInputs&quot;</span>)</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;{</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[]  = { 1, 2, 4, 5 };</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 1, 2, 3, 4 };</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    CreateResizeBilinearGraph(graph, inputShape, outputShape);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    CHECK_NOTHROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;}</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;TEST_CASE(<span class="stringliteral">&quot;ResizeBilinearValidateTensorShapesFromInputsNhwc&quot;</span>)</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;{</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputShape[]  = { 1, 4, 5, 2 };</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputShape[] = { 1, 3, 4, 2 };</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    CreateResizeBilinearGraph(graph, inputShape, outputShape, <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    CHECK_NOTHROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;}</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="keywordtype">void</span> CreateGatherGraph(<a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph,</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; paramsInfo,</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; indicesInfo,</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; outputInfo)</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;{</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input0 = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;params&quot;</span>);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(paramsInfo);</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input1 = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(1, <span class="stringliteral">&quot;indices&quot;</span>);</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(indicesInfo);</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <a class="code" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> descriptor;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <a class="code" href="classarmnn_1_1_gather_layer.xhtml">GatherLayer</a>* layer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_gather_layer.xhtml">GatherLayer</a>&gt;(descriptor, <span class="stringliteral">&quot;gather&quot;</span>);</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* output = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(1));</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;}</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;TEST_CASE(<span class="stringliteral">&quot;GatherValidateTensorShapesFromInputs&quot;</span>)</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;{</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> paramsInfo({10, 5}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> indicesInfo({3}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">DataType::Signed32</a>);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo({3, 5}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    CreateGatherGraph(graph, paramsInfo, indicesInfo, outputInfo);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    CHECK_NOTHROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;}</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;TEST_CASE(<span class="stringliteral">&quot;GatherValidateTensorShapesFromInputs1DParams&quot;</span>)</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;{</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> paramsInfo({8}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> indicesInfo({5}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">DataType::Signed32</a>);</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo( {5}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    CreateGatherGraph(graph, paramsInfo, indicesInfo, outputInfo);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    CHECK_NOTHROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;}</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;TEST_CASE(<span class="stringliteral">&quot;GatherValidateTensorShapesFromInputsMultiDimIndices&quot;</span>)</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;{</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> paramsInfo({3, 2, 5}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> indicesInfo({2, 2}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">DataType::Signed32</a>);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo({2, 2, 2, 5}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    CreateGatherGraph(graph, paramsInfo, indicesInfo, outputInfo);</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    CHECK_NOTHROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;}</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;TEST_CASE(<span class="stringliteral">&quot;DetectionPostProcessValidateTensorShapes&quot;</span>)</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;{</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> boxEncodingsInfo({1, 10, 4}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> scoresInfo({1, 10, 4}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    std::vector&lt;uint8_t&gt; anchorsVector(40);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a> anchors(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>({10, 4}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a>, 0.0f, 0, <span class="keyword">true</span>), anchorsVector);</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> detectionBoxesInfo({1, 3, 4}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> detectionScoresInfo({1, 3}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> detectionClassesInfo({1, 3}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> numDetectionInfo({1}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input0 = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;boxEncodings&quot;</span>);</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    input0-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(boxEncodingsInfo);</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>* input1 = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(1, <span class="stringliteral">&quot;score&quot;</span>);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(scoresInfo);</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> descriptor;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">m_MaxDetections</a> = 3;</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml">DetectionPostProcessLayer</a>* layer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml">DetectionPostProcessLayer</a>&gt;(descriptor, <span class="stringliteral">&quot;detectionPostProcess&quot;</span>);</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_detection_post_process_layer.xhtml#a6dc8f4e1c0a2109b2a8412251c2cf7b0">m_Anchors</a> = std::make_unique&lt;armnn::ScopedTensorHandle&gt;(anchors);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(detectionBoxesInfo);</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(1).<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(detectionScoresInfo);</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(2).<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(detectionClassesInfo);</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(3).<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(numDetectionInfo);</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    input0-&gt;GetOutputSlot().Connect(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    input1-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(1));</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    CHECK_NOTHROW(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">InferTensorInfos</a>());</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;}</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;TEST_CASE(<span class="stringliteral">&quot;BackendCapabilityTest&quot;</span>)</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;{</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> backendId = <span class="stringliteral">&quot;MockBackend&quot;</span>;</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <a class="code" href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">armnn::BackendOptions::BackendOption</a> nonConstWeights{<span class="stringliteral">&quot;NonConstWeights&quot;</span>, <span class="keyword">true</span>};</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <span class="comment">// MockBackend does not support the NonConstWeights capability</span></div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    CHECK(!<a class="code" href="namespacearmnn.xhtml#abd839f0f103c1ae19a4b38d59b869108">armnn::HasCapability</a>(nonConstWeights, backendId));</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    CHECK(!<a class="code" href="namespacearmnn.xhtml#abd839f0f103c1ae19a4b38d59b869108">armnn::HasCapability</a>(<span class="stringliteral">&quot;NonConstWeights&quot;</span>, backendId));</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="comment">// MockBackend does not support the AsyncExecution capability</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    CHECK(!<a class="code" href="namespacearmnn.xhtml#a71c3bdadfe1c69aba2cbf054bff47744">armnn::GetCapability</a>(<span class="stringliteral">&quot;AsyncExecution&quot;</span>, backendId).has_value());</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;}</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;TEST_CASE(<span class="stringliteral">&quot;BackendHintTest&quot;</span>)</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;{</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <span class="keyword">class </span>TestBackendAssignment : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_strategy_base.xhtml">StrategyBase</a>&lt;NoThrowStrategy&gt;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    {</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        <span class="keywordtype">void</span> ExecuteStrategy(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_base_descriptor.xhtml">armnn::BaseDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                             <span class="keyword">const</span> std::vector&lt;armnn::ConstTensor&gt;&amp; constants,</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                             <span class="keyword">const</span> <span class="keywordtype">char</span>* name,</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                             <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> <span class="keywordtype">id</span> = 0)<span class="keyword"> override</span></div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(descriptor, constants, <span class="keywordtype">id</span>, name);</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;            <span class="keywordflow">switch</span> (layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">GetType</a>())</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            {</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a>:</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                {</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                    <span class="keyword">auto</span> inputLayer = PolymorphicDowncast&lt;const InputLayer*&gt;(layer);</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> connectedLayerBackendId = inputLayer-&gt;GetOutputSlot(0).GetOwningLayer().GetBackendId();</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                    CHECK((inputLayer-&gt;GetBackendId() == connectedLayerBackendId));</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                }</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a>:</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                {</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                    <span class="keyword">auto</span> outputLayer = PolymorphicDowncast&lt;const OutputLayer*&gt;(layer);</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                    CHECK((outputLayer-&gt;GetBackendId() == <span class="stringliteral">&quot;MockBackend&quot;</span>));</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                }</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::LayerType::Activation</a>:</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                {</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;                    <span class="keyword">auto</span> activation = PolymorphicDowncast&lt;const ActivationLayer*&gt;(layer);</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;                    CHECK((activation-&gt;GetBackendId() == <span class="stringliteral">&quot;CustomBackend&quot;</span>));</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                }</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                {</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;                    m_DefaultStrategy.Apply(<a class="code" href="namespacearmnn.xhtml#addb6b14dd1b632263ffe77430259a7c4">GetLayerTypeAsCString</a>(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">GetType</a>()));</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;                }</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;            }</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        }</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    };</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <span class="keyword">struct </span>CustomPolicy</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    {</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; GetIdStatic()</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        {</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;            <span class="keyword">static</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> <span class="keywordtype">id</span> = <span class="stringliteral">&quot;CustomBackend&quot;</span>;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;            <span class="keywordflow">return</span> id;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;        }</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    };</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <span class="keyword">struct </span>MockPolicy</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    {</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; GetIdStatic()</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        {</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;            <span class="keyword">static</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> <span class="keywordtype">id</span> = <span class="stringliteral">&quot;MockBackend&quot;</span>;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            <span class="keywordflow">return</span> id;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        }</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    };</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    <span class="keyword">auto</span>&amp; backendRegistry = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>();</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    backendRegistry.Register(<span class="stringliteral">&quot;MockBackend&quot;</span>, []() { <span class="keywordflow">return</span> std::make_unique&lt;CustomAllocatorBackend&lt;MockPolicy&gt;&gt;(); });</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    backendRegistry.Register(<span class="stringliteral">&quot;CustomBackend&quot;</span>,</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                             []() { <span class="keywordflow">return</span> std::make_unique&lt;CustomAllocatorBackend&lt;CustomPolicy&gt;&gt;(); });</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    <span class="comment">// Define the network</span></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="keyword">auto</span> network = <a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">INetwork::Create</a>();</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> desc;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    desc.<a class="code" href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">m_Function</a> = <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b">ActivationFunction::Linear</a>;</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    std::unique_ptr&lt;Graph&gt; graph = std::make_unique&lt;Graph&gt;();</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    <span class="keyword">auto</span> input                   = graph-&gt;AddLayer&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    <span class="keyword">auto</span> act                     = graph-&gt;AddLayer&lt;<a class="code" href="classarmnn_1_1_activation_layer.xhtml">ActivationLayer</a>&gt;(desc, <span class="stringliteral">&quot;activation&quot;</span>);</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    <span class="keyword">auto</span> output                  = graph-&gt;AddLayer&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    <a class="code" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> customBackendId(<span class="stringliteral">&quot;CustomBackend&quot;</span>);</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    act-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a43a46eafee5c08787ab17b4342730c20">BackendSelectionHint</a>(customBackendId);</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    input-&gt;GetOutputSlot(0).Connect(act-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    act-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    <a class="code" href="classarmnn_1_1_optimized_network_impl.xhtml">OptimizedNetworkImpl</a> optNet(std::move(graph));</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    <span class="comment">// Get the optimized graph</span></div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; optGraph = optNet.GetGraph();</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    std::vector&lt;BackendId&gt; prefs{ <span class="stringliteral">&quot;MockBackend&quot;</span>, <span class="stringliteral">&quot;CustomBackend&quot;</span> };</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">BackendIdSet</a> availableBackends = { <span class="stringliteral">&quot;CustomBackend&quot;</span>, <span class="stringliteral">&quot;MockBackend&quot;</span> };</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    <a class="code" href="classarmnn_1_1_device_spec.xhtml">DeviceSpec</a> spec(availableBackends);</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    <a class="code" href="structarmnn_1_1_backend_settings.xhtml">BackendSettings</a> backendSettings(prefs, spec);</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <span class="comment">// Assign an available backend to each layer</span></div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml#acc25db0641c1c22faf95af3bb49080c9">Graph::Iterator</a> firstLayer = optGraph.<a class="code" href="classarmnn_1_1_graph.xhtml#a2387033802383edbdc95f9bbb12a707e">begin</a>();</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml#acc25db0641c1c22faf95af3bb49080c9">Graph::Iterator</a> lastLayer  = optGraph.<a class="code" href="classarmnn_1_1_graph.xhtml#ab45dae688fc5d8983727abffa4389003">end</a>();</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    <a class="code" href="classarmnn_1_1_optimized_network_impl.xhtml">OptimizedNetworkImpl</a>* optNetObjPtr = &amp;optNet;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    <a class="code" href="structarmnn_1_1_optimization_result.xhtml">OptimizationResult</a> res = <a class="code" href="namespacearmnn.xhtml#a224df72b3d7a3bba8609bc167286e3f7">AssignBackends</a>(optNetObjPtr,</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                                            backendSettings,</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;                                            firstLayer,</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;                                            lastLayer,</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                                            <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>());</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    CHECK(res.<a class="code" href="structarmnn_1_1_optimization_result.xhtml#a955b65059e7f9429a5d6041136bc1487">IsOk</a>());</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    TestBackendAssignment visitor;</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = firstLayer; it != lastLayer; ++it)</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    {</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        (*it)-&gt;ExecuteStrategy(visitor);</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    }</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    <span class="comment">// Clean up the registry for the next test.</span></div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    backendRegistry.Deregister(<span class="stringliteral">&quot;MockBackend&quot;</span>);</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    backendRegistry.Deregister(<span class="stringliteral">&quot;CustomBackend&quot;</span>);</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;}</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;<span class="comment">// Tests that OptimizeForExclusiveConnections works, fusing when needed, using BatchNorm fusing as example</span></div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;TEST_CASE(<span class="stringliteral">&quot;OptimizeForExclusiveConnectionsFuseTest&quot;</span>)</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;{</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    <span class="comment">// Define layers information</span></div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> convolution2dDescriptor;</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    convolution2dDescriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    convolution2dDescriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>  = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    <a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> batchNormDescriptor;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    batchNormDescriptor.<a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a> = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputDimensionSizes[]   = { 1, 4, 4, 3 };                 <span class="comment">// NHWCin</span></div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> weightsDimensionSizes[] = { 1, 2, 2, 3 };                 <span class="comment">// CoutHWCin</span></div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputDimensionSizes[]  = { 1, 3, 3, 1 };                 <span class="comment">// NHWCout</span></div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputChannelSize[]     = { outputDimensionSizes[3] };    <span class="comment">// Cout</span></div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputInfo(4, inputDimensionSizes, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputInfo(4, outputDimensionSizes, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    std::vector&lt;float&gt; weightsVector = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> weights(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(4, weightsDimensionSizes, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>), weightsVector);</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    std::vector&lt;float&gt; betaVector     = { 0.1f };</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    std::vector&lt;float&gt; gammaVector    = { 0.5f };</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    std::vector&lt;float&gt; meanVector     = { 0 };</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    std::vector&lt;float&gt; varianceVector = { 1 };</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> beta(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(1, outputChannelSize, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>), betaVector);</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> gamma(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(1, outputChannelSize, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>), gammaVector);</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> mean(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(1, outputChannelSize, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>), meanVector);</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> variance(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(1, outputChannelSize, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>), varianceVector);</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    <a class="code" href="classarmnn_1_1_constant_layer.xhtml">ConstantLayer</a>* biasLayer = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    <span class="comment">// Define the network</span></div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    <span class="keyword">auto</span> input     = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    <span class="keyword">auto</span> weightsLayer = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_constant_layer.xhtml">ConstantLayer</a>&gt;(<span class="stringliteral">&quot;Weights&quot;</span>);</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <span class="keyword">auto</span> conv      = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml">Convolution2dLayer</a>&gt;(convolution2dDescriptor, <span class="stringliteral">&quot;convolution&quot;</span>);</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    <span class="keyword">auto</span> batchNorm = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_batch_normalization_layer.xhtml">BatchNormalizationLayer</a>&gt;(batchNormDescriptor, <span class="stringliteral">&quot;batchNorm&quot;</span>);</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <span class="keyword">auto</span> output    = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <span class="comment">// Set layer information</span></div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(inputInfo);</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    weightsLayer-&gt;m_LayerOutput = std::make_shared&lt;ScopedTensorHandle&gt;(weights);</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    weightsLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(weightsLayer-&gt;m_LayerOutput-&gt;GetTensorInfo());</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    conv-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    batchNorm-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>().<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(outputInfo);</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    batchNorm-&gt;m_Beta     = std::make_unique&lt;ScopedTensorHandle&gt;(beta);</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    batchNorm-&gt;m_Gamma    = std::make_unique&lt;ScopedTensorHandle&gt;(gamma);</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    batchNorm-&gt;m_Mean     = std::make_unique&lt;ScopedTensorHandle&gt;(mean);</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    batchNorm-&gt;m_Variance = std::make_unique&lt;ScopedTensorHandle&gt;(variance);</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    <span class="keywordflow">if</span> (convolution2dDescriptor.m_BiasEnabled)</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    {</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;        std::vector&lt;float&gt; biasVector = { 11 };</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;        <a class="code" href="classarmnn_1_1_const_tensor.xhtml">ConstTensor</a> bias(<a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>(1, outputChannelSize, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>, 0.0f, 0, <span class="keyword">true</span>), biasVector);</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;        biasLayer =graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_constant_layer.xhtml">ConstantLayer</a>&gt;(<span class="stringliteral">&quot;Bias&quot;</span>);</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;        biasLayer-&gt;<a class="code" href="classarmnn_1_1_constant_layer.xhtml#ad0c4b8ee0efd8f9336571cbeab8a53fe">m_LayerOutput</a> = std::make_shared&lt;ScopedTensorHandle&gt;(bias);</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;        biasLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">SetTensorInfo</a>(biasLayer-&gt;<a class="code" href="classarmnn_1_1_constant_layer.xhtml#ad0c4b8ee0efd8f9336571cbeab8a53fe">m_LayerOutput</a>-&gt;GetTensorInfo());</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;        biasLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(conv-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(2));</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        conv-&gt;m_Bias = biasLayer-&gt;<a class="code" href="classarmnn_1_1_constant_layer.xhtml#ad0c4b8ee0efd8f9336571cbeab8a53fe">m_LayerOutput</a>;</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    }</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <span class="comment">// Connect layers</span></div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    input-&gt;GetOutputSlot(0).Connect(conv-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    weightsLayer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(conv-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(1));</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    conv-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(batchNorm-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    batchNorm-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    <span class="comment">// Temporary workaround to ensure the descriptor weights are populated</span></div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    conv-&gt;m_Weight = weightsLayer-&gt;m_LayerOutput;</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <span class="keywordflow">if</span> (convolution2dDescriptor.m_BiasEnabled)</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    {</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;        CHECK(6 == graph.<a class="code" href="classarmnn_1_1_graph.xhtml#afdf8eb85585a798ad0e936bde884d87b">GetNumLayers</a>());</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;        CHECK(<a class="code" href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">cbegin</a>(), graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">cend</a>(),</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;                            &amp;IsLayerOfType&lt;InputLayer&gt;,</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;                            &amp;IsLayerOfType&lt;ConstantLayer&gt;,</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;                            &amp;IsLayerOfType&lt;ConstantLayer&gt;,</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                            &amp;IsLayerOfType&lt;Convolution2dLayer&gt;,</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                            &amp;IsLayerOfType&lt;BatchNormalizationLayer&gt;,</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                            &amp;IsLayerOfType&lt;OutputLayer&gt;));</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    }</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    {</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;        CHECK(5 == graph.<a class="code" href="classarmnn_1_1_graph.xhtml#afdf8eb85585a798ad0e936bde884d87b">GetNumLayers</a>());</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;        CHECK(<a class="code" href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">cbegin</a>(), graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">cend</a>(),</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                            &amp;IsLayerOfType&lt;InputLayer&gt;,</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                            &amp;IsLayerOfType&lt;ConstantLayer&gt;,</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                            &amp;IsLayerOfType&lt;Convolution2dLayer&gt;,</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                            &amp;IsLayerOfType&lt;BatchNormalizationLayer&gt;,</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;                            &amp;IsLayerOfType&lt;OutputLayer&gt;));</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    }</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    <span class="comment">// Optimize graph</span></div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    <a class="code" href="classarmnn_1_1_optimizer.xhtml#a1f48ba622b76ea04d15c9b62f642bf08">armnn::Optimizer::Pass</a>(graph, <a class="code" href="namespacearmnn.xhtml#aa7427025a851113a492de0b68b23d22a">MakeOptimizations</a>(<a class="code" href="namespacearmnn_1_1optimizations.xhtml#aa52c06792e18dc13030e82476f706f9e">FuseBatchNormIntoConvolution2DFloat32</a>()));</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    <span class="keyword">auto</span> checkFusedConv2d = [](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a>* <span class="keyword">const</span> layer) -&gt; <span class="keywordtype">bool</span> {</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;        <span class="keywordflow">return</span> IsLayerOfType&lt;armnn::Convolution2dLayer&gt;(layer) &amp;&amp;</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;               (layer-&gt;GetNameStr() == <span class="stringliteral">&quot;fused-batchNorm-into-convolution&quot;</span>);</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;    };</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    CHECK(5 == graph.<a class="code" href="classarmnn_1_1_graph.xhtml#afdf8eb85585a798ad0e936bde884d87b">GetNumLayers</a>());</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    CHECK(<a class="code" href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">cbegin</a>(), graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">cend</a>(),</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                        &amp;IsLayerOfType&lt;InputLayer&gt;,</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                        &amp;IsLayerOfType&lt;ConstantLayer&gt;,</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                        &amp;IsLayerOfType&lt;ConstantLayer&gt;,</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                        checkFusedConv2d,</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                        &amp;IsLayerOfType&lt;OutputLayer&gt;));</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;}</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;<span class="comment">// Tests that OptimizeForExclusiveConnections works, not fusing when not needed, using BatchNorm fusing as example</span></div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;TEST_CASE(<span class="stringliteral">&quot;OptimizeForExclusiveConnectionsWithoutFuseTest&quot;</span>)</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;{</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    <span class="comment">// Define the network</span></div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> convolution2dDescriptor;</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    <a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> batchNormDescriptor;</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    <span class="keyword">auto</span> input     = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_input_layer.xhtml">InputLayer</a>&gt;(0, <span class="stringliteral">&quot;input&quot;</span>);</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    <span class="keyword">auto</span> conv      = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_convolution2d_layer.xhtml">Convolution2dLayer</a>&gt;(convolution2dDescriptor, <span class="stringliteral">&quot;convolution&quot;</span>);</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    <span class="keyword">auto</span> batchNorm = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_batch_normalization_layer.xhtml">BatchNormalizationLayer</a>&gt;(batchNormDescriptor, <span class="stringliteral">&quot;batchNorm&quot;</span>);</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    <span class="keyword">auto</span> output    = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(0, <span class="stringliteral">&quot;output&quot;</span>);</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    <span class="keyword">auto</span> output2   = graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">AddLayer</a>&lt;<a class="code" href="classarmnn_1_1_output_layer.xhtml">OutputLayer</a>&gt;(1, <span class="stringliteral">&quot;output2&quot;</span>);</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    <span class="comment">// Connect layers</span></div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    input-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(conv-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    conv-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(batchNorm-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    batchNorm-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    conv-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">GetOutputSlot</a>(0).<a class="code" href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">Connect</a>(output2-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">GetInputSlot</a>(0));</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    CHECK(5 == graph.<a class="code" href="classarmnn_1_1_graph.xhtml#afdf8eb85585a798ad0e936bde884d87b">GetNumLayers</a>());</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;    CHECK(<a class="code" href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">cbegin</a>(), graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">cend</a>(),</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                             &amp;IsLayerOfType&lt;armnn::InputLayer&gt;,</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;                             &amp;IsLayerOfType&lt;armnn::Convolution2dLayer&gt;,</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                             &amp;IsLayerOfType&lt;armnn::BatchNormalizationLayer&gt;,</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;                             &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;,</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;                             &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;));</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    <span class="comment">// Optimize graph</span></div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;    <a class="code" href="classarmnn_1_1_optimizer.xhtml#a1f48ba622b76ea04d15c9b62f642bf08">armnn::Optimizer::Pass</a>(graph, <a class="code" href="namespacearmnn.xhtml#aa7427025a851113a492de0b68b23d22a">armnn::MakeOptimizations</a>(<a class="code" href="namespacearmnn_1_1optimizations.xhtml#aa52c06792e18dc13030e82476f706f9e">FuseBatchNormIntoConvolution2DFloat32</a>()));</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    CHECK(5 == graph.<a class="code" href="classarmnn_1_1_graph.xhtml#afdf8eb85585a798ad0e936bde884d87b">GetNumLayers</a>());</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    CHECK(<a class="code" href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a>(graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">cbegin</a>(), graph.<a class="code" href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">cend</a>(),</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;                             &amp;IsLayerOfType&lt;armnn::InputLayer&gt;,</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;                             &amp;IsLayerOfType&lt;armnn::Convolution2dLayer&gt;,</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;                             &amp;IsLayerOfType&lt;armnn::BatchNormalizationLayer&gt;,</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;                             &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;,</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;                             &amp;IsLayerOfType&lt;armnn::OutputLayer&gt;));</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;}</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;} <span class="comment">// Optimizer TestSuite</span></div><div class="ttc" id="classarmnn_1_1_constant_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_constant_layer.xhtml">armnn::ConstantLayer</a></div><div class="ttdoc">A layer that the constant data can be bound to. </div><div class="ttdef"><b>Definition:</b> <a href="_constant_layer_8hpp_source.xhtml#l00015">ConstantLayer.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_a2387033802383edbdc95f9bbb12a707e"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#a2387033802383edbdc95f9bbb12a707e">armnn::Graph::begin</a></div><div class="ttdeci">Iterator begin()</div><div class="ttdoc">Returns iterator pointing to the beginning of the list. Lowercase for range-based for loops...</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00169">Graph.hpp:169</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::Convolution2dDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00547">Descriptors.hpp:547</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::Convolution2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00549">Descriptors.hpp:549</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a224df72b3d7a3bba8609bc167286e3f7"><div class="ttname"><a href="namespacearmnn.xhtml#a224df72b3d7a3bba8609bc167286e3f7">armnn::AssignBackends</a></div><div class="ttdeci">OptimizationResult AssignBackends(OptimizedNetworkImpl *optNetObjPtr, BackendSettings &amp;backendSettings, Graph::Iterator &amp;firstLayer, Graph::Iterator &amp;lastLayer, Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; errMessages)</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01018">Network.cpp:1018</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abd839f0f103c1ae19a4b38d59b869108"><div class="ttname"><a href="namespacearmnn.xhtml#abd839f0f103c1ae19a4b38d59b869108">armnn::HasCapability</a></div><div class="ttdeci">bool HasCapability(const std::string &amp;name, const BackendCapabilities &amp;capabilities)</div><div class="ttdoc">Convenience function to check if a capability exists in a BackendCapabilites struct. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_helper_8cpp_source.xhtml#l00058">BackendHelper.cpp:58</a></div></div>
<div class="ttc" id="classarmnn_1_1_batch_normalization_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_batch_normalization_layer.xhtml">armnn::BatchNormalizationLayer</a></div><div class="ttdoc">This layer represents a batch normalization operation. </div><div class="ttdef"><b>Definition:</b> <a href="_batch_normalization_layer_8hpp_source.xhtml#l00015">BatchNormalizationLayer.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00066">INetwork.hpp:66</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::Pooling2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00374">Descriptors.hpp:374</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abf625e50a5eaeafce5b39580dc95a9d3"><div class="ttname"><a href="namespacearmnn.xhtml#abf625e50a5eaeafce5b39580dc95a9d3">armnn::InsertConvertFp32ToFp16LayersAfter</a></div><div class="ttdeci">std::vector&lt; ConvertFp32ToFp16Layer * &gt; InsertConvertFp32ToFp16LayersAfter(Graph &amp;graph, Layer &amp;layer)</div><div class="ttdef"><b>Definition:</b> <a href="_network_utils_8cpp_source.xhtml#l00210">NetworkUtils.cpp:210</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::DepthwiseConvolution2dDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00673">Descriptors.hpp:673</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00062">Types.hpp:62</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad31c56533e4f9f9f51719599fbfcf7bb"><div class="ttname"><a href="namespacearmnn.xhtml#ad31c56533e4f9f9f51719599fbfcf7bb">armnn::InsertConvertFp16ToFp32LayersBefore</a></div><div class="ttdeci">std::vector&lt; ConvertFp16ToFp32Layer * &gt; InsertConvertFp16ToFp32LayersBefore(Graph &amp;graph, Layer &amp;layer, bool expectCorrectInputType)</div><div class="ttdef"><b>Definition:</b> <a href="_network_utils_8cpp_source.xhtml#l00138">NetworkUtils.cpp:138</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::Pooling2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00368">Descriptors.hpp:368</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa7427025a851113a492de0b68b23d22a"><div class="ttname"><a href="namespacearmnn.xhtml#aa7427025a851113a492de0b68b23d22a">armnn::MakeOptimizations</a></div><div class="ttdeci">Optimizer::Optimizations MakeOptimizations(Args &amp;&amp;... args)</div><div class="ttdef"><b>Definition:</b> <a href="_optimizer_8hpp_source.xhtml#l00043">Optimizer.hpp:43</a></div></div>
<div class="ttc" id="est_utils_2_test_utils_8hpp_xhtml_a0eedb278f57355b47fa983450d4e378c"><div class="ttname"><a href="est_utils_2_test_utils_8hpp.xhtml#a0eedb278f57355b47fa983450d4e378c">CheckSequence</a></div><div class="ttdeci">bool CheckSequence(const armnn::Graph::ConstIterator first, const armnn::Graph::ConstIterator last)</div><div class="ttdef"><b>Definition:</b> <a href="est_utils_2_test_utils_8hpp_source.xhtml#l00021">TestUtils.hpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3"><div class="ttname"><a href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::OutputShapeRounding::Floor</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00193">BackendId.hpp:193</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a43a46eafee5c08787ab17b4342730c20"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a43a46eafee5c08787ab17b4342730c20">armnn::Layer::BackendSelectionHint</a></div><div class="ttdeci">void BackendSelectionHint(Optional&lt; BackendId &gt; backend) final</div><div class="ttdoc">Provide a hint for the optimizer as to which backend to prefer for this layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00336">Layer.hpp:336</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::DepthwiseConvolution2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00675">Descriptors.hpp:675</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_device_spec_xhtml"><div class="ttname"><a href="classarmnn_1_1_device_spec.xhtml">armnn::DeviceSpec</a></div><div class="ttdef"><b>Definition:</b> <a href="_device_spec_8hpp_source.xhtml#l00014">DeviceSpec.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a71c3bdadfe1c69aba2cbf054bff47744"><div class="ttname"><a href="namespacearmnn.xhtml#a71c3bdadfe1c69aba2cbf054bff47744">armnn::GetCapability</a></div><div class="ttdeci">Optional&lt; const BackendOptions::BackendOption &gt; GetCapability(const std::string &amp;backendCapabilityName, const BackendCapabilities &amp;capabilities)</div><div class="ttdoc">Returns a BackendCapability if the backend lists the capability The BackendCapability must then be in...</div><div class="ttdef"><b>Definition:</b> <a href="_backend_helper_8cpp_source.xhtml#l00030">BackendHelper.cpp:30</a></div></div>
<div class="ttc" id="classarmnn_1_1_depthwise_convolution2d_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_depthwise_convolution2d_layer.xhtml">armnn::DepthwiseConvolution2dLayer</a></div><div class="ttdoc">This layer represents a depthwise convolution 2d operation. </div><div class="ttdef"><b>Definition:</b> <a href="_depthwise_convolution2d_layer_8hpp_source.xhtml#l00015">DepthwiseConvolution2dLayer.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_1_1optimizations_xhtml"><div class="ttname"><a href="namespacearmnn_1_1optimizations.xhtml">armnn::optimizations</a></div><div class="ttdef"><b>Definition:</b> <a href="_add_broadcast_reshape_layer_8hpp_source.xhtml#l00015">AddBroadcastReshapeLayer.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_constant_layer_xhtml_ad0c4b8ee0efd8f9336571cbeab8a53fe"><div class="ttname"><a href="classarmnn_1_1_constant_layer.xhtml#ad0c4b8ee0efd8f9336571cbeab8a53fe">armnn::ConstantLayer::m_LayerOutput</a></div><div class="ttdeci">std::shared_ptr&lt; ConstTensorHandle &gt; m_LayerOutput</div><div class="ttdef"><b>Definition:</b> <a href="_constant_layer_8hpp_source.xhtml#l00048">ConstantLayer.hpp:48</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_a7563c5b899e7d0ada08fd0fdb202f205"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#a7563c5b899e7d0ada08fd0fdb202f205">armnn::Graph::AddLayer</a></div><div class="ttdeci">LayerT * AddLayer(Args &amp;&amp;... args)</div><div class="ttdoc">Adds a new layer, of type LayerType, to the graph constructed with the arguments passed. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00425">Graph.hpp:425</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a6d8fb685cc1ff224f25aa127fcf62c86"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6d8fb685cc1ff224f25aa127fcf62c86">armnn::Pooling2dDescriptor::m_PoolWidth</a></div><div class="ttdeci">uint32_t m_PoolWidth</div><div class="ttdoc">Pooling width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00376">Descriptors.hpp:376</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_a98b1109a9006f8cc7d4566146a3bd737"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#a98b1109a9006f8cc7d4566146a3bd737">armnn::Graph::cbegin</a></div><div class="ttdeci">ConstIterator cbegin() const</div><div class="ttdoc">Returns const iterator pointing to the beginning of the list. Lowercase for range-based for loops...</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00179">Graph.hpp:179</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a></div><div class="ttdoc">A Convolution2dDescriptor for the Convolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00499">Descriptors.hpp:499</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_adcfb97035799ea4c043f9ef370714815"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#adcfb97035799ea4c043f9ef370714815">armnn::OutputSlot::Connect</a></div><div class="ttdeci">int Connect(InputSlot &amp;destination)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00112">Layer.cpp:112</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::LayerType::Activation</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a869254cb56968986a78a79e1d6d4a86b"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a869254cb56968986a78a79e1d6d4a86b">armnn::ResizeDescriptor::m_Method</a></div><div class="ttdeci">ResizeMethod m_Method</div><div class="ttdoc">The Interpolation method to use (Bilinear, NearestNeighbor). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00993">Descriptors.hpp:993</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimizer_xhtml_a1f48ba622b76ea04d15c9b62f642bf08"><div class="ttname"><a href="classarmnn_1_1_optimizer.xhtml#a1f48ba622b76ea04d15c9b62f642bf08">armnn::Optimizer::Pass</a></div><div class="ttdeci">static void Pass(Graph &amp;graph, const Optimizations &amp;optimizations)</div><div class="ttdef"><b>Definition:</b> <a href="_optimizer_8cpp_source.xhtml#l00016">Optimizer.cpp:16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a3888429b6ebc79f9a7df549e5e4d9a2fa843f2812f595e7ec7c5036e89fde02d6"><div class="ttname"><a href="namespacearmnn.xhtml#a3888429b6ebc79f9a7df549e5e4d9a2fa843f2812f595e7ec7c5036e89fde02d6">armnn::PaddingMethod::Exclude</a></div><div class="ttdoc">The padding fields don&amp;#39;t count and are ignored. </div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a8c29d6ea9b4186d69aad5961c910939c"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a8c29d6ea9b4186d69aad5961c910939c">armnn::Pooling2dDescriptor::m_PaddingMethod</a></div><div class="ttdeci">PaddingMethod m_PaddingMethod</div><div class="ttdoc">The padding method to be used. (Exclude, IgnoreValue). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00386">Descriptors.hpp:386</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::BatchNormalizationDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00808">Descriptors.hpp:808</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">armnn::LayerType::ConvertFp32ToFp16</a></div></div>
<div class="ttc" id="namespacearmnn_1_1optimizations_xhtml_aa52c06792e18dc13030e82476f706f9e"><div class="ttname"><a href="namespacearmnn_1_1optimizations.xhtml#aa52c06792e18dc13030e82476f706f9e">armnn::optimizations::FuseBatchNormIntoConvolution2DFloat32</a></div><div class="ttdeci">OptimizeForExclusiveConnection&lt; Convolution2dLayer, BatchNormalizationLayer, FuseBatchNorm&lt; Convolution2dLayer, armnn::DataType::Float32 &gt; &gt; FuseBatchNormIntoConvolution2DFloat32</div><div class="ttdef"><b>Definition:</b> <a href="_fuse_batch_norm_8hpp_source.xhtml#l00224">FuseBatchNorm.hpp:224</a></div></div>
<div class="ttc" id="classarmnn_1_1_convolution2d_layer_xhtml_a6266a703017d7296f87cc4923df2d725"><div class="ttname"><a href="classarmnn_1_1_convolution2d_layer.xhtml#a6266a703017d7296f87cc4923df2d725">armnn::Convolution2dLayer::m_Weight</a></div><div class="ttdeci">std::shared_ptr&lt; ConstTensorHandle &gt; m_Weight</div><div class="ttdoc">A unique pointer to store Weight values. </div><div class="ttdef"><b>Definition:</b> <a href="_convolution2d_layer_8hpp_source.xhtml#l00021">Convolution2dLayer.hpp:21</a></div></div>
<div class="ttc" id="classarmnn_1_1_activation_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_activation_layer.xhtml">armnn::ActivationLayer</a></div><div class="ttdoc">This layer represents an activation operation with the specified activation function. </div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_8hpp_source.xhtml#l00012">ActivationLayer.hpp:12</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00015">BackendRegistry.cpp:15</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::Pooling2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00372">Descriptors.hpp:372</a></div></div>
<div class="ttc" id="classarmnn_1_1_detection_post_process_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_detection_post_process_layer.xhtml">armnn::DetectionPostProcessLayer</a></div><div class="ttdoc">This layer represents a detection postprocess operator. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_8hpp_source.xhtml#l00016">DetectionPostProcessLayer.hpp:16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_acc25db0641c1c22faf95af3bb49080c9"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#acc25db0641c1c22faf95af3bb49080c9">armnn::Graph::Iterator</a></div><div class="ttdeci">LayerList::const_iterator Iterator</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00053">Graph.hpp:53</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::Pooling2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00380">Descriptors.hpp:380</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00290">Types.hpp:290</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a></div><div class="ttdoc">A ResizeBilinearDescriptor for the ResizeBilinearLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00966">Descriptors.hpp:966</a></div></div>
<div class="ttc" id="structarmnn_1_1_base_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_base_descriptor.xhtml">armnn::BaseDescriptor</a></div><div class="ttdoc">Base class for all descriptors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00022">Descriptors.hpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_strategy_base_xhtml"><div class="ttname"><a href="classarmnn_1_1_strategy_base.xhtml">armnn::StrategyBase</a></div><div class="ttdoc">Strategy base class with empty implementations. </div><div class="ttdef"><b>Definition:</b> <a href="_strategy_base_8hpp_source.xhtml#l00027">StrategyBase.hpp:27</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a5699e8606c37d18c03910b242cd1b010"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a5699e8606c37d18c03910b242cd1b010">armnn::Pooling2dDescriptor::m_PoolHeight</a></div><div class="ttdeci">uint32_t m_PoolHeight</div><div class="ttdoc">Pooling height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00378">Descriptors.hpp:378</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ae72089bcab60ac175557f4241b16a014"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">armnn::DetectionPostProcessDescriptor::m_MaxDetections</a></div><div class="ttdeci">uint32_t m_MaxDetections</div><div class="ttdoc">Maximum numbers of detections. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00710">Descriptors.hpp:710</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_acf8b8e23bf647836592982f97088d375"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#acf8b8e23bf647836592982f97088d375">armnn::Layer::GetInputSlot</a></div><div class="ttdeci">const InputSlot &amp; GetInputSlot(unsigned int index) const override</div><div class="ttdoc">Get a const input slot handle by slot index. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00322">Layer.hpp:322</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::Convolution2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00539">Descriptors.hpp:539</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">armnn::LayerType::ConvertFp16ToFp32</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::DepthwiseConvolution2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00665">Descriptors.hpp:665</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_output_layer.xhtml">armnn::OutputLayer</a></div><div class="ttdoc">A layer user-provided data can be bound to (e.g. inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_output_layer_8hpp_source.xhtml#l00013">OutputLayer.hpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_gather_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_gather_layer.xhtml">armnn::GatherLayer</a></div><div class="ttdoc">This layer represents a Gather operator. </div><div class="ttdef"><b>Definition:</b> <a href="_gather_layer_8hpp_source.xhtml#l00014">GatherLayer.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::Pooling2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00370">Descriptors.hpp:370</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimization_result_xhtml_a955b65059e7f9429a5d6041136bc1487"><div class="ttname"><a href="structarmnn_1_1_optimization_result.xhtml#a955b65059e7f9429a5d6041136bc1487">armnn::OptimizationResult::IsOk</a></div><div class="ttdeci">bool IsOk() const</div><div class="ttdef"><b>Definition:</b> <a href="_network_8hpp_source.xhtml#l00285">Network.hpp:285</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_adcf5037208faac36c0788239a073f75c"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#adcf5037208faac36c0788239a073f75c">armnn::ResizeDescriptor::m_TargetWidth</a></div><div class="ttdeci">uint32_t m_TargetWidth</div><div class="ttdoc">Target width value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00988">Descriptors.hpp:988</a></div></div>
<div class="ttc" id="structarmnn_1_1_gather_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_gather_descriptor.xhtml">armnn::GatherDescriptor</a></div><div class="ttdoc">A GatherDescriptor for the GatherLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00909">Descriptors.hpp:909</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a961bbfe1db71a848eff5a1f0ab775718ab1897515d548a960afe49ecf66a29021"><div class="ttname"><a href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718ab1897515d548a960afe49ecf66a29021">armnn::PoolingAlgorithm::Average</a></div></div>
<div class="ttc" id="classarmnn_1_1_mem_copy_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_mem_copy_layer.xhtml">armnn::MemCopyLayer</a></div><div class="ttdoc">This layer represents a memory copy operation. </div><div class="ttdef"><b>Definition:</b> <a href="_mem_copy_layer_8hpp_source.xhtml#l00013">MemCopyLayer.hpp:13</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00036">Descriptors.hpp:36</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimization_result_xhtml"><div class="ttname"><a href="structarmnn_1_1_optimization_result.xhtml">armnn::OptimizationResult</a></div><div class="ttdef"><b>Definition:</b> <a href="_network_8hpp_source.xhtml#l00272">Network.hpp:272</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a></div></div>
<div class="ttc" id="classarmnn_1_1_floor_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_floor_layer.xhtml">armnn::FloorLayer</a></div><div class="ttdoc">This layer represents a floor operation. </div><div class="ttdef"><b>Definition:</b> <a href="_floor_layer_8hpp_source.xhtml#l00013">FloorLayer.hpp:13</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a46c3fa15c46fb0d1dcdc24d0ea5cb5cd"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a46c3fa15c46fb0d1dcdc24d0ea5cb5cd">armnn::ResizeDescriptor::m_TargetHeight</a></div><div class="ttdeci">uint32_t m_TargetHeight</div><div class="ttdoc">Target height value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00990">Descriptors.hpp:990</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::Convolution2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00541">Descriptors.hpp:541</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
<div class="ttc" id="classarmnn_1_1_optimized_network_impl_xhtml"><div class="ttname"><a href="classarmnn_1_1_optimized_network_impl.xhtml">armnn::OptimizedNetworkImpl</a></div><div class="ttdef"><b>Definition:</b> <a href="_optimized_network_impl_8hpp_source.xhtml#l00011">OptimizedNetworkImpl.hpp:11</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_adceb04ae84c524e4d01881e3754a4d59"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">armnn::IConnectableLayer::GetType</a></div><div class="ttdeci">virtual LayerType GetType() const =0</div><div class="ttdoc">Returns the armnn::LayerType of this layer. </div></div>
<div class="ttc" id="classarmnn_1_1_pooling2d_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_pooling2d_layer.xhtml">armnn::Pooling2dLayer</a></div><div class="ttdoc">This layer represents a pooling 2d operation. </div><div class="ttdef"><b>Definition:</b> <a href="_pooling2d_layer_8hpp_source.xhtml#l00013">Pooling2dLayer.hpp:13</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::Pooling2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00388">Descriptors.hpp:388</a></div></div>
<div class="ttc" id="classarmnn_1_1_addition_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_addition_layer.xhtml">armnn::AdditionLayer</a></div><div class="ttdoc">This layer represents an addition operation. </div><div class="ttdef"><b>Definition:</b> <a href="_addition_layer_8hpp_source.xhtml#l00013">AdditionLayer.hpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_handler_xhtml_a97db12c41024f5545ef5cc4153e5443b"><div class="ttname"><a href="classarmnn_1_1_output_handler.xhtml#a97db12c41024f5545ef5cc4153e5443b">armnn::OutputHandler::SetTensorInfo</a></div><div class="ttdeci">void SetTensorInfo(const TensorInfo &amp;tensorInfo)</div><div class="ttdoc">Sets the TensorInfo used by this output handler. </div><div class="ttdef"><b>Definition:</b> <a href="_output_handler_8cpp_source.xhtml#l00015">OutputHandler.cpp:15</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_a0031997bf43bd2747656c31e4977793a"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#a0031997bf43bd2747656c31e4977793a">armnn::Pooling2dDescriptor::m_PoolType</a></div><div class="ttdeci">PoolingAlgorithm m_PoolType</div><div class="ttdoc">The pooling algorithm to use (Max. Average, L2). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00366">Descriptors.hpp:366</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::DepthwiseConvolution2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00667">Descriptors.hpp:667</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_a2ceda8d369e861997d558fac74d79c33"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#a2ceda8d369e861997d558fac74d79c33">armnn::Graph::InferTensorInfos</a></div><div class="ttdeci">void InferTensorInfos()</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00562">Graph.cpp:562</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_af2c0edc7ea62a8baaec4d3d9b2b09256"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#af2c0edc7ea62a8baaec4d3d9b2b09256">armnn::Layer::GetOutputHandler</a></div><div class="ttdeci">const OutputHandler &amp; GetOutputHandler(unsigned int i=0) const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00230">Layer.hpp:230</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f"><div class="ttname"><a href="namespacearmnn.xhtml#a9a2af2f8c4af4f9efa8e79417d505ac4aaf17c98bbd83c27d6426d2ff3fa81d7f">armnn::ResizeMethod::Bilinear</a></div></div>
<div class="ttc" id="classarmnn_1_1_input_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_input_layer.xhtml">armnn::InputLayer</a></div><div class="ttdoc">A layer user-provided data can be bound to (e.g. inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_input_layer_8hpp_source.xhtml#l00013">InputLayer.hpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_ab45dae688fc5d8983727abffa4389003"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#ab45dae688fc5d8983727abffa4389003">armnn::Graph::end</a></div><div class="ttdeci">Iterator end()</div><div class="ttdoc">Returns iterator pointing to the end of the list. Lowercase for range-based for loops. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00171">Graph.hpp:171</a></div></div>
<div class="ttc" id="classarmnn_1_1_output_slot_xhtml_a7e5c5771d741dd5473989047a9314728"><div class="ttname"><a href="classarmnn_1_1_output_slot.xhtml#a7e5c5771d741dd5473989047a9314728">armnn::OutputSlot::SetTensorInfo</a></div><div class="ttdeci">void SetTensorInfo(const TensorInfo &amp;tensorInfo) override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8cpp_source.xhtml#l00087">Layer.cpp:87</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a0e36688a43c35668d8db5257274c68fe"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a0e36688a43c35668d8db5257274c68fe">armnn::Layer::GetOutputSlot</a></div><div class="ttdeci">const OutputSlot &amp; GetOutputSlot(unsigned int index=0) const override</div><div class="ttdoc">Get the const output slot handle by slot index. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00324">Layer.hpp:324</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_1_1_backend_option_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_options_1_1_backend_option.xhtml">armnn::BackendOptions::BackendOption</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00215">BackendOptions.hpp:215</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_a02fd29b6dc3e21fbe4484362d85893bc"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#a02fd29b6dc3e21fbe4484362d85893bc">armnn::Graph::cend</a></div><div class="ttdeci">ConstIterator cend() const</div><div class="ttdoc">Returns const iterator pointing to the end of the list. Lowercase for range-based for loops...</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00181">Graph.hpp:181</a></div></div>
<div class="ttc" id="classarmnn_1_1_convolution2d_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_convolution2d_layer.xhtml">armnn::Convolution2dLayer</a></div><div class="ttdoc">This layer represents a convolution 2d operation. </div><div class="ttdef"><b>Definition:</b> <a href="_convolution2d_layer_8hpp_source.xhtml#l00015">Convolution2dLayer.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a></div><div class="ttdoc">A Pooling2dDescriptor for the Pooling2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00332">Descriptors.hpp:332</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_settings_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_settings.xhtml">armnn::BackendSettings</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_settings_8hpp_source.xhtml#l00018">BackendSettings.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml_afdf8eb85585a798ad0e936bde884d87b"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml#afdf8eb85585a798ad0e936bde884d87b">armnn::Graph::GetNumLayers</a></div><div class="ttdeci">size_t GetNumLayers() const</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00198">Graph.hpp:198</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::ResizeDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00995">Descriptors.hpp:995</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00678">Descriptors.hpp:678</a></div></div>
<div class="ttc" id="classarmnn_1_1_detection_post_process_layer_xhtml_a6dc8f4e1c0a2109b2a8412251c2cf7b0"><div class="ttname"><a href="classarmnn_1_1_detection_post_process_layer.xhtml#a6dc8f4e1c0a2109b2a8412251c2cf7b0">armnn::DetectionPostProcessLayer::m_Anchors</a></div><div class="ttdeci">std::shared_ptr&lt; ConstTensorHandle &gt; m_Anchors</div><div class="ttdoc">A unique pointer to store Anchor values. </div><div class="ttdef"><b>Definition:</b> <a href="_detection_post_process_layer_8hpp_source.xhtml#l00020">DetectionPostProcessLayer.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa32a843da6ea40ab3b17a3421ccdf671b">armnn::ActivationFunction::Linear</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00476">Network.cpp:476</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_addb6b14dd1b632263ffe77430259a7c4"><div class="ttname"><a href="namespacearmnn.xhtml#addb6b14dd1b632263ffe77430259a7c4">armnn::GetLayerTypeAsCString</a></div><div class="ttdeci">const char * GetLayerTypeAsCString(LayerType type)</div><div class="ttdef"><b>Definition:</b> <a href="_internal_types_8cpp_source.xhtml#l00013">InternalTypes.cpp:13</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml_af10fa7883e3579950f477bee92a64844"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml#af10fa7883e3579950f477bee92a64844">armnn::ActivationDescriptor::m_Function</a></div><div class="ttdeci">ActivationFunction m_Function</div><div class="ttdoc">The activation function to use (Sigmoid, TanH, Linear, ReLu, BoundedReLu, SoftReLu, LeakyReLu, Abs, Sqrt, Square, Elu). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00059">Descriptors.hpp:59</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::Pooling2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00382">Descriptors.hpp:382</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a></div><div class="ttdoc">A DepthwiseConvolution2dDescriptor for the DepthwiseConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00624">Descriptors.hpp:624</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00215">Layer.hpp:215</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a></div><div class="ttdoc">A BatchNormalizationDescriptor for the BatchNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00793">Descriptors.hpp:793</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
<div class="ttc" id="classarmnn_1_1_resize_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_resize_layer.xhtml">armnn::ResizeLayer</a></div><div class="ttdoc">This layer represents a resize operation. </div><div class="ttdef"><b>Definition:</b> <a href="_resize_layer_8hpp_source.xhtml#l00013">ResizeLayer.hpp:13</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_9d86fd1fbecbedf5bdb69c7e7235fe5f.xhtml">test</a></li><li class="navelem"><a class="el" href="_optimizer_tests_8cpp.xhtml">OptimizerTests.cpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:24 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
