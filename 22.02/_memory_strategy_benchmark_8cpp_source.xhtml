<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/MemoryStrategyBenchmark/MemoryStrategyBenchmark.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_memory_strategy_benchmark_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">MemoryStrategyBenchmark.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_memory_strategy_benchmark_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2021 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_test_blocks_8hpp.xhtml">TestBlocks.hpp</a>&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_test_strategy_8hpp.xhtml">TestStrategy.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_memory_optimizer_strategy_8hpp.xhtml">IMemoryOptimizerStrategy.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_memory_optimizer_strategy_library_8hpp.xhtml">MemoryOptimizerStrategyLibrary.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_strategy_validator_8hpp.xhtml">strategies/StrategyValidator.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;cxxopts.hpp&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;iomanip&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;std::vector&lt;TestBlock&gt; <a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#adc52beddceb881571b92eb68f3b51e2a">testBlocks</a></div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="_memory_strategy_benchmark_8cpp.xhtml#adc52beddceb881571b92eb68f3b51e2a">   20</a></span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    {<span class="stringliteral">&quot;fsrcnn&quot;</span>, <a class="code" href="_test_mem_blocks_8hpp.xhtml#a47acdd93d9b2b0720f859f143a8e906c">fsrcnn</a>},</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    {<span class="stringliteral">&quot;inceptionv4&quot;</span>, <a class="code" href="_test_blocks_8hpp.xhtml#ae6a8359e2eeae9e4f9ba8f7e5b4a6b14">inceptionv4</a>},</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    {<span class="stringliteral">&quot;deeplabv3&quot;</span>, <a class="code" href="_test_blocks_8hpp.xhtml#a4ece78d38e9bb9b6b6cd572e8120e060">deeplabv3</a>},</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    {<span class="stringliteral">&quot;deepspeechv1&quot;</span>, <a class="code" href="_test_blocks_8hpp.xhtml#a2a4f771d8fc0318a90f24231711b83d3">deepspeechv1</a>},</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    {<span class="stringliteral">&quot;mobilebert&quot;</span>, <a class="code" href="_test_blocks_8hpp.xhtml#adb8fcff7cd5ba4c0ea2c2c119644ef81">mobilebert</a>},</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    {<span class="stringliteral">&quot;ssd_mobilenetv2&quot;</span>, <a class="code" href="_test_blocks_8hpp.xhtml#ae70bd5443fa2fe1ab18ae13e13d9e28e">ssd_mobilenetv2</a>},</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    {<span class="stringliteral">&quot;resnetv2&quot;</span>, <a class="code" href="_test_blocks_8hpp.xhtml#a6e13d448d7280ceeda463399718a0bf9">resnetv2</a>},</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    {<span class="stringliteral">&quot;yolov3&quot;</span>,<a class="code" href="namespaceyolov3.xhtml">yolov3</a>}</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;};</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="_memory_strategy_benchmark_8cpp.xhtml#aef11c2de26ec45a5411b95e448682c52">   31</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#aef11c2de26ec45a5411b95e448682c52">PrintModels</a>()</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;Available models:\n&quot;</span>;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; model : <a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#adc52beddceb881571b92eb68f3b51e2a">testBlocks</a>)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        std::cout &lt;&lt; model.m_Name &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="_memory_strategy_benchmark_8cpp.xhtml#ac54ec5e4de9e73260e2b2ab90c554427">   41</a></span>&#160;<span class="keywordtype">size_t</span> <a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#ac54ec5e4de9e73260e2b2ab90c554427">GetMinPossibleMemorySize</a>(<span class="keyword">const</span> std::vector&lt;armnn::MemBlock&gt;&amp; blocks)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxLifetime = 0;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; block: blocks)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        maxLifetime = std::max(maxLifetime, block.m_EndOfLife);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    maxLifetime++;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;   std::vector&lt;size_t&gt; lifetimes(maxLifetime);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;   <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; block : blocks)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;   {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;       <span class="keywordflow">for</span> (<span class="keyword">auto</span> lifetime = block.m_StartOfLife; lifetime &lt;= block.m_EndOfLife; ++lifetime)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;       {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;           lifetimes[lifetime] += block.m_MemSize;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;       }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;   }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;   <span class="keywordflow">return</span> *std::max_element(lifetimes.begin(), lifetimes.end());</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="_memory_strategy_benchmark_8cpp.xhtml#aba6eebd2d3373afeccede4b25c53a360">   61</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#aba6eebd2d3373afeccede4b25c53a360">RunBenchmark</a>(<a class="code" href="classarmnn_1_1_i_memory_optimizer_strategy.xhtml">armnn::IMemoryOptimizerStrategy</a>* strategy, std::vector&lt;TestBlock&gt;* models)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">using</span> Clock = std::chrono::high_resolution_clock;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordtype">float</span> avgEfficiency = 0;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    std::chrono::duration&lt;double, std::milli&gt; avgDuration{};</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\nMemory Strategy: &quot;</span>  &lt;&lt; strategy-&gt;<a class="code" href="classarmnn_1_1_i_memory_optimizer_strategy.xhtml#a46f9918b14061163f435d80860b02b56">GetName</a>()&lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;===============================================\n&quot;</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; model : *models)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">auto</span> now = Clock::now();</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> std::vector&lt;armnn::MemBin&gt; result = strategy-&gt;<a class="code" href="classarmnn_1_1_i_memory_optimizer_strategy.xhtml#a1a9447457df9be8f8186fe73bba4cb72">Optimize</a>(model.m_Blocks);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">auto</span> duration = std::chrono::duration&lt;double, std::milli&gt;(Clock::now() - now);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        avgDuration += duration;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordtype">size_t</span> memoryUsage = 0;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> bin : result)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            memoryUsage += bin.m_MemSize;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordtype">size_t</span> minSize = <a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#ac54ec5e4de9e73260e2b2ab90c554427">GetMinPossibleMemorySize</a>(model.m_Blocks);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordtype">float</span> efficiency = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(minSize) / static_cast&lt;float&gt;(memoryUsage);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        efficiency*=100;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        avgEfficiency += efficiency;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;\nModel: &quot;</span> &lt;&lt; model.m_Name &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Strategy execution time: &quot;</span> &lt;&lt; std::setprecision(4) &lt;&lt; duration.count() &lt;&lt; <span class="stringliteral">&quot; milliseconds\n&quot;</span>;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Memory usage: &quot;</span> &lt;&lt; memoryUsage/1024 &lt;&lt; <span class="stringliteral">&quot; kb\n&quot;</span>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Minimum possible usage: &quot;</span> &lt;&lt; minSize/1024 &lt;&lt; <span class="stringliteral">&quot; kb\n&quot;</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Memory efficiency: &quot;</span> &lt;&lt; std::setprecision(3) &lt;&lt; efficiency &lt;&lt; <span class="stringliteral">&quot;%\n&quot;</span>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    avgDuration/= <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(models-&gt;size());</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    avgEfficiency/= <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(models-&gt;size());</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n===============================================\n&quot;</span>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;Average memory duration: &quot;</span> &lt;&lt; std::setprecision(4) &lt;&lt; avgDuration.count() &lt;&lt; <span class="stringliteral">&quot; milliseconds\n&quot;</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;Average memory efficiency: &quot;</span> &lt;&lt; std::setprecision(3) &lt;&lt; avgEfficiency &lt;&lt; <span class="stringliteral">&quot;%\n&quot;</span>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keyword">struct </span>BenchmarkOptions</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    std::string m_StrategyName;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    std::string m_ModelName;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordtype">bool</span> m_UseDefaultStrategy = <span class="keyword">false</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordtype">bool</span> m_Validate = <span class="keyword">false</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;};</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="_memory_strategy_benchmark_8cpp.xhtml#a091ff67b5c74f7926c85b5487645dddf">  112</a></span>&#160;BenchmarkOptions <a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#a091ff67b5c74f7926c85b5487645dddf">ParseOptions</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    cxxopts::Options options(<span class="stringliteral">&quot;Memory Benchmark&quot;</span>, <span class="stringliteral">&quot;Tests memory optimization strategies on different models&quot;</span>);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    options.add_options()</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        (<span class="stringliteral">&quot;s, strategy&quot;</span>, <span class="stringliteral">&quot;Strategy name, do not specify to use default strategy&quot;</span>, cxxopts::value&lt;std::string&gt;())</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        (<span class="stringliteral">&quot;m, model&quot;</span>, <span class="stringliteral">&quot;Model name&quot;</span>, cxxopts::value&lt;std::string&gt;())</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        (<span class="stringliteral">&quot;v, validate&quot;</span>, <span class="stringliteral">&quot;Validate strategy&quot;</span>, cxxopts::value&lt;bool&gt;()-&gt;default_value(<span class="stringliteral">&quot;false&quot;</span>)-&gt;implicit_value(<span class="stringliteral">&quot;true&quot;</span>))</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        (<span class="stringliteral">&quot;h,help&quot;</span>, <span class="stringliteral">&quot;Display usage information&quot;</span>);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">auto</span> result = options.parse(argc, argv);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">if</span> (result.count(<span class="stringliteral">&quot;help&quot;</span>))</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        std::cout &lt;&lt; options.help() &lt;&lt; std::endl;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#aef11c2de26ec45a5411b95e448682c52">PrintModels</a>();</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;\nAvailable strategies:\n&quot;</span>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; s :<a class="code" href="namespacearmnn.xhtml#aedc54936fd5ebb2d5697c8001532401a">armnn::GetMemoryOptimizerStrategyNames</a>())</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            std::cout &lt;&lt; s &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        exit(EXIT_SUCCESS);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    BenchmarkOptions benchmarkOptions;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">if</span>(result.count(<span class="stringliteral">&quot;strategy&quot;</span>))</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        benchmarkOptions.m_StrategyName = result[<span class="stringliteral">&quot;strategy&quot;</span>].as&lt;std::string&gt;();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;No Strategy given, using default strategy&quot;</span>;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        benchmarkOptions.m_UseDefaultStrategy = <span class="keyword">true</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">if</span>(result.count(<span class="stringliteral">&quot;model&quot;</span>))</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        benchmarkOptions.m_ModelName = result[<span class="stringliteral">&quot;model&quot;</span>].as&lt;std::string&gt;();</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    benchmarkOptions.m_Validate = result[<span class="stringliteral">&quot;validate&quot;</span>].as&lt;<span class="keywordtype">bool</span>&gt;();</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">return</span> benchmarkOptions;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="_memory_strategy_benchmark_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">  160</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    BenchmarkOptions benchmarkOptions = <a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#a091ff67b5c74f7926c85b5487645dddf">ParseOptions</a>(argc, argv);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    std::shared_ptr&lt;armnn::IMemoryOptimizerStrategy&gt; strategy;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">if</span> (benchmarkOptions.m_UseDefaultStrategy)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        strategy = std::make_shared&lt;armnn::TestStrategy&gt;();</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        strategy = <a class="code" href="namespacearmnn.xhtml#a7c8192a429fc68220e4fc308062a02ba">armnn::GetMemoryOptimizerStrategy</a>(benchmarkOptions.m_StrategyName);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">if</span> (!strategy)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Strategy name not found\n&quot;</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    std::vector&lt;TestBlock&gt; model;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    std::vector&lt;TestBlock&gt;* modelsToTest = &amp;<a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#adc52beddceb881571b92eb68f3b51e2a">testBlocks</a>;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">if</span> (benchmarkOptions.m_ModelName.size() != 0)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keyword">auto</span> it = std::find_if(<a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#adc52beddceb881571b92eb68f3b51e2a">testBlocks</a>.cbegin(), <a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#adc52beddceb881571b92eb68f3b51e2a">testBlocks</a>.cend(), [&amp;](<span class="keyword">const</span> <a class="code" href="struct_test_block.xhtml">TestBlock</a> testBlock)</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">return</span> testBlock.m_Name == benchmarkOptions.m_ModelName;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        });</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">if</span> (it == <a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#adc52beddceb881571b92eb68f3b51e2a">testBlocks</a>.end())</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;Model name not found\n&quot;</span>;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            model.push_back(*it);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            modelsToTest = &amp;model;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">if</span> (benchmarkOptions.m_Validate)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <a class="code" href="classarmnn_1_1_strategy_validator.xhtml">armnn::StrategyValidator</a> strategyValidator;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        strategyValidator.<a class="code" href="classarmnn_1_1_strategy_validator.xhtml#a34cc41b73a9323258cb8f7d5f4bc0cdc">SetStrategy</a>(strategy);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#aba6eebd2d3373afeccede4b25c53a360">RunBenchmark</a>(&amp;strategyValidator, modelsToTest);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <a class="code" href="_memory_strategy_benchmark_8cpp.xhtml#aba6eebd2d3373afeccede4b25c53a360">RunBenchmark</a>(strategy.get(), modelsToTest);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    }</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div><div class="ttc" id="_memory_optimizer_strategy_library_8hpp_xhtml"><div class="ttname"><a href="_memory_optimizer_strategy_library_8hpp.xhtml">MemoryOptimizerStrategyLibrary.hpp</a></div></div>
<div class="ttc" id="_strategy_validator_8hpp_xhtml"><div class="ttname"><a href="_strategy_validator_8hpp.xhtml">StrategyValidator.hpp</a></div></div>
<div class="ttc" id="_memory_strategy_benchmark_8cpp_xhtml_aef11c2de26ec45a5411b95e448682c52"><div class="ttname"><a href="_memory_strategy_benchmark_8cpp.xhtml#aef11c2de26ec45a5411b95e448682c52">PrintModels</a></div><div class="ttdeci">void PrintModels()</div><div class="ttdef"><b>Definition:</b> <a href="_memory_strategy_benchmark_8cpp_source.xhtml#l00031">MemoryStrategyBenchmark.cpp:31</a></div></div>
<div class="ttc" id="_test_mem_blocks_8hpp_xhtml_a47acdd93d9b2b0720f859f143a8e906c"><div class="ttname"><a href="_test_mem_blocks_8hpp.xhtml#a47acdd93d9b2b0720f859f143a8e906c">fsrcnn</a></div><div class="ttdeci">std::vector&lt; armnn::MemBlock &gt; fsrcnn</div><div class="ttdef"><b>Definition:</b> <a href="_test_mem_blocks_8hpp_source.xhtml#l00028">TestMemBlocks.hpp:28</a></div></div>
<div class="ttc" id="_test_blocks_8hpp_xhtml_a4ece78d38e9bb9b6b6cd572e8120e060"><div class="ttname"><a href="_test_blocks_8hpp.xhtml#a4ece78d38e9bb9b6b6cd572e8120e060">deeplabv3</a></div><div class="ttdeci">std::vector&lt; armnn::MemBlock &gt; deeplabv3</div><div class="ttdef"><b>Definition:</b> <a href="_test_blocks_8hpp_source.xhtml#l01122">TestBlocks.hpp:1122</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_memory_optimizer_strategy_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_memory_optimizer_strategy.xhtml">armnn::IMemoryOptimizerStrategy</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_memory_optimizer_strategy_8hpp_source.xhtml#l00045">IMemoryOptimizerStrategy.hpp:45</a></div></div>
<div class="ttc" id="_memory_strategy_benchmark_8cpp_xhtml_adc52beddceb881571b92eb68f3b51e2a"><div class="ttname"><a href="_memory_strategy_benchmark_8cpp.xhtml#adc52beddceb881571b92eb68f3b51e2a">testBlocks</a></div><div class="ttdeci">std::vector&lt; TestBlock &gt; testBlocks</div><div class="ttdef"><b>Definition:</b> <a href="_memory_strategy_benchmark_8cpp_source.xhtml#l00020">MemoryStrategyBenchmark.cpp:20</a></div></div>
<div class="ttc" id="_test_blocks_8hpp_xhtml_ae70bd5443fa2fe1ab18ae13e13d9e28e"><div class="ttname"><a href="_test_blocks_8hpp.xhtml#ae70bd5443fa2fe1ab18ae13e13d9e28e">ssd_mobilenetv2</a></div><div class="ttdeci">std::vector&lt; armnn::MemBlock &gt; ssd_mobilenetv2</div><div class="ttdef"><b>Definition:</b> <a href="_test_blocks_8hpp_source.xhtml#l04374">TestBlocks.hpp:4374</a></div></div>
<div class="ttc" id="_test_strategy_8hpp_xhtml"><div class="ttname"><a href="_test_strategy_8hpp.xhtml">TestStrategy.hpp</a></div></div>
<div class="ttc" id="namespaceyolov3_xhtml"><div class="ttname"><a href="namespaceyolov3.xhtml">yolov3</a></div><div class="ttdef"><b>Definition:</b> <a href="_n_m_s_8cpp_source.xhtml#l00015">NMS.cpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_strategy_validator_xhtml_a34cc41b73a9323258cb8f7d5f4bc0cdc"><div class="ttname"><a href="classarmnn_1_1_strategy_validator.xhtml#a34cc41b73a9323258cb8f7d5f4bc0cdc">armnn::StrategyValidator::SetStrategy</a></div><div class="ttdeci">void SetStrategy(std::shared_ptr&lt; IMemoryOptimizerStrategy &gt; strategy)</div><div class="ttdef"><b>Definition:</b> <a href="_strategy_validator_8hpp_source.xhtml#l00018">StrategyValidator.hpp:18</a></div></div>
<div class="ttc" id="_test_blocks_8hpp_xhtml_ae6a8359e2eeae9e4f9ba8f7e5b4a6b14"><div class="ttname"><a href="_test_blocks_8hpp.xhtml#ae6a8359e2eeae9e4f9ba8f7e5b4a6b14">inceptionv4</a></div><div class="ttdeci">std::vector&lt; armnn::MemBlock &gt; inceptionv4</div><div class="ttdef"><b>Definition:</b> <a href="_test_blocks_8hpp_source.xhtml#l00037">TestBlocks.hpp:37</a></div></div>
<div class="ttc" id="classarmnn_1_1_strategy_validator_xhtml"><div class="ttname"><a href="classarmnn_1_1_strategy_validator.xhtml">armnn::StrategyValidator</a></div><div class="ttdef"><b>Definition:</b> <a href="_strategy_validator_8hpp_source.xhtml#l00014">StrategyValidator.hpp:14</a></div></div>
<div class="ttc" id="_memory_strategy_benchmark_8cpp_xhtml_aba6eebd2d3373afeccede4b25c53a360"><div class="ttname"><a href="_memory_strategy_benchmark_8cpp.xhtml#aba6eebd2d3373afeccede4b25c53a360">RunBenchmark</a></div><div class="ttdeci">void RunBenchmark(armnn::IMemoryOptimizerStrategy *strategy, std::vector&lt; TestBlock &gt; *models)</div><div class="ttdef"><b>Definition:</b> <a href="_memory_strategy_benchmark_8cpp_source.xhtml#l00061">MemoryStrategyBenchmark.cpp:61</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7c8192a429fc68220e4fc308062a02ba"><div class="ttname"><a href="namespacearmnn.xhtml#a7c8192a429fc68220e4fc308062a02ba">armnn::GetMemoryOptimizerStrategy</a></div><div class="ttdeci">std::unique_ptr&lt; IMemoryOptimizerStrategy &gt; GetMemoryOptimizerStrategy(const std::string &amp;strategyName)</div><div class="ttdef"><b>Definition:</b> <a href="_memory_optimizer_strategy_library_8hpp_source.xhtml#l00036">MemoryOptimizerStrategyLibrary.hpp:36</a></div></div>
<div class="ttc" id="_i_memory_optimizer_strategy_8hpp_xhtml"><div class="ttname"><a href="_i_memory_optimizer_strategy_8hpp.xhtml">IMemoryOptimizerStrategy.hpp</a></div></div>
<div class="ttc" id="_test_blocks_8hpp_xhtml"><div class="ttname"><a href="_test_blocks_8hpp.xhtml">TestBlocks.hpp</a></div></div>
<div class="ttc" id="_test_blocks_8hpp_xhtml_a2a4f771d8fc0318a90f24231711b83d3"><div class="ttname"><a href="_test_blocks_8hpp.xhtml#a2a4f771d8fc0318a90f24231711b83d3">deepspeechv1</a></div><div class="ttdeci">std::vector&lt; armnn::MemBlock &gt; deepspeechv1</div><div class="ttdef"><b>Definition:</b> <a href="_test_blocks_8hpp_source.xhtml#l00239">TestBlocks.hpp:239</a></div></div>
<div class="ttc" id="_memory_strategy_benchmark_8cpp_xhtml_a091ff67b5c74f7926c85b5487645dddf"><div class="ttname"><a href="_memory_strategy_benchmark_8cpp.xhtml#a091ff67b5c74f7926c85b5487645dddf">ParseOptions</a></div><div class="ttdeci">BenchmarkOptions ParseOptions(int argc, char *argv[])</div><div class="ttdef"><b>Definition:</b> <a href="_memory_strategy_benchmark_8cpp_source.xhtml#l00112">MemoryStrategyBenchmark.cpp:112</a></div></div>
<div class="ttc" id="_memory_strategy_benchmark_8cpp_xhtml_a0ddf1224851353fc92bfbff6f499fa97"><div class="ttname"><a href="_memory_strategy_benchmark_8cpp.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a></div><div class="ttdeci">int main(int argc, char *argv[])</div><div class="ttdef"><b>Definition:</b> <a href="_memory_strategy_benchmark_8cpp_source.xhtml#l00160">MemoryStrategyBenchmark.cpp:160</a></div></div>
<div class="ttc" id="_test_blocks_8hpp_xhtml_adb8fcff7cd5ba4c0ea2c2c119644ef81"><div class="ttname"><a href="_test_blocks_8hpp.xhtml#adb8fcff7cd5ba4c0ea2c2c119644ef81">mobilebert</a></div><div class="ttdeci">std::vector&lt; armnn::MemBlock &gt; mobilebert</div><div class="ttdef"><b>Definition:</b> <a href="_test_blocks_8hpp_source.xhtml#l01435">TestBlocks.hpp:1435</a></div></div>
<div class="ttc" id="_test_blocks_8hpp_xhtml_a6e13d448d7280ceeda463399718a0bf9"><div class="ttname"><a href="_test_blocks_8hpp.xhtml#a6e13d448d7280ceeda463399718a0bf9">resnetv2</a></div><div class="ttdeci">std::vector&lt; armnn::MemBlock &gt; resnetv2</div><div class="ttdef"><b>Definition:</b> <a href="_test_blocks_8hpp_source.xhtml#l00552">TestBlocks.hpp:552</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aedc54936fd5ebb2d5697c8001532401a"><div class="ttname"><a href="namespacearmnn.xhtml#aedc54936fd5ebb2d5697c8001532401a">armnn::GetMemoryOptimizerStrategyNames</a></div><div class="ttdeci">const std::vector&lt; std::string &gt; GetMemoryOptimizerStrategyNames()</div><div class="ttdef"><b>Definition:</b> <a href="_memory_optimizer_strategy_library_8hpp_source.xhtml#l00047">MemoryOptimizerStrategyLibrary.hpp:47</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_memory_optimizer_strategy_xhtml_a1a9447457df9be8f8186fe73bba4cb72"><div class="ttname"><a href="classarmnn_1_1_i_memory_optimizer_strategy.xhtml#a1a9447457df9be8f8186fe73bba4cb72">armnn::IMemoryOptimizerStrategy::Optimize</a></div><div class="ttdeci">virtual std::vector&lt; MemBin &gt; Optimize(std::vector&lt; MemBlock &gt; &amp;memBlocks)=0</div></div>
<div class="ttc" id="classarmnn_1_1_i_memory_optimizer_strategy_xhtml_a46f9918b14061163f435d80860b02b56"><div class="ttname"><a href="classarmnn_1_1_i_memory_optimizer_strategy.xhtml#a46f9918b14061163f435d80860b02b56">armnn::IMemoryOptimizerStrategy::GetName</a></div><div class="ttdeci">virtual std::string GetName() const =0</div></div>
<div class="ttc" id="struct_test_block_xhtml"><div class="ttname"><a href="struct_test_block.xhtml">TestBlock</a></div><div class="ttdef"><b>Definition:</b> <a href="_test_blocks_8hpp_source.xhtml#l00009">TestBlocks.hpp:9</a></div></div>
<div class="ttc" id="_memory_strategy_benchmark_8cpp_xhtml_ac54ec5e4de9e73260e2b2ab90c554427"><div class="ttname"><a href="_memory_strategy_benchmark_8cpp.xhtml#ac54ec5e4de9e73260e2b2ab90c554427">GetMinPossibleMemorySize</a></div><div class="ttdeci">size_t GetMinPossibleMemorySize(const std::vector&lt; armnn::MemBlock &gt; &amp;blocks)</div><div class="ttdef"><b>Definition:</b> <a href="_memory_strategy_benchmark_8cpp_source.xhtml#l00041">MemoryStrategyBenchmark.cpp:41</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_932e54daec5bd03e758a3b0d13a7f64e.xhtml">MemoryStrategyBenchmark</a></li><li class="navelem"><a class="el" href="_memory_strategy_benchmark_8cpp.xhtml">MemoryStrategyBenchmark.cpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:00 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
