<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: ClLayerSupport Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarmnn_1_1_cl_layer_support.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_cl_layer_support-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ClLayerSupport Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_cl_layer_support_8hpp_source.xhtml">ClLayerSupport.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ClLayerSupport:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_cl_layer_support.png" usemap="#ClLayerSupport_map" alt=""/>
  <map id="ClLayerSupport_map" name="ClLayerSupport_map">
<area href="classarmnn_1_1_layer_support_base.xhtml" alt="LayerSupportBase" shape="rect" coords="0,56,117,80"/>
<area href="classarmnn_1_1_i_layer_support.xhtml" alt="ILayerSupport" shape="rect" coords="0,0,117,24"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:adcaa3eb3d4e1bf48a235b97170dccd15"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#adcaa3eb3d4e1bf48a235b97170dccd15">ClLayerSupport</a> (const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a> &amp;modelContextPtr)</td></tr>
<tr class="separator:adcaa3eb3d4e1bf48a235b97170dccd15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1dc1384ae65a68453cd3f5fd4a6adbd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ac1dc1384ae65a68453cd3f5fd4a6adbd">ClLayerSupport</a> ()</td></tr>
<tr class="separator:ac1dc1384ae65a68453cd3f5fd4a6adbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35c41b0cdf5faf11fb39554c269e7f9b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a35c41b0cdf5faf11fb39554c269e7f9b">~ClLayerSupport</a> ()</td></tr>
<tr class="separator:a35c41b0cdf5faf11fb39554c269e7f9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f75cea2b43e602f4b99d60375d41a8a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a1f75cea2b43e602f4b99d60375d41a8a">IsLayerSupported</a> (const <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> &amp;type, const std::vector&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;infos, const <a class="el" href="structarmnn_1_1_base_descriptor.xhtml">BaseDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &gt; &amp;lstmParamsInfo, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &gt; &amp;quantizedLstmParamsInfo, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:a1f75cea2b43e602f4b99d60375d41a8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd148b61eab388a9313c61f4c7a96c4b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#acd148b61eab388a9313c61f4c7a96c4b">IsActivationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:acd148b61eab388a9313c61f4c7a96c4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06a955e172cf18898d966eab7383efa1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a06a955e172cf18898d966eab7383efa1">IsAdditionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a06a955e172cf18898d966eab7383efa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7224fbfbc4c5a2b3710543e3f574171f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a7224fbfbc4c5a2b3710543e3f574171f">IsArgMinMaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7224fbfbc4c5a2b3710543e3f574171f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22cfc1d5f68bd32db0aa126e8fd9e615"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a22cfc1d5f68bd32db0aa126e8fd9e615">IsBatchMatMulSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;inputX, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;inputY, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml">BatchMatMulDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a22cfc1d5f68bd32db0aa126e8fd9e615"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a450ddf4b4335cb37e07e3b0171b00096"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a450ddf4b4335cb37e07e3b0171b00096">IsBatchNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">mean</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">var</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">beta</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">gamma</a>, const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a450ddf4b4335cb37e07e3b0171b00096"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30cbe4bc4e20ae9b2aac66a108088919"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a30cbe4bc4e20ae9b2aac66a108088919">IsBatchToSpaceNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a30cbe4bc4e20ae9b2aac66a108088919"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac680aa10b0a3768da4c23e691881b5ea"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ac680aa10b0a3768da4c23e691881b5ea">IsCastSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac680aa10b0a3768da4c23e691881b5ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1362503332222029f9d73d40520f35bd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a1362503332222029f9d73d40520f35bd">IsChannelShuffleSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a1362503332222029f9d73d40520f35bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb14ff12be68a64356e8b3764032842d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#afb14ff12be68a64356e8b3764032842d">IsComparisonSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a076bc5e2bfb7bf8fb352b4b8fb8e3c2e">ouput</a>, const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:afb14ff12be68a64356e8b3764032842d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6465e7a85f4ef0013c7d7161cd07a4d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#af6465e7a85f4ef0013c7d7161cd07a4d">IsConcatSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt; inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:af6465e7a85f4ef0013c7d7161cd07a4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57aee9aba2e2ad5d0bd9f65acd05b6e4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a57aee9aba2e2ad5d0bd9f65acd05b6e4">IsConstantSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a57aee9aba2e2ad5d0bd9f65acd05b6e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95dac0c44b7e759694a97778bfbea954"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a95dac0c44b7e759694a97778bfbea954">IsConvertFp16ToFp32Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a95dac0c44b7e759694a97778bfbea954"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f9272cdf0224364e1bb9b47efe4130a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a5f9272cdf0224364e1bb9b47efe4130a">IsConvertFp32ToFp16Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a5f9272cdf0224364e1bb9b47efe4130a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bd807090f4cb45bbfaa9c67e49532f5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a4bd807090f4cb45bbfaa9c67e49532f5">IsConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a4bd807090f4cb45bbfaa9c67e49532f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe850b2a5be4ce4617cb51ceb5344756"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#abe850b2a5be4ce4617cb51ceb5344756">IsConvolution3dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:abe850b2a5be4ce4617cb51ceb5344756"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a866844299dc03c65ca41be5990bf19e8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a866844299dc03c65ca41be5990bf19e8">IsDequantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a866844299dc03c65ca41be5990bf19e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84f23a37f7fd69269f072e114b7f0afb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a84f23a37f7fd69269f072e114b7f0afb">IsDepthToSpaceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a84f23a37f7fd69269f072e114b7f0afb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56c4df05190f0f465e8501ae831af234"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a56c4df05190f0f465e8501ae831af234">IsDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a56c4df05190f0f465e8501ae831af234"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3b8e44b40a9c02ef372081ee2e454a1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ae3b8e44b40a9c02ef372081ee2e454a1">IsDilatedDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; reason=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae3b8e44b40a9c02ef372081ee2e454a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4217d27bcb41e14cd023552004b21a3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ad4217d27bcb41e14cd023552004b21a3">IsDivisionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad4217d27bcb41e14cd023552004b21a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeec02af89681b711706472de7be52871"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aeec02af89681b711706472de7be52871">IsElementwiseUnarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aeec02af89681b711706472de7be52871"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab747f27ee2acb8409799d6ea1af0dff7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab747f27ee2acb8409799d6ea1af0dff7">IsFillSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab747f27ee2acb8409799d6ea1af0dff7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae054f879bca9ff680f7e42ae97cc5ed3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ae054f879bca9ff680f7e42ae97cc5ed3">IsFloorSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae054f879bca9ff680f7e42ae97cc5ed3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7249912502bfa13dad25038e8fb9379b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a7249912502bfa13dad25038e8fb9379b">IsFullyConnectedSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7249912502bfa13dad25038e8fb9379b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0bca4c0de78df48fd6e63a3b8239f57"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ad0bca4c0de78df48fd6e63a3b8239f57">IsGatherNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const</td></tr>
<tr class="separator:ad0bca4c0de78df48fd6e63a3b8239f57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae02f78731b0d046f4ed85fcf46c5d17d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ae02f78731b0d046f4ed85fcf46c5d17d">IsGatherSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:ae02f78731b0d046f4ed85fcf46c5d17d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d0dbfd77d3461ded89d3bf6a4eab62c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a5d0dbfd77d3461ded89d3bf6a4eab62c">IsInputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a5d0dbfd77d3461ded89d3bf6a4eab62c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ee45bf624e40815207a2117f8e02b5d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a9ee45bf624e40815207a2117f8e02b5d">IsInstanceNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a9ee45bf624e40815207a2117f8e02b5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad17197c4dc4dd190610d6d205108255a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ad17197c4dc4dd190610d6d205108255a">IsL2NormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad17197c4dc4dd190610d6d205108255a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acaca6012c89942f00869d80c389d5e8a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#acaca6012c89942f00869d80c389d5e8a">IsLogicalBinarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:acaca6012c89942f00869d80c389d5e8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae13d577a85b2b121febb2fe43899fd6c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ae13d577a85b2b121febb2fe43899fd6c">IsLogSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae13d577a85b2b121febb2fe43899fd6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a533ad0fa8ff06bef939f4260a8183350"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a533ad0fa8ff06bef939f4260a8183350">IsLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">scratchBuffer</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a533ad0fa8ff06bef939f4260a8183350"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac92df5c79bae4ccdc68d9d2045fa2110"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ac92df5c79bae4ccdc68d9d2045fa2110">IsMaximumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac92df5c79bae4ccdc68d9d2045fa2110"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9869f2a0cbe051fcc87fb1405d4091d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ad9869f2a0cbe051fcc87fb1405d4091d">IsMeanSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad9869f2a0cbe051fcc87fb1405d4091d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4eb9b602052470f8eadcfa7a63b17d54"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a4eb9b602052470f8eadcfa7a63b17d54">IsMinimumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a4eb9b602052470f8eadcfa7a63b17d54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5960d08e30fb9542125688580c5f623"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab5960d08e30fb9542125688580c5f623">IsMultiplicationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab5960d08e30fb9542125688580c5f623"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedd6e4de83db27813fad327c29402033"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aedd6e4de83db27813fad327c29402033">IsNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aedd6e4de83db27813fad327c29402033"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2078e9d66b086cf1225f0610b05a520"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ac2078e9d66b086cf1225f0610b05a520">IsOutputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac2078e9d66b086cf1225f0610b05a520"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef4e4cfc054c2fd0e9bd0947909ebe83"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aef4e4cfc054c2fd0e9bd0947909ebe83">IsPadSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aef4e4cfc054c2fd0e9bd0947909ebe83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a336cc17b9c2cd4e7f667c7fcf5c9377e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a336cc17b9c2cd4e7f667c7fcf5c9377e">IsPermuteSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a336cc17b9c2cd4e7f667c7fcf5c9377e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6262dc3169d8e809c272b31b25aaa6a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ad6262dc3169d8e809c272b31b25aaa6a">IsPooling2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad6262dc3169d8e809c272b31b25aaa6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70c3043f5b6dd3091646fb2c1648a5f5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a70c3043f5b6dd3091646fb2c1648a5f5">IsPooling3dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a70c3043f5b6dd3091646fb2c1648a5f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdf847462abb9af6a8a932589a0046bb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#abdf847462abb9af6a8a932589a0046bb">IsPreluSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">alpha</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:abdf847462abb9af6a8a932589a0046bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a052a3d7389be3a0993c9f9a508fa435e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a052a3d7389be3a0993c9f9a508fa435e">IsQLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a052a3d7389be3a0993c9f9a508fa435e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7956a5f8822ae4071b4c5f133bf05a82"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a7956a5f8822ae4071b4c5f133bf05a82">IsQuantizedLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7956a5f8822ae4071b4c5f133bf05a82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4474f6170d9abd571f612b2dae34820"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab4474f6170d9abd571f612b2dae34820">IsQuantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab4474f6170d9abd571f612b2dae34820"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fe9a6e2b79cc5c97e582f1fe0e1f514"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a9fe9a6e2b79cc5c97e582f1fe0e1f514">IsReduceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a9fe9a6e2b79cc5c97e582f1fe0e1f514"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab226977f41ce8cc1ee82c314949bb184"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ab226977f41ce8cc1ee82c314949bb184">IsReshapeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab226977f41ce8cc1ee82c314949bb184"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a629a1df03491e1bdc19dbd415fd2ad74"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a629a1df03491e1bdc19dbd415fd2ad74">IsResizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a629a1df03491e1bdc19dbd415fd2ad74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a227dac81ac83d16f474881c2252d14cc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a227dac81ac83d16f474881c2252d14cc">IsSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a227dac81ac83d16f474881c2252d14cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3115a72a9cca31fb27b40da54a435dfa"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a3115a72a9cca31fb27b40da54a435dfa">IsSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3115a72a9cca31fb27b40da54a435dfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa421c466a09cc8048aa0b700b7e300d8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aa421c466a09cc8048aa0b700b7e300d8">IsSpaceToBatchNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa421c466a09cc8048aa0b700b7e300d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78c8c01a898f4bdcebddeda9f3d39a51"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a78c8c01a898f4bdcebddeda9f3d39a51">IsSpaceToDepthSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a78c8c01a898f4bdcebddeda9f3d39a51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a159deb89f2f5dbc1a12b8d365162760f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a159deb89f2f5dbc1a12b8d365162760f">IsSplitterSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt;&gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a159deb89f2f5dbc1a12b8d365162760f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d99d635906837ed6c582aba6ca6b178"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a0d99d635906837ed6c582aba6ca6b178">IsStackSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt; &amp;inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0d99d635906837ed6c582aba6ca6b178"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaa749f75b5ca145f6ad41aa210dbd19"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#aaaa749f75b5ca145f6ad41aa210dbd19">IsStridedSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aaaa749f75b5ca145f6ad41aa210dbd19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a520378fa336d155e23478456eb45fe"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a8a520378fa336d155e23478456eb45fe">IsSubtractionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a8a520378fa336d155e23478456eb45fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfc649259b4e9d8bb830da564f7556c6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#abfc649259b4e9d8bb830da564f7556c6">IsTransposeConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:abfc649259b4e9d8bb830da564f7556c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d8316c4fac71a34c0f95745a0cae0a8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#a5d8316c4fac71a34c0f95745a0cae0a8">IsTransposeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a5d8316c4fac71a34c0f95745a0cae0a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5cccf9f21abbc944a20817804cfb964"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml#ae5cccf9f21abbc944a20817804cfb964">IsUnidirectionalSequenceLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="namespacearmnn.xhtml#ae6c5f1b51bd32133c4dcc632045d6b58">UnidirectionalSequenceLstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:ae5cccf9f21abbc944a20817804cfb964"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_layer_support_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_layer_support_base')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td></tr>
<tr class="memitem:acd148b61eab388a9313c61f4c7a96c4b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#acd148b61eab388a9313c61f4c7a96c4b">IsActivationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:acd148b61eab388a9313c61f4c7a96c4b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06a955e172cf18898d966eab7383efa1 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a06a955e172cf18898d966eab7383efa1">IsAdditionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a06a955e172cf18898d966eab7383efa1 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7224fbfbc4c5a2b3710543e3f574171f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a7224fbfbc4c5a2b3710543e3f574171f">IsArgMinMaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7224fbfbc4c5a2b3710543e3f574171f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a450ddf4b4335cb37e07e3b0171b00096 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a450ddf4b4335cb37e07e3b0171b00096">IsBatchNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">mean</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">var</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">beta</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">gamma</a>, const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a450ddf4b4335cb37e07e3b0171b00096 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30cbe4bc4e20ae9b2aac66a108088919 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a30cbe4bc4e20ae9b2aac66a108088919">IsBatchToSpaceNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a30cbe4bc4e20ae9b2aac66a108088919 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac680aa10b0a3768da4c23e691881b5ea inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ac680aa10b0a3768da4c23e691881b5ea">IsCastSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac680aa10b0a3768da4c23e691881b5ea inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1362503332222029f9d73d40520f35bd inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a1362503332222029f9d73d40520f35bd">IsChannelShuffleSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a1362503332222029f9d73d40520f35bd inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a387c184902d9f09d35bb22b076cb245d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a387c184902d9f09d35bb22b076cb245d">IsComparisonSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a387c184902d9f09d35bb22b076cb245d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6465e7a85f4ef0013c7d7161cd07a4d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af6465e7a85f4ef0013c7d7161cd07a4d">IsConcatSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt; inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:af6465e7a85f4ef0013c7d7161cd07a4d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57aee9aba2e2ad5d0bd9f65acd05b6e4 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a57aee9aba2e2ad5d0bd9f65acd05b6e4">IsConstantSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a57aee9aba2e2ad5d0bd9f65acd05b6e4 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95dac0c44b7e759694a97778bfbea954 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a95dac0c44b7e759694a97778bfbea954">IsConvertFp16ToFp32Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a95dac0c44b7e759694a97778bfbea954 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f9272cdf0224364e1bb9b47efe4130a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a5f9272cdf0224364e1bb9b47efe4130a">IsConvertFp32ToFp16Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a5f9272cdf0224364e1bb9b47efe4130a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bd807090f4cb45bbfaa9c67e49532f5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a4bd807090f4cb45bbfaa9c67e49532f5">IsConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a4bd807090f4cb45bbfaa9c67e49532f5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe850b2a5be4ce4617cb51ceb5344756 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#abe850b2a5be4ce4617cb51ceb5344756">IsConvolution3dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:abe850b2a5be4ce4617cb51ceb5344756 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb2631acff8b8d0dc61334ff9f8a957a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aeb2631acff8b8d0dc61334ff9f8a957a">IsDebugSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aeb2631acff8b8d0dc61334ff9f8a957a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84f23a37f7fd69269f072e114b7f0afb inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a84f23a37f7fd69269f072e114b7f0afb">IsDepthToSpaceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a84f23a37f7fd69269f072e114b7f0afb inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56c4df05190f0f465e8501ae831af234 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a56c4df05190f0f465e8501ae831af234">IsDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a56c4df05190f0f465e8501ae831af234 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a866844299dc03c65ca41be5990bf19e8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a866844299dc03c65ca41be5990bf19e8">IsDequantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a866844299dc03c65ca41be5990bf19e8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a884cfe928faf62853edc9607142efce9 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a884cfe928faf62853edc9607142efce9">IsDetectionPostProcessSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;boxEncodings, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a97cbe8ac8df2e213185599d693079acf">scores</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1e19982da8ec2840ca14748c2d8522c">anchors</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d0c2ca9c78e81a5e9e0f3db51934782">detectionBoxes</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a56d52f01c9d80f3710ddace11e534434">detectionClasses</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac8776b306c349e20905e7ae17255b395">detectionScores</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3b204a7fda471668ab54dc967c5a7917">numDetections</a>, const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a884cfe928faf62853edc9607142efce9 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcbd5fad9ab8476db32cec8db3f4346e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#abcbd5fad9ab8476db32cec8db3f4346e">IsDilatedDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:abcbd5fad9ab8476db32cec8db3f4346e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4217d27bcb41e14cd023552004b21a3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad4217d27bcb41e14cd023552004b21a3">IsDivisionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad4217d27bcb41e14cd023552004b21a3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeec02af89681b711706472de7be52871 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aeec02af89681b711706472de7be52871">IsElementwiseUnarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aeec02af89681b711706472de7be52871 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06cd4c70d33d2f49a3418a65d8f45f14 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a06cd4c70d33d2f49a3418a65d8f45f14">IsFakeQuantizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a06cd4c70d33d2f49a3418a65d8f45f14 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae054f879bca9ff680f7e42ae97cc5ed3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ae054f879bca9ff680f7e42ae97cc5ed3">IsFloorSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae054f879bca9ff680f7e42ae97cc5ed3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7249912502bfa13dad25038e8fb9379b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a7249912502bfa13dad25038e8fb9379b">IsFullyConnectedSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7249912502bfa13dad25038e8fb9379b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97a643c5aa50c3419dab27c24cade1e0 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a97a643c5aa50c3419dab27c24cade1e0">IsGatherSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a97a643c5aa50c3419dab27c24cade1e0 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d0dbfd77d3461ded89d3bf6a4eab62c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a5d0dbfd77d3461ded89d3bf6a4eab62c">IsInputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a5d0dbfd77d3461ded89d3bf6a4eab62c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ee45bf624e40815207a2117f8e02b5d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a9ee45bf624e40815207a2117f8e02b5d">IsInstanceNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a9ee45bf624e40815207a2117f8e02b5d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad17197c4dc4dd190610d6d205108255a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad17197c4dc4dd190610d6d205108255a">IsL2NormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad17197c4dc4dd190610d6d205108255a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66ebc7658ecd90158cfb7b03606f0bda inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a66ebc7658ecd90158cfb7b03606f0bda">IsLogicalBinarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a66ebc7658ecd90158cfb7b03606f0bda inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b8c4b4fd867e2e68a3ae1e2adb090f5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a7b8c4b4fd867e2e68a3ae1e2adb090f5">IsLogicalUnarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7b8c4b4fd867e2e68a3ae1e2adb090f5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae13d577a85b2b121febb2fe43899fd6c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ae13d577a85b2b121febb2fe43899fd6c">IsLogSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae13d577a85b2b121febb2fe43899fd6c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a533ad0fa8ff06bef939f4260a8183350 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a533ad0fa8ff06bef939f4260a8183350">IsLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">scratchBuffer</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a533ad0fa8ff06bef939f4260a8183350 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac92df5c79bae4ccdc68d9d2045fa2110 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ac92df5c79bae4ccdc68d9d2045fa2110">IsMaximumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac92df5c79bae4ccdc68d9d2045fa2110 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9869f2a0cbe051fcc87fb1405d4091d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad9869f2a0cbe051fcc87fb1405d4091d">IsMeanSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad9869f2a0cbe051fcc87fb1405d4091d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae12212269e173407398a6d4fef80f76f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ae12212269e173407398a6d4fef80f76f">IsMemCopySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae12212269e173407398a6d4fef80f76f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ff6fcb839280edf41013d349df4f848 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3ff6fcb839280edf41013d349df4f848">IsMemImportSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3ff6fcb839280edf41013d349df4f848 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93a1d7a75c6802d3c4f7911f35e1cfa8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a93a1d7a75c6802d3c4f7911f35e1cfa8">IsMergeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a93a1d7a75c6802d3c4f7911f35e1cfa8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4eb9b602052470f8eadcfa7a63b17d54 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a4eb9b602052470f8eadcfa7a63b17d54">IsMinimumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a4eb9b602052470f8eadcfa7a63b17d54 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5960d08e30fb9542125688580c5f623 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab5960d08e30fb9542125688580c5f623">IsMultiplicationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab5960d08e30fb9542125688580c5f623 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedd6e4de83db27813fad327c29402033 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aedd6e4de83db27813fad327c29402033">IsNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aedd6e4de83db27813fad327c29402033 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2078e9d66b086cf1225f0610b05a520 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ac2078e9d66b086cf1225f0610b05a520">IsOutputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac2078e9d66b086cf1225f0610b05a520 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef4e4cfc054c2fd0e9bd0947909ebe83 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aef4e4cfc054c2fd0e9bd0947909ebe83">IsPadSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aef4e4cfc054c2fd0e9bd0947909ebe83 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a336cc17b9c2cd4e7f667c7fcf5c9377e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a336cc17b9c2cd4e7f667c7fcf5c9377e">IsPermuteSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a336cc17b9c2cd4e7f667c7fcf5c9377e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6262dc3169d8e809c272b31b25aaa6a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad6262dc3169d8e809c272b31b25aaa6a">IsPooling2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad6262dc3169d8e809c272b31b25aaa6a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70c3043f5b6dd3091646fb2c1648a5f5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a70c3043f5b6dd3091646fb2c1648a5f5">IsPooling3dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a70c3043f5b6dd3091646fb2c1648a5f5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56d839ce23fcd124ff86b31ce5f786b1 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a56d839ce23fcd124ff86b31ce5f786b1">IsPreCompiledSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a56d839ce23fcd124ff86b31ce5f786b1 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d0fd89e5c982e1e0cfcaef64995499a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3d0fd89e5c982e1e0cfcaef64995499a">IsPreluSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">alpha</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:a3d0fd89e5c982e1e0cfcaef64995499a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4474f6170d9abd571f612b2dae34820 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab4474f6170d9abd571f612b2dae34820">IsQuantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab4474f6170d9abd571f612b2dae34820 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a052a3d7389be3a0993c9f9a508fa435e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a052a3d7389be3a0993c9f9a508fa435e">IsQLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a052a3d7389be3a0993c9f9a508fa435e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7956a5f8822ae4071b4c5f133bf05a82 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a7956a5f8822ae4071b4c5f133bf05a82">IsQuantizedLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7956a5f8822ae4071b4c5f133bf05a82 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7cec5ce0429fcac8459a0cac24bbcc8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ac7cec5ce0429fcac8459a0cac24bbcc8">IsRankSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:ac7cec5ce0429fcac8459a0cac24bbcc8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fe9a6e2b79cc5c97e582f1fe0e1f514 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a9fe9a6e2b79cc5c97e582f1fe0e1f514">IsReduceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a9fe9a6e2b79cc5c97e582f1fe0e1f514 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab226977f41ce8cc1ee82c314949bb184 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab226977f41ce8cc1ee82c314949bb184">IsReshapeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab226977f41ce8cc1ee82c314949bb184 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a629a1df03491e1bdc19dbd415fd2ad74 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a629a1df03491e1bdc19dbd415fd2ad74">IsResizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a629a1df03491e1bdc19dbd415fd2ad74 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d720441480c7b7af4285f628f07fbcd inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0d720441480c7b7af4285f628f07fbcd">IsShapeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0d720441480c7b7af4285f628f07fbcd inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a227dac81ac83d16f474881c2252d14cc inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a227dac81ac83d16f474881c2252d14cc">IsSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a227dac81ac83d16f474881c2252d14cc inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3115a72a9cca31fb27b40da54a435dfa inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3115a72a9cca31fb27b40da54a435dfa">IsSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3115a72a9cca31fb27b40da54a435dfa inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa421c466a09cc8048aa0b700b7e300d8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa421c466a09cc8048aa0b700b7e300d8">IsSpaceToBatchNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa421c466a09cc8048aa0b700b7e300d8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78c8c01a898f4bdcebddeda9f3d39a51 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a78c8c01a898f4bdcebddeda9f3d39a51">IsSpaceToDepthSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a78c8c01a898f4bdcebddeda9f3d39a51 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a159deb89f2f5dbc1a12b8d365162760f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a159deb89f2f5dbc1a12b8d365162760f">IsSplitterSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt;&gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a159deb89f2f5dbc1a12b8d365162760f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d99d635906837ed6c582aba6ca6b178 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0d99d635906837ed6c582aba6ca6b178">IsStackSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt; &amp;inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0d99d635906837ed6c582aba6ca6b178 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99da2ac37691d245f1a50d2b4dda5321 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a99da2ac37691d245f1a50d2b4dda5321">IsStandInSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt; &amp;inputs, const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>, const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a99da2ac37691d245f1a50d2b4dda5321 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaa749f75b5ca145f6ad41aa210dbd19 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aaaa749f75b5ca145f6ad41aa210dbd19">IsStridedSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aaaa749f75b5ca145f6ad41aa210dbd19 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a520378fa336d155e23478456eb45fe inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8a520378fa336d155e23478456eb45fe">IsSubtractionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a8a520378fa336d155e23478456eb45fe inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41569ebd2d1c9777e057bc60e8bc88ae inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a41569ebd2d1c9777e057bc60e8bc88ae">IsSwitchSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5c2243c4c3b723129082dd38daf0387f">output0</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a53e5afe9ffb176f1f3c98a4222ceb2b9">output1</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a41569ebd2d1c9777e057bc60e8bc88ae inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfc649259b4e9d8bb830da564f7556c6 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#abfc649259b4e9d8bb830da564f7556c6">IsTransposeConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:abfc649259b4e9d8bb830da564f7556c6 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d8316c4fac71a34c0f95745a0cae0a8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a5d8316c4fac71a34c0f95745a0cae0a8">IsTransposeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a5d8316c4fac71a34c0f95745a0cae0a8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4522416bd1c86a58e232254d1a24bed1 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a4522416bd1c86a58e232254d1a24bed1">IsUnidirectionalSequenceLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a4522416bd1c86a58e232254d1a24bed1 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_layer_support"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_layer_support')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td></tr>
<tr class="memitem:a6d593367be03c4ef23ba028caec5603d inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a6e7dc8639c4b2f0a93031afff5182735">IsActivationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a6d593367be03c4ef23ba028caec5603d inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeec4e38c19f0f78eecae1d5f36f5fd26 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aeec4e38c19f0f78eecae1d5f36f5fd26">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ab5569e5b664498e011e8bd92cc3cc5b2">IsAdditionSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:aeec4e38c19f0f78eecae1d5f36f5fd26 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad203022ce40888e1ff058e4843405f6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aad203022ce40888e1ff058e4843405f6">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsArgMinMaxSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:aad203022ce40888e1ff058e4843405f6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9776b80872cf5419aa88c36287a039a1 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9776b80872cf5419aa88c36287a039a1">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a49b7a701c6a0c569015309102221c702">IsBatchNormalizationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a9776b80872cf5419aa88c36287a039a1 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a092b824a5ac66ee5a594c2ef03a52ba7 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a092b824a5ac66ee5a594c2ef03a52ba7">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#abb893c7adb7b64d0964bd244c46dd06b">IsBatchToSpaceNdSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a092b824a5ac66ee5a594c2ef03a52ba7 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61bea315fcd8d1b7b1d5e546d24f07fb inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a61bea315fcd8d1b7b1d5e546d24f07fb">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsCastSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a61bea315fcd8d1b7b1d5e546d24f07fb inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ce9baa51a30a4044f42980ea4bcc89e inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3ce9baa51a30a4044f42980ea4bcc89e">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsChannelShuffleSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a3ce9baa51a30a4044f42980ea4bcc89e inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b8dc681ee5a6e59f950273e37050807 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2b8dc681ee5a6e59f950273e37050807">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsComparisonSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a2b8dc681ee5a6e59f950273e37050807 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21e60883836c268b7cc34708af6f31ab inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a21e60883836c268b7cc34708af6f31ab">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#af9decd6720482e602efc6ac5ef7dab50">IsConvertFp16ToFp32Supported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a21e60883836c268b7cc34708af6f31ab inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d4ec9191bbfb9f36ed4787451cb5b7e inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1d4ec9191bbfb9f36ed4787451cb5b7e">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a080c11383c6a29b4295ae359cde5c19c">IsConvertFp32ToFp16Supported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a1d4ec9191bbfb9f36ed4787451cb5b7e inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25b351e94be4470408e1634ffb94843f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a25b351e94be4470408e1634ffb94843f">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#aff785aa7c076b1d2f51f76fa0f0647e4">IsConvolution2dSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a25b351e94be4470408e1634ffb94843f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab00b60ee587b97f018caad286efbfa44 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab00b60ee587b97f018caad286efbfa44">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsConvolution3dSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ab00b60ee587b97f018caad286efbfa44 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ef9f5276ab9f125959381e9cd7f5890 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5ef9f5276ab9f125959381e9cd7f5890">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#aa6503439334e0a79181a51e084b0268f">IsDebugSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a5ef9f5276ab9f125959381e9cd7f5890 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0b23752d6141c8851a8d5c299c86fef inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad0b23752d6141c8851a8d5c299c86fef">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsDepthToSpaceSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ad0b23752d6141c8851a8d5c299c86fef inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2eb8826e6ff60a60d033337adab2230 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad2eb8826e6ff60a60d033337adab2230">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a87f06345ddd902d027eb8f792ca8cdb4">IsDepthwiseConvolutionSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ad2eb8826e6ff60a60d033337adab2230 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f6b9c65c6b43b247fcbe492dbfe1567 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9f6b9c65c6b43b247fcbe492dbfe1567">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a1b4b4304198668d3af8e9d0c40d9343d">IsDequantizeSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a9f6b9c65c6b43b247fcbe492dbfe1567 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeae53bda542871e25e739263bca59189 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aeae53bda542871e25e739263bca59189">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsDetectionPostProcessSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;boxEncodings</td></tr>
<tr class="separator:aeae53bda542871e25e739263bca59189 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af98669e014571a58d05d7dd4c6e350b9 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af98669e014571a58d05d7dd4c6e350b9">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsDilatedDepthwiseConvolutionSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:af98669e014571a58d05d7dd4c6e350b9 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a990944ee00fd7671183f61c9005b5d2c inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a990944ee00fd7671183f61c9005b5d2c">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a3378acd6bc867577ee4bf1657945f1b5">IsDivisionSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a990944ee00fd7671183f61c9005b5d2c inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a94556ac3a389a2525a5daff81ac1e2 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9a94556ac3a389a2525a5daff81ac1e2">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsElementwiseUnarySupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a9a94556ac3a389a2525a5daff81ac1e2 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d508799a6e733e4fb6d6cce2115d6e6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5d508799a6e733e4fb6d6cce2115d6e6">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a4539c40ac5e36641f8ec10b88d658db1">IsFakeQuantizationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a5d508799a6e733e4fb6d6cce2115d6e6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8100db86e5543a0f6d0d059c44062285 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8100db86e5543a0f6d0d059c44062285">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsFillSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a8100db86e5543a0f6d0d059c44062285 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa893d0b0faf8970d82c307a3d5c50e0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afa893d0b0faf8970d82c307a3d5c50e0">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a2b6003e1d9226301e4badcac0b53c0ef">IsFloorSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:afa893d0b0faf8970d82c307a3d5c50e0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aade22edeec8bee958aa75d7227db5914 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aade22edeec8bee958aa75d7227db5914">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a0a72d1f8a0d43ee551c7ac654f8816fa">IsFullyConnectedSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:aade22edeec8bee958aa75d7227db5914 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cee8ba4b839d4e22c03860cfcbbe9a4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9cee8ba4b839d4e22c03860cfcbbe9a4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsGatherSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a9cee8ba4b839d4e22c03860cfcbbe9a4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ba01b4153b1afa2d5a9ea610e6df730 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2ba01b4153b1afa2d5a9ea610e6df730">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a3512b2f24950886288c5d01df1488f15">IsInputSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a2ba01b4153b1afa2d5a9ea610e6df730 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a183cc18864272ba200695ab474195b45 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a183cc18864272ba200695ab474195b45">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsInstanceNormalizationSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a183cc18864272ba200695ab474195b45 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11899c4fe1155508ed9902c0ddfd0d20 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a11899c4fe1155508ed9902c0ddfd0d20">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a57862de9b939281d1fe0242a8f04ead9">IsL2NormalizationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a11899c4fe1155508ed9902c0ddfd0d20 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4fab3545c737ef54a0634641c59e112 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac4fab3545c737ef54a0634641c59e112">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsLogicalBinarySupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:ac4fab3545c737ef54a0634641c59e112 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89b872fd1ca25d03c5c976edd587002d inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a89b872fd1ca25d03c5c976edd587002d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsLogicalUnarySupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a89b872fd1ca25d03c5c976edd587002d inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1256283d4a7c08ec93a21ad80e9d7464 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1256283d4a7c08ec93a21ad80e9d7464">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsLogSoftmaxSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a1256283d4a7c08ec93a21ad80e9d7464 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad90882a75bd3c2a1ae207e92618354fb inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad90882a75bd3c2a1ae207e92618354fb">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a2c62d8aa5aeab36458f9ecfa5db1f785">IsLstmSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ad90882a75bd3c2a1ae207e92618354fb inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06d62cc367f573577df892a943f052be inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a06d62cc367f573577df892a943f052be">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a977729771e5ab4263e933f785fa532a6">IsMaximumSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a06d62cc367f573577df892a943f052be inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae50be3397650e1ff69b5f7b1e440dda0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae50be3397650e1ff69b5f7b1e440dda0">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a79698fa98352bffccc6723de84677680">IsMeanSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ae50be3397650e1ff69b5f7b1e440dda0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6d8e43b3cc40ce6b903508d78fac583 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac6d8e43b3cc40ce6b903508d78fac583">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a1401f21967557c5f70830e06f9b10d4d">IsMemCopySupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ac6d8e43b3cc40ce6b903508d78fac583 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7020dc86e0cf160d45274120408bc4e4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7020dc86e0cf160d45274120408bc4e4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsMemImportSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a7020dc86e0cf160d45274120408bc4e4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9d5547ab145d0fd568ac67f5fe1ba6f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af9d5547ab145d0fd568ac67f5fe1ba6f">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a8c24c4caabe9282b927f8777d7ca993f">IsMergeSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:af9d5547ab145d0fd568ac67f5fe1ba6f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a492b981866826d2e045dce285ea01b94 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a492b981866826d2e045dce285ea01b94">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a29bdc2efd75bb437f4292dd9fcb5c89a">IsMinimumSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a492b981866826d2e045dce285ea01b94 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f0ab402e1c977850544e08543894d32 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9f0ab402e1c977850544e08543894d32">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a9624be7520f71d00bfb769d94e0b088b">IsMultiplicationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a9f0ab402e1c977850544e08543894d32 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55e20465ccd90066627577688df6a71f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a55e20465ccd90066627577688df6a71f">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a23d54c0b96b63178811174d5e7b2d328">IsNormalizationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a55e20465ccd90066627577688df6a71f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dfa7e88158748ab38f0aba8fe0d2f04 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8dfa7e88158748ab38f0aba8fe0d2f04">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a60699e7f86e142739ccddd43c20c4fc0">IsOutputSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a></td></tr>
<tr class="separator:a8dfa7e88158748ab38f0aba8fe0d2f04 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd25dc18752718ae08e31b643a698123 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afd25dc18752718ae08e31b643a698123">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ae467c9a579c8fb41427227a1c1e1cb4c">IsPadSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:afd25dc18752718ae08e31b643a698123 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc056cbd46c4992064f41733e2c2e1da inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#acc056cbd46c4992064f41733e2c2e1da">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ab4c606b53ae4d03aec1fcfe537c757ef">IsPermuteSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:acc056cbd46c4992064f41733e2c2e1da inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a192171475c11ada67c18d2dbaf1c6ced inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a192171475c11ada67c18d2dbaf1c6ced">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#af4f2d40a67380e91bd7ed0c1bcc4658f">IsPooling2dSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a192171475c11ada67c18d2dbaf1c6ced inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae89e4edadef0440c6a1cf213f79e31fc inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae89e4edadef0440c6a1cf213f79e31fc">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsPooling3dSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ae89e4edadef0440c6a1cf213f79e31fc inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1427d4be196246308aabe04f42bf1a7b inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1427d4be196246308aabe04f42bf1a7b">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a3b4773564c3fd8c88e697ffe0afbe10d">IsPreCompiledSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a1427d4be196246308aabe04f42bf1a7b inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9edaa28e8eb6efad5b382b9017e8980a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9edaa28e8eb6efad5b382b9017e8980a">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a36d55a20000a7b50f7369c3ceeca46bd">IsPreluSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a9edaa28e8eb6efad5b382b9017e8980a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5e0874e21fe0c0bfda8e1db8e0e77cf inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab5e0874e21fe0c0bfda8e1db8e0e77cf">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsQuantizeSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ab5e0874e21fe0c0bfda8e1db8e0e77cf inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11f192f5130908bf197d5a2f84517381 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a11f192f5130908bf197d5a2f84517381">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsQLstmSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a11f192f5130908bf197d5a2f84517381 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ba381e4950fcae873b221a24dd28249 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2ba381e4950fcae873b221a24dd28249">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a237992b29706fe1c1653dae916ea67ef">IsQuantizedLstmSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a2ba381e4950fcae873b221a24dd28249 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd72ead37cfafd013116d862841845bf inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#acd72ead37cfafd013116d862841845bf">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsRankSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:acd72ead37cfafd013116d862841845bf inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5760e0b2cdbb62c70a9ca8821f2e47d2 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5760e0b2cdbb62c70a9ca8821f2e47d2">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#aefa2e47c23dc8faac4b7edb12b5d1c2c">IsReduceSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a5760e0b2cdbb62c70a9ca8821f2e47d2 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09e602a950bb9f1cf594ca39de2b8b23 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a09e602a950bb9f1cf594ca39de2b8b23">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#af5014cbc003abcf201d4372b0012734c">IsReshapeSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a09e602a950bb9f1cf594ca39de2b8b23 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aded9d0d93eb505a62ce28cf68a83a36a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aded9d0d93eb505a62ce28cf68a83a36a">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a0c70182e7d26983945ae75229d607cce">IsResizeSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:aded9d0d93eb505a62ce28cf68a83a36a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79e4921bb9a3e4b76c73b6b00595d829 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a79e4921bb9a3e4b76c73b6b00595d829">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsShapeSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a79e4921bb9a3e4b76c73b6b00595d829 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af56bedf3a6d15e1aefd0b5b646f81d6c inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af56bedf3a6d15e1aefd0b5b646f81d6c">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsSliceSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:af56bedf3a6d15e1aefd0b5b646f81d6c inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00275d31ac00fad6572400a7681e915a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a00275d31ac00fad6572400a7681e915a">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a242f6c2f0376aaacd7d65a6f1498dea9">IsSoftmaxSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a00275d31ac00fad6572400a7681e915a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a150c0be192629ca524f0a872e5ede5a3 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a150c0be192629ca524f0a872e5ede5a3">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a55f4c243c58ee7a084f4a674d3c69948">IsSpaceToBatchNdSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a150c0be192629ca524f0a872e5ede5a3 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a459ebaf286230e8bfe9a004a391ac19a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a459ebaf286230e8bfe9a004a391ac19a">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a32e51e4810a549b4a15d59ba73c64d2c">IsSpaceToDepthSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a459ebaf286230e8bfe9a004a391ac19a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e4cf8c4c56b95c8c33f07debe6c7e3f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6e4cf8c4c56b95c8c33f07debe6c7e3f">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#adf1e16300483fadf9fd19299ca8a67c4">IsSplitterSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a6e4cf8c4c56b95c8c33f07debe6c7e3f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c9eb7a5f4f3d361b00ba705d187c9e6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4c9eb7a5f4f3d361b00ba705d187c9e6">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a1a74a4ecd0f25e6031ef05210a0cfe51">IsSubtractionSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a4c9eb7a5f4f3d361b00ba705d187c9e6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a451f8304d02e50586a673bcb2cb07839 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a451f8304d02e50586a673bcb2cb07839">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ae8a3ee5f60ae5ae2df15626eaf727ed0">IsSwitchSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a451f8304d02e50586a673bcb2cb07839 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab809b1dd2dd077001dfdcfa7f12b95bc inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab809b1dd2dd077001dfdcfa7f12b95bc">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ac6cc8e0bd35d229486fe6d844d88e0d4">IsTransposeConvolution2dSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ab809b1dd2dd077001dfdcfa7f12b95bc inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0ca892ee5fcc069629a915274d6a98d inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad0ca892ee5fcc069629a915274d6a98d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsTransposeSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ad0ca892ee5fcc069629a915274d6a98d inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcbf96feaeb94bd3d25bd6f64711de86 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afcbf96feaeb94bd3d25bd6f64711de86">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsUnidirectionalSequenceLstmSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:afcbf96feaeb94bd3d25bd6f64711de86 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_attribs_classarmnn_1_1_i_layer_support"><td colspan="2" onclick="javascript:toggleInherit('pub_attribs_classarmnn_1_1_i_layer_support')"><img src="closed.png" alt="-"/>&#160;Public Attributes inherited from <a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td></tr>
<tr class="memitem:a4e25e081529b7e99e5e454d916ed83fb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a></td></tr>
<tr class="separator:a4e25e081529b7e99e5e454d916ed83fb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a859feaa966620ae0ea88abf5226f2d04 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a></td></tr>
<tr class="separator:a859feaa966620ae0ea88abf5226f2d04 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac75f9a02b051716a0cc1cc0818dfe454 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ac75f9a02b051716a0cc1cc0818dfe454 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab82416560ced17268c6ba4443a3aac5e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a></td></tr>
<tr class="separator:ab82416560ced17268c6ba4443a3aac5e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae84bf10ef48c058969781b1b6a409e3e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae84bf10ef48c058969781b1b6a409e3e">output</a></td></tr>
<tr class="separator:ae84bf10ef48c058969781b1b6a409e3e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae65adc68847fa1162957c412061d433c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae65adc68847fa1162957c412061d433c">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ae65adc68847fa1162957c412061d433c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e5d6597e95614c4736b8bb9c5044653 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5e5d6597e95614c4736b8bb9c5044653">descriptor</a></td></tr>
<tr class="separator:a5e5d6597e95614c4736b8bb9c5044653 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa6f9f63e1cd44519053cb463315260a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aaa6f9f63e1cd44519053cb463315260a">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aaa6f9f63e1cd44519053cb463315260a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a895a8451e0799b95d65caf7ffe0a32d7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">mean</a></td></tr>
<tr class="separator:a895a8451e0799b95d65caf7ffe0a32d7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a903053b422754682265fba0c03d94a52 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">var</a></td></tr>
<tr class="separator:a903053b422754682265fba0c03d94a52 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83a99de40f6bffaa36f0333d04690b2a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">beta</a></td></tr>
<tr class="separator:a83a99de40f6bffaa36f0333d04690b2a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5cccb3233f5eff2119e8acc80cec209 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">gamma</a></td></tr>
<tr class="separator:ab5cccb3233f5eff2119e8acc80cec209 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dd4d7e0f9ef6a222d4485824e3c0a56 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8dd4d7e0f9ef6a222d4485824e3c0a56">descriptor</a></td></tr>
<tr class="separator:a8dd4d7e0f9ef6a222d4485824e3c0a56 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20b9a294f37b4775bc1fabbbd63eb120 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a20b9a294f37b4775bc1fabbbd63eb120">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a20b9a294f37b4775bc1fabbbd63eb120 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac839b39c94dd578e651f516f43c13d2a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac839b39c94dd578e651f516f43c13d2a">descriptor</a></td></tr>
<tr class="separator:ac839b39c94dd578e651f516f43c13d2a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc86745c8b6d5363bc2646244c67a351 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abc86745c8b6d5363bc2646244c67a351">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:abc86745c8b6d5363bc2646244c67a351 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29ad9d5b956606cb36fd58a434cc2e23 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a29ad9d5b956606cb36fd58a434cc2e23">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a29ad9d5b956606cb36fd58a434cc2e23 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41ded06f4f66acf111aedf45a93cbe15 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a41ded06f4f66acf111aedf45a93cbe15">descriptor</a></td></tr>
<tr class="separator:a41ded06f4f66acf111aedf45a93cbe15 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e9bc16a6e56f65862b22c90306f6e82 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2e9bc16a6e56f65862b22c90306f6e82">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a2e9bc16a6e56f65862b22c90306f6e82 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9cacb12fe0d3a0a6d6cb108f8a65487 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab9cacb12fe0d3a0a6d6cb108f8a65487">descriptor</a></td></tr>
<tr class="separator:ab9cacb12fe0d3a0a6d6cb108f8a65487 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dc09e407b409b429f1c79d5bed8fd90 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8dc09e407b409b429f1c79d5bed8fd90">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a8dc09e407b409b429f1c79d5bed8fd90 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d68e7f2c341fe70292d8c83a4e6cc4c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ac8b3d64c6b38fe4bc59bd05959577fb6">IsConcatSupported</a>(const std <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3d68e7f2c341fe70292d8c83a4e6cc4c">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a3d68e7f2c341fe70292d8c83a4e6cc4c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7f4c641d6fbd044a923ec4d869f1ce5 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae7f4c641d6fbd044a923ec4d869f1ce5">descriptor</a></td></tr>
<tr class="separator:ae7f4c641d6fbd044a923ec4d869f1ce5 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a631f893f44415523924016ed3f54a661 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a></td></tr>
<tr class="separator:a631f893f44415523924016ed3f54a661 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71cf13fc7f7aeac054919e0c6dcab52e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a></td></tr>
<tr class="separator:a71cf13fc7f7aeac054919e0c6dcab52e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9779892a1f4195b2a3e81d0013b42657 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9779892a1f4195b2a3e81d0013b42657">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a9779892a1f4195b2a3e81d0013b42657 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f5fdd0c0139292c1abc64114844d1f4 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7f5fdd0c0139292c1abc64114844d1f4">descriptor</a></td></tr>
<tr class="separator:a7f5fdd0c0139292c1abc64114844d1f4 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78f86eb2582e7c771b9bd0c6ce50faac inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a78f86eb2582e7c771b9bd0c6ce50faac">weights</a></td></tr>
<tr class="separator:a78f86eb2582e7c771b9bd0c6ce50faac inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae65b1330e0be2c2a52f65cbfb193c872 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae65b1330e0be2c2a52f65cbfb193c872">biases</a></td></tr>
<tr class="separator:ae65b1330e0be2c2a52f65cbfb193c872 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad75429b6fbe944b033b5500e30f8d1f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aad75429b6fbe944b033b5500e30f8d1f">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aad75429b6fbe944b033b5500e30f8d1f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba6f06f1c1fecfbf4aace221f43e3294 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aba6f06f1c1fecfbf4aace221f43e3294">descriptor</a></td></tr>
<tr class="separator:aba6f06f1c1fecfbf4aace221f43e3294 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfa7d2b012931907e00b5b309adc53cd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#acfa7d2b012931907e00b5b309adc53cd">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:acfa7d2b012931907e00b5b309adc53cd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a851286140a843c9e576fdd0da5323397 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a851286140a843c9e576fdd0da5323397">descriptor</a></td></tr>
<tr class="separator:a851286140a843c9e576fdd0da5323397 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b02295b42222ccd14fa4e525b3b209b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2b02295b42222ccd14fa4e525b3b209b">weights</a></td></tr>
<tr class="separator:a2b02295b42222ccd14fa4e525b3b209b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a293d81775f1cf5fc4212960d93f2e663 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a293d81775f1cf5fc4212960d93f2e663">biases</a></td></tr>
<tr class="separator:a293d81775f1cf5fc4212960d93f2e663 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a150b84957a8a590ecad5e8b7aa3419c6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a150b84957a8a590ecad5e8b7aa3419c6">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a150b84957a8a590ecad5e8b7aa3419c6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97cbe8ac8df2e213185599d693079acf inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a97cbe8ac8df2e213185599d693079acf">scores</a></td></tr>
<tr class="separator:a97cbe8ac8df2e213185599d693079acf inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1e19982da8ec2840ca14748c2d8522c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1e19982da8ec2840ca14748c2d8522c">anchors</a></td></tr>
<tr class="separator:ae1e19982da8ec2840ca14748c2d8522c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d0c2ca9c78e81a5e9e0f3db51934782 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d0c2ca9c78e81a5e9e0f3db51934782">detectionBoxes</a></td></tr>
<tr class="separator:a6d0c2ca9c78e81a5e9e0f3db51934782 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56d52f01c9d80f3710ddace11e534434 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a56d52f01c9d80f3710ddace11e534434">detectionClasses</a></td></tr>
<tr class="separator:a56d52f01c9d80f3710ddace11e534434 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8776b306c349e20905e7ae17255b395 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac8776b306c349e20905e7ae17255b395">detectionScores</a></td></tr>
<tr class="separator:ac8776b306c349e20905e7ae17255b395 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b204a7fda471668ab54dc967c5a7917 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3b204a7fda471668ab54dc967c5a7917">numDetections</a></td></tr>
<tr class="separator:a3b204a7fda471668ab54dc967c5a7917 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a730ea10711ec9b130de59852b061d3bd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a730ea10711ec9b130de59852b061d3bd">descriptor</a></td></tr>
<tr class="separator:a730ea10711ec9b130de59852b061d3bd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd1d3d219373a3b773be1bd29a03840f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afd1d3d219373a3b773be1bd29a03840f">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:afd1d3d219373a3b773be1bd29a03840f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75e6a2fd11b81665527cef162e51d995 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a75e6a2fd11b81665527cef162e51d995">descriptor</a></td></tr>
<tr class="separator:a75e6a2fd11b81665527cef162e51d995 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0882060fd5b0aa781212b94f73dfe63c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0882060fd5b0aa781212b94f73dfe63c">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a0882060fd5b0aa781212b94f73dfe63c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af044b1f8e48ba25b3a7573aa9a67d10c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af044b1f8e48ba25b3a7573aa9a67d10c">descriptor</a></td></tr>
<tr class="separator:af044b1f8e48ba25b3a7573aa9a67d10c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac48e5137a5a809909297c5ae3b882ea6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac48e5137a5a809909297c5ae3b882ea6">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ac48e5137a5a809909297c5ae3b882ea6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad57391891b17ad49107ae84c8ee5a69e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad57391891b17ad49107ae84c8ee5a69e">descriptor</a></td></tr>
<tr class="separator:ad57391891b17ad49107ae84c8ee5a69e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58540f633cf1bab7b2bfea01169383c4 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a58540f633cf1bab7b2bfea01169383c4">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a58540f633cf1bab7b2bfea01169383c4 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98ace67e4b8ff91da426a011e7b1630b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a98ace67e4b8ff91da426a011e7b1630b">weights</a></td></tr>
<tr class="separator:a98ace67e4b8ff91da426a011e7b1630b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada7c27be0ec37a4c98459164e00cd618 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ada7c27be0ec37a4c98459164e00cd618">biases</a></td></tr>
<tr class="separator:ada7c27be0ec37a4c98459164e00cd618 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85d6ba46a89488436d0fff881f2370ba inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a85d6ba46a89488436d0fff881f2370ba">descriptor</a></td></tr>
<tr class="separator:a85d6ba46a89488436d0fff881f2370ba inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a389e8924fffa57dd73ffead6fde9d1a9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a389e8924fffa57dd73ffead6fde9d1a9">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a389e8924fffa57dd73ffead6fde9d1a9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10b6c65d39b282401448aff724037aae inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a10b6c65d39b282401448aff724037aae">descriptor</a></td></tr>
<tr class="separator:a10b6c65d39b282401448aff724037aae inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a435bee1e83fa5d5fb2753525f6ff5162 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a435bee1e83fa5d5fb2753525f6ff5162">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a435bee1e83fa5d5fb2753525f6ff5162 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81b3c2919b174e2d6d4a2217e14858c9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a81b3c2919b174e2d6d4a2217e14858c9">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a81b3c2919b174e2d6d4a2217e14858c9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a939cab6010bf54769aadbbbe1a2ccb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7a939cab6010bf54769aadbbbe1a2ccb">descriptor</a></td></tr>
<tr class="separator:a7a939cab6010bf54769aadbbbe1a2ccb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa459040aa42210d103192b224b6b5d79 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa459040aa42210d103192b224b6b5d79">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aa459040aa42210d103192b224b6b5d79 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac53977992deddc04c00092e967aaf0d7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac53977992deddc04c00092e967aaf0d7">descriptor</a></td></tr>
<tr class="separator:ac53977992deddc04c00092e967aaf0d7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31130b6d97bbc90b428a410a03a3bf06 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a31130b6d97bbc90b428a410a03a3bf06">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a31130b6d97bbc90b428a410a03a3bf06 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bee7ba1901580222cded96f938ac8df inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3bee7ba1901580222cded96f938ac8df">descriptor</a></td></tr>
<tr class="separator:a3bee7ba1901580222cded96f938ac8df inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af20317b332f276b5c4c4ff755fe61016 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af20317b332f276b5c4c4ff755fe61016">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:af20317b332f276b5c4c4ff755fe61016 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7c38b1f3b73fb1b67b0928c9cd390a3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad7c38b1f3b73fb1b67b0928c9cd390a3">descriptor</a></td></tr>
<tr class="separator:ad7c38b1f3b73fb1b67b0928c9cd390a3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e509e880a10237c69d74ca18a276706 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9e509e880a10237c69d74ca18a276706">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a9e509e880a10237c69d74ca18a276706 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a01de4e3851a25f2df77897fb8f7083 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a></td></tr>
<tr class="separator:a5a01de4e3851a25f2df77897fb8f7083 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec04a02758804219fb461623464a8e96 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a></td></tr>
<tr class="separator:aec04a02758804219fb461623464a8e96 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f6f59c4e91c7c37d9a119d615093ed3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">scratchBuffer</a></td></tr>
<tr class="separator:a4f6f59c4e91c7c37d9a119d615093ed3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44eb2a514bddb31fe20f9e4f04159c9f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a></td></tr>
<tr class="separator:a44eb2a514bddb31fe20f9e4f04159c9f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1ee2d524d4252bffc0ed67e75882952 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a></td></tr>
<tr class="separator:ae1ee2d524d4252bffc0ed67e75882952 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa930d13649875f8801e323a212445a16 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa930d13649875f8801e323a212445a16">output</a></td></tr>
<tr class="separator:aa930d13649875f8801e323a212445a16 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd4dba56c2ef1c650c48c525cb56f5c0 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#acd4dba56c2ef1c650c48c525cb56f5c0">descriptor</a></td></tr>
<tr class="separator:acd4dba56c2ef1c650c48c525cb56f5c0 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca7a974c8803242968a8d6540275264a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a></td></tr>
<tr class="separator:aca7a974c8803242968a8d6540275264a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52c5081cfb456749136ad9a392f9ea3a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a52c5081cfb456749136ad9a392f9ea3a">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a52c5081cfb456749136ad9a392f9ea3a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f04d51318166c899ede06bb45850bbe inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9f04d51318166c899ede06bb45850bbe">descriptor</a></td></tr>
<tr class="separator:a9f04d51318166c899ede06bb45850bbe inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab97ebc2c58cc8f57e52a54eb1413c358 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab97ebc2c58cc8f57e52a54eb1413c358">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ab97ebc2c58cc8f57e52a54eb1413c358 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a076bc5e2bfb7bf8fb352b4b8fb8e3c2e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a076bc5e2bfb7bf8fb352b4b8fb8e3c2e">ouput</a></td></tr>
<tr class="separator:a076bc5e2bfb7bf8fb352b4b8fb8e3c2e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcd0960fc6f0018d8232b054dab379d9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afcd0960fc6f0018d8232b054dab379d9">descriptor</a></td></tr>
<tr class="separator:afcd0960fc6f0018d8232b054dab379d9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35711aefa941f96db71b995722aa39eb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a35711aefa941f96db71b995722aa39eb">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a35711aefa941f96db71b995722aa39eb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ce43368e08d80c272b521c463f11e7b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9ce43368e08d80c272b521c463f11e7b">descriptor</a></td></tr>
<tr class="separator:a9ce43368e08d80c272b521c463f11e7b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9befa35b9485c78ddba2f9e710eed05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad9befa35b9485c78ddba2f9e710eed05">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ad9befa35b9485c78ddba2f9e710eed05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9617f94c779168d6208c2732d50b701e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9617f94c779168d6208c2732d50b701e">descriptor</a></td></tr>
<tr class="separator:a9617f94c779168d6208c2732d50b701e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa844a2559a5c5a13520b3c5f4dd21ba3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa844a2559a5c5a13520b3c5f4dd21ba3">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aa844a2559a5c5a13520b3c5f4dd21ba3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ffc76ae21b0e36f386a580678379708 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5ffc76ae21b0e36f386a580678379708">descriptor</a></td></tr>
<tr class="separator:a5ffc76ae21b0e36f386a580678379708 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fa61de2e37218b13b6065132be433eb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6fa61de2e37218b13b6065132be433eb">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a6fa61de2e37218b13b6065132be433eb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2de917e7d1e41ef25c94aa699ce7019 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad2de917e7d1e41ef25c94aa699ce7019">descriptor</a></td></tr>
<tr class="separator:ad2de917e7d1e41ef25c94aa699ce7019 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d1114dd734cd87b78a87148e3eae2d3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4d1114dd734cd87b78a87148e3eae2d3">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a4d1114dd734cd87b78a87148e3eae2d3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bea23d979ad4bfdfda7f2f96be55ca7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0bea23d979ad4bfdfda7f2f96be55ca7">descriptor</a></td></tr>
<tr class="separator:a0bea23d979ad4bfdfda7f2f96be55ca7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e0dcfaa4069d35d315fbdcc8a0ec2ff inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2e0dcfaa4069d35d315fbdcc8a0ec2ff">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a2e0dcfaa4069d35d315fbdcc8a0ec2ff inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a218e2ebb5babb8323688906b8997eafb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">alpha</a></td></tr>
<tr class="separator:a218e2ebb5babb8323688906b8997eafb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b09834cc88bb4156e291c37bd2434ff inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a></td></tr>
<tr class="separator:a5b09834cc88bb4156e291c37bd2434ff inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5e0e3fb8a59107ac3366028a057db12 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a></td></tr>
<tr class="separator:ad5e0e3fb8a59107ac3366028a057db12 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff8d75a6c22d819b2f00d22f7a8df868 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aff8d75a6c22d819b2f00d22f7a8df868">outputStateOut</a></td></tr>
<tr class="separator:aff8d75a6c22d819b2f00d22f7a8df868 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7369eda0b60ec397afbecbc1f1cc686e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7369eda0b60ec397afbecbc1f1cc686e">cellStateOut</a></td></tr>
<tr class="separator:a7369eda0b60ec397afbecbc1f1cc686e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc8db3bfb13b523f94d8df0917940ba9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afc8db3bfb13b523f94d8df0917940ba9">output</a></td></tr>
<tr class="separator:afc8db3bfb13b523f94d8df0917940ba9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae88892fd128211c5c66f6b875f53e634 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae88892fd128211c5c66f6b875f53e634">descriptor</a></td></tr>
<tr class="separator:ae88892fd128211c5c66f6b875f53e634 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a671c5ab0aaf443061ecd29858eb0c27e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a671c5ab0aaf443061ecd29858eb0c27e">paramsInfo</a></td></tr>
<tr class="separator:a671c5ab0aaf443061ecd29858eb0c27e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ae68a93565a313b372c3454a281a30e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9ae68a93565a313b372c3454a281a30e">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a9ae68a93565a313b372c3454a281a30e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad996e1751e73c950760b7f2372a5f1b7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad996e1751e73c950760b7f2372a5f1b7">previousCellStateIn</a></td></tr>
<tr class="separator:ad996e1751e73c950760b7f2372a5f1b7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee968b67d55019bc399fd9305382c946 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aee968b67d55019bc399fd9305382c946">previousOutputIn</a></td></tr>
<tr class="separator:aee968b67d55019bc399fd9305382c946 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab23b6d2020ea2dc447e70ae7a899b05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aab23b6d2020ea2dc447e70ae7a899b05">cellStateOut</a></td></tr>
<tr class="separator:aab23b6d2020ea2dc447e70ae7a899b05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c883c1fe0ab4c6e0bb0cf1973e7bb86 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9c883c1fe0ab4c6e0bb0cf1973e7bb86">output</a></td></tr>
<tr class="separator:a9c883c1fe0ab4c6e0bb0cf1973e7bb86 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6538a383d19e83aabba1aa625f608a8b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6538a383d19e83aabba1aa625f608a8b">paramsInfo</a></td></tr>
<tr class="separator:a6538a383d19e83aabba1aa625f608a8b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c3d94577f10865f35c9e8a75b456e29 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6c3d94577f10865f35c9e8a75b456e29">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a6c3d94577f10865f35c9e8a75b456e29 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a286560bd886ad2694d524d82bc6691 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3a286560bd886ad2694d524d82bc6691">descriptor</a></td></tr>
<tr class="separator:a3a286560bd886ad2694d524d82bc6691 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22417051704e7e34a77b2aa84f81f447 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a22417051704e7e34a77b2aa84f81f447">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a22417051704e7e34a77b2aa84f81f447 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8925984b66dd710f605a0787ec21a98c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8925984b66dd710f605a0787ec21a98c">descriptor</a></td></tr>
<tr class="separator:a8925984b66dd710f605a0787ec21a98c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab56e5339be7133a62ac75257eb9ed457 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab56e5339be7133a62ac75257eb9ed457">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ab56e5339be7133a62ac75257eb9ed457 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad80fdfd6b8520aad7f3b4e642770bb76 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad80fdfd6b8520aad7f3b4e642770bb76">descriptor</a></td></tr>
<tr class="separator:ad80fdfd6b8520aad7f3b4e642770bb76 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa073ddc855c3a77e9abc6e2bcf385682 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa073ddc855c3a77e9abc6e2bcf385682">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aa073ddc855c3a77e9abc6e2bcf385682 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3637b7ecf8b3ac293667439e68ca5e05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3637b7ecf8b3ac293667439e68ca5e05">descriptor</a></td></tr>
<tr class="separator:a3637b7ecf8b3ac293667439e68ca5e05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec1ad6717dc6152700644e22663ae529 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec1ad6717dc6152700644e22663ae529">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aec1ad6717dc6152700644e22663ae529 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a052da8f6981ac7c0983b15d6fd255b67 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a052da8f6981ac7c0983b15d6fd255b67">descriptor</a></td></tr>
<tr class="separator:a052da8f6981ac7c0983b15d6fd255b67 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec2b0f9142a47b16e695d1e4c43b78c5 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec2b0f9142a47b16e695d1e4c43b78c5">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aec2b0f9142a47b16e695d1e4c43b78c5 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99573c8d31f135ab27d42a2026b19dcd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a99573c8d31f135ab27d42a2026b19dcd">descriptor</a></td></tr>
<tr class="separator:a99573c8d31f135ab27d42a2026b19dcd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3231c01123af9b82028f8d82295f4df inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad3231c01123af9b82028f8d82295f4df">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ad3231c01123af9b82028f8d82295f4df inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33fc1676a91f2295365e18b00311a7f1 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a33fc1676a91f2295365e18b00311a7f1">descriptor</a></td></tr>
<tr class="separator:a33fc1676a91f2295365e18b00311a7f1 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab39984d1114858f962d5d770640fa5c6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab39984d1114858f962d5d770640fa5c6">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ab39984d1114858f962d5d770640fa5c6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a311602de6b1e53b4feb3b8a37a433f44 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a></td></tr>
<tr class="separator:a311602de6b1e53b4feb3b8a37a433f44 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9973ef4f89338f01171369b4fb64cf93 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &gt; const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9973ef4f89338f01171369b4fb64cf93">descriptor</a></td></tr>
<tr class="separator:a9973ef4f89338f01171369b4fb64cf93 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6be296df135df66f2a0f81ef6696bcc inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &gt; const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab6be296df135df66f2a0f81ef6696bcc">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ab6be296df135df66f2a0f81ef6696bcc inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ba70d562aa15f92d6c313257bad013f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a1ef301853035778cebf30782cae7b86d">IsStackSupported</a>(const std <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsStandInSupported(const std const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1ba70d562aa15f92d6c313257bad013f">output</a></td></tr>
<tr class="separator:a1ba70d562aa15f92d6c313257bad013f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c5822222a1b990385e835855059cf82 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a1ef301853035778cebf30782cae7b86d">IsStackSupported</a>(const std <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsStandInSupported(const std const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1c5822222a1b990385e835855059cf82">descriptor</a></td></tr>
<tr class="separator:a1c5822222a1b990385e835855059cf82 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeeee84a5c55c63467d9a6063e6873d5d inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a1ef301853035778cebf30782cae7b86d">IsStackSupported</a>(const std <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsStandInSupported(const std const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aeeee84a5c55c63467d9a6063e6873d5d">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aeeee84a5c55c63467d9a6063e6873d5d inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c2243c4c3b723129082dd38daf0387f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5c2243c4c3b723129082dd38daf0387f">output0</a></td></tr>
<tr class="separator:a5c2243c4c3b723129082dd38daf0387f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53e5afe9ffb176f1f3c98a4222ceb2b9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a53e5afe9ffb176f1f3c98a4222ceb2b9">output1</a></td></tr>
<tr class="separator:a53e5afe9ffb176f1f3c98a4222ceb2b9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3a9012fc339e9bfc9e5e3d84805653e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa3a9012fc339e9bfc9e5e3d84805653e">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aa3a9012fc339e9bfc9e5e3d84805653e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed34ce46eb939133d71d4f47ee39df22 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aed34ce46eb939133d71d4f47ee39df22">descriptor</a></td></tr>
<tr class="separator:aed34ce46eb939133d71d4f47ee39df22 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc7d09b6ee3bd1d5d07ff8b2f3a16ec3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afc7d09b6ee3bd1d5d07ff8b2f3a16ec3">weights</a></td></tr>
<tr class="separator:afc7d09b6ee3bd1d5d07ff8b2f3a16ec3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2daef2df1f67976f598368fe21ac9154 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2daef2df1f67976f598368fe21ac9154">biases</a></td></tr>
<tr class="separator:a2daef2df1f67976f598368fe21ac9154 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f103a30a0d120c7984c507ceb20b2d6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2f103a30a0d120c7984c507ceb20b2d6">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a2f103a30a0d120c7984c507ceb20b2d6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cbc317bc6d7c12e54f852cd20636840 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7cbc317bc6d7c12e54f852cd20636840">descriptor</a></td></tr>
<tr class="separator:a7cbc317bc6d7c12e54f852cd20636840 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0046a9c32fc1066cc22eaaee8876d41 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac0046a9c32fc1066cc22eaaee8876d41">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ac0046a9c32fc1066cc22eaaee8876d41 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88889983d2422e584ae1ca5b2385ec4c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a88889983d2422e584ae1ca5b2385ec4c">descriptor</a></td></tr>
<tr class="separator:a88889983d2422e584ae1ca5b2385ec4c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a540c4a7d2defc036c939d2caaaefffce inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a540c4a7d2defc036c939d2caaaefffce">paramsInfo</a></td></tr>
<tr class="separator:a540c4a7d2defc036c939d2caaaefffce inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a145611e87292ec30a1458ac5ae426787 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a145611e87292ec30a1458ac5ae426787">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a145611e87292ec30a1458ac5ae426787 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_layer_support"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_layer_support')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td></tr>
<tr class="memitem:aab2a487bc88047443d8a0f87c3c40b8d inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aab2a487bc88047443d8a0f87c3c40b8d">ILayerSupport</a> ()</td></tr>
<tr class="separator:aab2a487bc88047443d8a0f87c3c40b8d inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e7f4f28576904804cd759e49173beeb inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9e7f4f28576904804cd759e49173beeb">~ILayerSupport</a> ()</td></tr>
<tr class="separator:a9e7f4f28576904804cd759e49173beeb inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00014">14</a> of file <a class="el" href="_cl_layer_support_8hpp_source.xhtml">ClLayerSupport.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="adcaa3eb3d4e1bf48a235b97170dccd15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcaa3eb3d4e1bf48a235b97170dccd15">&#9670;&nbsp;</a></span>ClLayerSupport() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml">ClLayerSupport</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>modelContextPtr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00174">174</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    : m_ModelContextPtr(modelContextPtr)</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;{</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac1dc1384ae65a68453cd3f5fd4a6adbd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1dc1384ae65a68453cd3f5fd4a6adbd">&#9670;&nbsp;</a></span>ClLayerSupport() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml">ClLayerSupport</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00179">179</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    : m_ModelContextPtr(<span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;{</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a35c41b0cdf5faf11fb39554c269e7f9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35c41b0cdf5faf11fb39554c269e7f9b">&#9670;&nbsp;</a></span>~ClLayerSupport()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_cl_layer_support.xhtml">ClLayerSupport</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8hpp_source.xhtml#l00019">19</a> of file <a class="el" href="_cl_layer_support_8hpp_source.xhtml">ClLayerSupport.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{}</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="acd148b61eab388a9313c61f4c7a96c4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd148b61eab388a9313c61f4c7a96c4b">&#9670;&nbsp;</a></span>IsActivationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsActivationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00674">674</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;{</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a42ef3cee193102dc7755193579209cca">ClActivationWorkloadValidate</a>,</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                                   input,</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_activation_workload_8cpp_source.xhtml#l00017">armnn::ClActivationWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a06a955e172cf18898d966eab7383efa1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06a955e172cf18898d966eab7383efa1">&#9670;&nbsp;</a></span>IsAdditionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsAdditionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00686">686</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;{</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a24fc3e8e29d3fa56cc6b2d81e48625d1">ClAdditionValidate</a>,</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                                   input0,</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_addition_workload_8cpp_source.xhtml#l00045">armnn::ClAdditionValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a7224fbfbc4c5a2b3710543e3f574171f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7224fbfbc4c5a2b3710543e3f574171f">&#9670;&nbsp;</a></span>IsArgMinMaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsArgMinMaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00699">699</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;{</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160; </div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ab80423b306d8e0436b9a316922911d4d">ClArgMinMaxWorkloadValidate</a>,</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                                   input,</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_arg_min_max_workload_8cpp_source.xhtml#l00031">armnn::ClArgMinMaxWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a22cfc1d5f68bd32db0aa126e8fd9e615"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22cfc1d5f68bd32db0aa126e8fd9e615">&#9670;&nbsp;</a></span>IsBatchMatMulSupported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsBatchMatMulSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputY</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml">BatchMatMulDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00712">712</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;{</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a21911dfddb6d7787c7afcdc5fc25d4a7">ClBatchMatMulValidate</a>,</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                                   inputX,</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                                   inputY,</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_batch_mat_mul_workload_8cpp_source.xhtml#l00023">armnn::ClBatchMatMulValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a450ddf4b4335cb37e07e3b0171b00096"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a450ddf4b4335cb37e07e3b0171b00096">&#9670;&nbsp;</a></span>IsBatchNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsBatchNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00727">727</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;{</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a29bd65c1ec4ff9f75b636ec8e7b038be">ClBatchNormalizationValidate</a>,</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                                   input,</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">mean</a>,</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">var</a>,</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">beta</a>,</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">gamma</a>,</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00065">ILayerSupport::beta</a>, <a class="el" href="_cl_batch_normalization_float_workload_8cpp_source.xhtml#l00019">armnn::ClBatchNormalizationValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00066">ILayerSupport::gamma</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00063">ILayerSupport::mean</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00064">ILayerSupport::var</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a30cbe4bc4e20ae9b2aac66a108088919"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30cbe4bc4e20ae9b2aac66a108088919">&#9670;&nbsp;</a></span>IsBatchToSpaceNdSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsBatchToSpaceNdSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00748">748</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;{</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae87476befb36d9cc4fb926337ba65b5d">ClBatchToSpaceNdWorkloadValidate</a>,</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                                   input,</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_batch_to_space_nd_workload_8cpp_source.xhtml#l00020">armnn::ClBatchToSpaceNdWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ac680aa10b0a3768da4c23e691881b5ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac680aa10b0a3768da4c23e691881b5ea">&#9670;&nbsp;</a></span>IsCastSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCastSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00760">760</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;{</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7f82264f26183ae3c66390e33be14ec6">ClCastValidate</a>,</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;                                   input,</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_cast_workload_8cpp_source.xhtml#l00020">armnn::ClCastValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a1362503332222029f9d73d40520f35bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1362503332222029f9d73d40520f35bd">&#9670;&nbsp;</a></span>IsChannelShuffleSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsChannelShuffleSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00770">770</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;{</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a02e646180897aca9fcbc02d16efdd784">ClChannelShuffleValidate</a>,</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                                   input,</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_channel_shuffle_workload_8cpp_source.xhtml#l00020">armnn::ClChannelShuffleValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="afb14ff12be68a64356e8b3764032842d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb14ff12be68a64356e8b3764032842d">&#9670;&nbsp;</a></span>IsComparisonSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsComparisonSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>ouput</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00782">782</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;{</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#af6f6476c5d1c4c85153020f5229ebd14">ClComparisonWorkloadValidate</a>,</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                                   input0,</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_comparison_workload_8cpp_source.xhtml#l00024">armnn::ClComparisonWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="af6465e7a85f4ef0013c7d7161cd07a4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6465e7a85f4ef0013c7d7161cd07a4d">&#9670;&nbsp;</a></span>IsConcatSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConcatSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00796">796</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;{</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &lt;= <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.GetConcatAxis())</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    {</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a8c88a8a91827e9ccc3cf3ce6b14fcd17">SetValueChecked</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, <span class="stringliteral">&quot;Cl Concat: Concat axis &gt; Number of dimensions.&quot;</span>);</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    }</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160; </div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> concatInnerAxis = (<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() - <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.GetConcatAxis()) - 1;</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    <span class="keywordflow">if</span>(concatInnerAxis &lt; 3) <span class="comment">// Width, height, or channels</span></div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    {</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;        <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a0784b1fdac2844c5d6f331ab6e9af547">ClConcatWorkloadValidate</a>,</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                                       inputs,</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    }</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (concatInnerAxis == 3)</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    {</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        <span class="comment">// We rely on the sub-tensor optimization to handle the batch dimension for 4D tensors. If we can&#39;t use</span></div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;        <span class="comment">// sub-tensors for this then we can&#39;t support it. Here is where we check that the sub-tensors will work.</span></div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; input : inputs)</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;        {</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;            <span class="keywordflow">if</span> (input &amp;&amp; !<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a22f377fc4e10dc1773a3f979061e85f1">IsTypeSpaceMatch</a>(*input)) <span class="comment">// Cannot use sub-tensors if the types are not same space</span></div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;            {</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;                <a class="code" href="namespacearmnn.xhtml#a8c88a8a91827e9ccc3cf3ce6b14fcd17">SetValueChecked</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, <span class="stringliteral">&quot;Cl Concat: Types and quantization parameters must match.&quot;</span>);</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;            }</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        }</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>; <span class="comment">// Sub-tensors support concat along batch</span></div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    }</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <span class="keywordflow">else</span> <span class="comment">// &gt; 4 dimensions not supported.</span></div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    {</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a8c88a8a91827e9ccc3cf3ce6b14fcd17">SetValueChecked</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, <span class="stringliteral">&quot;Cl Concat: Maximum of 4 dimensions supported.&quot;</span>);</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    }</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_concat_workload_8cpp_source.xhtml#l00027">armnn::ClConcatWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00432">TensorInfo::IsTypeSpaceMatch()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_layer_support_common_8hpp_source.xhtml#l00017">armnn::SetValueChecked()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a57aee9aba2e2ad5d0bd9f65acd05b6e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57aee9aba2e2ad5d0bd9f65acd05b6e4">&#9670;&nbsp;</a></span>IsConstantSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConstantSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00837">837</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;{</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a2f5c2e8794174361f2308f4a0d3f9c73">ClConstantWorkloadValidate</a>,</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_constant_workload_8cpp_source.xhtml#l00018">armnn::ClConstantWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a95dac0c44b7e759694a97778bfbea954"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95dac0c44b7e759694a97778bfbea954">&#9670;&nbsp;</a></span>IsConvertFp16ToFp32Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvertFp16ToFp32Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00845">845</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;{</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a46efae0191388fd33db4e95c5d79e2be">ClConvertFp16ToFp32WorkloadValidate</a>,</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                                   input,</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00044">armnn::ClConvertFp16ToFp32WorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a5f9272cdf0224364e1bb9b47efe4130a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f9272cdf0224364e1bb9b47efe4130a">&#9670;&nbsp;</a></span>IsConvertFp32ToFp16Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvertFp32ToFp16Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00855">855</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;{</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a37f6946bfb7a9c7d64881b7a2e13945f">ClConvertFp32ToFp16WorkloadValidate</a>,</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                                   input,</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00044">armnn::ClConvertFp32ToFp16WorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a4bd807090f4cb45bbfaa9c67e49532f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bd807090f4cb45bbfaa9c67e49532f5">&#9670;&nbsp;</a></span>IsConvolution2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvolution2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00865">865</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;{</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTECL_ENABLED)</span></div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr)</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    {</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;        <span class="keywordflow">if</span> (m_ModelContextPtr.get() != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;        {</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;            <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span>ClBackendModelContext*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;            <span class="keywordflow">if</span> (modelOptions)</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;            {</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;                isFastMathEnabled = modelOptions-&gt;IsFastMathEnabled();</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;            }</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;        }</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    }</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160; </div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a61cf0886d4c1a6e24c101a57ccb2ec31">ClConvolution2dWorkloadValidate</a>,</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;                                   input,</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                                   isFastMathEnabled,</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00128">ILayerSupport::biases</a>, <a class="el" href="_cl_convolution2d_workload_8cpp_source.xhtml#l00023">armnn::ClConvolution2dWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_cl_backend_model_context_8cpp_source.xhtml#l00066">ClBackendModelContext::IsFastMathEnabled()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00127">ILayerSupport::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="abe850b2a5be4ce4617cb51ceb5344756"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe850b2a5be4ce4617cb51ceb5344756">&#9670;&nbsp;</a></span>IsConvolution3dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvolution3dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00898">898</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;{</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTECL_ENABLED)</span></div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr)</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;{</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr.get() != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    {</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;        <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span>ClBackendModelContext*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;        <span class="keywordflow">if</span> (modelOptions)</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;        {</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;            isFastMathEnabled = modelOptions-&gt;IsFastMathEnabled();</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        }</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    }</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;}</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160; </div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae387b3587bcce82eb33623b300097a8c">ClConvolution3dWorkloadValidate</a>,</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;                                   input,</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;                                   isFastMathEnabled,</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00128">ILayerSupport::biases</a>, <a class="el" href="_cl_convolution3d_workload_8cpp_source.xhtml#l00023">armnn::ClConvolution3dWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_cl_backend_model_context_8cpp_source.xhtml#l00066">ClBackendModelContext::IsFastMathEnabled()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00127">ILayerSupport::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a84f23a37f7fd69269f072e114b7f0afb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84f23a37f7fd69269f072e114b7f0afb">&#9670;&nbsp;</a></span>IsDepthToSpaceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDepthToSpaceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00941">941</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;{</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ab3624c723d9a0ec93722b19060b76115">ClDepthToSpaceWorkloadValidate</a>,</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                                   input,</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_depth_to_space_workload_8cpp_source.xhtml#l00022">armnn::ClDepthToSpaceWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a56c4df05190f0f465e8501ae831af234"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56c4df05190f0f465e8501ae831af234">&#9670;&nbsp;</a></span>IsDepthwiseConvolutionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDepthwiseConvolutionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00953">953</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;{</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aa6670a2fcf9f365da69f3f3092dfa64b">ClDepthwiseConvolutionWorkloadValidate</a>,</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                                   input,</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00128">ILayerSupport::biases</a>, <a class="el" href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00026">armnn::ClDepthwiseConvolutionWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00127">ILayerSupport::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a866844299dc03c65ca41be5990bf19e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a866844299dc03c65ca41be5990bf19e8">&#9670;&nbsp;</a></span>IsDequantizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDequantizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00931">931</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;{</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a75045734c29d7d6635342c05adbc151b">ClDequantizeWorkloadValidate</a>,</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;                                   input,</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_dequantize_workload_8cpp_source.xhtml#l00022">armnn::ClDequantizeWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ae3b8e44b40a9c02ef372081ee2e454a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3b8e44b40a9c02ef372081ee2e454a1">&#9670;&nbsp;</a></span>IsDilatedDepthwiseConvolutionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDilatedDepthwiseConvolutionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reason</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00970">970</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;{</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aa6670a2fcf9f365da69f3f3092dfa64b">ClDepthwiseConvolutionWorkloadValidate</a>,</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;                                   input,</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00128">ILayerSupport::biases</a>, <a class="el" href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00026">armnn::ClDepthwiseConvolutionWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00127">ILayerSupport::weights</a>.</p>

</div>
</div>
<a id="ad4217d27bcb41e14cd023552004b21a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4217d27bcb41e14cd023552004b21a3">&#9670;&nbsp;</a></span>IsDivisionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDivisionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00988">988</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;{</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a0591ff61ac269187164ea23713d33852">ClDivisionWorkloadValidate</a>,</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;                                   input0,</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_division_workload_8cpp_source.xhtml#l00018">armnn::ClDivisionWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="aeec02af89681b711706472de7be52871"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeec02af89681b711706472de7be52871">&#9670;&nbsp;</a></span>IsElementwiseUnarySupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsElementwiseUnarySupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01001">1001</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;{</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.m_Operation)</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    {</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a1e34af023adeb7d5f484f8eb4b9826b6">UnaryOperation::Abs</a>:</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a1391582cd6e145b67c98f3410667968e">ClAbsWorkloadValidate</a>,</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;                                           input,</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">UnaryOperation::Exp</a>:</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a9831849c09391e90e50de46e2ee16403">ClExpWorkloadValidate</a>,</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;                                           input,</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">UnaryOperation::Log</a>:</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a64806be3c31d35b75546da7c6b6b46d0">ClLogWorkloadValidate</a>,</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;                                           input,</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">UnaryOperation::LogicalNot</a>:</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ace776a194a715c709136a9966ada1a48">ClLogicalNotWorkloadValidate</a>,</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;                                           input,</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">UnaryOperation::Neg</a>:</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a66a3a6c05b38e48508bbbb3f32023ab7">ClNegWorkloadValidate</a>,</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;                                           input,</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">UnaryOperation::Rsqrt</a>:</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a3f6f9f0d3567ae04b49ea88727845900">ClRsqrtWorkloadValidate</a>,</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;                                           input,</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">UnaryOperation::Sin</a>:</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ac5cd8464c73415025cb8c8f6ada74e15">ClSinWorkloadValidate</a>,</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;                                           input,</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8aae77f3ad25595e35b327334d89410054">UnaryOperation::Sqrt</a>:</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a34e66b74a990db4b29ea4f904c69d7d9">ClSqrtWorkloadValidate</a>,</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;                                           input,</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    }</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a1e34af023adeb7d5f484f8eb4b9826b6">armnn::Abs</a>, <a class="el" href="_cl_abs_workload_8cpp_source.xhtml#l00019">armnn::ClAbsWorkloadValidate()</a>, <a class="el" href="_cl_exp_workload_8cpp_source.xhtml#l00018">armnn::ClExpWorkloadValidate()</a>, <a class="el" href="_cl_logical_not_workload_8cpp_source.xhtml#l00020">armnn::ClLogicalNotWorkloadValidate()</a>, <a class="el" href="_cl_log_workload_8cpp_source.xhtml#l00018">armnn::ClLogWorkloadValidate()</a>, <a class="el" href="_cl_neg_workload_8cpp_source.xhtml#l00018">armnn::ClNegWorkloadValidate()</a>, <a class="el" href="_cl_rsqrt_workload_8cpp_source.xhtml#l00018">armnn::ClRsqrtWorkloadValidate()</a>, <a class="el" href="_cl_sin_workload_8cpp_source.xhtml#l00018">armnn::ClSinWorkloadValidate()</a>, <a class="el" href="_cl_sqrt_workload_8cpp_source.xhtml#l00019">armnn::ClSqrtWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">armnn::Exp</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">armnn::Log</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">armnn::LogicalNot</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">armnn::Neg</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::Rsqrt</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">armnn::Sin</a>, and <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8aae77f3ad25595e35b327334d89410054">armnn::Sqrt</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ab747f27ee2acb8409799d6ea1af0dff7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab747f27ee2acb8409799d6ea1af0dff7">&#9670;&nbsp;</a></span>IsFillSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFillSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab747f27ee2acb8409799d6ea1af0dff7">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01053">1053</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;{</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(input);</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160; </div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;    <span class="keywordflow">return</span> IsClBackendSupported(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ae054f879bca9ff680f7e42ae97cc5ed3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae054f879bca9ff680f7e42ae97cc5ed3">&#9670;&nbsp;</a></span>IsFloorSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFloorSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01065">1065</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;{</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8874961260f35da85229554f92e16ca9">ClFloorWorkloadValidate</a>,</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;                                   input,</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_floor_float_workload_8cpp_source.xhtml#l00014">armnn::ClFloorWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a7249912502bfa13dad25038e8fb9379b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7249912502bfa13dad25038e8fb9379b">&#9670;&nbsp;</a></span>IsFullyConnectedSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFullyConnectedSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01075">1075</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;{</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a18c7eef8533ca0acbbe081cd1a1fec98">ClFullyConnectedWorkloadValidate</a>,</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;                                   input,</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00128">ILayerSupport::biases</a>, <a class="el" href="_cl_fully_connected_workload_8cpp_source.xhtml#l00019">armnn::ClFullyConnectedWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00127">ILayerSupport::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ad0bca4c0de78df48fd6e63a3b8239f57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0bca4c0de78df48fd6e63a3b8239f57">&#9670;&nbsp;</a></span>IsGatherNdSupported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsGatherNdSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01106">1106</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;{</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#adc7c6ed4375eb58ea8fa20d6ec704a27">ClGatherNdWorkloadValidate</a>,</div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;                                   input0,</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_gather_nd_workload_8cpp_source.xhtml#l00016">armnn::ClGatherNdWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ae02f78731b0d046f4ed85fcf46c5d17d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae02f78731b0d046f4ed85fcf46c5d17d">&#9670;&nbsp;</a></span>IsGatherSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsGatherSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01092">1092</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;{</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aff9e3b78a938c14a4420ce6365b997fb">ClGatherWorkloadValidate</a>,</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;                                   input0,</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_gather_workload_8cpp_source.xhtml#l00015">armnn::ClGatherWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a5d0dbfd77d3461ded89d3bf6a4eab62c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d0dbfd77d3461ded89d3bf6a4eab62c">&#9670;&nbsp;</a></span>IsInputSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsInputSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01118">1118</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;{</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;    <span class="keywordflow">return</span> IsClBackendSupported(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input);</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a9ee45bf624e40815207a2117f8e02b5d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ee45bf624e40815207a2117f8e02b5d">&#9670;&nbsp;</a></span>IsInstanceNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsInstanceNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01124">1124</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;{</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a79d362f0c6e04d51807e0d81b5b05f3a">ClInstanceNormalizationWorkloadValidate</a>,</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;                                   input,</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_instance_normalization_workload_8cpp_source.xhtml#l00018">armnn::ClInstanceNormalizationWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ad17197c4dc4dd190610d6d205108255a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad17197c4dc4dd190610d6d205108255a">&#9670;&nbsp;</a></span>IsL2NormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsL2NormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01136">1136</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;{</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aef334cdb24000c330f4d2e5f1b384784">ClL2NormalizationWorkloadValidate</a>,</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;                                   input,</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_l2_normalization_float_workload_8cpp_source.xhtml#l00017">armnn::ClL2NormalizationWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a1f75cea2b43e602f4b99d60375d41a8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f75cea2b43e602f4b99d60375d41a8a">&#9670;&nbsp;</a></span>IsLayerSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> &amp;&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>infos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_base_descriptor.xhtml">BaseDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>lstmParamsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>quantizedLstmParamsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a4da81c0c187071252d23c014db1c867d">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">184</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;{</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">switch</span> (type)</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">LayerType::Activation</a>:</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#acd148b61eab388a9313c61f4c7a96c4b">IsActivationSupported</a>(infos[0],</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                         infos[1],</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                         *(PolymorphicDowncast&lt;const ActivationDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                                         <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a>:</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a06a955e172cf18898d966eab7383efa1">IsAdditionSupported</a>(infos[0], infos[1], infos[2], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">LayerType::ArgMinMax</a>:</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a7224fbfbc4c5a2b3710543e3f574171f">IsArgMinMaxSupported</a>(infos[0],</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                        infos[1],</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                        *(PolymorphicDowncast&lt;const ArgMinMaxDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9882ff3cfed27d6161c20a305e7a3484">LayerType::BatchMatMul</a>:</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a22cfc1d5f68bd32db0aa126e8fd9e615">IsBatchMatMulSupported</a>(infos[0],</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                          infos[1],</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                          infos[2],</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                          *(PolymorphicDowncast&lt;const BatchMatMulDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                          <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">LayerType::BatchNormalization</a>:</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a450ddf4b4335cb37e07e3b0171b00096">IsBatchNormalizationSupported</a>(infos[0],</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                                 infos[1],</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                                 infos[2],</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                                 infos[3],</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                                 infos[4],</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                                 infos[5],</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                                 *(PolymorphicDowncast&lt;const BatchNormalizationDescriptor*&gt;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                                     (&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                                 <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">LayerType::BatchToSpaceNd</a>:</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a30cbe4bc4e20ae9b2aac66a108088919">IsBatchToSpaceNdSupported</a>(infos[0],</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                             infos[1],</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                             *(PolymorphicDowncast&lt;const BatchToSpaceNdDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                             <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c">LayerType::Cast</a>:</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ac680aa10b0a3768da4c23e691881b5ea">IsCastSupported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd">LayerType::ChannelShuffle</a>:</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a1362503332222029f9d73d40520f35bd">IsChannelShuffleSupported</a>(infos[0],</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                             infos[1],</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                             *(PolymorphicDowncast&lt;const ChannelShuffleDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                                             <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">LayerType::Comparison</a>:</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#afb14ff12be68a64356e8b3764032842d">IsComparisonSupported</a>(infos[0],</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                         infos[1],</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                         infos[2],</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                         *(PolymorphicDowncast&lt;const ComparisonDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                         <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">LayerType::Concat</a>:</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            std::vector&lt;const TensorInfo*&gt; inputInfos;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; (infos.size() - 1); i++)</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            {</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                inputInfos.push_back(&amp;infos[i]);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#af6465e7a85f4ef0013c7d7161cd07a4d">IsConcatSupported</a>(inputInfos,</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                     infos[infos.size() - 1],</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                     *(PolymorphicDowncast&lt;const OriginsDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                     <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        }</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acb17869fe51048b5a5c4c6106551a255">LayerType::Constant</a>:</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a57aee9aba2e2ad5d0bd9f65acd05b6e4">IsConstantSupported</a>(infos[0], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">LayerType::ConvertFp16ToFp32</a>:</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a95dac0c44b7e759694a97778bfbea954">IsConvertFp16ToFp32Supported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">LayerType::ConvertFp32ToFp16</a>:</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a5f9272cdf0224364e1bb9b47efe4130a">IsConvertFp32ToFp16Supported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">LayerType::Convolution2d</a>:</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <span class="keywordflow">if</span> (infos.size() != 4)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Invalid number of Convolution2d TensorInfos. &quot;</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                                               <span class="stringliteral">&quot;TensorInfos should be of format: {input, output, weights, biases}.&quot;</span>);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <span class="keyword">auto</span> desc = *(PolymorphicDowncast&lt;const Convolution2dDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>));</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            <span class="keywordflow">if</span> (infos[3] == TensorInfo())</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a4bd807090f4cb45bbfaa9c67e49532f5">IsConvolution2dSupported</a>(infos[0],</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                                                infos[1],</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                                desc,</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                                infos[2],</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                                EmptyOptional(),</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                                <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a4bd807090f4cb45bbfaa9c67e49532f5">IsConvolution2dSupported</a>(infos[0],</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                                                infos[1],</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                                desc,</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                                infos[2],</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                                infos[3],</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                                                <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            }</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953">LayerType::Convolution3d</a>:</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        {</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keywordflow">if</span> (infos.size() != 4)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Invalid number of Convolution3d TensorInfos. &quot;</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                               <span class="stringliteral">&quot;TensorInfos should be of format: {input, output, weights, biases}.&quot;</span>);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keyword">auto</span> desc = *(PolymorphicDowncast&lt;const Convolution3dDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>));</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="keywordflow">if</span> (infos[3] == TensorInfo())</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#abe850b2a5be4ce4617cb51ceb5344756">IsConvolution3dSupported</a>(infos[0],</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                                infos[1],</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                                desc,</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                                infos[2],</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                                                EmptyOptional(),</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                                <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            }</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            {</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#abe850b2a5be4ce4617cb51ceb5344756">IsConvolution3dSupported</a>(infos[0],</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                                infos[1],</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                                desc,</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                                infos[2],</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                                infos[3],</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                                                <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            }</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        }</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">LayerType::DepthToSpace</a>:</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a84f23a37f7fd69269f072e114b7f0afb">IsDepthToSpaceSupported</a>(infos[0],</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                                           infos[1],</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                           *(PolymorphicDowncast&lt;const DepthToSpaceDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">LayerType::DepthwiseConvolution2d</a>:</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        {</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="keywordflow">if</span> (infos.size() != 4)</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Invalid number of DepthwiseConvolution2d TensorInfos. &quot;</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                               <span class="stringliteral">&quot;TensorInfos should be of format: {input, output, weights, biases}.&quot;</span>);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="keyword">auto</span> desc = *(PolymorphicDowncast&lt;const DepthwiseConvolution2dDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>));</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <span class="keywordflow">if</span> (infos[3] == TensorInfo())</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            {</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a56c4df05190f0f465e8501ae831af234">IsDepthwiseConvolutionSupported</a>(infos[0],</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                                                infos[1],</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                                                desc,</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                                                infos[2],</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                                                EmptyOptional(),</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                                                <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            }</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            {</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a56c4df05190f0f465e8501ae831af234">IsDepthwiseConvolutionSupported</a>(infos[0],</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                                                         infos[1],</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                                                         desc,</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                                         infos[2],</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                                                         infos[3],</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                                         <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        }</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">LayerType::Dequantize</a>:</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a866844299dc03c65ca41be5990bf19e8">IsDequantizeSupported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">LayerType::Division</a>:</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ad4217d27bcb41e14cd023552004b21a3">IsDivisionSupported</a>(infos[0], infos[1], infos[2], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a699bcffd93aff3022014b9efc9eaefd1">LayerType::ElementwiseBinary</a>:</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        {</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <span class="keyword">auto</span> desc = *(PolymorphicDowncast&lt;const ElementwiseBinaryDescriptor *&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>));</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <span class="keywordflow">switch</span> (desc.m_Operation)</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            {</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047aec211f7c20af43e742bf2570c3cb84f9">BinaryOperation::Add</a>:</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a24fc3e8e29d3fa56cc6b2d81e48625d1">ClAdditionValidate</a>,</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                                                   infos[0],</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                                   infos[1],</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                                                   infos[2],</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047a43d11850893d2fe84a1e618121c1cc0a">BinaryOperation::Div</a>:</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a0591ff61ac269187164ea23713d33852">ClDivisionWorkloadValidate</a>,</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                                   infos[0],</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                                   infos[1],</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                                   infos[2],</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047aa1d0ec6d56f8833a078b5a7ac4caf2d4">BinaryOperation::Minimum</a>:</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8c04c8e796a4fbec706df42ed9c27e4e">ClMinimumWorkloadValidate</a>,</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                                                   infos[0],</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                                                   infos[1],</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                                                   infos[2]);</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047a8321e79c278ec510f63675c040594892">BinaryOperation::Maximum</a>:</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a553706c6338ffc52b0d916859f642587">ClMaximumWorkloadValidate</a>,</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                                                   infos[0],</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                                                   infos[1],</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                                                   infos[2]);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047a62b6d55816cf737bfc6f42e60df1a3f2">BinaryOperation::Mul</a>:</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a9638165cb6c1baae3b2b5fd9f0f75201">ClMultiplicationWorkloadValidate</a>,</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                                   infos[0],</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                                                   infos[1],</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                                   infos[2],</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047ae80155eceb940c89e2de63ad05868db2">BinaryOperation::Sub</a>:</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#afa9933f1d9de469ffba5ba0fcee769f8">ClSubtractionValidate</a>,</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                                                   infos[0],</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                                                   infos[1],</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                                   infos[2],</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            }</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        }</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">LayerType::ElementwiseUnary</a>:</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#aeec02af89681b711706472de7be52871">IsElementwiseUnarySupported</a>(infos[0],</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                                               infos[1],</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                                               *(PolymorphicDowncast&lt;const ElementwiseUnaryDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                                               <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed">LayerType::Fill</a>:</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ab747f27ee2acb8409799d6ea1af0dff7">IsFillSupported</a>(infos[0],</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                                   infos[1],</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                                   *(PolymorphicDowncast&lt;const FillDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af3f6d0343d56ce88ce7958170ed05cb3">LayerType::Floor</a>:</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ae054f879bca9ff680f7e42ae97cc5ed3">IsFloorSupported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">LayerType::FullyConnected</a>:</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a7249912502bfa13dad25038e8fb9379b">IsFullyConnectedSupported</a>(infos[0],</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                             infos[1],</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                             infos[2],</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                             infos[3],</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                             *(PolymorphicDowncast&lt;const FullyConnectedDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                             <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">LayerType::Gather</a>:</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ae02f78731b0d046f4ed85fcf46c5d17d">IsGatherSupported</a>(infos[0],</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                                     infos[1],</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                                     infos[2],</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                                     *(PolymorphicDowncast&lt;const GatherDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                                     <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3028cc42e40f9a1f4f8b35556d9715a4">LayerType::GatherNd</a>:</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ad0bca4c0de78df48fd6e63a3b8239f57">IsGatherNdSupported</a>(infos[0],</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                       infos[1],</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                       infos[2],</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a>:</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a5d0dbfd77d3461ded89d3bf6a4eab62c">IsInputSupported</a>(infos[0], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">LayerType::InstanceNormalization</a>:</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a9ee45bf624e40815207a2117f8e02b5d">IsInstanceNormalizationSupported</a>(infos[0],</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                                                    infos[1],</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                                                    *(PolymorphicDowncast&lt;const InstanceNormalizationDescriptor*&gt;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                                                        (&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                                                    <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">LayerType::L2Normalization</a>:</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ad17197c4dc4dd190610d6d205108255a">IsL2NormalizationSupported</a>(infos[0],</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                                              infos[1],</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                                              *(PolymorphicDowncast&lt;const L2NormalizationDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                                              <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30">LayerType::LogicalBinary</a>:</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#acaca6012c89942f00869d80c389d5e8a">IsLogicalBinarySupported</a>(infos[0],</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                                            infos[1],</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                                            infos[2],</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                                            *(PolymorphicDowncast&lt;const LogicalBinaryDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                                            <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">LayerType::LogSoftmax</a>:</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ae13d577a85b2b121febb2fe43899fd6c">IsLogSoftmaxSupported</a>(infos[0],</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                                         infos[1],</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                                         *(PolymorphicDowncast&lt;const LogSoftmaxDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                                         <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">LayerType::Lstm</a>:</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a533ad0fa8ff06bef939f4260a8183350">IsLstmSupported</a>(infos[0],</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                                   infos[1],</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                                   infos[2],</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                                   infos[3],</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                                   infos[4],</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                                   infos[5],</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                                   infos[6],</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                                   *(PolymorphicDowncast&lt;const LstmDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                                   lstmParamsInfo.value(),</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a46f3ea056caa3126b91f3f70beea068c">LayerType::Map</a>:</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">LayerType::MemCopy</a>:</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml#ae12212269e173407398a6d4fef80f76f">LayerSupportBase::IsMemCopySupported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">LayerType::MemImport</a>:</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml#a3ff6fcb839280edf41013d349df4f848">LayerSupportBase::IsMemImportSupported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00">LayerType::Merge</a>:</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml#a93a1d7a75c6802d3c4f7911f35e1cfa8">LayerSupportBase::IsMergeSupported</a>(infos[0],</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                                                      infos[1],</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                                                      infos[2],</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                                                      <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">LayerType::Maximum</a>:</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ac92df5c79bae4ccdc68d9d2045fa2110">IsMaximumSupported</a>(infos[0], infos[1], infos[2], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3d6c9ac08ada31c184094bbc67afe00d">LayerType::Mean</a>:</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ad9869f2a0cbe051fcc87fb1405d4091d">IsMeanSupported</a>(infos[0],</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                                   infos[1],</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                                   *(PolymorphicDowncast&lt;const MeanDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">LayerType::Minimum</a>:</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a4eb9b602052470f8eadcfa7a63b17d54">IsMinimumSupported</a>(infos[0], infos[1], infos[2], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">LayerType::Multiplication</a>:</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ab5960d08e30fb9542125688580c5f623">IsMultiplicationSupported</a>(infos[0], infos[1], infos[2], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">LayerType::Normalization</a>:</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#aedd6e4de83db27813fad327c29402033">IsNormalizationSupported</a>(infos[0],</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                                            infos[1],</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                                            *(PolymorphicDowncast&lt;const NormalizationDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                                            <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a>:</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ac2078e9d66b086cf1225f0610b05a520">IsOutputSupported</a>(infos[0], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">LayerType::Pad</a>:</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#aef4e4cfc054c2fd0e9bd0947909ebe83">IsPadSupported</a>(infos[0],</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                                  infos[1],</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                                  *(PolymorphicDowncast&lt;const PadDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                                  <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">LayerType::Permute</a>:</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a336cc17b9c2cd4e7f667c7fcf5c9377e">IsPermuteSupported</a>(infos[0],</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                                      infos[1],</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                                      *(PolymorphicDowncast&lt;const PermuteDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                                      <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">LayerType::Pooling2d</a>:</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ad6262dc3169d8e809c272b31b25aaa6a">IsPooling2dSupported</a>(infos[0],</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                                        infos[1],</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                                        *(PolymorphicDowncast&lt;const Pooling2dDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                                        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c">LayerType::Pooling3d</a>:</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a70c3043f5b6dd3091646fb2c1648a5f5">IsPooling3dSupported</a>(infos[0],</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                                        infos[1],</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                                        *(PolymorphicDowncast&lt;const Pooling3dDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                                        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">LayerType::Prelu</a>:</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#abdf847462abb9af6a8a932589a0046bb">IsPreluSupported</a>(infos[0], infos[1], infos[2], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">LayerType::QLstm</a>:</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a052a3d7389be3a0993c9f9a508fa435e">IsQLstmSupported</a>(infos[0],</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                                    infos[1],</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                                    infos[2],</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                                    infos[3],</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                                    infos[4],</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                                    infos[5],</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                    *(PolymorphicDowncast&lt;const QLstmDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                                    lstmParamsInfo.value(),</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                                    <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">LayerType::Quantize</a>:</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ab4474f6170d9abd571f612b2dae34820">IsQuantizeSupported</a>(infos[0], infos[1], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3">LayerType::QuantizedLstm</a>:</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a7956a5f8822ae4071b4c5f133bf05a82">IsQuantizedLstmSupported</a>(infos[0],</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                                            infos[1],</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                                            infos[2],</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                                            infos[3],</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                                            infos[4],</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                                            quantizedLstmParamsInfo.value(),</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                                            <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3">LayerType::Rank</a>:</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">LayerType::Reduce</a>:</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a9fe9a6e2b79cc5c97e582f1fe0e1f514">IsReduceSupported</a>(infos[0],</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                                     infos[1],</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                                     *(PolymorphicDowncast&lt;const ReduceDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                                     <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">LayerType::Reshape</a>:</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ab226977f41ce8cc1ee82c314949bb184">IsReshapeSupported</a>(infos[0],</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                                      infos[1],</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                                      *(PolymorphicDowncast&lt;const ReshapeDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                                      <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">LayerType::Resize</a>:</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a629a1df03491e1bdc19dbd415fd2ad74">IsResizeSupported</a>(infos[0],</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                                     infos[1],</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                                     *(PolymorphicDowncast&lt;const ResizeDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                                     <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">LayerType::Shape</a>:</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml#a0d720441480c7b7af4285f628f07fbcd">LayerSupportBase::IsShapeSupported</a>(infos[0],</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                                                      infos[1],</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                                                      <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">LayerType::Slice</a>:</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a227dac81ac83d16f474881c2252d14cc">IsSliceSupported</a>(infos[0],</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                                    infos[1],</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                                    *(PolymorphicDowncast&lt;const SliceDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                                    <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">LayerType::Softmax</a>:</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a3115a72a9cca31fb27b40da54a435dfa">IsSoftmaxSupported</a>(infos[0],</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                                      infos[1],</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                                      *(PolymorphicDowncast&lt;const SoftmaxDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                                      <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">LayerType::SpaceToBatchNd</a>:</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#aa421c466a09cc8048aa0b700b7e300d8">IsSpaceToBatchNdSupported</a>(infos[0],</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                                             infos[1],</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                                             *(PolymorphicDowncast&lt;const SpaceToBatchNdDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                                             <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">LayerType::SpaceToDepth</a>:</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a78c8c01a898f4bdcebddeda9f3d39a51">IsSpaceToDepthSupported</a>(infos[0],</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                                           infos[1],</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                                           *(PolymorphicDowncast&lt;const SpaceToDepthDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">LayerType::Splitter</a>:</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        {</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            std::vector&lt;TensorInfo&gt; outputInfos;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            <span class="keywordflow">for</span> (uint32_t i = 1; i &lt; infos.size(); i++)</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            {</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                outputInfos.push_back(infos[i]);</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;            }</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a159deb89f2f5dbc1a12b8d365162760f">IsSplitterSupported</a>(infos[0],</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                                       {outputInfos.begin(), outputInfos.end()},</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                                       *(PolymorphicDowncast&lt;const ViewsDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        }</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">LayerType::Stack</a>:</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        {</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            std::vector&lt;const TensorInfo*&gt; inputInfos;</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; infos.size() - 1; i++)</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            {</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                inputInfos.push_back(&amp;infos[i]);</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            }</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a0d99d635906837ed6c582aba6ca6b178">IsStackSupported</a>(inputInfos,</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                                    infos[infos.size() - 1],</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                                    *(PolymorphicDowncast&lt;const StackDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                                    <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        }</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">LayerType::StridedSlice</a>:</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#aaaa749f75b5ca145f6ad41aa210dbd19">IsStridedSliceSupported</a>(infos[0],</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                                           infos[1],</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                                           *(PolymorphicDowncast&lt;const StridedSliceDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">LayerType::Subtraction</a>:</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a8a520378fa336d155e23478456eb45fe">IsSubtractionSupported</a>(infos[0], infos[1], infos[2], <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">LayerType::Transpose</a>:</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#a5d8316c4fac71a34c0f95745a0cae0a8">IsTransposeSupported</a>(infos[0],</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                                        infos[1],</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                                        *(PolymorphicDowncast&lt;const TransposeDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                                        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">LayerType::TransposeConvolution2d</a>:</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        {</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            <span class="keywordflow">if</span> (infos.size() != 4)</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;            {</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Invalid number of TransposeConvolution2d TensorInfos. &quot;</span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                                               <span class="stringliteral">&quot;TensorInfos should be of format: {input, output, weights, biases}.&quot;</span>);</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            }</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160; </div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;            <span class="keyword">auto</span> desc = *(PolymorphicDowncast&lt;const TransposeConvolution2dDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>));</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;            <span class="keywordflow">if</span> (infos[3] == TensorInfo())</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;            {</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#abfc649259b4e9d8bb830da564f7556c6">IsTransposeConvolution2dSupported</a>(infos[0],</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                                                         infos[1],</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                                                         desc,</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                                                         infos[2],</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                                                         EmptyOptional(),</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                                                         <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;            }</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;            {</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#abfc649259b4e9d8bb830da564f7556c6">IsTransposeConvolution2dSupported</a>(infos[0],</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                                                         infos[1],</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                                                         desc,</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                                                         infos[2],</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                                                         infos[3],</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                                                         <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;            }</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        }</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">LayerType::UnidirectionalSequenceLstm</a>:</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_layer_support.xhtml#ae5cccf9f21abbc944a20817804cfb964">IsUnidirectionalSequenceLstmSupported</a>(infos[0],</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                                                         infos[1],</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                                                         infos[2],</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                                                         infos[3],</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                                                         infos[4],</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                                                         infos[5],</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                                                         *(<a class="code" href="namespacearmnn.xhtml#aa4e89c644c511e255f6a7ecbd5d14686">PolymorphicDowncast</a>&lt;<span class="keyword">const</span></div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                                                            <a class="code" href="namespacearmnn.xhtml#ae6c5f1b51bd32133c4dcc632045d6b58">UnidirectionalSequenceLstmDescriptor</a>*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                                                         lstmParamsInfo.value(),</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                                                         <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a48180ddd584de21589006d56a86d3410">LayerType::Unmap</a>:</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;            <span class="comment">// layers not supported in cl by default:</span></div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;            <span class="comment">// debug, detectionpostprocess, fakequantization,</span></div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;            <span class="comment">// precompiled, standin, switch, pooling3d</span></div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    }</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::Activation</a>, <a class="el" href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047aec211f7c20af43e742bf2570c3cb84f9">armnn::Add</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::Addition</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">armnn::ArgMinMax</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9882ff3cfed27d6161c20a305e7a3484">armnn::BatchMatMul</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::BatchNormalization</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">armnn::BatchToSpaceNd</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c">armnn::Cast</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd">armnn::ChannelShuffle</a>, <a class="el" href="_cl_addition_workload_8cpp_source.xhtml#l00045">armnn::ClAdditionValidate()</a>, <a class="el" href="_cl_division_workload_8cpp_source.xhtml#l00018">armnn::ClDivisionWorkloadValidate()</a>, <a class="el" href="_cl_maximum_workload_8cpp_source.xhtml#l00024">armnn::ClMaximumWorkloadValidate()</a>, <a class="el" href="_cl_minimum_workload_8cpp_source.xhtml#l00024">armnn::ClMinimumWorkloadValidate()</a>, <a class="el" href="_cl_multiplication_workload_8cpp_source.xhtml#l00018">armnn::ClMultiplicationWorkloadValidate()</a>, <a class="el" href="_cl_subtraction_workload_8cpp_source.xhtml#l00046">armnn::ClSubtractionValidate()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">armnn::Comparison</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">armnn::Concat</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acb17869fe51048b5a5c4c6106551a255">armnn::Constant</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">armnn::ConvertFp16ToFp32</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">armnn::ConvertFp32ToFp16</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::Convolution2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953">armnn::Convolution3d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">armnn::DepthToSpace</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::DepthwiseConvolution2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">armnn::Dequantize</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047a43d11850893d2fe84a1e618121c1cc0a">armnn::Div</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::Division</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a699bcffd93aff3022014b9efc9eaefd1">armnn::ElementwiseBinary</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">armnn::ElementwiseUnary</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed">armnn::Fill</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af3f6d0343d56ce88ce7958170ed05cb3">armnn::Floor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::FullyConnected</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">armnn::Gather</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3028cc42e40f9a1f4f8b35556d9715a4">armnn::GatherNd</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">armnn::InstanceNormalization</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00674">ClLayerSupport::IsActivationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00686">ClLayerSupport::IsAdditionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00699">ClLayerSupport::IsArgMinMaxSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00712">ClLayerSupport::IsBatchMatMulSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00727">ClLayerSupport::IsBatchNormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00748">ClLayerSupport::IsBatchToSpaceNdSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00760">ClLayerSupport::IsCastSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00770">ClLayerSupport::IsChannelShuffleSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00782">ClLayerSupport::IsComparisonSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00796">ClLayerSupport::IsConcatSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00837">ClLayerSupport::IsConstantSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00845">ClLayerSupport::IsConvertFp16ToFp32Supported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00855">ClLayerSupport::IsConvertFp32ToFp16Supported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00865">ClLayerSupport::IsConvolution2dSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00898">ClLayerSupport::IsConvolution3dSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00941">ClLayerSupport::IsDepthToSpaceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00953">ClLayerSupport::IsDepthwiseConvolutionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00931">ClLayerSupport::IsDequantizeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00988">ClLayerSupport::IsDivisionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01001">ClLayerSupport::IsElementwiseUnarySupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01053">ClLayerSupport::IsFillSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01065">ClLayerSupport::IsFloorSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01075">ClLayerSupport::IsFullyConnectedSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01106">ClLayerSupport::IsGatherNdSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01092">ClLayerSupport::IsGatherSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01118">ClLayerSupport::IsInputSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01124">ClLayerSupport::IsInstanceNormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01136">ClLayerSupport::IsL2NormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01148">ClLayerSupport::IsLogicalBinarySupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01176">ClLayerSupport::IsLogSoftmaxSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01188">ClLayerSupport::IsLstmSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01212">ClLayerSupport::IsMaximumSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01224">ClLayerSupport::IsMeanSupported()</a>, <a class="el" href="_layer_support_base_8cpp_source.xhtml#l00390">LayerSupportBase::IsMemCopySupported()</a>, <a class="el" href="_layer_support_base_8cpp_source.xhtml#l00397">LayerSupportBase::IsMemImportSupported()</a>, <a class="el" href="_layer_support_base_8cpp_source.xhtml#l00404">LayerSupportBase::IsMergeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01236">ClLayerSupport::IsMinimumSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01248">ClLayerSupport::IsMultiplicationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01261">ClLayerSupport::IsNormalizationSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01269">ClLayerSupport::IsOutputSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01275">ClLayerSupport::IsPadSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01287">ClLayerSupport::IsPermuteSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01295">ClLayerSupport::IsPooling2dSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01303">ClLayerSupport::IsPooling3dSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01311">ClLayerSupport::IsPreluSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01319">ClLayerSupport::IsQLstmSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01353">ClLayerSupport::IsQuantizedLstmSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01371">ClLayerSupport::IsQuantizeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01381">ClLayerSupport::IsReduceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01393">ClLayerSupport::IsReshapeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01402">ClLayerSupport::IsResizeSupported()</a>, <a class="el" href="_layer_support_base_8cpp_source.xhtml#l00551">LayerSupportBase::IsShapeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01410">ClLayerSupport::IsSliceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01418">ClLayerSupport::IsSoftmaxSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01426">ClLayerSupport::IsSpaceToBatchNdSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01438">ClLayerSupport::IsSpaceToDepthSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01450">ClLayerSupport::IsSplitterSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01483">ClLayerSupport::IsStackSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01495">ClLayerSupport::IsStridedSliceSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01507">ClLayerSupport::IsSubtractionSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01520">ClLayerSupport::IsTransposeConvolution2dSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01536">ClLayerSupport::IsTransposeSupported()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01544">ClLayerSupport::IsUnidirectionalSequenceLstmSupported()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">armnn::L2Normalization</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30">armnn::LogicalBinary</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">armnn::LogSoftmax</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">armnn::Lstm</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a46f3ea056caa3126b91f3f70beea068c">armnn::Map</a>, <a class="el" href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047a8321e79c278ec510f63675c040594892">armnn::Maximum</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3d6c9ac08ada31c184094bbc67afe00d">armnn::Mean</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::MemCopy</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::MemImport</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00">armnn::Merge</a>, <a class="el" href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::Minimum</a>, <a class="el" href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047a62b6d55816cf737bfc6f42e60df1a3f2">armnn::Mul</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::Multiplication</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">armnn::Normalization</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">armnn::Pad</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">armnn::Permute</a>, <a class="el" href="_polymorphic_downcast_8hpp_source.xhtml#l00074">armnn::PolymorphicDowncast()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">armnn::Pooling2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c">armnn::Pooling3d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">armnn::Prelu</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">armnn::QLstm</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">armnn::Quantize</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3">armnn::QuantizedLstm</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3">armnn::Rank</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">armnn::Reduce</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">armnn::Reshape</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">armnn::Resize</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">armnn::Shape</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">armnn::Slice</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::Softmax</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">armnn::SpaceToBatchNd</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">armnn::SpaceToDepth</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">armnn::Splitter</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">armnn::Stack</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">armnn::StridedSlice</a>, <a class="el" href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047ae80155eceb940c89e2de63ad05868db2">armnn::Sub</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::Subtraction</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">armnn::Transpose</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">armnn::TransposeConvolution2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::UnidirectionalSequenceLstm</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a48180ddd584de21589006d56a86d3410">armnn::Unmap</a>, and <a class="el" href="_optional_8hpp_source.xhtml#l00146">OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value()</a>.</p>

</div>
</div>
<a id="acaca6012c89942f00869d80c389d5e8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acaca6012c89942f00869d80c389d5e8a">&#9670;&nbsp;</a></span>IsLogicalBinarySupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLogicalBinarySupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01148">1148</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;{</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160; </div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.m_Operation)</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;    {</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">LogicalBinaryOperation::LogicalAnd</a>:</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7900acef495ac8033a08d3ed74f06970">ClLogicalAndWorkloadValidate</a>,</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;                                           input0,</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">LogicalBinaryOperation::LogicalOr</a>:</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;            <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a89391e63f7a679b023e6bd1798186db6">ClLogicalOrWorkloadValidate</a>,</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;                                           input0,</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;    }</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_logical_and_workload_8cpp_source.xhtml#l00020">armnn::ClLogicalAndWorkloadValidate()</a>, <a class="el" href="_cl_logical_or_workload_8cpp_source.xhtml#l00020">armnn::ClLogicalOrWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">armnn::LogicalAnd</a>, <a class="el" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">armnn::LogicalOr</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ae13d577a85b2b121febb2fe43899fd6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae13d577a85b2b121febb2fe43899fd6c">&#9670;&nbsp;</a></span>IsLogSoftmaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLogSoftmaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01176">1176</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;{</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7071f5d6693d3014ddcb34c886ffc734">ClLogSoftmaxWorkloadValidate</a>,</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;                                   input,</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_log_softmax_workload_8cpp_source.xhtml#l00017">armnn::ClLogSoftmaxWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a533ad0fa8ff06bef939f4260a8183350"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a533ad0fa8ff06bef939f4260a8183350">&#9670;&nbsp;</a></span>IsLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>scratchBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01188">1188</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;{</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a90ab88fe4c7aa9466c4653404a6b2213">ClLstmFloatWorkloadValidate</a>,</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;                                   input,</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>,</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>,</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">scratchBuffer</a>,</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>,</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>,</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>);</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00287">ILayerSupport::cellStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00290">ILayerSupport::cellStateOut</a>, <a class="el" href="_cl_lstm_float_workload_8cpp_source.xhtml#l00244">armnn::ClLstmFloatWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00286">ILayerSupport::outputStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00289">ILayerSupport::outputStateOut</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00293">ILayerSupport::paramsInfo</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00288">ILayerSupport::scratchBuffer</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ac92df5c79bae4ccdc68d9d2045fa2110"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac92df5c79bae4ccdc68d9d2045fa2110">&#9670;&nbsp;</a></span>IsMaximumSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMaximumSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01212">1212</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;{</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a553706c6338ffc52b0d916859f642587">ClMaximumWorkloadValidate</a>,</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;                                   input0,</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_maximum_workload_8cpp_source.xhtml#l00024">armnn::ClMaximumWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ad9869f2a0cbe051fcc87fb1405d4091d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9869f2a0cbe051fcc87fb1405d4091d">&#9670;&nbsp;</a></span>IsMeanSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMeanSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01224">1224</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;{</div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a048a8ea8b1b39343a73ca7458024ea54">ClMeanValidate</a>,</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;                                   input,</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_mean_workload_8cpp_source.xhtml#l00017">armnn::ClMeanValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a4eb9b602052470f8eadcfa7a63b17d54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4eb9b602052470f8eadcfa7a63b17d54">&#9670;&nbsp;</a></span>IsMinimumSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMinimumSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01236">1236</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;{</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8c04c8e796a4fbec706df42ed9c27e4e">ClMinimumWorkloadValidate</a>,</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;                                   input0,</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_minimum_workload_8cpp_source.xhtml#l00024">armnn::ClMinimumWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ab5960d08e30fb9542125688580c5f623"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5960d08e30fb9542125688580c5f623">&#9670;&nbsp;</a></span>IsMultiplicationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMultiplicationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01248">1248</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;{</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a9638165cb6c1baae3b2b5fd9f0f75201">ClMultiplicationWorkloadValidate</a>,</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;                                   input0,</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_multiplication_workload_8cpp_source.xhtml#l00018">armnn::ClMultiplicationWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="aedd6e4de83db27813fad327c29402033"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aedd6e4de83db27813fad327c29402033">&#9670;&nbsp;</a></span>IsNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01261">1261</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;{</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a144c2e243a255715f309999077ed1792">ClNormalizationWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_normalization_float_workload_8cpp_source.xhtml#l00019">armnn::ClNormalizationWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ac2078e9d66b086cf1225f0610b05a520"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2078e9d66b086cf1225f0610b05a520">&#9670;&nbsp;</a></span>IsOutputSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsOutputSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01269">1269</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;{</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    <span class="keywordflow">return</span> IsClBackendSupported(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="aef4e4cfc054c2fd0e9bd0947909ebe83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef4e4cfc054c2fd0e9bd0947909ebe83">&#9670;&nbsp;</a></span>IsPadSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPadSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01275">1275</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;{</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#adcf7b7d939bac1cfaeb333c7b3175bb8">ClPadValidate</a>,</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;                                   input,</div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_pad_workload_8cpp_source.xhtml#l00062">armnn::ClPadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a336cc17b9c2cd4e7f667c7fcf5c9377e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a336cc17b9c2cd4e7f667c7fcf5c9377e">&#9670;&nbsp;</a></span>IsPermuteSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPermuteSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01287">1287</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;{</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a26c25df9e2271333ab4d4ef71db41dca">ClPermuteWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_permute_workload_8cpp_source.xhtml#l00017">armnn::ClPermuteWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ad6262dc3169d8e809c272b31b25aaa6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6262dc3169d8e809c272b31b25aaa6a">&#9670;&nbsp;</a></span>IsPooling2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPooling2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01295">1295</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;{</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8a21bb33f7f054ce7b48a8c7df9e6d4a">ClPooling2dWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_pooling2d_workload_8cpp_source.xhtml#l00018">armnn::ClPooling2dWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a70c3043f5b6dd3091646fb2c1648a5f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70c3043f5b6dd3091646fb2c1648a5f5">&#9670;&nbsp;</a></span>IsPooling3dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPooling3dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01303">1303</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;{</div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a85776d92e056832a524c6f2cf4741ced">ClPooling3dWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_pooling3d_workload_8cpp_source.xhtml#l00018">armnn::ClPooling3dWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="abdf847462abb9af6a8a932589a0046bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abdf847462abb9af6a8a932589a0046bb">&#9670;&nbsp;</a></span>IsPreluSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPreluSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01311">1311</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;{</div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae58d1f4437a779274037bc86efac9e26">ClPreluWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">alpha</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00392">ILayerSupport::alpha</a>, <a class="el" href="_cl_prelu_workload_8cpp_source.xhtml#l00016">armnn::ClPreluWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a052a3d7389be3a0993c9f9a508fa435e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a052a3d7389be3a0993c9f9a508fa435e">&#9670;&nbsp;</a></span>IsQLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousOutputIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousCellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01319">1319</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;{</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;    <span class="keywordflow">if</span> (input.GetDataType()               == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()    == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()      == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()        == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()              == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>)</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    {</div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;        <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8cdb508cb0ebc06e39dc1661815d73b0">ClQLstmWorkloadValidate</a>,</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;                                       input,</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>,</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>,</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>,</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>,</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>);</div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;    }</div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;    {</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;    }</div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00290">ILayerSupport::cellStateOut</a>, <a class="el" href="_cl_q_lstm_workload_8cpp_source.xhtml#l00247">armnn::ClQLstmWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00289">ILayerSupport::outputStateOut</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00293">ILayerSupport::paramsInfo</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00406">ILayerSupport::previousCellStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00405">ILayerSupport::previousOutputIn</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::QSymmS16</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a7956a5f8822ae4071b4c5f133bf05a82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7956a5f8822ae4071b4c5f133bf05a82">&#9670;&nbsp;</a></span>IsQuantizedLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQuantizedLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousCellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousOutputIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01353">1353</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;{</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a5fb7fe07abfb2373103d842b47a24726">ClQuantizedLstmWorkloadValidate</a>,</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;                                   input,</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>,</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>,</div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>,</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>);</div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00290">ILayerSupport::cellStateOut</a>, <a class="el" href="_cl_quantized_lstm_workload_8cpp_source.xhtml#l00018">armnn::ClQuantizedLstmWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00293">ILayerSupport::paramsInfo</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00406">ILayerSupport::previousCellStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00405">ILayerSupport::previousOutputIn</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ab4474f6170d9abd571f612b2dae34820"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4474f6170d9abd571f612b2dae34820">&#9670;&nbsp;</a></span>IsQuantizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQuantizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01371">1371</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;{</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a9c1b478e30a1e8a4ecac874cf15f13d4">ClQuantizeWorkloadValidate</a>,</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;                                   input,</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_quantize_workload_8cpp_source.xhtml#l00022">armnn::ClQuantizeWorkloadValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a9fe9a6e2b79cc5c97e582f1fe0e1f514"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fe9a6e2b79cc5c97e582f1fe0e1f514">&#9670;&nbsp;</a></span>IsReduceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsReduceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01381">1381</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;{</div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a4c42dfd9db4a47e470b5800bb11a8374">ClReduceWorkloadValidate</a>,</div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;                                   input,</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_reduce_workload_8cpp_source.xhtml#l00018">armnn::ClReduceWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ab226977f41ce8cc1ee82c314949bb184"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab226977f41ce8cc1ee82c314949bb184">&#9670;&nbsp;</a></span>IsReshapeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsReshapeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01393">1393</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;{</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#af5bb7a834a74983cbbc249785d0c392b">ClReshapeWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_reshape_workload_8cpp_source.xhtml#l00015">armnn::ClReshapeWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a629a1df03491e1bdc19dbd415fd2ad74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a629a1df03491e1bdc19dbd415fd2ad74">&#9670;&nbsp;</a></span>IsResizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsResizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01402">1402</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;{</div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a95b187d3c6b7b46f4fbdc60be69fc02c">ClResizeWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_resize_workload_8cpp_source.xhtml#l00022">armnn::ClResizeWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a227dac81ac83d16f474881c2252d14cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a227dac81ac83d16f474881c2252d14cc">&#9670;&nbsp;</a></span>IsSliceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSliceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01410">1410</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;{</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a6d85d2806d0a90140832ad8113c1d350">ClSliceWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_slice_workload_8cpp_source.xhtml#l00018">armnn::ClSliceWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a3115a72a9cca31fb27b40da54a435dfa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3115a72a9cca31fb27b40da54a435dfa">&#9670;&nbsp;</a></span>IsSoftmaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSoftmaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01418">1418</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;{</div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#abc6f7e5fe77e5aed3f7842755dd34073">ClSoftmaxWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_softmax_workload_8cpp_source.xhtml#l00017">armnn::ClSoftmaxWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="aa421c466a09cc8048aa0b700b7e300d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa421c466a09cc8048aa0b700b7e300d8">&#9670;&nbsp;</a></span>IsSpaceToBatchNdSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSpaceToBatchNdSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01426">1426</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;{</div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a534b28fd4b345bbc938d055ff5b8970f">ClSpaceToBatchNdWorkloadValidate</a>,</div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;                                   input,</div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_space_to_batch_nd_workload_8cpp_source.xhtml#l00023">armnn::ClSpaceToBatchNdWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a78c8c01a898f4bdcebddeda9f3d39a51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78c8c01a898f4bdcebddeda9f3d39a51">&#9670;&nbsp;</a></span>IsSpaceToDepthSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSpaceToDepthSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01438">1438</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;{</div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a4fa3292a277dde3b46be6a44b2de9713">ClSpaceToDepthWorkloadValidate</a>,</div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;                                   input,</div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_space_to_depth_workload_8cpp_source.xhtml#l00054">armnn::ClSpaceToDepthWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a159deb89f2f5dbc1a12b8d365162760f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a159deb89f2f5dbc1a12b8d365162760f">&#9670;&nbsp;</a></span>IsSplitterSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSplitterSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>outputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01450">1450</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;{</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTECL_ENABLED)</span></div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    <span class="comment">// Split along the last dimension, cannot use sub-tensors</span></div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;    <span class="comment">// as width and height of the sub-tensors do not match</span></div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    <span class="comment">// the width and height of the parent tensor</span></div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;    <span class="comment">// in case of input with more than 2D.</span></div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;    std::set&lt;unsigned int&gt; splitAxis = <a class="code" href="namespacearmnn.xhtml#a8cbabc875597b3bed0ccdc0adb289fde">ComputeSplitAxis</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, input.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>());</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &gt; 2 &amp;&amp; splitAxis.size() == 1 &amp;&amp;</div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;        *splitAxis.begin() == <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() - 1 )</div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;    {</div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;        <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a3ac8a60f837b19b20987e4fd238ce0cd">ClSplitterWorkloadValidate</a>,</div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;                                       input,</div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>,</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;                                       *splitAxis.begin());</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    }</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a> : <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>)</div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;    {</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;        <span class="keywordflow">if</span> (!input.IsTypeSpaceMatch(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>)) <span class="comment">// Cannot use sub-tensors if the types are not same space</span></div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;        {</div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a8c88a8a91827e9ccc3cf3ce6b14fcd17">SetValueChecked</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, <span class="stringliteral">&quot;Cl Splitter: Types and quantization parameters must match.&quot;</span>);</div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;        }</div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    }</div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_splitter_workload_8cpp_source.xhtml#l00031">armnn::ClSplitterWorkloadValidate()</a>, <a class="el" href="_arm_compute_utils_8hpp_source.xhtml#l00244">armnn::ComputeSplitAxis()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00432">TensorInfo::IsTypeSpaceMatch()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00488">ILayerSupport::outputs</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_layer_support_common_8hpp_source.xhtml#l00017">armnn::SetValueChecked()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a0d99d635906837ed6c582aba6ca6b178"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d99d635906837ed6c582aba6ca6b178">&#9670;&nbsp;</a></span>IsStackSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsStackSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01483">1483</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;{</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a776783e716aa3dd5975c72696d0b7abb">ClStackWorkloadValidate</a>,</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;                                   inputs,</div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_stack_workload_8cpp_source.xhtml#l00029">armnn::ClStackWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="aaaa749f75b5ca145f6ad41aa210dbd19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaaa749f75b5ca145f6ad41aa210dbd19">&#9670;&nbsp;</a></span>IsStridedSliceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsStridedSliceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01495">1495</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;{</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a157e0508f6d6d08e3ca4cf6c661242e6">ClStridedSliceWorkloadValidate</a>,</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;                                   input,</div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_strided_slice_workload_8cpp_source.xhtml#l00027">armnn::ClStridedSliceWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a8a520378fa336d155e23478456eb45fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a520378fa336d155e23478456eb45fe">&#9670;&nbsp;</a></span>IsSubtractionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSubtractionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01507">1507</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;{</div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#afa9933f1d9de469ffba5ba0fcee769f8">ClSubtractionValidate</a>,</div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;                                   input0,</div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_subtraction_workload_8cpp_source.xhtml#l00046">armnn::ClSubtractionValidate()</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="abfc649259b4e9d8bb830da564f7556c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfc649259b4e9d8bb830da564f7556c6">&#9670;&nbsp;</a></span>IsTransposeConvolution2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTransposeConvolution2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01520">1520</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;{</div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a719ea81939d6a25f8636b52c59165d66">ClTransposeConvolution2dWorkloadValidate</a>,</div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;                                   input,</div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>);</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00128">ILayerSupport::biases</a>, <a class="el" href="_cl_transpose_convolution2d_workload_8cpp_source.xhtml#l00026">armnn::ClTransposeConvolution2dWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00127">ILayerSupport::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="a5d8316c4fac71a34c0f95745a0cae0a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d8316c4fac71a34c0f95745a0cae0a8">&#9670;&nbsp;</a></span>IsTransposeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTransposeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01536">1536</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;{</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a1c3a39fbecb45be0bb15dd665c9be61d">ClTransposeWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_cl_transpose_workload_8cpp_source.xhtml#l00017">armnn::ClTransposeWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<a id="ae5cccf9f21abbc944a20817804cfb964"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5cccf9f21abbc944a20817804cfb964">&#9670;&nbsp;</a></span>IsUnidirectionalSequenceLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsUnidirectionalSequenceLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ae6c5f1b51bd32133c4dcc632045d6b58">UnidirectionalSequenceLstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l01544">1544</a> of file <a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;{</div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;    <a class="code" href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a924063ef859ec5f9a1466a42e7409c85">ClUnidirectionalSequenceLstmFloatWorkloadValidate</a>,</div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;                                   input,</div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>,</div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>,</div>
<div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>,</div>
<div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>,</div>
<div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>);</div>
<div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00287">ILayerSupport::cellStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00290">ILayerSupport::cellStateOut</a>, <a class="el" href="_cl_unidirectional_sequence_lstm_float_workload_8cpp_source.xhtml#l00508">armnn::ClUnidirectionalSequenceLstmFloatWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00148">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00286">ILayerSupport::outputStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00289">ILayerSupport::outputStateOut</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00293">ILayerSupport::paramsInfo</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_layer_support_8cpp_source.xhtml#l00184">ClLayerSupport::IsLayerSupported()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/backends/cl/<a class="el" href="_cl_layer_support_8hpp_source.xhtml">ClLayerSupport.hpp</a></li>
<li>src/backends/cl/<a class="el" href="_cl_layer_support_8cpp_source.xhtml">ClLayerSupport.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a8a520378fa336d155e23478456eb45fe"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a8a520378fa336d155e23478456eb45fe">armnn::ClLayerSupport::IsSubtractionSupported</a></div><div class="ttdeci">bool IsSubtractionSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01507">ClLayerSupport.cpp:1507</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a0591ff61ac269187164ea23713d33852"><div class="ttname"><a href="namespacearmnn.xhtml#a0591ff61ac269187164ea23713d33852">armnn::ClDivisionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDivisionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_division_workload_8cpp_source.xhtml#l00018">ClDivisionWorkload.cpp:18</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_layer_support_base_xhtml_a3ff6fcb839280edf41013d349df4f848"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml#a3ff6fcb839280edf41013d349df4f848">armnn::LayerSupportBase::IsMemImportSupported</a></div><div class="ttdeci">bool IsMemImportSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8cpp_source.xhtml#l00397">LayerSupportBase.cpp:397</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af3f6d0343d56ce88ce7958170ed05cb3"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af3f6d0343d56ce88ce7958170ed05cb3">armnn::LayerType::Floor</a></div><div class="ttdeci">@ Floor</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a4c42dfd9db4a47e470b5800bb11a8374"><div class="ttname"><a href="namespacearmnn.xhtml#a4c42dfd9db4a47e470b5800bb11a8374">armnn::ClReduceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClReduceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReduceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_reduce_workload_8cpp_source.xhtml#l00018">ClReduceWorkload.cpp:18</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_abc6f7e5fe77e5aed3f7842755dd34073"><div class="ttname"><a href="namespacearmnn.xhtml#abc6f7e5fe77e5aed3f7842755dd34073">armnn::ClSoftmaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSoftmaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SoftmaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_softmax_workload_8cpp_source.xhtml#l00017">ClSoftmaxWorkload.cpp:17</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ac680aa10b0a3768da4c23e691881b5ea"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ac680aa10b0a3768da4c23e691881b5ea">armnn::ClLayerSupport::IsCastSupported</a></div><div class="ttdeci">bool IsCastSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00760">ClLayerSupport.cpp:760</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::LayerType::MemCopy</a></div><div class="ttdeci">@ MemCopy</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::LayerType::Softmax</a></div><div class="ttdeci">@ Softmax</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c">armnn::LayerType::Pooling3d</a></div><div class="ttdeci">@ Pooling3d</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::LayerType::FullyConnected</a></div><div class="ttdeci">@ FullyConnected</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a5a01de4e3851a25f2df77897fb8f7083"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">armnn::ILayerSupport::outputStateIn</a></div><div class="ttdeci">const TensorInfo &amp; outputStateIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00286">ILayerSupport.hpp:286</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">armnn::LayerType::Transpose</a></div><div class="ttdeci">@ Transpose</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_af6465e7a85f4ef0013c7d7161cd07a4d"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#af6465e7a85f4ef0013c7d7161cd07a4d">armnn::ClLayerSupport::IsConcatSupported</a></div><div class="ttdeci">bool IsConcatSupported(const std::vector&lt; const TensorInfo * &gt; inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00796">ClLayerSupport.cpp:796</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a75045734c29d7d6635342c05adbc151b"><div class="ttname"><a href="namespacearmnn.xhtml#a75045734c29d7d6635342c05adbc151b">armnn::ClDequantizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDequantizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_dequantize_workload_8cpp_source.xhtml#l00022">ClDequantizeWorkload.cpp:22</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd">armnn::LayerType::ChannelShuffle</a></div><div class="ttdeci">@ ChannelShuffle</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_aca7a974c8803242968a8d6540275264a"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">armnn::ILayerSupport::paramsInfo</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo const LstmDescriptor const LstmInputParamsInfo &amp; paramsInfo</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00293">ILayerSupport.hpp:293</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a227dac81ac83d16f474881c2252d14cc"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a227dac81ac83d16f474881c2252d14cc">armnn::ClLayerSupport::IsSliceSupported</a></div><div class="ttdeci">bool IsSliceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SliceDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01410">ClLayerSupport.cpp:1410</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aef334cdb24000c330f4d2e5f1b384784"><div class="ttname"><a href="namespacearmnn.xhtml#aef334cdb24000c330f4d2e5f1b384784">armnn::ClL2NormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClL2NormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const L2NormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_l2_normalization_float_workload_8cpp_source.xhtml#l00017">ClL2NormalizationFloatWorkload.cpp:17</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_aef4e4cfc054c2fd0e9bd0947909ebe83"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#aef4e4cfc054c2fd0e9bd0947909ebe83">armnn::ClLayerSupport::IsPadSupported</a></div><div class="ttdeci">bool IsPadSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const PadDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01275">ClLayerSupport.cpp:1275</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a5d8316c4fac71a34c0f95745a0cae0a8"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a5d8316c4fac71a34c0f95745a0cae0a8">armnn::ClLayerSupport::IsTransposeSupported</a></div><div class="ttdeci">bool IsTransposeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01536">ClLayerSupport.cpp:1536</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_af5bb7a834a74983cbbc249785d0c392b"><div class="ttname"><a href="namespacearmnn.xhtml#af5bb7a834a74983cbbc249785d0c392b">armnn::ClReshapeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClReshapeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_reshape_workload_8cpp_source.xhtml#l00015">ClReshapeWorkload.cpp:15</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a3115a72a9cca31fb27b40da54a435dfa"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a3115a72a9cca31fb27b40da54a435dfa">armnn::ClLayerSupport::IsSoftmaxSupported</a></div><div class="ttdeci">bool IsSoftmaxSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01418">ClLayerSupport.cpp:1418</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">armnn::LayerType::ConvertFp32ToFp16</a></div><div class="ttdeci">@ ConvertFp32ToFp16</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">armnn::LayerType::L2Normalization</a></div><div class="ttdeci">@ L2Normalization</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55"><div class="ttname"><a href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">armnn::LogicalBinaryOperation::LogicalAnd</a></div><div class="ttdeci">@ LogicalAnd</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ab747f27ee2acb8409799d6ea1af0dff7"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ab747f27ee2acb8409799d6ea1af0dff7">armnn::ClLayerSupport::IsFillSupported</a></div><div class="ttdeci">bool IsFillSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const FillDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01053">ClLayerSupport.cpp:1053</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">armnn::LayerType::TransposeConvolution2d</a></div><div class="ttdeci">@ TransposeConvolution2d</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1391582cd6e145b67c98f3410667968e"><div class="ttname"><a href="namespacearmnn.xhtml#a1391582cd6e145b67c98f3410667968e">armnn::ClAbsWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClAbsWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_abs_workload_8cpp_source.xhtml#l00019">ClAbsWorkload.cpp:19</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a4f6f59c4e91c7c37d9a119d615093ed3"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">armnn::ILayerSupport::scratchBuffer</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo &amp; scratchBuffer</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00288">ILayerSupport.hpp:288</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a46f3ea056caa3126b91f3f70beea068c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a46f3ea056caa3126b91f3f70beea068c">armnn::LayerType::Map</a></div><div class="ttdeci">@ Map</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div><div class="ttdeci">@ Input</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a048a8ea8b1b39343a73ca7458024ea54"><div class="ttname"><a href="namespacearmnn.xhtml#a048a8ea8b1b39343a73ca7458024ea54">armnn::ClMeanValidate</a></div><div class="ttdeci">arm_compute::Status ClMeanValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const MeanDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_mean_workload_8cpp_source.xhtml#l00017">ClMeanWorkload.cpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">armnn::LayerType::Slice</a></div><div class="ttdeci">@ Slice</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="a_cl_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_cl_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00148">ClLayerSupport.cpp:148</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ae87476befb36d9cc4fb926337ba65b5d"><div class="ttname"><a href="namespacearmnn.xhtml#ae87476befb36d9cc4fb926337ba65b5d">armnn::ClBatchToSpaceNdWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClBatchToSpaceNdWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const BatchToSpaceNdDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_batch_to_space_nd_workload_8cpp_source.xhtml#l00020">ClBatchToSpaceNdWorkload.cpp:20</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a699bcffd93aff3022014b9efc9eaefd1"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a699bcffd93aff3022014b9efc9eaefd1">armnn::LayerType::ElementwiseBinary</a></div><div class="ttdeci">@ ElementwiseBinary</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">armnn::LayerType::Maximum</a></div><div class="ttdeci">@ Maximum</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">armnn::LayerType::Quantize</a></div><div class="ttdeci">@ Quantize</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a21911dfddb6d7787c7afcdc5fc25d4a7"><div class="ttname"><a href="namespacearmnn.xhtml#a21911dfddb6d7787c7afcdc5fc25d4a7">armnn::ClBatchMatMulValidate</a></div><div class="ttdeci">arm_compute::Status ClBatchMatMulValidate(const TensorInfo &amp;inputInfoX, const TensorInfo &amp;inputInfoY, const TensorInfo &amp;outputInfo, const BatchMatMulDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_batch_mat_mul_workload_8cpp_source.xhtml#l00023">ClBatchMatMulWorkload.cpp:23</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_acd148b61eab388a9313c61f4c7a96c4b"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#acd148b61eab388a9313c61f4c7a96c4b">armnn::ClLayerSupport::IsActivationSupported</a></div><div class="ttdeci">bool IsActivationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00674">ClLayerSupport.cpp:674</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a70c3043f5b6dd3091646fb2c1648a5f5"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a70c3043f5b6dd3091646fb2c1648a5f5">armnn::ClLayerSupport::IsPooling3dSupported</a></div><div class="ttdeci">bool IsPooling3dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling3dDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01303">ClLayerSupport.cpp:1303</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a56c4df05190f0f465e8501ae831af234"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a56c4df05190f0f465e8501ae831af234">armnn::ClLayerSupport::IsDepthwiseConvolutionSupported</a></div><div class="ttdeci">bool IsDepthwiseConvolutionSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00953">ClLayerSupport.cpp:953</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">armnn::LayerType::ArgMinMax</a></div><div class="ttdeci">@ ArgMinMax</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::LayerType::Subtraction</a></div><div class="ttdeci">@ Subtraction</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a7900acef495ac8033a08d3ed74f06970"><div class="ttname"><a href="namespacearmnn.xhtml#a7900acef495ac8033a08d3ed74f06970">armnn::ClLogicalAndWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLogicalAndWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_logical_and_workload_8cpp_source.xhtml#l00020">ClLogicalAndWorkload.cpp:20</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a57aee9aba2e2ad5d0bd9f65acd05b6e4"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a57aee9aba2e2ad5d0bd9f65acd05b6e4">armnn::ClLayerSupport::IsConstantSupported</a></div><div class="ttdeci">bool IsConstantSupported(const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00837">ClLayerSupport.cpp:837</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ae58d1f4437a779274037bc86efac9e26"><div class="ttname"><a href="namespacearmnn.xhtml#ae58d1f4437a779274037bc86efac9e26">armnn::ClPreluWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClPreluWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;alpha, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_prelu_workload_8cpp_source.xhtml#l00016">ClPreluWorkload.cpp:16</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ae5cccf9f21abbc944a20817804cfb964"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ae5cccf9f21abbc944a20817804cfb964">armnn::ClLayerSupport::IsUnidirectionalSequenceLstmSupported</a></div><div class="ttdeci">bool IsUnidirectionalSequenceLstmSupported(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const UnidirectionalSequenceLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp; &gt; reasonIfUnsupported) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01544">ClLayerSupport.cpp:1544</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">armnn::LayerType::SpaceToBatchNd</a></div><div class="ttdeci">@ SpaceToBatchNd</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::LayerType::Convolution2d</a></div><div class="ttdeci">@ Convolution2d</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">armnn::UnaryOperation::Exp</a></div><div class="ttdeci">@ Exp</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a8874961260f35da85229554f92e16ca9"><div class="ttname"><a href="namespacearmnn.xhtml#a8874961260f35da85229554f92e16ca9">armnn::ClFloorWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClFloorWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_floor_float_workload_8cpp_source.xhtml#l00014">ClFloorFloatWorkload.cpp:14</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">armnn::LayerType::Shape</a></div><div class="ttdeci">@ Shape</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a5b09834cc88bb4156e291c37bd2434ff"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">armnn::ILayerSupport::previousOutputIn</a></div><div class="ttdeci">const TensorInfo &amp; previousOutputIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00405">ILayerSupport.hpp:405</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a6d85d2806d0a90140832ad8113c1d350"><div class="ttname"><a href="namespacearmnn.xhtml#a6d85d2806d0a90140832ad8113c1d350">armnn::ClSliceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSliceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SliceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_slice_workload_8cpp_source.xhtml#l00018">ClSliceWorkload.cpp:18</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8aae77f3ad25595e35b327334d89410054"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8aae77f3ad25595e35b327334d89410054">armnn::UnaryOperation::Sqrt</a></div><div class="ttdeci">@ Sqrt</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a29bd65c1ec4ff9f75b636ec8e7b038be"><div class="ttname"><a href="namespacearmnn.xhtml#a29bd65c1ec4ff9f75b636ec8e7b038be">armnn::ClBatchNormalizationValidate</a></div><div class="ttdeci">arm_compute::Status ClBatchNormalizationValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_batch_normalization_float_workload_8cpp_source.xhtml#l00019">ClBatchNormalizationFloatWorkload.cpp:19</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a26c25df9e2271333ab4d4ef71db41dca"><div class="ttname"><a href="namespacearmnn.xhtml#a26c25df9e2271333ab4d4ef71db41dca">armnn::ClPermuteWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClPermuteWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const PermuteDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_permute_workload_8cpp_source.xhtml#l00017">ClPermuteWorkload.cpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">armnn::UnaryOperation::Neg</a></div><div class="ttdeci">@ Neg</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_adc7c6ed4375eb58ea8fa20d6ec704a27"><div class="ttname"><a href="namespacearmnn.xhtml#adc7c6ed4375eb58ea8fa20d6ec704a27">armnn::ClGatherNdWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClGatherNdWorkloadValidate(const TensorInfo &amp;paramsInfo, const TensorInfo &amp;indicesInfo, const TensorInfo &amp;outputInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_gather_nd_workload_8cpp_source.xhtml#l00016">ClGatherNdWorkload.cpp:16</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a895a8451e0799b95d65caf7ffe0a32d7"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">armnn::ILayerSupport::mean</a></div><div class="ttdeci">const TensorInfo const TensorInfo &amp; mean</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00063">ILayerSupport.hpp:63</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_layer_support_base_xhtml_a93a1d7a75c6802d3c4f7911f35e1cfa8"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml#a93a1d7a75c6802d3c4f7911f35e1cfa8">armnn::LayerSupportBase::IsMergeSupported</a></div><div class="ttdeci">bool IsMergeSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8cpp_source.xhtml#l00404">LayerSupportBase.cpp:404</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_af6f6476c5d1c4c85153020f5229ebd14"><div class="ttname"><a href="namespacearmnn.xhtml#af6f6476c5d1c4c85153020f5229ebd14">armnn::ClComparisonWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClComparisonWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ComparisonDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_comparison_workload_8cpp_source.xhtml#l00024">ClComparisonWorkload.cpp:24</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00">armnn::LayerType::Merge</a></div><div class="ttdeci">@ Merge</div></div>
<div class="ttc" id="aclassarmnn_1_1_layer_support_base_xhtml_a0d720441480c7b7af4285f628f07fbcd"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml#a0d720441480c7b7af4285f628f07fbcd">armnn::LayerSupportBase::IsShapeSupported</a></div><div class="ttdeci">bool IsShapeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8cpp_source.xhtml#l00551">LayerSupportBase.cpp:551</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">armnn::LayerType::Permute</a></div><div class="ttdeci">@ Permute</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a34e66b74a990db4b29ea4f904c69d7d9"><div class="ttname"><a href="namespacearmnn.xhtml#a34e66b74a990db4b29ea4f904c69d7d9">armnn::ClSqrtWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSqrtWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_sqrt_workload_8cpp_source.xhtml#l00019">ClSqrtWorkload.cpp:19</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a534b28fd4b345bbc938d055ff5b8970f"><div class="ttname"><a href="namespacearmnn.xhtml#a534b28fd4b345bbc938d055ff5b8970f">armnn::ClSpaceToBatchNdWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSpaceToBatchNdWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToBatchNdDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_space_to_batch_nd_workload_8cpp_source.xhtml#l00023">ClSpaceToBatchNdWorkload.cpp:23</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">armnn::LayerType::ConvertFp16ToFp32</a></div><div class="ttdeci">@ ConvertFp16ToFp32</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ae02f78731b0d046f4ed85fcf46c5d17d"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ae02f78731b0d046f4ed85fcf46c5d17d">armnn::ClLayerSupport::IsGatherSupported</a></div><div class="ttdeci">bool IsGatherSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const GatherDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01092">ClLayerSupport.cpp:1092</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">armnn::LayerType::QLstm</a></div><div class="ttdeci">@ QLstm</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">armnn::LayerType::Pad</a></div><div class="ttdeci">@ Pad</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a></div><div class="ttdeci">@ Addition</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3">armnn::LayerType::QuantizedLstm</a></div><div class="ttdeci">@ QuantizedLstm</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div><div class="ttdeci">@ QAsymmS8</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::LayerType::BatchNormalization</a></div><div class="ttdeci">@ BatchNormalization</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">armnn::LayerType::Reduce</a></div><div class="ttdeci">@ Reduce</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a533ad0fa8ff06bef939f4260a8183350"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a533ad0fa8ff06bef939f4260a8183350">armnn::ClLayerSupport::IsLstmSupported</a></div><div class="ttdeci">bool IsLstmSupported(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;scratchBuffer, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01188">ClLayerSupport.cpp:1188</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a37f6946bfb7a9c7d64881b7a2e13945f"><div class="ttname"><a href="namespacearmnn.xhtml#a37f6946bfb7a9c7d64881b7a2e13945f">armnn::ClConvertFp32ToFp16WorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConvertFp32ToFp16WorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00044">ClConvertFp32ToFp16Workload.cpp:44</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::LayerType::Division</a></div><div class="ttdeci">@ Division</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ace776a194a715c709136a9966ada1a48"><div class="ttname"><a href="namespacearmnn.xhtml#ace776a194a715c709136a9966ada1a48">armnn::ClLogicalNotWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLogicalNotWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_logical_not_workload_8cpp_source.xhtml#l00020">ClLogicalNotWorkload.cpp:20</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a629a1df03491e1bdc19dbd415fd2ad74"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a629a1df03491e1bdc19dbd415fd2ad74">armnn::ClLayerSupport::IsResizeSupported</a></div><div class="ttdeci">bool IsResizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01402">ClLayerSupport.cpp:1402</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a02e646180897aca9fcbc02d16efdd784"><div class="ttname"><a href="namespacearmnn.xhtml#a02e646180897aca9fcbc02d16efdd784">armnn::ClChannelShuffleValidate</a></div><div class="ttdeci">arm_compute::Status ClChannelShuffleValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ChannelShuffleDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_channel_shuffle_workload_8cpp_source.xhtml#l00020">ClChannelShuffleWorkload.cpp:20</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a159deb89f2f5dbc1a12b8d365162760f"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a159deb89f2f5dbc1a12b8d365162760f">armnn::ClLayerSupport::IsSplitterSupported</a></div><div class="ttdeci">bool IsSplitterSupported(const TensorInfo &amp;input, const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt;&gt; &amp;outputs, const ViewsDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01450">ClLayerSupport.cpp:1450</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1c3a39fbecb45be0bb15dd665c9be61d"><div class="ttname"><a href="namespacearmnn.xhtml#a1c3a39fbecb45be0bb15dd665c9be61d">armnn::ClTransposeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClTransposeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_transpose_workload_8cpp_source.xhtml#l00017">ClTransposeWorkload.cpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">armnn::LayerType::InstanceNormalization</a></div><div class="ttdeci">@ InstanceNormalization</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a3ac8a60f837b19b20987e4fd238ce0cd"><div class="ttname"><a href="namespacearmnn.xhtml#a3ac8a60f837b19b20987e4fd238ce0cd">armnn::ClSplitterWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSplitterWorkloadValidate(const TensorInfo &amp;input, const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt;&gt; &amp;outputs, unsigned int splitAxis)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_splitter_workload_8cpp_source.xhtml#l00031">ClSplitterWorkload.cpp:31</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a7071f5d6693d3014ddcb34c886ffc734"><div class="ttname"><a href="namespacearmnn.xhtml#a7071f5d6693d3014ddcb34c886ffc734">armnn::ClLogSoftmaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLogSoftmaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const LogSoftmaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_log_softmax_workload_8cpp_source.xhtml#l00017">ClLogSoftmaxWorkload.cpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a8c88a8a91827e9ccc3cf3ce6b14fcd17"><div class="ttname"><a href="namespacearmnn.xhtml#a8c88a8a91827e9ccc3cf3ce6b14fcd17">armnn::SetValueChecked</a></div><div class="ttdeci">void SetValueChecked(Optional&lt; T &amp; &gt; optionalRef, V &amp;&amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_common_8hpp_source.xhtml#l00017">LayerSupportCommon.hpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a553706c6338ffc52b0d916859f642587"><div class="ttname"><a href="namespacearmnn.xhtml#a553706c6338ffc52b0d916859f642587">armnn::ClMaximumWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClMaximumWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_maximum_workload_8cpp_source.xhtml#l00024">ClMaximumWorkload.cpp:24</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a8cbabc875597b3bed0ccdc0adb289fde"><div class="ttname"><a href="namespacearmnn.xhtml#a8cbabc875597b3bed0ccdc0adb289fde">armnn::ComputeSplitAxis</a></div><div class="ttdeci">std::set&lt; unsigned int &gt; ComputeSplitAxis(const armnn::SplitterDescriptor &amp;desc, const TensorShape &amp;input)</div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_utils_8hpp_source.xhtml#l00244">ArmComputeUtils.hpp:244</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aff9e3b78a938c14a4420ce6365b997fb"><div class="ttname"><a href="namespacearmnn.xhtml#aff9e3b78a938c14a4420ce6365b997fb">armnn::ClGatherWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClGatherWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;indices, const TensorInfo &amp;output, const GatherDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_gather_workload_8cpp_source.xhtml#l00015">ClGatherWorkload.cpp:15</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::LayerType::Activation</a></div><div class="ttdeci">@ Activation</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ac4f8557279754ed7b3f749d55b0e3047ae80155eceb940c89e2de63ad05868db2"><div class="ttname"><a href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047ae80155eceb940c89e2de63ad05868db2">armnn::BinaryOperation::Sub</a></div><div class="ttdeci">@ Sub</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a0784b1fdac2844c5d6f331ab6e9af547"><div class="ttname"><a href="namespacearmnn.xhtml#a0784b1fdac2844c5d6f331ab6e9af547">armnn::ClConcatWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConcatWorkloadValidate(const std::vector&lt; const TensorInfo * &gt; &amp;inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_concat_workload_8cpp_source.xhtml#l00027">ClConcatWorkload.cpp:27</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">armnn::LayerType::Normalization</a></div><div class="ttdeci">@ Normalization</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a06a955e172cf18898d966eab7383efa1"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a06a955e172cf18898d966eab7383efa1">armnn::ClLayerSupport::IsAdditionSupported</a></div><div class="ttdeci">bool IsAdditionSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00686">ClLayerSupport.cpp:686</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a9638165cb6c1baae3b2b5fd9f0f75201"><div class="ttname"><a href="namespacearmnn.xhtml#a9638165cb6c1baae3b2b5fd9f0f75201">armnn::ClMultiplicationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClMultiplicationWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_multiplication_workload_8cpp_source.xhtml#l00018">ClMultiplicationWorkload.cpp:18</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ae6c5f1b51bd32133c4dcc632045d6b58"><div class="ttname"><a href="namespacearmnn.xhtml#ae6c5f1b51bd32133c4dcc632045d6b58">armnn::UnidirectionalSequenceLstmDescriptor</a></div><div class="ttdeci">LstmDescriptor UnidirectionalSequenceLstmDescriptor</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01136">Descriptors.hpp:1136</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a719ea81939d6a25f8636b52c59165d66"><div class="ttname"><a href="namespacearmnn.xhtml#a719ea81939d6a25f8636b52c59165d66">armnn::ClTransposeConvolution2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClTransposeConvolution2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_transpose_convolution2d_workload_8cpp_source.xhtml#l00026">ClTransposeConvolution2dWorkload.cpp:26</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">armnn::LayerType::Comparison</a></div><div class="ttdeci">@ Comparison</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">armnn::LayerType::Stack</a></div><div class="ttdeci">@ Stack</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport.hpp:42</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_afa9933f1d9de469ffba5ba0fcee769f8"><div class="ttname"><a href="namespacearmnn.xhtml#afa9933f1d9de469ffba5ba0fcee769f8">armnn::ClSubtractionValidate</a></div><div class="ttdeci">arm_compute::Status ClSubtractionValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_subtraction_workload_8cpp_source.xhtml#l00046">ClSubtractionWorkload.cpp:46</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a9c1b478e30a1e8a4ecac874cf15f13d4"><div class="ttname"><a href="namespacearmnn.xhtml#a9c1b478e30a1e8a4ecac874cf15f13d4">armnn::ClQuantizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClQuantizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_quantize_workload_8cpp_source.xhtml#l00022">ClQuantizeWorkload.cpp:22</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">armnn::LayerType::Reshape</a></div><div class="ttdeci">@ Reshape</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_ad5e0e3fb8a59107ac3366028a057db12"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">armnn::ILayerSupport::previousCellStateIn</a></div><div class="ttdeci">const TensorInfo const TensorInfo &amp; previousCellStateIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00406">ILayerSupport.hpp:406</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">armnn::LayerType::Gather</a></div><div class="ttdeci">@ Gather</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::LayerType::DepthwiseConvolution2d</a></div><div class="ttdeci">@ DepthwiseConvolution2d</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247"><div class="ttname"><a href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">armnn::LogicalBinaryOperation::LogicalOr</a></div><div class="ttdeci">@ LogicalOr</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed">armnn::LayerType::Fill</a></div><div class="ttdeci">@ Fill</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a1362503332222029f9d73d40520f35bd"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a1362503332222029f9d73d40520f35bd">armnn::ClLayerSupport::IsChannelShuffleSupported</a></div><div class="ttdeci">bool IsChannelShuffleSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ChannelShuffleDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00770">ClLayerSupport.cpp:770</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">armnn::LayerType::Resize</a></div><div class="ttdeci">@ Resize</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a18c7eef8533ca0acbbe081cd1a1fec98"><div class="ttname"><a href="namespacearmnn.xhtml#a18c7eef8533ca0acbbe081cd1a1fec98">armnn::ClFullyConnectedWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClFullyConnectedWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const FullyConnectedDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fully_connected_workload_8cpp_source.xhtml#l00019">ClFullyConnectedWorkload.cpp:19</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a218e2ebb5babb8323688906b8997eafb"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">armnn::ILayerSupport::alpha</a></div><div class="ttdeci">const TensorInfo &amp; alpha</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00392">ILayerSupport.hpp:392</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a78c8c01a898f4bdcebddeda9f3d39a51"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a78c8c01a898f4bdcebddeda9f3d39a51">armnn::ClLayerSupport::IsSpaceToDepthSupported</a></div><div class="ttdeci">bool IsSpaceToDepthSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToDepthDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01438">ClLayerSupport.cpp:1438</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a46efae0191388fd33db4e95c5d79e2be"><div class="ttname"><a href="namespacearmnn.xhtml#a46efae0191388fd33db4e95c5d79e2be">armnn::ClConvertFp16ToFp32WorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConvertFp16ToFp32WorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00044">ClConvertFp16ToFp32Workload.cpp:44</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aa6670a2fcf9f365da69f3f3092dfa64b"><div class="ttname"><a href="namespacearmnn.xhtml#aa6670a2fcf9f365da69f3f3092dfa64b">armnn::ClDepthwiseConvolutionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDepthwiseConvolutionWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00026">ClDepthwiseConvolutionWorkload.cpp:26</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3">armnn::LayerType::Rank</a></div><div class="ttdeci">@ Rank</div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a866844299dc03c65ca41be5990bf19e8"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a866844299dc03c65ca41be5990bf19e8">armnn::ClLayerSupport::IsDequantizeSupported</a></div><div class="ttdeci">bool IsDequantizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00931">ClLayerSupport.cpp:931</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ac4f8557279754ed7b3f749d55b0e3047a62b6d55816cf737bfc6f42e60df1a3f2"><div class="ttname"><a href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047a62b6d55816cf737bfc6f42e60df1a3f2">armnn::BinaryOperation::Mul</a></div><div class="ttdeci">@ Mul</div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a22f377fc4e10dc1773a3f979061e85f1"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a22f377fc4e10dc1773a3f979061e85f1">armnn::TensorInfo::IsTypeSpaceMatch</a></div><div class="ttdeci">bool IsTypeSpaceMatch(const TensorInfo &amp;other) const</div><div class="ttdoc">Check that the types are the same and, if quantize, that the quantization parameters are the same.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00432">Tensor.cpp:432</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a5fb7fe07abfb2373103d842b47a24726"><div class="ttname"><a href="namespacearmnn.xhtml#a5fb7fe07abfb2373103d842b47a24726">armnn::ClQuantizedLstmWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClQuantizedLstmWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QuantizedLstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_quantized_lstm_workload_8cpp_source.xhtml#l00018">ClQuantizedLstmWorkload.cpp:18</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30">armnn::LayerType::LogicalBinary</a></div><div class="ttdeci">@ LogicalBinary</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a></div><div class="ttdeci">@ UnidirectionalSequenceLstm</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a85776d92e056832a524c6f2cf4741ced"><div class="ttname"><a href="namespacearmnn.xhtml#a85776d92e056832a524c6f2cf4741ced">armnn::ClPooling3dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClPooling3dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling3dDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_pooling3d_workload_8cpp_source.xhtml#l00018">ClPooling3dWorkload.cpp:18</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">armnn::LayerType::Pooling2d</a></div><div class="ttdeci">@ Pooling2d</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ab3624c723d9a0ec93722b19060b76115"><div class="ttname"><a href="namespacearmnn.xhtml#ab3624c723d9a0ec93722b19060b76115">armnn::ClDepthToSpaceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDepthToSpaceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthToSpaceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_depth_to_space_workload_8cpp_source.xhtml#l00022">ClDepthToSpaceWorkload.cpp:22</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a144c2e243a255715f309999077ed1792"><div class="ttname"><a href="namespacearmnn.xhtml#a144c2e243a255715f309999077ed1792">armnn::ClNormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClNormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const NormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_normalization_float_workload_8cpp_source.xhtml#l00019">ClNormalizationFloatWorkload.cpp:19</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a42ef3cee193102dc7755193579209cca"><div class="ttname"><a href="namespacearmnn.xhtml#a42ef3cee193102dc7755193579209cca">armnn::ClActivationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClActivationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_activation_workload_8cpp_source.xhtml#l00017">ClActivationWorkload.cpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a64806be3c31d35b75546da7c6b6b46d0"><div class="ttname"><a href="namespacearmnn.xhtml#a64806be3c31d35b75546da7c6b6b46d0">armnn::ClLogWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLogWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_log_workload_8cpp_source.xhtml#l00018">ClLogWorkload.cpp:18</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_ab82416560ced17268c6ba4443a3aac5e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">armnn::ILayerSupport::input1</a></div><div class="ttdeci">const TensorInfo &amp; input1</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport.hpp:48</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a9ee45bf624e40815207a2117f8e02b5d"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a9ee45bf624e40815207a2117f8e02b5d">armnn::ClLayerSupport::IsInstanceNormalizationSupported</a></div><div class="ttdeci">bool IsInstanceNormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const InstanceNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01124">ClLayerSupport.cpp:1124</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ac2078e9d66b086cf1225f0610b05a520"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ac2078e9d66b086cf1225f0610b05a520">armnn::ClLayerSupport::IsOutputSupported</a></div><div class="ttdeci">bool IsOutputSupported(const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01269">ClLayerSupport.cpp:1269</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3028cc42e40f9a1f4f8b35556d9715a4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3028cc42e40f9a1f4f8b35556d9715a4">armnn::LayerType::GatherNd</a></div><div class="ttdeci">@ GatherNd</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ab80423b306d8e0436b9a316922911d4d"><div class="ttname"><a href="namespacearmnn.xhtml#ab80423b306d8e0436b9a316922911d4d">armnn::ClArgMinMaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClArgMinMaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ArgMinMaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_arg_min_max_workload_8cpp_source.xhtml#l00031">ClArgMinMaxWorkload.cpp:31</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a84f23a37f7fd69269f072e114b7f0afb"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a84f23a37f7fd69269f072e114b7f0afb">armnn::ClLayerSupport::IsDepthToSpaceSupported</a></div><div class="ttdeci">bool IsDepthToSpaceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthToSpaceDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00941">ClLayerSupport.cpp:941</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_ab5cccb3233f5eff2119e8acc80cec209"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">armnn::ILayerSupport::gamma</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; gamma</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00066">ILayerSupport.hpp:66</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::LayerType::Minimum</a></div><div class="ttdeci">@ Minimum</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4acb17869fe51048b5a5c4c6106551a255"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acb17869fe51048b5a5c4c6106551a255">armnn::LayerType::Constant</a></div><div class="ttdeci">@ Constant</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a89391e63f7a679b023e6bd1798186db6"><div class="ttname"><a href="namespacearmnn.xhtml#a89391e63f7a679b023e6bd1798186db6">armnn::ClLogicalOrWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLogicalOrWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_logical_or_workload_8cpp_source.xhtml#l00020">ClLogicalOrWorkload.cpp:20</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a903053b422754682265fba0c03d94a52"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">armnn::ILayerSupport::var</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo &amp; var</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00064">ILayerSupport.hpp:64</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a7956a5f8822ae4071b4c5f133bf05a82"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a7956a5f8822ae4071b4c5f133bf05a82">armnn::ClLayerSupport::IsQuantizedLstmSupported</a></div><div class="ttdeci">bool IsQuantizedLstmSupported(const TensorInfo &amp;input, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QuantizedLstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01353">ClLayerSupport.cpp:1353</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">armnn::LayerType::Lstm</a></div><div class="ttdeci">@ Lstm</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ad0bca4c0de78df48fd6e63a3b8239f57"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ad0bca4c0de78df48fd6e63a3b8239f57">armnn::ClLayerSupport::IsGatherNdSupported</a></div><div class="ttdeci">bool IsGatherNdSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported) const</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01106">ClLayerSupport.cpp:1106</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ad17197c4dc4dd190610d6d205108255a"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ad17197c4dc4dd190610d6d205108255a">armnn::ClLayerSupport::IsL2NormalizationSupported</a></div><div class="ttdeci">bool IsL2NormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const L2NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01136">ClLayerSupport.cpp:1136</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a157e0508f6d6d08e3ca4cf6c661242e6"><div class="ttname"><a href="namespacearmnn.xhtml#a157e0508f6d6d08e3ca4cf6c661242e6">armnn::ClStridedSliceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClStridedSliceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const StridedSliceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_strided_slice_workload_8cpp_source.xhtml#l00027">ClStridedSliceWorkload.cpp:27</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">armnn::LayerType::ElementwiseUnary</a></div><div class="ttdeci">@ ElementwiseUnary</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a66a3a6c05b38e48508bbbb3f32023ab7"><div class="ttname"><a href="namespacearmnn.xhtml#a66a3a6c05b38e48508bbbb3f32023ab7">armnn::ClNegWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClNegWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_neg_workload_8cpp_source.xhtml#l00018">ClNegWorkload.cpp:18</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">armnn::LayerType::SpaceToDepth</a></div><div class="ttdeci">@ SpaceToDepth</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ac4f8557279754ed7b3f749d55b0e3047aa1d0ec6d56f8833a078b5a7ac4caf2d4"><div class="ttname"><a href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::BinaryOperation::Minimum</a></div><div class="ttdeci">@ Minimum</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a5d0dbfd77d3461ded89d3bf6a4eab62c"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a5d0dbfd77d3461ded89d3bf6a4eab62c">armnn::ClLayerSupport::IsInputSupported</a></div><div class="ttdeci">bool IsInputSupported(const TensorInfo &amp;input, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01118">ClLayerSupport.cpp:1118</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a83a99de40f6bffaa36f0333d04690b2a"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">armnn::ILayerSupport::beta</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; beta</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00065">ILayerSupport.hpp:65</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a4bd807090f4cb45bbfaa9c67e49532f5"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a4bd807090f4cb45bbfaa9c67e49532f5">armnn::ClLayerSupport::IsConvolution2dSupported</a></div><div class="ttdeci">bool IsConvolution2dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00865">ClLayerSupport.cpp:865</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a79d362f0c6e04d51807e0d81b5b05f3a"><div class="ttname"><a href="namespacearmnn.xhtml#a79d362f0c6e04d51807e0d81b5b05f3a">armnn::ClInstanceNormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClInstanceNormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const InstanceNormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_instance_normalization_workload_8cpp_source.xhtml#l00018">ClInstanceNormalizationWorkload.cpp:18</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2f5c2e8794174361f2308f4a0d3f9c73"><div class="ttname"><a href="namespacearmnn.xhtml#a2f5c2e8794174361f2308f4a0d3f9c73">armnn::ClConstantWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConstantWorkloadValidate(const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_constant_workload_8cpp_source.xhtml#l00018">ClConstantWorkload.cpp:18</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a336cc17b9c2cd4e7f667c7fcf5c9377e"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a336cc17b9c2cd4e7f667c7fcf5c9377e">armnn::ClLayerSupport::IsPermuteSupported</a></div><div class="ttdeci">bool IsPermuteSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const PermuteDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01287">ClLayerSupport.cpp:1287</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a8a21bb33f7f054ce7b48a8c7df9e6d4a"><div class="ttname"><a href="namespacearmnn.xhtml#a8a21bb33f7f054ce7b48a8c7df9e6d4a">armnn::ClPooling2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClPooling2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling2dDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_pooling2d_workload_8cpp_source.xhtml#l00018">ClPooling2dWorkload.cpp:18</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a631f893f44415523924016ed3f54a661"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">armnn::ILayerSupport::weights</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo &amp; weights</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00127">ILayerSupport.hpp:127</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ac4f8557279754ed7b3f749d55b0e3047a8321e79c278ec510f63675c040594892"><div class="ttname"><a href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047a8321e79c278ec510f63675c040594892">armnn::BinaryOperation::Maximum</a></div><div class="ttdeci">@ Maximum</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a1e34af023adeb7d5f484f8eb4b9826b6">armnn::UnaryOperation::Abs</a></div><div class="ttdeci">@ Abs</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">armnn::LayerType::StridedSlice</a></div><div class="ttdeci">@ StridedSlice</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_aec04a02758804219fb461623464a8e96"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">armnn::ILayerSupport::cellStateIn</a></div><div class="ttdeci">const TensorInfo const TensorInfo &amp; cellStateIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00287">ILayerSupport.hpp:287</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a48180ddd584de21589006d56a86d3410"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a48180ddd584de21589006d56a86d3410">armnn::LayerType::Unmap</a></div><div class="ttdeci">@ Unmap</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a7f82264f26183ae3c66390e33be14ec6"><div class="ttname"><a href="namespacearmnn.xhtml#a7f82264f26183ae3c66390e33be14ec6">armnn::ClCastValidate</a></div><div class="ttdeci">arm_compute::Status ClCastValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_cast_workload_8cpp_source.xhtml#l00020">ClCastWorkload.cpp:20</a></div></div>
<div class="ttc" id="a_deprecated_8hpp_xhtml_ab66a241a0ed3ee89c866e777b035d0ed"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_BEGIN</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00033">Deprecated.hpp:33</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a71cf13fc7f7aeac054919e0c6dcab52e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">armnn::ILayerSupport::biases</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo const Optional&lt; TensorInfo &gt; &amp; biases</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00128">ILayerSupport.hpp:128</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a924063ef859ec5f9a1466a42e7409c85"><div class="ttname"><a href="namespacearmnn.xhtml#a924063ef859ec5f9a1466a42e7409c85">armnn::ClUnidirectionalSequenceLstmFloatWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClUnidirectionalSequenceLstmFloatWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;output, const Optional&lt; TensorInfo &gt; &amp;hiddenStateOutput, const Optional&lt; TensorInfo &gt; &amp;cellStateOutput, const UnidirectionalSequenceLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_unidirectional_sequence_lstm_float_workload_8cpp_source.xhtml#l00508">ClUnidirectionalSequenceLstmFloatWorkload.cpp:508</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3d6c9ac08ada31c184094bbc67afe00d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3d6c9ac08ada31c184094bbc67afe00d">armnn::LayerType::Mean</a></div><div class="ttdeci">@ Mean</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a5f9272cdf0224364e1bb9b47efe4130a"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a5f9272cdf0224364e1bb9b47efe4130a">armnn::ClLayerSupport::IsConvertFp32ToFp16Supported</a></div><div class="ttdeci">bool IsConvertFp32ToFp16Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00855">ClLayerSupport.cpp:855</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a9831849c09391e90e50de46e2ee16403"><div class="ttname"><a href="namespacearmnn.xhtml#a9831849c09391e90e50de46e2ee16403">armnn::ClExpWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClExpWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_exp_workload_8cpp_source.xhtml#l00018">ClExpWorkload.cpp:18</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_abdf847462abb9af6a8a932589a0046bb"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#abdf847462abb9af6a8a932589a0046bb">armnn::ClLayerSupport::IsPreluSupported</a></div><div class="ttdeci">bool IsPreluSupported(const TensorInfo &amp;input, const TensorInfo &amp;alpha, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01311">ClLayerSupport.cpp:1311</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a95b187d3c6b7b46f4fbdc60be69fc02c"><div class="ttname"><a href="namespacearmnn.xhtml#a95b187d3c6b7b46f4fbdc60be69fc02c">armnn::ClResizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClResizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_resize_workload_8cpp_source.xhtml#l00022">ClResizeWorkload.cpp:22</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ae387b3587bcce82eb33623b300097a8c"><div class="ttname"><a href="namespacearmnn.xhtml#ae387b3587bcce82eb33623b300097a8c">armnn::ClConvolution3dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConvolution3dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution3dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, bool isFastMathEnabled, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_convolution3d_workload_8cpp_source.xhtml#l00023">ClConvolution3dWorkload.cpp:23</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ac4f8557279754ed7b3f749d55b0e3047aec211f7c20af43e742bf2570c3cb84f9"><div class="ttname"><a href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047aec211f7c20af43e742bf2570c3cb84f9">armnn::BinaryOperation::Add</a></div><div class="ttdeci">@ Add</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">armnn::LayerType::BatchToSpaceNd</a></div><div class="ttdeci">@ BatchToSpaceNd</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">armnn::LayerType::DepthToSpace</a></div><div class="ttdeci">@ DepthToSpace</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ab226977f41ce8cc1ee82c314949bb184"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ab226977f41ce8cc1ee82c314949bb184">armnn::ClLayerSupport::IsReshapeSupported</a></div><div class="ttdeci">bool IsReshapeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReshapeDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01393">ClLayerSupport.cpp:1393</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a311602de6b1e53b4feb3b8a37a433f44"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">armnn::ILayerSupport::outputs</a></div><div class="ttdeci">const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt; &gt; &amp; outputs</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00488">ILayerSupport.hpp:488</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ae054f879bca9ff680f7e42ae97cc5ed3"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ae054f879bca9ff680f7e42ae97cc5ed3">armnn::ClLayerSupport::IsFloorSupported</a></div><div class="ttdeci">bool IsFloorSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01065">ClLayerSupport.cpp:1065</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">armnn::UnaryOperation::LogicalNot</a></div><div class="ttdeci">@ LogicalNot</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">armnn::UnaryOperation::Sin</a></div><div class="ttdeci">@ Sin</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a450ddf4b4335cb37e07e3b0171b00096"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a450ddf4b4335cb37e07e3b0171b00096">armnn::ClLayerSupport::IsBatchNormalizationSupported</a></div><div class="ttdeci">bool IsBatchNormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00727">ClLayerSupport.cpp:727</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ab5960d08e30fb9542125688580c5f623"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ab5960d08e30fb9542125688580c5f623">armnn::ClLayerSupport::IsMultiplicationSupported</a></div><div class="ttdeci">bool IsMultiplicationSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01248">ClLayerSupport.cpp:1248</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aa4e89c644c511e255f6a7ecbd5d14686"><div class="ttname"><a href="namespacearmnn.xhtml#aa4e89c644c511e255f6a7ecbd5d14686">armnn::PolymorphicDowncast</a></div><div class="ttdeci">DestType PolymorphicDowncast(SourceType *value)</div><div class="ttdoc">Polymorphic downcast for build in pointers only.</div><div class="ttdef"><b>Definition:</b> <a href="_polymorphic_downcast_8hpp_source.xhtml#l00074">PolymorphicDowncast.hpp:74</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a7249912502bfa13dad25038e8fb9379b"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a7249912502bfa13dad25038e8fb9379b">armnn::ClLayerSupport::IsFullyConnectedSupported</a></div><div class="ttdeci">bool IsFullyConnectedSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const TensorInfo &amp;biases, const FullyConnectedDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01075">ClLayerSupport.cpp:1075</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">armnn::LayerType::Concat</a></div><div class="ttdeci">@ Concat</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ad9869f2a0cbe051fcc87fb1405d4091d"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ad9869f2a0cbe051fcc87fb1405d4091d">armnn::ClLayerSupport::IsMeanSupported</a></div><div class="ttdeci">bool IsMeanSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const MeanDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01224">ClLayerSupport.cpp:1224</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::UnaryOperation::Rsqrt</a></div><div class="ttdeci">@ Rsqrt</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a></div><div class="ttdeci">@ QSymmS16</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a95dac0c44b7e759694a97778bfbea954"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a95dac0c44b7e759694a97778bfbea954">armnn::ClLayerSupport::IsConvertFp16ToFp32Supported</a></div><div class="ttdeci">bool IsConvertFp16ToFp32Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00845">ClLayerSupport.cpp:845</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a7224fbfbc4c5a2b3710543e3f574171f"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a7224fbfbc4c5a2b3710543e3f574171f">armnn::ClLayerSupport::IsArgMinMaxSupported</a></div><div class="ttdeci">bool IsArgMinMaxSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ArgMinMaxDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00699">ClLayerSupport.cpp:699</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c">armnn::LayerType::Cast</a></div><div class="ttdeci">@ Cast</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a61cf0886d4c1a6e24c101a57ccb2ec31"><div class="ttname"><a href="namespacearmnn.xhtml#a61cf0886d4c1a6e24c101a57ccb2ec31">armnn::ClConvolution2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConvolution2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, bool isFastMathEnabled, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_convolution2d_workload_8cpp_source.xhtml#l00023">ClConvolution2dWorkload.cpp:23</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a4fa3292a277dde3b46be6a44b2de9713"><div class="ttname"><a href="namespacearmnn.xhtml#a4fa3292a277dde3b46be6a44b2de9713">armnn::ClSpaceToDepthWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSpaceToDepthWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToDepthDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_space_to_depth_workload_8cpp_source.xhtml#l00054">ClSpaceToDepthWorkload.cpp:54</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9882ff3cfed27d6161c20a305e7a3484"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9882ff3cfed27d6161c20a305e7a3484">armnn::LayerType::BatchMatMul</a></div><div class="ttdeci">@ BatchMatMul</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a776783e716aa3dd5975c72696d0b7abb"><div class="ttname"><a href="namespacearmnn.xhtml#a776783e716aa3dd5975c72696d0b7abb">armnn::ClStackWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClStackWorkloadValidate(const std::vector&lt; const TensorInfo * &gt; &amp;inputs, const TensorInfo &amp;output, const StackDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_stack_workload_8cpp_source.xhtml#l00029">ClStackWorkload.cpp:29</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_acaca6012c89942f00869d80c389d5e8a"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#acaca6012c89942f00869d80c389d5e8a">armnn::ClLayerSupport::IsLogicalBinarySupported</a></div><div class="ttdeci">bool IsLogicalBinarySupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const LogicalBinaryDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01148">ClLayerSupport.cpp:1148</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953">armnn::LayerType::Convolution3d</a></div><div class="ttdeci">@ Convolution3d</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">armnn::LayerType::Splitter</a></div><div class="ttdeci">@ Splitter</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a4e25e081529b7e99e5e454d916ed83fb"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a24fc3e8e29d3fa56cc6b2d81e48625d1"><div class="ttname"><a href="namespacearmnn.xhtml#a24fc3e8e29d3fa56cc6b2d81e48625d1">armnn::ClAdditionValidate</a></div><div class="ttdeci">arm_compute::Status ClAdditionValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_addition_workload_8cpp_source.xhtml#l00045">ClAdditionWorkload.cpp:45</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ac92df5c79bae4ccdc68d9d2045fa2110"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ac92df5c79bae4ccdc68d9d2045fa2110">armnn::ClLayerSupport::IsMaximumSupported</a></div><div class="ttdeci">bool IsMaximumSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01212">ClLayerSupport.cpp:1212</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">armnn::LayerType::LogSoftmax</a></div><div class="ttdeci">@ LogSoftmax</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a30cbe4bc4e20ae9b2aac66a108088919"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a30cbe4bc4e20ae9b2aac66a108088919">armnn::ClLayerSupport::IsBatchToSpaceNdSupported</a></div><div class="ttdeci">bool IsBatchToSpaceNdSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const BatchToSpaceNdDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00748">ClLayerSupport.cpp:748</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ad6262dc3169d8e809c272b31b25aaa6a"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ad6262dc3169d8e809c272b31b25aaa6a">armnn::ClLayerSupport::IsPooling2dSupported</a></div><div class="ttdeci">bool IsPooling2dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling2dDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01295">ClLayerSupport.cpp:1295</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_aa421c466a09cc8048aa0b700b7e300d8"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#aa421c466a09cc8048aa0b700b7e300d8">armnn::ClLayerSupport::IsSpaceToBatchNdSupported</a></div><div class="ttdeci">bool IsSpaceToBatchNdSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToBatchNdDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01426">ClLayerSupport.cpp:1426</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div><div class="ttdeci">@ Output</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_aedd6e4de83db27813fad327c29402033"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#aedd6e4de83db27813fad327c29402033">armnn::ClLayerSupport::IsNormalizationSupported</a></div><div class="ttdeci">bool IsNormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01261">ClLayerSupport.cpp:1261</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ae13d577a85b2b121febb2fe43899fd6c"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ae13d577a85b2b121febb2fe43899fd6c">armnn::ClLayerSupport::IsLogSoftmaxSupported</a></div><div class="ttdeci">bool IsLogSoftmaxSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const LogSoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01176">ClLayerSupport.cpp:1176</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a9fe9a6e2b79cc5c97e582f1fe0e1f514"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a9fe9a6e2b79cc5c97e582f1fe0e1f514">armnn::ClLayerSupport::IsReduceSupported</a></div><div class="ttdeci">bool IsReduceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReduceDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01381">ClLayerSupport.cpp:1381</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a0d99d635906837ed6c582aba6ca6b178"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a0d99d635906837ed6c582aba6ca6b178">armnn::ClLayerSupport::IsStackSupported</a></div><div class="ttdeci">bool IsStackSupported(const std::vector&lt; const TensorInfo * &gt; &amp;inputs, const TensorInfo &amp;output, const StackDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01483">ClLayerSupport.cpp:1483</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::LayerType::Multiplication</a></div><div class="ttdeci">@ Multiplication</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::LayerType::MemImport</a></div><div class="ttdeci">@ MemImport</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ac4f8557279754ed7b3f749d55b0e3047a43d11850893d2fe84a1e618121c1cc0a"><div class="ttname"><a href="namespacearmnn.xhtml#ac4f8557279754ed7b3f749d55b0e3047a43d11850893d2fe84a1e618121c1cc0a">armnn::BinaryOperation::Div</a></div><div class="ttdeci">@ Div</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ab4474f6170d9abd571f612b2dae34820"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ab4474f6170d9abd571f612b2dae34820">armnn::ClLayerSupport::IsQuantizeSupported</a></div><div class="ttdeci">bool IsQuantizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01371">ClLayerSupport.cpp:1371</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">armnn::LayerType::Prelu</a></div><div class="ttdeci">@ Prelu</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ac5cd8464c73415025cb8c8f6ada74e15"><div class="ttname"><a href="namespacearmnn.xhtml#ac5cd8464c73415025cb8c8f6ada74e15">armnn::ClSinWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClSinWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_sin_workload_8cpp_source.xhtml#l00018">ClSinWorkload.cpp:18</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a44eb2a514bddb31fe20f9e4f04159c9f"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">armnn::ILayerSupport::outputStateOut</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; outputStateOut</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00289">ILayerSupport.hpp:289</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_abe850b2a5be4ce4617cb51ceb5344756"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#abe850b2a5be4ce4617cb51ceb5344756">armnn::ClLayerSupport::IsConvolution3dSupported</a></div><div class="ttdeci">bool IsConvolution3dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution3dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00898">ClLayerSupport.cpp:898</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a3f6f9f0d3567ae04b49ea88727845900"><div class="ttname"><a href="namespacearmnn.xhtml#a3f6f9f0d3567ae04b49ea88727845900">armnn::ClRsqrtWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClRsqrtWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_rsqrt_workload_8cpp_source.xhtml#l00018">ClRsqrtWorkload.cpp:18</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a4eb9b602052470f8eadcfa7a63b17d54"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a4eb9b602052470f8eadcfa7a63b17d54">armnn::ClLayerSupport::IsMinimumSupported</a></div><div class="ttdeci">bool IsMinimumSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01236">ClLayerSupport.cpp:1236</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_afb14ff12be68a64356e8b3764032842d"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#afb14ff12be68a64356e8b3764032842d">armnn::ClLayerSupport::IsComparisonSupported</a></div><div class="ttdeci">bool IsComparisonSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;ouput, const ComparisonDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00782">ClLayerSupport.cpp:782</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a8c04c8e796a4fbec706df42ed9c27e4e"><div class="ttname"><a href="namespacearmnn.xhtml#a8c04c8e796a4fbec706df42ed9c27e4e">armnn::ClMinimumWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClMinimumWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_minimum_workload_8cpp_source.xhtml#l00024">ClMinimumWorkload.cpp:24</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_ae1ee2d524d4252bffc0ed67e75882952"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">armnn::ILayerSupport::cellStateOut</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; cellStateOut</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00290">ILayerSupport.hpp:290</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_adcf7b7d939bac1cfaeb333c7b3175bb8"><div class="ttname"><a href="namespacearmnn.xhtml#adcf7b7d939bac1cfaeb333c7b3175bb8">armnn::ClPadValidate</a></div><div class="ttdeci">arm_compute::Status ClPadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const PadDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_pad_workload_8cpp_source.xhtml#l00062">ClPadWorkload.cpp:62</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">armnn::LayerType::Dequantize</a></div><div class="ttdeci">@ Dequantize</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_aaaa749f75b5ca145f6ad41aa210dbd19"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#aaaa749f75b5ca145f6ad41aa210dbd19">armnn::ClLayerSupport::IsStridedSliceSupported</a></div><div class="ttdeci">bool IsStridedSliceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const StridedSliceDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01495">ClLayerSupport.cpp:1495</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a22cfc1d5f68bd32db0aa126e8fd9e615"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a22cfc1d5f68bd32db0aa126e8fd9e615">armnn::ClLayerSupport::IsBatchMatMulSupported</a></div><div class="ttdeci">bool IsBatchMatMulSupported(const TensorInfo &amp;inputX, const TensorInfo &amp;inputY, const TensorInfo &amp;output, const BatchMatMulDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00712">ClLayerSupport.cpp:712</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_layer_support_base_xhtml_ae12212269e173407398a6d4fef80f76f"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml#ae12212269e173407398a6d4fef80f76f">armnn::LayerSupportBase::IsMemCopySupported</a></div><div class="ttdeci">bool IsMemCopySupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8cpp_source.xhtml#l00390">LayerSupportBase.cpp:390</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a90ab88fe4c7aa9466c4653404a6b2213"><div class="ttname"><a href="namespacearmnn.xhtml#a90ab88fe4c7aa9466c4653404a6b2213">armnn::ClLstmFloatWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClLstmFloatWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;scratchBuffer, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_lstm_float_workload_8cpp_source.xhtml#l00244">ClLstmFloatWorkload.cpp:244</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">armnn::UnaryOperation::Log</a></div><div class="ttdeci">@ Log</div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_a052a3d7389be3a0993c9f9a508fa435e"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#a052a3d7389be3a0993c9f9a508fa435e">armnn::ClLayerSupport::IsQLstmSupported</a></div><div class="ttdeci">bool IsQLstmSupported(const TensorInfo &amp;input, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01319">ClLayerSupport.cpp:1319</a></div></div>
<div class="ttc" id="a_deprecated_8hpp_xhtml_ad762b11b48e5c1d1c1743f529485728a"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_END</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00034">Deprecated.hpp:34</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_abfc649259b4e9d8bb830da564f7556c6"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#abfc649259b4e9d8bb830da564f7556c6">armnn::ClLayerSupport::IsTransposeConvolution2dSupported</a></div><div class="ttdeci">bool IsTransposeConvolution2dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01520">ClLayerSupport.cpp:1520</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_ad4217d27bcb41e14cd023552004b21a3"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#ad4217d27bcb41e14cd023552004b21a3">armnn::ClLayerSupport::IsDivisionSupported</a></div><div class="ttdeci">bool IsDivisionSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l00988">ClLayerSupport.cpp:988</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_cl_layer_support_xhtml_aeec02af89681b711706472de7be52871"><div class="ttname"><a href="classarmnn_1_1_cl_layer_support.xhtml#aeec02af89681b711706472de7be52871">armnn::ClLayerSupport::IsElementwiseUnarySupported</a></div><div class="ttdeci">bool IsElementwiseUnarySupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ElementwiseUnaryDescriptor &amp;descriptor, Optional&lt; std::string &amp; &gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_layer_support_8cpp_source.xhtml#l01001">ClLayerSupport.cpp:1001</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a8cdb508cb0ebc06e39dc1661815d73b0"><div class="ttname"><a href="namespacearmnn.xhtml#a8cdb508cb0ebc06e39dc1661815d73b0">armnn::ClQLstmWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClQLstmWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;output, const QLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_q_lstm_workload_8cpp_source.xhtml#l00247">ClQLstmWorkload.cpp:247</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_cl_layer_support.xhtml">ClLayerSupport</a></li>
    <li class="footer">Generated on Thu May 18 2023 10:35:46 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
