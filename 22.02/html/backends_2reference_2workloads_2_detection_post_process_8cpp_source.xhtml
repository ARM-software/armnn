<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/reference/workloads/DetectionPostProcess.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DetectionPostProcess.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="backends_2reference_2workloads_2_detection_post_process_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_detection_post_process_8hpp.xhtml">DetectionPostProcess.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_assert_8hpp.xhtml">armnn/utility/Assert.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_numeric_cast_8hpp.xhtml">armnn/utility/NumericCast.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;numeric&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#ae8ed5c640761fb6744aec0ee16388417">   17</a></span>&#160;std::vector&lt;unsigned int&gt; <a class="code" href="namespacearmnn.xhtml#ae8ed5c640761fb6744aec0ee16388417">GenerateRangeK</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k)</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    std::vector&lt;unsigned int&gt; range(k);</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    std::iota(range.begin(), range.end(), 0);</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keywordflow">return</span> range;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;}</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a2748f45e58b1c612d473043f711d1434">   24</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a2748f45e58b1c612d473043f711d1434">TopKSort</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* indices, <span class="keyword">const</span> <span class="keywordtype">float</span>* values, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numElement)</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    std::partial_sort(indices, indices + k, indices + numElement,</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                      [&amp;values](<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j) { <span class="keywordflow">return</span> values[i] &gt; values[j]; });</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;}</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#abf6aad7bc221f8ad22b4d99cd020373b">   30</a></span>&#160;<span class="keywordtype">float</span> <a class="code" href="namespacearmnn.xhtml#abf6aad7bc221f8ad22b4d99cd020373b">IntersectionOverUnion</a>(<span class="keyword">const</span> <span class="keywordtype">float</span>* boxI, <span class="keyword">const</span> <span class="keywordtype">float</span>* boxJ)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="comment">// Box-corner format: ymin, xmin, ymax, xmax.</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yMin = 0;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xMin = 1;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yMax = 2;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xMax = 3;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordtype">float</span> areaI = (boxI[yMax] - boxI[yMin]) * (boxI[xMax] - boxI[xMin]);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordtype">float</span> areaJ = (boxJ[yMax] - boxJ[yMin]) * (boxJ[xMax] - boxJ[xMin]);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordtype">float</span> yMinIntersection = std::max(boxI[yMin], boxJ[yMin]);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordtype">float</span> xMinIntersection = std::max(boxI[xMin], boxJ[xMin]);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordtype">float</span> yMaxIntersection = std::min(boxI[yMax], boxJ[yMax]);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordtype">float</span> xMaxIntersection = std::min(boxI[xMax], boxJ[xMax]);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordtype">float</span> areaIntersection = std::max(yMaxIntersection - yMinIntersection, 0.0f) *</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                std::max(xMaxIntersection - xMinIntersection, 0.0f);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordtype">float</span> areaUnion = areaI + areaJ - areaIntersection;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">return</span> areaIntersection / areaUnion;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#ac8c641d4a69c9a85c487cfbc7ea4d73c">   49</a></span>&#160;std::vector&lt;unsigned int&gt; <a class="code" href="namespacearmnn.xhtml#ac8c641d4a69c9a85c487cfbc7ea4d73c">NonMaxSuppression</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numBoxes,</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                                            <span class="keyword">const</span> std::vector&lt;float&gt;&amp; boxCorners,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                                            <span class="keyword">const</span> std::vector&lt;float&gt;&amp; scores,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                                            <span class="keywordtype">float</span> nmsScoreThreshold,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                                            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxDetection,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                                            <span class="keywordtype">float</span> nmsIouThreshold)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// Select boxes that have scores above a given threshold.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    std::vector&lt;float&gt; scoresAboveThreshold;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    std::vector&lt;unsigned int&gt; indicesAboveThreshold;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numBoxes; ++i)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">if</span> (scores[i] &gt;= nmsScoreThreshold)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            scoresAboveThreshold.push_back(scores[i]);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            indicesAboveThreshold.push_back(i);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// Sort the indices based on scores.</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numAboveThreshold = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(scoresAboveThreshold.size());</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    std::vector&lt;unsigned int&gt; sortedIndices = <a class="code" href="namespacearmnn.xhtml#ae8ed5c640761fb6744aec0ee16388417">GenerateRangeK</a>(numAboveThreshold);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a2748f45e58b1c612d473043f711d1434">TopKSort</a>(numAboveThreshold, sortedIndices.data(), scoresAboveThreshold.data(), numAboveThreshold);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// Number of output cannot be more than max detections specified in the option.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numOutput = std::min(maxDetection, numAboveThreshold);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    std::vector&lt;unsigned int&gt; outputIndices;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    std::vector&lt;bool&gt; visited(numAboveThreshold, <span class="keyword">false</span>);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="comment">// Prune out the boxes with high intersection over union by keeping the box with higher score.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numAboveThreshold; ++i)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">if</span> (outputIndices.size() &gt;= numOutput)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">if</span> (!visited[sortedIndices[i]])</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            outputIndices.push_back(indicesAboveThreshold[sortedIndices[i]]);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = i + 1; j &lt; numAboveThreshold; ++j)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> iIndex = indicesAboveThreshold[sortedIndices[i]] * 4;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> jIndex = indicesAboveThreshold[sortedIndices[j]] * 4;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#abf6aad7bc221f8ad22b4d99cd020373b">IntersectionOverUnion</a>(&amp;boxCorners[iIndex], &amp;boxCorners[jIndex]) &gt; nmsIouThreshold)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    visited[sortedIndices[j]] = <span class="keyword">true</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span> outputIndices;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#ae8dcbb74cf0c855724f12833a55a5684">  102</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#ae8dcbb74cf0c855724f12833a55a5684">AllocateOutputData</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numOutput,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numSelected,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                        <span class="keyword">const</span> std::vector&lt;float&gt;&amp; boxCorners,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                        <span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; outputIndices,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                        <span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; selectedBoxes,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                        <span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; selectedClasses,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                        <span class="keyword">const</span> std::vector&lt;float&gt;&amp; selectedScores,</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                        <span class="keywordtype">float</span>* detectionBoxes,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                        <span class="keywordtype">float</span>* detectionScores,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        <span class="keywordtype">float</span>* detectionClasses,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                        <span class="keywordtype">float</span>* numDetections)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numOutput; ++i)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> boxIndex = i * 4;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">if</span> (i &lt; numSelected)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> boxCornorIndex = selectedBoxes[outputIndices[i]] * 4;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                detectionScores[i] = selectedScores[outputIndices[i]];</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                detectionClasses[i] = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">float</span>&gt;(selectedClasses[outputIndices[i]]);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                detectionBoxes[boxIndex] = boxCorners[boxCornorIndex];</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                detectionBoxes[boxIndex + 1] = boxCorners[boxCornorIndex + 1];</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                detectionBoxes[boxIndex + 2] = boxCorners[boxCornorIndex + 2];</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                detectionBoxes[boxIndex + 3] = boxCorners[boxCornorIndex + 3];</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                detectionScores[i] = 0.0f;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                detectionClasses[i] = 0.0f;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                detectionBoxes[boxIndex] = 0.0f;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                detectionBoxes[boxIndex + 1] = 0.0f;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                detectionBoxes[boxIndex + 2] = 0.0f;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                detectionBoxes[boxIndex + 3] = 0.0f;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        numDetections[0] = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">float</span>&gt;(numSelected);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#ae76ce23fa9fc18e56448d52b37dd3f32">  140</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#ae76ce23fa9fc18e56448d52b37dd3f32">DetectionPostProcess</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; boxEncodingsInfo,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; scoresInfo,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; anchorsInfo,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; detectionBoxesInfo,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; detectionClassesInfo,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; detectionScoresInfo,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; numDetectionsInfo,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a>&amp; desc,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                          <a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&amp; boxEncodings,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                          <a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&amp; scores,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                          <a class="code" href="classarmnn_1_1_decoder.xhtml">Decoder&lt;float&gt;</a>&amp; anchors,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                          <span class="keywordtype">float</span>* detectionBoxes,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                          <span class="keywordtype">float</span>* detectionClasses,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                          <span class="keywordtype">float</span>* detectionScores,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                          <span class="keywordtype">float</span>* numDetections)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(anchorsInfo, detectionClassesInfo, detectionScoresInfo, numDetectionsInfo);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// Transform center-size format which is (ycenter, xcenter, height, width) to box-corner format,</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// which represents the lower left corner and the upper right corner (ymin, xmin, ymax, xmax)</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    std::vector&lt;float&gt; boxCorners(boxEncodingsInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>());</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numBoxes  = boxEncodingsInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[1];</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numScores = scoresInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>();</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numBoxes; ++i)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="comment">// Y</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordtype">float</span> boxEncodingY = boxEncodings.<a class="code" href="classarmnn_1_1_decoder.xhtml#ac729108381e2340bea12877971713ecb">Get</a>();</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordtype">float</span> anchorY      = anchors.<a class="code" href="classarmnn_1_1_decoder.xhtml#ac729108381e2340bea12877971713ecb">Get</a>();</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        ++boxEncodings;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        ++anchors;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="comment">// X</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordtype">float</span> boxEncodingX = boxEncodings.<a class="code" href="classarmnn_1_1_decoder.xhtml#ac729108381e2340bea12877971713ecb">Get</a>();</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordtype">float</span> anchorX      = anchors.<a class="code" href="classarmnn_1_1_decoder.xhtml#ac729108381e2340bea12877971713ecb">Get</a>();</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        ++boxEncodings;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        ++anchors;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="comment">// H</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordtype">float</span> boxEncodingH = boxEncodings.<a class="code" href="classarmnn_1_1_decoder.xhtml#ac729108381e2340bea12877971713ecb">Get</a>();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordtype">float</span> anchorH      = anchors.<a class="code" href="classarmnn_1_1_decoder.xhtml#ac729108381e2340bea12877971713ecb">Get</a>();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        ++boxEncodings;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        ++anchors;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="comment">// W</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordtype">float</span> boxEncodingW = boxEncodings.<a class="code" href="classarmnn_1_1_decoder.xhtml#ac729108381e2340bea12877971713ecb">Get</a>();</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordtype">float</span> anchorW      = anchors.<a class="code" href="classarmnn_1_1_decoder.xhtml#ac729108381e2340bea12877971713ecb">Get</a>();</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        ++boxEncodings;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        ++anchors;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordtype">float</span> yCentre = boxEncodingY / desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7a2156ec7d9c012ce00bbcc6afcb9028">m_ScaleY</a> * anchorH + anchorY;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordtype">float</span> xCentre = boxEncodingX / desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae64523937ea910030ad66fee6fddd51f">m_ScaleX</a> * anchorW + anchorX;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordtype">float</span> halfH = 0.5f * expf(boxEncodingH / desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#aa61510cbd529870182e918ac6e8b9d72">m_ScaleH</a>) * anchorH;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordtype">float</span> halfW = 0.5f * expf(boxEncodingW / desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ab509802c659de19929f18bad14a35c58">m_ScaleW</a>) * anchorW;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> indexY = i * 4;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> indexX = indexY + 1;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> indexH = indexX + 1;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> indexW = indexH + 1;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="comment">// ymin</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        boxCorners[indexY] = yCentre - halfH;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="comment">// xmin</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        boxCorners[indexX] = xCentre - halfW;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="comment">// ymax</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        boxCorners[indexH] = yCentre + halfH;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="comment">// xmax</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        boxCorners[indexW] = xCentre + halfW;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(boxCorners[indexY] &lt; boxCorners[indexH]);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(boxCorners[indexX] &lt; boxCorners[indexW]);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numClassesWithBg = desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">m_NumClasses</a> + 1;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="comment">// Decode scores</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    std::vector&lt;float&gt; decodedScores;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    decodedScores.reserve(numScores);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0u; i &lt; numScores; ++i)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        decodedScores.emplace_back(scores.<a class="code" href="classarmnn_1_1_decoder.xhtml#ac729108381e2340bea12877971713ecb">Get</a>());</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        ++scores;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="comment">// Perform Non Max Suppression.</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">if</span> (desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">m_UseRegularNms</a>)</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="comment">// Perform Regular NMS.</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="comment">// For each class, perform NMS and select max detection numbers of the highest score across all classes.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        std::vector&lt;float&gt; classScores(numBoxes);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        std::vector&lt;unsigned int&gt; selectedBoxesAfterNms;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        selectedBoxesAfterNms.reserve(numBoxes);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        std::vector&lt;float&gt; selectedScoresAfterNms;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        selectedBoxesAfterNms.reserve(numScores);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        std::vector&lt;unsigned int&gt; selectedClasses;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">m_NumClasses</a>; ++c)</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="comment">// For each boxes, get scores of the boxes for the class c.</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numBoxes; ++i)</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                classScores[i] = decodedScores[i * numClassesWithBg + c + 1];</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            std::vector&lt;unsigned int&gt; selectedIndices = <a class="code" href="namespacearmnn.xhtml#ac8c641d4a69c9a85c487cfbc7ea4d73c">NonMaxSuppression</a>(numBoxes,</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                                                          boxCorners,</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                                                          classScores,</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                                                          desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a4392dd6b4862cc9cf95ae8f1001ba592">m_NmsScoreThreshold</a>,</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                                                          desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7e2f87544b8bc7e497e1dec8d3ca4055">m_DetectionsPerClass</a>,</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                                                                          desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a53c8a7f33a40e1e240256bcfcf41b101">m_NmsIouThreshold</a>);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; selectedIndices.size(); ++i)</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                selectedBoxesAfterNms.push_back(selectedIndices[i]);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                selectedScoresAfterNms.push_back(classScores[selectedIndices[i]]);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                selectedClasses.push_back(c);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="comment">// Select max detection numbers of the highest score across all classes</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numSelected = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(selectedBoxesAfterNms.size());</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numOutput = std::min(desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">m_MaxDetections</a>,  numSelected);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="comment">// Sort the max scores among the selected indices.</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        std::vector&lt;unsigned int&gt; outputIndices = <a class="code" href="namespacearmnn.xhtml#ae8ed5c640761fb6744aec0ee16388417">GenerateRangeK</a>(numSelected);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a2748f45e58b1c612d473043f711d1434">TopKSort</a>(numOutput, outputIndices.data(), selectedScoresAfterNms.data(), numSelected);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ae8dcbb74cf0c855724f12833a55a5684">AllocateOutputData</a>(detectionBoxesInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[1], numOutput, boxCorners, outputIndices,</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                           selectedBoxesAfterNms, selectedClasses, selectedScoresAfterNms,</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                           detectionBoxes, detectionScores, detectionClasses, numDetections);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    {</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="comment">// Perform Fast NMS.</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="comment">// Select max scores of boxes and perform NMS on max scores,</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="comment">// select max detection numbers of the highest score</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numClassesPerBox = std::min(desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a9ae2c9796692ebeafe19a4d3f09c8ea8">m_MaxClassesPerDetection</a>, desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">m_NumClasses</a>);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        std::vector&lt;float&gt; maxScores;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        std::vector&lt;unsigned int&gt;boxIndices;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        std::vector&lt;unsigned int&gt;maxScoreClasses;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> box = 0; box &lt; numBoxes; ++box)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> scoreIndex = box * numClassesWithBg + 1;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            <span class="comment">// Get the max scores of the box.</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            std::vector&lt;unsigned int&gt; maxScoreIndices = <a class="code" href="namespacearmnn.xhtml#ae8ed5c640761fb6744aec0ee16388417">GenerateRangeK</a>(desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">m_NumClasses</a>);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a2748f45e58b1c612d473043f711d1434">TopKSort</a>(numClassesPerBox, maxScoreIndices.data(),</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                decodedScores.data() + scoreIndex, desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">m_NumClasses</a>);</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numClassesPerBox; ++i)</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            {</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                maxScores.push_back(decodedScores[scoreIndex + maxScoreIndices[i]]);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                maxScoreClasses.push_back(maxScoreIndices[i]);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                boxIndices.push_back(box);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="comment">// Perform NMS on max scores</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        std::vector&lt;unsigned int&gt; selectedIndices = <a class="code" href="namespacearmnn.xhtml#ac8c641d4a69c9a85c487cfbc7ea4d73c">NonMaxSuppression</a>(numBoxes, boxCorners, maxScores,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                                                      desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a4392dd6b4862cc9cf95ae8f1001ba592">m_NmsScoreThreshold</a>,</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                                                      desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">m_MaxDetections</a>,</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                                                      desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a53c8a7f33a40e1e240256bcfcf41b101">m_NmsIouThreshold</a>);</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numSelected = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(selectedIndices.size());</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numOutput = std::min(desc.<a class="code" href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">m_MaxDetections</a>,  numSelected);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ae8dcbb74cf0c855724f12833a55a5684">AllocateOutputData</a>(detectionBoxesInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[1], numOutput, boxCorners, selectedIndices,</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                           boxIndices, maxScoreClasses, maxScores,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                           detectionBoxes, detectionScores, detectionClasses, numDetections);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;}</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ab509802c659de19929f18bad14a35c58"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ab509802c659de19929f18bad14a35c58">armnn::DetectionPostProcessDescriptor::m_ScaleW</a></div><div class="ttdeci">float m_ScaleW</div><div class="ttdoc">Center size encoding scale weight. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00723">Descriptors.hpp:723</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abf6aad7bc221f8ad22b4d99cd020373b"><div class="ttname"><a href="namespacearmnn.xhtml#abf6aad7bc221f8ad22b4d99cd020373b">armnn::IntersectionOverUnion</a></div><div class="ttdeci">float IntersectionOverUnion(const float *boxI, const float *boxJ)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00030">DetectionPostProcess.cpp:30</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ae64523937ea910030ad66fee6fddd51f"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae64523937ea910030ad66fee6fddd51f">armnn::DetectionPostProcessDescriptor::m_ScaleX</a></div><div class="ttdeci">float m_ScaleX</div><div class="ttdoc">Center size encoding scale x. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00719">Descriptors.hpp:719</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7e2f87544b8bc7e497e1dec8d3ca4055"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7e2f87544b8bc7e497e1dec8d3ca4055">armnn::DetectionPostProcessDescriptor::m_DetectionsPerClass</a></div><div class="ttdeci">uint32_t m_DetectionsPerClass</div><div class="ttdoc">Detections per classes, used in Regular NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00709">Descriptors.hpp:709</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae8ed5c640761fb6744aec0ee16388417"><div class="ttname"><a href="namespacearmnn.xhtml#ae8ed5c640761fb6744aec0ee16388417">armnn::GenerateRangeK</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; GenerateRangeK(unsigned int k)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00017">DetectionPostProcess.cpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="_numeric_cast_8hpp_xhtml"><div class="ttname"><a href="_numeric_cast_8hpp.xhtml">NumericCast.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a9ae2c9796692ebeafe19a4d3f09c8ea8"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a9ae2c9796692ebeafe19a4d3f09c8ea8">armnn::DetectionPostProcessDescriptor::m_MaxClassesPerDetection</a></div><div class="ttdeci">uint32_t m_MaxClassesPerDetection</div><div class="ttdoc">Maximum numbers of classes per detection, used in Fast NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00707">Descriptors.hpp:707</a></div></div>
<div class="ttc" id="classarmnn_1_1_decoder_xhtml_ac729108381e2340bea12877971713ecb"><div class="ttname"><a href="classarmnn_1_1_decoder.xhtml#ac729108381e2340bea12877971713ecb">armnn::Decoder::Get</a></div><div class="ttdeci">virtual IType Get() const =0</div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_ae72089bcab60ac175557f4241b16a014"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#ae72089bcab60ac175557f4241b16a014">armnn::DetectionPostProcessDescriptor::m_MaxDetections</a></div><div class="ttdeci">uint32_t m_MaxDetections</div><div class="ttdoc">Maximum numbers of detections. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00705">Descriptors.hpp:705</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae76ce23fa9fc18e56448d52b37dd3f32"><div class="ttname"><a href="namespacearmnn.xhtml#ae76ce23fa9fc18e56448d52b37dd3f32">armnn::DetectionPostProcess</a></div><div class="ttdeci">void DetectionPostProcess(const TensorInfo &amp;boxEncodingsInfo, const TensorInfo &amp;scoresInfo, const TensorInfo &amp;anchorsInfo, const TensorInfo &amp;detectionBoxesInfo, const TensorInfo &amp;detectionClassesInfo, const TensorInfo &amp;detectionScoresInfo, const TensorInfo &amp;numDetectionsInfo, const DetectionPostProcessDescriptor &amp;desc, Decoder&lt; float &gt; &amp;boxEncodings, Decoder&lt; float &gt; &amp;scores, Decoder&lt; float &gt; &amp;anchors, float *detectionBoxes, float *detectionClasses, float *detectionScores, float *numDetections)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00140">DetectionPostProcess.cpp:140</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a53c8a7f33a40e1e240256bcfcf41b101"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a53c8a7f33a40e1e240256bcfcf41b101">armnn::DetectionPostProcessDescriptor::m_NmsIouThreshold</a></div><div class="ttdeci">float m_NmsIouThreshold</div><div class="ttdoc">Intersection over union threshold. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00713">Descriptors.hpp:713</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2748f45e58b1c612d473043f711d1434"><div class="ttname"><a href="namespacearmnn.xhtml#a2748f45e58b1c612d473043f711d1434">armnn::TopKSort</a></div><div class="ttdeci">void TopKSort(unsigned int k, unsigned int *indices, const float *values, unsigned int numElement)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00024">DetectionPostProcess.cpp:24</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a3a04b0ccee4bb2f21721ee5045e83df4"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a3a04b0ccee4bb2f21721ee5045e83df4">armnn::DetectionPostProcessDescriptor::m_NumClasses</a></div><div class="ttdeci">uint32_t m_NumClasses</div><div class="ttdoc">Number of classes. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00715">Descriptors.hpp:715</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7ed9bc7c26df67d274d5dd4cd83adf0f"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7ed9bc7c26df67d274d5dd4cd83adf0f">armnn::DetectionPostProcessDescriptor::m_UseRegularNms</a></div><div class="ttdeci">bool m_UseRegularNms</div><div class="ttdoc">Use Regular NMS. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00717">Descriptors.hpp:717</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_aa61510cbd529870182e918ac6e8b9d72"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#aa61510cbd529870182e918ac6e8b9d72">armnn::DetectionPostProcessDescriptor::m_ScaleH</a></div><div class="ttdeci">float m_ScaleH</div><div class="ttdoc">Center size encoding scale height. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00725">Descriptors.hpp:725</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae8dcbb74cf0c855724f12833a55a5684"><div class="ttname"><a href="namespacearmnn.xhtml#ae8dcbb74cf0c855724f12833a55a5684">armnn::AllocateOutputData</a></div><div class="ttdeci">void AllocateOutputData(unsigned int numOutput, unsigned int numSelected, const std::vector&lt; float &gt; &amp;boxCorners, const std::vector&lt; unsigned int &gt; &amp;outputIndices, const std::vector&lt; unsigned int &gt; &amp;selectedBoxes, const std::vector&lt; unsigned int &gt; &amp;selectedClasses, const std::vector&lt; float &gt; &amp;selectedScores, float *detectionBoxes, float *detectionScores, float *detectionClasses, float *numDetections)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00102">DetectionPostProcess.cpp:102</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml"><div class="ttname"><a href="_assert_8hpp.xhtml">Assert.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac8c641d4a69c9a85c487cfbc7ea4d73c"><div class="ttname"><a href="namespacearmnn.xhtml#ac8c641d4a69c9a85c487cfbc7ea4d73c">armnn::NonMaxSuppression</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; NonMaxSuppression(unsigned int numBoxes, const std::vector&lt; float &gt; &amp;boxCorners, const std::vector&lt; float &gt; &amp;scores, float nmsScoreThreshold, unsigned int maxDetection, float nmsIouThreshold)</div><div class="ttdef"><b>Definition:</b> <a href="backends_2reference_2workloads_2_detection_post_process_8cpp_source.xhtml#l00049">DetectionPostProcess.cpp:49</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a7a2156ec7d9c012ce00bbcc6afcb9028"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a7a2156ec7d9c012ce00bbcc6afcb9028">armnn::DetectionPostProcessDescriptor::m_ScaleY</a></div><div class="ttdeci">float m_ScaleY</div><div class="ttdoc">Center size encoding scale y. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00721">Descriptors.hpp:721</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml_a4392dd6b4862cc9cf95ae8f1001ba592"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml#a4392dd6b4862cc9cf95ae8f1001ba592">armnn::DetectionPostProcessDescriptor::m_NmsScoreThreshold</a></div><div class="ttdeci">float m_NmsScoreThreshold</div><div class="ttdoc">NMS score threshold. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00711">Descriptors.hpp:711</a></div></div>
<div class="ttc" id="_detection_post_process_8hpp_xhtml"><div class="ttname"><a href="_detection_post_process_8hpp.xhtml">DetectionPostProcess.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_detection_post_process_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_detection_post_process_descriptor.xhtml">armnn::DetectionPostProcessDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00673">Descriptors.hpp:673</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00196">Tensor.hpp:196</a></div></div>
<div class="ttc" id="classarmnn_1_1_decoder_xhtml"><div class="ttname"><a href="classarmnn_1_1_decoder.xhtml">armnn::Decoder&lt; float &gt;</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_efae4012d0e357ebeaba7d02491d70e5.xhtml">reference</a></li><li class="navelem"><a class="el" href="dir_d2f3b8e2e64df3181ebe92efcc0a3012.xhtml">workloads</a></li><li class="navelem"><a class="el" href="backends_2reference_2workloads_2_detection_post_process_8cpp.xhtml">DetectionPostProcess.cpp</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:31 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
