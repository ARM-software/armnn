<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: MockBackend Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_mock_backend.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_1_1_mock_backend-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">MockBackend Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_mock_backend_8hpp_source.xhtml">MockBackend.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for MockBackend:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_mock_backend.png" usemap="#MockBackend_map" alt=""/>
  <map id="MockBackend_map" name="MockBackend_map">
<area href="classarmnn_1_1_i_backend_internal.xhtml" alt="IBackendInternal" shape="rect" coords="0,56,106,80"/>
<area href="classarmnn_1_1_i_backend.xhtml" title="Each backend should implement an IBackend. " alt="IBackend" shape="rect" coords="0,0,106,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aa14555710b0db5c5752595415504511a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_mock_backend.xhtml#aa14555710b0db5c5752595415504511a">MockBackend</a> ()=default</td></tr>
<tr class="separator:aa14555710b0db5c5752595415504511a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2904536c70c0959cc462089d4c51cd88"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_mock_backend.xhtml#a2904536c70c0959cc462089d4c51cd88">~MockBackend</a> ()=default</td></tr>
<tr class="separator:a2904536c70c0959cc462089d4c51cd88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c6c3d137a7792e264a89cc40ea94bb0"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_mock_backend.xhtml#a6c6c3d137a7792e264a89cc40ea94bb0">GetId</a> () const override</td></tr>
<tr class="separator:a6c6c3d137a7792e264a89cc40ea94bb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e19e275c8162e34e6d8d10a9245dbc9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IBackendInternal::IWorkloadFactoryPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_mock_backend.xhtml#a8e19e275c8162e34e6d8d10a9245dbc9">CreateWorkloadFactory</a> (const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager=nullptr) const override</td></tr>
<tr class="separator:a8e19e275c8162e34e6d8d10a9245dbc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93d4285a3ea5e4e3b35578484d889daa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">IBackendInternal::ILayerSupportSharedPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_mock_backend.xhtml#a93d4285a3ea5e4e3b35578484d889daa">GetLayerSupport</a> () const override</td></tr>
<tr class="separator:a93d4285a3ea5e4e3b35578484d889daa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93fcb3bff141d8c77b53466a44b58eee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a12bff6d51d63dac1375c89bc8415dc46">IBackendInternal::IMemoryManagerUniquePtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_mock_backend.xhtml#a93fcb3bff141d8c77b53466a44b58eee">CreateMemoryManager</a> () const override</td></tr>
<tr class="separator:a93fcb3bff141d8c77b53466a44b58eee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a801cf3170dc777aca3e6f926d1bd70a5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">IBackendInternal::IBackendContextPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_mock_backend.xhtml#a801cf3170dc777aca3e6f926d1bd70a5">CreateBackendContext</a> (const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> &amp;) const override</td></tr>
<tr class="memdesc:a801cf3170dc777aca3e6f926d1bd70a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the runtime context of the backend.  <a href="#a801cf3170dc777aca3e6f926d1bd70a5">More...</a><br /></td></tr>
<tr class="separator:a801cf3170dc777aca3e6f926d1bd70a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2480fbc4ae790e2e64f55d78b7f31a0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">IBackendInternal::IBackendProfilingContextPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_mock_backend.xhtml#ac2480fbc4ae790e2e64f55d78b7f31a0">CreateBackendProfilingContext</a> (const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> &amp;creationOptions, <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a335964abd41c91f7e6ef5c65865a7b98">IBackendProfilingPtr</a> &amp;backendProfiling) override</td></tr>
<tr class="memdesc:ac2480fbc4ae790e2e64f55d78b7f31a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create context specifically used for profiling interaction from backends.  <a href="#ac2480fbc4ae790e2e64f55d78b7f31a0">More...</a><br /></td></tr>
<tr class="separator:ac2480fbc4ae790e2e64f55d78b7f31a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c7ed3d210544740ecb3fa9c28d56c34"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_mock_backend.xhtml#a3c7ed3d210544740ecb3fa9c28d56c34">OptimizeSubgraphView</a> (const <a class="el" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> &amp;subgraph) const override</td></tr>
<tr class="separator:a3c7ed3d210544740ecb3fa9c28d56c34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb75bad43612f5314622c4fa8a16e63d"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_custom_allocator.xhtml">ICustomAllocator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_mock_backend.xhtml#afb75bad43612f5314622c4fa8a16e63d">GetDefaultAllocator</a> () const override</td></tr>
<tr class="memdesc:afb75bad43612f5314622c4fa8a16e63d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the default memory allocator for the backend.  <a href="#afb75bad43612f5314622c4fa8a16e63d">More...</a><br /></td></tr>
<tr class="separator:afb75bad43612f5314622c4fa8a16e63d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_backend_internal"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_backend_internal')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a></td></tr>
<tr class="memitem:a8c507c220869f89aec2dc370ea6c5a0b inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a8c507c220869f89aec2dc370ea6c5a0b">~IBackendInternal</a> () override=default</td></tr>
<tr class="memdesc:a8c507c220869f89aec2dc370ea6c5a0b inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow backends created by the factory function to be destroyed through <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a>.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a8c507c220869f89aec2dc370ea6c5a0b">More...</a><br /></td></tr>
<tr class="separator:a8c507c220869f89aec2dc370ea6c5a0b inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41c5c170ef6708c1efc683d900f624ff inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a41c5c170ef6708c1efc683d900f624ff">CreateWorkloadFactory</a> (class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;tensorHandleFactoryRegistry) const</td></tr>
<tr class="separator:a41c5c170ef6708c1efc683d900f624ff inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22973198ab5ac5624b4caa78100d2d25 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a22973198ab5ac5624b4caa78100d2d25">CreateWorkloadFactory</a> (const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions) const</td></tr>
<tr class="separator:a22973198ab5ac5624b4caa78100d2d25 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebacbea86fddc46858f6329671ccf750 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#aebacbea86fddc46858f6329671ccf750">CreateWorkloadFactory</a> (class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;tensorHandleFactoryRegistry, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions) const</td></tr>
<tr class="separator:aebacbea86fddc46858f6329671ccf750 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6abedf4465c7f6b634a207d228cdf284 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a6abedf4465c7f6b634a207d228cdf284">CreateWorkloadFactory</a> (class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;tensorHandleFactoryRegistry, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions, <a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a> inputFlags, <a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a> outputFlags) const</td></tr>
<tr class="separator:a6abedf4465c7f6b634a207d228cdf284 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41f38c8c2182463dec4f03769ea54f63 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendSpecificModelContextPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a41f38c8c2182463dec4f03769ea54f63">CreateBackendSpecificModelContext</a> (const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions) const</td></tr>
<tr class="separator:a41f38c8c2182463dec4f03769ea54f63 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa654fe558005ad90f2e9a2e1f175ebce inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">ILayerSupportSharedPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#aa654fe558005ad90f2e9a2e1f175ebce">GetLayerSupport</a> (const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions) const</td></tr>
<tr class="separator:aa654fe558005ad90f2e9a2e1f175ebce inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3623ac8294bf071d68eb7d71383e9a83 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a3623ac8294bf071d68eb7d71383e9a83">OptimizeSubgraphView</a> (const <a class="el" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> &amp;subgraph, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions) const</td></tr>
<tr class="separator:a3623ac8294bf071d68eb7d71383e9a83 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8f716b0eab6b9d63196d5a53d5fac81 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#af8f716b0eab6b9d63196d5a53d5fac81">SupportsTensorAllocatorAPI</a> () const</td></tr>
<tr class="separator:af8f716b0eab6b9d63196d5a53d5fac81 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ccbb386cc96a5336a8295a3c25d33dd inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a6ccbb386cc96a5336a8295a3c25d33dd">GetBackwardCompatibleFavoriteHandleFactory</a> ()</td></tr>
<tr class="separator:a6ccbb386cc96a5336a8295a3c25d33dd inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5d107c5672f446603b6e6b92bce6244 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual std::vector&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ac5d107c5672f446603b6e6b92bce6244">GetHandleFactoryPreferences</a> () const</td></tr>
<tr class="memdesc:ac5d107c5672f446603b6e6b92bce6244 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">(<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>) Returns a vector of supported TensorHandleFactory ids in preference order.  <a href="classarmnn_1_1_i_backend_internal.xhtml#ac5d107c5672f446603b6e6b92bce6244">More...</a><br /></td></tr>
<tr class="separator:ac5d107c5672f446603b6e6b92bce6244 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a517bc1a44d6d2d7a45c1847fba287135 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a517bc1a44d6d2d7a45c1847fba287135">RegisterTensorHandleFactories</a> (class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;)</td></tr>
<tr class="memdesc:a517bc1a44d6d2d7a45c1847fba287135 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">(<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>) Register TensorHandleFactories Either this method or <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a0fe4c12c8f1f0722d2a91f61c02a687a">CreateMemoryManager()</a> and IWorkloadFactory::CreateTensor()/IWorkloadFactory::CreateSubtensor() methods must be implemented.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a517bc1a44d6d2d7a45c1847fba287135">More...</a><br /></td></tr>
<tr class="separator:a517bc1a44d6d2d7a45c1847fba287135 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36b46ce669164b5188cb21796557d897 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a36b46ce669164b5188cb21796557d897">RegisterTensorHandleFactories</a> (class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;registry, <a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a> inputFlags, <a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a> outputFlags)</td></tr>
<tr class="memdesc:a36b46ce669164b5188cb21796557d897 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">(<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>) Register TensorHandleFactories Either this method or <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a0fe4c12c8f1f0722d2a91f61c02a687a">CreateMemoryManager()</a> and IWorkloadFactory::CreateTensor()/IWorkloadFactory::CreateSubtensor() methods must be implemented.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a36b46ce669164b5188cb21796557d897">More...</a><br /></td></tr>
<tr class="separator:a36b46ce669164b5188cb21796557d897 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a057f6c5c3ab3248050ed548273c4beb9 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearmnn.xhtml#aa9c506b558b8aa33a228b15164f40dc3">BackendCapabilities</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a057f6c5c3ab3248050ed548273c4beb9">GetCapabilities</a> () const</td></tr>
<tr class="memdesc:a057f6c5c3ab3248050ed548273c4beb9 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a BackendCapability if the backend lists the capability The BackendCapability must then be inspected to check whether or not that BackendCapability is supported Otherwise returns an <a class="el" href="structarmnn_1_1_empty_optional.xhtml" title="EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...">EmptyOptional</a> if the BackendCapability is unlisted.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a057f6c5c3ab3248050ed548273c4beb9">More...</a><br /></td></tr>
<tr class="separator:a057f6c5c3ab3248050ed548273c4beb9 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbbbac01c3058825d2bb11ec4b626c97 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#adbbbac01c3058825d2bb11ec4b626c97">HasCapability</a> (<a class="el" href="namespacearmnn.xhtml#ab24d74259a053475f6040dd701a01952">BackendCapability</a>) const</td></tr>
<tr class="memdesc:adbbbac01c3058825d2bb11ec4b626c97 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if backend support the capability false otherwise.  <a href="classarmnn_1_1_i_backend_internal.xhtml#adbbbac01c3058825d2bb11ec4b626c97">More...</a><br /></td></tr>
<tr class="separator:adbbbac01c3058825d2bb11ec4b626c97 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75af5f33aff768de09b8f703b87636ab inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a75af5f33aff768de09b8f703b87636ab">UseCustomMemoryAllocator</a> (std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_custom_allocator.xhtml">ICustomAllocator</a> &gt; allocator, <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; std::string &amp;&gt; errMsg)</td></tr>
<tr class="memdesc:a75af5f33aff768de09b8f703b87636ab inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Signals the backend to use a custom memory allocator provided by the user.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a75af5f33aff768de09b8f703b87636ab">More...</a><br /></td></tr>
<tr class="separator:a75af5f33aff768de09b8f703b87636ab inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87d128382876683170ffc3529aadabbf inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a87d128382876683170ffc3529aadabbf">GetNumberOfCacheFiles</a> () const</td></tr>
<tr class="memdesc:a87d128382876683170ffc3529aadabbf inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of files cached if backend supports caching.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a87d128382876683170ffc3529aadabbf">More...</a><br /></td></tr>
<tr class="separator:a87d128382876683170ffc3529aadabbf inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a177af502214bbc8123fbb4a3c4f0a1b8"><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_mock_backend.xhtml#a177af502214bbc8123fbb4a3c4f0a1b8">GetIdStatic</a> ()</td></tr>
<tr class="separator:a177af502214bbc8123fbb4a3c4f0a1b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classarmnn_1_1_i_backend_internal"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classarmnn_1_1_i_backend_internal')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a></td></tr>
<tr class="memitem:a878b8f50d8a2f92ed624803e9f6968ae inherit pub_static_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a878b8f50d8a2f92ed624803e9f6968ae">GetApiVersion</a> ()</td></tr>
<tr class="memdesc:a878b8f50d8a2f92ed624803e9f6968ae inherit pub_static_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the version of the Backend API.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a878b8f50d8a2f92ed624803e9f6968ae">More...</a><br /></td></tr>
<tr class="separator:a878b8f50d8a2f92ed624803e9f6968ae inherit pub_static_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classarmnn_1_1_i_backend_internal"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classarmnn_1_1_i_backend_internal')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a></td></tr>
<tr class="memitem:a72ca1cf423bda4b0a9ffb789627126de inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a> &gt;</td></tr>
<tr class="separator:a72ca1cf423bda4b0a9ffb789627126de inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada6d56575c0fe53cf23c7ae4610c6367 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">IBackendContextPtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_backend_context.xhtml">IBackendContext</a> &gt;</td></tr>
<tr class="separator:ada6d56575c0fe53cf23c7ae4610c6367 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae44a82b0e485e551a0f77150b1076e06 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">IBackendProfilingContextPtr</a> = std::shared_ptr&lt; arm::pipe::IBackendProfilingContext &gt;</td></tr>
<tr class="memdesc:ae44a82b0e485e551a0f77150b1076e06 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the bridge between backend and backend profiling we'll keep it in the backend namespace.  <a href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">More...</a><br /></td></tr>
<tr class="separator:ae44a82b0e485e551a0f77150b1076e06 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a335964abd41c91f7e6ef5c65865a7b98 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a335964abd41c91f7e6ef5c65865a7b98">IBackendProfilingPtr</a> = std::unique_ptr&lt; arm::pipe::IBackendProfiling &gt;</td></tr>
<tr class="separator:a335964abd41c91f7e6ef5c65865a7b98 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11fa919c11fe46aad613b2e960fcfe90 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">ILayerSupportSharedPtr</a> = std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a> &gt;</td></tr>
<tr class="separator:a11fa919c11fe46aad613b2e960fcfe90 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d0238968a7643dbb170547dd22bba54 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendSpecificModelContextPtr</a> = std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_backend_model_context.xhtml">IBackendModelContext</a> &gt;</td></tr>
<tr class="separator:a4d0238968a7643dbb170547dd22bba54 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12bff6d51d63dac1375c89bc8415dc46 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a12bff6d51d63dac1375c89bc8415dc46">IMemoryManagerUniquePtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt;</td></tr>
<tr class="separator:a12bff6d51d63dac1375c89bc8415dc46 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a693b40e6b94e958836aeb0410ca186bd inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IMemoryManagerSharedPtr</a> = std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt;</td></tr>
<tr class="separator:a693b40e6b94e958836aeb0410ca186bd inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_backend_internal"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_backend_internal')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a></td></tr>
<tr class="memitem:a675fed08e681be4343fb09ae73eb7641 inherit pro_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a675fed08e681be4343fb09ae73eb7641">IBackendInternal</a> ()=default</td></tr>
<tr class="memdesc:a675fed08e681be4343fb09ae73eb7641 inherit pro_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creation must be done through a specific backend interface.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a675fed08e681be4343fb09ae73eb7641">More...</a><br /></td></tr>
<tr class="separator:a675fed08e681be4343fb09ae73eb7641 inherit pro_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_backend"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_backend')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_backend.xhtml">IBackend</a></td></tr>
<tr class="memitem:a7cfc55eae265fa65b7d25e7dd3203f22 inherit pro_methods_classarmnn_1_1_i_backend"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend.xhtml#a7cfc55eae265fa65b7d25e7dd3203f22">IBackend</a> ()</td></tr>
<tr class="separator:a7cfc55eae265fa65b7d25e7dd3203f22 inherit pro_methods_classarmnn_1_1_i_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa73289e0503a4f7ec5909e117a57aa2b inherit pro_methods_classarmnn_1_1_i_backend"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend.xhtml#aa73289e0503a4f7ec5909e117a57aa2b">~IBackend</a> ()</td></tr>
<tr class="separator:aa73289e0503a4f7ec5909e117a57aa2b inherit pro_methods_classarmnn_1_1_i_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_mock_backend_8hpp_source.xhtml#l00018">18</a> of file <a class="el" href="_mock_backend_8hpp_source.xhtml">MockBackend.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aa14555710b0db5c5752595415504511a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa14555710b0db5c5752595415504511a">&#9670;&nbsp;</a></span>MockBackend()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_mock_backend.xhtml">MockBackend</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2904536c70c0959cc462089d4c51cd88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2904536c70c0959cc462089d4c51cd88">&#9670;&nbsp;</a></span>~MockBackend()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_mock_backend.xhtml">MockBackend</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a801cf3170dc777aca3e6f926d1bd70a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a801cf3170dc777aca3e6f926d1bd70a5">&#9670;&nbsp;</a></span>CreateBackendContext()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">IBackendInternal::IBackendContextPtr</a> CreateBackendContext </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create the runtime context of the backend. </p>
<p>Implementations may return a default-constructed IBackendContextPtr if no context is needed at runtime. Implementations must throw <a class="el" href="classarmnn_1_1_backend_unavailable_exception.xhtml" title="Class for non-fatal exceptions raised while initialising a backend. ">BackendUnavailableException</a> if the backend cannot be used (for example, necessary accelerator hardware is not present). The default implementation always returns a default-constructed pointer. </p>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a07a1b3f9ac897364b5c2aacc227cbebc">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_mock_backend_8cpp_source.xhtml#l00133">133</a> of file <a class="el" href="_mock_backend_8cpp_source.xhtml">MockBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_mock_backend_8hpp_source.xhtml#l00027">MockBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">IBackendContextPtr</a>{};</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_ada6d56575c0fe53cf23c7ae4610c6367"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">armnn::IBackendInternal::IBackendContextPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IBackendContext &gt; IBackendContextPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00088">IBackendInternal.hpp:88</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac2480fbc4ae790e2e64f55d78b7f31a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2480fbc4ae790e2e64f55d78b7f31a0">&#9670;&nbsp;</a></span>CreateBackendProfilingContext()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">IBackendInternal::IBackendProfilingContextPtr</a> CreateBackendProfilingContext </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>creationOptions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a335964abd41c91f7e6ef5c65865a7b98">IBackendProfilingPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>backendProfiling</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create context specifically used for profiling interaction from backends. </p>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a6c5064ef6323af5c547674d01b15d7ab">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_mock_backend_8cpp_source.xhtml#l00138">138</a> of file <a class="el" href="_mock_backend_8cpp_source.xhtml">MockBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_mock_backend_8hpp_source.xhtml#l00223">MockBackendProfilingService::Instance()</a>, and <a class="el" href="_mock_backend_8hpp_source.xhtml#l00234">MockBackendProfilingService::SetProfilingContextPtr()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_mock_backend_8hpp_source.xhtml#l00027">MockBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;{</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(options);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::shared_ptr&lt;armnn::MockBackendProfilingContext&gt; context =</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        std::make_shared&lt;MockBackendProfilingContext&gt;(backendProfiling);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="classarmnn_1_1_mock_backend_profiling_service.xhtml#a15a5e913e48840d7b767a4453d83f361">MockBackendProfilingService::Instance</a>().<a class="code" href="classarmnn_1_1_mock_backend_profiling_service.xhtml#a3458b64cd6375e3842160a28ad6e2301">SetProfilingContextPtr</a>(context);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">return</span> context;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_mock_backend_profiling_service_xhtml_a3458b64cd6375e3842160a28ad6e2301"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_service.xhtml#a3458b64cd6375e3842160a28ad6e2301">armnn::MockBackendProfilingService::SetProfilingContextPtr</a></div><div class="ttdeci">void SetProfilingContextPtr(std::shared_ptr&lt; MockBackendProfilingContext &gt; shared)</div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_8hpp_source.xhtml#l00234">MockBackend.hpp:234</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_backend_profiling_service_xhtml_a15a5e913e48840d7b767a4453d83f361"><div class="ttname"><a href="classarmnn_1_1_mock_backend_profiling_service.xhtml#a15a5e913e48840d7b767a4453d83f361">armnn::MockBackendProfilingService::Instance</a></div><div class="ttdeci">static MockBackendProfilingService &amp; Instance()</div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_8hpp_source.xhtml#l00223">MockBackend.hpp:223</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a93fcb3bff141d8c77b53466a44b58eee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93fcb3bff141d8c77b53466a44b58eee">&#9670;&nbsp;</a></span>CreateMemoryManager()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a12bff6d51d63dac1375c89bc8415dc46">IBackendInternal::IMemoryManagerUniquePtr</a> CreateMemoryManager </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a0fe4c12c8f1f0722d2a91f61c02a687a">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_mock_backend_8cpp_source.xhtml#l00148">148</a> of file <a class="el" href="_mock_backend_8cpp_source.xhtml">MockBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_mock_backend_8hpp_source.xhtml#l00027">MockBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a12bff6d51d63dac1375c89bc8415dc46">IMemoryManagerUniquePtr</a>{};</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a12bff6d51d63dac1375c89bc8415dc46"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a12bff6d51d63dac1375c89bc8415dc46">armnn::IBackendInternal::IMemoryManagerUniquePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IMemoryManager &gt; IMemoryManagerUniquePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00096">IBackendInternal.hpp:96</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8e19e275c8162e34e6d8d10a9245dbc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e19e275c8162e34e6d8d10a9245dbc9">&#9670;&nbsp;</a></span>CreateWorkloadFactory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IBackendInternal::IWorkloadFactoryPtr</a> CreateWorkloadFactory </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em> = <code>nullptr</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#afd5a5e90515b31c0174f76ec8897e9b1">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_mock_backend_8cpp_source.xhtml#l00127">127</a> of file <a class="el" href="_mock_backend_8cpp_source.xhtml">MockBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_mock_backend_8hpp_source.xhtml#l00027">MockBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a>{};</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a72ca1cf423bda4b0a9ffb789627126de"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">armnn::IBackendInternal::IWorkloadFactoryPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IWorkloadFactory &gt; IWorkloadFactoryPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00087">IBackendInternal.hpp:87</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afb75bad43612f5314622c4fa8a16e63d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb75bad43612f5314622c4fa8a16e63d">&#9670;&nbsp;</a></span>GetDefaultAllocator()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_custom_allocator.xhtml">ICustomAllocator</a> &gt; GetDefaultAllocator </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the default memory allocator for the backend. </p>
<dl class="section return"><dt>Returns</dt><dd>- Returns unique pointer to the Default <a class="el" href="structarmnn_1_1_allocator.xhtml">Allocator</a> of the Backend </dd></dl>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a563472222884844adc3183c433f38e54">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_mock_backend_8cpp_source.xhtml#l00298">298</a> of file <a class="el" href="_mock_backend_8cpp_source.xhtml">MockBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_mock_backend_8hpp_source.xhtml#l00027">MockBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;{</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;DefaultAllocator&gt;();</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a6c6c3d137a7792e264a89cc40ea94bb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c6c3d137a7792e264a89cc40ea94bb0">&#9670;&nbsp;</a></span>GetId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; GetId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_backend.xhtml#aa9fc23b7155bd678232eeb351059b748">IBackend</a>.</p>

<p class="definition">Definition at line <a class="el" href="_mock_backend_8hpp_source.xhtml#l00027">27</a> of file <a class="el" href="_mock_backend_8hpp_source.xhtml">MockBackend.hpp</a>.</p>

<p class="reference">References <a class="el" href="_mock_backend_8cpp_source.xhtml#l00133">MockBackend::CreateBackendContext()</a>, <a class="el" href="_mock_backend_8cpp_source.xhtml#l00138">MockBackend::CreateBackendProfilingContext()</a>, <a class="el" href="_mock_backend_8cpp_source.xhtml#l00148">MockBackend::CreateMemoryManager()</a>, <a class="el" href="_mock_backend_8cpp_source.xhtml#l00127">MockBackend::CreateWorkloadFactory()</a>, <a class="el" href="_mock_backend_8cpp_source.xhtml#l00298">MockBackend::GetDefaultAllocator()</a>, <a class="el" href="_mock_backend_8cpp_source.xhtml#l00017">MockBackend::GetIdStatic()</a>, <a class="el" href="_mock_backend_8cpp_source.xhtml#l00153">MockBackend::GetLayerSupport()</a>, and <a class="el" href="_mock_backend_8cpp_source.xhtml#l00159">MockBackend::OptimizeSubgraphView()</a>.</p>
<div class="fragment"><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_mock_backend.xhtml#a177af502214bbc8123fbb4a3c4f0a1b8">GetIdStatic</a>();</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_mock_backend_xhtml_a177af502214bbc8123fbb4a3c4f0a1b8"><div class="ttname"><a href="classarmnn_1_1_mock_backend.xhtml#a177af502214bbc8123fbb4a3c4f0a1b8">armnn::MockBackend::GetIdStatic</a></div><div class="ttdeci">static const BackendId &amp; GetIdStatic()</div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_8cpp_source.xhtml#l00017">MockBackend.cpp:17</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a177af502214bbc8123fbb4a3c4f0a1b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a177af502214bbc8123fbb4a3c4f0a1b8">&#9670;&nbsp;</a></span>GetIdStatic()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp; GetIdStatic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_backend_8cpp_source.xhtml#l00017">17</a> of file <a class="el" href="_mock_backend_8cpp_source.xhtml">MockBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_mock_backend_id_8hpp_source.xhtml#l00011">armnn::MockBackendId()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_mock_backend_8hpp_source.xhtml#l00027">MockBackend::GetId()</a>, <a class="el" href="_mock_backend_8cpp_source.xhtml#l00106">MockBackendInitialiser::MockBackendInitialiser()</a>, <a class="el" href="_optimization_views_tests_8cpp_source.xhtml#l00053">TEST_SUITE()</a>, and <a class="el" href="_mock_backend_8cpp_source.xhtml#l00115">MockBackendInitialiser::~MockBackendInitialiser()</a>.</p>
<div class="fragment"><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> BackendId s_Id{<a class="code" href="namespacearmnn.xhtml#a17955517b0d148f7ffdbffe8b46e41e0">MockBackendId</a>()};</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keywordflow">return</span> s_Id;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a17955517b0d148f7ffdbffe8b46e41e0"><div class="ttname"><a href="namespacearmnn.xhtml#a17955517b0d148f7ffdbffe8b46e41e0">armnn::MockBackendId</a></div><div class="ttdeci">constexpr const char * MockBackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_id_8hpp_source.xhtml#l00011">MockBackendId.hpp:11</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a93d4285a3ea5e4e3b35578484d889daa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93d4285a3ea5e4e3b35578484d889daa">&#9670;&nbsp;</a></span>GetLayerSupport()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">IBackendInternal::ILayerSupportSharedPtr</a> GetLayerSupport </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ad86597efa7c25997572c80dc29f3104a">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_mock_backend_8cpp_source.xhtml#l00153">153</a> of file <a class="el" href="_mock_backend_8cpp_source.xhtml">MockBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_mock_backend_8hpp_source.xhtml#l00027">MockBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">ILayerSupportSharedPtr</a> layerSupport{<span class="keyword">new</span> MockLayerSupport};</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">return</span> layerSupport;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a11fa919c11fe46aad613b2e960fcfe90"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">armnn::IBackendInternal::ILayerSupportSharedPtr</a></div><div class="ttdeci">std::shared_ptr&lt; ILayerSupport &gt; ILayerSupportSharedPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00092">IBackendInternal.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a3c7ed3d210544740ecb3fa9c28d56c34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c7ed3d210544740ecb3fa9c28d56c34">&#9670;&nbsp;</a></span>OptimizeSubgraphView()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a> OptimizeSubgraphView </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> &amp;&#160;</td>
          <td class="paramname"><em>subgraph</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a674f56c735a3d6300463cefb642f808a">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_mock_backend_8cpp_source.xhtml#l00159">159</a> of file <a class="el" href="_mock_backend_8cpp_source.xhtml">MockBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="include_2armnn_2backends_2_optimization_views_8hpp_source.xhtml#l00039">OptimizationViews::AddFailedSubgraph()</a>, <a class="el" href="include_2armnn_2backends_2_optimization_views_8hpp_source.xhtml#l00034">OptimizationViews::AddSubstitution()</a>, <a class="el" href="include_2armnn_2backends_2_optimization_views_8hpp_source.xhtml#l00044">OptimizationViews::AddUntouchedSubgraph()</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_subgraph_view_8cpp_source.xhtml#l00300">SubgraphView::GetIConnectableLayers()</a>, <a class="el" href="include_2armnn_2backends_2_optimization_views_8hpp_source.xhtml#l00062">OptimizationViews::GetINetwork()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="_mock_backend_8cpp_source.xhtml#l00085">armnn::IsLayerOptimizable()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01516">IWorkloadFactory::IsLayerSupported()</a>, <a class="el" href="_mock_backend_id_8hpp_source.xhtml#l00011">armnn::MockBackendId()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>, and <a class="el" href="_subgraph_view_selector_8cpp_source.xhtml#l00259">SubgraphViewSelector::SelectSubgraphs()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_mock_backend_8hpp_source.xhtml#l00027">MockBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="comment">// Prepare the optimization views</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    OptimizationViews optimizationViews;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="comment">// Get the layers of the input sub-graph</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#ad7c7687cd3542e5cbb45e56f9a9456e7">SubgraphView::IConnectableLayers</a>&amp; subgraphLayers = subgraph.GetIConnectableLayers();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="comment">// Parse the layers</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#ad7c7687cd3542e5cbb45e56f9a9456e7">SubgraphView::IConnectableLayers</a> supportedLayers;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#ad7c7687cd3542e5cbb45e56f9a9456e7">SubgraphView::IConnectableLayers</a> unsupportedLayers;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#ad7c7687cd3542e5cbb45e56f9a9456e7">SubgraphView::IConnectableLayers</a> untouchedLayers;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    std::for_each(subgraphLayers.begin(),</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                  subgraphLayers.end(),</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                  [&amp;](IConnectableLayer* layer)</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                  {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                      <span class="keywordtype">bool</span> supported = <a class="code" href="namespacearmnn.xhtml#a138ca3929b888fa8d9088c076e9de48c">IsLayerSupported</a>(PolymorphicDowncast&lt;Layer*&gt;(layer));</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                      <span class="keywordflow">if</span> (supported)</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                      {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                          <span class="comment">// Layer supported, check if it&#39;s optimizable</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                          <span class="keywordtype">bool</span> optimizable = <a class="code" href="namespacearmnn.xhtml#aeb099eb45d76b4ce62d87be11c634538">IsLayerOptimizable</a>(PolymorphicDowncast&lt;Layer*&gt;(layer));</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                          <span class="keywordflow">if</span> (optimizable)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                          {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                              <span class="comment">// Layer fully supported</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                              supportedLayers.push_back(layer);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                          }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                          <span class="keywordflow">else</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                          {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                              <span class="comment">// Layer supported but not optimizable</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                              untouchedLayers.push_back(layer);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                          }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                      }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                      <span class="keywordflow">else</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                      {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                          <span class="comment">// Layer unsupported</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                          unsupportedLayers.push_back(layer);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                      }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                  });</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// Check if there are supported layers</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">if</span> (!supportedLayers.empty())</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="comment">// Select the layers that are neither inputs or outputs, but that are optimizable</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keyword">auto</span> supportedSubgraphSelector = [](<span class="keyword">const</span> <a class="code" href="namespacearmnn_serializer.xhtml#a9a8118be7780e95363d631cbca7e7800">Layer</a>&amp; layer)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keywordflow">return</span> layer.GetType() != <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a> &amp;&amp;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                layer.GetType() != <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a> &amp;&amp;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                <a class="code" href="namespacearmnn.xhtml#a138ca3929b888fa8d9088c076e9de48c">IsLayerSupported</a>(layer) &amp;&amp;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                <a class="code" href="namespacearmnn.xhtml#aeb099eb45d76b4ce62d87be11c634538">IsLayerOptimizable</a>(layer);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        };</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="comment">// Apply the subgraph selector to the supported layers to group them into sub-graphs were appropriate</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        SubgraphView mutableSubgraph(subgraph);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#aaf71a63dbbc776f8961b0f4fdb9da021">SubgraphViewSelector::Subgraphs</a> supportedSubgraphs =</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                         <a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#a3730b0a6006f0d87f894a44e01869d90">SubgraphViewSelector::SelectSubgraphs</a>(mutableSubgraph, supportedSubgraphSelector);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="comment">// Create a substitution pair for each supported sub-graph</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        std::for_each(supportedSubgraphs.begin(),</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                      supportedSubgraphs.end(),</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                      [&amp;optimizationViews](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a4684a457c7786484375f06e9ab2d2265">SubgraphView::SubgraphViewPtr</a>&amp; supportedSubgraph)</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                      {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                          <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(supportedSubgraph != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                          <a class="code" href="namespacearmnn.xhtml#af362583b7b4c471c434cb0fdb86c2ae2">CompiledBlobPtr</a> blobPtr;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                          BackendId backend = <a class="code" href="namespacearmnn.xhtml#a17955517b0d148f7ffdbffe8b46e41e0">MockBackendId</a>();</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                          IConnectableLayer* preCompiledLayer =</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                               optimizationViews.GetINetwork()-&gt;AddPrecompiledLayer(</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                                   PreCompiledDescriptor(supportedSubgraph-&gt;GetNumInputSlots(),</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                                                         supportedSubgraph-&gt;GetNumOutputSlots()),</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                                   std::move(blobPtr),</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                                                   backend,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                          SubgraphView substitutionSubgraph(*supportedSubgraph);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                          SubgraphView replacementSubgraph(preCompiledLayer);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                          optimizationViews.AddSubstitution({ substitutionSubgraph, replacementSubgraph });</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                      });</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    }</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">// Check if there are unsupported layers</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">if</span> (!unsupportedLayers.empty())</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="comment">// Select the layers that are neither inputs or outputs, and are not optimizable</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keyword">auto</span> unsupportedSubgraphSelector = [](<span class="keyword">const</span> <a class="code" href="namespacearmnn_serializer.xhtml#a9a8118be7780e95363d631cbca7e7800">Layer</a>&amp; layer)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            <span class="keywordflow">return</span> layer.GetType() != <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a> &amp;&amp;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                layer.GetType() != <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a> &amp;&amp;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                !<a class="code" href="namespacearmnn.xhtml#a138ca3929b888fa8d9088c076e9de48c">IsLayerSupported</a>(layer);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        };</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="comment">// Apply the subgraph selector to the unsupported layers to group them into sub-graphs were appropriate</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        SubgraphView mutableSubgraph(subgraph);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#aaf71a63dbbc776f8961b0f4fdb9da021">SubgraphViewSelector::Subgraphs</a> unsupportedSubgraphs =</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                         <a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#a3730b0a6006f0d87f894a44e01869d90">SubgraphViewSelector::SelectSubgraphs</a>(mutableSubgraph, unsupportedSubgraphSelector);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="comment">// Add each unsupported sub-graph to the list of failed sub-graphs in the optimizization views</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        std::for_each(unsupportedSubgraphs.begin(),</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                      unsupportedSubgraphs.end(),</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                      [&amp;optimizationViews](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a4684a457c7786484375f06e9ab2d2265">SubgraphView::SubgraphViewPtr</a>&amp; unsupportedSubgraph)</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                      {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                          <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(unsupportedSubgraph != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                          optimizationViews.AddFailedSubgraph(SubgraphView(*unsupportedSubgraph));</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                      });</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="comment">// Check if there are untouched layers</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">if</span> (!untouchedLayers.empty())</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="comment">// Select the layers that are neither inputs or outputs, that are supported but that and are not optimizable</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keyword">auto</span> untouchedSubgraphSelector = [](<span class="keyword">const</span> <a class="code" href="namespacearmnn_serializer.xhtml#a9a8118be7780e95363d631cbca7e7800">Layer</a>&amp; layer)</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            <span class="keywordflow">return</span> layer.GetType() != <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a> &amp;&amp;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                layer.GetType() != <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a> &amp;&amp;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                <a class="code" href="namespacearmnn.xhtml#a138ca3929b888fa8d9088c076e9de48c">IsLayerSupported</a>(layer) &amp;&amp;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                !<a class="code" href="namespacearmnn.xhtml#aeb099eb45d76b4ce62d87be11c634538">IsLayerOptimizable</a>(layer);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        };</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="comment">// Apply the subgraph selector to the untouched layers to group them into sub-graphs were appropriate</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        SubgraphView mutableSubgraph(subgraph);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#aaf71a63dbbc776f8961b0f4fdb9da021">SubgraphViewSelector::Subgraphs</a> untouchedSubgraphs =</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                         <a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#a3730b0a6006f0d87f894a44e01869d90">SubgraphViewSelector::SelectSubgraphs</a>(mutableSubgraph, untouchedSubgraphSelector);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="comment">// Add each untouched sub-graph to the list of untouched sub-graphs in the optimizization views</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        std::for_each(untouchedSubgraphs.begin(),</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                      untouchedSubgraphs.end(),</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                      [&amp;optimizationViews](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a4684a457c7786484375f06e9ab2d2265">SubgraphView::SubgraphViewPtr</a>&amp; untouchedSubgraph)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                      {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                          <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(untouchedSubgraph != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                          optimizationViews.AddUntouchedSubgraph(SubgraphView(*untouchedSubgraph));</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                      });</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    }</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">return</span> optimizationViews;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a138ca3929b888fa8d9088c076e9de48c"><div class="ttname"><a href="namespacearmnn.xhtml#a138ca3929b888fa8d9088c076e9de48c">armnn::IsLayerSupported</a></div><div class="ttdeci">bool IsLayerSupported(const armnn::Layer *layer)</div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_8cpp_source.xhtml#l00060">MockBackend.cpp:60</a></div></div>
<div class="ttc" id="namespacearmnn_serializer_xhtml_a9a8118be7780e95363d631cbca7e7800"><div class="ttname"><a href="namespacearmnn_serializer.xhtml#a9a8118be7780e95363d631cbca7e7800">armnnSerializer::Layer</a></div><div class="ttdeci">Layer</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_schema__generated_8h_source.xhtml#l01249">ArmnnSchema_generated.h:1249</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a17955517b0d148f7ffdbffe8b46e41e0"><div class="ttname"><a href="namespacearmnn.xhtml#a17955517b0d148f7ffdbffe8b46e41e0">armnn::MockBackendId</a></div><div class="ttdeci">constexpr const char * MockBackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_id_8hpp_source.xhtml#l00011">MockBackendId.hpp:11</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_af362583b7b4c471c434cb0fdb86c2ae2"><div class="ttname"><a href="namespacearmnn.xhtml#af362583b7b4c471c434cb0fdb86c2ae2">armnn::CompiledBlobPtr</a></div><div class="ttdeci">std::unique_ptr&lt; void, CompiledBlobDeleter &gt; CompiledBlobPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00245">INetwork.hpp:245</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_a4684a457c7786484375f06e9ab2d2265"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#a4684a457c7786484375f06e9ab2d2265">armnn::SubgraphView::SubgraphViewPtr</a></div><div class="ttdeci">std::unique_ptr&lt; SubgraphView &gt; SubgraphViewPtr</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_subgraph_view_8hpp_source.xhtml#l00048">SubgraphView.hpp:48</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_ad7c7687cd3542e5cbb45e56f9a9456e7"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#ad7c7687cd3542e5cbb45e56f9a9456e7">armnn::SubgraphView::IConnectableLayers</a></div><div class="ttdeci">std::list&lt; IConnectableLayer * &gt; IConnectableLayers</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_subgraph_view_8hpp_source.xhtml#l00054">SubgraphView.hpp:54</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_selector_xhtml_aaf71a63dbbc776f8961b0f4fdb9da021"><div class="ttname"><a href="classarmnn_1_1_subgraph_view_selector.xhtml#aaf71a63dbbc776f8961b0f4fdb9da021">armnn::SubgraphViewSelector::Subgraphs</a></div><div class="ttdeci">std::vector&lt; SubgraphViewPtr &gt; Subgraphs</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8hpp_source.xhtml#l00025">SubgraphViewSelector.hpp:25</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aeb099eb45d76b4ce62d87be11c634538"><div class="ttname"><a href="namespacearmnn.xhtml#aeb099eb45d76b4ce62d87be11c634538">armnn::IsLayerOptimizable</a></div><div class="ttdeci">bool IsLayerOptimizable(const armnn::Layer *layer)</div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_8cpp_source.xhtml#l00085">MockBackend.cpp:85</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_selector_xhtml_a3730b0a6006f0d87f894a44e01869d90"><div class="ttname"><a href="classarmnn_1_1_subgraph_view_selector.xhtml#a3730b0a6006f0d87f894a44e01869d90">armnn::SubgraphViewSelector::SelectSubgraphs</a></div><div class="ttdeci">static Subgraphs SelectSubgraphs(Graph &amp;graph, const LayerSelectorFunction &amp;selector)</div><div class="ttdoc">Selects subgraphs from a graph based on the selector function and the algorithm. </div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8cpp_source.xhtml#l00259">SubgraphViewSelector.cpp:259</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>include/armnnTestUtils/<a class="el" href="_mock_backend_8hpp_source.xhtml">MockBackend.hpp</a></li>
<li>src/armnnTestUtils/<a class="el" href="_mock_backend_8cpp_source.xhtml">MockBackend.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_mock_backend.xhtml">MockBackend</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:33 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
