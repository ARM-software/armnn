<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: ArmNNProfilingServiceInitialiser Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_arm_n_n_profiling_service_initialiser.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_arm_n_n_profiling_service_initialiser-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ArmNNProfilingServiceInitialiser Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_arm_n_n_profiling_service_initialiser_8hpp_source.xhtml">ArmNNProfilingServiceInitialiser.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ArmNNProfilingServiceInitialiser:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_arm_n_n_profiling_service_initialiser.png" usemap="#ArmNNProfilingServiceInitialiser_map" alt=""/>
  <map id="ArmNNProfilingServiceInitialiser_map" name="ArmNNProfilingServiceInitialiser_map">
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ae481f80f6519544d0d20d4f5d7419c7c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_arm_n_n_profiling_service_initialiser.xhtml#ae481f80f6519544d0d20d4f5d7419c7c">InitialiseProfilingService</a> (arm::pipe::IProfilingService &amp;profilingService) override</td></tr>
<tr class="separator:ae481f80f6519544d0d20d4f5d7419c7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_arm_n_n_profiling_service_initialiser_8hpp_source.xhtml#l00014">14</a> of file <a class="el" href="_arm_n_n_profiling_service_initialiser_8hpp_source.xhtml">ArmNNProfilingServiceInitialiser.hpp</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="ae481f80f6519544d0d20d4f5d7419c7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae481f80f6519544d0d20d4f5d7419c7c">&#9670;&nbsp;</a></span>InitialiseProfilingService()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void InitialiseProfilingService </td>
          <td>(</td>
          <td class="paramtype">arm::pipe::IProfilingService &amp;&#160;</td>
          <td class="paramname"><em>profilingService</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_arm_n_n_profiling_service_initialiser_8cpp_source.xhtml#l00017">17</a> of file <a class="el" href="_arm_n_n_profiling_service_initialiser_8cpp_source.xhtml">ArmNNProfilingServiceInitialiser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, and <a class="el" href="_backend_registry_8cpp_source.xhtml#l00015">armnn::BackendRegistryInstance()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00314">RuntimeImpl::InitialiseProfilingService()</a>.</p>
<div class="fragment"><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    uint16_t ZERO = 0;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keywordtype">double</span> ONE = 1.0;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    std::string ArmNN_Runtime(<span class="stringliteral">&quot;ArmNN_Runtime&quot;</span>);</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="comment">// Register a category for the basic runtime counters</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordflow">if</span> (!profilingService.IsCategoryRegistered(ArmNN_Runtime))</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    {</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        profilingService.GetCounterRegistry().RegisterCategory(ArmNN_Runtime);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    }</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    std::string networks(<span class="stringliteral">&quot;networks&quot;</span>);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    std::string networkLoads(<span class="stringliteral">&quot;Network loads&quot;</span>);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="comment">// Register a counter for the number of Network loads</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">if</span> (!profilingService.IsCounterRegistered(networkLoads))</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keyword">const</span> arm::pipe::Counter* loadedNetworksCounter =</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            profilingService.GetCounterRegistry().RegisterCounter(armnn::profiling::BACKEND_ID.Get(),</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                                                                  arm::pipe::NETWORK_LOADS,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                                                                  ArmNN_Runtime,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                                                                  ZERO,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                                                                  ZERO,</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                                                                  ONE,</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                                                                  networkLoads,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                                                  <span class="stringliteral">&quot;The number of networks loaded at runtime&quot;</span>,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                                                  networks);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(loadedNetworksCounter);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        profilingService.InitializeCounterValue(loadedNetworksCounter-&gt;m_Uid);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="comment">// Register a counter for the number of unloaded networks</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    std::string networkUnloads(<span class="stringliteral">&quot;Network unloads&quot;</span>);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">if</span> (!profilingService.IsCounterRegistered(networkUnloads))</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keyword">const</span> arm::pipe::Counter* unloadedNetworksCounter =</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            profilingService.GetCounterRegistry().RegisterCounter(armnn::profiling::BACKEND_ID.Get(),</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                                                                  arm::pipe::NETWORK_UNLOADS,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                                                                  ArmNN_Runtime,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                                                                  ZERO,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                                                                  ZERO,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                                                                  ONE,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                                                                  networkUnloads,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                                                                  <span class="stringliteral">&quot;The number of networks unloaded at runtime&quot;</span>,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                                                                  networks);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(unloadedNetworksCounter);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        profilingService.InitializeCounterValue(unloadedNetworksCounter-&gt;m_Uid);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    std::string backends(<span class="stringliteral">&quot;backends&quot;</span>);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">// Register a counter for the number of registered backends</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    std::string backendsRegistered(<span class="stringliteral">&quot;Backends registered&quot;</span>);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">if</span> (!profilingService.IsCounterRegistered(backendsRegistered))</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> arm::pipe::Counter* registeredBackendsCounter =</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            profilingService.GetCounterRegistry().RegisterCounter(armnn::profiling::BACKEND_ID.Get(),</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                                                                  arm::pipe::REGISTERED_BACKENDS,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                                                                  ArmNN_Runtime,</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                                                                  ZERO,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                                                  ZERO,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                                                  ONE,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                                                  backendsRegistered,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                                                  <span class="stringliteral">&quot;The number of registered backends&quot;</span>,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                                                  backends);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(registeredBackendsCounter);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        profilingService.InitializeCounterValue(registeredBackendsCounter-&gt;m_Uid);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="comment">// Due to backends being registered before the profiling service becomes active,</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="comment">// we need to set the counter to the correct value here</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        profilingService.SetCounterValue(arm::pipe::REGISTERED_BACKENDS, static_cast&lt;uint32_t&gt;(</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a>().Size()));</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="comment">// Register a counter for the number of registered backends</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    std::string backendsUnregistered(<span class="stringliteral">&quot;Backends unregistered&quot;</span>);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">if</span> (!profilingService.IsCounterRegistered(backendsUnregistered))</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keyword">const</span> arm::pipe::Counter* unregisteredBackendsCounter =</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            profilingService.GetCounterRegistry().RegisterCounter(armnn::profiling::BACKEND_ID.Get(),</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                                                  arm::pipe::UNREGISTERED_BACKENDS,</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                                                  ArmNN_Runtime,</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                                                                  ZERO,</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                                                  ZERO,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                                                  ONE,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                                                  backendsUnregistered,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                                                  <span class="stringliteral">&quot;The number of unregistered backends&quot;</span>,</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                                                  backends);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(unregisteredBackendsCounter);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        profilingService.InitializeCounterValue(unregisteredBackendsCounter-&gt;m_Uid);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="comment">// Register a counter for the number of inferences run</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    std::string inferences(<span class="stringliteral">&quot;inferences&quot;</span>);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    std::string inferencesRun(<span class="stringliteral">&quot;Inferences run&quot;</span>);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">if</span> (!profilingService.IsCounterRegistered(inferencesRun))</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keyword">const</span> arm::pipe::Counter* inferencesRunCounter =</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            profilingService.GetCounterRegistry().RegisterCounter(armnn::profiling::BACKEND_ID.Get(),</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                                                 arm::pipe::INFERENCES_RUN,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                                                 ArmNN_Runtime,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                                                 ZERO,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                                                 ZERO,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                                                 ONE,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                                                 inferencesRun,</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                                                 <span class="stringliteral">&quot;The number of inferences run&quot;</span>,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                                                 inferences);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(inferencesRunCounter);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        profilingService.InitializeCounterValue(inferencesRunCounter-&gt;m_Uid);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00015">BackendRegistry.cpp:15</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/<a class="el" href="_arm_n_n_profiling_service_initialiser_8hpp_source.xhtml">ArmNNProfilingServiceInitialiser.hpp</a></li>
<li>src/armnn/<a class="el" href="_arm_n_n_profiling_service_initialiser_8cpp_source.xhtml">ArmNNProfilingServiceInitialiser.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_arm_n_n_profiling_service_initialiser.xhtml">ArmNNProfilingServiceInitialiser</a></li>
    <li class="footer">Generated on Wed Nov 23 2022 10:57:39 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
