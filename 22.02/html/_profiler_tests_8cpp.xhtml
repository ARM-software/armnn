<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/test/ProfilerTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_profiler_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ProfilerTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;<a class="el" href="_i_runtime_8hpp_source.xhtml">armnn/IRuntime.hpp</a>&gt;</code><br />
<code>#include &lt;doctest/doctest.h&gt;</code><br />
<code>#include &lt;algorithm&gt;</code><br />
<code>#include &lt;thread&gt;</code><br />
<code>#include &lt;<a class="el" href="_profiling_8hpp_source.xhtml">Profiling.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_optional_8hpp_source.xhtml">armnn/Optional.hpp</a>&gt;</code><br />
</div>
<p><a href="_profiler_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearmnn"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn.xhtml">armnn</a></td></tr>
<tr class="memdesc:namespacearmnn"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copyright (c) 2021 ARM Limited and Contributors. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a24283be4c70fe5e95e038bdc3bf39ff6"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn.xhtml#a24283be4c70fe5e95e038bdc3bf39ff6">GetProfilerEventSequenceSize</a> (<a class="el" href="classarmnn_1_1_i_profiler.xhtml">armnn::IProfiler</a> *profiler)</td></tr>
<tr class="separator:a24283be4c70fe5e95e038bdc3bf39ff6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b7fbcc307f1c0e2c4e92f4190b2638c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_profiler_tests_8cpp.xhtml#a6b7fbcc307f1c0e2c4e92f4190b2638c">TEST_SUITE</a> (&quot;Profiler&quot;)</td></tr>
<tr class="separator:a6b7fbcc307f1c0e2c4e92f4190b2638c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a6b7fbcc307f1c0e2c4e92f4190b2638c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b7fbcc307f1c0e2c4e92f4190b2638c">&#9670;&nbsp;</a></span>TEST_SUITE()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">TEST_SUITE </td>
          <td>(</td>
          <td class="paramtype">&quot;Profiler&quot;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_profiler_tests_8cpp_source.xhtml#l00062">62</a> of file <a class="el" href="_profiler_tests_8cpp_source.xhtml">ProfilerTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_profiling_8hpp_source.xhtml#l00220">ARMNN_SCOPED_PROFILING_EVENT</a>, <a class="el" href="_profiling_8hpp_source.xhtml#l00217">ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::CpuAcc</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::CpuRef</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00040">IRuntime::Create()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00492">INetwork::Create()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00568">ProfilerManager::GetInstance()</a>, <a class="el" href="_profiling_8cpp_source.xhtml#l00580">ProfilerManager::GetProfiler()</a>, <a class="el" href="_profiler_tests_8cpp_source.xhtml#l00019">armnn::GetProfilerEventSequenceSize()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_network_8cpp_source.xhtml#l01680">armnn::Optimize()</a>, and <a class="el" href="_profiling_8cpp_source.xhtml#l00575">ProfilerManager::RegisterProfiler()</a>.</p>
<div class="fragment"><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;TEST_CASE(<span class="stringliteral">&quot;EnableDisableProfiling&quot;</span>)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    std::unique_ptr&lt;armnn::IProfiler&gt; profiler = std::make_unique&lt;armnn::IProfiler&gt;();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// Check that profiling is disabled by default.</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    CHECK(!profiler-&gt;IsProfilingEnabled());</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// Enable profiling.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    profiler-&gt;EnableProfiling(<span class="keyword">true</span>);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// Check that profiling is enabled.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    CHECK(profiler-&gt;IsProfilingEnabled());</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// Disable profiling.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    profiler-&gt;EnableProfiling(<span class="keyword">false</span>);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="comment">// Check that profiling is disabled.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    CHECK(!profiler-&gt;IsProfilingEnabled());</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;TEST_CASE(<span class="stringliteral">&quot;RegisterUnregisterProfilerSingleThread&quot;</span>)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordtype">bool</span> res = <span class="keyword">false</span>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    RegisterUnregisterProfilerSingleThreadImpl(res);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    CHECK(res);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;TEST_CASE(<span class="stringliteral">&quot;RegisterUnregisterProfilerMultipleThreads&quot;</span>)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordtype">bool</span> res[3] = {<span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>};</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    std::vector&lt;std::thread&gt; threads;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; 3; ++i)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        threads.push_back(std::thread([&amp;res, i]() { RegisterUnregisterProfilerSingleThreadImpl(res[i]); }));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    std::for_each(threads.begin(), threads.end(), [](std::thread&amp; theThread)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        theThread.join();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    });</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0 ; i &lt; 3 ; ++i)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        CHECK(res[i]);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;TEST_CASE(<span class="stringliteral">&quot;ProfilingMacros&quot;</span>)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="comment">// Get a reference to the profiler manager.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <a class="code" href="classarmnn_1_1_profiler_manager.xhtml">armnn::ProfilerManager</a>&amp; profilerManager = <a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a>();</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    { <span class="comment">// --- No profiler ---</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="comment">// Check that there&#39;s no profiler registered for this thread.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        CHECK(!profilerManager.<a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a3756986bc88b9b212d3f983c70c5c129">GetProfiler</a>());</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="comment">// Test scoped event.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        { <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>, <span class="stringliteral">&quot;test&quot;</span>); }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="comment">// Check that we still cannot get a profiler for this thread.</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        CHECK(!profilerManager.<a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a3756986bc88b9b212d3f983c70c5c129">GetProfiler</a>());</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// Create and register a profiler for this thread.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    std::unique_ptr&lt;armnn::IProfiler&gt; profiler = std::make_unique&lt;armnn::IProfiler&gt;();</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    profilerManager.<a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a7b1e3e5bf386004541be2b5b22443208">RegisterProfiler</a>(profiler.get());</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    { <span class="comment">// --- Profiler, but profiling disabled ---</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="comment">// Get current event sequence size.</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordtype">size_t</span> eventSequenceSizeBefore = <a class="code" href="namespacearmnn.xhtml#a24283be4c70fe5e95e038bdc3bf39ff6">armnn::GetProfilerEventSequenceSize</a>(profiler.get());</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="comment">// Test scoped macro.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        { <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>, <span class="stringliteral">&quot;test&quot;</span>); }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="comment">// Check that no profiling event has been added to the sequence.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordtype">size_t</span> eventSequenceSizeAfter = <a class="code" href="namespacearmnn.xhtml#a24283be4c70fe5e95e038bdc3bf39ff6">armnn::GetProfilerEventSequenceSize</a>(profiler.get());</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        CHECK(eventSequenceSizeBefore == eventSequenceSizeAfter);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// Enable profiling.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    profiler-&gt;EnableProfiling(<span class="keyword">true</span>);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    { <span class="comment">// --- Profiler, and profiling enabled ---</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="comment">// Get current event sequence size.</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordtype">size_t</span> eventSequenceSizeBefore = <a class="code" href="namespacearmnn.xhtml#a24283be4c70fe5e95e038bdc3bf39ff6">armnn::GetProfilerEventSequenceSize</a>(profiler.get());</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="comment">// Test scoped macro.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        { <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>, <span class="stringliteral">&quot;test&quot;</span>); }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="comment">// Check that a profiling event has been added to the sequence.</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordtype">size_t</span> eventSequenceSizeAfter = <a class="code" href="namespacearmnn.xhtml#a24283be4c70fe5e95e038bdc3bf39ff6">armnn::GetProfilerEventSequenceSize</a>(profiler.get());</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        CHECK(eventSequenceSizeAfter == eventSequenceSizeBefore + 1);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Disable profiling here to not print out anything on stdout.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    profiler-&gt;EnableProfiling(<span class="keyword">false</span>);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="preprocessor">#if defined(ARMNNREF_ENABLED)</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">// This test unit needs the reference backend, it&#39;s not available if the reference backend is not built</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;TEST_CASE(<span class="stringliteral">&quot;RuntimeLoadNetwork&quot;</span>)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="comment">// Get a reference to the profiler manager.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="classarmnn_1_1_profiler_manager.xhtml">armnn::ProfilerManager</a>&amp; profilerManager = <a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a>();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="comment">// Check that there&#39;s no profiler registered for this thread.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    CHECK(!profilerManager.<a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a3756986bc88b9b212d3f983c70c5c129">GetProfiler</a>());</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="comment">// Build a mock-network and load it into the runtime.</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a> runtime(<a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(options));</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a> networkIdentifier = 1;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> mockNetwork(<a class="code" href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a>());</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    mockNetwork-&gt;AddInputLayer(0, <span class="stringliteral">&quot;test layer&quot;</span>);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    std::vector&lt;armnn::BackendId&gt; backends = { <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a> };</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    runtime-&gt;LoadNetwork(networkIdentifier, <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a>(*mockNetwork, backends, runtime-&gt;GetDeviceSpec()));</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="comment">// Check that now there&#39;s a profiler registered for this thread (created and registered by the loading the network).</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    CHECK(profilerManager.<a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a3756986bc88b9b212d3f983c70c5c129">GetProfiler</a>());</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">// Unload the network.</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    runtime-&gt;UnloadNetwork(networkIdentifier);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">// Check that the profiler has been un-registered for this thread.</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    CHECK(!profilerManager.<a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a3756986bc88b9b212d3f983c70c5c129">GetProfiler</a>());</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;TEST_CASE(<span class="stringliteral">&quot;WriteEventResults&quot;</span>)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;{</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">// Get a reference to the profiler manager.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <a class="code" href="classarmnn_1_1_profiler_manager.xhtml">armnn::ProfilerManager</a>&amp; profileManager = <a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a>();</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="comment">// Create and register a profiler for this thread.</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    std::unique_ptr&lt;armnn::IProfiler&gt; profiler = std::make_unique&lt;armnn::IProfiler&gt;();</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    profileManager.<a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a7b1e3e5bf386004541be2b5b22443208">RegisterProfiler</a>(profiler.get());</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="comment">// Enable profiling.</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    profiler-&gt;EnableProfiling(<span class="keyword">true</span>);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    { <span class="comment">// --- Profiler, and profiling enabled ---</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="comment">// Get current event sequence size.</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordtype">size_t</span> eventSequenceSizeBefore = <a class="code" href="namespacearmnn.xhtml#a24283be4c70fe5e95e038bdc3bf39ff6">armnn::GetProfilerEventSequenceSize</a>(profiler.get());</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="comment">// Test scoped macro.</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="comment">// Need to directly create a ScopedProfilingEvent as the one created by the macro falls out of scope</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="comment">// immediately causing the Event.Stop() function method to be called immediately after the Event.Start()</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="comment">// function resulting in periodic test failures on the Dent and Smith HiKeys</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <a class="code" href="classarmnn_1_1_scoped_profiling_event.xhtml">armnn::ScopedProfilingEvent</a> testEvent(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                                  <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>(),</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                                  <span class="stringliteral">&quot;test&quot;</span>,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                                  <a class="code" href="classarmnn_1_1_wall_clock_timer.xhtml">armnn::WallClockTimer</a>());</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            std::this_thread::sleep_for(std::chrono::milliseconds(10));</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="comment">// Check that a profiling event has been added to the sequence.</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordtype">size_t</span> eventSequenceSizeAfter = <a class="code" href="namespacearmnn.xhtml#a24283be4c70fe5e95e038bdc3bf39ff6">armnn::GetProfilerEventSequenceSize</a>(profiler.get());</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        CHECK(eventSequenceSizeAfter == eventSequenceSizeBefore + 1);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        std::ostringstream output;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        profiler-&gt;AnalyzeEventsAndWriteResults(output);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        CHECK(!output.str().empty());</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="comment">// output should contain event name &#39;test&#39;</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        CHECK(output.str().find(<span class="stringliteral">&quot;test&quot;</span>) != std::string::npos);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="comment">// output should contain headers</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        CHECK(output.str().find(<span class="stringliteral">&quot;Event Sequence - Name&quot;</span>) != std::string::npos);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        CHECK(output.str().find(<span class="stringliteral">&quot;Event Stats - Name&quot;</span>) != std::string::npos);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        CHECK(output.str().find(<span class="stringliteral">&quot;Total&quot;</span>) != std::string::npos);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        CHECK(output.str().find(<span class="stringliteral">&quot;Device&quot;</span>) != std::string::npos);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="comment">// output should contain compute device &#39;CpuAcc&#39;</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        CHECK(output.str().find(<span class="stringliteral">&quot;CpuAcc&quot;</span>) != std::string::npos);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="comment">// output should not contain un-readable numbers</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        CHECK(output.str().find(<span class="stringliteral">&quot;e+&quot;</span>) == std::string::npos);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="comment">// output should not contain un-readable numbers</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        CHECK(output.str().find(<span class="stringliteral">&quot;+&quot;</span>) == std::string::npos);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="comment">// output should not contain zero value</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        CHECK(output.str().find(<span class="stringliteral">&quot; 0 &quot;</span>) == std::string::npos);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="comment">// Disable profiling here to not print out anything on stdout.</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    profiler-&gt;EnableProfiling(<span class="keyword">false</span>);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;TEST_CASE(<span class="stringliteral">&quot;ProfilerJsonPrinter&quot;</span>)</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">class </span>TestInstrument : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_instrument.xhtml">armnn::Instrument</a></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keyword">virtual</span> ~TestInstrument() {}</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_instrument.xhtml#a63ce9b9c6710c0dae98f88d6c602313a">Start</a>()<span class="keyword"> override </span>{}</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_instrument.xhtml#a4d7bebcc22c1b09cf961b83bf84033b6">Stop</a>()<span class="keyword"> override </span>{}</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        std::vector&lt;armnn::Measurement&gt; <a class="code" href="classarmnn_1_1_instrument.xhtml#a4055fcf05306a7478db7e192cf1e679d">GetMeasurements</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            std::vector&lt;armnn::Measurement&gt; measurements;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            measurements.emplace_back(<a class="code" href="structarmnn_1_1_measurement.xhtml">armnn::Measurement</a>(<span class="stringliteral">&quot;Measurement1&quot;</span>,</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                                         1.0,</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                                         armnn::Measurement::Unit::TIME_MS));</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            measurements.emplace_back(<a class="code" href="structarmnn_1_1_measurement.xhtml">armnn::Measurement</a>(<span class="stringliteral">&quot;Measurement2&quot;</span>,</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                                         2.0,</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                                         armnn::Measurement::Unit::TIME_US));</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="keywordflow">return</span> measurements;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classarmnn_1_1_instrument.xhtml#afcc1c3a20bd2860e0ddd21674389246f">GetName</a>()<span class="keyword"> const override</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;TestInstrument&quot;</span>;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        }</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    };</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="comment">// Get a reference to the profiler manager.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <a class="code" href="classarmnn_1_1_profiler_manager.xhtml">armnn::ProfilerManager</a>&amp; profilerManager = <a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a>();</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="comment">// Create and register a profiler for this thread.</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    std::unique_ptr&lt;armnn::IProfiler&gt; profiler = std::make_unique&lt;armnn::IProfiler&gt;();</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    profilerManager.<a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a7b1e3e5bf386004541be2b5b22443208">RegisterProfiler</a>(profiler.get());</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    profiler-&gt;EnableProfiling(<span class="keyword">true</span>);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    {</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <a class="code" href="_profiling_8hpp.xhtml#a1d6c14f3b73fa7a440ebaf53afa53266">ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>,</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                                      <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>(),</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                                      <span class="stringliteral">&quot;Optimizer&quot;</span>,</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                                      TestInstrument())</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <a class="code" href="_profiling_8hpp.xhtml#a1d6c14f3b73fa7a440ebaf53afa53266">ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS</a>(<a class="code" href="namespacearmnn.xhtml">armnn</a>::<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">Compute</a>::CpuAcc,</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                                      <a class="code" href="namespacearmnn.xhtml">armnn</a>::EmptyOptional(),</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                                      &quot;Level 0&quot;,</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                                      TestInstrument())</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            {</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                <a class="code" href="_profiling_8hpp.xhtml#a1d6c14f3b73fa7a440ebaf53afa53266">ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>,</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                                              <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>(),</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                                              <span class="stringliteral">&quot;Level 1A&quot;</span>,</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                                              TestInstrument())</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        }</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    }</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    {</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <a class="code" href="_profiling_8hpp.xhtml#a1d6c14f3b73fa7a440ebaf53afa53266">ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>,</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                                                      <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>(),</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                                                      <span class="stringliteral">&quot;LoadedNetwork&quot;</span>,</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                                                      TestInstrument())</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <a class="code" href="_profiling_8hpp.xhtml#a1d6c14f3b73fa7a440ebaf53afa53266">ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS</a>(<a class="code" href="namespacearmnn.xhtml">armnn</a>::<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">Compute</a>::CpuAcc,</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                                                      <a class="code" href="namespacearmnn.xhtml">armnn</a>::EmptyOptional(),</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                                                      &quot;Level 0&quot;,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                                      TestInstrument())</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        {</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            {</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                <a class="code" href="_profiling_8hpp.xhtml#a1d6c14f3b73fa7a440ebaf53afa53266">ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>,</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                                                              <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>(),</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                                                              <span class="stringliteral">&quot;Level 1A&quot;</span>,</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                                              TestInstrument())</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            }</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    {</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="comment">// Test scoped macro.</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            <a class="code" href="_profiling_8hpp.xhtml#a1d6c14f3b73fa7a440ebaf53afa53266">ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>,</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                                                          <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>(),</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                                                          <span class="stringliteral">&quot;EnqueueWorkload&quot;</span>,</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                                                          TestInstrument())</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <a class="code" href="_profiling_8hpp.xhtml#a1d6c14f3b73fa7a440ebaf53afa53266">ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS</a>(<a class="code" href="namespacearmnn.xhtml">armnn</a>::<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">Compute</a>::CpuAcc,</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                                                          <a class="code" href="namespacearmnn.xhtml">armnn</a>::EmptyOptional(),</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                                                          &quot;Level 0&quot;,</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                                                          TestInstrument())</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                {</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                    <a class="code" href="_profiling_8hpp.xhtml#a1d6c14f3b73fa7a440ebaf53afa53266">ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>,</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                                                                  <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>(),</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                                                                  <span class="stringliteral">&quot;Level 1A&quot;</span>,</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                                                  TestInstrument())</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                }</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                {</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                    <a class="code" href="_profiling_8hpp.xhtml#a1d6c14f3b73fa7a440ebaf53afa53266">ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>,</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                                                  <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>(),</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                                                  <span class="stringliteral">&quot;Level 1B&quot;</span>,</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                                                                  TestInstrument())</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                    {</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                        <a class="code" href="_profiling_8hpp.xhtml#a1d6c14f3b73fa7a440ebaf53afa53266">ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a>,</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                                                                      <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>(),</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                                                      <span class="stringliteral">&quot;Level 2A&quot;</span>,</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                                                                      TestInstrument())</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                    }</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                }</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            }</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    }</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    std::stringbuf buffer;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    std::ostream json(&amp;buffer);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    profiler-&gt;Print(json);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    std::string output = buffer.str();</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(output);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="comment">// Disable profiling here to not print out anything on stdout.</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    profiler-&gt;EnableProfiling(<span class="keyword">false</span>);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="comment">// blessed output validated by a human eyeballing the output to make sure it&#39;s ok and then copying it here.</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="comment">// validation also included running the blessed output through an online json validation site</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    std::string blessedOutput(<span class="stringliteral">&quot;{\n\t\&quot;ArmNN\&quot;: {\n\t\t\&quot;optimize_measurements_#1\&quot;: {\n\t\t\t\&quot;type\&quot;: \&quot;Event\&quot;&quot;</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                              <span class="stringliteral">&quot;,\n\t\t\t\&quot;Measurement1_#1\&quot;: {\n\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;,\n\t\t\t\t\&quot;raw\&quot;&quot;</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                              <span class="stringliteral">&quot;: [\n\t\t\t\t\t1.000000\n\t\t\t\t],\n\t\t\t\t\&quot;unit\&quot;: \&quot;ms\&quot;\n\t\t\t},\n\t\t\t\&quot;&quot;</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                              <span class="stringliteral">&quot;Measurement2_#1\&quot;: {\n\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;,\n\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t&quot;</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                              <span class="stringliteral">&quot;\t\t2.000000\n\t\t\t\t],\n\t\t\t\t\&quot;unit\&quot;: \&quot;us\&quot;\n\t\t\t},\n\t\t\t\&quot;Level 0_#2\&quot;: {\n&quot;</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\&quot;type\&quot;: \&quot;Event\&quot;,\n\t\t\t\t\&quot;Measurement1_#2\&quot;: {\n\t\t\t\t\t\&quot;type\&quot;: \&quot;&quot;</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                              <span class="stringliteral">&quot;Measurement\&quot;,\n\t\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t\t\t1.000000\n\t\t\t\t\t],\n\t\t\t\t\t\&quot;&quot;</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                              <span class="stringliteral">&quot;unit\&quot;: \&quot;ms\&quot;\n\t\t\t\t},\n\t\t\t\t\&quot;Measurement2_#2\&quot;: {\n\t\t\t\t\t\&quot;type\&quot;: \&quot;&quot;</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                              <span class="stringliteral">&quot;Measurement\&quot;,\n\t\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t\t\t2.000000\n\t\t\t\t\t],\n\t\t\t\t\t\&quot;&quot;</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                              <span class="stringliteral">&quot;unit\&quot;: \&quot;us\&quot;\n\t\t\t\t},\n\t\t\t\t\&quot;Level 1A_#3\&quot;: {\n\t\t\t\t\t\&quot;type\&quot;: \&quot;Event\&quot;,\n&quot;</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\t\&quot;Measurement1_#3\&quot;: {\n\t\t\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;,\n&quot;</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t\t\t\t1.000000\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\&quot;unit\&quot;&quot;</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                              <span class="stringliteral">&quot;: \&quot;ms\&quot;\n\t\t\t\t\t},\n\t\t\t\t\t\&quot;Measurement2_#3\&quot;: {\n\t\t\t\t\t\t\&quot;type\&quot;: \&quot;&quot;</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                              <span class="stringliteral">&quot;Measurement\&quot;,\n\t\t\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t\t\t\t2.000000\n\t\t\t\t\t\t],\n\t\t\t&quot;</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\&quot;unit\&quot;: \&quot;us\&quot;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\&quot;&quot;</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                              <span class="stringliteral">&quot;loaded_network_measurements_#4\&quot;: {\n\t\t\t\&quot;type\&quot;: \&quot;Event\&quot;,\n\t\t\t\&quot;&quot;</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                              <span class="stringliteral">&quot;Measurement1_#4\&quot;: {\n\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;,\n\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t&quot;</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                              <span class="stringliteral">&quot;\t1.000000\n\t\t\t\t],\n\t\t\t\t\&quot;unit\&quot;: \&quot;ms\&quot;\n\t\t\t},\n\t\t\t\&quot;Measurement2_#4\&quot;&quot;</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                              <span class="stringliteral">&quot;: {\n\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;,\n\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t\t2.000000\n&quot;</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t],\n\t\t\t\t\&quot;unit\&quot;: \&quot;us\&quot;\n\t\t\t},\n\t\t\t\&quot;Level 0_#5\&quot;: {\n\t\t\t\t\&quot;&quot;</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                              <span class="stringliteral">&quot;type\&quot;: \&quot;Event\&quot;,\n\t\t\t\t\&quot;Measurement1_#5\&quot;: {\n\t\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;&quot;</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                              <span class="stringliteral">&quot;,\n\t\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t\t\t1.000000\n\t\t\t\t\t],\n\t\t\t\t\t\&quot;unit\&quot;: \&quot;&quot;</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                              <span class="stringliteral">&quot;ms\&quot;\n\t\t\t\t},\n\t\t\t\t\&quot;Measurement2_#5\&quot;: {\n\t\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;&quot;</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                              <span class="stringliteral">&quot;,\n\t\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t\t\t2.000000\n\t\t\t\t\t],\n\t\t\t\t\t\&quot;unit\&quot;: \&quot;us\&quot;&quot;</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                              <span class="stringliteral">&quot;\n\t\t\t\t},\n\t\t\t\t\&quot;Level 1A_#6\&quot;: {\n\t\t\t\t\t\&quot;type\&quot;: \&quot;Event\&quot;,\n\t\t\t\t\t\&quot;&quot;</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                              <span class="stringliteral">&quot;Measurement1_#6\&quot;: {\n\t\t\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;,\n\t\t\t\t\t\t\&quot;raw\&quot;: [\n&quot;</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\t\t\t1.000000\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\&quot;unit\&quot;: \&quot;ms\&quot;\n\t\t\t\t\t},\n&quot;</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\t\&quot;Measurement2_#6\&quot;: {\n\t\t\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;,\n\t\t\t\t\t\t\&quot;&quot;</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                              <span class="stringliteral">&quot;raw\&quot;: [\n\t\t\t\t\t\t\t2.000000\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\&quot;unit\&quot;: \&quot;us\&quot;&quot;</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                              <span class="stringliteral">&quot;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\&quot;inference_measurements_#7\&quot;: {\n&quot;</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\&quot;type\&quot;: \&quot;Event\&quot;,\n\t\t\t\&quot;Measurement1_#7\&quot;: {\n\t\t\t\t\&quot;type\&quot;: \&quot;&quot;</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                              <span class="stringliteral">&quot;Measurement\&quot;,\n\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t\t1.000000\n\t\t\t\t],\n\t\t\t\t\&quot;unit\&quot;: \&quot;&quot;</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                              <span class="stringliteral">&quot;ms\&quot;\n\t\t\t},\n\t\t\t\&quot;Measurement2_#7\&quot;: {\n\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;,\n&quot;</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t\t2.000000\n\t\t\t\t],\n\t\t\t\t\&quot;unit\&quot;: \&quot;us\&quot;\n\t\t\t},\n&quot;</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\&quot;Level 0_#8\&quot;: {\n\t\t\t\t\&quot;type\&quot;: \&quot;Event\&quot;,\n\t\t\t\t\&quot;Measurement1_#8\&quot;: {\n&quot;</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;,\n\t\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t\t\t1.000000\n&quot;</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\t],\n\t\t\t\t\t\&quot;unit\&quot;: \&quot;ms\&quot;\n\t\t\t\t},\n\t\t\t\t\&quot;Measurement2_#8\&quot;: {\n&quot;</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;,\n\t\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t\t\t2.000000\n&quot;</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\t],\n\t\t\t\t\t\&quot;unit\&quot;: \&quot;us\&quot;\n\t\t\t\t},\n\t\t\t\t\&quot;Level 1A_#9\&quot;: {\n&quot;</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\t\&quot;type\&quot;: \&quot;Event\&quot;,\n\t\t\t\t\t\&quot;Measurement1_#9\&quot;: {\n\t\t\t\t\t\t\&quot;type\&quot;&quot;</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                              <span class="stringliteral">&quot;: \&quot;Measurement\&quot;,\n\t\t\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t\t\t\t1.000000\n\t\t\t\t\t\t],\n&quot;</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\t\t\&quot;unit\&quot;: \&quot;ms\&quot;\n\t\t\t\t\t},\n\t\t\t\t\t\&quot;Measurement2_#9\&quot;: {\n&quot;</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;,\n\t\t\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t\t\t\t2.000000\n&quot;</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\t\t],\n\t\t\t\t\t\t\&quot;unit\&quot;: \&quot;us\&quot;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\&quot;&quot;</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                              <span class="stringliteral">&quot;Level 1B_#10\&quot;: {\n\t\t\t\t\t\&quot;type\&quot;: \&quot;Event\&quot;,\n\t\t\t\t\t\&quot;Measurement1_#10\&quot;&quot;</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                              <span class="stringliteral">&quot;: {\n\t\t\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;,\n\t\t\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t\t\t\t&quot;</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                              <span class="stringliteral">&quot;1.000000\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\&quot;unit\&quot;: \&quot;ms\&quot;\n\t\t\t\t\t},\n\t\t\t\t\t\&quot;&quot;</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                              <span class="stringliteral">&quot;Measurement2_#10\&quot;: {\n\t\t\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;,\n\t\t\t\t\t\t\&quot;raw\&quot;&quot;</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                              <span class="stringliteral">&quot;: [\n\t\t\t\t\t\t\t2.000000\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\&quot;unit\&quot;: \&quot;us\&quot;\n&quot;</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\t},\n\t\t\t\t\t\&quot;Level 2A_#11\&quot;: {\n\t\t\t\t\t\t\&quot;type\&quot;: \&quot;Event\&quot;,\n\t\t\t&quot;</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\&quot;Measurement1_#11\&quot;: {\n\t\t\t\t\t\t\t\&quot;type\&quot;: \&quot;Measurement\&quot;,\n\t\t\t\t\t\t&quot;</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                              <span class="stringliteral">&quot;\t\&quot;raw\&quot;: [\n\t\t\t\t\t\t\t\t1.000000\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\&quot;unit\&quot;: \&quot;&quot;</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                              <span class="stringliteral">&quot;ms\&quot;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\&quot;Measurement2_#11\&quot;: {\n\t\t\t\t\t\t\t\&quot;type\&quot;: \&quot;&quot;</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                              <span class="stringliteral">&quot;Measurement\&quot;,\n\t\t\t\t\t\t\t\&quot;raw\&quot;: [\n\t\t\t\t\t\t\t\t2.000000\n\t\t\t\t\t\t\t],\n&quot;</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                              <span class="stringliteral">&quot;\t\t\t\t\t\t\t\&quot;unit\&quot;: \&quot;us\&quot;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n&quot;</span></div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                              <span class="stringliteral">&quot;\t}\n}\n&quot;</span>);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    CHECK(output == blessedOutput);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a>().<a class="code" href="classarmnn_1_1_profiler_manager.xhtml#a7b1e3e5bf386004541be2b5b22443208">RegisterProfiler</a>(<span class="keyword">nullptr</span>);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;}</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00040">Runtime.cpp:40</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a></div><div class="ttdoc">CPU Execution: Reference C++ kernels. </div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml_a93857080c2523bf3395e7aa7e6024d5c"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a93857080c2523bf3395e7aa7e6024d5c">armnn::ProfilerManager::GetInstance</a></div><div class="ttdeci">static ProfilerManager &amp; GetInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00568">Profiling.cpp:568</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00031">IRuntime.hpp:31</a></div></div>
<div class="ttc" id="classarmnn_1_1_wall_clock_timer_xhtml"><div class="ttname"><a href="classarmnn_1_1_wall_clock_timer.xhtml">armnn::WallClockTimer</a></div><div class="ttdef"><b>Definition:</b> <a href="_wall_clock_timer_8hpp_source.xhtml#l00038">WallClockTimer.hpp:38</a></div></div>
<div class="ttc" id="structarmnn_1_1_measurement_xhtml"><div class="ttname"><a href="structarmnn_1_1_measurement.xhtml">armnn::Measurement</a></div><div class="ttdef"><b>Definition:</b> <a href="_instrument_8hpp_source.xhtml#l00014">Instrument.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_instrument_xhtml_a63ce9b9c6710c0dae98f88d6c602313a"><div class="ttname"><a href="classarmnn_1_1_instrument.xhtml#a63ce9b9c6710c0dae98f88d6c602313a">armnn::Instrument::Start</a></div><div class="ttdeci">virtual void Start()=0</div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_instrument_xhtml_a4055fcf05306a7478db7e192cf1e679d"><div class="ttname"><a href="classarmnn_1_1_instrument.xhtml#a4055fcf05306a7478db7e192cf1e679d">armnn::Instrument::GetMeasurements</a></div><div class="ttdeci">virtual std::vector&lt; Measurement &gt; GetMeasurements() const =0</div></div>
<div class="ttc" id="_profiling_8hpp_xhtml_a5ccc65e2c464ac05ce311fdae7ede03a"><div class="ttname"><a href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a></div><div class="ttdeci">#define ARMNN_SCOPED_PROFILING_EVENT(backendId, name)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00220">Profiling.hpp:220</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml_a3756986bc88b9b212d3f983c70c5c129"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a3756986bc88b9b212d3f983c70c5c129">armnn::ProfilerManager::GetProfiler</a></div><div class="ttdeci">IProfiler * GetProfiler()</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00580">Profiling.cpp:580</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a24283be4c70fe5e95e038bdc3bf39ff6"><div class="ttname"><a href="namespacearmnn.xhtml#a24283be4c70fe5e95e038bdc3bf39ff6">armnn::GetProfilerEventSequenceSize</a></div><div class="ttdeci">size_t GetProfilerEventSequenceSize(armnn::IProfiler *profiler)</div><div class="ttdef"><b>Definition:</b> <a href="_profiler_tests_8cpp_source.xhtml#l00019">ProfilerTests.cpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456ae"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456ae">armnn::Compute</a></div><div class="ttdeci">Compute</div><div class="ttdoc">The Compute enum is now deprecated and it is now being replaced by BackendId. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00021">BackendId.hpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01680">Network.cpp:1680</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0d8160388a127c1a23b37bc88dc6e2ec"><div class="ttname"><a href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00025">IRuntime.hpp:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml">armnn::ProfilerManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00111">Profiling.hpp:111</a></div></div>
<div class="ttc" id="classarmnn_1_1_scoped_profiling_event_xhtml"><div class="ttname"><a href="classarmnn_1_1_scoped_profiling_event.xhtml">armnn::ScopedProfilingEvent</a></div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00130">Profiling.hpp:130</a></div></div>
<div class="ttc" id="classarmnn_1_1_instrument_xhtml_afcc1c3a20bd2860e0ddd21674389246f"><div class="ttname"><a href="classarmnn_1_1_instrument.xhtml#afcc1c3a20bd2860e0ddd21674389246f">armnn::Instrument::GetName</a></div><div class="ttdeci">virtual const char * GetName() const =0</div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00075">IRuntime.hpp:75</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="classarmnn_1_1_profiler_manager_xhtml_a7b1e3e5bf386004541be2b5b22443208"><div class="ttname"><a href="classarmnn_1_1_profiler_manager.xhtml#a7b1e3e5bf386004541be2b5b22443208">armnn::ProfilerManager::RegisterProfiler</a></div><div class="ttdeci">void RegisterProfiler(IProfiler *profiler)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8cpp_source.xhtml#l00575">Profiling.cpp:575</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea39f8662ca778258e9c6a14f26fec5ec1">armnn::Compute::CpuAcc</a></div><div class="ttdoc">CPU Execution: NEON: ArmCompute. </div></div>
<div class="ttc" id="classarmnn_1_1_instrument_xhtml_a4d7bebcc22c1b09cf961b83bf84033b6"><div class="ttname"><a href="classarmnn_1_1_instrument.xhtml#a4d7bebcc22c1b09cf961b83bf84033b6">armnn::Instrument::Stop</a></div><div class="ttdeci">virtual void Stop()=0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00241">INetwork.hpp:241</a></div></div>
<div class="ttc" id="_profiling_8hpp_xhtml_a1d6c14f3b73fa7a440ebaf53afa53266"><div class="ttname"><a href="_profiling_8hpp.xhtml#a1d6c14f3b73fa7a440ebaf53afa53266">ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS</a></div><div class="ttdeci">#define ARMNN_SCOPED_PROFILING_EVENT_WITH_INSTRUMENTS(backendId, guid,...)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00217">Profiling.hpp:217</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a464f0ff87b1aabf71febaa71321dd40b"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a464f0ff87b1aabf71febaa71321dd40b">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(NetworkOptions networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00492">Network.cpp:492</a></div></div>
<div class="ttc" id="classarmnn_1_1_instrument_xhtml"><div class="ttname"><a href="classarmnn_1_1_instrument.xhtml">armnn::Instrument</a></div><div class="ttdef"><b>Definition:</b> <a href="_instrument_8hpp_source.xhtml#l00051">Instrument.hpp:51</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_9d86fd1fbecbedf5bdb69c7e7235fe5f.xhtml">test</a></li><li class="navelem"><a class="el" href="_profiler_tests_8cpp.xhtml">ProfilerTests.cpp</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:37 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
