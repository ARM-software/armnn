<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/DeepSpeechV1Database.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_deep_speech_v1_database_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DeepSpeechV1Database.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_deep_speech_v1_database_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_lstm_common_8hpp.xhtml">LstmCommon.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_utils_8hpp.xhtml">armnn/TypesUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_numeric_cast_8hpp.xhtml">armnn/utility/NumericCast.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_inference_test_image_8hpp.xhtml">InferenceTestImage.hpp</a>&quot;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TParseElementFunc&gt;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;std::vector&lt;T&gt; <a class="code" href="_network_execution_utils_8hpp.xhtml#a20b7a9d32847d623fb19516762317d0d">ParseArrayImpl</a>(std::istream&amp; stream, TParseElementFunc parseElementFunc, <span class="keyword">const</span> <span class="keywordtype">char</span> * chars = <span class="stringliteral">&quot;\t ,:&quot;</span>)</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    std::vector&lt;T&gt; result;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="comment">// Processes line-by-line.</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    std::string line;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">while</span> (std::getline(stream, line))</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        std::vector&lt;std::string&gt; tokens = <a class="code" href="namespacearmnn_1_1string_utils.xhtml#a25545ea8edf6a26c00077b01294beac5">armnn::stringUtils::StringTokenizer</a>(line, chars);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; token : tokens)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="keywordflow">if</span> (!token.empty()) <span class="comment">// See https://stackoverflow.com/questions/10437406/</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                <span class="keywordflow">try</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                    result.push_back(parseElementFunc(token));</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::exception&amp;)</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                    <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; token &lt;&lt; <span class="stringliteral">&quot;&#39; is not a valid number. It has been ignored.&quot;</span>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType NonQuantizedType&gt;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">auto</span> ParseDataArray(std::istream &amp; stream);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType QuantizedType&gt;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">auto</span> ParseDataArray(std::istream&amp; stream,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span>&amp; quantizationScale,</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                    <span class="keyword">const</span> int32_t&amp; quantizationOffset);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">// NOTE: declaring the template specialisations inline to prevent them</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">//       being flagged as unused functions when -Werror=unused-function is in effect</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword">inline</span> <span class="keyword">auto</span> ParseDataArray&lt;armnn::DataType::Float32&gt;(std::istream &amp; stream)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">return</span> ParseArrayImpl&lt;float&gt;(stream, [](<span class="keyword">const</span> std::string&amp; s) { <span class="keywordflow">return</span> std::stof(s); });</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword">inline</span> <span class="keyword">auto</span> ParseDataArray&lt;armnn::DataType::Signed32&gt;(std::istream &amp; stream)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">return</span> ParseArrayImpl&lt;int&gt;(stream, [](<span class="keyword">const</span> std::string &amp; s) { <span class="keywordflow">return</span> std::stoi(s); });</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keyword">inline</span> <span class="keyword">auto</span> ParseDataArray&lt;armnn::DataType::QAsymmU8&gt;(std::istream&amp; stream,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                                      <span class="keyword">const</span> <span class="keywordtype">float</span>&amp; quantizationScale,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                                      <span class="keyword">const</span> int32_t&amp; quantizationOffset)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">return</span> ParseArrayImpl&lt;uint8_t&gt;(stream,</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                                   [&amp;quantizationScale, &amp;quantizationOffset](<span class="keyword">const</span> std::string &amp; s)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                   {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                                       <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;uint8_t&gt;(</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                               armnn::Quantize&lt;uint8_t&gt;(std::stof(s),</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                                                         quantizationScale,</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                                                                         quantizationOffset));</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                   });</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword">struct </span>DeepSpeechV1TestCaseData</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    DeepSpeechV1TestCaseData(</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keyword">const</span> LstmInput&amp; inputData,</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keyword">const</span> LstmInput&amp; expectedOutputData)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        : m_InputData(inputData)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        , m_ExpectedOutputData(expectedOutputData)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {}</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    LstmInput m_InputData;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    LstmInput m_ExpectedOutputData;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;};</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword">class </span>DeepSpeechV1Database</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">explicit</span> DeepSpeechV1Database(<span class="keyword">const</span> std::string&amp; inputSeqDir, <span class="keyword">const</span> std::string&amp; prevStateHDir,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                  <span class="keyword">const</span> std::string&amp; prevStateCDir, <span class="keyword">const</span> std::string&amp; logitsDir,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                  <span class="keyword">const</span> std::string&amp; newStateHDir, <span class="keyword">const</span> std::string&amp; newStateCDir);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    std::unique_ptr&lt;DeepSpeechV1TestCaseData&gt; GetTestCaseData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> testCaseId);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    std::string m_InputSeqDir;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    std::string m_PrevStateHDir;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    std::string m_PrevStateCDir;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    std::string m_LogitsDir;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    std::string m_NewStateHDir;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    std::string m_NewStateCDir;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;};</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;DeepSpeechV1Database::DeepSpeechV1Database(<span class="keyword">const</span> std::string&amp; inputSeqDir, <span class="keyword">const</span> std::string&amp; prevStateHDir,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                           <span class="keyword">const</span> std::string&amp; prevStateCDir, <span class="keyword">const</span> std::string&amp; logitsDir,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                           <span class="keyword">const</span> std::string&amp; newStateHDir, <span class="keyword">const</span> std::string&amp; newStateCDir)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    : m_InputSeqDir(inputSeqDir)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    , m_PrevStateHDir(prevStateHDir)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    , m_PrevStateCDir(prevStateCDir)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    , m_LogitsDir(logitsDir)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    , m_NewStateHDir(newStateHDir)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    , m_NewStateCDir(newStateCDir)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;std::unique_ptr&lt;DeepSpeechV1TestCaseData&gt; DeepSpeechV1Database::GetTestCaseData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> testCaseId)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="comment">// Load test case input</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">const</span> std::string inputSeqPath   = m_InputSeqDir + <span class="stringliteral">&quot;input_node_0_flat.txt&quot;</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">const</span> std::string prevStateCPath = m_PrevStateCDir + <span class="stringliteral">&quot;previous_state_c_0.txt&quot;</span>;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">const</span> std::string prevStateHPath = m_PrevStateHDir + <span class="stringliteral">&quot;previous_state_h_0.txt&quot;</span>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    std::vector&lt;float&gt; inputSeqData;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    std::vector&lt;float&gt; prevStateCData;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    std::vector&lt;float&gt; prevStateHData;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::ifstream inputSeqFile(inputSeqPath);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    std::ifstream prevStateCTensorFile(prevStateCPath);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    std::ifstream prevStateHTensorFile(prevStateHPath);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        inputSeqData   = ParseDataArray&lt;armnn::DataType::Float32&gt;(inputSeqFile);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        prevStateCData = ParseDataArray&lt;armnn::DataType::Float32&gt;(prevStateCTensorFile);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        prevStateHData = ParseDataArray&lt;armnn::DataType::Float32&gt;(prevStateHTensorFile);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="class_inference_test_image_exception.xhtml">InferenceTestImageException</a>&amp; e)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Failed to load image for test case &quot;</span> &lt;&lt; testCaseId &lt;&lt; <span class="stringliteral">&quot;. Error: &quot;</span> &lt;&lt; e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// Prepare test case expected output</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">const</span> std::string logitsPath   = m_LogitsDir + <span class="stringliteral">&quot;logits.txt&quot;</span>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">const</span> std::string newStateCPath = m_NewStateCDir + <span class="stringliteral">&quot;new_state_c.txt&quot;</span>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">const</span> std::string newStateHPath = m_NewStateHDir + <span class="stringliteral">&quot;new_state_h.txt&quot;</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    std::vector&lt;float&gt; logitsData;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    std::vector&lt;float&gt; expectedNewStateCData;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    std::vector&lt;float&gt; expectedNewStateHData;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    std::ifstream logitsTensorFile(logitsPath);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    std::ifstream newStateCTensorFile(newStateCPath);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    std::ifstream newStateHTensorFile(newStateHPath);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        logitsData     = ParseDataArray&lt;armnn::DataType::Float32&gt;(logitsTensorFile);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        expectedNewStateCData = ParseDataArray&lt;armnn::DataType::Float32&gt;(newStateCTensorFile);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        expectedNewStateHData = ParseDataArray&lt;armnn::DataType::Float32&gt;(newStateHTensorFile);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="class_inference_test_image_exception.xhtml">InferenceTestImageException</a>&amp; e)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(fatal) &lt;&lt; <span class="stringliteral">&quot;Failed to load image for test case &quot;</span> &lt;&lt; testCaseId &lt;&lt; <span class="stringliteral">&quot;. Error: &quot;</span> &lt;&lt; e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>();</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="comment">// use the struct for representing input and output data</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    LstmInput inputDataSingleTest(inputSeqData, prevStateHData, prevStateCData);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    LstmInput expectedOutputsSingleTest(logitsData, expectedNewStateHData, expectedNewStateCData);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;DeepSpeechV1TestCaseData&gt;(inputDataSingleTest, expectedOutputsSingleTest);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;}</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;} <span class="comment">// anonymous namespace</span></div><div class="ttc" id="namespacearmnn_1_1string_utils_xhtml_a25545ea8edf6a26c00077b01294beac5"><div class="ttname"><a href="namespacearmnn_1_1string_utils.xhtml#a25545ea8edf6a26c00077b01294beac5">armnn::stringUtils::StringTokenizer</a></div><div class="ttdeci">std::vector&lt; std::string &gt; StringTokenizer(const std::string &amp;str, const char *delimiters, bool tokenCompression=true)</div><div class="ttdoc">Function to take a string and a list of delimiters and split the string into tokens based on those de...</div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8hpp_source.xhtml#l00023">StringUtils.hpp:23</a></div></div>
<div class="ttc" id="_lstm_common_8hpp_xhtml"><div class="ttname"><a href="_lstm_common_8hpp.xhtml">LstmCommon.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml_abf843cbb29dec939d0731e491bab6f70"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">armnn::Exception::what</a></div><div class="ttdeci">virtual const char * what() const noexcept override</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8cpp_source.xhtml#l00032">Exceptions.cpp:32</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="_numeric_cast_8hpp_xhtml"><div class="ttname"><a href="_numeric_cast_8hpp.xhtml">NumericCast.hpp</a></div></div>
<div class="ttc" id="_inference_test_image_8hpp_xhtml"><div class="ttname"><a href="_inference_test_image_8hpp.xhtml">InferenceTestImage.hpp</a></div></div>
<div class="ttc" id="class_inference_test_image_exception_xhtml"><div class="ttname"><a href="class_inference_test_image_exception.xhtml">InferenceTestImageException</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00015">InferenceTestImage.hpp:15</a></div></div>
<div class="ttc" id="_types_utils_8hpp_xhtml"><div class="ttname"><a href="_types_utils_8hpp.xhtml">TypesUtils.hpp</a></div></div>
<div class="ttc" id="_network_execution_utils_8hpp_xhtml_a20b7a9d32847d623fb19516762317d0d"><div class="ttname"><a href="_network_execution_utils_8hpp.xhtml#a20b7a9d32847d623fb19516762317d0d">ParseArrayImpl</a></div><div class="ttdeci">std::vector&lt; T &gt; ParseArrayImpl(std::istream &amp;stream, TParseElementFunc parseElementFunc, const char *chars=&quot;\,:&quot;)</div><div class="ttdef"><b>Definition:</b> <a href="_network_execution_utils_8hpp_source.xhtml#l00245">NetworkExecutionUtils.hpp:245</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="_deep_speech_v1_database_8hpp.xhtml">DeepSpeechV1Database.hpp</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:31 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
