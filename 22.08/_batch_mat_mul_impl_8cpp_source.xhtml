<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/reference/workloads/BatchMatMulImpl.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_batch_mat_mul_impl_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">BatchMatMulImpl.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_batch_mat_mul_impl_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2022 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_batch_mat_mul_impl_8hpp.xhtml">BatchMatMulImpl.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_workload_data_8hpp.xhtml">armnn/backends/WorkloadData.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_logging_8hpp.xhtml">armnn/Logging.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;{</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="classarmnn_1_1_batch_mat_mul.xhtml#a188b8d270e02af10e876e60e54e7587c">   14</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#a188b8d270e02af10e876e60e54e7587c">BatchMatMul::BatchMatMulImpl</a>()</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    inputXData = inputXDecoder.<a class="code" href="classarmnn_1_1_decoder.xhtml#aafe0168dd5ece89e7c62e8d83a4e57cd">DecodeTensor</a>(inputXInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>());</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    inputYData = inputYDecoder.<a class="code" href="classarmnn_1_1_decoder.xhtml#aafe0168dd5ece89e7c62e8d83a4e57cd">DecodeTensor</a>(inputYInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>());</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    <span class="comment">// At this point, we don&#39;t touch the input decoders - just the resultant vectors</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="comment">// Pre-transpose and pre-adjoint if their vectors aren&#39;t empty</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="comment">// and also DataLayouts which may change with permutations/adjoints</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="comment">// Todo: Have you updated input validation and inferred output shapes to accommodate for these pre-permutes?</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">auto</span> idx = std::vector&lt;unsigned int&gt;(outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(), 0);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#af989fe83accce35c5072407e82a7063e">RecurseBMM</a>(idx, 0);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;}</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="classarmnn_1_1_batch_mat_mul.xhtml#af989fe83accce35c5072407e82a7063e">   29</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#af989fe83accce35c5072407e82a7063e">BatchMatMul::RecurseBMM</a>(std::vector&lt;unsigned int&gt;&amp; curIdx, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> curDim)</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="comment">// We&#39;re working off of the indexes of the output tensor (the max possible shape)</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">if</span>(!(curDim &lt; outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()))</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="comment">// We&#39;re at the leaf level of this call tree, so we operate here (each leaf is a data point)</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="keyword">auto</span> axesToMul = <a class="code" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#adea0557f6519a2d7f1f1424e3de0fc4a">BatchMatMulDescriptor::GetAxesToMul</a>(params,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                                                             inputXInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>(),</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                                                             inputYInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>());</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#ae15c1a71e9465ac3698f32a572746804">AdjustAxesToMulForUnequalRanks</a>(axesToMul);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputXColDim = axesToMul.first.second;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputYRowDim = axesToMul.second.first;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputYRowSize = inputYInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[inputYRowDim];</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordtype">float</span> sum = 0.0f;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="comment">// You could also use inputXColSize</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputYRowIdx = 0; inputYRowIdx &lt; inputYRowSize; inputYRowIdx++) {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keyword">auto</span> xIdx = curIdx;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            xIdx[inputXColDim] = inputYRowIdx;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keyword">auto</span> yIdx = curIdx;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            yIdx[inputYRowDim] = inputYRowIdx;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            sum += (<a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#a47068479ce7cab2a3d7c3e1ae53cf760">GetValueAt</a>(DataSlot::InputX, xIdx)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                  * <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#a47068479ce7cab2a3d7c3e1ae53cf760">GetValueAt</a>(DataSlot::InputY, yIdx));</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#a23985d27f79a44c973bd1e0c2633c191">SetValueAt</a>(sum, <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">DataSlot::Output</a>, curIdx);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[curDim]; i++)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        curIdx[curDim] = i;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#af989fe83accce35c5072407e82a7063e">RecurseBMM</a>(curIdx, curDim+1);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classarmnn_1_1_batch_mat_mul.xhtml#ae15c1a71e9465ac3698f32a572746804">   73</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#ae15c1a71e9465ac3698f32a572746804">BatchMatMul::AdjustAxesToMulForUnequalRanks</a>(</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    std::pair&lt;std::pair&lt;unsigned int, unsigned int&gt;, std::pair&lt;unsigned int, unsigned int&gt;&gt;&amp; axesToMul)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordtype">int</span> rankDiff = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(inputXInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()) -</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                   static_cast&lt;int&gt;(inputYInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>());</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">if</span>(rankDiff == 0)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(rankDiff &lt; 0)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="comment">// Y is the larger one</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        axesToMul.first.first += <span class="keyword">static_cast&lt;</span>std::make_unsigned&lt;unsigned int&gt;::type<span class="keyword">&gt;</span>(std::abs(rankDiff));</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        axesToMul.first.second += <span class="keyword">static_cast&lt;</span>std::make_unsigned&lt;unsigned int&gt;::type<span class="keyword">&gt;</span>(std::abs(rankDiff));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(rankDiff &gt; 0)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="comment">// X is the larger one</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        axesToMul.second.first += <span class="keyword">static_cast&lt;</span>std::make_unsigned&lt;unsigned int&gt;::type<span class="keyword">&gt;</span>(std::abs(rankDiff));</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        axesToMul.second.second += <span class="keyword">static_cast&lt;</span>std::make_unsigned&lt;unsigned int&gt;::type<span class="keyword">&gt;</span>(std::abs(rankDiff));</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classarmnn_1_1_batch_mat_mul.xhtml#a47068479ce7cab2a3d7c3e1ae53cf760">   96</a></span>&#160;<span class="keywordtype">float</span> <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#a47068479ce7cab2a3d7c3e1ae53cf760">BatchMatMul::GetValueAt</a>(<a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#a34243d3189830ed8c4d5cb077e68ccb3">DataSlot</a> type, std::vector&lt;unsigned int&gt; idx)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// This gets the data from the input vector that we have, Not the decoder</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// But for the output, it is operating on the encoder itself</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#a0664b61334b45316933938fa4514a387">AdjustToSafeIdx</a>(type, idx);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> flatIdx = <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#af390ba429c0633b64e71f4228bdbbadf">CalcFlatIdx</a>(type, idx);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordtype">float</span> value = 0.0f;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">switch</span>(type)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">case</span> DataSlot::InputX:</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            value = inputXData[flatIdx];</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">case</span> DataSlot::InputY:</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            value = inputYData[flatIdx];</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">DataSlot::Output</a>:</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            outputEncoder[flatIdx];</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            value = outputEncoder.<a class="code" href="classarmnn_1_1_encoder.xhtml#ac729108381e2340bea12877971713ecb">Get</a>();</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">return</span> value;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="classarmnn_1_1_batch_mat_mul.xhtml#a23985d27f79a44c973bd1e0c2633c191">  124</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#a23985d27f79a44c973bd1e0c2633c191">BatchMatMul::SetValueAt</a>(<span class="keywordtype">float</span> value, <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#a34243d3189830ed8c4d5cb077e68ccb3">DataSlot</a> type, std::vector&lt;unsigned int&gt; idx)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#a0664b61334b45316933938fa4514a387">AdjustToSafeIdx</a>(type, idx);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> flatIdx = <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#af390ba429c0633b64e71f4228bdbbadf">CalcFlatIdx</a>(type, idx);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">switch</span>(type)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">case</span> DataSlot::InputX:</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            inputXData[flatIdx] = value;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">case</span> DataSlot::InputY:</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            inputYData[flatIdx] = value;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">DataSlot::Output</a>:</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            outputEncoder[flatIdx];</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            outputEncoder.<a class="code" href="classarmnn_1_1_encoder.xhtml#ae3b62b846a9c239f332830b9e36030eb">Set</a>(value);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="classarmnn_1_1_batch_mat_mul.xhtml#a0664b61334b45316933938fa4514a387">  147</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#a0664b61334b45316933938fa4514a387">BatchMatMul::AdjustToSafeIdx</a>(<a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#a34243d3189830ed8c4d5cb077e68ccb3">DataSlot</a> type, std::vector&lt;unsigned int&gt;&amp; idx)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dim = 0; dim &lt; idx.size(); dim++)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">switch</span>(type)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordflow">case</span> DataSlot::InputX:</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keyword">auto</span> xRank = inputXInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                <span class="keyword">auto</span> xDiff = outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() - xRank;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keywordflow">if</span> (dim &lt; xDiff ||</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    idx[dim] &gt; inputXInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[dim-xDiff]-1)</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    idx[dim] = 0; <span class="comment">// Broadcasting</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            }</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">case</span> DataSlot::InputY:</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                <span class="keyword">auto</span> yRank = inputYInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keyword">auto</span> yDiff = outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() - yRank;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="keywordflow">if</span> (dim &lt; yDiff ||</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    idx[dim] &gt; inputYInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[dim-yDiff]-1)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    idx[dim] = 0;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">DataSlot::Output</a>:</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                <span class="comment">// Our indices are based off the output</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="classarmnn_1_1_batch_mat_mul.xhtml#af390ba429c0633b64e71f4228bdbbadf">  186</a></span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#af390ba429c0633b64e71f4228bdbbadf">BatchMatMul::CalcFlatIdx</a>(<a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#a34243d3189830ed8c4d5cb077e68ccb3">DataSlot</a> type, <span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; idx)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> result = idx[idx.size()-1];</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dimMultiplier = 1;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> offset;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="comment">// -2 because final dim is already accounted for in the multiplier (last dim is just a multiplier of 1x)</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = static_cast&lt;unsigned int&gt;(idx.size()-2); <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(i) &gt;= 0; i--)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">switch</span>(type)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keywordflow">case</span> DataSlot::InputX:</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                offset = outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() - inputXInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                dimMultiplier *= inputXInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i + 1 - offset];</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keywordflow">case</span> DataSlot::InputY:</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                offset = outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() - inputYInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                dimMultiplier *= inputYInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i + 1 - offset];</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">DataSlot::Output</a>:</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                dimMultiplier *= outputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i+1];</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        result += (idx[i] * dimMultiplier);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="classarmnn_1_1_batch_mat_mul.xhtml#a139ced0af01e092a71f47d443ef75d74">  219</a></span>&#160;std::string <a class="code" href="classarmnn_1_1_batch_mat_mul.xhtml#a139ced0af01e092a71f47d443ef75d74">BatchMatMul::StringifyVec</a>(<span class="keyword">const</span> std::vector&lt;T&gt;&amp; vec)</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;{</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    std::string res = <span class="stringliteral">&quot;{ &quot;</span>;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> x : vec)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    {</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        res += std::to_string(x);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        res += <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    res += <span class="stringliteral">&quot;}&quot;</span>;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_batch_mat_mul_xhtml_af390ba429c0633b64e71f4228bdbbadf"><div class="ttname"><a href="classarmnn_1_1_batch_mat_mul.xhtml#af390ba429c0633b64e71f4228bdbbadf">armnn::BatchMatMul::CalcFlatIdx</a></div><div class="ttdeci">unsigned int CalcFlatIdx(DataSlot type, const std::vector&lt; unsigned int &gt; &amp;idx)</div><div class="ttdef"><b>Definition:</b> <a href="_batch_mat_mul_impl_8cpp_source.xhtml#l00186">BatchMatMulImpl.cpp:186</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div></div>
<div class="ttc" id="classarmnn_1_1_decoder_xhtml_aafe0168dd5ece89e7c62e8d83a4e57cd"><div class="ttname"><a href="classarmnn_1_1_decoder.xhtml#aafe0168dd5ece89e7c62e8d83a4e57cd">armnn::Decoder::DecodeTensor</a></div><div class="ttdeci">virtual std::vector&lt; float &gt; DecodeTensor(const TensorShape &amp;tensorShape, bool isDepthwise=false)=0</div></div>
<div class="ttc" id="classarmnn_1_1_encoder_xhtml_ae3b62b846a9c239f332830b9e36030eb"><div class="ttname"><a href="classarmnn_1_1_encoder.xhtml#ae3b62b846a9c239f332830b9e36030eb">armnn::Encoder::Set</a></div><div class="ttdeci">virtual void Set(IType right)=0</div></div>
<div class="ttc" id="classarmnn_1_1_batch_mat_mul_xhtml_a0664b61334b45316933938fa4514a387"><div class="ttname"><a href="classarmnn_1_1_batch_mat_mul.xhtml#a0664b61334b45316933938fa4514a387">armnn::BatchMatMul::AdjustToSafeIdx</a></div><div class="ttdeci">void AdjustToSafeIdx(DataSlot type, std::vector&lt; unsigned int &gt; &amp;idx)</div><div class="ttdef"><b>Definition:</b> <a href="_batch_mat_mul_impl_8cpp_source.xhtml#l00147">BatchMatMulImpl.cpp:147</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_batch_mat_mul_xhtml_a34243d3189830ed8c4d5cb077e68ccb3"><div class="ttname"><a href="classarmnn_1_1_batch_mat_mul.xhtml#a34243d3189830ed8c4d5cb077e68ccb3">armnn::BatchMatMul::DataSlot</a></div><div class="ttdeci">DataSlot</div><div class="ttdef"><b>Definition:</b> <a href="_batch_mat_mul_impl_8hpp_source.xhtml#l00018">BatchMatMulImpl.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_batch_mat_mul_xhtml_a188b8d270e02af10e876e60e54e7587c"><div class="ttname"><a href="classarmnn_1_1_batch_mat_mul.xhtml#a188b8d270e02af10e876e60e54e7587c">armnn::BatchMatMul::BatchMatMulImpl</a></div><div class="ttdeci">void BatchMatMulImpl()</div><div class="ttdef"><b>Definition:</b> <a href="_batch_mat_mul_impl_8cpp_source.xhtml#l00014">BatchMatMulImpl.cpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_batch_mat_mul_xhtml_a139ced0af01e092a71f47d443ef75d74"><div class="ttname"><a href="classarmnn_1_1_batch_mat_mul.xhtml#a139ced0af01e092a71f47d443ef75d74">armnn::BatchMatMul::StringifyVec</a></div><div class="ttdeci">std::string StringifyVec(const std::vector&lt; T &gt; &amp;vec)</div><div class="ttdef"><b>Definition:</b> <a href="_batch_mat_mul_impl_8cpp_source.xhtml#l00219">BatchMatMulImpl.cpp:219</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_mat_mul_descriptor_xhtml_adea0557f6519a2d7f1f1424e3de0fc4a"><div class="ttname"><a href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml#adea0557f6519a2d7f1f1424e3de0fc4a">armnn::BatchMatMulDescriptor::GetAxesToMul</a></div><div class="ttdeci">static std::pair&lt; std::pair&lt; unsigned int, unsigned int &gt;, std::pair&lt; unsigned int, unsigned int &gt; &gt; GetAxesToMul(const BatchMatMulDescriptor &amp;desc, const TensorShape &amp;tensorXShape, const TensorShape &amp;tensorYShape)</div><div class="ttdoc">Static helper to get the two axes (for each input) for multiplication. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00459">Descriptors.cpp:459</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml"><div class="ttname"><a href="_logging_8hpp.xhtml">Logging.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_encoder_xhtml_ac729108381e2340bea12877971713ecb"><div class="ttname"><a href="classarmnn_1_1_encoder.xhtml#ac729108381e2340bea12877971713ecb">armnn::Encoder::Get</a></div><div class="ttdeci">virtual IType Get() const =0</div></div>
<div class="ttc" id="classarmnn_1_1_batch_mat_mul_xhtml_af989fe83accce35c5072407e82a7063e"><div class="ttname"><a href="classarmnn_1_1_batch_mat_mul.xhtml#af989fe83accce35c5072407e82a7063e">armnn::BatchMatMul::RecurseBMM</a></div><div class="ttdeci">void RecurseBMM(std::vector&lt; unsigned int &gt; &amp;curIdx, unsigned int curDim)</div><div class="ttdef"><b>Definition:</b> <a href="_batch_mat_mul_impl_8cpp_source.xhtml#l00029">BatchMatMulImpl.cpp:29</a></div></div>
<div class="ttc" id="classarmnn_1_1_batch_mat_mul_xhtml_ae15c1a71e9465ac3698f32a572746804"><div class="ttname"><a href="classarmnn_1_1_batch_mat_mul.xhtml#ae15c1a71e9465ac3698f32a572746804">armnn::BatchMatMul::AdjustAxesToMulForUnequalRanks</a></div><div class="ttdeci">void AdjustAxesToMulForUnequalRanks(std::pair&lt; std::pair&lt; unsigned int, unsigned int &gt;, std::pair&lt; unsigned int, unsigned int &gt;&gt; &amp;axesToMul)</div><div class="ttdef"><b>Definition:</b> <a href="_batch_mat_mul_impl_8cpp_source.xhtml#l00073">BatchMatMulImpl.cpp:73</a></div></div>
<div class="ttc" id="classarmnn_1_1_batch_mat_mul_xhtml_a23985d27f79a44c973bd1e0c2633c191"><div class="ttname"><a href="classarmnn_1_1_batch_mat_mul.xhtml#a23985d27f79a44c973bd1e0c2633c191">armnn::BatchMatMul::SetValueAt</a></div><div class="ttdeci">void SetValueAt(float value, DataSlot type, std::vector&lt; unsigned int &gt; idx)</div><div class="ttdef"><b>Definition:</b> <a href="_batch_mat_mul_impl_8cpp_source.xhtml#l00124">BatchMatMulImpl.cpp:124</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_workload_data_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_workload_data_8hpp.xhtml">WorkloadData.hpp</a></div></div>
<div class="ttc" id="_batch_mat_mul_impl_8hpp_xhtml"><div class="ttname"><a href="_batch_mat_mul_impl_8hpp.xhtml">BatchMatMulImpl.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_batch_mat_mul_xhtml_a47068479ce7cab2a3d7c3e1ae53cf760"><div class="ttname"><a href="classarmnn_1_1_batch_mat_mul.xhtml#a47068479ce7cab2a3d7c3e1ae53cf760">armnn::BatchMatMul::GetValueAt</a></div><div class="ttdeci">float GetValueAt(DataSlot type, std::vector&lt; unsigned int &gt; idx)</div><div class="ttdef"><b>Definition:</b> <a href="_batch_mat_mul_impl_8cpp_source.xhtml#l00096">BatchMatMulImpl.cpp:96</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_efae4012d0e357ebeaba7d02491d70e5.xhtml">reference</a></li><li class="navelem"><a class="el" href="dir_d2f3b8e2e64df3181ebe92efcc0a3012.xhtml">workloads</a></li><li class="navelem"><a class="el" href="_batch_mat_mul_impl_8cpp.xhtml">BatchMatMulImpl.cpp</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:30 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
