<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: EthosnRefWorkloadFactory Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_ethosn_ref_workload_factory.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_1_1_ethosn_ref_workload_factory-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">EthosnRefWorkloadFactory Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml">EthosnRefWorkloadFactory.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for EthosnRefWorkloadFactory:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_ethosn_ref_workload_factory.png" usemap="#EthosnRefWorkloadFactory_map" alt=""/>
  <map id="EthosnRefWorkloadFactory_map" name="EthosnRefWorkloadFactory_map">
<area href="classarmnn_1_1_i_workload_factory.xhtml" alt="IWorkloadFactory" shape="rect" coords="0,0,166,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a0a4cf65a36e28a275ef48c68b9e35b28"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml#a0a4cf65a36e28a275ef48c68b9e35b28">EthosnRefWorkloadFactory</a> (const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_ethosn_ref_memory_manager.xhtml">EthosnRefMemoryManager</a> &gt; &amp;memoryManager, bool winograd, std::string BlockConfigs)</td></tr>
<tr class="separator:a0a4cf65a36e28a275ef48c68b9e35b28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78da14a95a82fa06592f3c7a00301c2b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml#a78da14a95a82fa06592f3c7a00301c2b">EthosnRefWorkloadFactory</a> ()</td></tr>
<tr class="separator:a78da14a95a82fa06592f3c7a00301c2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af841705ffe356b83591dc0ce651828df"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml#af841705ffe356b83591dc0ce651828df">~EthosnRefWorkloadFactory</a> ()</td></tr>
<tr class="separator:af841705ffe356b83591dc0ce651828df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2cd7e29596b68884bfaade25f8f0dc0"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">GetBackendId</a> () const override</td></tr>
<tr class="separator:ae2cd7e29596b68884bfaade25f8f0dc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed0a782f32856bde72bc10d9381dc11e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">SupportsSubTensors</a> () const override</td></tr>
<tr class="separator:aed0a782f32856bde72bc10d9381dc11e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7ed41b965e30999ff8250e09d7b5abe"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml#af7ed41b965e30999ff8250e09d7b5abe">CreateSubTensorHandle</a> (<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &amp;parent, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> const &amp;subTensorShape, unsigned int const *subTensorOrigin) const override</td></tr>
<tr class="separator:af7ed41b965e30999ff8250e09d7b5abe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7239477811c44d4398f0c2d291d9ea76"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">CreateTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, const bool IsMemoryManaged=true) const override</td></tr>
<tr class="separator:a7239477811c44d4398f0c2d291d9ea76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaed323bbcbaded57334783e4732ee3ed"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml#aaed323bbcbaded57334783e4732ee3ed">CreateTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout, const bool IsMemoryManaged=true) const override</td></tr>
<tr class="separator:aaed323bbcbaded57334783e4732ee3ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b06edab4eef1822445e4201a1262635"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml#a7b06edab4eef1822445e4201a1262635">CreateInput</a> (const <a class="el" href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">InputQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a7b06edab4eef1822445e4201a1262635"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d463f116733f47ce2bab08e430d1ba2"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml#a5d463f116733f47ce2bab08e430d1ba2">CreateOutput</a> (const <a class="el" href="namespacearmnn.xhtml#a37a1a6b381ccc76df203fee023234996">OutputQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a5d463f116733f47ce2bab08e430d1ba2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a661b8b943d4a28ef6c8fd19bf223c61e"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml#a661b8b943d4a28ef6c8fd19bf223c61e">CreateConvolution2d</a> (const <a class="el" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a661b8b943d4a28ef6c8fd19bf223c61e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48ebe514c1ca3e41edccdd7682bf38ca"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml#a48ebe514c1ca3e41edccdd7682bf38ca">CreateDepthwiseConvolution2d</a> (const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">DepthwiseConvolution2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a48ebe514c1ca3e41edccdd7682bf38ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29e02d375261a32c39635d6833a49333"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml#a29e02d375261a32c39635d6833a49333">CreateTransposeConvolution2d</a> (const <a class="el" href="structarmnn_1_1_transpose_convolution2d_queue_descriptor.xhtml">TransposeConvolution2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:a29e02d375261a32c39635d6833a49333"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae22c3b8013c1ee7a5459016c0595d444"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml#ae22c3b8013c1ee7a5459016c0595d444">CreatePooling2d</a> (const <a class="el" href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">Pooling2dQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const override</td></tr>
<tr class="separator:ae22c3b8013c1ee7a5459016c0595d444"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_workload_factory"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_workload_factory')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td></tr>
<tr class="memitem:aab62208f96483015c29ad58549efedd8 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aab62208f96483015c29ad58549efedd8">~IWorkloadFactory</a> ()</td></tr>
<tr class="separator:aab62208f96483015c29ad58549efedd8 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54a596adc0162c80f33a6cda4f33a6ef inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a54a596adc0162c80f33a6cda4f33a6ef">AfterWorkloadsCreated</a> ()</td></tr>
<tr class="separator:a54a596adc0162c80f33a6cda4f33a6ef inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13060ebb89d2c21a7a5d897e99cccf72 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a> (<a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> type, const <a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a13060ebb89d2c21a7a5d897e99cccf72 inherit pub_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a9992ea7c353e8597fbd8ae426f4612ae"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml#a9992ea7c353e8597fbd8ae426f4612ae">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a9992ea7c353e8597fbd8ae426f4612ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classarmnn_1_1_i_workload_factory"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classarmnn_1_1_i_workload_factory')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></td></tr>
<tr class="memitem:a74dc9ec1a223eab8b072368b2dacee87 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;backendId, const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a74dc9ec1a223eab8b072368b2dacee87 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d94ea841143b76fe08ccb308839bfd7 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a7d94ea841143b76fe08ccb308839bfd7">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a7d94ea841143b76fe08ccb308839bfd7 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaff50773427132e1066a7de56a53db1 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aeaff50773427132e1066a7de56a53db1">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions)</td></tr>
<tr class="separator:aeaff50773427132e1066a7de56a53db1 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52ba8d60c6582a847ef7bc914116d394 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a52ba8d60c6582a847ef7bc914116d394">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;backendId, const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions)</td></tr>
<tr class="separator:a52ba8d60c6582a847ef7bc914116d394 inherit pub_static_methods_classarmnn_1_1_i_workload_factory"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml#l00019">19</a> of file <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml">EthosnRefWorkloadFactory.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a0a4cf65a36e28a275ef48c68b9e35b28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a4cf65a36e28a275ef48c68b9e35b28">&#9670;&nbsp;</a></span>EthosnRefWorkloadFactory() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml">EthosnRefWorkloadFactory</a> </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_ethosn_ref_memory_manager.xhtml">EthosnRefMemoryManager</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>winograd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>BlockConfigs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00024">24</a> of file <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml">EthosnRefWorkloadFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    : m_MemoryManager(memoryManager)</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  m_EnableWinograd = winograd;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  m_BlockConfigs = BlockConfigs;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a78da14a95a82fa06592f3c7a00301c2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78da14a95a82fa06592f3c7a00301c2b">&#9670;&nbsp;</a></span>EthosnRefWorkloadFactory() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml">EthosnRefWorkloadFactory</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml">EthosnRefWorkloadFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    : m_MemoryManager(<span class="keyword">new</span> EthosnRefMemoryManager())</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af841705ffe356b83591dc0ce651828df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af841705ffe356b83591dc0ce651828df">&#9670;&nbsp;</a></span>~EthosnRefWorkloadFactory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml">EthosnRefWorkloadFactory</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml#l00025">25</a> of file <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml">EthosnRefWorkloadFactory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00036">EthosnRefWorkloadFactory::GetBackendId()</a>, and <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00041">EthosnRefWorkloadFactory::IsLayerSupported()</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a661b8b943d4a28ef6c8fd19bf223c61e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a661b8b943d4a28ef6c8fd19bf223c61e">&#9670;&nbsp;</a></span>CreateConvolution2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateConvolution2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00107">107</a> of file <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml">EthosnRefWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml#l00035">EthosnRefWorkloadFactory::CreateSubTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;EthosnRefConvolution2dWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>, m_EnableWinograd, m_BlockConfigs);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a48ebe514c1ca3e41edccdd7682bf38ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48ebe514c1ca3e41edccdd7682bf38ca">&#9670;&nbsp;</a></span>CreateDepthwiseConvolution2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateDepthwiseConvolution2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">DepthwiseConvolution2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00113">113</a> of file <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml">EthosnRefWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml#l00035">EthosnRefWorkloadFactory::CreateSubTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;{</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;EthosnRefDepthwiseConvolution2dWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7b06edab4eef1822445e4201a1262635"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b06edab4eef1822445e4201a1262635">&#9670;&nbsp;</a></span>CreateInput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateInput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">InputQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa83593035de93eb4b6dddb9dc8f5ced6">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00068">68</a> of file <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml">EthosnRefWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00018">WorkloadInfo::m_InputTensorInfos</a>, and <a class="el" href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00019">WorkloadInfo::m_OutputTensorInfos</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml#l00035">EthosnRefWorkloadFactory::CreateSubTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_InputTensorInfos.empty() )</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;EthosnRefWorkloadFactory::CreateInput: Input cannot be zero length&quot;</span>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_OutputTensorInfos.empty())</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;EthosnRefWorkloadFactory::CreateInput: Output cannot be zero length&quot;</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_InputTensorInfos[0].GetNumBytes() != <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_OutputTensorInfos[0].GetNumBytes())</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;EthosnRefWorkloadFactory::CreateInput: data input and output differ in byte count.&quot;</span>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;CopyMemGenericWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5d463f116733f47ce2bab08e430d1ba2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d463f116733f47ce2bab08e430d1ba2">&#9670;&nbsp;</a></span>CreateOutput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateOutput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a37a1a6b381ccc76df203fee023234996">OutputQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00088">88</a> of file <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml">EthosnRefWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00018">WorkloadInfo::m_InputTensorInfos</a>, and <a class="el" href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00019">WorkloadInfo::m_OutputTensorInfos</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml#l00035">EthosnRefWorkloadFactory::CreateSubTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_InputTensorInfos.empty() )</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;EthosnRefWorkloadFactory::CreateOutput: Input cannot be zero length&quot;</span>);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_OutputTensorInfos.empty())</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;EthosnRefWorkloadFactory::CreateOutput: Output cannot be zero length&quot;</span>);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_InputTensorInfos[0].GetNumBytes() != <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_OutputTensorInfos[0].GetNumBytes())</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;EthosnRefWorkloadFactory::CreateOutput: data input and output differ in byte count.&quot;</span>);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;CopyMemGenericWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae22c3b8013c1ee7a5459016c0595d444"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae22c3b8013c1ee7a5459016c0595d444">&#9670;&nbsp;</a></span>CreatePooling2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreatePooling2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">Pooling2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00127">127</a> of file <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml">EthosnRefWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml#l00035">EthosnRefWorkloadFactory::CreateSubTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;EthosnRefPooling2dWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af7ed41b965e30999ff8250e09d7b5abe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7ed41b965e30999ff8250e09d7b5abe">&#9670;&nbsp;</a></span>CreateSubTensorHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>&gt; CreateSubTensorHandle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &amp;&#160;</td>
          <td class="paramname"><em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> const &amp;&#160;</td>
          <td class="paramname"><em>subTensorShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int const *&#160;</td>
          <td class="paramname"><em>subTensorOrigin</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac043991b839903b2ba9da884e4020848">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml#l00035">35</a> of file <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml">EthosnRefWorkloadFactory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00107">EthosnRefWorkloadFactory::CreateConvolution2d()</a>, <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00113">EthosnRefWorkloadFactory::CreateDepthwiseConvolution2d()</a>, <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00068">EthosnRefWorkloadFactory::CreateInput()</a>, <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00088">EthosnRefWorkloadFactory::CreateOutput()</a>, <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00127">EthosnRefWorkloadFactory::CreatePooling2d()</a>, <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00048">EthosnRefWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00120">EthosnRefWorkloadFactory::CreateTransposeConvolution2d()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(parent, subTensorShape, subTensorOrigin);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7239477811c44d4398f0c2d291d9ea76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7239477811c44d4398f0c2d291d9ea76">&#9670;&nbsp;</a></span>CreateTensorHandle() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt; CreateTensorHandle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>IsMemoryManaged</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00048">48</a> of file <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml">EthosnRefWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml#l00035">EthosnRefWorkloadFactory::CreateSubTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="comment">// For EthosnRef it is okay to make the TensorHandle memory managed as it can also store a pointer</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// to unmanaged memory. This also ensures memory alignment.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(isMemoryManaged);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;EthosnRefTensorHandle&gt;(tensorInfo, m_MemoryManager);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aaed323bbcbaded57334783e4732ee3ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaed323bbcbaded57334783e4732ee3ed">&#9670;&nbsp;</a></span>CreateTensorHandle() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt; CreateTensorHandle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>dataLayout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>IsMemoryManaged</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af0b0226f767fd570877710b84c7caa2a">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00057">57</a> of file <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml">EthosnRefWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// For EthosnRef it is okay to make the TensorHandle memory managed as it can also store a pointer</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="comment">// to unmanaged memory. This also ensures memory alignment.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(isMemoryManaged, dataLayout);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;EthosnRefTensorHandle&gt;(tensorInfo, m_MemoryManager);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a29e02d375261a32c39635d6833a49333"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29e02d375261a32c39635d6833a49333">&#9670;&nbsp;</a></span>CreateTransposeConvolution2d()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateTransposeConvolution2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_queue_descriptor.xhtml">TransposeConvolution2dQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00120">120</a> of file <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml">EthosnRefWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml#l00035">EthosnRefWorkloadFactory::CreateSubTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;{</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;EthosnRefTransposeConvolution2dWorkload&gt;(descriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae2cd7e29596b68884bfaade25f8f0dc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2cd7e29596b68884bfaade25f8f0dc0">&#9670;&nbsp;</a></span>GetBackendId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp; GetBackendId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9f7e4296485d2812e7996089149c96d1">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml">EthosnRefWorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml#l00025">EthosnRefWorkloadFactory::~EthosnRefWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> s_Id;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a9992ea7c353e8597fbd8ae426f4612ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9992ea7c353e8597fbd8ae426f4612ae">&#9670;&nbsp;</a></span>IsLayerSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_layer.xhtml">Layer</a> &amp;&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt;&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>outReasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml">EthosnRefWorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_workload_factory_8cpp_source.xhtml#l01532">IWorkloadFactory::IsLayerSupported()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml#l00025">EthosnRefWorkloadFactory::~EthosnRefWorkloadFactory()</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IWorkloadFactory::IsLayerSupported</a>(s_Id, layer, dataType, outReasonIfUnsupported);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a74dc9ec1a223eab8b072368b2dacee87"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">armnn::IWorkloadFactory::IsLayerSupported</a></div><div class="ttdeci">static bool IsLayerSupported(const BackendId &amp;backendId, const IConnectableLayer &amp;layer, Optional&lt; DataType &gt; dataType, std::string &amp;outReasonIfUnsupported)</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01532">WorkloadFactory.cpp:1532</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aed0a782f32856bde72bc10d9381dc11e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed0a782f32856bde72bc10d9381dc11e">&#9670;&nbsp;</a></span>SupportsSubTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SupportsSubTensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a37f4eba7877deb34f4d8d64c9bcb9ab5">IWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml#l00033">33</a> of file <a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml">EthosnRefWorkloadFactory.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/backends/ethosnref/<a class="el" href="_ethosn_ref_workload_factory_8hpp_source.xhtml">EthosnRefWorkloadFactory.hpp</a></li>
<li>src/backends/ethosnref/<a class="el" href="_ethosn_ref_workload_factory_8cpp_source.xhtml">EthosnRefWorkloadFactory.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_ethosn_ref_workload_factory.xhtml">EthosnRefWorkloadFactory</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:38 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
