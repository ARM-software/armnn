<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/ImageTensorGenerator/ImageTensorGenerator.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_image_tensor_generator_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ImageTensorGenerator.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_image_tensor_generator_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;../InferenceTestImage.hpp&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_utils_8hpp.xhtml">armnn/TypesUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_t_container_8hpp.xhtml">armnnUtils/TContainer.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_permute_8hpp.xhtml">armnnUtils/Permute.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;iterator&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">// Parameters used in normalizing images</span></div><div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="struct_normalization_parameters.xhtml">   19</a></span>&#160;<span class="keyword">struct </span><a class="code" href="struct_normalization_parameters.xhtml">NormalizationParameters</a></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="struct_normalization_parameters.xhtml#a1d28dec57cce925ad92342891bd71e7c">   21</a></span>&#160;    <span class="keywordtype">float</span> <a class="code" href="struct_normalization_parameters.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>{ 1.0 };</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="struct_normalization_parameters.xhtml#a6e5ac6f9d3272e6670522daaacc04442">   22</a></span>&#160;    std::array&lt;float, 3&gt; <a class="code" href="struct_normalization_parameters.xhtml#a6e5ac6f9d3272e6670522daaacc04442">mean</a>{ { 0.0, 0.0, 0.0 } };</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="struct_normalization_parameters.xhtml#a8fdb461f0b4417f4ebff10b3413a948d">   23</a></span>&#160;    std::array&lt;float, 3&gt; <a class="code" href="struct_normalization_parameters.xhtml#a8fdb461f0b4417f4ebff10b3413a948d">stddev</a>{ { 1.0, 1.0, 1.0 } };</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;};</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="_image_tensor_generator_8hpp.xhtml#a7599848540a5f43e977119c054b3563e">   26</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="_image_tensor_generator_8hpp.xhtml#a7599848540a5f43e977119c054b3563e">SupportedFrontend</a></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <a class="code" href="_image_tensor_generator_8hpp.xhtml#a7599848540a5f43e977119c054b3563ea35120628a2097980f88fd49246124cae">TFLite</a>     = 0,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;};</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">/** Get normalization parameters.</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"> * Note that different flavours of models and different model data types have different normalization methods.</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> * This tool currently only supports TF and TFLite models</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"> * @param[in] modelFormat   One of the supported frontends</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"> * @param[in] outputType    Output type of the image tensor, also the type of the intended model</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="_image_tensor_generator_8hpp.xhtml#a572494250ece8d94b68ea490d0bf46e4">   38</a></span>&#160;<a class="code" href="struct_normalization_parameters.xhtml">NormalizationParameters</a> <a class="code" href="_image_tensor_generator_8hpp.xhtml#a572494250ece8d94b68ea490d0bf46e4">GetNormalizationParameters</a>(<span class="keyword">const</span> <a class="code" href="_image_tensor_generator_8hpp.xhtml#a7599848540a5f43e977119c054b3563e">SupportedFrontend</a>&amp; modelFormat,</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a>&amp; outputType)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="struct_normalization_parameters.xhtml">NormalizationParameters</a> normParams;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="comment">// Explicitly set default parameters</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    normParams.<a class="code" href="struct_normalization_parameters.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>  = 1.0;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    normParams.<a class="code" href="struct_normalization_parameters.xhtml#a6e5ac6f9d3272e6670522daaacc04442">mean</a>   = { 0.0, 0.0, 0.0 };</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    normParams.<a class="code" href="struct_normalization_parameters.xhtml#a8fdb461f0b4417f4ebff10b3413a948d">stddev</a> = { 1.0, 1.0, 1.0 };</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">switch</span> (modelFormat)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="_image_tensor_generator_8hpp.xhtml#a7599848540a5f43e977119c054b3563ea35120628a2097980f88fd49246124cae">SupportedFrontend::TFLite</a>:</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keywordflow">switch</span> (outputType)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>:</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                    normParams.<a class="code" href="struct_normalization_parameters.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a> = 127.5;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                    normParams.<a class="code" href="struct_normalization_parameters.xhtml#a6e5ac6f9d3272e6670522daaacc04442">mean</a>  = { 1.0, 1.0, 1.0 };</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a>:</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                    normParams.<a class="code" href="struct_normalization_parameters.xhtml#a6e5ac6f9d3272e6670522daaacc04442">mean</a> = { 128.0, 128.0, 128.0 };</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a>:</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>:</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                    normParams.<a class="code" href="struct_normalization_parameters.xhtml#a6e5ac6f9d3272e6670522daaacc04442">mean</a> = { 128.0, 128.0, 128.0 };</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <span class="keywordflow">default</span>:</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> normParams;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">/** Prepare raw image tensor data by loading the image from imagePath and preprocessing it.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> * @param[in] imagePath     Path to the image file</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> * @param[in] newWidth      The new width of the output image tensor</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> * @param[in] newHeight     The new height of the output image tensor</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> * @param[in] normParams    Normalization parameters for the normalization of the image</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> * @param[in] batchSize     Batch size</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> * @param[in] outputLayout  Data layout of the output image tensor</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElemType&gt;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;std::vector&lt;ElemType&gt; <a class="code" href="_image_tensor_generator_8hpp.xhtml#af39456ac4838301c6fc5b44d6a57479c">PrepareImageTensor</a>(<span class="keyword">const</span> std::string&amp; imagePath,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> newWidth,</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> newHeight,</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="struct_normalization_parameters.xhtml">NormalizationParameters</a>&amp; normParams,</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize                = 1,</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a>&amp; outputLayout = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a>);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">// Prepare float32 image tensor</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="_image_tensor_generator_8hpp.xhtml#affacfe95f011fce3b897b2745880f82a">   91</a></span>&#160;std::vector&lt;float&gt; <a class="code" href="_image_tensor_generator_8hpp.xhtml#affacfe95f011fce3b897b2745880f82a">PrepareImageTensor&lt;float&gt;</a>(<span class="keyword">const</span> std::string&amp; imagePath,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> newWidth,</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                                             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> newHeight,</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="struct_normalization_parameters.xhtml">NormalizationParameters</a>&amp; normParams,</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a>&amp; outputLayout)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Generate image tensor</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    std::vector&lt;float&gt; imageData;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="class_inference_test_image.xhtml">InferenceTestImage</a> testImage(imagePath.c_str());</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">if</span> (newWidth == 0)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        newWidth = testImage.<a class="code" href="class_inference_test_image.xhtml#a4ec823e49ce46950b3d4cee1efff050b">GetWidth</a>();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">if</span> (newHeight == 0)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        newHeight = testImage.GetHeight();</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">// Resize the image to new width and height or keep at original dimensions if the new width and height are specified</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="comment">// as 0 Centre/Normalise the image.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    imageData = testImage.Resize(newWidth, newHeight, <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>(),</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                 <a class="code" href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bcea773b27aa8d21604182ba90d029ad2e13">InferenceTestImage::ResizingMethods::BilinearAndNormalized</a>, normParams.<a class="code" href="struct_normalization_parameters.xhtml#a6e5ac6f9d3272e6670522daaacc04442">mean</a>,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                 normParams.<a class="code" href="struct_normalization_parameters.xhtml#a8fdb461f0b4417f4ebff10b3413a948d">stddev</a>, normParams.<a class="code" href="struct_normalization_parameters.xhtml#a1d28dec57cce925ad92342891bd71e7c">scale</a>);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">if</span> (outputLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a>)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="comment">// Convert to NCHW format</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a> <a class="code" href="namespacearmnn_utils.xhtml#a12124184ac6aec018beb98b9715330c7">NHWCToArmNN</a> = { 0, 2, 3, 1 };</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> dstShape({ batchSize, 3, newHeight, newWidth });</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        std::vector&lt;float&gt; tempImage(imageData.size());</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <a class="code" href="namespacearmnn_utils.xhtml#af3c74017185773dd61d8ca6662d65d43">armnnUtils::Permute</a>(dstShape, NHWCToArmNN, imageData.data(), tempImage.data(), <span class="keyword">sizeof</span>(float));</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        imageData.swap(tempImage);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">return</span> imageData;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">// Prepare int32 image tensor</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="_image_tensor_generator_8hpp.xhtml#ac1e8e68c74e5d1c8fd19a91a68de3cb7">  128</a></span>&#160;std::vector&lt;int&gt; <a class="code" href="_image_tensor_generator_8hpp.xhtml#ac1e8e68c74e5d1c8fd19a91a68de3cb7">PrepareImageTensor&lt;int&gt;</a>(<span class="keyword">const</span> std::string&amp; imagePath,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> newWidth,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                                         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> newHeight,</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="struct_normalization_parameters.xhtml">NormalizationParameters</a>&amp; normParams,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                                         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a>&amp; outputLayout)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// Get float32 image tensor</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    std::vector&lt;float&gt; imageDataFloat =</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <a class="code" href="_image_tensor_generator_8hpp.xhtml#affacfe95f011fce3b897b2745880f82a">PrepareImageTensor&lt;float&gt;</a>(imagePath, newWidth, newHeight, normParams, batchSize, outputLayout);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">// Convert to int32 image tensor with static cast</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    std::vector&lt;int&gt; imageDataInt;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    imageDataInt.reserve(imageDataFloat.size());</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    std::transform(imageDataFloat.begin(), imageDataFloat.end(), std::back_inserter(imageDataInt),</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                   [](<span class="keywordtype">float</span> val) { <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(val); });</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">return</span> imageDataInt;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">// Prepare qasymmu8 image tensor</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="_image_tensor_generator_8hpp.xhtml#ac372cd2b257f33f29999217e1d2d8a37">  148</a></span>&#160;std::vector&lt;uint8_t&gt; <a class="code" href="_image_tensor_generator_8hpp.xhtml#ac372cd2b257f33f29999217e1d2d8a37">PrepareImageTensor&lt;uint8_t&gt;</a>(<span class="keyword">const</span> std::string&amp; imagePath,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> newWidth,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> newHeight,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="struct_normalization_parameters.xhtml">NormalizationParameters</a>&amp; normParams,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a>&amp; outputLayout)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// Get float32 image tensor</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    std::vector&lt;float&gt; imageDataFloat =</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <a class="code" href="_image_tensor_generator_8hpp.xhtml#affacfe95f011fce3b897b2745880f82a">PrepareImageTensor&lt;float&gt;</a>(imagePath, newWidth, newHeight, normParams, batchSize, outputLayout);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    std::vector&lt;uint8_t&gt; imageDataQasymm8;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    imageDataQasymm8.reserve(imageDataFloat.size());</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Convert to uint8 image tensor with static cast</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    std::transform(imageDataFloat.begin(), imageDataFloat.end(), std::back_inserter(imageDataQasymm8),</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                   [](<span class="keywordtype">float</span> val) { <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(val); });</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">return</span> imageDataQasymm8;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;}</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">// Prepare qasymms8 image tensor</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="_image_tensor_generator_8hpp.xhtml#ab8880b4ae59cf7f185a5a192cdca4720">  168</a></span>&#160;std::vector&lt;int8_t&gt; <a class="code" href="_image_tensor_generator_8hpp.xhtml#ab8880b4ae59cf7f185a5a192cdca4720">PrepareImageTensor&lt;int8_t&gt;</a>(<span class="keyword">const</span> std::string&amp; imagePath,</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                                               <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> newWidth,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                               <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> newHeight,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="struct_normalization_parameters.xhtml">NormalizationParameters</a>&amp; normParams,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                               <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a>&amp; outputLayout)</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;{</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="comment">// Get float32 image tensor</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    std::vector&lt;float&gt; imageDataFloat =</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <a class="code" href="_image_tensor_generator_8hpp.xhtml#affacfe95f011fce3b897b2745880f82a">PrepareImageTensor&lt;float&gt;</a>(imagePath, newWidth, newHeight, normParams, batchSize, outputLayout);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    std::vector&lt;int8_t&gt; imageDataQasymms8;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    imageDataQasymms8.reserve(imageDataFloat.size());</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="comment">// Convert to uint8 image tensor with static cast</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    std::transform(imageDataFloat.begin(), imageDataFloat.end(), std::back_inserter(imageDataQasymms8),</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                   [](<span class="keywordtype">float</span> val) { <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(val); });</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">return</span> imageDataQasymms8;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">/** Write image tensor to ofstream</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"> * @param[in] imageData         Image tensor data</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"> * @param[in] imageTensorFile   Output filestream (ofstream) to which the image tensor data is written</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElemType&gt;</div><div class="line"><a name="l00192"></a><span class="lineno"><a class="line" href="_image_tensor_generator_8hpp.xhtml#a292c4c49fc943bfcb7ee1ce1435d4690">  192</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="_image_tensor_generator_8hpp.xhtml#a292c4c49fc943bfcb7ee1ce1435d4690">WriteImageTensorImpl</a>(<span class="keyword">const</span> std::vector&lt;ElemType&gt;&amp; imageData, std::ofstream&amp; imageTensorFile)</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;{</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    std::copy(imageData.begin(), imageData.end(), std::ostream_iterator&lt;ElemType&gt;(imageTensorFile, <span class="stringliteral">&quot; &quot;</span>));</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">// For uint8_t image tensor, cast it to int before writing it to prevent writing data as characters instead of</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">// numerical values</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="_image_tensor_generator_8hpp.xhtml#a2120283536d91fbdee0d19fff3156994">  200</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="_image_tensor_generator_8hpp.xhtml#a2120283536d91fbdee0d19fff3156994">WriteImageTensorImpl&lt;uint8_t&gt;</a>(<span class="keyword">const</span> std::vector&lt;uint8_t&gt;&amp; imageData, std::ofstream&amp; imageTensorFile)</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;{</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    std::copy(imageData.begin(), imageData.end(), std::ostream_iterator&lt;int&gt;(imageTensorFile, <span class="stringliteral">&quot; &quot;</span>));</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;}</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">// For int8_t image tensor, cast it to int before writing it to prevent writing data as characters instead of</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">// numerical values</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="_image_tensor_generator_8hpp.xhtml#a0b38da4834591f31e1ee7511ff9563f3">  208</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="_image_tensor_generator_8hpp.xhtml#a0b38da4834591f31e1ee7511ff9563f3">WriteImageTensorImpl&lt;int8_t&gt;</a>(<span class="keyword">const</span> std::vector&lt;int8_t&gt;&amp; imageData, std::ofstream&amp; imageTensorFile)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;{</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    std::copy(imageData.begin(), imageData.end(), std::ostream_iterator&lt;int&gt;(imageTensorFile, <span class="stringliteral">&quot; &quot;</span>));</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div><div class="ttc" id="class_inference_test_image_xhtml_ae7a403f69a7717c1eaae1d74b7bb7bcea773b27aa8d21604182ba90d029ad2e13"><div class="ttname"><a href="class_inference_test_image.xhtml#ae7a403f69a7717c1eaae1d74b7bb7bcea773b27aa8d21604182ba90d029ad2e13">InferenceTestImage::ResizingMethods::BilinearAndNormalized</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00049">Types.hpp:49</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_a7599848540a5f43e977119c054b3563ea35120628a2097980f88fd49246124cae"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#a7599848540a5f43e977119c054b3563ea35120628a2097980f88fd49246124cae">SupportedFrontend::TFLite</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a></div></div>
<div class="ttc" id="struct_normalization_parameters_xhtml_a8fdb461f0b4417f4ebff10b3413a948d"><div class="ttname"><a href="struct_normalization_parameters.xhtml#a8fdb461f0b4417f4ebff10b3413a948d">NormalizationParameters::stddev</a></div><div class="ttdeci">std::array&lt; float, 3 &gt; stddev</div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00023">ImageTensorGenerator.hpp:23</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_a572494250ece8d94b68ea490d0bf46e4"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#a572494250ece8d94b68ea490d0bf46e4">GetNormalizationParameters</a></div><div class="ttdeci">NormalizationParameters GetNormalizationParameters(const SupportedFrontend &amp;modelFormat, const armnn::DataType &amp;outputType)</div><div class="ttdoc">Get normalization parameters. </div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00038">ImageTensorGenerator.hpp:38</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_af39456ac4838301c6fc5b44d6a57479c"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#af39456ac4838301c6fc5b44d6a57479c">PrepareImageTensor</a></div><div class="ttdeci">std::vector&lt; ElemType &gt; PrepareImageTensor(const std::string &amp;imagePath, unsigned int newWidth, unsigned int newHeight, const NormalizationParameters &amp;normParams, unsigned int batchSize=1, const armnn::DataLayout &amp;outputLayout=armnn::DataLayout::NHWC)</div><div class="ttdoc">Prepare raw image tensor data by loading the image from imagePath and preprocessing it...</div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_a292c4c49fc943bfcb7ee1ce1435d4690"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#a292c4c49fc943bfcb7ee1ce1435d4690">WriteImageTensorImpl</a></div><div class="ttdeci">void WriteImageTensorImpl(const std::vector&lt; ElemType &gt; &amp;imageData, std::ofstream &amp;imageTensorFile)</div><div class="ttdoc">Write image tensor to ofstream. </div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00192">ImageTensorGenerator.hpp:192</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_ac372cd2b257f33f29999217e1d2d8a37"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#ac372cd2b257f33f29999217e1d2d8a37">PrepareImageTensor&lt; uint8_t &gt;</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; PrepareImageTensor&lt; uint8_t &gt;(const std::string &amp;imagePath, unsigned int newWidth, unsigned int newHeight, const NormalizationParameters &amp;normParams, unsigned int batchSize, const armnn::DataLayout &amp;outputLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00148">ImageTensorGenerator.hpp:148</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_a12124184ac6aec018beb98b9715330c7"><div class="ttname"><a href="namespacearmnn_utils.xhtml#a12124184ac6aec018beb98b9715330c7">armnnUtils::NHWCToArmNN</a></div><div class="ttdeci">const armnn::PermutationVector NHWCToArmNN</div><div class="ttdef"><b>Definition:</b> <a href="_parser_helper_8cpp_source.xhtml#l00016">ParserHelper.cpp:16</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_af3c74017185773dd61d8ca6662d65d43"><div class="ttname"><a href="namespacearmnn_utils.xhtml#af3c74017185773dd61d8ca6662d65d43">armnnUtils::Permute</a></div><div class="ttdeci">void Permute(const armnn::TensorShape &amp;dstShape, const armnn::PermutationVector &amp;mappings, const void *src, void *dst, size_t dataTypeSize)</div><div class="ttdef"><b>Definition:</b> <a href="_permute_8cpp_source.xhtml#l00131">Permute.cpp:131</a></div></div>
<div class="ttc" id="_types_utils_8hpp_xhtml"><div class="ttname"><a href="_types_utils_8hpp.xhtml">TypesUtils.hpp</a></div></div>
<div class="ttc" id="struct_normalization_parameters_xhtml"><div class="ttname"><a href="struct_normalization_parameters.xhtml">NormalizationParameters</a></div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00019">ImageTensorGenerator.hpp:19</a></div></div>
<div class="ttc" id="_permute_8hpp_xhtml"><div class="ttname"><a href="_permute_8hpp.xhtml">Permute.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00035">Types.hpp:35</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml_a4ec823e49ce46950b3d4cee1efff050b"><div class="ttname"><a href="class_inference_test_image.xhtml#a4ec823e49ce46950b3d4cee1efff050b">InferenceTestImage::GetWidth</a></div><div class="ttdeci">unsigned int GetWidth() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00075">InferenceTestImage.hpp:75</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_a2120283536d91fbdee0d19fff3156994"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#a2120283536d91fbdee0d19fff3156994">WriteImageTensorImpl&lt; uint8_t &gt;</a></div><div class="ttdeci">void WriteImageTensorImpl&lt; uint8_t &gt;(const std::vector&lt; uint8_t &gt; &amp;imageData, std::ofstream &amp;imageTensorFile)</div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00200">ImageTensorGenerator.hpp:200</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_ac1e8e68c74e5d1c8fd19a91a68de3cb7"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#ac1e8e68c74e5d1c8fd19a91a68de3cb7">PrepareImageTensor&lt; int &gt;</a></div><div class="ttdeci">std::vector&lt; int &gt; PrepareImageTensor&lt; int &gt;(const std::string &amp;imagePath, unsigned int newWidth, unsigned int newHeight, const NormalizationParameters &amp;normParams, unsigned int batchSize, const armnn::DataLayout &amp;outputLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00128">ImageTensorGenerator.hpp:128</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00209">Exceptions.hpp:209</a></div></div>
<div class="ttc" id="classarmnn_1_1_permutation_vector_xhtml"><div class="ttname"><a href="classarmnn_1_1_permutation_vector.xhtml">armnn::PermutationVector</a></div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00282">Types.hpp:282</a></div></div>
<div class="ttc" id="class_inference_test_image_xhtml"><div class="ttname"><a href="class_inference_test_image.xhtml">InferenceTestImage</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_image_8hpp_source.xhtml#l00051">InferenceTestImage.hpp:51</a></div></div>
<div class="ttc" id="_t_container_8hpp_xhtml"><div class="ttname"><a href="_t_container_8hpp.xhtml">TContainer.hpp</a></div></div>
<div class="ttc" id="struct_normalization_parameters_xhtml_a6e5ac6f9d3272e6670522daaacc04442"><div class="ttname"><a href="struct_normalization_parameters.xhtml#a6e5ac6f9d3272e6670522daaacc04442">NormalizationParameters::mean</a></div><div class="ttdeci">std::array&lt; float, 3 &gt; mean</div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00022">ImageTensorGenerator.hpp:22</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="struct_normalization_parameters_xhtml_a1d28dec57cce925ad92342891bd71e7c"><div class="ttname"><a href="struct_normalization_parameters.xhtml#a1d28dec57cce925ad92342891bd71e7c">NormalizationParameters::scale</a></div><div class="ttdeci">float scale</div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00021">ImageTensorGenerator.hpp:21</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_a0b38da4834591f31e1ee7511ff9563f3"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#a0b38da4834591f31e1ee7511ff9563f3">WriteImageTensorImpl&lt; int8_t &gt;</a></div><div class="ttdeci">void WriteImageTensorImpl&lt; int8_t &gt;(const std::vector&lt; int8_t &gt; &amp;imageData, std::ofstream &amp;imageTensorFile)</div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00208">ImageTensorGenerator.hpp:208</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_a7599848540a5f43e977119c054b3563e"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#a7599848540a5f43e977119c054b3563e">SupportedFrontend</a></div><div class="ttdeci">SupportedFrontend</div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00026">ImageTensorGenerator.hpp:26</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_ab8880b4ae59cf7f185a5a192cdca4720"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#ab8880b4ae59cf7f185a5a192cdca4720">PrepareImageTensor&lt; int8_t &gt;</a></div><div class="ttdeci">std::vector&lt; int8_t &gt; PrepareImageTensor&lt; int8_t &gt;(const std::string &amp;imagePath, unsigned int newWidth, unsigned int newHeight, const NormalizationParameters &amp;normParams, unsigned int batchSize, const armnn::DataLayout &amp;outputLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00168">ImageTensorGenerator.hpp:168</a></div></div>
<div class="ttc" id="_image_tensor_generator_8hpp_xhtml_affacfe95f011fce3b897b2745880f82a"><div class="ttname"><a href="_image_tensor_generator_8hpp.xhtml#affacfe95f011fce3b897b2745880f82a">PrepareImageTensor&lt; float &gt;</a></div><div class="ttdeci">std::vector&lt; float &gt; PrepareImageTensor&lt; float &gt;(const std::string &amp;imagePath, unsigned int newWidth, unsigned int newHeight, const NormalizationParameters &amp;normParams, unsigned int batchSize, const armnn::DataLayout &amp;outputLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_image_tensor_generator_8hpp_source.xhtml#l00091">ImageTensorGenerator.hpp:91</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_db50b4cd131a46c9b297c117b868403e.xhtml">ImageTensorGenerator</a></li><li class="navelem"><a class="el" href="_image_tensor_generator_8hpp.xhtml">ImageTensorGenerator.hpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:00 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
