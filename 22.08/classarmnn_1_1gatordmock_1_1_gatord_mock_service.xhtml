<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: GatordMockService Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">GatordMockService Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A class that implements a Mock Gatord server.  
 <a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_gatord_mock_service_8hpp_source.xhtml">GatordMockService.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a61fd54e09f02c8b6b575608fc4741285"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a61fd54e09f02c8b6b575608fc4741285">GatordMockService</a> (std::unique_ptr&lt; arm::pipe::BasePipeServer &gt; clientConnection, bool echoPackets)</td></tr>
<tr class="separator:a61fd54e09f02c8b6b575608fc4741285"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e0dd8cd76cd84667f194c54cdec1138"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a7e0dd8cd76cd84667f194c54cdec1138">GatordMockService</a> (const <a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a> &amp;)=delete</td></tr>
<tr class="separator:a7e0dd8cd76cd84667f194c54cdec1138"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c52e4d857e77460a50fec0240e184f1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a1c52e4d857e77460a50fec0240e184f1">operator=</a> (const <a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a> &amp;)=delete</td></tr>
<tr class="separator:a1c52e4d857e77460a50fec0240e184f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae086e58e2c2fa792de4edde48652270f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#ae086e58e2c2fa792de4edde48652270f">GatordMockService</a> (<a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a> &amp;&amp;)=delete</td></tr>
<tr class="separator:ae086e58e2c2fa792de4edde48652270f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1fb42ef8a64352618fc6e5471074f0f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#ae1fb42ef8a64352618fc6e5471074f0f">operator=</a> (<a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a> &amp;&amp;)=delete</td></tr>
<tr class="separator:ae1fb42ef8a64352618fc6e5471074f0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac07351dbc304681b2efd5df4958a6735"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#ac07351dbc304681b2efd5df4958a6735">WaitForStreamMetaData</a> ()</td></tr>
<tr class="memdesc:ac07351dbc304681b2efd5df4958a6735"><td class="mdescLeft">&#160;</td><td class="mdescRight">Once the connection is open wait to receive the stream meta data packet from the client.  <a href="#ac07351dbc304681b2efd5df4958a6735">More...</a><br /></td></tr>
<tr class="separator:ac07351dbc304681b2efd5df4958a6735"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41eaa65cf4e7212f09b04d06c130cd83"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a41eaa65cf4e7212f09b04d06c130cd83">SendConnectionAck</a> ()</td></tr>
<tr class="memdesc:a41eaa65cf4e7212f09b04d06c130cd83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a connection acknowledged packet back to the client.  <a href="#a41eaa65cf4e7212f09b04d06c130cd83">More...</a><br /></td></tr>
<tr class="separator:a41eaa65cf4e7212f09b04d06c130cd83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b9de2e6eee97f258fe2d7c765206e8a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a2b9de2e6eee97f258fe2d7c765206e8a">SendRequestCounterDir</a> ()</td></tr>
<tr class="memdesc:a2b9de2e6eee97f258fe2d7c765206e8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a request counter directory packet back to the client.  <a href="#a2b9de2e6eee97f258fe2d7c765206e8a">More...</a><br /></td></tr>
<tr class="separator:a2b9de2e6eee97f258fe2d7c765206e8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3833c5c6bec750969b5050c031032637"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a3833c5c6bec750969b5050c031032637">SendActivateTimelinePacket</a> ()</td></tr>
<tr class="memdesc:a3833c5c6bec750969b5050c031032637"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a activate timeline packet back to the client.  <a href="#a3833c5c6bec750969b5050c031032637">More...</a><br /></td></tr>
<tr class="separator:a3833c5c6bec750969b5050c031032637"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fa494c4df7426405e756b74656381ec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a0fa494c4df7426405e756b74656381ec">SendDeactivateTimelinePacket</a> ()</td></tr>
<tr class="memdesc:a0fa494c4df7426405e756b74656381ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a deactivate timeline packet back to the client.  <a href="#a0fa494c4df7426405e756b74656381ec">More...</a><br /></td></tr>
<tr class="separator:a0fa494c4df7426405e756b74656381ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5175305569ecb4e58004e977abeff61a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a5175305569ecb4e58004e977abeff61a">LaunchReceivingThread</a> ()</td></tr>
<tr class="memdesc:a5175305569ecb4e58004e977abeff61a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start the thread that will receive all packets and print them nicely to stdout.  <a href="#a5175305569ecb4e58004e977abeff61a">More...</a><br /></td></tr>
<tr class="separator:a5175305569ecb4e58004e977abeff61a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c9761eec8e1cd0bd73c6cdf2c2eda89"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a4c9761eec8e1cd0bd73c6cdf2c2eda89">GetPacketsReceivedCount</a> ()</td></tr>
<tr class="memdesc:a4c9761eec8e1cd0bd73c6cdf2c2eda89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the total number of periodic counter capture packets received since the receive thread started.  <a href="#a4c9761eec8e1cd0bd73c6cdf2c2eda89">More...</a><br /></td></tr>
<tr class="separator:a4c9761eec8e1cd0bd73c6cdf2c2eda89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93617d8640d5e93831d06a2ef3c86bef"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a93617d8640d5e93831d06a2ef3c86bef">WaitForReceivingThread</a> ()</td></tr>
<tr class="memdesc:a93617d8640d5e93831d06a2ef3c86bef"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a placeholder method to prevent main exiting.  <a href="#a93617d8640d5e93831d06a2ef3c86bef">More...</a><br /></td></tr>
<tr class="separator:a93617d8640d5e93831d06a2ef3c86bef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82bd11e044b4bc9c647fcaa9ce5b3e55"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a82bd11e044b4bc9c647fcaa9ce5b3e55">ReceiveThreadRunning</a> ()</td></tr>
<tr class="separator:a82bd11e044b4bc9c647fcaa9ce5b3e55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abaf2feb0e79566de18721659d896dae1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#abaf2feb0e79566de18721659d896dae1">SendPeriodicCounterSelectionList</a> (uint32_t period, std::vector&lt; uint16_t &gt; counters)</td></tr>
<tr class="memdesc:abaf2feb0e79566de18721659d896dae1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send the counter list to ArmNN.  <a href="#abaf2feb0e79566de18721659d896dae1">More...</a><br /></td></tr>
<tr class="separator:abaf2feb0e79566de18721659d896dae1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18f77daf6b32e5bb456c2bc860140669"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a18f77daf6b32e5bb456c2bc860140669">WaitCommand</a> (uint32_t timeout)</td></tr>
<tr class="memdesc:a18f77daf6b32e5bb456c2bc860140669"><td class="mdescLeft">&#160;</td><td class="mdescRight">Execute the WAIT command from the comamnd file.  <a href="#a18f77daf6b32e5bb456c2bc860140669">More...</a><br /></td></tr>
<tr class="separator:a18f77daf6b32e5bb456c2bc860140669"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a654df0da871a928b8ccbffb989eabd49"><td class="memItemLeft" align="right" valign="top">arm::pipe::DirectoryCaptureCommandHandler &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a654df0da871a928b8ccbffb989eabd49">GetDirectoryCaptureCommandHandler</a> ()</td></tr>
<tr class="separator:a654df0da871a928b8ccbffb989eabd49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae52624d07e7ca9bd28070467217caba9"><td class="memItemLeft" align="right" valign="top">arm::pipe::TimelineDecoder &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#ae52624d07e7ca9bd28070467217caba9">GetTimelineDecoder</a> ()</td></tr>
<tr class="separator:ae52624d07e7ca9bd28070467217caba9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a450b29f889e2693f7f7a88cc8af12b6e"><td class="memItemLeft" align="right" valign="top">arm::pipe::TimelineDirectoryCaptureCommandHandler &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a450b29f889e2693f7f7a88cc8af12b6e">GetTimelineDirectoryCaptureCommandHandler</a> ()</td></tr>
<tr class="separator:a450b29f889e2693f7f7a88cc8af12b6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A class that implements a Mock Gatord server. </p>
<p>It will listen on a specified Unix domain socket (UDS) namespace for client connections. It will then allow opertaions to manage counters while receiving counter data. </p>

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00036">36</a> of file <a class="el" href="_gatord_mock_service_8hpp_source.xhtml">GatordMockService.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a61fd54e09f02c8b6b575608fc4741285"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61fd54e09f02c8b6b575608fc4741285">&#9670;&nbsp;</a></span>GatordMockService() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a> </td>
          <td>(</td>
          <td class="paramtype">std::unique_ptr&lt; arm::pipe::BasePipeServer &gt;&#160;</td>
          <td class="paramname"><em>clientConnection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>echoPackets</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">registry</td><td>reference to a command handler registry. </td></tr>
    <tr><td class="paramname">echoPackets</td><td>if true the raw packets will be printed to stdout. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00041">41</a> of file <a class="el" href="_gatord_mock_service_8hpp_source.xhtml">GatordMockService.hpp</a>.</p>

<p class="reference">References <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00064">GatordMockService::LaunchReceivingThread()</a>, <a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a1c52e4d857e77460a50fec0240e184f1">GatordMockService::operator=()</a>, <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00044">GatordMockService::SendActivateTimelinePacket()</a>, <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00024">GatordMockService::SendConnectionAck()</a>, <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00054">GatordMockService::SendDeactivateTimelinePacket()</a>, <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00034">GatordMockService::SendRequestCounterDir()</a>, and <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00101">GatordMockService::WaitForStreamMetaData()</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            : m_BasePipeServer(std::move(clientConnection))</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            , m_EchoPackets(echoPackets)</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            , m_CloseReceivingThread(<span class="keyword">false</span>)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            , m_PacketVersionResolver()</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            , m_HandlerRegistry()</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            , m_TimelineDecoder()</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            , m_CounterCaptureCommandHandler(</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                    0, 4, m_PacketVersionResolver.ResolvePacketVersion(0, 4).GetEncodedValue(), !echoPackets)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            , m_StreamMetadataCommandHandler(</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                    0, 0, m_PacketVersionResolver.ResolvePacketVersion(0, 0).GetEncodedValue(), !echoPackets)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="comment">// This stub lets us ignore any counter capture packets we receive without throwing an error</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            , m_StubCommandHandler(3, 0, m_PacketVersionResolver.ResolvePacketVersion(0, 3).GetEncodedValue())</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            , m_DirectoryCaptureCommandHandler(</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                    <span class="stringliteral">&quot;ARMNN&quot;</span>, 0, 2, m_PacketVersionResolver.ResolvePacketVersion(0, 2).GetEncodedValue(), !echoPackets)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            , m_TimelineCaptureCommandHandler(</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                    1, 1, m_PacketVersionResolver.ResolvePacketVersion(1, 1).GetEncodedValue(), m_TimelineDecoder)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            , m_TimelineDirectoryCaptureCommandHandler(</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                    1, 0, m_PacketVersionResolver.ResolvePacketVersion(1, 0).GetEncodedValue(),</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                    m_TimelineCaptureCommandHandler, !echoPackets)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        m_TimelineDecoder.SetDefaultCallbacks();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        m_HandlerRegistry.RegisterFunctor(&amp;m_CounterCaptureCommandHandler);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        m_HandlerRegistry.RegisterFunctor(&amp;m_StreamMetadataCommandHandler);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        m_HandlerRegistry.RegisterFunctor(&amp;m_StubCommandHandler);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        m_HandlerRegistry.RegisterFunctor(&amp;m_DirectoryCaptureCommandHandler);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        m_HandlerRegistry.RegisterFunctor(&amp;m_TimelineDirectoryCaptureCommandHandler);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        m_HandlerRegistry.RegisterFunctor(&amp;m_TimelineCaptureCommandHandler);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a7e0dd8cd76cd84667f194c54cdec1138"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e0dd8cd76cd84667f194c54cdec1138">&#9670;&nbsp;</a></span>GatordMockService() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae086e58e2c2fa792de4edde48652270f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae086e58e2c2fa792de4edde48652270f">&#9670;&nbsp;</a></span>GatordMockService() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a654df0da871a928b8ccbffb989eabd49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a654df0da871a928b8ccbffb989eabd49">&#9670;&nbsp;</a></span>GetDirectoryCaptureCommandHandler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">arm::pipe::DirectoryCaptureCommandHandler&amp; GetDirectoryCaptureCommandHandler </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00121">121</a> of file <a class="el" href="_gatord_mock_service_8hpp_source.xhtml">GatordMockService.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">return</span> m_DirectoryCaptureCommandHandler;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a4c9761eec8e1cd0bd73c6cdf2c2eda89"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c9761eec8e1cd0bd73c6cdf2c2eda89">&#9670;&nbsp;</a></span>GetPacketsReceivedCount()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t GetPacketsReceivedCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the total number of periodic counter capture packets received since the receive thread started. </p>
<dl class="section return"><dt>Returns</dt><dd>number of periodic counter capture packets received. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00100">100</a> of file <a class="el" href="_gatord_mock_service_8hpp_source.xhtml">GatordMockService.hpp</a>.</p>

<p class="reference">References <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00081">GatordMockService::WaitForReceivingThread()</a>.</p>
<div class="fragment"><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordflow">return</span> m_PacketsReceivedCount.load(std::memory_order_acquire);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="ae52624d07e7ca9bd28070467217caba9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae52624d07e7ca9bd28070467217caba9">&#9670;&nbsp;</a></span>GetTimelineDecoder()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">arm::pipe::TimelineDecoder&amp; GetTimelineDecoder </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00126">126</a> of file <a class="el" href="_gatord_mock_service_8hpp_source.xhtml">GatordMockService.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">return</span> m_TimelineDecoder;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a450b29f889e2693f7f7a88cc8af12b6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a450b29f889e2693f7f7a88cc8af12b6e">&#9670;&nbsp;</a></span>GetTimelineDirectoryCaptureCommandHandler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">arm::pipe::TimelineDirectoryCaptureCommandHandler&amp; GetTimelineDirectoryCaptureCommandHandler </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00131">131</a> of file <a class="el" href="_gatord_mock_service_8hpp_source.xhtml">GatordMockService.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">return</span> m_TimelineDirectoryCaptureCommandHandler;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a5175305569ecb4e58004e977abeff61a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5175305569ecb4e58004e977abeff61a">&#9670;&nbsp;</a></span>LaunchReceivingThread()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool LaunchReceivingThread </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Start the thread that will receive all packets and print them nicely to stdout. </p>

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00064">64</a> of file <a class="el" href="_gatord_mock_service_8cpp_source.xhtml">GatordMockService.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gatord_mock_main_8cpp_source.xhtml#l00026">CreateMockService()</a>, and <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00041">GatordMockService::GatordMockService()</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">if</span> (m_EchoPackets)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Launching receiving thread.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// At this point we want to make the socket non blocking.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">if</span> (!m_BasePipeServer.get()-&gt;SetNonBlocking())</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        m_BasePipeServer.get()-&gt;Close();</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        std::cerr &lt;&lt; <span class="stringliteral">&quot;Failed to set socket as non blocking: &quot;</span> &lt;&lt; strerror(errno) &lt;&lt; std::endl;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    m_ListeningThread = std::thread(&amp;GatordMockService::ReceiveLoop, <span class="keyword">this</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1c52e4d857e77460a50fec0240e184f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c52e4d857e77460a50fec0240e184f1">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00041">GatordMockService::GatordMockService()</a>.</p>

</div>
</div>
<a id="ae1fb42ef8a64352618fc6e5471074f0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1fb42ef8a64352618fc6e5471074f0f">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a82bd11e044b4bc9c647fcaa9ce5b3e55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82bd11e044b4bc9c647fcaa9ce5b3e55">&#9670;&nbsp;</a></span>ReceiveThreadRunning()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ReceiveThreadRunning </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00110">110</a> of file <a class="el" href="_gatord_mock_service_8hpp_source.xhtml">GatordMockService.hpp</a>.</p>

<p class="reference">References <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00106">GatordMockService::SendPeriodicCounterSelectionList()</a>, and <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00138">GatordMockService::WaitCommand()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_command_file_parser_8cpp_source.xhtml#l00019">CommandFileParser::ParseFile()</a>, and <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00138">GatordMockService::WaitCommand()</a>.</p>
<div class="fragment"><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">return</span> !m_CloseReceivingThread.load();</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a3833c5c6bec750969b5050c031032637"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3833c5c6bec750969b5050c031032637">&#9670;&nbsp;</a></span>SendActivateTimelinePacket()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SendActivateTimelinePacket </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a activate timeline packet back to the client. </p>

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00044">44</a> of file <a class="el" href="_gatord_mock_service_8cpp_source.xhtml">GatordMockService.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00041">GatordMockService::GatordMockService()</a>, and <a class="el" href="_command_file_parser_8cpp_source.xhtml#l00019">CommandFileParser::ParseFile()</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">if</span> (m_EchoPackets)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Sending activate timeline packet.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="comment">// The activate timeline packet is an empty data packet with packetId == 6.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    m_BasePipeServer.get()-&gt;SendPacket(0, 6, <span class="keyword">nullptr</span>, 0);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a41eaa65cf4e7212f09b04d06c130cd83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41eaa65cf4e7212f09b04d06c130cd83">&#9670;&nbsp;</a></span>SendConnectionAck()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SendConnectionAck </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a connection acknowledged packet back to the client. </p>

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00024">24</a> of file <a class="el" href="_gatord_mock_service_8cpp_source.xhtml">GatordMockService.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gatord_mock_main_8cpp_source.xhtml#l00026">CreateMockService()</a>, and <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00041">GatordMockService::GatordMockService()</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordflow">if</span> (m_EchoPackets)</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Sending connection acknowledgement.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    }</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="comment">// The connection ack packet is an empty data packet with packetId == 1.</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    m_BasePipeServer.get()-&gt;SendPacket(0, 1, <span class="keyword">nullptr</span>, 0);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a0fa494c4df7426405e756b74656381ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fa494c4df7426405e756b74656381ec">&#9670;&nbsp;</a></span>SendDeactivateTimelinePacket()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SendDeactivateTimelinePacket </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a deactivate timeline packet back to the client. </p>

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00054">54</a> of file <a class="el" href="_gatord_mock_service_8cpp_source.xhtml">GatordMockService.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00041">GatordMockService::GatordMockService()</a>, and <a class="el" href="_command_file_parser_8cpp_source.xhtml#l00019">CommandFileParser::ParseFile()</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">if</span> (m_EchoPackets)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Sending deactivate timeline packet.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="comment">// The deactivate timeline packet is an empty data packet with packetId == 7.</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    m_BasePipeServer.get()-&gt;SendPacket(0, 7, <span class="keyword">nullptr</span>, 0);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abaf2feb0e79566de18721659d896dae1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abaf2feb0e79566de18721659d896dae1">&#9670;&nbsp;</a></span>SendPeriodicCounterSelectionList()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SendPeriodicCounterSelectionList </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>period</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; uint16_t &gt;&#160;</td>
          <td class="paramname"><em>counters</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send the counter list to ArmNN. </p>

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00106">106</a> of file <a class="el" href="_gatord_mock_service_8cpp_source.xhtml">GatordMockService.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_command_file_parser_8cpp_source.xhtml#l00019">CommandFileParser::ParseFile()</a>, and <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00110">GatordMockService::ReceiveThreadRunning()</a>.</p>
<div class="fragment"><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// The packet body consists of a UINT32 representing the period following by zero or more</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">// UINT16&#39;s representing counter UID&#39;s. If the list is empty it implies all counters are to</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="comment">// be disabled.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span> (m_EchoPackets)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;SendPeriodicCounterSelectionList: Period=&quot;</span> &lt;&lt; std::dec &lt;&lt; period &lt;&lt; <span class="stringliteral">&quot;uSec&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;List length=&quot;</span> &lt;&lt; counters.size() &lt;&lt; std::endl;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">// Start by calculating the length of the packet body in bytes. This will be at least 4.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    uint32_t dataLength = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(4 + (counters.size() * 2));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    std::unique_ptr&lt;unsigned char[]&gt; uniqueData = std::make_unique&lt;unsigned char[]&gt;(dataLength);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* data                         = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(uniqueData.get());</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    uint32_t offset = 0;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    arm::pipe::WriteUint32(data, offset, period);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    offset += 4;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">for</span> (std::vector&lt;uint16_t&gt;::iterator it = counters.begin(); it != counters.end(); ++it)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        arm::pipe::WriteUint16(data, offset, *it);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        offset += 2;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">// Send the packet.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    m_BasePipeServer.get()-&gt;SendPacket(0, 4, data, dataLength);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="comment">// There will be an echo response packet sitting in the receive thread. PeriodicCounterSelectionResponseHandler</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// should deal with it.</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a2b9de2e6eee97f258fe2d7c765206e8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b9de2e6eee97f258fe2d7c765206e8a">&#9670;&nbsp;</a></span>SendRequestCounterDir()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SendRequestCounterDir </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a request counter directory packet back to the client. </p>

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="_gatord_mock_service_8cpp_source.xhtml">GatordMockService.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00041">GatordMockService::GatordMockService()</a>, and <a class="el" href="_command_file_parser_8cpp_source.xhtml#l00019">CommandFileParser::ParseFile()</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">if</span> (m_EchoPackets)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Sending connection acknowledgement.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    }</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="comment">// The request counter directory packet is an empty data packet with packetId == 3.</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    m_BasePipeServer.get()-&gt;SendPacket(0, 3, <span class="keyword">nullptr</span>, 0);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a18f77daf6b32e5bb456c2bc860140669"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18f77daf6b32e5bb456c2bc860140669">&#9670;&nbsp;</a></span>WaitCommand()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WaitCommand </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>timeout</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Execute the WAIT command from the comamnd file. </p>

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00138">138</a> of file <a class="el" href="_gatord_mock_service_8cpp_source.xhtml">GatordMockService.cpp</a>.</p>

<p class="reference">References <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00110">GatordMockService::ReceiveThreadRunning()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_command_file_parser_8cpp_source.xhtml#l00019">CommandFileParser::ParseFile()</a>, and <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00110">GatordMockService::ReceiveThreadRunning()</a>.</p>
<div class="fragment"><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">// Wait for a maximum of timeout microseconds or if the receive thread has closed.</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="comment">// There is a certain level of rounding involved in this timing.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    uint32_t iterations = timeout / 1000;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    std::cout &lt;&lt; std::dec &lt;&lt; <span class="stringliteral">&quot;Wait command with timeout of &quot;</span> &lt;&lt; timeout &lt;&lt; <span class="stringliteral">&quot; iterations =  &quot;</span> &lt;&lt; iterations &lt;&lt; std::endl;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    uint32_t count = 0;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">while</span> ((this-&gt;<a class="code" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a82bd11e044b4bc9c647fcaa9ce5b3e55">ReceiveThreadRunning</a>() &amp;&amp; (count &lt; iterations)))</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        std::this_thread::sleep_for(std::chrono::microseconds(1000));</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        ++count;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">if</span> (m_EchoPackets)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        std::cout &lt;&lt; std::dec &lt;&lt; <span class="stringliteral">&quot;Wait command with timeout of &quot;</span> &lt;&lt; timeout &lt;&lt; <span class="stringliteral">&quot; microseconds completed. &quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div><div class="ttc" id="classarmnn_1_1gatordmock_1_1_gatord_mock_service_xhtml_a82bd11e044b4bc9c647fcaa9ce5b3e55"><div class="ttname"><a href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml#a82bd11e044b4bc9c647fcaa9ce5b3e55">armnn::gatordmock::GatordMockService::ReceiveThreadRunning</a></div><div class="ttdeci">bool ReceiveThreadRunning()</div><div class="ttdef"><b>Definition:</b> <a href="_gatord_mock_service_8hpp_source.xhtml#l00110">GatordMockService.hpp:110</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a93617d8640d5e93831d06a2ef3c86bef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93617d8640d5e93831d06a2ef3c86bef">&#9670;&nbsp;</a></span>WaitForReceivingThread()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WaitForReceivingThread </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This is a placeholder method to prevent main exiting. </p>
<p>It can be removed once the command handling code is added. </p>

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00081">81</a> of file <a class="el" href="_gatord_mock_service_8cpp_source.xhtml">GatordMockService.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gatord_mock_main_8cpp_source.xhtml#l00026">CreateMockService()</a>, and <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00100">GatordMockService::GetPacketsReceivedCount()</a>.</p>
<div class="fragment"><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">// The receiving thread may already have died.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">if</span> (m_CloseReceivingThread != <span class="keyword">true</span>)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        m_CloseReceivingThread.store(<span class="keyword">true</span>);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">// Check that the receiving thread is running</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">if</span> (m_ListeningThread.joinable())</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="comment">// Wait for the receiving thread to complete operations</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        m_ListeningThread.join();</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">if</span>(m_EchoPackets)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        m_TimelineDecoder.print();</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ac07351dbc304681b2efd5df4958a6735"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac07351dbc304681b2efd5df4958a6735">&#9670;&nbsp;</a></span>WaitForStreamMetaData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool WaitForStreamMetaData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Once the connection is open wait to receive the stream meta data packet from the client. </p>
<p>Reading this packet differs from others as we need to determine endianness. </p><dl class="section return"><dt>Returns</dt><dd>true only if a valid stream met data packet has been received. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00101">101</a> of file <a class="el" href="_gatord_mock_service_8cpp_source.xhtml">GatordMockService.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gatord_mock_main_8cpp_source.xhtml#l00026">CreateMockService()</a>, and <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00041">GatordMockService::GatordMockService()</a>.</p>
<div class="fragment"><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;{</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> m_BasePipeServer-&gt;WaitForStreamMetaData();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>tests/profiling/gatordmock/<a class="el" href="_gatord_mock_service_8hpp_source.xhtml">GatordMockService.hpp</a></li>
<li>tests/profiling/gatordmock/<a class="el" href="_gatord_mock_service_8cpp_source.xhtml">GatordMockService.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="namespacearmnn_1_1gatordmock.xhtml">gatordmock</a></li><li class="navelem"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:42 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
