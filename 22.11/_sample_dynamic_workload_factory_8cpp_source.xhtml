<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/dynamic/sample/SampleDynamicWorkloadFactory.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_sample_dynamic_workload_factory_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">SampleDynamicWorkloadFactory.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_sample_dynamic_workload_factory_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2020 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_mem_copy_workload_8hpp.xhtml">armnn/backends/MemCopyWorkload.hpp</a>&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_handle_8hpp.xhtml">armnn/backends/TensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_sample_dynamic_addition_workload_8hpp.xhtml">SampleDynamicAdditionWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_sample_dynamic_backend_8hpp.xhtml">SampleDynamicBackend.hpp</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_sample_dynamic_workload_factory_8hpp.xhtml">SampleDynamicWorkloadFactory.hpp</a>&quot;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_sample_tensor_handle_8hpp.xhtml">SampleTensorHandle.hpp</a>&quot;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacesdb.xhtml">sdb</a> <span class="comment">// sample dynamic backend</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> s_Id{  <a class="code" href="_ref_dynamic_backend_8cpp.xhtml#adaff295134ed2825ae43a8e9281b6f2a">GetBackendId</a>() };</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;}</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a45ed6052be045e15e81d1377b1a92f24">   22</a></span>&#160;<a class="code" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a95614d4751bdcb17307e50a091635efb">SampleDynamicWorkloadFactory::SampleDynamicWorkloadFactory</a>(<span class="keyword">const</span> std::shared_ptr&lt;SampleMemoryManager&gt;&amp; memoryManager)</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    : m_MemoryManager(memoryManager)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;}</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a95614d4751bdcb17307e50a091635efb">   27</a></span>&#160;<a class="code" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a95614d4751bdcb17307e50a091635efb">SampleDynamicWorkloadFactory::SampleDynamicWorkloadFactory</a>()</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    : m_MemoryManager(new <a class="code" href="classsdb_1_1_sample_memory_manager.xhtml">SampleMemoryManager</a>())</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;}</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#ae5dac93c38aa9f9108f89b7f4acc2beb">   32</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a>&amp; <a class="code" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#ae5dac93c38aa9f9108f89b7f4acc2beb">SampleDynamicWorkloadFactory::GetBackendId</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">return</span> s_Id;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a58a47e731eae3f09651e3f2451920f0a">   37</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a58a47e731eae3f09651e3f2451920f0a">SampleDynamicWorkloadFactory::IsLayerSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>&amp; layer,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                                                    <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;armnn::DataType&gt;</a> dataType,</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                                                    std::string&amp; outReasonIfUnsupported)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a138ca3929b888fa8d9088c076e9de48c">IWorkloadFactory::IsLayerSupported</a>(s_Id, layer, dataType, outReasonIfUnsupported);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;}</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#afeebce3ac305675b16d1065d0cb5a362">   44</a></span>&#160;std::unique_ptr&lt;armnn::ITensorHandle&gt; <a class="code" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#afeebce3ac305675b16d1065d0cb5a362">SampleDynamicWorkloadFactory::CreateTensorHandle</a>(</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; tensorInfo,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> isMemoryManaged)<span class="keyword"> const</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;armnn::ScopedTensorHandle&gt;(tensorInfo);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a729d5c6a0304731cb12830c69d25ec6a">   51</a></span>&#160;std::unique_ptr&lt;armnn::ITensorHandle&gt; <a class="code" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#afeebce3ac305675b16d1065d0cb5a362">SampleDynamicWorkloadFactory::CreateTensorHandle</a>(</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; tensorInfo,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a> dataLayout,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> isMemoryManaged)<span class="keyword"> const</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;armnn::ScopedTensorHandle&gt;(tensorInfo);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a73ac5e3f91727655f742643013215a2b">   59</a></span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a73ac5e3f91727655f742643013215a2b">SampleDynamicWorkloadFactory::CreateAddition</a>(</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a>&amp; info)<span class="keyword"> const</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;SampleDynamicAdditionWorkload&gt;(descriptor, info);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a3e7b63e791ca559838c81aec0e18fb46">   66</a></span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a3e7b63e791ca559838c81aec0e18fb46">SampleDynamicWorkloadFactory::CreateInput</a>(</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">armnn::InputQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a>&amp; info)<span class="keyword"> const</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;armnn::CopyMemGenericWorkload&gt;(descriptor, info);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#ac8ea7b9d330f8828aedb2374914808c3">   73</a></span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#ac8ea7b9d330f8828aedb2374914808c3">SampleDynamicWorkloadFactory::CreateOutput</a>(</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">armnn::OutputQueueDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a>&amp; info)<span class="keyword"> const</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;armnn::CopyMemGenericWorkload&gt;(descriptor, info);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;} <span class="comment">// namespace sdb</span></div><div class="ttc" id="_mem_copy_workload_8hpp_xhtml"><div class="ttname"><a href="_mem_copy_workload_8hpp.xhtml">MemCopyWorkload.hpp</a></div></div>
<div class="ttc" id="classsdb_1_1_sample_dynamic_workload_factory_xhtml_a95614d4751bdcb17307e50a091635efb"><div class="ttname"><a href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a95614d4751bdcb17307e50a091635efb">sdb::SampleDynamicWorkloadFactory::SampleDynamicWorkloadFactory</a></div><div class="ttdeci">SampleDynamicWorkloadFactory()</div><div class="ttdef"><b>Definition:</b> <a href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00027">SampleDynamicWorkloadFactory.cpp:27</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a138ca3929b888fa8d9088c076e9de48c"><div class="ttname"><a href="namespacearmnn.xhtml#a138ca3929b888fa8d9088c076e9de48c">armnn::IsLayerSupported</a></div><div class="ttdeci">bool IsLayerSupported(const armnn::Layer *layer)</div><div class="ttdef"><b>Definition:</b> <a href="_mock_backend_8cpp_source.xhtml#l00060">MockBackend.cpp:60</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00068">INetwork.hpp:68</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00062">Types.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="_tensor_handle_8hpp.xhtml">TensorHandle.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classsdb_1_1_sample_dynamic_workload_factory_xhtml_ac8ea7b9d330f8828aedb2374914808c3"><div class="ttname"><a href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#ac8ea7b9d330f8828aedb2374914808c3">sdb::SampleDynamicWorkloadFactory::CreateOutput</a></div><div class="ttdeci">std::unique_ptr&lt; armnn::IWorkload &gt; CreateOutput(const armnn::OutputQueueDescriptor &amp;descriptor, const armnn::WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00073">SampleDynamicWorkloadFactory.cpp:73</a></div></div>
<div class="ttc" id="_sample_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="_sample_tensor_handle_8hpp.xhtml">SampleTensorHandle.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_addition_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00280">WorkloadData.hpp:280</a></div></div>
<div class="ttc" id="_sample_dynamic_addition_workload_8hpp_xhtml"><div class="ttname"><a href="_sample_dynamic_addition_workload_8hpp.xhtml">SampleDynamicAdditionWorkload.hpp</a></div></div>
<div class="ttc" id="_sample_dynamic_workload_factory_8hpp_xhtml"><div class="ttname"><a href="_sample_dynamic_workload_factory_8hpp.xhtml">SampleDynamicWorkloadFactory.hpp</a></div></div>
<div class="ttc" id="namespacesdb_xhtml"><div class="ttname"><a href="namespacesdb.xhtml">sdb</a></div><div class="ttdef"><b>Definition:</b> <a href="_sample_dynamic_addition_workload_8cpp_source.xhtml#l00011">SampleDynamicAdditionWorkload.cpp:11</a></div></div>
<div class="ttc" id="classsdb_1_1_sample_dynamic_workload_factory_xhtml_ae5dac93c38aa9f9108f89b7f4acc2beb"><div class="ttname"><a href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#ae5dac93c38aa9f9108f89b7f4acc2beb">sdb::SampleDynamicWorkloadFactory::GetBackendId</a></div><div class="ttdeci">const armnn::BackendId &amp; GetBackendId() const override</div><div class="ttdef"><b>Definition:</b> <a href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00032">SampleDynamicWorkloadFactory.cpp:32</a></div></div>
<div class="ttc" id="classsdb_1_1_sample_dynamic_workload_factory_xhtml_a58a47e731eae3f09651e3f2451920f0a"><div class="ttname"><a href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a58a47e731eae3f09651e3f2451920f0a">sdb::SampleDynamicWorkloadFactory::IsLayerSupported</a></div><div class="ttdeci">static bool IsLayerSupported(const armnn::IConnectableLayer &amp;layer, armnn::Optional&lt; armnn::DataType &gt; dataType, std::string &amp;outReasonIfUnsupported)</div><div class="ttdef"><b>Definition:</b> <a href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00037">SampleDynamicWorkloadFactory.cpp:37</a></div></div>
<div class="ttc" id="classsdb_1_1_sample_dynamic_workload_factory_xhtml_afeebce3ac305675b16d1065d0cb5a362"><div class="ttname"><a href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#afeebce3ac305675b16d1065d0cb5a362">sdb::SampleDynamicWorkloadFactory::CreateTensorHandle</a></div><div class="ttdeci">std::unique_ptr&lt; armnn::ITensorHandle &gt; CreateTensorHandle(const armnn::TensorInfo &amp;tensorInfo, const bool IsMemoryManaged=true) const override</div><div class="ttdef"><b>Definition:</b> <a href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00044">SampleDynamicWorkloadFactory.cpp:44</a></div></div>
<div class="ttc" id="classsdb_1_1_sample_dynamic_workload_factory_xhtml_a73ac5e3f91727655f742643013215a2b"><div class="ttname"><a href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a73ac5e3f91727655f742643013215a2b">sdb::SampleDynamicWorkloadFactory::CreateAddition</a></div><div class="ttdeci">std::unique_ptr&lt; armnn::IWorkload &gt; CreateAddition(const armnn::AdditionQueueDescriptor &amp;descriptor, const armnn::WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00059">SampleDynamicWorkloadFactory.cpp:59</a></div></div>
<div class="ttc" id="_ref_dynamic_backend_8cpp_xhtml_adaff295134ed2825ae43a8e9281b6f2a"><div class="ttname"><a href="_ref_dynamic_backend_8cpp.xhtml#adaff295134ed2825ae43a8e9281b6f2a">GetBackendId</a></div><div class="ttdeci">const char * GetBackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_ref_dynamic_backend_8cpp_source.xhtml#l00012">RefDynamicBackend.cpp:12</a></div></div>
<div class="ttc" id="classsdb_1_1_sample_dynamic_workload_factory_xhtml_a3e7b63e791ca559838c81aec0e18fb46"><div class="ttname"><a href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a3e7b63e791ca559838c81aec0e18fb46">sdb::SampleDynamicWorkloadFactory::CreateInput</a></div><div class="ttdeci">std::unique_ptr&lt; armnn::IWorkload &gt; CreateInput(const armnn::InputQueueDescriptor &amp;descriptor, const armnn::WorkloadInfo &amp;info) const override</div><div class="ttdef"><b>Definition:</b> <a href="_sample_dynamic_workload_factory_8cpp_source.xhtml#l00066">SampleDynamicWorkloadFactory.cpp:66</a></div></div>
<div class="ttc" id="structarmnn_1_1_mem_copy_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml">armnn::MemCopyQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00086">WorkloadData.hpp:86</a></div></div>
<div class="ttc" id="classsdb_1_1_sample_memory_manager_xhtml"><div class="ttname"><a href="classsdb_1_1_sample_memory_manager.xhtml">sdb::SampleMemoryManager</a></div><div class="ttdef"><b>Definition:</b> <a href="_sample_memory_manager_8hpp_source.xhtml#l00016">SampleMemoryManager.hpp:16</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about TensorInfos of a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_id_xhtml"><div class="ttname"><a href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00075">BackendId.hpp:75</a></div></div>
<div class="ttc" id="_sample_dynamic_backend_8hpp_xhtml"><div class="ttname"><a href="_sample_dynamic_backend_8hpp.xhtml">SampleDynamicBackend.hpp</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_101da30fc6c118b726c448f5a6ab9e53.xhtml">dynamic</a></li><li class="navelem"><a class="el" href="dir_b94b32fb1d16ed92698df04c7e9ebd86.xhtml">sample</a></li><li class="navelem"><a class="el" href="_sample_dynamic_workload_factory_8cpp.xhtml">SampleDynamicWorkloadFactory.cpp</a></li>
    <li class="footer">Generated on Wed Nov 23 2022 10:57:38 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
