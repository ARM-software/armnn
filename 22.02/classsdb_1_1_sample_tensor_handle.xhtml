<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: SampleTensorHandle Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classsdb_1_1_sample_tensor_handle.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classsdb_1_1_sample_tensor_handle-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SampleTensorHandle Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_sample_tensor_handle_8hpp_source.xhtml">SampleTensorHandle.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for SampleTensorHandle:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsdb_1_1_sample_tensor_handle.png" usemap="#SampleTensorHandle_map" alt=""/>
  <map id="SampleTensorHandle_map" name="SampleTensorHandle_map">
<area href="classarmnn_1_1_i_tensor_handle.xhtml" alt="ITensorHandle" shape="rect" coords="0,0,132,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ade800fcc5d3c901e623d6f2bd8348f43"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml#ade800fcc5d3c901e623d6f2bd8348f43">SampleTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;tensorInfo, std::shared_ptr&lt; <a class="el" href="classsdb_1_1_sample_memory_manager.xhtml">SampleMemoryManager</a> &gt; &amp;memoryManager)</td></tr>
<tr class="separator:ade800fcc5d3c901e623d6f2bd8348f43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6ba8927c4661096cab8a138c6bb6355"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml#aa6ba8927c4661096cab8a138c6bb6355">SampleTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;tensorInfo, <a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">armnn::MemorySourceFlags</a> importFlags)</td></tr>
<tr class="separator:aa6ba8927c4661096cab8a138c6bb6355"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aace4f8ca7089e7d2f1e13b643f603901"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml#aace4f8ca7089e7d2f1e13b643f603901">~SampleTensorHandle</a> ()</td></tr>
<tr class="separator:aace4f8ca7089e7d2f1e13b643f603901"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca21728cdaa75f9d656d25ae7200ade5"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml#aca21728cdaa75f9d656d25ae7200ade5">Manage</a> () override</td></tr>
<tr class="memdesc:aca21728cdaa75f9d656d25ae7200ade5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicate to the memory manager that this resource is active.  <a href="#aca21728cdaa75f9d656d25ae7200ade5">More...</a><br /></td></tr>
<tr class="separator:aca21728cdaa75f9d656d25ae7200ade5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8518772c5d692e334a76617582b10b92"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml#a8518772c5d692e334a76617582b10b92">Allocate</a> () override</td></tr>
<tr class="memdesc:a8518772c5d692e334a76617582b10b92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicate to the memory manager that this resource is no longer active.  <a href="#a8518772c5d692e334a76617582b10b92">More...</a><br /></td></tr>
<tr class="separator:a8518772c5d692e334a76617582b10b92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6c52b35388890f2c563afbebfb456a6"><td class="memItemLeft" align="right" valign="top">virtual ITensorHandle *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml#ab6c52b35388890f2c563afbebfb456a6">GetParent</a> () const override</td></tr>
<tr class="memdesc:ab6c52b35388890f2c563afbebfb456a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the parent tensor if this is a subtensor.  <a href="#ab6c52b35388890f2c563afbebfb456a6">More...</a><br /></td></tr>
<tr class="separator:ab6c52b35388890f2c563afbebfb456a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc70d69d2748d1432e4999d4af361f3b"><td class="memItemLeft" align="right" valign="top">virtual const void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml#adc70d69d2748d1432e4999d4af361f3b">Map</a> (bool) const override</td></tr>
<tr class="memdesc:adc70d69d2748d1432e4999d4af361f3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Map the tensor data for access.  <a href="#adc70d69d2748d1432e4999d4af361f3b">More...</a><br /></td></tr>
<tr class="separator:adc70d69d2748d1432e4999d4af361f3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88ab6decf78c152e746b7d8dc2dd931f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml#a88ab6decf78c152e746b7d8dc2dd931f">Unmap</a> () const override</td></tr>
<tr class="memdesc:a88ab6decf78c152e746b7d8dc2dd931f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unmap the tensor data.  <a href="#a88ab6decf78c152e746b7d8dc2dd931f">More...</a><br /></td></tr>
<tr class="separator:a88ab6decf78c152e746b7d8dc2dd931f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abaed8901397a5d1238b88d0c1dec8d5b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml#abaed8901397a5d1238b88d0c1dec8d5b">GetStrides</a> () const override</td></tr>
<tr class="memdesc:abaed8901397a5d1238b88d0c1dec8d5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the strides for each dimension ordered from largest to smallest where the smallest value is the same as the size of a single element in the tensor.  <a href="#abaed8901397a5d1238b88d0c1dec8d5b">More...</a><br /></td></tr>
<tr class="separator:abaed8901397a5d1238b88d0c1dec8d5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62be7a258e366d990a80a5242bc419cd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml#a62be7a258e366d990a80a5242bc419cd">GetShape</a> () const override</td></tr>
<tr class="memdesc:a62be7a258e366d990a80a5242bc419cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of elements for each dimension ordered from slowest iterating dimension to fastest iterating dimension.  <a href="#a62be7a258e366d990a80a5242bc419cd">More...</a><br /></td></tr>
<tr class="separator:a62be7a258e366d990a80a5242bc419cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1292fa227a4ab978d2b932e709d2eb3d"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml#a1292fa227a4ab978d2b932e709d2eb3d">GetTensorInfo</a> () const</td></tr>
<tr class="separator:a1292fa227a4ab978d2b932e709d2eb3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a086c9e516f9913f6f704eb8386458446"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">armnn::MemorySourceFlags</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml#a086c9e516f9913f6f704eb8386458446">GetImportFlags</a> () const override</td></tr>
<tr class="memdesc:a086c9e516f9913f6f704eb8386458446"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get flags describing supported import sources.  <a href="#a086c9e516f9913f6f704eb8386458446">More...</a><br /></td></tr>
<tr class="separator:a086c9e516f9913f6f704eb8386458446"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95a7eccdc2a9a03e48a1ebc7b0fb2c27"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml#a95a7eccdc2a9a03e48a1ebc7b0fb2c27">Import</a> (void *memory, <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">armnn::MemorySource</a> source) override</td></tr>
<tr class="memdesc:a95a7eccdc2a9a03e48a1ebc7b0fb2c27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Import externally allocated memory.  <a href="#a95a7eccdc2a9a03e48a1ebc7b0fb2c27">More...</a><br /></td></tr>
<tr class="separator:a95a7eccdc2a9a03e48a1ebc7b0fb2c27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_tensor_handle"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_tensor_handle')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a></td></tr>
<tr class="memitem:aff95f063e2b8041b3d0e4b4dc0e3821d inherit pub_methods_classarmnn_1_1_i_tensor_handle"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#aff95f063e2b8041b3d0e4b4dc0e3821d">~ITensorHandle</a> ()</td></tr>
<tr class="separator:aff95f063e2b8041b3d0e4b4dc0e3821d inherit pub_methods_classarmnn_1_1_i_tensor_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a270c8f844df649b9b0599c1e4db44cd3 inherit pub_methods_classarmnn_1_1_i_tensor_handle"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a270c8f844df649b9b0599c1e4db44cd3">Map</a> (bool blocking=true)</td></tr>
<tr class="memdesc:a270c8f844df649b9b0599c1e4db44cd3 inherit pub_methods_classarmnn_1_1_i_tensor_handle"><td class="mdescLeft">&#160;</td><td class="mdescRight">Map the tensor data for access.  <a href="classarmnn_1_1_i_tensor_handle.xhtml#a270c8f844df649b9b0599c1e4db44cd3">More...</a><br /></td></tr>
<tr class="separator:a270c8f844df649b9b0599c1e4db44cd3 inherit pub_methods_classarmnn_1_1_i_tensor_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2be1412c91842a072ad94759f52033e inherit pub_methods_classarmnn_1_1_i_tensor_handle"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#ab2be1412c91842a072ad94759f52033e">Unmap</a> ()</td></tr>
<tr class="memdesc:ab2be1412c91842a072ad94759f52033e inherit pub_methods_classarmnn_1_1_i_tensor_handle"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unmap the tensor data that was previously mapped with call to <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a9afbc055a017adf1bc38ee137bca6e90" title="Map the tensor data for access. ">Map()</a>.  <a href="classarmnn_1_1_i_tensor_handle.xhtml#ab2be1412c91842a072ad94759f52033e">More...</a><br /></td></tr>
<tr class="separator:ab2be1412c91842a072ad94759f52033e inherit pub_methods_classarmnn_1_1_i_tensor_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6caeedd55f4d685fd04b8fcb352dae4e inherit pub_methods_classarmnn_1_1_i_tensor_handle"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a6caeedd55f4d685fd04b8fcb352dae4e">CanBeImported</a> (void *memory, <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a> source)</td></tr>
<tr class="memdesc:a6caeedd55f4d685fd04b8fcb352dae4e inherit pub_methods_classarmnn_1_1_i_tensor_handle"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementations must determine if this memory block can be imported.  <a href="classarmnn_1_1_i_tensor_handle.xhtml#a6caeedd55f4d685fd04b8fcb352dae4e">More...</a><br /></td></tr>
<tr class="separator:a6caeedd55f4d685fd04b8fcb352dae4e inherit pub_methods_classarmnn_1_1_i_tensor_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9eee7f9d4e230d684a7307ac4d75d8a9 inherit pub_methods_classarmnn_1_1_i_tensor_handle"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a9eee7f9d4e230d684a7307ac4d75d8a9">Unimport</a> ()</td></tr>
<tr class="memdesc:a9eee7f9d4e230d684a7307ac4d75d8a9 inherit pub_methods_classarmnn_1_1_i_tensor_handle"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unimport externally allocated memory.  <a href="classarmnn_1_1_i_tensor_handle.xhtml#a9eee7f9d4e230d684a7307ac4d75d8a9">More...</a><br /></td></tr>
<tr class="separator:a9eee7f9d4e230d684a7307ac4d75d8a9 inherit pub_methods_classarmnn_1_1_i_tensor_handle"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml#l00015">15</a> of file <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml">SampleTensorHandle.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ade800fcc5d3c901e623d6f2bd8348f43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade800fcc5d3c901e623d6f2bd8348f43">&#9670;&nbsp;</a></span>SampleTensorHandle() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml">SampleTensorHandle</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classsdb_1_1_sample_memory_manager.xhtml">SampleMemoryManager</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00011">11</a> of file <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml">SampleTensorHandle.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml#l00054">SampleTensorHandle::GetImportFlags()</a>.</p>
<div class="fragment"><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    : m_TensorInfo(tensorInfo),</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;      m_MemoryManager(memoryManager),</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;      m_Pool(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;      m_UnmanagedMemory(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;      m_ImportFlags(static_cast&lt;armnn::MemorySourceFlags&gt;(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::MemorySource::Undefined</a>)),</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;      m_Imported(<span class="keyword">false</span>)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa6ba8927c4661096cab8a138c6bb6355"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6ba8927c4661096cab8a138c6bb6355">&#9670;&nbsp;</a></span>SampleTensorHandle() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml">SampleTensorHandle</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">armnn::MemorySourceFlags</a>&#160;</td>
          <td class="paramname"><em>importFlags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00023">23</a> of file <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml">SampleTensorHandle.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    : m_TensorInfo(tensorInfo),</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;      m_MemoryManager(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;      m_Pool(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;      m_UnmanagedMemory(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;      m_ImportFlags(importFlags),</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;      m_Imported(<span class="keyword">true</span>)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aace4f8ca7089e7d2f1e13b643f603901"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aace4f8ca7089e7d2f1e13b643f603901">&#9670;&nbsp;</a></span>~SampleTensorHandle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml">SampleTensorHandle</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml">SampleTensorHandle.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">if</span> (!m_Pool)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="comment">// unmanaged</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">if</span> (!m_Imported)</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            ::operator <span class="keyword">delete</span>(m_UnmanagedMemory);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a8518772c5d692e334a76617582b10b92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8518772c5d692e334a76617582b10b92">&#9670;&nbsp;</a></span>Allocate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Allocate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Indicate to the memory manager that this resource is no longer active. </p>
<p>This is used to compute overlapping lifetimes of resources. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a5cceed8b707a09bf27eb61f17acf8a88">ITensorHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml">SampleTensorHandle.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00429">TensorInfo::GetNumBytes()</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">if</span> (!m_UnmanagedMemory)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">if</span> (!m_Pool)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="comment">// unmanaged</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            m_UnmanagedMemory = ::operator <span class="keyword">new</span>(m_TensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            m_MemoryManager-&gt;Allocate(m_Pool);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>(<span class="stringliteral">&quot;SampleTensorHandle::Allocate Trying to allocate a &quot;</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                                              <span class="stringliteral">&quot;SampleTensorHandle that already has allocated &quot;</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                                              <span class="stringliteral">&quot;memory.&quot;</span>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abcbdfb544ece4c31d0b37715ad0f3be0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">armnn::TensorInfo::GetNumBytes</a></div><div class="ttdeci">unsigned int GetNumBytes() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00429">Tensor.cpp:429</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a086c9e516f9913f6f704eb8386458446"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a086c9e516f9913f6f704eb8386458446">&#9670;&nbsp;</a></span>GetImportFlags()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">armnn::MemorySourceFlags</a> GetImportFlags </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get flags describing supported import sources. </p>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a55cddc2dbb32d680cd85b635ba370e48">ITensorHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml#l00054">54</a> of file <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml">SampleTensorHandle.hpp</a>.</p>

<p class="reference">References <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00091">SampleTensorHandle::Import()</a>, and <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00011">SampleTensorHandle::SampleTensorHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">return</span> m_ImportFlags;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="ab6c52b35388890f2c563afbebfb456a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6c52b35388890f2c563afbebfb456a6">&#9670;&nbsp;</a></span>GetParent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ITensorHandle* GetParent </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the parent tensor if this is a subtensor. </p>
<dl class="section return"><dt>Returns</dt><dd>a pointer to the parent tensor. Otherwise nullptr if not a subtensor. </dd></dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a437893b8dcf58a0b68b70e1ad7933be6">ITensorHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml#l00028">28</a> of file <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml">SampleTensorHandle.hpp</a>.</p>

<p class="reference">References <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00074">SampleTensorHandle::Map()</a>.</p>
<div class="fragment"><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a62be7a258e366d990a80a5242bc419cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62be7a258e366d990a80a5242bc419cd">&#9670;&nbsp;</a></span>GetShape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> GetShape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of elements for each dimension ordered from slowest iterating dimension to fastest iterating dimension. </p>
<dl class="section return"><dt>Returns</dt><dd>a TensorShape filled with the number of elements for each dimension. </dd></dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">ITensorHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml#l00044">44</a> of file <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml">SampleTensorHandle.hpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">return</span> m_TensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abaed8901397a5d1238b88d0c1dec8d5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abaed8901397a5d1238b88d0c1dec8d5b">&#9670;&nbsp;</a></span>GetStrides()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> GetStrides </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the strides for each dimension ordered from largest to smallest where the smallest value is the same as the size of a single element in the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>a TensorShape filled with the strides for each dimension </dd></dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a30c3e09ce55369b66469443a4ca5ef03">ITensorHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml#l00039">39</a> of file <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml">SampleTensorHandle.hpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_handle_8cpp_source.xhtml#l00015">armnn::GetUnpaddedTensorStrides()</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a36e8f52330a21eeab3cc7c4e030f3583">GetUnpaddedTensorStrides</a>(m_TensorInfo);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    }</div><div class="ttc" id="namespacearmnn_xhtml_a36e8f52330a21eeab3cc7c4e030f3583"><div class="ttname"><a href="namespacearmnn.xhtml#a36e8f52330a21eeab3cc7c4e030f3583">armnn::GetUnpaddedTensorStrides</a></div><div class="ttdeci">TensorShape GetUnpaddedTensorStrides(const TensorInfo &amp;tensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_8cpp_source.xhtml#l00015">TensorHandle.cpp:15</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1292fa227a4ab978d2b932e709d2eb3d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1292fa227a4ab978d2b932e709d2eb3d">&#9670;&nbsp;</a></span>GetTensorInfo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; GetTensorInfo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml#l00049">49</a> of file <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml">SampleTensorHandle.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_dynamic_addition_workload_8cpp_source.xhtml#l00014">sdb::GetTensorInfo()</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">return</span> m_TensorInfo;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a95a7eccdc2a9a03e48a1ebc7b0fb2c27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95a7eccdc2a9a03e48a1ebc7b0fb2c27">&#9670;&nbsp;</a></span>Import()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Import </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>memory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">armnn::MemorySource</a>&#160;</td>
          <td class="paramname"><em>source</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Import externally allocated memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">memory</td><td>base address of the memory being imported. </td></tr>
    <tr><td class="paramname">source</td><td>source of the allocation for the memory being imported. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true on success or false on failure </dd></dl>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a4f81a9eff30c9b9fe76f5b83af470ba7">ITensorHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00091">91</a> of file <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml">SampleTensorHandle.cpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00429">TensorInfo::GetNumBytes()</a>, and <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::Malloc</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml#l00054">SampleTensorHandle::GetImportFlags()</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">if</span> (m_ImportFlags &amp; static_cast&lt;armnn::MemorySourceFlags&gt;(source))</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">if</span> (source == <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::MemorySource::Malloc</a>)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="comment">// Check memory alignment</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            constexpr uintptr_t alignment = <span class="keyword">sizeof</span>(size_t);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">if</span> (reinterpret_cast&lt;uintptr_t&gt;(memory) % alignment)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keywordflow">if</span> (m_Imported)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    m_Imported = <span class="keyword">false</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    m_UnmanagedMemory = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="comment">// m_UnmanagedMemory not yet allocated.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordflow">if</span> (!m_Imported &amp;&amp; !m_UnmanagedMemory)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                m_UnmanagedMemory = memory;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                m_Imported = <span class="keyword">true</span>;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="comment">// m_UnmanagedMemory initially allocated with Allocate().</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">if</span> (!m_Imported &amp;&amp; m_UnmanagedMemory)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="comment">// m_UnmanagedMemory previously imported.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">if</span> (m_Imported)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                m_UnmanagedMemory = memory;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::MemorySource::Malloc</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aca21728cdaa75f9d656d25ae7200ade5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca21728cdaa75f9d656d25ae7200ade5">&#9670;&nbsp;</a></span>Manage()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Manage </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Indicate to the memory manager that this resource is active. </p>
<p>This is used to compute overlapping lifetimes of resources. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a04149d0f9b9c54c05e95693111490daf">ITensorHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00047">47</a> of file <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml">SampleTensorHandle.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00429">TensorInfo::GetNumBytes()</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    m_Pool = m_MemoryManager-&gt;Manage(m_TensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abcbdfb544ece4c31d0b37715ad0f3be0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">armnn::TensorInfo::GetNumBytes</a></div><div class="ttdeci">unsigned int GetNumBytes() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00429">Tensor.cpp:429</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adc70d69d2748d1432e4999d4af361f3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc70d69d2748d1432e4999d4af361f3b">&#9670;&nbsp;</a></span>Map()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const void * Map </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>blocking</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Map the tensor data for access. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">blocking</td><td>hint to block the calling thread until all other accesses are complete. (backend dependent) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>pointer to the first element of the mapped data. </dd></dl>

<p>Implements <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a9afbc055a017adf1bc38ee137bca6e90">ITensorHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml#l00074">74</a> of file <a class="el" href="_sample_tensor_handle_8cpp_source.xhtml">SampleTensorHandle.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml#l00028">SampleTensorHandle::GetParent()</a>.</p>
<div class="fragment"><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">return</span> GetPointer();</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a88ab6decf78c152e746b7d8dc2dd931f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88ab6decf78c152e746b7d8dc2dd931f">&#9670;&nbsp;</a></span>Unmap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Unmap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unmap the tensor data. </p>

<p>Implements <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#a563609828050f1b3a7868c23f3365923">ITensorHandle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml#l00036">36</a> of file <a class="el" href="_sample_tensor_handle_8hpp_source.xhtml">SampleTensorHandle.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {}</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/dynamic/sample/<a class="el" href="_sample_tensor_handle_8hpp_source.xhtml">SampleTensorHandle.hpp</a></li>
<li>src/dynamic/sample/<a class="el" href="_sample_tensor_handle_8cpp_source.xhtml">SampleTensorHandle.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacesdb.xhtml">sdb</a></li><li class="navelem"><a class="el" href="classsdb_1_1_sample_tensor_handle.xhtml">SampleTensorHandle</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:31 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
