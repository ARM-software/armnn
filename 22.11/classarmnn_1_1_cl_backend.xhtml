<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: ClBackend Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_cl_backend.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="classarmnn_1_1_cl_backend-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ClBackend Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_cl_backend_8hpp_source.xhtml">ClBackend.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ClBackend:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_cl_backend.png" usemap="#ClBackend_map" alt=""/>
  <map id="ClBackend_map" name="ClBackend_map">
<area href="classarmnn_1_1_i_backend_internal.xhtml" alt="IBackendInternal" shape="rect" coords="0,56,106,80"/>
<area href="classarmnn_1_1_i_backend.xhtml" title="Each backend should implement an IBackend. " alt="IBackend" shape="rect" coords="0,0,106,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend_1_1_cl_backend_custom_allocator_memory_region.xhtml">ClBackendCustomAllocatorMemoryRegion</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend_1_1_cl_backend_custom_allocator_wrapper.xhtml">ClBackendCustomAllocatorWrapper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ab3fd5d6d6d71f2592b6da17c638fb6ed"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#ab3fd5d6d6d71f2592b6da17c638fb6ed">ClBackend</a> ()</td></tr>
<tr class="separator:ab3fd5d6d6d71f2592b6da17c638fb6ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa14d8ddb080da57ebb9b71fe9a2d6479"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#aa14d8ddb080da57ebb9b71fe9a2d6479">ClBackend</a> (std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_custom_allocator.xhtml">ICustomAllocator</a> &gt; allocator)</td></tr>
<tr class="separator:aa14d8ddb080da57ebb9b71fe9a2d6479"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d10800539d28eead01057c1cc75815d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a2d10800539d28eead01057c1cc75815d">~ClBackend</a> ()=default</td></tr>
<tr class="separator:a2d10800539d28eead01057c1cc75815d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c6c3d137a7792e264a89cc40ea94bb0"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a6c6c3d137a7792e264a89cc40ea94bb0">GetId</a> () const override</td></tr>
<tr class="separator:a6c6c3d137a7792e264a89cc40ea94bb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93fcb3bff141d8c77b53466a44b58eee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a12bff6d51d63dac1375c89bc8415dc46">IBackendInternal::IMemoryManagerUniquePtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a93fcb3bff141d8c77b53466a44b58eee">CreateMemoryManager</a> () const override</td></tr>
<tr class="separator:a93fcb3bff141d8c77b53466a44b58eee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e19e275c8162e34e6d8d10a9245dbc9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IBackendInternal::IWorkloadFactoryPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a8e19e275c8162e34e6d8d10a9245dbc9">CreateWorkloadFactory</a> (const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IBackendInternal::IMemoryManagerSharedPtr</a> &amp;memoryManager=nullptr) const override</td></tr>
<tr class="separator:a8e19e275c8162e34e6d8d10a9245dbc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2d432e503780e146c08729323da519a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IBackendInternal::IWorkloadFactoryPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#aa2d432e503780e146c08729323da519a">CreateWorkloadFactory</a> (<a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;registry) const override</td></tr>
<tr class="separator:aa2d432e503780e146c08729323da519a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19441d1c63ca23efb8d4305933bcb712"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a19441d1c63ca23efb8d4305933bcb712">CreateWorkloadFactory</a> (const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IMemoryManagerSharedPtr</a> &amp;memoryManager, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions) const override</td></tr>
<tr class="separator:a19441d1c63ca23efb8d4305933bcb712"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95c304f397c4ef9f0108834e16631219"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a95c304f397c4ef9f0108834e16631219">CreateWorkloadFactory</a> (class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;tensorHandleFactoryRegistry, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions) const override</td></tr>
<tr class="separator:a95c304f397c4ef9f0108834e16631219"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5362d5d9510627da3c9d5db2e669d64a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a5362d5d9510627da3c9d5db2e669d64a">CreateWorkloadFactory</a> (class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;tensorHandleFactoryRegistry, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions, <a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a> inputFlags, <a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a> outputFlags) const override</td></tr>
<tr class="separator:a5362d5d9510627da3c9d5db2e669d64a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63559c7f206c265f5fff5ffcc8a58e3e"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a63559c7f206c265f5fff5ffcc8a58e3e">GetHandleFactoryPreferences</a> () const override</td></tr>
<tr class="memdesc:a63559c7f206c265f5fff5ffcc8a58e3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">(<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>) Returns a vector of supported TensorHandleFactory ids in preference order.  <a href="#a63559c7f206c265f5fff5ffcc8a58e3e">More...</a><br /></td></tr>
<tr class="separator:a63559c7f206c265f5fff5ffcc8a58e3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a531177ce89c53c6af616175b0b05e5c0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a531177ce89c53c6af616175b0b05e5c0">RegisterTensorHandleFactories</a> (<a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;registry) override</td></tr>
<tr class="memdesc:a531177ce89c53c6af616175b0b05e5c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">(<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>) Register TensorHandleFactories Either this method or <a class="el" href="classarmnn_1_1_cl_backend.xhtml#a93fcb3bff141d8c77b53466a44b58eee">CreateMemoryManager()</a> and IWorkloadFactory::CreateTensor() IWorkloadFactory::CreateSubtensor() methods must be implemented.  <a href="#a531177ce89c53c6af616175b0b05e5c0">More...</a><br /></td></tr>
<tr class="separator:a531177ce89c53c6af616175b0b05e5c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f7312e595427f00078975f71c61dd8f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a5f7312e595427f00078975f71c61dd8f">RegisterTensorHandleFactories</a> (<a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;registry, <a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a> inputFlags, <a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a> outputFlags) override</td></tr>
<tr class="memdesc:a5f7312e595427f00078975f71c61dd8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">(<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>) Register TensorHandleFactories Either this method or <a class="el" href="classarmnn_1_1_cl_backend.xhtml#a93fcb3bff141d8c77b53466a44b58eee">CreateMemoryManager()</a> and IWorkloadFactory::CreateTensor() IWorkloadFactory::CreateSubtensor() methods must be implemented.  <a href="#a5f7312e595427f00078975f71c61dd8f">More...</a><br /></td></tr>
<tr class="separator:a5f7312e595427f00078975f71c61dd8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a801cf3170dc777aca3e6f926d1bd70a5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">IBackendInternal::IBackendContextPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a801cf3170dc777aca3e6f926d1bd70a5">CreateBackendContext</a> (const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> &amp;) const override</td></tr>
<tr class="memdesc:a801cf3170dc777aca3e6f926d1bd70a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the runtime context of the backend.  <a href="#a801cf3170dc777aca3e6f926d1bd70a5">More...</a><br /></td></tr>
<tr class="separator:a801cf3170dc777aca3e6f926d1bd70a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68c2ef244261cc9649799284774af132"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">IBackendInternal::IBackendProfilingContextPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a68c2ef244261cc9649799284774af132">CreateBackendProfilingContext</a> (const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> &amp;, <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a335964abd41c91f7e6ef5c65865a7b98">IBackendProfilingPtr</a> &amp;backendProfiling) override</td></tr>
<tr class="memdesc:a68c2ef244261cc9649799284774af132"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create context specifically used for profiling interaction from backends.  <a href="#a68c2ef244261cc9649799284774af132">More...</a><br /></td></tr>
<tr class="separator:a68c2ef244261cc9649799284774af132"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93d4285a3ea5e4e3b35578484d889daa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">IBackendInternal::ILayerSupportSharedPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a93d4285a3ea5e4e3b35578484d889daa">GetLayerSupport</a> () const override</td></tr>
<tr class="separator:a93d4285a3ea5e4e3b35578484d889daa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e458b98037dbb048877d0fc3fdbd17d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">IBackendInternal::ILayerSupportSharedPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a9e458b98037dbb048877d0fc3fdbd17d">GetLayerSupport</a> (const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions) const override</td></tr>
<tr class="separator:a9e458b98037dbb048877d0fc3fdbd17d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a339efc194a1738cd93fcdde4d948a5cd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a339efc194a1738cd93fcdde4d948a5cd">OptimizeSubgraphView</a> (const <a class="el" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> &amp;subgraph, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions) const override</td></tr>
<tr class="separator:a339efc194a1738cd93fcdde4d948a5cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2482b4a7d5bde88e9b963be08017ce2b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">CreateBackendSpecificModelContext</a> (const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions) const override</td></tr>
<tr class="separator:a2482b4a7d5bde88e9b963be08017ce2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb75bad43612f5314622c4fa8a16e63d"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_custom_allocator.xhtml">ICustomAllocator</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#afb75bad43612f5314622c4fa8a16e63d">GetDefaultAllocator</a> () const override</td></tr>
<tr class="memdesc:afb75bad43612f5314622c4fa8a16e63d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the default memory allocator for the backend.  <a href="#afb75bad43612f5314622c4fa8a16e63d">More...</a><br /></td></tr>
<tr class="separator:afb75bad43612f5314622c4fa8a16e63d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9199ff425571ba62412bb903c2c933e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#aa9c506b558b8aa33a228b15164f40dc3">BackendCapabilities</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#ab9199ff425571ba62412bb903c2c933e">GetCapabilities</a> () const override</td></tr>
<tr class="memdesc:ab9199ff425571ba62412bb903c2c933e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a BackendCapability if the backend lists the capability The BackendCapability must then be inspected to check whether or not that BackendCapability is supported Otherwise returns an <a class="el" href="structarmnn_1_1_empty_optional.xhtml" title="EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...">EmptyOptional</a> if the BackendCapability is unlisted.  <a href="#ab9199ff425571ba62412bb903c2c933e">More...</a><br /></td></tr>
<tr class="separator:ab9199ff425571ba62412bb903c2c933e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d138dc799f160c3ee6d3cb77b17afe0"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a6d138dc799f160c3ee6d3cb77b17afe0">UseCustomMemoryAllocator</a> (std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_custom_allocator.xhtml">ICustomAllocator</a> &gt; allocator, <a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; std::string &amp;&gt; errMsg) override</td></tr>
<tr class="memdesc:a6d138dc799f160c3ee6d3cb77b17afe0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Signals the backend to use a custom memory allocator provided by the user.  <a href="#a6d138dc799f160c3ee6d3cb77b17afe0">More...</a><br /></td></tr>
<tr class="separator:a6d138dc799f160c3ee6d3cb77b17afe0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebeb1072c9b24079d9a6f796aa95aaac"><td class="memItemLeft" align="right" valign="top">virtual unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#aebeb1072c9b24079d9a6f796aa95aaac">GetNumberOfCacheFiles</a> () const override</td></tr>
<tr class="memdesc:aebeb1072c9b24079d9a6f796aa95aaac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of files cached if backend supports caching.  <a href="#aebeb1072c9b24079d9a6f796aa95aaac">More...</a><br /></td></tr>
<tr class="separator:aebeb1072c9b24079d9a6f796aa95aaac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_backend_internal"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_backend_internal')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a></td></tr>
<tr class="memitem:a8c507c220869f89aec2dc370ea6c5a0b inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a8c507c220869f89aec2dc370ea6c5a0b">~IBackendInternal</a> () override=default</td></tr>
<tr class="memdesc:a8c507c220869f89aec2dc370ea6c5a0b inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow backends created by the factory function to be destroyed through <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a>.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a8c507c220869f89aec2dc370ea6c5a0b">More...</a><br /></td></tr>
<tr class="separator:a8c507c220869f89aec2dc370ea6c5a0b inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a674f56c735a3d6300463cefb642f808a inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a674f56c735a3d6300463cefb642f808a">OptimizeSubgraphView</a> (const <a class="el" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> &amp;subgraph) const</td></tr>
<tr class="separator:a674f56c735a3d6300463cefb642f808a inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8f716b0eab6b9d63196d5a53d5fac81 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#af8f716b0eab6b9d63196d5a53d5fac81">SupportsTensorAllocatorAPI</a> () const</td></tr>
<tr class="separator:af8f716b0eab6b9d63196d5a53d5fac81 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ccbb386cc96a5336a8295a3c25d33dd inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a6ccbb386cc96a5336a8295a3c25d33dd">GetBackwardCompatibleFavoriteHandleFactory</a> ()</td></tr>
<tr class="separator:a6ccbb386cc96a5336a8295a3c25d33dd inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86a4b2845b0da158907d657c7b147ab0 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="structarmnn_1_1experimental_1_1_execution_data.xhtml">ExecutionData</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a86a4b2845b0da158907d657c7b147ab0">CreateExecutionData</a> (<a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &amp;workingMemDescriptor) const</td></tr>
<tr class="memdesc:a86a4b2845b0da158907d657c7b147ab0 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns ExecutionData for the backend.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a86a4b2845b0da158907d657c7b147ab0">More...</a><br /></td></tr>
<tr class="separator:a86a4b2845b0da158907d657c7b147ab0 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf96527a67532246f07ce44266e95e79 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#adf96527a67532246f07ce44266e95e79">UpdateExecutionData</a> (<a class="el" href="structarmnn_1_1experimental_1_1_execution_data.xhtml">ExecutionData</a> &amp;executionData, <a class="el" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a> &amp;workingMemDescriptor) const</td></tr>
<tr class="memdesc:adf96527a67532246f07ce44266e95e79 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the ExecutionData for a layer.  <a href="classarmnn_1_1_i_backend_internal.xhtml#adf96527a67532246f07ce44266e95e79">More...</a><br /></td></tr>
<tr class="separator:adf96527a67532246f07ce44266e95e79 inherit pub_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a177af502214bbc8123fbb4a3c4f0a1b8"><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#a177af502214bbc8123fbb4a3c4f0a1b8">GetIdStatic</a> ()</td></tr>
<tr class="separator:a177af502214bbc8123fbb4a3c4f0a1b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classarmnn_1_1_i_backend_internal"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classarmnn_1_1_i_backend_internal')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a></td></tr>
<tr class="memitem:a878b8f50d8a2f92ed624803e9f6968ae inherit pub_static_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="structarmnn_1_1_backend_version.xhtml">BackendVersion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a878b8f50d8a2f92ed624803e9f6968ae">GetApiVersion</a> ()</td></tr>
<tr class="memdesc:a878b8f50d8a2f92ed624803e9f6968ae inherit pub_static_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the version of the Backend API.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a878b8f50d8a2f92ed624803e9f6968ae">More...</a><br /></td></tr>
<tr class="separator:a878b8f50d8a2f92ed624803e9f6968ae inherit pub_static_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:af1937f516c364d9d99cb502249e7179d"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_cl_backend_1_1_cl_backend_custom_allocator_wrapper.xhtml">ClBackendCustomAllocatorWrapper</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">m_CustomAllocator</a></td></tr>
<tr class="separator:af1937f516c364d9d99cb502249e7179d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adda2579a4649278c81f18a1d3915b3a0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">m_UsingCustomAllocator</a> = false</td></tr>
<tr class="separator:adda2579a4649278c81f18a1d3915b3a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classarmnn_1_1_i_backend_internal"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classarmnn_1_1_i_backend_internal')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a></td></tr>
<tr class="memitem:a72ca1cf423bda4b0a9ffb789627126de inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IWorkloadFactoryPtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a> &gt;</td></tr>
<tr class="separator:a72ca1cf423bda4b0a9ffb789627126de inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada6d56575c0fe53cf23c7ae4610c6367 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">IBackendContextPtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_backend_context.xhtml">IBackendContext</a> &gt;</td></tr>
<tr class="separator:ada6d56575c0fe53cf23c7ae4610c6367 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae44a82b0e485e551a0f77150b1076e06 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">IBackendProfilingContextPtr</a> = std::shared_ptr&lt; arm::pipe::IBackendProfilingContext &gt;</td></tr>
<tr class="memdesc:ae44a82b0e485e551a0f77150b1076e06 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the bridge between backend and backend profiling we'll keep it in the backend namespace.  <a href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">More...</a><br /></td></tr>
<tr class="separator:ae44a82b0e485e551a0f77150b1076e06 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a335964abd41c91f7e6ef5c65865a7b98 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a335964abd41c91f7e6ef5c65865a7b98">IBackendProfilingPtr</a> = std::unique_ptr&lt; arm::pipe::IBackendProfiling &gt;</td></tr>
<tr class="separator:a335964abd41c91f7e6ef5c65865a7b98 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11fa919c11fe46aad613b2e960fcfe90 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">ILayerSupportSharedPtr</a> = std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a> &gt;</td></tr>
<tr class="separator:a11fa919c11fe46aad613b2e960fcfe90 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d0238968a7643dbb170547dd22bba54 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendSpecificModelContextPtr</a> = std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_backend_model_context.xhtml">IBackendModelContext</a> &gt;</td></tr>
<tr class="separator:a4d0238968a7643dbb170547dd22bba54 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12bff6d51d63dac1375c89bc8415dc46 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a12bff6d51d63dac1375c89bc8415dc46">IMemoryManagerUniquePtr</a> = std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt;</td></tr>
<tr class="separator:a12bff6d51d63dac1375c89bc8415dc46 inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a693b40e6b94e958836aeb0410ca186bd inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IMemoryManagerSharedPtr</a> = std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt;</td></tr>
<tr class="separator:a693b40e6b94e958836aeb0410ca186bd inherit pub_types_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_backend_internal"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_backend_internal')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml">IBackendInternal</a></td></tr>
<tr class="memitem:a675fed08e681be4343fb09ae73eb7641 inherit pro_methods_classarmnn_1_1_i_backend_internal"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a675fed08e681be4343fb09ae73eb7641">IBackendInternal</a> ()=default</td></tr>
<tr class="memdesc:a675fed08e681be4343fb09ae73eb7641 inherit pro_methods_classarmnn_1_1_i_backend_internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creation must be done through a specific backend interface.  <a href="classarmnn_1_1_i_backend_internal.xhtml#a675fed08e681be4343fb09ae73eb7641">More...</a><br /></td></tr>
<tr class="separator:a675fed08e681be4343fb09ae73eb7641 inherit pro_methods_classarmnn_1_1_i_backend_internal"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_backend"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_backend')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_backend.xhtml">IBackend</a></td></tr>
<tr class="memitem:a7cfc55eae265fa65b7d25e7dd3203f22 inherit pro_methods_classarmnn_1_1_i_backend"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend.xhtml#a7cfc55eae265fa65b7d25e7dd3203f22">IBackend</a> ()</td></tr>
<tr class="separator:a7cfc55eae265fa65b7d25e7dd3203f22 inherit pro_methods_classarmnn_1_1_i_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa73289e0503a4f7ec5909e117a57aa2b inherit pro_methods_classarmnn_1_1_i_backend"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_backend.xhtml#aa73289e0503a4f7ec5909e117a57aa2b">~IBackend</a> ()</td></tr>
<tr class="separator:aa73289e0503a4f7ec5909e117a57aa2b inherit pro_methods_classarmnn_1_1_i_backend"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_cl_backend_8hpp_source.xhtml#l00037">37</a> of file <a class="el" href="_cl_backend_8hpp_source.xhtml">ClBackend.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ab3fd5d6d6d71f2592b6da17c638fb6ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3fd5d6d6d71f2592b6da17c638fb6ed">&#9670;&nbsp;</a></span>ClBackend() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_cl_backend.xhtml">ClBackend</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_backend_8hpp_source.xhtml#l00040">40</a> of file <a class="el" href="_cl_backend_8hpp_source.xhtml">ClBackend.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;: <a class="code" href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">m_CustomAllocator</a>(<span class="keyword">nullptr</span>) {};</div><div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_af1937f516c364d9d99cb502249e7179d"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">armnn::ClBackend::m_CustomAllocator</a></div><div class="ttdeci">std::shared_ptr&lt; ClBackendCustomAllocatorWrapper &gt; m_CustomAllocator</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00299">ClBackend.hpp:299</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa14d8ddb080da57ebb9b71fe9a2d6479"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa14d8ddb080da57ebb9b71fe9a2d6479">&#9670;&nbsp;</a></span>ClBackend() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_cl_backend.xhtml">ClBackend</a> </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_custom_allocator.xhtml">ICustomAllocator</a> &gt;&#160;</td>
          <td class="paramname"><em>allocator</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_backend_8hpp_source.xhtml#l00041">41</a> of file <a class="el" href="_cl_backend_8hpp_source.xhtml">ClBackend.hpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_backend_8cpp_source.xhtml#l00045">ClBackend::GetIdStatic()</a>, <a class="el" href="_cl_backend_8hpp_source.xhtml#l00098">ClBackend::UseCustomMemoryAllocator()</a>, and <a class="el" href="classarmnn_1_1_cl_backend.xhtml#a2d10800539d28eead01057c1cc75815d">ClBackend::~ClBackend()</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        std::string err;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <a class="code" href="classarmnn_1_1_cl_backend.xhtml#a6d138dc799f160c3ee6d3cb77b17afe0">UseCustomMemoryAllocator</a>(allocator, err);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div><div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_a6d138dc799f160c3ee6d3cb77b17afe0"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#a6d138dc799f160c3ee6d3cb77b17afe0">armnn::ClBackend::UseCustomMemoryAllocator</a></div><div class="ttdeci">virtual bool UseCustomMemoryAllocator(std::shared_ptr&lt; ICustomAllocator &gt; allocator, armnn::Optional&lt; std::string &amp;&gt; errMsg) override</div><div class="ttdoc">Signals the backend to use a custom memory allocator provided by the user. </div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00098">ClBackend.hpp:98</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2d10800539d28eead01057c1cc75815d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d10800539d28eead01057c1cc75815d">&#9670;&nbsp;</a></span>~ClBackend()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_cl_backend.xhtml">ClBackend</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_cl_backend_8hpp_source.xhtml#l00041">ClBackend::ClBackend()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a801cf3170dc777aca3e6f926d1bd70a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a801cf3170dc777aca3e6f926d1bd70a5">&#9670;&nbsp;</a></span>CreateBackendContext()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">IBackendInternal::IBackendContextPtr</a> CreateBackendContext </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create the runtime context of the backend. </p>
<p>Implementations may return a default-constructed IBackendContextPtr if no context is needed at runtime. Implementations must throw <a class="el" href="classarmnn_1_1_backend_unavailable_exception.xhtml" title="Class for non-fatal exceptions raised while initialising a backend. ">BackendUnavailableException</a> if the backend cannot be used (for example, necessary accelerator hardware is not present). The default implementation always returns a default-constructed pointer. </p>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a07a1b3f9ac897364b5c2aacc227cbebc">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00236">236</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_backend_8hpp_source.xhtml#l00049">ClBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;{</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">IBackendContextPtr</a>{<span class="keyword">new</span> ClBackendContext{options}};</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_ada6d56575c0fe53cf23c7ae4610c6367"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#ada6d56575c0fe53cf23c7ae4610c6367">armnn::IBackendInternal::IBackendContextPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IBackendContext &gt; IBackendContextPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00090">IBackendInternal.hpp:90</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a68c2ef244261cc9649799284774af132"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68c2ef244261cc9649799284774af132">&#9670;&nbsp;</a></span>CreateBackendProfilingContext()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">IBackendInternal::IBackendProfilingContextPtr</a> CreateBackendProfilingContext </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">IRuntime::CreationOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>creationOptions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a335964abd41c91f7e6ef5c65865a7b98">IBackendProfilingPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>backendProfiling</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create context specifically used for profiling interaction from backends. </p>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a6c5064ef6323af5c547674d01b15d7ab">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00241">241</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_backend_8hpp_source.xhtml#l00049">ClBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;{</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">IBackendProfilingContextPtr</a>{};</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_ae44a82b0e485e551a0f77150b1076e06"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#ae44a82b0e485e551a0f77150b1076e06">armnn::IBackendInternal::IBackendProfilingContextPtr</a></div><div class="ttdeci">std::shared_ptr&lt; arm::pipe::IBackendProfilingContext &gt; IBackendProfilingContextPtr</div><div class="ttdoc">This is the bridge between backend and backend profiling we&amp;#39;ll keep it in the backend namespace...</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00092">IBackendInternal.hpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a2482b4a7d5bde88e9b963be08017ce2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2482b4a7d5bde88e9b963be08017ce2b">&#9670;&nbsp;</a></span>CreateBackendSpecificModelContext()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a> CreateBackendSpecificModelContext </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>modelOptions</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a41f38c8c2182463dec4f03769ea54f63">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00247">247</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_backend_8cpp_source.xhtml#l00067">ClBackend::CreateWorkloadFactory()</a>, <a class="el" href="_cl_backend_8hpp_source.xhtml#l00049">ClBackend::GetId()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00262">ClBackend::GetLayerSupport()</a>, and <a class="el" href="_cl_backend_8cpp_source.xhtml#l00276">ClBackend::OptimizeSubgraphView()</a>.</p>
<div class="fragment"><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;{</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendSpecificModelContextPtr</a>{<span class="keyword">new</span> ClBackendModelContext{modelOptions}};</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a4d0238968a7643dbb170547dd22bba54"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">armnn::IBackendInternal::IBackendSpecificModelContextPtr</a></div><div class="ttdeci">std::shared_ptr&lt; IBackendModelContext &gt; IBackendSpecificModelContextPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00096">IBackendInternal.hpp:96</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a93fcb3bff141d8c77b53466a44b58eee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93fcb3bff141d8c77b53466a44b58eee">&#9670;&nbsp;</a></span>CreateMemoryManager()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a12bff6d51d63dac1375c89bc8415dc46">IBackendInternal::IMemoryManagerUniquePtr</a> CreateMemoryManager </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a0fe4c12c8f1f0722d2a91f61c02a687a">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_backend_8hpp_source.xhtml#l00299">ClBackend::m_CustomAllocator</a>, and <a class="el" href="_cl_backend_8hpp_source.xhtml#l00300">ClBackend::m_UsingCustomAllocator</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_backend_8hpp_source.xhtml#l00049">ClBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">m_UsingCustomAllocator</a>)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;ClMemoryManager&gt;(<a class="code" href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">m_CustomAllocator</a>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;ClMemoryManager&gt;(std::make_unique&lt;arm_compute::CLBufferAllocator&gt;());</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_af1937f516c364d9d99cb502249e7179d"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">armnn::ClBackend::m_CustomAllocator</a></div><div class="ttdeci">std::shared_ptr&lt; ClBackendCustomAllocatorWrapper &gt; m_CustomAllocator</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00299">ClBackend.hpp:299</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_adda2579a4649278c81f18a1d3915b3a0"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">armnn::ClBackend::m_UsingCustomAllocator</a></div><div class="ttdeci">bool m_UsingCustomAllocator</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00300">ClBackend.hpp:300</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a8e19e275c8162e34e6d8d10a9245dbc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e19e275c8162e34e6d8d10a9245dbc9">&#9670;&nbsp;</a></span>CreateWorkloadFactory() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IBackendInternal::IWorkloadFactoryPtr</a> CreateWorkloadFactory </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IBackendInternal::IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em> = <code>nullptr</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#afd5a5e90515b31c0174f76ec8897e9b1">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00060">60</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_backend_8hpp_source.xhtml#l00049">ClBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;ClWorkloadFactory&gt;(</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        PolymorphicPointerDowncast&lt;ClMemoryManager&gt;(memoryManager));</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa2d432e503780e146c08729323da519a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2d432e503780e146c08729323da519a">&#9670;&nbsp;</a></span>CreateWorkloadFactory() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IBackendInternal::IWorkloadFactoryPtr</a> CreateWorkloadFactory </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;&#160;</td>
          <td class="paramname"><em>registry</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a41c5c170ef6708c1efc683d900f624ff">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00074">74</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_backend_8hpp_source.xhtml#l00299">ClBackend::m_CustomAllocator</a>, <a class="el" href="_cl_backend_8hpp_source.xhtml#l00300">ClBackend::m_UsingCustomAllocator</a>, <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::Malloc</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00066">TensorHandleFactoryRegistry::RegisterCopyAndImportFactoryPair()</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00012">TensorHandleFactoryRegistry::RegisterFactory()</a>, and <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00034">TensorHandleFactoryRegistry::RegisterMemoryManager()</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    std::shared_ptr&lt;ClMemoryManager&gt; memoryManager;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">m_UsingCustomAllocator</a>)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        memoryManager = std::make_shared&lt;ClMemoryManager&gt;(<a class="code" href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">m_CustomAllocator</a>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        memoryManager = std::make_shared&lt;ClMemoryManager&gt;(std::make_unique&lt;arm_compute::CLBufferAllocator&gt;());</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    std::unique_ptr&lt;ITensorHandleFactory&gt; factory = std::make_unique&lt;ClTensorHandleFactory&gt;(memoryManager);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    std::unique_ptr&lt;ITensorHandleFactory&gt; importFactory = std::make_unique&lt;ClImportTensorHandleFactory&gt;(</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a><span class="keyword">&gt;</span>(<a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">MemorySource::Malloc</a>), static_cast&lt;MemorySourceFlags&gt;(<a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">MemorySource::Malloc</a>));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    registry.RegisterCopyAndImportFactoryPair(factory-&gt;GetId(), importFactory-&gt;GetId());</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    registry.RegisterCopyAndImportFactoryPair(importFactory-&gt;GetId(), factory-&gt;GetId());</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    registry.RegisterMemoryManager(memoryManager);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    registry.RegisterFactory(std::move(factory));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    registry.RegisterFactory(std::move(importFactory));</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;ClWorkloadFactory&gt;(</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            PolymorphicPointerDowncast&lt;ClMemoryManager&gt;(memoryManager));</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_af1937f516c364d9d99cb502249e7179d"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">armnn::ClBackend::m_CustomAllocator</a></div><div class="ttdeci">std::shared_ptr&lt; ClBackendCustomAllocatorWrapper &gt; m_CustomAllocator</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00299">ClBackend.hpp:299</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5b05f3b7208ec7cea3338e30057c0bac"><div class="ttname"><a href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">armnn::MemorySourceFlags</a></div><div class="ttdeci">unsigned int MemorySourceFlags</div><div class="ttdef"><b>Definition:</b> <a href="_memory_sources_8hpp_source.xhtml#l00015">MemorySources.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::MemorySource::Malloc</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_adda2579a4649278c81f18a1d3915b3a0"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">armnn::ClBackend::m_UsingCustomAllocator</a></div><div class="ttdeci">bool m_UsingCustomAllocator</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00300">ClBackend.hpp:300</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a19441d1c63ca23efb8d4305933bcb712"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19441d1c63ca23efb8d4305933bcb712">&#9670;&nbsp;</a></span>CreateWorkloadFactory() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IBackendInternal::IWorkloadFactoryPtr</a> CreateWorkloadFactory </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">IMemoryManagerSharedPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>memoryManager</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>modelOptions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a22973198ab5ac5624b4caa78100d2d25">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00067">67</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_backend_8cpp_source.xhtml#l00247">ClBackend::CreateBackendSpecificModelContext()</a>.</p>
<div class="fragment"><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;ClWorkloadFactory&gt;(</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        PolymorphicPointerDowncast&lt;ClMemoryManager&gt;(memoryManager), <a class="code" href="classarmnn_1_1_cl_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">CreateBackendSpecificModelContext</a>(modelOptions));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_a2482b4a7d5bde88e9b963be08017ce2b"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">armnn::ClBackend::CreateBackendSpecificModelContext</a></div><div class="ttdeci">IBackendInternal::IBackendSpecificModelContextPtr CreateBackendSpecificModelContext(const ModelOptions &amp;modelOptions) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8cpp_source.xhtml#l00247">ClBackend.cpp:247</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a95c304f397c4ef9f0108834e16631219"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95c304f397c4ef9f0108834e16631219">&#9670;&nbsp;</a></span>CreateWorkloadFactory() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IBackendInternal::IWorkloadFactoryPtr</a> CreateWorkloadFactory </td>
          <td>(</td>
          <td class="paramtype">class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactoryRegistry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>modelOptions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#aebacbea86fddc46858f6329671ccf750">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00102">102</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_backend_8cpp_source.xhtml#l00247">ClBackend::CreateBackendSpecificModelContext()</a>, <a class="el" href="_cl_backend_8hpp_source.xhtml#l00299">ClBackend::m_CustomAllocator</a>, <a class="el" href="_cl_backend_8hpp_source.xhtml#l00300">ClBackend::m_UsingCustomAllocator</a>, <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::Malloc</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00066">TensorHandleFactoryRegistry::RegisterCopyAndImportFactoryPair()</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00012">TensorHandleFactoryRegistry::RegisterFactory()</a>, and <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00034">TensorHandleFactoryRegistry::RegisterMemoryManager()</a>.</p>
<div class="fragment"><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    std::shared_ptr&lt;ClMemoryManager&gt; memoryManager;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">m_UsingCustomAllocator</a>)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        memoryManager = std::make_shared&lt;ClMemoryManager&gt;(<a class="code" href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">m_CustomAllocator</a>);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        memoryManager = std::make_shared&lt;ClMemoryManager&gt;(std::make_unique&lt;arm_compute::CLBufferAllocator&gt;());</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    std::unique_ptr&lt;ITensorHandleFactory&gt; factory = std::make_unique&lt;ClTensorHandleFactory&gt;(memoryManager);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    std::unique_ptr&lt;ITensorHandleFactory&gt; importFactory = std::make_unique&lt;ClImportTensorHandleFactory&gt;(</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a><span class="keyword">&gt;</span>(<a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">MemorySource::Malloc</a>), static_cast&lt;MemorySourceFlags&gt;(<a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">MemorySource::Malloc</a>));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    registry.RegisterCopyAndImportFactoryPair(factory-&gt;GetId(), importFactory-&gt;GetId());</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    registry.RegisterCopyAndImportFactoryPair(importFactory-&gt;GetId(), factory-&gt;GetId());</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    registry.RegisterMemoryManager(memoryManager);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    registry.RegisterFactory(std::move(factory));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    registry.RegisterFactory(std::move(importFactory));</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;ClWorkloadFactory&gt;(</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        PolymorphicPointerDowncast&lt;ClMemoryManager&gt;(memoryManager), <a class="code" href="classarmnn_1_1_cl_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">CreateBackendSpecificModelContext</a>(modelOptions));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_af1937f516c364d9d99cb502249e7179d"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">armnn::ClBackend::m_CustomAllocator</a></div><div class="ttdeci">std::shared_ptr&lt; ClBackendCustomAllocatorWrapper &gt; m_CustomAllocator</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00299">ClBackend.hpp:299</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5b05f3b7208ec7cea3338e30057c0bac"><div class="ttname"><a href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">armnn::MemorySourceFlags</a></div><div class="ttdeci">unsigned int MemorySourceFlags</div><div class="ttdef"><b>Definition:</b> <a href="_memory_sources_8hpp_source.xhtml#l00015">MemorySources.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_a2482b4a7d5bde88e9b963be08017ce2b"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">armnn::ClBackend::CreateBackendSpecificModelContext</a></div><div class="ttdeci">IBackendInternal::IBackendSpecificModelContextPtr CreateBackendSpecificModelContext(const ModelOptions &amp;modelOptions) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8cpp_source.xhtml#l00247">ClBackend.cpp:247</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::MemorySource::Malloc</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_adda2579a4649278c81f18a1d3915b3a0"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">armnn::ClBackend::m_UsingCustomAllocator</a></div><div class="ttdeci">bool m_UsingCustomAllocator</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00300">ClBackend.hpp:300</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5362d5d9510627da3c9d5db2e669d64a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5362d5d9510627da3c9d5db2e669d64a">&#9670;&nbsp;</a></span>CreateWorkloadFactory() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a72ca1cf423bda4b0a9ffb789627126de">IBackendInternal::IWorkloadFactoryPtr</a> CreateWorkloadFactory </td>
          <td>(</td>
          <td class="paramtype">class <a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorHandleFactoryRegistry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>modelOptions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a>&#160;</td>
          <td class="paramname"><em>inputFlags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a>&#160;</td>
          <td class="paramname"><em>outputFlags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a6abedf4465c7f6b634a207d228cdf284">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00130">130</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_backend_8cpp_source.xhtml#l00247">ClBackend::CreateBackendSpecificModelContext()</a>, <a class="el" href="_cl_backend_8hpp_source.xhtml#l00299">ClBackend::m_CustomAllocator</a>, <a class="el" href="_cl_backend_8hpp_source.xhtml#l00300">ClBackend::m_UsingCustomAllocator</a>, <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::Malloc</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00066">TensorHandleFactoryRegistry::RegisterCopyAndImportFactoryPair()</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00012">TensorHandleFactoryRegistry::RegisterFactory()</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00034">TensorHandleFactoryRegistry::RegisterMemoryManager()</a>, and <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>.</p>
<div class="fragment"><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;{</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="comment">// To allow force import if inputFlags/outputFlags are Undefined, set it as Malloc</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">if</span> (inputFlags == static_cast&lt;MemorySourceFlags&gt;(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a>))</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        inputFlags = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a><span class="keyword">&gt;</span>(<a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">MemorySource::Malloc</a>);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">if</span> (outputFlags == static_cast&lt;MemorySourceFlags&gt;(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a>))</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        outputFlags = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a><span class="keyword">&gt;</span>(<a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">MemorySource::Malloc</a>);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    std::shared_ptr&lt;ClMemoryManager&gt; memoryManager;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">m_UsingCustomAllocator</a>)</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        memoryManager = std::make_shared&lt;ClMemoryManager&gt;(<a class="code" href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">m_CustomAllocator</a>);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        memoryManager = std::make_shared&lt;ClMemoryManager&gt;(std::make_unique&lt;arm_compute::CLBufferAllocator&gt;());</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    std::unique_ptr&lt;ITensorHandleFactory&gt; factory = std::make_unique&lt;ClTensorHandleFactory&gt;(memoryManager);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    std::unique_ptr&lt;ITensorHandleFactory&gt; importFactory = std::make_unique&lt;ClImportTensorHandleFactory&gt;(</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            inputFlags, outputFlags);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    registry.RegisterCopyAndImportFactoryPair(factory-&gt;GetId(), importFactory-&gt;GetId());</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    registry.RegisterCopyAndImportFactoryPair(importFactory-&gt;GetId(), factory-&gt;GetId());</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    registry.RegisterMemoryManager(memoryManager);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    registry.RegisterFactory(std::move(factory));</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    registry.RegisterFactory(std::move(importFactory));</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;ClWorkloadFactory&gt;(</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        PolymorphicPointerDowncast&lt;ClMemoryManager&gt;(memoryManager), <a class="code" href="classarmnn_1_1_cl_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">CreateBackendSpecificModelContext</a>(modelOptions));</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_af1937f516c364d9d99cb502249e7179d"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">armnn::ClBackend::m_CustomAllocator</a></div><div class="ttdeci">std::shared_ptr&lt; ClBackendCustomAllocatorWrapper &gt; m_CustomAllocator</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00299">ClBackend.hpp:299</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5b05f3b7208ec7cea3338e30057c0bac"><div class="ttname"><a href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">armnn::MemorySourceFlags</a></div><div class="ttdeci">unsigned int MemorySourceFlags</div><div class="ttdef"><b>Definition:</b> <a href="_memory_sources_8hpp_source.xhtml#l00015">MemorySources.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_a2482b4a7d5bde88e9b963be08017ce2b"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">armnn::ClBackend::CreateBackendSpecificModelContext</a></div><div class="ttdeci">IBackendInternal::IBackendSpecificModelContextPtr CreateBackendSpecificModelContext(const ModelOptions &amp;modelOptions) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8cpp_source.xhtml#l00247">ClBackend.cpp:247</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::MemorySource::Malloc</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_adda2579a4649278c81f18a1d3915b3a0"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">armnn::ClBackend::m_UsingCustomAllocator</a></div><div class="ttdeci">bool m_UsingCustomAllocator</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00300">ClBackend.hpp:300</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab9199ff425571ba62412bb903c2c933e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9199ff425571ba62412bb903c2c933e">&#9670;&nbsp;</a></span>GetCapabilities()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#aa9c506b558b8aa33a228b15164f40dc3">BackendCapabilities</a> GetCapabilities </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a BackendCapability if the backend lists the capability The BackendCapability must then be inspected to check whether or not that BackendCapability is supported Otherwise returns an <a class="el" href="structarmnn_1_1_empty_optional.xhtml" title="EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...">EmptyOptional</a> if the BackendCapability is unlisted. </p>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a057f6c5c3ab3248050ed548273c4beb9">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8hpp_source.xhtml#l00093">93</a> of file <a class="el" href="_cl_backend_8hpp_source.xhtml">ClBackend.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a15bdba6c60d1926c973764e74da4e30f">armnn::gpuAccCapabilities</a>.</p>
<div class="fragment"><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a15bdba6c60d1926c973764e74da4e30f">gpuAccCapabilities</a>;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    };</div><div class="ttc" id="namespacearmnn_xhtml_a15bdba6c60d1926c973764e74da4e30f"><div class="ttname"><a href="namespacearmnn.xhtml#a15bdba6c60d1926c973764e74da4e30f">armnn::gpuAccCapabilities</a></div><div class="ttdeci">const BackendCapabilities gpuAccCapabilities(&quot;GpuAcc&quot;, { {&quot;NonConstWeights&quot;, false}, {&quot;AsyncExecution&quot;, false}, {&quot;ProtectedContentAllocation&quot;, true}, {&quot;ConstantTensorsAsInputs&quot;, true}, {&quot;PreImportIOTensors&quot;, false}, {&quot;ExternallyManagedMemory&quot;, true}, {&quot;MultiAxisPacking&quot;, false}, {&quot;SingleAxisPacking&quot;, true} })</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="afb75bad43612f5314622c4fa8a16e63d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb75bad43612f5314622c4fa8a16e63d">&#9670;&nbsp;</a></span>GetDefaultAllocator()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_custom_allocator.xhtml">ICustomAllocator</a> &gt; GetDefaultAllocator </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the default memory allocator for the backend. </p>
<dl class="section return"><dt>Returns</dt><dd>- Returns unique pointer to the Default <a class="el" href="structarmnn_1_1_allocator.xhtml">Allocator</a> of the Backend </dd></dl>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a563472222884844adc3183c433f38e54">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00271">271</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_backend_8hpp_source.xhtml#l00049">ClBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;{</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;ClBackendDefaultAllocator&gt;();</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a63559c7f206c265f5fff5ffcc8a58e3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63559c7f206c265f5fff5ffcc8a58e3e">&#9670;&nbsp;</a></span>GetHandleFactoryPreferences()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a> &gt; GetHandleFactoryPreferences </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>(<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>) Returns a vector of supported TensorHandleFactory ids in preference order. </p>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ac5d107c5672f446603b6e6b92bce6244">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00170">170</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_tensor_handle_factory_8cpp_source.xhtml#l00093">ClTensorHandleFactory::GetIdStatic()</a>, and <a class="el" href="_cl_import_tensor_handle_factory_8cpp_source.xhtml#l00093">ClImportTensorHandleFactory::GetIdStatic()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_backend_8hpp_source.xhtml#l00049">ClBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;{</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">return</span> std::vector&lt;ITensorHandleFactory::FactoryId&gt; {<a class="code" href="classarmnn_1_1_cl_tensor_handle_factory.xhtml#acdecb5b442434112c2cc8fc48c0ea922">ClTensorHandleFactory::GetIdStatic</a>(),</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                                         <a class="code" href="classarmnn_1_1_cl_import_tensor_handle_factory.xhtml#acdecb5b442434112c2cc8fc48c0ea922">ClImportTensorHandleFactory::GetIdStatic</a>()};</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_cl_tensor_handle_factory_xhtml_acdecb5b442434112c2cc8fc48c0ea922"><div class="ttname"><a href="classarmnn_1_1_cl_tensor_handle_factory.xhtml#acdecb5b442434112c2cc8fc48c0ea922">armnn::ClTensorHandleFactory::GetIdStatic</a></div><div class="ttdeci">static const FactoryId &amp; GetIdStatic()</div><div class="ttdef"><b>Definition:</b> <a href="_cl_tensor_handle_factory_8cpp_source.xhtml#l00093">ClTensorHandleFactory.cpp:93</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_import_tensor_handle_factory_xhtml_acdecb5b442434112c2cc8fc48c0ea922"><div class="ttname"><a href="classarmnn_1_1_cl_import_tensor_handle_factory.xhtml#acdecb5b442434112c2cc8fc48c0ea922">armnn::ClImportTensorHandleFactory::GetIdStatic</a></div><div class="ttdeci">static const FactoryId &amp; GetIdStatic()</div><div class="ttdef"><b>Definition:</b> <a href="_cl_import_tensor_handle_factory_8cpp_source.xhtml#l00093">ClImportTensorHandleFactory.cpp:93</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6c6c3d137a7792e264a89cc40ea94bb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c6c3d137a7792e264a89cc40ea94bb0">&#9670;&nbsp;</a></span>GetId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; GetId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_backend.xhtml#aa9fc23b7155bd678232eeb351059b748">IBackend</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8hpp_source.xhtml#l00049">49</a> of file <a class="el" href="_cl_backend_8hpp_source.xhtml">ClBackend.hpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_backend_8cpp_source.xhtml#l00236">ClBackend::CreateBackendContext()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00241">ClBackend::CreateBackendProfilingContext()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00247">ClBackend::CreateBackendSpecificModelContext()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00051">ClBackend::CreateMemoryManager()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00060">ClBackend::CreateWorkloadFactory()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00271">ClBackend::GetDefaultAllocator()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00170">ClBackend::GetHandleFactoryPreferences()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00045">ClBackend::GetIdStatic()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00253">ClBackend::GetLayerSupport()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00276">ClBackend::OptimizeSubgraphView()</a>, and <a class="el" href="_cl_backend_8cpp_source.xhtml#l00176">ClBackend::RegisterTensorHandleFactories()</a>.</p>
<div class="fragment"><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{ <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_backend.xhtml#a177af502214bbc8123fbb4a3c4f0a1b8">GetIdStatic</a>(); }</div><div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_a177af502214bbc8123fbb4a3c4f0a1b8"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#a177af502214bbc8123fbb4a3c4f0a1b8">armnn::ClBackend::GetIdStatic</a></div><div class="ttdeci">static const BackendId &amp; GetIdStatic()</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8cpp_source.xhtml#l00045">ClBackend.cpp:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a177af502214bbc8123fbb4a3c4f0a1b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a177af502214bbc8123fbb4a3c4f0a1b8">&#9670;&nbsp;</a></span>GetIdStatic()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp; GetIdStatic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_backend_id_8hpp_source.xhtml#l00010">armnn::ClBackendId()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_backend_8hpp_source.xhtml#l00041">ClBackend::ClBackend()</a>, and <a class="el" href="_cl_backend_8hpp_source.xhtml#l00049">ClBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> BackendId s_Id{<a class="code" href="namespacearmnn.xhtml#adfe10e7086e3e3b98927cf84aee03dd0">ClBackendId</a>()};</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> s_Id;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_adfe10e7086e3e3b98927cf84aee03dd0"><div class="ttname"><a href="namespacearmnn.xhtml#adfe10e7086e3e3b98927cf84aee03dd0">armnn::ClBackendId</a></div><div class="ttdeci">constexpr const char * ClBackendId()</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_id_8hpp_source.xhtml#l00010">ClBackendId.hpp:10</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a93d4285a3ea5e4e3b35578484d889daa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93d4285a3ea5e4e3b35578484d889daa">&#9670;&nbsp;</a></span>GetLayerSupport() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">IBackendInternal::ILayerSupportSharedPtr</a> GetLayerSupport </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#ad86597efa7c25997572c80dc29f3104a">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00253">253</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_backend_8hpp_source.xhtml#l00049">ClBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;{</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">ILayerSupportSharedPtr</a> layerSupport</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="keyword">new</span> ClLayerSupport(<a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a>{})</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        };</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">return</span> layerSupport;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a4d0238968a7643dbb170547dd22bba54"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">armnn::IBackendInternal::IBackendSpecificModelContextPtr</a></div><div class="ttdeci">std::shared_ptr&lt; IBackendModelContext &gt; IBackendSpecificModelContextPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00096">IBackendInternal.hpp:96</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a11fa919c11fe46aad613b2e960fcfe90"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">armnn::IBackendInternal::ILayerSupportSharedPtr</a></div><div class="ttdeci">std::shared_ptr&lt; ILayerSupport &gt; ILayerSupportSharedPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00094">IBackendInternal.hpp:94</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9e458b98037dbb048877d0fc3fdbd17d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e458b98037dbb048877d0fc3fdbd17d">&#9670;&nbsp;</a></span>GetLayerSupport() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">IBackendInternal::ILayerSupportSharedPtr</a> GetLayerSupport </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>modelOptions</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#aa654fe558005ad90f2e9a2e1f175ebce">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00262">262</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_backend_8cpp_source.xhtml#l00247">ClBackend::CreateBackendSpecificModelContext()</a>.</p>
<div class="fragment"><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;{</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">ILayerSupportSharedPtr</a> layerSupport</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keyword">new</span> ClLayerSupport(<a class="code" href="classarmnn_1_1_cl_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">CreateBackendSpecificModelContext</a>(modelOptions))</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    };</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">return</span> layerSupport;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_a2482b4a7d5bde88e9b963be08017ce2b"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">armnn::ClBackend::CreateBackendSpecificModelContext</a></div><div class="ttdeci">IBackendInternal::IBackendSpecificModelContextPtr CreateBackendSpecificModelContext(const ModelOptions &amp;modelOptions) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8cpp_source.xhtml#l00247">ClBackend.cpp:247</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a11fa919c11fe46aad613b2e960fcfe90"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a11fa919c11fe46aad613b2e960fcfe90">armnn::IBackendInternal::ILayerSupportSharedPtr</a></div><div class="ttdeci">std::shared_ptr&lt; ILayerSupport &gt; ILayerSupportSharedPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00094">IBackendInternal.hpp:94</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aebeb1072c9b24079d9a6f796aa95aaac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebeb1072c9b24079d9a6f796aa95aaac">&#9670;&nbsp;</a></span>GetNumberOfCacheFiles()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int GetNumberOfCacheFiles </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of files cached if backend supports caching. </p>
<dl class="section return"><dt>Returns</dt><dd>- Returns 0 if backend does not support caching otherwise number of files cached </dd></dl>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a87d128382876683170ffc3529aadabbf">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8hpp_source.xhtml#l00110">110</a> of file <a class="el" href="_cl_backend_8hpp_source.xhtml">ClBackend.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{ <span class="keywordflow">return</span> 1; }</div></div><!-- fragment -->
</div>
</div>
<a id="a339efc194a1738cd93fcdde4d948a5cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a339efc194a1738cd93fcdde4d948a5cd">&#9670;&nbsp;</a></span>OptimizeSubgraphView()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_optimization_views.xhtml">OptimizationViews</a> OptimizeSubgraphView </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> &amp;&#160;</td>
          <td class="paramname"><em>subgraph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>modelOptions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a3623ac8294bf071d68eb7d71383e9a83">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00276">276</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::Activation</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::Addition</a>, <a class="el" href="include_2armnn_2backends_2_optimization_views_8hpp_source.xhtml#l00044">OptimizationViews::AddUntouchedSubgraph()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::BatchNormalization</a>, <a class="el" href="_subgraph_view_8cpp_source.xhtml#l00316">SubgraphView::beginIConnectable()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00253">Layer::BeginOutputSlots()</a>, <a class="el" href="_cl_addition_workload_8cpp_source.xhtml#l00045">armnn::ClAdditionValidate()</a>, <a class="el" href="_cl_batch_normalization_float_workload_8cpp_source.xhtml#l00019">armnn::ClBatchNormalizationValidate()</a>, <a class="el" href="_cl_convolution2d_workload_8cpp_source.xhtml#l00023">armnn::ClConvolution2dWorkloadValidate()</a>, <a class="el" href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00026">armnn::ClDepthwiseConvolutionWorkloadValidate()</a>, <a class="el" href="_cl_division_workload_8cpp_source.xhtml#l00018">armnn::ClDivisionWorkloadValidate()</a>, <a class="el" href="_cl_fully_connected_workload_8cpp_source.xhtml#l00019">armnn::ClFullyConnectedWorkloadValidate()</a>, <a class="el" href="_cl_multiplication_workload_8cpp_source.xhtml#l00018">armnn::ClMultiplicationWorkloadValidate()</a>, <a class="el" href="_cl_subtraction_workload_8cpp_source.xhtml#l00046">armnn::ClSubtractionValidate()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::Convolution2d</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00247">ClBackend::CreateBackendSpecificModelContext()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::DepthwiseConvolution2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::Division</a>, <a class="el" href="_subgraph_view_8cpp_source.xhtml#l00321">SubgraphView::endIConnectable()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00254">Layer::EndOutputSlots()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::FullyConnected</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00355">Layer::GetAdditionalInformation()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00056">InputSlot::GetConnectedOutputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00330">Layer::GetGuid()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00324">Layer::GetInputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00319">Layer::GetName()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00145">OutputSlot::GetNumConnections()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00326">Layer::GetOutputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00119">OutputSlot::GetOwningLayer()</a>, <a class="el" href="_layer_with_parameters_8hpp_source.xhtml#l00019">LayerWithParameters&lt; Parameters &gt;::GetParameters()</a>, <a class="el" href="include_2armnn_2backends_2_optimization_views_8hpp_source.xhtml#l00049">OptimizationViews::GetSubstitutions()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00092">OutputSlot::GetTensorInfo()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00273">Layer::GetType()</a>, <a class="el" href="_cl_backend_model_context_8cpp_source.xhtml#l00066">ClBackendModelContext::IsFastMathEnabled()</a>, <a class="el" href="_batch_normalization_layer_8hpp_source.xhtml#l00023">BatchNormalizationLayer::m_Beta</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00543">Convolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00669">DepthwiseConvolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_batch_normalization_layer_8hpp_source.xhtml#l00025">BatchNormalizationLayer::m_Gamma</a>, <a class="el" href="_batch_normalization_layer_8hpp_source.xhtml#l00019">BatchNormalizationLayer::m_Mean</a>, <a class="el" href="_batch_normalization_layer_8hpp_source.xhtml#l00021">BatchNormalizationLayer::m_Variance</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::Multiplication</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">armnn::Pad</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">armnn::Pooling2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">armnn::Reduce</a>, <a class="el" href="_subgraph_utils_8hpp_source.xhtml#l00052">armnn::ReportUntouchedLayers()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::Subtraction</a>, and <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00088">armnn::optimizations::pad_fold::TryFoldPadIntoLayer2d()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_backend_8hpp_source.xhtml#l00049">ClBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;{</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    OptimizationViews optimizationViews(modelOptions);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keyword">auto</span> it = subgraph.endIConnectable();</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    std::map&lt;LayerGuid, Layer*&gt; untouched;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">while</span> (it != subgraph.beginIConnectable())</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    {</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        --it;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        Layer&amp; base = *(PolymorphicDowncast&lt;Layer*&gt;(*it));</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        untouched.insert({base.GetGuid(), &amp;base});</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    it = subgraph.endIConnectable();</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTECL_ENABLED)</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a> modelContextPtr = <a class="code" href="classarmnn_1_1_cl_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">CreateBackendSpecificModelContext</a>(modelOptions);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">if</span> (modelContextPtr)</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keyword">auto</span> clModelOptions = <span class="keyword">dynamic_cast&lt;</span>ClBackendModelContext*<span class="keyword">&gt;</span>(modelContextPtr.get());</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="keywordflow">if</span> (clModelOptions)</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        {</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            isFastMathEnabled = clModelOptions-&gt;IsFastMathEnabled();</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        }</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">while</span> (it != subgraph.beginIConnectable())</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        --it;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        Layer&amp; base = *(PolymorphicDowncast&lt;Layer*&gt;(*it));</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="comment">// Fuse activation into previous layer if supported by backend</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">if</span> ((base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">LayerType::DepthwiseConvolution2d</a> || base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">LayerType::Convolution2d</a></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            || base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">LayerType::BatchNormalization</a> || base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">LayerType::FullyConnected</a></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            || base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a> || base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">LayerType::Multiplication</a></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            || base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">LayerType::Subtraction</a> || base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">LayerType::Division</a>)</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            &amp;&amp; (base.GetAdditionalInformation&lt;ActivationDescriptor&gt;() == <span class="keyword">nullptr</span>))</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> output = base.BeginOutputSlots(); output != base.EndOutputSlots(); ++output)</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            {</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                <span class="keywordflow">if</span> (output-&gt;GetNumConnections() == 1)</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                {</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; childInput : output-&gt;GetConnections())</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                    {</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                        <span class="keywordflow">if</span> ((childInput-&gt;GetOwningLayer().GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">LayerType::Activation</a>) &amp;&amp;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                            (checkDataTypeInputandOutput(childInput-&gt;GetOwningLayer())))</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                        {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                            Layer&amp; child = childInput-&gt;GetOwningLayer();</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                            <span class="keyword">auto</span>* activationLayer = PolymorphicDowncast&lt;ActivationLayer*&gt;(&amp;child);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                            <span class="keyword">const</span> std::string name = std::string(<span class="stringliteral">&quot;fused-&quot;</span>) + child.GetName() + std::string(<span class="stringliteral">&quot;-into-&quot;</span>) +</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                                                     base.GetName();</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                            <span class="comment">// Get params from activation layer</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                            ActivationDescriptor activationDesc = activationLayer-&gt;GetParameters();</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                            <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">LayerType::Convolution2d</a>)</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                            {</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                                Convolution2dLayer* baseLayer = PolymorphicDowncast&lt;Convolution2dLayer*&gt;(&amp;base);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                Optional&lt;TensorInfo&gt; biases;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                                <span class="keywordflow">if</span> (baseLayer-&gt;GetParameters().m_BiasEnabled)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                {</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                                    biases = baseLayer-&gt;GetInputSlot(2).GetConnectedOutputSlot()-&gt;GetTensorInfo();</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                }</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#a61cf0886d4c1a6e24c101a57ccb2ec31">ClConvolution2dWorkloadValidate</a>(</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                                        baseLayer-&gt;GetParameters(),</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                                        baseLayer-&gt;GetInputSlot(1).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                                        biases,</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                                        isFastMathEnabled,</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                {</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                                    FuseConvolution2dLayer&lt;Convolution2dLayer&gt;(optimizationViews,</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                                                                               baseLayer,</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                                                                               activationLayer,</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                                                                               activationDesc,</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                                                                               name);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                                }</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                            }</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">LayerType::DepthwiseConvolution2d</a>)</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                            {</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                                DepthwiseConvolution2dLayer* baseLayer =</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                        PolymorphicDowncast&lt;DepthwiseConvolution2dLayer*&gt;(&amp;base);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                Optional&lt;TensorInfo&gt; biases;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                                <span class="keywordflow">if</span> (baseLayer-&gt;GetParameters().m_BiasEnabled)</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                {</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                                    biases = baseLayer-&gt;GetInputSlot(2).GetConnectedOutputSlot()-&gt;GetTensorInfo();</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                                }</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#aa6670a2fcf9f365da69f3f3092dfa64b">ClDepthwiseConvolutionWorkloadValidate</a>(</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                                        baseLayer-&gt;GetParameters(),</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                                        baseLayer-&gt;GetInputSlot(1).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                                        biases,</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                {</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                    FuseDepthwiseConvolution2dLayer&lt;DepthwiseConvolution2dLayer&gt;(optimizationViews,</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                                                                                                 baseLayer,</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                                                                                 activationLayer,</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                                                                                 activationDesc,</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                                                                                 name);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                                }</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                            }</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">LayerType::FullyConnected</a>)</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                            {</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                                FullyConnectedLayer* baseLayer = PolymorphicDowncast&lt;FullyConnectedLayer*&gt;(&amp;base);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                FullyConnectedDescriptor descriptor = baseLayer-&gt;GetParameters();</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                <span class="comment">// As bias is optional only try to get TensorInfo from input if bias is enabled.</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                Optional&lt;TensorInfo&gt; biases;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                <span class="keywordflow">if</span> (descriptor.m_BiasEnabled)</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                                {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                                    biases = baseLayer-&gt;GetInputSlot(2).GetConnectedOutputSlot()-&gt;GetTensorInfo();</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                                }</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#a18c7eef8533ca0acbbe081cd1a1fec98">ClFullyConnectedWorkloadValidate</a>(</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                                        baseLayer-&gt;GetInputSlot(1).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                                        biases,</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                                        baseLayer-&gt;GetParameters(),</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                {</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                    FuseFullyConnectedLayer&lt;FullyConnectedLayer&gt;(optimizationViews,</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                                                                 baseLayer,</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                                                                 activationLayer,</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                                                                                 activationDesc,</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                                                                                 name);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                                }</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                            }</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">LayerType::BatchNormalization</a>)</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                            {</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                BatchNormalizationLayer* baseLayer =</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                        PolymorphicDowncast&lt;BatchNormalizationLayer*&gt;(&amp;base);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#a29bd65c1ec4ff9f75b636ec8e7b038be">ClBatchNormalizationValidate</a>(</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                                        baseLayer-&gt;m_Mean-&gt;GetTensorInfo(),</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                                        baseLayer-&gt;m_Variance-&gt;GetTensorInfo(),</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                                        baseLayer-&gt;m_Beta-&gt;GetTensorInfo(),</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                                        baseLayer-&gt;m_Gamma-&gt;GetTensorInfo(),</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                                        baseLayer-&gt;GetParameters(),</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                                {</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                                    BatchNormalizationLayer* replacementLayer =</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                                        FuseBatchNormalizationLayer&lt;BatchNormalizationLayer&gt;(optimizationViews,</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                                                                                             baseLayer,</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                                                                                             activationLayer,</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                                                                                             activationDesc,</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                                                                                             name);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                                    replacementLayer-&gt;m_Beta     = std::move(baseLayer-&gt;m_Beta);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                    replacementLayer-&gt;m_Gamma    = std::move(baseLayer-&gt;m_Gamma);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                                    replacementLayer-&gt;m_Mean     = std::move(baseLayer-&gt;m_Mean);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                                    replacementLayer-&gt;m_Variance = std::move(baseLayer-&gt;m_Variance);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                                }</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                            }</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a>)</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                            {</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                                AdditionLayer* baseLayer = PolymorphicDowncast&lt;AdditionLayer*&gt;(&amp;base);</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#a24fc3e8e29d3fa56cc6b2d81e48625d1">ClAdditionValidate</a>(</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                                        baseLayer-&gt;GetInputSlot(1).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                                {</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                                    FuseAdditionLayer&lt;AdditionLayer&gt;(optimizationViews,</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                                                                     baseLayer,</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                                                                     activationLayer,</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                                                                     activationDesc,</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                                                                     name);</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                                }</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                            }</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">LayerType::Division</a>)</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                            {</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                                DivisionLayer* baseLayer = PolymorphicDowncast&lt;DivisionLayer*&gt;(&amp;base);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#a0591ff61ac269187164ea23713d33852">ClDivisionWorkloadValidate</a>(</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                                        baseLayer-&gt;GetInputSlot(1).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                                {</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                                    FuseDivisionLayer&lt;DivisionLayer&gt;(optimizationViews,</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                                                                     baseLayer,</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                                                                     activationLayer,</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                                                                     activationDesc,</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                                                                     name);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                                }</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                            }</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">LayerType::Multiplication</a>)</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                            {</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                                MultiplicationLayer* baseLayer = PolymorphicDowncast&lt;MultiplicationLayer*&gt;(&amp;base);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#a9638165cb6c1baae3b2b5fd9f0f75201">ClMultiplicationWorkloadValidate</a>(</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                                        baseLayer-&gt;GetInputSlot(1).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                                {</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                                    FuseMultiplicationLayer&lt;MultiplicationLayer&gt;(optimizationViews,</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                                                                                 baseLayer,</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                                                                                 activationLayer,</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                                                                                 activationDesc,</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                                                                                 name);</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                                }</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                            }</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">LayerType::Subtraction</a>)</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                            {</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                                SubtractionLayer* baseLayer = PolymorphicDowncast&lt;SubtractionLayer*&gt;(&amp;base);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> status = <a class="code" href="namespacearmnn.xhtml#afa9933f1d9de469ffba5ba0fcee769f8">ClSubtractionValidate</a>(</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                                        baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                                        baseLayer-&gt;GetInputSlot(1).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                                        activationLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo(),</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                                        &amp;activationDesc);</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                                <span class="keywordflow">if</span> (status)</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                                {</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                                    FuseSubtractionLayer&lt;SubtractionLayer&gt;(optimizationViews,</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                                                                           baseLayer,</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                                                                           activationLayer,</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                                                                           activationDesc,</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                                                                           name);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                                    untouched.erase(activationLayer-&gt;GetGuid());</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                                }</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                            }</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                        }</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                    }</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                }</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            }</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        }</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        <span class="comment">// Separate reduce layer with multiple axes into multiple reduce layers with 1 axis.</span></div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">LayerType::Reduce</a>)</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        {</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            ReduceLayer* baseLayer            = PolymorphicDowncast&lt;ReduceLayer*&gt;(&amp;base);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            ReduceDescriptor reduceDescriptor = baseLayer-&gt;GetParameters();</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            <span class="keywordflow">if</span> (!reduceDescriptor.m_vAxis.empty() &amp;&amp; reduceDescriptor.m_vAxis.size() &gt; 1)</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;            {</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                <span class="comment">// Add new layers to the graph and connect them.</span></div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                std::vector&lt;IConnectableLayer*&gt; layers = ChainReduceLayers&lt;ReduceLayer&gt;(optimizationViews,</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                                                                                        baseLayer,</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                                                                                        reduceDescriptor);</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                <span class="comment">// Replace existing baselayer with new subgraph.</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                ReplaceLayers&lt;ReduceLayer&gt;(optimizationViews, baseLayer, layers);</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            }</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        }</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <span class="comment">// Special case to fuse padding into average pooling 2d for quantized datatype.</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        <span class="comment">// Required to be done as a backend specific optimization as Neon does not support this special case.</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <span class="keywordflow">if</span> (base.GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">LayerType::Pooling2d</a>)</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        {</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;            Pooling2dLayer* baseLayer = PolymorphicDowncast&lt;Pooling2dLayer*&gt;(&amp;base);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;            <a class="code" href="namespacearmnn_deserializer.xhtml#a7e75f47f676327bce37149932aa4a011">Pooling2dDescriptor</a> poolingDescriptor = baseLayer-&gt;GetParameters();</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            <span class="keywordflow">if</span> (baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetOwningLayer().GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">LayerType::Pad</a>)</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;            {</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                PadLayer* padLayer = PolymorphicDowncast&lt;PadLayer*&gt;(</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                    &amp;baseLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetOwningLayer());</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                <span class="keywordflow">if</span> (padLayer-&gt;GetOutputSlot(0).GetNumConnections() == 1 &amp;&amp;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                    <a class="code" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a33ffc65d1f6581b0789d3d3a033f698e">optimizations::pad_fold::TryFoldPadIntoLayer2d</a>(padLayer-&gt;GetParameters(),</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                                                                   poolingDescriptor,</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                                                                   padLayer-&gt;GetOutputSlot().GetTensorInfo(),</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                                                                   <span class="keyword">true</span>))</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                {</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                    FoldPadIntoAveragePool2d&lt;Pooling2dLayer&gt;(optimizationViews, baseLayer,</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                                                             poolingDescriptor, padLayer);</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                    untouched.erase(baseLayer-&gt;GetGuid());</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                    untouched.erase(padLayer-&gt;GetGuid());</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                }</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            }</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        }</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    }</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keywordflow">if</span> (optimizationViews.GetSubstitutions().empty())</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    {</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        optimizationViews.AddUntouchedSubgraph(SubgraphView(subgraph));</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    }</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    {</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        <a class="code" href="namespacearmnn.xhtml#aa1002c35597679b4f6624827524af04e">ReportUntouchedLayers</a>(optimizationViews, untouched);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    }</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <span class="keywordflow">return</span> optimizationViews;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a24fc3e8e29d3fa56cc6b2d81e48625d1"><div class="ttname"><a href="namespacearmnn.xhtml#a24fc3e8e29d3fa56cc6b2d81e48625d1">armnn::ClAdditionValidate</a></div><div class="ttdeci">arm_compute::Status ClAdditionValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_addition_workload_8cpp_source.xhtml#l00045">ClAdditionWorkload.cpp:45</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0591ff61ac269187164ea23713d33852"><div class="ttname"><a href="namespacearmnn.xhtml#a0591ff61ac269187164ea23713d33852">armnn::ClDivisionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDivisionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_division_workload_8cpp_source.xhtml#l00018">ClDivisionWorkload.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa1002c35597679b4f6624827524af04e"><div class="ttname"><a href="namespacearmnn.xhtml#aa1002c35597679b4f6624827524af04e">armnn::ReportUntouchedLayers</a></div><div class="ttdeci">void ReportUntouchedLayers(OptimizationViews &amp;optimizationViews, std::map&lt; LayerGuid, Layer *&gt; untouched)</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_utils_8hpp_source.xhtml#l00052">SubgraphUtils.hpp:52</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::LayerType::Activation</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_afa9933f1d9de469ffba5ba0fcee769f8"><div class="ttname"><a href="namespacearmnn.xhtml#afa9933f1d9de469ffba5ba0fcee769f8">armnn::ClSubtractionValidate</a></div><div class="ttdeci">arm_compute::Status ClSubtractionValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_subtraction_workload_8cpp_source.xhtml#l00046">ClSubtractionWorkload.cpp:46</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::LayerType::FullyConnected</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">armnn::LayerType::Reduce</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a61cf0886d4c1a6e24c101a57ccb2ec31"><div class="ttname"><a href="namespacearmnn.xhtml#a61cf0886d4c1a6e24c101a57ccb2ec31">armnn::ClConvolution2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClConvolution2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, bool isFastMathEnabled, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_convolution2d_workload_8cpp_source.xhtml#l00023">ClConvolution2dWorkload.cpp:23</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::LayerType::Multiplication</a></div></div>
<div class="ttc" id="namespacearmnn_deserializer_xhtml_a7e75f47f676327bce37149932aa4a011"><div class="ttname"><a href="namespacearmnn_deserializer.xhtml#a7e75f47f676327bce37149932aa4a011">armnnDeserializer::Pooling2dDescriptor</a></div><div class="ttdeci">const armnnSerializer::Pooling2dDescriptor * Pooling2dDescriptor</div><div class="ttdef"><b>Definition:</b> <a href="_deserializer_8hpp_source.xhtml#l00021">Deserializer.hpp:21</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_a2482b4a7d5bde88e9b963be08017ce2b"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#a2482b4a7d5bde88e9b963be08017ce2b">armnn::ClBackend::CreateBackendSpecificModelContext</a></div><div class="ttdeci">IBackendInternal::IBackendSpecificModelContextPtr CreateBackendSpecificModelContext(const ModelOptions &amp;modelOptions) const override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8cpp_source.xhtml#l00247">ClBackend.cpp:247</a></div></div>
<div class="ttc" id="namespacearmnn_1_1optimizations_1_1pad__fold_xhtml_a33ffc65d1f6581b0789d3d3a033f698e"><div class="ttname"><a href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a33ffc65d1f6581b0789d3d3a033f698e">armnn::optimizations::pad_fold::TryFoldPadIntoLayer2d</a></div><div class="ttdeci">bool TryFoldPadIntoLayer2d(const PadDescriptor &amp;padDescriptor, Descriptor &amp;layerDescriptor, const TensorInfo &amp;tensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00088">FoldPadIntoLayer2d.hpp:88</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::LayerType::Subtraction</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a4d0238968a7643dbb170547dd22bba54"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">armnn::IBackendInternal::IBackendSpecificModelContextPtr</a></div><div class="ttdeci">std::shared_ptr&lt; IBackendModelContext &gt; IBackendSpecificModelContextPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00096">IBackendInternal.hpp:96</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9638165cb6c1baae3b2b5fd9f0f75201"><div class="ttname"><a href="namespacearmnn.xhtml#a9638165cb6c1baae3b2b5fd9f0f75201">armnn::ClMultiplicationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClMultiplicationWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_multiplication_workload_8cpp_source.xhtml#l00018">ClMultiplicationWorkload.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::LayerType::Convolution2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00042">Types.hpp:42</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">armnn::LayerType::Pad</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a18c7eef8533ca0acbbe081cd1a1fec98"><div class="ttname"><a href="namespacearmnn.xhtml#a18c7eef8533ca0acbbe081cd1a1fec98">armnn::ClFullyConnectedWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClFullyConnectedWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const FullyConnectedDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_fully_connected_workload_8cpp_source.xhtml#l00019">ClFullyConnectedWorkload.cpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">armnn::LayerType::Pooling2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a29bd65c1ec4ff9f75b636ec8e7b038be"><div class="ttname"><a href="namespacearmnn.xhtml#a29bd65c1ec4ff9f75b636ec8e7b038be">armnn::ClBatchNormalizationValidate</a></div><div class="ttdeci">arm_compute::Status ClBatchNormalizationValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_batch_normalization_float_workload_8cpp_source.xhtml#l00019">ClBatchNormalizationFloatWorkload.cpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::LayerType::DepthwiseConvolution2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::LayerType::BatchNormalization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::LayerType::Division</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa6670a2fcf9f365da69f3f3092dfa64b"><div class="ttname"><a href="namespacearmnn.xhtml#aa6670a2fcf9f365da69f3f3092dfa64b">armnn::ClDepthwiseConvolutionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status ClDepthwiseConvolutionWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00026">ClDepthwiseConvolutionWorkload.cpp:26</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a531177ce89c53c6af616175b0b05e5c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a531177ce89c53c6af616175b0b05e5c0">&#9670;&nbsp;</a></span>RegisterTensorHandleFactories() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void RegisterTensorHandleFactories </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>(<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>) Register TensorHandleFactories Either this method or <a class="el" href="classarmnn_1_1_cl_backend.xhtml#a93fcb3bff141d8c77b53466a44b58eee">CreateMemoryManager()</a> and IWorkloadFactory::CreateTensor() IWorkloadFactory::CreateSubtensor() methods must be implemented. </p>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a517bc1a44d6d2d7a45c1847fba287135">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00176">176</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_backend_8hpp_source.xhtml#l00299">ClBackend::m_CustomAllocator</a>, <a class="el" href="_cl_backend_8hpp_source.xhtml#l00300">ClBackend::m_UsingCustomAllocator</a>, <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::Malloc</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00066">TensorHandleFactoryRegistry::RegisterCopyAndImportFactoryPair()</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00012">TensorHandleFactoryRegistry::RegisterFactory()</a>, and <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00034">TensorHandleFactoryRegistry::RegisterMemoryManager()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_backend_8hpp_source.xhtml#l00049">ClBackend::GetId()</a>.</p>
<div class="fragment"><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;{</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    std::shared_ptr&lt;ClMemoryManager&gt; memoryManager;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">m_UsingCustomAllocator</a>)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        memoryManager = std::make_shared&lt;ClMemoryManager&gt;(<a class="code" href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">m_CustomAllocator</a>);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        memoryManager = std::make_shared&lt;ClMemoryManager&gt;(std::make_unique&lt;arm_compute::CLBufferAllocator&gt;());</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    }</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    std::unique_ptr&lt;ITensorHandleFactory&gt; factory = std::make_unique&lt;ClTensorHandleFactory&gt;(memoryManager);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    std::unique_ptr&lt;ITensorHandleFactory&gt; importFactory = std::make_unique&lt;ClImportTensorHandleFactory&gt;(</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a><span class="keyword">&gt;</span>(<a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">MemorySource::Malloc</a>), static_cast&lt;MemorySourceFlags&gt;(<a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">MemorySource::Malloc</a>));</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    registry.RegisterCopyAndImportFactoryPair(factory-&gt;GetId(), importFactory-&gt;GetId());</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    registry.RegisterCopyAndImportFactoryPair(importFactory-&gt;GetId(), factory-&gt;GetId());</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    registry.RegisterMemoryManager(memoryManager);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    registry.RegisterFactory(std::move(factory));</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    registry.RegisterFactory(std::move(importFactory));</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_af1937f516c364d9d99cb502249e7179d"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">armnn::ClBackend::m_CustomAllocator</a></div><div class="ttdeci">std::shared_ptr&lt; ClBackendCustomAllocatorWrapper &gt; m_CustomAllocator</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00299">ClBackend.hpp:299</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5b05f3b7208ec7cea3338e30057c0bac"><div class="ttname"><a href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">armnn::MemorySourceFlags</a></div><div class="ttdeci">unsigned int MemorySourceFlags</div><div class="ttdef"><b>Definition:</b> <a href="_memory_sources_8hpp_source.xhtml#l00015">MemorySources.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::MemorySource::Malloc</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_adda2579a4649278c81f18a1d3915b3a0"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">armnn::ClBackend::m_UsingCustomAllocator</a></div><div class="ttdeci">bool m_UsingCustomAllocator</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00300">ClBackend.hpp:300</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5f7312e595427f00078975f71c61dd8f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f7312e595427f00078975f71c61dd8f">&#9670;&nbsp;</a></span>RegisterTensorHandleFactories() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void RegisterTensorHandleFactories </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml">TensorHandleFactoryRegistry</a> &amp;&#160;</td>
          <td class="paramname"><em>registry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a>&#160;</td>
          <td class="paramname"><em>inputFlags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a>&#160;</td>
          <td class="paramname"><em>outputFlags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>(<a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>) Register TensorHandleFactories Either this method or <a class="el" href="classarmnn_1_1_cl_backend.xhtml#a93fcb3bff141d8c77b53466a44b58eee">CreateMemoryManager()</a> and IWorkloadFactory::CreateTensor() IWorkloadFactory::CreateSubtensor() methods must be implemented. </p>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a36b46ce669164b5188cb21796557d897">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8cpp_source.xhtml#l00201">201</a> of file <a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a>.</p>

<p class="reference">References <a class="el" href="_cl_backend_8hpp_source.xhtml#l00299">ClBackend::m_CustomAllocator</a>, <a class="el" href="_cl_backend_8hpp_source.xhtml#l00300">ClBackend::m_UsingCustomAllocator</a>, <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::Malloc</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00066">TensorHandleFactoryRegistry::RegisterCopyAndImportFactoryPair()</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00012">TensorHandleFactoryRegistry::RegisterFactory()</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00034">TensorHandleFactoryRegistry::RegisterMemoryManager()</a>, and <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>.</p>
<div class="fragment"><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;{</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="comment">// To allow force import if inputFlags/outputFlags are Undefined, set it as Malloc</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordflow">if</span> (inputFlags == static_cast&lt;MemorySourceFlags&gt;(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a>))</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        inputFlags = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a><span class="keyword">&gt;</span>(<a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">MemorySource::Malloc</a>);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">if</span> (outputFlags == static_cast&lt;MemorySourceFlags&gt;(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a>))</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        outputFlags = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a><span class="keyword">&gt;</span>(<a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">MemorySource::Malloc</a>);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    }</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    std::shared_ptr&lt;ClMemoryManager&gt; memoryManager;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">m_UsingCustomAllocator</a>)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        memoryManager = std::make_shared&lt;ClMemoryManager&gt;(<a class="code" href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">m_CustomAllocator</a>);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        memoryManager = std::make_shared&lt;ClMemoryManager&gt;(std::make_unique&lt;arm_compute::CLBufferAllocator&gt;());</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    std::unique_ptr&lt;ITensorHandleFactory&gt; factory = std::make_unique&lt;ClTensorHandleFactory&gt;(memoryManager);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    std::unique_ptr&lt;ITensorHandleFactory&gt; importFactory = std::make_unique&lt;ClImportTensorHandleFactory&gt;(</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            inputFlags, outputFlags);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    registry.RegisterCopyAndImportFactoryPair(factory-&gt;GetId(), importFactory-&gt;GetId());</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    registry.RegisterCopyAndImportFactoryPair(importFactory-&gt;GetId(), factory-&gt;GetId());</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    registry.RegisterMemoryManager(memoryManager);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    registry.RegisterFactory(std::move(factory));</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    registry.RegisterFactory(std::move(importFactory));</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_af1937f516c364d9d99cb502249e7179d"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">armnn::ClBackend::m_CustomAllocator</a></div><div class="ttdeci">std::shared_ptr&lt; ClBackendCustomAllocatorWrapper &gt; m_CustomAllocator</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00299">ClBackend.hpp:299</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5b05f3b7208ec7cea3338e30057c0bac"><div class="ttname"><a href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">armnn::MemorySourceFlags</a></div><div class="ttdeci">unsigned int MemorySourceFlags</div><div class="ttdef"><b>Definition:</b> <a href="_memory_sources_8hpp_source.xhtml#l00015">MemorySources.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::MemorySource::Malloc</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_adda2579a4649278c81f18a1d3915b3a0"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">armnn::ClBackend::m_UsingCustomAllocator</a></div><div class="ttdeci">bool m_UsingCustomAllocator</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00300">ClBackend.hpp:300</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a6d138dc799f160c3ee6d3cb77b17afe0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d138dc799f160c3ee6d3cb77b17afe0">&#9670;&nbsp;</a></span>UseCustomMemoryAllocator()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool UseCustomMemoryAllocator </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_custom_allocator.xhtml">ICustomAllocator</a> &gt;&#160;</td>
          <td class="paramname"><em>allocator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">armnn::Optional</a>&lt; std::string &amp;&gt;&#160;</td>
          <td class="paramname"><em>errMsg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Signals the backend to use a custom memory allocator provided by the user. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">allocator</td><td>- a pointer to the provided <a class="el" href="classarmnn_1_1_i_custom_allocator.xhtml" title="Custom Allocator interface. ">ICustomAllocator</a> to use with this backend </td></tr>
    <tr><td class="paramname">errMsg</td><td>- <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a> string variable to return error messages </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>- Returns true if switching to custom allocator was successful </dd></dl>

<p>Reimplemented from <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a75af5f33aff768de09b8f703b87636ab">IBackendInternal</a>.</p>

<p class="definition">Definition at line <a class="el" href="_cl_backend_8hpp_source.xhtml#l00098">98</a> of file <a class="el" href="_cl_backend_8hpp_source.xhtml">ClBackend.hpp</a>.</p>

<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00205">ARMNN_LOG</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_cl_backend_8hpp_source.xhtml#l00299">ClBackend::m_CustomAllocator</a>, and <a class="el" href="_cl_backend_8hpp_source.xhtml#l00300">ClBackend::m_UsingCustomAllocator</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_backend_8hpp_source.xhtml#l00041">ClBackend::ClBackend()</a>.</p>
<div class="fragment"><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(errMsg);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) &lt;&lt; <span class="stringliteral">&quot;Using Custom Allocator for ClBackend&quot;</span>;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="comment">// Set flag to signal the backend to use a custom memory allocator</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <a class="code" href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">m_CustomAllocator</a> = std::make_shared&lt;ClBackendCustomAllocatorWrapper&gt;(std::move(allocator));</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <a class="code" href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">m_UsingCustomAllocator</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">m_UsingCustomAllocator</a>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_af1937f516c364d9d99cb502249e7179d"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#af1937f516c364d9d99cb502249e7179d">armnn::ClBackend::m_CustomAllocator</a></div><div class="ttdeci">std::shared_ptr&lt; ClBackendCustomAllocatorWrapper &gt; m_CustomAllocator</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00299">ClBackend.hpp:299</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_backend_xhtml_adda2579a4649278c81f18a1d3915b3a0"><div class="ttname"><a href="classarmnn_1_1_cl_backend.xhtml#adda2579a4649278c81f18a1d3915b3a0">armnn::ClBackend::m_UsingCustomAllocator</a></div><div class="ttdeci">bool m_UsingCustomAllocator</div><div class="ttdef"><b>Definition:</b> <a href="_cl_backend_8hpp_source.xhtml#l00300">ClBackend.hpp:300</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="af1937f516c364d9d99cb502249e7179d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1937f516c364d9d99cb502249e7179d">&#9670;&nbsp;</a></span>m_CustomAllocator</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt;<a class="el" href="classarmnn_1_1_cl_backend_1_1_cl_backend_custom_allocator_wrapper.xhtml">ClBackendCustomAllocatorWrapper</a>&gt; m_CustomAllocator</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_backend_8hpp_source.xhtml#l00299">299</a> of file <a class="el" href="_cl_backend_8hpp_source.xhtml">ClBackend.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_backend_8cpp_source.xhtml#l00051">ClBackend::CreateMemoryManager()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00074">ClBackend::CreateWorkloadFactory()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00176">ClBackend::RegisterTensorHandleFactories()</a>, and <a class="el" href="_cl_backend_8hpp_source.xhtml#l00098">ClBackend::UseCustomMemoryAllocator()</a>.</p>

</div>
</div>
<a id="adda2579a4649278c81f18a1d3915b3a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adda2579a4649278c81f18a1d3915b3a0">&#9670;&nbsp;</a></span>m_UsingCustomAllocator</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool m_UsingCustomAllocator = false</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_backend_8hpp_source.xhtml#l00300">300</a> of file <a class="el" href="_cl_backend_8hpp_source.xhtml">ClBackend.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_backend_8cpp_source.xhtml#l00051">ClBackend::CreateMemoryManager()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00074">ClBackend::CreateWorkloadFactory()</a>, <a class="el" href="_cl_backend_8cpp_source.xhtml#l00176">ClBackend::RegisterTensorHandleFactories()</a>, and <a class="el" href="_cl_backend_8hpp_source.xhtml#l00098">ClBackend::UseCustomMemoryAllocator()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/backends/cl/<a class="el" href="_cl_backend_8hpp_source.xhtml">ClBackend.hpp</a></li>
<li>src/backends/cl/<a class="el" href="_cl_backend_8cpp_source.xhtml">ClBackend.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_cl_backend.xhtml">ClBackend</a></li>
    <li class="footer">Generated on Wed Nov 23 2022 10:57:39 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
