<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnTestUtils/MockTensorHandle.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_mock_tensor_handle_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">MockTensorHandle.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_mock_tensor_handle_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2022 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_mock_tensor_handle_8hpp.xhtml">armnnTestUtils/MockTensorHandle.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;{</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_tensor_handle.xhtml#abf07a7fe6ae807e01c7124ed0766c3ee">   11</a></span>&#160;<a class="code" href="classarmnn_1_1_mock_tensor_handle.xhtml#abf07a7fe6ae807e01c7124ed0766c3ee">MockTensorHandle::MockTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo, std::shared_ptr&lt;MockMemoryManager&gt;&amp; memoryManager)</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;    : m_TensorInfo(tensorInfo)</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    , m_MemoryManager(memoryManager)</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    , m_Pool(nullptr)</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    , m_UnmanagedMemory(nullptr)</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    , m_ImportFlags(static_cast&lt;<a class="code" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a>&gt;(<a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a>::<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Undefined</a>))</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    , m_Imported(false)</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    , m_IsImportEnabled(false)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{}</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_tensor_handle.xhtml#a57a6a8c36e49e80a269814461dfb72e6">   21</a></span>&#160;<a class="code" href="classarmnn_1_1_mock_tensor_handle.xhtml#abf07a7fe6ae807e01c7124ed0766c3ee">MockTensorHandle::MockTensorHandle</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; tensorInfo, <a class="code" href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">MemorySourceFlags</a> importFlags)</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    : m_TensorInfo(tensorInfo)</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    , m_Pool(nullptr)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    , m_UnmanagedMemory(nullptr)</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    , m_ImportFlags(importFlags)</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    , m_Imported(false)</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    , m_IsImportEnabled(true)</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{}</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_tensor_handle.xhtml#a8eaa56c83ee1e9031e76b6316b362325">   30</a></span>&#160;<a class="code" href="classarmnn_1_1_mock_tensor_handle.xhtml#a8eaa56c83ee1e9031e76b6316b362325">MockTensorHandle::~MockTensorHandle</a>()</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">if</span> (!m_Pool)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="comment">// unmanaged</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordflow">if</span> (!m_Imported)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            ::operator <span class="keyword">delete</span>(m_UnmanagedMemory);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        }</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    }</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_tensor_handle.xhtml#aca21728cdaa75f9d656d25ae7200ade5">   42</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_mock_tensor_handle.xhtml#aca21728cdaa75f9d656d25ae7200ade5">MockTensorHandle::Manage</a>()</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">if</span> (!m_IsImportEnabled)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(!m_Pool, <span class="stringliteral">&quot;MockTensorHandle::Manage() called twice&quot;</span>);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(!m_UnmanagedMemory, <span class="stringliteral">&quot;MockTensorHandle::Manage() called after Allocate()&quot;</span>);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        m_Pool = m_MemoryManager-&gt;Manage(m_TensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_tensor_handle.xhtml#a8518772c5d692e334a76617582b10b92">   53</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_mock_tensor_handle.xhtml#a8518772c5d692e334a76617582b10b92">MockTensorHandle::Allocate</a>()</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="comment">// If import is enabled, do not allocate the tensor</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">if</span> (!m_IsImportEnabled)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordflow">if</span> (!m_UnmanagedMemory)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keywordflow">if</span> (!m_Pool)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                <span class="comment">// unmanaged</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                m_UnmanagedMemory = ::operator <span class="keyword">new</span>(m_TensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                m_MemoryManager-&gt;Allocate(m_Pool);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;MockTensorHandle::Allocate Trying to allocate a MockTensorHandle&quot;</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                           <span class="stringliteral">&quot;that already has allocated memory.&quot;</span>);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_tensor_handle.xhtml#adc70d69d2748d1432e4999d4af361f3b">   79</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">void</span>* <a class="code" href="classarmnn_1_1_mock_tensor_handle.xhtml#adc70d69d2748d1432e4999d4af361f3b">MockTensorHandle::Map</a>(<span class="keywordtype">bool</span> <span class="comment">/*unused*/</span>)<span class="keyword"> const</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> GetPointer();</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keywordtype">void</span>* MockTensorHandle::GetPointer()<span class="keyword"> const</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">if</span> (m_UnmanagedMemory)</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">return</span> m_UnmanagedMemory;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_Pool)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">return</span> m_MemoryManager-&gt;GetPointer(m_Pool);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_null_pointer_exception.xhtml">NullPointerException</a>(<span class="stringliteral">&quot;MockTensorHandle::GetPointer called on unmanaged, unallocated tensor handle&quot;</span>);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keywordtype">void</span> MockTensorHandle::CopyOutTo(<span class="keywordtype">void</span>* dest)<span class="keyword"> const</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">void</span>* src = GetPointer();</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(src);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    memcpy(dest, src, m_TensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keywordtype">void</span> MockTensorHandle::CopyInFrom(<span class="keyword">const</span> <span class="keywordtype">void</span>* src)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordtype">void</span>* dest = GetPointer();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(dest);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    memcpy(dest, src, m_TensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">GetNumBytes</a>());</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_tensor_handle.xhtml#ab1766bd9f6a7902c5806178f3fd68f0b">  114</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_mock_tensor_handle.xhtml#ab1766bd9f6a7902c5806178f3fd68f0b">MockTensorHandle::Import</a>(<span class="keywordtype">void</span>* memory, <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a> source)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">if</span> (m_ImportFlags &amp; static_cast&lt;MemorySourceFlags&gt;(source))</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">if</span> (m_IsImportEnabled &amp;&amp; source == <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">MemorySource::Malloc</a>)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="comment">// Check memory alignment</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="classarmnn_1_1_mock_tensor_handle.xhtml#ae69aed5d7a4cc5deb4488dc6841b2096">CanBeImported</a>(memory, source))</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="keywordflow">if</span> (m_Imported)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    m_Imported        = <span class="keyword">false</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    m_UnmanagedMemory = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="comment">// m_UnmanagedMemory not yet allocated.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">if</span> (!m_Imported &amp;&amp; !m_UnmanagedMemory)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                m_UnmanagedMemory = memory;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                m_Imported        = <span class="keyword">true</span>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="comment">// m_UnmanagedMemory initially allocated with Allocate().</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordflow">if</span> (!m_Imported &amp;&amp; m_UnmanagedMemory)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="comment">// m_UnmanagedMemory previously imported.</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">if</span> (m_Imported)</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                m_UnmanagedMemory = memory;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classarmnn_1_1_mock_tensor_handle.xhtml#ae69aed5d7a4cc5deb4488dc6841b2096">  158</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_mock_tensor_handle.xhtml#ae69aed5d7a4cc5deb4488dc6841b2096">MockTensorHandle::CanBeImported</a>(<span class="keywordtype">void</span>* memory, <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a> source)</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">if</span> (m_ImportFlags &amp; static_cast&lt;MemorySourceFlags&gt;(source))</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">if</span> (m_IsImportEnabled &amp;&amp; source == <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">MemorySource::Malloc</a>)</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            uintptr_t alignment = <a class="code" href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">GetDataTypeSize</a>(m_TensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>());</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keywordflow">if</span> (reinterpret_cast&lt;uintptr_t&gt;(memory) % alignment)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;}    <span class="comment">// namespace armnn</span></div><div class="ttc" id="classarmnn_1_1_mock_tensor_handle_xhtml_a8eaa56c83ee1e9031e76b6316b362325"><div class="ttname"><a href="classarmnn_1_1_mock_tensor_handle.xhtml#a8eaa56c83ee1e9031e76b6316b362325">armnn::MockTensorHandle::~MockTensorHandle</a></div><div class="ttdeci">~MockTensorHandle() override</div><div class="ttdef"><b>Definition:</b> <a href="_mock_tensor_handle_8cpp_source.xhtml#l00030">MockTensorHandle.cpp:30</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_abcbdfb544ece4c31d0b37715ad0f3be0"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#abcbdfb544ece4c31d0b37715ad0f3be0">armnn::TensorInfo::GetNumBytes</a></div><div class="ttdeci">unsigned int GetNumBytes() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00429">Tensor.cpp:429</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_tensor_handle_xhtml_abf07a7fe6ae807e01c7124ed0766c3ee"><div class="ttname"><a href="classarmnn_1_1_mock_tensor_handle.xhtml#abf07a7fe6ae807e01c7124ed0766c3ee">armnn::MockTensorHandle::MockTensorHandle</a></div><div class="ttdeci">MockTensorHandle(const TensorInfo &amp;tensorInfo, std::shared_ptr&lt; MockMemoryManager &gt; &amp;memoryManager)</div><div class="ttdef"><b>Definition:</b> <a href="_mock_tensor_handle_8cpp_source.xhtml#l00011">MockTensorHandle.cpp:11</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5b05f3b7208ec7cea3338e30057c0bac"><div class="ttname"><a href="namespacearmnn.xhtml#a5b05f3b7208ec7cea3338e30057c0bac">armnn::MemorySourceFlags</a></div><div class="ttdeci">unsigned int MemorySourceFlags</div><div class="ttdef"><b>Definition:</b> <a href="_memory_sources_8hpp_source.xhtml#l00015">MemorySources.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_tensor_handle_xhtml_ae69aed5d7a4cc5deb4488dc6841b2096"><div class="ttname"><a href="classarmnn_1_1_mock_tensor_handle.xhtml#ae69aed5d7a4cc5deb4488dc6841b2096">armnn::MockTensorHandle::CanBeImported</a></div><div class="ttdeci">bool CanBeImported(void *memory, MemorySource source) override</div><div class="ttdoc">Implementations must determine if this memory block can be imported. </div><div class="ttdef"><b>Definition:</b> <a href="_mock_tensor_handle_8cpp_source.xhtml#l00158">MockTensorHandle.cpp:158</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_tensor_handle_xhtml_adc70d69d2748d1432e4999d4af361f3b"><div class="ttname"><a href="classarmnn_1_1_mock_tensor_handle.xhtml#adc70d69d2748d1432e4999d4af361f3b">armnn::MockTensorHandle::Map</a></div><div class="ttdeci">const void * Map(bool) const override</div><div class="ttdoc">Map the tensor data for access. </div><div class="ttdef"><b>Definition:</b> <a href="_mock_tensor_handle_8cpp_source.xhtml#l00079">MockTensorHandle.cpp:79</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="classarmnn_1_1_null_pointer_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_null_pointer_exception.xhtml">armnn::NullPointerException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00152">Exceptions.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277a1131a914388fac73e5f07b0ba0aad523">armnn::MemorySource::Malloc</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_tensor_handle_xhtml_a8518772c5d692e334a76617582b10b92"><div class="ttname"><a href="classarmnn_1_1_mock_tensor_handle.xhtml#a8518772c5d692e334a76617582b10b92">armnn::MockTensorHandle::Allocate</a></div><div class="ttdeci">void Allocate() override</div><div class="ttdoc">Indicate to the memory manager that this resource is no longer active. </div><div class="ttdef"><b>Definition:</b> <a href="_mock_tensor_handle_8cpp_source.xhtml#l00053">MockTensorHandle.cpp:53</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">armnn::MemorySource</a></div><div class="ttdeci">MemorySource</div><div class="ttdoc">Define the Memory Source to reduce copies. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00217">Types.hpp:217</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_tensor_handle_xhtml_ab1766bd9f6a7902c5806178f3fd68f0b"><div class="ttname"><a href="classarmnn_1_1_mock_tensor_handle.xhtml#ab1766bd9f6a7902c5806178f3fd68f0b">armnn::MockTensorHandle::Import</a></div><div class="ttdeci">bool Import(void *memory, MemorySource source) override</div><div class="ttdoc">Import externally allocated memory. </div><div class="ttdef"><b>Definition:</b> <a href="_mock_tensor_handle_8cpp_source.xhtml#l00114">MockTensorHandle.cpp:114</a></div></div>
<div class="ttc" id="classarmnn_1_1_mock_tensor_handle_xhtml_aca21728cdaa75f9d656d25ae7200ade5"><div class="ttname"><a href="classarmnn_1_1_mock_tensor_handle.xhtml#aca21728cdaa75f9d656d25ae7200ade5">armnn::MockTensorHandle::Manage</a></div><div class="ttdeci">void Manage() override</div><div class="ttdoc">Indicate to the memory manager that this resource is active. </div><div class="ttdef"><b>Definition:</b> <a href="_mock_tensor_handle_8cpp_source.xhtml#l00042">MockTensorHandle.cpp:42</a></div></div>
<div class="ttc" id="_mock_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="_mock_tensor_handle_8hpp.xhtml">MockTensorHandle.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa02b9e06fb20fa3c13da0427e6ee5ab2"><div class="ttname"><a href="namespacearmnn.xhtml#aa02b9e06fb20fa3c13da0427e6ee5ab2">armnn::GetDataTypeSize</a></div><div class="ttdeci">constexpr unsigned int GetDataTypeSize(DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00151">TypesUtils.hpp:151</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_f574f3650e467f7ec35d628d20229555.xhtml">armnnTestUtils</a></li><li class="navelem"><a class="el" href="_mock_tensor_handle_8cpp.xhtml">MockTensorHandle.cpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:00:55 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
