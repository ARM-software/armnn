<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnTestUtils/CommonTestUtils.hpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('armnn_test_utils_2_common_test_utils_8hpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">CommonTestUtils.hpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="est_utils_2_test_utils_8hpp_source.xhtml">TestUtils.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_graph_8hpp_source.xhtml">Graph.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_resolve_type_8hpp_source.xhtml">ResolveType.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_subgraph_view_selector_8hpp_source.xhtml">SubgraphViewSelector.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_backend_registry_8hpp_source.xhtml">armnn/BackendRegistry.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_types_8hpp_source.xhtml">armnn/Types.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_2backends_2_subgraph_view_8hpp_source.xhtml">armnn/backends/SubgraphView.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml">armnn/backends/TensorHandle.hpp</a>&gt;</code><br />
<code>#include &lt;algorithm&gt;</code><br />
<code>#include &lt;random&gt;</code><br />
<code>#include &lt;vector&gt;</code><br />
</div>
<p><a href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a551d3e8e273f6ff0f4fc4b0b56e1895d"><td class="memTemplParams" colspan="2">template&lt;typename CollectionType &gt; </td></tr>
<tr class="memitem:a551d3e8e273f6ff0f4fc4b0b56e1895d"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a551d3e8e273f6ff0f4fc4b0b56e1895d">AreEqual</a> (const CollectionType &amp;lhs, const CollectionType &amp;rhs)</td></tr>
<tr class="separator:a551d3e8e273f6ff0f4fc4b0b56e1895d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fa64e793b38cf9074e6fcdb2c9c7293"><td class="memTemplParams" colspan="2">template&lt;typename CollectionType &gt; </td></tr>
<tr class="memitem:a5fa64e793b38cf9074e6fcdb2c9c7293"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a5fa64e793b38cf9074e6fcdb2c9c7293">Contains</a> (const CollectionType &amp;collection, const typename CollectionType::value_type &amp;item)</td></tr>
<tr class="separator:a5fa64e793b38cf9074e6fcdb2c9c7293"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34600ef61efcbbf11322f11ce2cfacab"><td class="memTemplParams" colspan="2">template&lt;typename MapType &gt; </td></tr>
<tr class="memitem:a34600ef61efcbbf11322f11ce2cfacab"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a34600ef61efcbbf11322f11ce2cfacab">Contains</a> (const MapType &amp;map, const typename MapType::key_type &amp;key)</td></tr>
<tr class="separator:a34600ef61efcbbf11322f11ce2cfacab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae828f1d70436f4ad1e74a5c4ecf96929"><td class="memTemplParams" colspan="2">template&lt;armnn::DataType ArmnnType, typename T  = armnn::ResolveType&lt;ArmnnType&gt;&gt; </td></tr>
<tr class="memitem:ae828f1d70436f4ad1e74a5c4ecf96929"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#ae828f1d70436f4ad1e74a5c4ecf96929">Compare</a> (T a, T b, float tolerance=0.000001f)</td></tr>
<tr class="separator:ae828f1d70436f4ad1e74a5c4ecf96929"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acacca57727df8ccf5c5597e6026da814"><td class="memTemplParams" colspan="2">template&lt;typename ConvolutionLayer &gt; </td></tr>
<tr class="memitem:acacca57727df8ccf5c5597e6026da814"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#acacca57727df8ccf5c5597e6026da814">SetWeightAndBias</a> (ConvolutionLayer *layer, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;weightInfo, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;biasInfo)</td></tr>
<tr class="separator:acacca57727df8ccf5c5597e6026da814"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0fb7899a6c5808108263d16f187d2ff3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">armnn::SubgraphView::InputSlots</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a0fb7899a6c5808108263d16f187d2ff3">CreateInputsFrom</a> (<a class="el" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a> *layer, std::vector&lt; unsigned int &gt; ignoreSlots={})</td></tr>
<tr class="separator:a0fb7899a6c5808108263d16f187d2ff3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46cc1d307b27362f2296459fac4647d4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">armnn::SubgraphView::InputSlots</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a46cc1d307b27362f2296459fac4647d4">CreateInputsFrom</a> (const std::vector&lt; <a class="el" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a> *&gt; &amp;layers, std::vector&lt; unsigned int &gt; ignoreSlots={})</td></tr>
<tr class="separator:a46cc1d307b27362f2296459fac4647d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff493fee27236e9ddc581e48c4b931a9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_subgraph_view.xhtml#a78293334750ec5279eb9c96d56deaf08">armnn::SubgraphView::OutputSlots</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#aff493fee27236e9ddc581e48c4b931a9">CreateOutputsFrom</a> (const std::vector&lt; <a class="el" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a> *&gt; &amp;layers)</td></tr>
<tr class="separator:aff493fee27236e9ddc581e48c4b931a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf999283bc03f1bafd01680149ed7e3e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_subgraph_view.xhtml#a4684a457c7786484375f06e9ab2d2265">armnn::SubgraphView::SubgraphViewPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#abf999283bc03f1bafd01680149ed7e3e">CreateSubgraphViewFrom</a> (<a class="el" href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">armnn::SubgraphView::InputSlots</a> &amp;&amp;inputs, <a class="el" href="classarmnn_1_1_subgraph_view.xhtml#a78293334750ec5279eb9c96d56deaf08">armnn::SubgraphView::OutputSlots</a> &amp;&amp;outputs, <a class="el" href="classarmnn_1_1_subgraph_view.xhtml#a74798938fdaeae75c8adfa4a7439e7f9">armnn::SubgraphView::Layers</a> &amp;&amp;layers)</td></tr>
<tr class="separator:abf999283bc03f1bafd01680149ed7e3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a4090354279f08b1e27244bab25aa86"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#ade0af9dacaa52cafdd701bef2e901c77">armnn::IBackendInternalUniquePtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a7a4090354279f08b1e27244bab25aa86">CreateBackendObject</a> (const <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &amp;backendId)</td></tr>
<tr class="separator:a7a4090354279f08b1e27244bab25aa86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46d07efd379e728fc3df18a88ec878b0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml#a46d07efd379e728fc3df18a88ec878b0">MakeTensorShape</a> (unsigned int batches, unsigned int channels, unsigned int height, unsigned int width, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a> layout)</td></tr>
<tr class="separator:a46d07efd379e728fc3df18a88ec878b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a551d3e8e273f6ff0f4fc4b0b56e1895d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a551d3e8e273f6ff0f4fc4b0b56e1895d">&#9670;&nbsp;</a></span>AreEqual()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AreEqual </td>
          <td>(</td>
          <td class="paramtype">const CollectionType &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const CollectionType &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml#l00027">27</a> of file <a class="el" href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml">CommonTestUtils.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordflow">if</span> (lhs.size() != rhs.size())</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    }</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">auto</span> lhs_it = std::find_if(lhs.begin(), lhs.end(), [&amp;rhs](<span class="keyword">auto</span>&amp; item)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">return</span> std::find(rhs.begin(), rhs.end(), item) == rhs.end();</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    });</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">return</span> lhs_it == lhs.end();</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae828f1d70436f4ad1e74a5c4ecf96929"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae828f1d70436f4ad1e74a5c4ecf96929">&#9670;&nbsp;</a></span>Compare()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Compare </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>tolerance</em> = <code>0.000001f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml#l00058">58</a> of file <a class="el" href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml">CommonTestUtils.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::Boolean</a>.</p>
<div class="fragment"><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span> (ArmnnType == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a>)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="comment">// NOTE: Boolean is represented as uint8_t (with zero equals</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="comment">// false and everything else equals true), therefore values</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="comment">// need to be casted to bool before comparing them</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">bool</span><span class="keyword">&gt;</span>(a) == static_cast&lt;bool&gt;(b);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// NOTE: All other types can be cast to float and compared with</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// a certain level of tolerance</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">return</span> std::fabs(static_cast&lt;float&gt;(a) - static_cast&lt;float&gt;(b)) &lt;= tolerance;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a5fa64e793b38cf9074e6fcdb2c9c7293"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fa64e793b38cf9074e6fcdb2c9c7293">&#9670;&nbsp;</a></span>Contains() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Contains </td>
          <td>(</td>
          <td class="paramtype">const CollectionType &amp;&#160;</td>
          <td class="paramname"><em>collection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const typename CollectionType::value_type &amp;&#160;</td>
          <td class="paramname"><em>item</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml#l00044">44</a> of file <a class="el" href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml">CommonTestUtils.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">return</span> std::find(collection.begin(), collection.end(), item) != collection.end();</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a34600ef61efcbbf11322f11ce2cfacab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34600ef61efcbbf11322f11ce2cfacab">&#9670;&nbsp;</a></span>Contains() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Contains </td>
          <td>(</td>
          <td class="paramtype">const MapType &amp;&#160;</td>
          <td class="paramname"><em>map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const typename MapType::key_type &amp;&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml#l00051">51</a> of file <a class="el" href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml">CommonTestUtils.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> map.find(key) != map.end();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7a4090354279f08b1e27244bab25aa86"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a4090354279f08b1e27244bab25aa86">&#9670;&nbsp;</a></span>CreateBackendObject()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#ade0af9dacaa52cafdd701bef2e901c77">armnn::IBackendInternalUniquePtr</a> CreateBackendObject </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">armnn::BackendId</a> &amp;&#160;</td>
          <td class="paramname"><em>backendId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="_common_test_utils_8cpp_source.xhtml">CommonTestUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_backend_registry_8cpp_source.xhtml#l00015">armnn::BackendRegistryInstance()</a>.</p>

<p class="reference">Referenced by <a class="el" href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml#l00074">SetWeightAndBias()</a>, and <a class="el" href="_neon_fallback_tests_8cpp_source.xhtml#l00013">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">auto</span>&amp; backendRegistry = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">BackendRegistryInstance</a>();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">auto</span>  backendFactory  = backendRegistry.GetFactory(backendId);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">auto</span>  backendObjPtr   = backendFactory();</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">return</span> backendObjPtr;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00015">BackendRegistry.cpp:15</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a0fb7899a6c5808108263d16f187d2ff3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0fb7899a6c5808108263d16f187d2ff3">&#9670;&nbsp;</a></span>CreateInputsFrom() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">armnn::SubgraphView::InputSlots</a> CreateInputsFrom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a> *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; unsigned int &gt;&#160;</td>
          <td class="paramname"><em>ignoreSlots</em> = <code>{}</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00012">12</a> of file <a class="el" href="_common_test_utils_8cpp_source.xhtml">CommonTestUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_8hpp_source.xhtml#l00247">Layer::BeginInputSlots()</a>, and <a class="el" href="_layer_8hpp_source.xhtml#l00248">Layer::EndInputSlots()</a>.</p>

<p class="reference">Referenced by <a class="el" href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml#l00074">SetWeightAndBias()</a>, and <a class="el" href="_subgraph_view_tests_8cpp_source.xhtml#l00334">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">SubgraphView::InputSlots</a> result;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it = layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#af6cb8de21ef0da269ec9b67755ae92a0">BeginInputSlots</a>(); it != layer-&gt;<a class="code" href="classarmnn_1_1_layer.xhtml#a9752e12d6b79e18da1a25f76159d2a72">EndInputSlots</a>(); ++it)</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    {</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;        <span class="keywordflow">if</span> (std::find(ignoreSlots.begin(), ignoreSlots.end(), it-&gt;GetSlotIndex()) != ignoreSlots.end())</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        {</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;        }</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;            result.push_back(&amp;(*it));</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        }</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    }</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_layer_xhtml_a9752e12d6b79e18da1a25f76159d2a72"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a9752e12d6b79e18da1a25f76159d2a72">armnn::Layer::EndInputSlots</a></div><div class="ttdeci">std::vector&lt; InputSlot &gt;::iterator EndInputSlots()</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00248">Layer.hpp:248</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_af6cb8de21ef0da269ec9b67755ae92a0"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#af6cb8de21ef0da269ec9b67755ae92a0">armnn::Layer::BeginInputSlots</a></div><div class="ttdeci">std::vector&lt; InputSlot &gt;::iterator BeginInputSlots()</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00247">Layer.hpp:247</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_a5cc65e15002dbc33a5c8a7d6680e9a9d"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">armnn::SubgraphView::InputSlots</a></div><div class="ttdeci">std::vector&lt; InputSlot * &gt; InputSlots</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_subgraph_view_8hpp_source.xhtml#l00049">SubgraphView.hpp:49</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a46cc1d307b27362f2296459fac4647d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46cc1d307b27362f2296459fac4647d4">&#9670;&nbsp;</a></span>CreateInputsFrom() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">armnn::SubgraphView::InputSlots</a> CreateInputsFrom </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>layers</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; unsigned int &gt;&#160;</td>
          <td class="paramname"><em>ignoreSlots</em> = <code>{}</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="_common_test_utils_8cpp_source.xhtml">CommonTestUtils.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">SubgraphView::InputSlots</a> result;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; layer: layers)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it = layer-&gt;BeginInputSlots(); it != layer-&gt;EndInputSlots(); ++it)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            <span class="keywordflow">if</span> (std::find(ignoreSlots.begin(), ignoreSlots.end(), it-&gt;GetSlotIndex()) != ignoreSlots.end())</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            }</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                result.push_back(&amp;(*it));</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_a5cc65e15002dbc33a5c8a7d6680e9a9d"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">armnn::SubgraphView::InputSlots</a></div><div class="ttdeci">std::vector&lt; InputSlot * &gt; InputSlots</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_subgraph_view_8hpp_source.xhtml#l00049">SubgraphView.hpp:49</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aff493fee27236e9ddc581e48c4b931a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff493fee27236e9ddc581e48c4b931a9">&#9670;&nbsp;</a></span>CreateOutputsFrom()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_subgraph_view.xhtml#a78293334750ec5279eb9c96d56deaf08">armnn::SubgraphView::OutputSlots</a> CreateOutputsFrom </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_layer.xhtml">armnn::Layer</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>layers</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="_common_test_utils_8cpp_source.xhtml">CommonTestUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml#l00074">SetWeightAndBias()</a>, and <a class="el" href="_subgraph_view_tests_8cpp_source.xhtml#l00334">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a78293334750ec5279eb9c96d56deaf08">SubgraphView::OutputSlots</a> result;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;&amp; layer : layers)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it = layer-&gt;BeginOutputSlots(); it != layer-&gt;EndOutputSlots(); ++it)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            result.push_back(&amp;(*it));</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div><div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_a78293334750ec5279eb9c96d56deaf08"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#a78293334750ec5279eb9c96d56deaf08">armnn::SubgraphView::OutputSlots</a></div><div class="ttdeci">std::vector&lt; OutputSlot * &gt; OutputSlots</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_subgraph_view_8hpp_source.xhtml#l00051">SubgraphView.hpp:51</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abf999283bc03f1bafd01680149ed7e3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf999283bc03f1bafd01680149ed7e3e">&#9670;&nbsp;</a></span>CreateSubgraphViewFrom()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_subgraph_view.xhtml#a4684a457c7786484375f06e9ab2d2265">armnn::SubgraphView::SubgraphViewPtr</a> CreateSubgraphViewFrom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_subgraph_view.xhtml#a5cc65e15002dbc33a5c8a7d6680e9a9d">armnn::SubgraphView::InputSlots</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_subgraph_view.xhtml#a78293334750ec5279eb9c96d56deaf08">armnn::SubgraphView::OutputSlots</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>outputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_subgraph_view.xhtml#a74798938fdaeae75c8adfa4a7439e7f9">armnn::SubgraphView::Layers</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>layers</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00065">65</a> of file <a class="el" href="_common_test_utils_8cpp_source.xhtml">CommonTestUtils.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml#l00074">SetWeightAndBias()</a>, and <a class="el" href="_subgraph_view_tests_8cpp_source.xhtml#l00185">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;SubgraphView&gt;(std::move(inputs), std::move(outputs), std::move(layers));</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a46d07efd379e728fc3df18a88ec878b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46d07efd379e728fc3df18a88ec878b0">&#9670;&nbsp;</a></span>MakeTensorShape()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a> MakeTensorShape </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>batches</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a>&#160;</td>
          <td class="paramname"><em>layout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00081">81</a> of file <a class="el" href="_common_test_utils_8cpp_source.xhtml">CommonTestUtils.cpp</a>.</p>

<p class="reference">References <a class="el" href="_types_utils_8hpp_source.xhtml#l00222">armnn::GetDataLayoutName()</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>

<p class="reference">Referenced by <a class="el" href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml#l00074">SetWeightAndBias()</a>, and <a class="el" href="_transpose_convolution2d_end_to_end_test_impl_8hpp_source.xhtml#l00043">TransposeConvolution2dEndToEnd()</a>.</p>
<div class="fragment"><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;{</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">switch</span> (layout)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>:</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>{ batches, channels, height, width };</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>:</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>{ batches, height, width, channels };</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(std::string(<span class="stringliteral">&quot;Unsupported data layout: &quot;</span>) + <a class="code" href="namespacearmnn.xhtml#aeef70b7611ae71e97ab55c75ef72b210">GetDataLayoutName</a>(layout));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_aeef70b7611ae71e97ab55c75ef72b210"><div class="ttname"><a href="namespacearmnn.xhtml#aeef70b7611ae71e97ab55c75ef72b210">armnn::GetDataLayoutName</a></div><div class="ttdeci">constexpr const char * GetDataLayoutName(DataLayout dataLayout)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00222">TypesUtils.hpp:222</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acacca57727df8ccf5c5597e6026da814"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acacca57727df8ccf5c5597e6026da814">&#9670;&nbsp;</a></span>SetWeightAndBias()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetWeightAndBias </td>
          <td>(</td>
          <td class="paramtype">ConvolutionLayer *&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weightInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>biasInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml#l00074">74</a> of file <a class="el" href="armnn_test_utils_2_common_test_utils_8hpp_source.xhtml">CommonTestUtils.hpp</a>.</p>

<p class="reference">References <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00072">CreateBackendObject()</a>, <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00012">CreateInputsFrom()</a>, <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00052">CreateOutputsFrom()</a>, <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00065">CreateSubgraphViewFrom()</a>, and <a class="el" href="_common_test_utils_8cpp_source.xhtml#l00081">MakeTensorShape()</a>.</p>
<div class="fragment"><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    layer-&gt;m_Weight = std::make_unique&lt;armnn::ScopedTensorHandle&gt;(weightInfo);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    layer-&gt;m_Bias   = std::make_unique&lt;armnn::ScopedTensorHandle&gt;(biasInfo);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    layer-&gt;m_Weight-&gt;Allocate();</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    layer-&gt;m_Bias-&gt;Allocate();</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_f574f3650e467f7ec35d628d20229555.xhtml">armnnTestUtils</a></li><li class="navelem"><a class="el" href="armnn_test_utils_2_common_test_utils_8hpp.xhtml">CommonTestUtils.hpp</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:27:16 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
