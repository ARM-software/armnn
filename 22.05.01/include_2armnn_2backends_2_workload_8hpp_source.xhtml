<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: include/armnn/backends/Workload.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('include_2armnn_2backends_2_workload_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Workload.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="include_2armnn_2backends_2_workload_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2021 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_workload_8hpp.xhtml">IWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="include_2armnn_2backends_2_workload_data_8hpp.xhtml">WorkloadData.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="include_2armnn_2backends_2_workload_info_8hpp.xhtml">WorkloadInfo.hpp</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_working_mem_descriptor_8hpp.xhtml">WorkingMemDescriptor.hpp</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_logging_8hpp.xhtml">armnn/Logging.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_profiling_8hpp.xhtml">Profiling.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;client/include/IProfilingService.hpp&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">// NullWorkload used to denote an unsupported workload when used by the MakeWorkload&lt;&gt; template</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">// in the various workload factories.</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">// There should never be an instantiation of a NullWorkload.</span></div><div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="classarmnn_1_1_null_workload.xhtml">   26</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_null_workload.xhtml">NullWorkload</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <a class="code" href="classarmnn_1_1_null_workload.xhtml">NullWorkload</a>()=<span class="keyword">delete</span>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;};</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QueueDescriptor&gt;</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_workload.xhtml">   32</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_base_workload.xhtml">BaseWorkload</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_workload.xhtml#af2ef420610280dc5a661cd3d4836d5a2">   36</a></span>&#160;    <a class="code" href="classarmnn_1_1_base_workload.xhtml#af2ef420610280dc5a661cd3d4836d5a2">BaseWorkload</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a>&amp; descriptor, <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        : m_Data(descriptor),</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;          m_Guid(<a class="code" href="namespacearm.xhtml">arm</a>::pipe::IProfilingService::GetNextGuid())</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        m_Data.Validate(info);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_workload.xhtml#a03726736f93bb28e11835f093f630a07">   43</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_base_workload.xhtml#a03726736f93bb28e11835f093f630a07">ExecuteAsync</a>(<a class="code" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">WorkingMemDescriptor</a>&amp; workingMemDescriptor)<span class="keyword"> override</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) &lt;&lt; <span class="stringliteral">&quot;Using default async workload execution, this will network affect performance&quot;</span>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#if !defined(ARMNN_DISABLE_THREADS)</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        std::lock_guard&lt;std::mutex&gt; lockGuard(m_AsyncWorkloadMutex);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        m_Data.m_Inputs = workingMemDescriptor.<a class="code" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        m_Data.m_Outputs = workingMemDescriptor.<a class="code" href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload.xhtml#a72ae00e6604850c8798c5e0d825ee7e4">Execute</a>();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    };</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_workload.xhtml#a81627f96ba06d76e147f7d392a8117ed">   55</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_base_workload.xhtml#a81627f96ba06d76e147f7d392a8117ed">PostAllocationConfigure</a>()<span class="keyword"> override </span>{}</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_workload.xhtml#a965cf380c7adf547d0f14b3f6d1da249">   57</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_base_workload.xhtml#a965cf380c7adf547d0f14b3f6d1da249">GetData</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Data; }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_workload.xhtml#aaff95a48875d8fb4a616352906660ca9">   59</a></span>&#160;    arm::pipe::ProfilingGuid <a class="code" href="classarmnn_1_1_base_workload.xhtml#aaff95a48875d8fb4a616352906660ca9">GetGuid</a>() const final { <span class="keywordflow">return</span> m_Guid; }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_workload.xhtml#a0c326c344355d8423217e9431781f2ee">   61</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_base_workload.xhtml#a0c326c344355d8423217e9431781f2ee">SupportsTensorHandleReplacement</a>()<span class="keyword">  const override</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// Replace input tensor handle with the given TensorHandle</span></div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_workload.xhtml#ab0a67f8179ddb997dda0070a6661f837">   67</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_base_workload.xhtml#ab0a67f8179ddb997dda0070a6661f837">ReplaceInputTensorHandle</a>(<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>* tensorHandle, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slot)<span class="keyword"> override</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(tensorHandle, slot);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_unimplemented_exception.xhtml">armnn::UnimplementedException</a>(<span class="stringliteral">&quot;ReplaceInputTensorHandle not implemented for this workload&quot;</span>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// Replace output tensor handle with the given TensorHandle</span></div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_workload.xhtml#acc08590544f05c641d21c724aedf26dd">   74</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1_base_workload.xhtml#acc08590544f05c641d21c724aedf26dd">ReplaceOutputTensorHandle</a>(<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>* tensorHandle, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slot)<span class="keyword"> override</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(tensorHandle, slot);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_unimplemented_exception.xhtml">armnn::UnimplementedException</a>(<span class="stringliteral">&quot;ReplaceOutputTensorHandle not implemented for this workload&quot;</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">   81</a></span>&#160;    <a class="code" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> <a class="code" href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">m_Data</a>;</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classarmnn_1_1_base_workload.xhtml#a4c2b3ca86eec6c199364671af267cd2c">   82</a></span>&#160;    <span class="keyword">const</span> arm::pipe::ProfilingGuid <a class="code" href="classarmnn_1_1_base_workload.xhtml#a4c2b3ca86eec6c199364671af267cd2c">m_Guid</a>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">#if !defined(ARMNN_DISABLE_THREADS)</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    std::mutex m_AsyncWorkloadMutex;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;};</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">// TypedWorkload used</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> <a class="code" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a>, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a>... DataTypes&gt;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classarmnn_1_1_typed_workload.xhtml">   92</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_typed_workload.xhtml">TypedWorkload</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_base_workload.xhtml">BaseWorkload</a>&lt;QueueDescriptor&gt;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classarmnn_1_1_typed_workload.xhtml#aa617fec9998f9650150a758b68498865">   96</a></span>&#160;    <a class="code" href="classarmnn_1_1_typed_workload.xhtml#aa617fec9998f9650150a758b68498865">TypedWorkload</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a>&amp; descriptor, <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        : <a class="code" href="classarmnn_1_1_base_workload.xhtml">BaseWorkload</a>&lt;<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a>&gt;(descriptor, info)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        std::vector&lt;armnn::DataType&gt; dataTypes = {DataTypes...};</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> expectedInputType;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordflow">if</span> (!info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>.empty())</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            expectedInputType = info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>.front().GetDataType();</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordflow">if</span> (std::find(dataTypes.begin(), dataTypes.end(), expectedInputType) == dataTypes.end())</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Trying to create workload with incorrect type&quot;</span>);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(std::all_of(std::next(info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>.begin()),</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                         info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>.end(),</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                         [&amp;](<span class="keyword">auto</span> it){</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                             <span class="keywordflow">return</span> it.GetDataType() == expectedInputType;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                         }),</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                             <span class="stringliteral">&quot;Trying to create workload with incorrect type&quot;</span>);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> expectedOutputType;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">if</span> (!info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>.empty())</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            expectedOutputType = info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>.front().GetDataType();</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keywordflow">if</span> (!info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>.empty())</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="keywordflow">if</span> (expectedOutputType != expectedInputType)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Trying to create workload with incorrect type&quot;</span>);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (std::find(dataTypes.begin(), dataTypes.end(), expectedOutputType) == dataTypes.end())</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Trying to create workload with incorrect type&quot;</span>);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(std::all_of(std::next(info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>.begin()),</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                         info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>.end(),</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                                         [&amp;](<span class="keyword">auto</span> it){</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                             <span class="keywordflow">return</span> it.GetDataType() == expectedOutputType;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                         }),</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                             <span class="stringliteral">&quot;Trying to create workload with incorrect type&quot;</span>);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;};</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QueueDescriptor, armnn::DataType InputDataType, armnn::DataType OutputDataType&gt;</div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="classarmnn_1_1_multi_typed_workload.xhtml">  145</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml">MultiTypedWorkload</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_base_workload.xhtml">BaseWorkload</a>&lt;QueueDescriptor&gt;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="classarmnn_1_1_multi_typed_workload.xhtml#ab020f6e4ccf7b3e8b3c0a88dccf89d50">  149</a></span>&#160;    <a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml#ab020f6e4ccf7b3e8b3c0a88dccf89d50">MultiTypedWorkload</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a>&amp; descriptor, <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        : <a class="code" href="classarmnn_1_1_base_workload.xhtml">BaseWorkload</a>&lt;<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a>&gt;(descriptor, info)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(std::all_of(info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>.begin(),</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                     info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>.end(),</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                     [&amp;](<span class="keyword">auto</span> it){</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                         <span class="keywordflow">return</span> it.GetDataType() == InputDataType;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                     }),</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                         <span class="stringliteral">&quot;Trying to create workload with incorrect type&quot;</span>);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(std::all_of(info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>.begin(),</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                     info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>.end(),</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                     [&amp;](<span class="keyword">auto</span> it){</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                                         <span class="keywordflow">return</span> it.GetDataType() == OutputDataType;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                     }),</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                         <span class="stringliteral">&quot;Trying to create workload with incorrect type&quot;</span>);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;};</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">// FirstInputTypedWorkload used to check type of the first input</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QueueDescriptor, armnn::DataType DataType&gt;</div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="classarmnn_1_1_first_input_typed_workload.xhtml">  170</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarmnn_1_1_first_input_typed_workload.xhtml">FirstInputTypedWorkload</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_base_workload.xhtml">BaseWorkload</a>&lt;QueueDescriptor&gt;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;{</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="classarmnn_1_1_first_input_typed_workload.xhtml#a25445e32b355feb06cd17f31667e0ecd">  174</a></span>&#160;    <a class="code" href="classarmnn_1_1_first_input_typed_workload.xhtml#a25445e32b355feb06cd17f31667e0ecd">FirstInputTypedWorkload</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a>&amp; descriptor, <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        : <a class="code" href="classarmnn_1_1_base_workload.xhtml">BaseWorkload</a>&lt;<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a>&gt;(descriptor, info)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">if</span> (!info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>.empty())</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">m_InputTensorInfos</a>.front().GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                 <span class="stringliteral">&quot;Trying to create workload with incorrect type&quot;</span>);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(std::all_of(info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>.begin(),</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                                     info.<a class="code" href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">m_OutputTensorInfos</a>.end(),</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                                     [&amp;](<span class="keyword">auto</span> it){</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                         <span class="keywordflow">return</span> it.GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                                     }),</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                         <span class="stringliteral">&quot;Trying to create workload with incorrect type&quot;</span>);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;};</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QueueDescriptor&gt;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keyword">using</span> <a class="code" href="classarmnn_1_1_typed_workload.xhtml">FloatWorkload</a> = <a class="code" href="classarmnn_1_1_typed_workload.xhtml">TypedWorkload</a>&lt;<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a>,</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a>,</div><div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#abaedcfd0ae08790c03bfe8ba7586dd84">  195</a></span>&#160;                                    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>&gt;;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QueueDescriptor&gt;</div><div class="line"><a name="l00198"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a0493144f15b35804a133c9aa0b63fcc9">  198</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarmnn_1_1_typed_workload.xhtml">Float32Workload</a> = <a class="code" href="classarmnn_1_1_typed_workload.xhtml">TypedWorkload&lt;QueueDescriptor, armnn::DataType::Float32&gt;</a>;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QueueDescriptor&gt;</div><div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#ad4d53881107428c301d43b5aad16bfe0">  201</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarmnn_1_1_typed_workload.xhtml">Uint8Workload</a> = <a class="code" href="classarmnn_1_1_typed_workload.xhtml">TypedWorkload&lt;QueueDescriptor, armnn::DataType::QAsymmU8&gt;</a>;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QueueDescriptor&gt;</div><div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a3e4b88b993c90b274e0bd268c35d798e">  204</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarmnn_1_1_typed_workload.xhtml">Int32Workload</a> = <a class="code" href="classarmnn_1_1_typed_workload.xhtml">TypedWorkload&lt;QueueDescriptor, armnn::DataType::Signed32&gt;</a>;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QueueDescriptor&gt;</div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#ab539ef5a0c152536da71c8fcc065efb5">  207</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarmnn_1_1_typed_workload.xhtml">BooleanWorkload</a> = <a class="code" href="classarmnn_1_1_typed_workload.xhtml">TypedWorkload&lt;QueueDescriptor, armnn::DataType::Boolean&gt;</a>;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QueueDescriptor&gt;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="keyword">using</span> <a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml">BaseFloat32ComparisonWorkload</a> = <a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml">MultiTypedWorkload</a>&lt;QueueDescriptor,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                                         <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>,</div><div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a20d2055c37fedf3f39db9facf2c8c697">  212</a></span>&#160;                                                         <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a>&gt;;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QueueDescriptor&gt;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="keyword">using</span> <a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml">BaseUint8ComparisonWorkload</a> = <a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml">MultiTypedWorkload</a>&lt;QueueDescriptor,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                                       <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a>,</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a9cbc0957cf0637cc3fd9702086117cc0">  217</a></span>&#160;                                                       <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a>&gt;;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QueueDescriptor&gt;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="keyword">using</span> <a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml">BFloat16ToFloat32Workload</a> = <a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml">MultiTypedWorkload</a>&lt;QueueDescriptor,</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                                     <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::DataType::BFloat16</a>,</div><div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a96b023ab3b395df841cc706f77c236cc">  222</a></span>&#160;                                                     armnn::DataType::Float32&gt;;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QueueDescriptor&gt;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="keyword">using</span> <a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml">Float32ToBFloat16Workload</a> = <a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml">MultiTypedWorkload</a>&lt;QueueDescriptor,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                                     <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>,</div><div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a6ef601b454db749320636d9425b1f4c2">  227</a></span>&#160;                                                     armnn::DataType::BFloat16&gt;;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QueueDescriptor&gt;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="keyword">using</span> <a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml">Float16ToFloat32Workload</a> = <a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml">MultiTypedWorkload</a>&lt;QueueDescriptor,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                                    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a>,</div><div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a827d59b5a779a8089017802172817f3c">  232</a></span>&#160;                                                    armnn::DataType::Float32&gt;;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QueueDescriptor&gt;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keyword">using</span> <a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml">Float32ToFloat16Workload</a> = <a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml">MultiTypedWorkload</a>&lt;QueueDescriptor,</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                                    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>,</div><div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a6486138451112140f98516c0bee18615">  237</a></span>&#160;                                                    armnn::DataType::Float16&gt;;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QueueDescriptor&gt;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="keyword">using</span> <a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml">Uint8ToFloat32Workload</a> = <a class="code" href="classarmnn_1_1_multi_typed_workload.xhtml">MultiTypedWorkload</a>&lt;QueueDescriptor,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                                  <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a>,</div><div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a6d4fbf927a9d8e68cab1d7965c7dbc44">  242</a></span>&#160;                                                  armnn::DataType::Float32&gt;;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;} <span class="comment">//namespace armnn</span></div><div class="ttc" id="include_2armnn_2backends_2_workload_info_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_workload_info_8hpp.xhtml">WorkloadInfo.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml">armnn::QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00024">WorkloadData.hpp:24</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_workload_xhtml_aaff95a48875d8fb4a616352906660ca9"><div class="ttname"><a href="classarmnn_1_1_base_workload.xhtml#aaff95a48875d8fb4a616352906660ca9">armnn::BaseWorkload::GetGuid</a></div><div class="ttdeci">arm::pipe::ProfilingGuid GetGuid() const final</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00059">Workload.hpp:59</a></div></div>
<div class="ttc" id="classarmnn_1_1_unimplemented_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_unimplemented_exception.xhtml">armnn::UnimplementedException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00098">Exceptions.hpp:98</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="classarmnn_1_1_multi_typed_workload_xhtml_ab020f6e4ccf7b3e8b3c0a88dccf89d50"><div class="ttname"><a href="classarmnn_1_1_multi_typed_workload.xhtml#ab020f6e4ccf7b3e8b3c0a88dccf89d50">armnn::MultiTypedWorkload::MultiTypedWorkload</a></div><div class="ttdeci">MultiTypedWorkload(const QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00149">Workload.hpp:149</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_workload_xhtml_a4c2b3ca86eec6c199364671af267cd2c"><div class="ttname"><a href="classarmnn_1_1_base_workload.xhtml#a4c2b3ca86eec6c199364671af267cd2c">armnn::BaseWorkload::m_Guid</a></div><div class="ttdeci">const arm::pipe::ProfilingGuid m_Guid</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00082">Workload.hpp:82</a></div></div>
<div class="ttc" id="classarmnn_1_1_first_input_typed_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_first_input_typed_workload.xhtml">armnn::FirstInputTypedWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00170">Workload.hpp:170</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_workload_xhtml_ab0a67f8179ddb997dda0070a6661f837"><div class="ttname"><a href="classarmnn_1_1_base_workload.xhtml#ab0a67f8179ddb997dda0070a6661f837">armnn::BaseWorkload::ReplaceInputTensorHandle</a></div><div class="ttdeci">void ReplaceInputTensorHandle(ITensorHandle *tensorHandle, unsigned int slot) override</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00067">Workload.hpp:67</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="_i_workload_8hpp_xhtml"><div class="ttname"><a href="_i_workload_8hpp.xhtml">IWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_workload_xhtml_a03726736f93bb28e11835f093f630a07"><div class="ttname"><a href="classarmnn_1_1_base_workload.xhtml#a03726736f93bb28e11835f093f630a07">armnn::BaseWorkload::ExecuteAsync</a></div><div class="ttdeci">void ExecuteAsync(WorkingMemDescriptor &amp;workingMemDescriptor) override</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00043">Workload.hpp:43</a></div></div>
<div class="ttc" id="structarmnn_1_1experimental_1_1_working_mem_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml">armnn::experimental::WorkingMemDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_descriptor_8hpp_source.xhtml#l00018">WorkingMemDescriptor.hpp:18</a></div></div>
<div class="ttc" id="structarmnn_1_1experimental_1_1_working_mem_descriptor_xhtml_a4b50e46a6810018f3edecfb68b2a76b3"><div class="ttname"><a href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">armnn::experimental::WorkingMemDescriptor::m_Inputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Inputs</div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_descriptor_8hpp_source.xhtml#l00020">WorkingMemDescriptor.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_workload_xhtml_af2ef420610280dc5a661cd3d4836d5a2"><div class="ttname"><a href="classarmnn_1_1_base_workload.xhtml#af2ef420610280dc5a661cd3d4836d5a2">armnn::BaseWorkload::BaseWorkload</a></div><div class="ttdeci">BaseWorkload(const QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00036">Workload.hpp:36</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_workload_xhtml_acc08590544f05c641d21c724aedf26dd"><div class="ttname"><a href="classarmnn_1_1_base_workload.xhtml#acc08590544f05c641d21c724aedf26dd">armnn::BaseWorkload::ReplaceOutputTensorHandle</a></div><div class="ttdeci">void ReplaceOutputTensorHandle(ITensorHandle *tensorHandle, unsigned int slot) override</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00074">Workload.hpp:74</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml_ac97905bfa0daab357b91df1347600309"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml#ac97905bfa0daab357b91df1347600309">armnn::WorkloadInfo::m_InputTensorInfos</a></div><div class="ttdeci">std::vector&lt; TensorInfo &gt; m_InputTensorInfos</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00018">WorkloadInfo.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_base_workload.xhtml">armnn::BaseWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00032">Workload.hpp:32</a></div></div>
<div class="ttc" id="classarmnn_1_1_multi_typed_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_multi_typed_workload.xhtml">armnn::MultiTypedWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00145">Workload.hpp:145</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_workload_xhtml_a965cf380c7adf547d0f14b3f6d1da249"><div class="ttname"><a href="classarmnn_1_1_base_workload.xhtml#a965cf380c7adf547d0f14b3f6d1da249">armnn::BaseWorkload::GetData</a></div><div class="ttdeci">const QueueDescriptor &amp; GetData() const</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00057">Workload.hpp:57</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00048">Types.hpp:48</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle.xhtml">armnn::ITensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00015">ITensorHandle.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_workload_xhtml_afb8d2c8817c75de9d01a4c0e0d5c160b"><div class="ttname"><a href="classarmnn_1_1_base_workload.xhtml#afb8d2c8817c75de9d01a4c0e0d5c160b">armnn::BaseWorkload::m_Data</a></div><div class="ttdeci">QueueDescriptor m_Data</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00081">Workload.hpp:81</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_workload_xhtml_a81627f96ba06d76e147f7d392a8117ed"><div class="ttname"><a href="classarmnn_1_1_base_workload.xhtml#a81627f96ba06d76e147f7d392a8117ed">armnn::BaseWorkload::PostAllocationConfigure</a></div><div class="ttdeci">void PostAllocationConfigure() override</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00055">Workload.hpp:55</a></div></div>
<div class="ttc" id="classarmnn_1_1_base_workload_xhtml_a0c326c344355d8423217e9431781f2ee"><div class="ttname"><a href="classarmnn_1_1_base_workload.xhtml#a0c326c344355d8423217e9431781f2ee">armnn::BaseWorkload::SupportsTensorHandleReplacement</a></div><div class="ttdeci">virtual bool SupportsTensorHandleReplacement() const override</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00061">Workload.hpp:61</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a></div></div>
<div class="ttc" id="classarmnn_1_1_typed_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_typed_workload.xhtml">armnn::TypedWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00092">Workload.hpp:92</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml_a67b178f8a836bc1e52b8de109760adfd"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml#a67b178f8a836bc1e52b8de109760adfd">armnn::WorkloadInfo::m_OutputTensorInfos</a></div><div class="ttdeci">std::vector&lt; TensorInfo &gt; m_OutputTensorInfos</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00019">WorkloadInfo.hpp:19</a></div></div>
<div class="ttc" id="namespacearm_xhtml"><div class="ttname"><a href="namespacearm.xhtml">arm</a></div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8hpp_source.xhtml#l00018">BackendRegistry.hpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::DataType::BFloat16</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_workload.xhtml">armnn::IWorkload</a></div><div class="ttdoc">Workload interface to enqueue a layer computation. </div><div class="ttdef"><b>Definition:</b> <a href="_i_workload_8hpp_source.xhtml#l00022">IWorkload.hpp:22</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml"><div class="ttname"><a href="_logging_8hpp.xhtml">Logging.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_first_input_typed_workload_xhtml_a25445e32b355feb06cd17f31667e0ecd"><div class="ttname"><a href="classarmnn_1_1_first_input_typed_workload.xhtml#a25445e32b355feb06cd17f31667e0ecd">armnn::FirstInputTypedWorkload::FirstInputTypedWorkload</a></div><div class="ttdeci">FirstInputTypedWorkload(const QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00174">Workload.hpp:174</a></div></div>
<div class="ttc" id="classarmnn_1_1_typed_workload_xhtml_aa617fec9998f9650150a758b68498865"><div class="ttname"><a href="classarmnn_1_1_typed_workload.xhtml#aa617fec9998f9650150a758b68498865">armnn::TypedWorkload::TypedWorkload</a></div><div class="ttdeci">TypedWorkload(const QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00096">Workload.hpp:96</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="_working_mem_descriptor_8hpp_xhtml"><div class="ttname"><a href="_working_mem_descriptor_8hpp.xhtml">WorkingMemDescriptor.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_null_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_null_workload.xhtml">armnn::NullWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_8hpp_source.xhtml#l00026">Workload.hpp:26</a></div></div>
<div class="ttc" id="structarmnn_1_1experimental_1_1_working_mem_descriptor_xhtml_a6abd491bb99ffe88bd472c1ae5a1ed1a"><div class="ttname"><a href="structarmnn_1_1experimental_1_1_working_mem_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">armnn::experimental::WorkingMemDescriptor::m_Outputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Outputs</div><div class="ttdef"><b>Definition:</b> <a href="_working_mem_descriptor_8hpp_source.xhtml#l00021">WorkingMemDescriptor.hpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about TensorInfos of a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_xhtml_a72ae00e6604850c8798c5e0d825ee7e4"><div class="ttname"><a href="classarmnn_1_1_i_workload.xhtml#a72ae00e6604850c8798c5e0d825ee7e4">armnn::IWorkload::Execute</a></div><div class="ttdeci">virtual void Execute() const =0</div></div>
<div class="ttc" id="_profiling_8hpp_xhtml"><div class="ttname"><a href="_profiling_8hpp.xhtml">Profiling.hpp</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_workload_data_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_workload_data_8hpp.xhtml">WorkloadData.hpp</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_2b72cc348e06937955e62ebdd8a13436.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_8946eb9d8f826e973720979438627a91.xhtml">backends</a></li><li class="navelem"><a class="el" href="include_2armnn_2backends_2_workload_8hpp.xhtml">Workload.hpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:19:41 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
