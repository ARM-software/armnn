<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/layerTests/UnidirectionalSequenceLstmTestImpl.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">UnidirectionalSequenceLstmTestImpl.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2021 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_unidirectional_sequence_lstm_test_impl_8hpp.xhtml">UnidirectionalSequenceLstmTestImpl.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_numeric_cast_8hpp.xhtml">armnn/utility/NumericCast.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_tensor_handle_8hpp.xhtml">armnn/backends/TensorHandle.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml">armnnTestUtils/TensorCopyUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_test_utils_2_workload_test_utils_8hpp.xhtml">armnnTestUtils/WorkloadTestUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_resolve_type_8hpp.xhtml">ResolveType.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType ArmnnType, <span class="keyword">typename</span> T = armnn::ResolveType&lt;ArmnnType&gt;&gt;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 3&gt;</a></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;UnidirectionalSequenceLstmTimeMajorSingleBatchTestImpl(</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">const</span> std::vector&lt;T&gt;&amp; input,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keyword">const</span> std::vector&lt;T&gt;&amp; outputExpected,</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&amp; inputShape,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&amp; outputExpectedShape,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordtype">float</span> qScale = 0.0f,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    int32_t qOffset = 0,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> constantDataType = <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(inputShape[0]);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(inputShape[2]);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(outputExpectedShape[2]);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordtype">unsigned</span> numUnits = outputSize;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({1, batchSize , inputSize}, ArmnnType,  qScale, qOffset );</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateInTensorInfo({batchSize , numUnits}, ArmnnType, qScale, qOffset);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateInTensorInfo({batchSize , outputSize}, ArmnnType, qScale, qOffset);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateOutTensorInfo({ batchSize, 1, outputSize }, ArmnnType, qScale, qOffset);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateOutTensorInfo({ batchSize, 1, outputSize }, ArmnnType, qScale, qOffset);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({1, batchSize, outputSize}, ArmnnType, qScale, qOffset);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    std::vector&lt;T&gt; inputVector;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    inputVector.assign(input.data(), input.data() + (batchSize * inputSize));</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    std::vector&lt;T&gt; cellStateInVector(batchSize * numUnits, T());</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    std::vector&lt;T&gt; outputStateInVector(batchSize * outputSize, T());</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    std::vector&lt;T&gt; actualOutputStateOut(outputStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    std::vector&lt;T&gt; actualCellStateOut(cellStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    std::vector&lt;T&gt; actualOutput(outputTensorInfo.GetNumElements());</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    std::vector&lt;T&gt; outputVector;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    outputVector.assign(outputExpected.data(), outputExpected.data() + (batchSize * outputSize));</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateInHandle =</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                              tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateInTensorInfo);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateInHandle =</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                              tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateInTensorInfo);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateOutHandle =</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateOutTensorInfo);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateOutHandle =</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateOutTensorInfo);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml">armnn::UnidirectionalSequenceLstmQueueDescriptor</a> data;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    AddInputToWorkload(data, info, outputStateInTensorInfo, outputStateInHandle.get());</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    AddInputToWorkload(data, info, cellStateInTensorInfo, cellStateInHandle.get());</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    AddOutputToWorkload(data, info, outputStateOutTensorInfo, outputStateOutHandle.get());</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    AddOutputToWorkload(data, info, cellStateOutTensorInfo, cellStateOutHandle.get());</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo4({numUnits}, constantDataType , qScale, qOffset);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo8({numUnits, 2}, constantDataType, qScale, qOffset);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo16({numUnits, 4}, constantDataType, qScale, qOffset);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    std::vector&lt;float&gt; inputToInputWeights = {-0.45018822f, -0.02338299f, -0.0870589f,</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                                              -0.34550029f, 0.04266912f, -0.15680569f,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                                              -0.34856534f, 0.43890524f};</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    std::vector&lt;float&gt; inputToForgetWeights = { 0.09701663f, 0.20334584f, -0.50592935f,</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                                -0.31343272f, -0.40032279f, 0.44781327f,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                                0.01387155f, -0.35593212f};</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    std::vector&lt;float&gt; inputToCellWeights = { -0.50013041f, 0.1370284f, 0.11810488f, 0.2013163f,</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                              -0.20583314f, 0.44344562f, 0.22077113f,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                              -0.29909778f};</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    std::vector&lt;float&gt; inputToOutputWeights = { -0.25065863f, -0.28290087f, 0.04613829f,</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                                0.40525138f, 0.44272184f, 0.03897077f,</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                                -0.1556896f, 0.19487578f};</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    std::vector&lt;float&gt; recurrentToInputWeights = {-0.0063535f, -0.2042388f, 0.31454784f,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                                                  -0.35746509f, 0.28902304f, 0.08183324f,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                                  -0.16555229f, 0.02286911f, -0.13566875f,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                                                  0.03034258f, 0.48091322f, -0.12528998f,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                                  0.24077177f, -0.51332325f, -0.33502164f,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                                  0.10629296f};</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    std::vector&lt;float&gt; recurrentToForgetWeights = { -0.48684245f, -0.06655136f, 0.42224967f,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                                    0.2112639f, 0.27654213f, 0.20864892f,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                                    -0.07646349f, 0.45877004f, 0.00141793f,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                                    -0.14609534f, 0.36447752f, 0.09196436f,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                                    0.28053468f, 0.01560611f, -0.20127171f,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                                    -0.01140004f};</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    std::vector&lt;float&gt; recurrentToCellWeights = { -0.3407414f, 0.24443203f, -0.2078532f,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                                  0.26320225f, 0.05695659f, -0.00123841f,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                                  -0.4744786f, -0.35869038f, -0.06418842f,</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                                  -0.13502428f, -0.501764f, 0.22830659f,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                                                  -0.46367589f, 0.26016325f, -0.03894562f,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                                  -0.16368064f};</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    std::vector&lt;float&gt; recurrentToOutputWeights = { 0.43385774f, -0.17194885f, 0.2718237f,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                                    0.09215671f, 0.24107647f, -0.39835793f,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                                                    0.18212086f, 0.01301402f, 0.48572797f,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                                                    -0.50656658f, 0.20047462f, -0.20607421f,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                                                    -0.51818722f, -0.15390486f, 0.0468148f,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                                                    0.39922136f};</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    std::vector&lt;float&gt; cellToInputWeights = {0., 0., 0., 0.};</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    std::vector&lt;float&gt; inputGateBias = {0., 0., 0., 0.};</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    std::vector&lt;float&gt; forgetGateBias = {1., 1., 1., 1.};</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    std::vector&lt;float&gt; cellBias = {0., 0., 0., 0.};</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    std::vector&lt;float&gt; outputGateBias = {0., 0., 0., 0.};</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToInputWeightsTensor(tensorInfo8);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToForgetWeightsTensor(tensorInfo8);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToCellWeightsTensor(tensorInfo8);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToOutputWeightsTensor(tensorInfo8);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToInputWeightsTensor(tensorInfo16);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToForgetWeightsTensor(tensorInfo16);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToCellWeightsTensor(tensorInfo16);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToOutputWeightsTensor(tensorInfo16);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToInputWeightsTensor(tensorInfo4);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputGateBiasTensor(tensorInfo4);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> forgetGateBiasTensor(tensorInfo4);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellBiasTensor(tensorInfo4);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> outputGateBiasTensor(tensorInfo4);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToInputWeightsTensor, inputToInputWeights.data());</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToForgetWeightsTensor, inputToForgetWeights.data());</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToCellWeightsTensor, inputToCellWeights.data());</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToOutputWeightsTensor, inputToOutputWeights.data());</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToInputWeightsTensor, recurrentToInputWeights.data());</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToForgetWeightsTensor, recurrentToForgetWeights.data());</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToCellWeightsTensor, recurrentToCellWeights.data());</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToOutputWeightsTensor, recurrentToOutputWeights.data());</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToInputWeightsTensor, cellToInputWeights.data());</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputGateBiasTensor, inputGateBias.data());</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;forgetGateBiasTensor, forgetGateBias.data());</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellBiasTensor, cellBias.data());</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;outputGateBiasTensor, outputGateBias.data());</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ab160eba2493d5fe52185c0986dcb190c">m_InputToInputWeights</a> = &amp;inputToInputWeightsTensor;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aab77f54a037658ca9b2bf9cc8a1fadf1">m_InputToForgetWeights</a> = &amp;inputToForgetWeightsTensor;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a841439e3b8dc157a7368b19c9ecb7d03">m_InputToCellWeights</a> = &amp;inputToCellWeightsTensor;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a17ba1c8bcc71a55a95b2a3913f8cb203">m_InputToOutputWeights</a> = &amp;inputToOutputWeightsTensor;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a299587d4f3fca029492700f3e2585bd8">m_RecurrentToInputWeights</a> = &amp;recurrentToInputWeightsTensor;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#adf8571dd1867ee91082bd005f94f2610">m_RecurrentToForgetWeights</a> = &amp;recurrentToForgetWeightsTensor;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac18c8b8b2039267d8282e91b4162d8aa">m_RecurrentToCellWeights</a> = &amp;recurrentToCellWeightsTensor;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a4c27716f61bb68e8ea0bd4e8389ba01a">m_RecurrentToOutputWeights</a> = &amp;recurrentToOutputWeightsTensor;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a44eb7524badcca9b2073359e3814c98b">m_InputGateBias</a> = &amp;inputGateBiasTensor;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a29fa293fffbf9c6f00cd75db1dc0a52a">m_ForgetGateBias</a> = &amp;forgetGateBiasTensor;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a6e9593869b82984de198fed27f72cdcf">m_CellBias</a> = &amp;cellBiasTensor;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a5ff4158b1b363b898d0da04c42d37ce0">m_OutputGateBias</a> = &amp;outputGateBiasTensor;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="comment">// Flags to set test configuration</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> = 4;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a> = 10;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a> = 0;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a3dcd10ca3ea2e132558b1e2814668c15">m_TimeMajor</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a>, data, info);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    outputStateInHandle-&gt;Allocate();</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    cellStateInHandle-&gt;Allocate();</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    outputStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    cellStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), inputVector.data());</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(outputStateInHandle.get(), outputStateInVector.data());</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(cellStateInHandle.get(), cellStateInVector.data());</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutputStateOut.data(), outputStateOutHandle.get());</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualCellStateOut.data(), cellStateOutHandle.get());</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutput.data(), outputHandle.get());</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 3&gt;</a>(actualOutput,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                 outputVector,</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                 outputHandle-&gt;GetShape(),</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                 outputTensorInfo.GetShape());</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType ArmnnType, <span class="keyword">typename</span> T = armnn::ResolveType&lt;ArmnnType&gt;&gt;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 3&gt;</a> UnidirectionalSequenceLstmLayerFloat32TestImpl(</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keyword">const</span> std::vector&lt;T&gt;&amp; input,</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">const</span> std::vector&lt;T&gt;&amp; outputExpected,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&amp; inputShape,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&amp; outputExpectedShape,</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordtype">float</span> qScale = 0.0f,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    int32_t qOffset = 0,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> constantDataType = <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>) {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(inputShape[0]);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timeSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(inputShape[1]);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(inputShape[2]);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(outputExpectedShape[2]);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordtype">unsigned</span> numUnits = outputSize;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({batchSize, timeSize, inputSize}, ArmnnType, qScale, qOffset);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateInTensorInfo({batchSize, numUnits}, ArmnnType, qScale, qOffset);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateInTensorInfo({batchSize, outputSize}, ArmnnType, qScale, qOffset);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateOutTensorInfo({batchSize, timeSize, outputSize}, ArmnnType, qScale, qOffset);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateOutTensorInfo({batchSize, timeSize, outputSize}, ArmnnType, qScale, qOffset);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({batchSize, timeSize, outputSize}, ArmnnType, qScale, qOffset);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    std::vector&lt;T&gt; inputVector;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    inputVector.assign(input.data(), input.data() + (batchSize * timeSize * inputSize));</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    std::vector&lt;T&gt; cellStateInVector(batchSize * numUnits, T());</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    std::vector&lt;T&gt; outputStateInVector(batchSize * outputSize, T());</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    std::vector&lt;T&gt; actualOutputStateOut(outputStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    std::vector&lt;T&gt; actualCellStateOut(cellStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    std::vector&lt;T&gt; actualOutput(outputTensorInfo.GetNumElements());</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    std::vector&lt;T&gt; outputVector;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    outputVector.assign(outputExpected.data(), outputExpected.data() + (batchSize * timeSize * outputSize));</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateInHandle =</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateInTensorInfo);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateInHandle =</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateInTensorInfo);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateOutHandle =</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateOutTensorInfo);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateOutHandle =</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateOutTensorInfo);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml">armnn::UnidirectionalSequenceLstmQueueDescriptor</a> data;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> info;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    AddInputToWorkload(data, info, outputStateInTensorInfo, outputStateInHandle.get());</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    AddInputToWorkload(data, info, cellStateInTensorInfo, cellStateInHandle.get());</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    AddOutputToWorkload(data, info, outputStateOutTensorInfo, outputStateOutHandle.get());</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    AddOutputToWorkload(data, info, cellStateOutTensorInfo, cellStateOutHandle.get());</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo4({numUnits}, constantDataType, qScale, qOffset);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo12({numUnits, 3}, constantDataType, qScale, qOffset);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo16({numUnits, 4}, constantDataType, qScale, qOffset);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    std::vector&lt;float&gt; inputToInputWeights = { -0.49536117f, -0.0556083915f, -0.102400711f,</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                               -0.117484632f, 0.3298470976f, -0.1179017122f,</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                                               0.214305695f, 0.42135173085f, 0.003878414626f,</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                                               -0.348303917f, -0.1881275477f, 0.0343011027f };</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    std::vector&lt;float&gt; inputToForgetWeights = { 0.2415594226f, 0.15400093799f, 0.4566498398f,</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                                -0.3810434485f, 0.268383264f, -0.009807467424f,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                                -0.3522925403f, -0.24275735512f, -0.28344226125f,</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                                0.13512269116f, -0.4932442977f, -0.10039821991f };</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    std::vector&lt;float&gt; inputToCellWeights = { -0.2504855627f, 0.184490025045f, -0.2480507493f,</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                                              0.386399507f, -0.259465157985f, -0.16545993089f,</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                              -0.4230232555f, 0.341664791103f, -0.18127849691f,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                              -0.2277662414f, -0.55275535589f, 0.34184026718f };</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    std::vector&lt;float&gt; inputToOutputWeights = { 0.2303854227f, 0.5218806862f, -0.4865379333f,</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                                0.53969591851f, 0.23393625035f, -0.27140527306f,</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                                0.50009280443f, 0.07511717046f, 0.3998299249f,</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                                -0.51717478049f, 0.1889653282f, -0.367323637f };</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    std::vector&lt;float&gt; recurrentToInputWeights = { -0.128009796112f, 0.1995525098f, -0.07745539397f, 0.1558421701f,</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                                   -0.265254765766f, -0.38837709614f, -0.05636804124f, 0.4259087456f,</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                                   0.17628988623f, 0.3877420127f, 0.53300309181f, -0.0959980934f,</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                                   0.00302857416f, 0.3266998827f, -0.142509296562f, -0.04433270756f };</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    std::vector&lt;float&gt; recurrentToForgetWeights = { -0.09499983487f, -0.08814888417f, -0.04834804721f, 0.1516668247f,</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                                    -0.3967529535f, -0.06463699788f, 0.4952811002f, 0.003274492938f,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                                    -0.0968840941f, 0.17928104102f, 0.0031281141592f, -0.3387276584f,</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                                    -0.3587934076f, 0.06705895066f, 0.22463923692f, 0.1961955726f };</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    std::vector&lt;float&gt; recurrentToCellWeights = { -0.21938985582f, -0.3023648226f, -0.1170005202f, -0.3509177422f,</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                                                  -0.4286288613f, 0.2726137042f, 0.09216640889f, -0.06551410215f,</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                                                  0.20453298098f, 0.2393476665f, 0.11846517771f, 0.2630801796f,</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                                                  0.3954237699f, -0.19407111404f, 0.30412107706f, -0.27342408554f };</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    std::vector&lt;float&gt; recurrentToOutputWeights = { -0.32921677827f, 0.32624614238f, -0.1388191282f, -0.17879831790f,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                                    -0.15185534954f, -0.16918526583f, -0.10087361183f, -0.5436913968f,</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                                    0.016758225858f, 0.30454617738f, -0.41493862867f, -0.005565764375f,</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                                    -0.12584099173f, -0.12319286912f, 0.2407919466f, -0.08879069983f };</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    std::vector&lt;float&gt; inputGateBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    std::vector&lt;float&gt; forgetGateBias = { 1., 1., 1., 1. };</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    std::vector&lt;float&gt; cellBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    std::vector&lt;float&gt; outputGateBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToInputWeightsTensor(tensorInfo12);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToForgetWeightsTensor(tensorInfo12);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToCellWeightsTensor(tensorInfo12);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToOutputWeightsTensor(tensorInfo12);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToInputWeightsTensor(tensorInfo16);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToForgetWeightsTensor(tensorInfo16);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToCellWeightsTensor(tensorInfo16);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToOutputWeightsTensor(tensorInfo16);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputGateBiasTensor(tensorInfo4);</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> forgetGateBiasTensor(tensorInfo4);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellBiasTensor(tensorInfo4);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> outputGateBiasTensor(tensorInfo4);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToInputWeightsTensor, inputToInputWeights.data());</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToForgetWeightsTensor, inputToForgetWeights.data());</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToCellWeightsTensor, inputToCellWeights.data());</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToOutputWeightsTensor, inputToOutputWeights.data());</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToInputWeightsTensor, recurrentToInputWeights.data());</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToForgetWeightsTensor, recurrentToForgetWeights.data());</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToCellWeightsTensor, recurrentToCellWeights.data());</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToOutputWeightsTensor, recurrentToOutputWeights.data());</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputGateBiasTensor, inputGateBias.data());</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;forgetGateBiasTensor, forgetGateBias.data());</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellBiasTensor, cellBias.data());</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;outputGateBiasTensor, outputGateBias.data());</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ab160eba2493d5fe52185c0986dcb190c">m_InputToInputWeights</a> = &amp;inputToInputWeightsTensor;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aab77f54a037658ca9b2bf9cc8a1fadf1">m_InputToForgetWeights</a> = &amp;inputToForgetWeightsTensor;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a841439e3b8dc157a7368b19c9ecb7d03">m_InputToCellWeights</a> = &amp;inputToCellWeightsTensor;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a17ba1c8bcc71a55a95b2a3913f8cb203">m_InputToOutputWeights</a> = &amp;inputToOutputWeightsTensor;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a299587d4f3fca029492700f3e2585bd8">m_RecurrentToInputWeights</a> = &amp;recurrentToInputWeightsTensor;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#adf8571dd1867ee91082bd005f94f2610">m_RecurrentToForgetWeights</a> = &amp;recurrentToForgetWeightsTensor;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac18c8b8b2039267d8282e91b4162d8aa">m_RecurrentToCellWeights</a> = &amp;recurrentToCellWeightsTensor;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a4c27716f61bb68e8ea0bd4e8389ba01a">m_RecurrentToOutputWeights</a> = &amp;recurrentToOutputWeightsTensor;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a44eb7524badcca9b2073359e3814c98b">m_InputGateBias</a> = &amp;inputGateBiasTensor;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a29fa293fffbf9c6f00cd75db1dc0a52a">m_ForgetGateBias</a> = &amp;forgetGateBiasTensor;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a6e9593869b82984de198fed27f72cdcf">m_CellBias</a> = &amp;cellBiasTensor;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a5ff4158b1b363b898d0da04c42d37ce0">m_OutputGateBias</a> = &amp;outputGateBiasTensor;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="comment">// Flags to set test configuration</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a> = 10;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a> = 0;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> = 4;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a3dcd10ca3ea2e132558b1e2814668c15">m_TimeMajor</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a>, data, info);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    outputStateInHandle-&gt;Allocate();</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    cellStateInHandle-&gt;Allocate();</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    outputStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    cellStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), inputVector.data());</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(outputStateInHandle.get(), outputStateInVector.data());</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(cellStateInHandle.get(), cellStateInVector.data());</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutputStateOut.data(), outputStateOutHandle.get());</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualCellStateOut.data(), cellStateOutHandle.get());</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutput.data(), outputHandle.get());</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 3&gt;</a>(actualOutput,</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                 outputVector,</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                                 outputHandle-&gt;GetShape(),</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                 outputTensorInfo.GetShape());</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;}</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="keyword">template</span>&lt;armnn::DataType ArmnnType, <span class="keyword">typename</span> T = armnn::ResolveType&lt;ArmnnType&gt;&gt;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 3&gt;</a></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;UnidirectionalSequenceLstmLayerFloat32TimeMajorTestImpl(</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keyword">const</span> std::vector&lt;T&gt;&amp; input,</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keyword">const</span> std::vector&lt;T&gt;&amp; outputExpected,</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&amp; inputShape,</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&amp; outputExpectedShape,</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keywordtype">float</span> qScale = 0.0f,</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    int32_t qOffset = 0,</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> constantDataType = <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>) {</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(inputShape[1]);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timeSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(inputShape[0]);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(inputShape[2]);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputSize = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(outputExpectedShape[2]);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keywordtype">unsigned</span> numUnits = outputSize;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({timeSize, batchSize, inputSize}, ArmnnType, qScale, qOffset);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateInTensorInfo({batchSize, numUnits}, ArmnnType, qScale, qOffset);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateInTensorInfo({batchSize, outputSize}, ArmnnType, qScale, qOffset);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({timeSize, batchSize, outputSize}, ArmnnType, qScale, qOffset);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    std::vector&lt;T&gt; inputVector;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    inputVector.assign(input.data(), input.data() + (batchSize * timeSize * inputSize));</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    std::vector&lt;T&gt; cellStateInVector(batchSize * numUnits, T());</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    std::vector&lt;T&gt; outputStateInVector(batchSize * outputSize, T());</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    std::vector&lt;T&gt; actualOutputStateOut(outputStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    std::vector&lt;T&gt; actualCellStateOut(cellStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    std::vector&lt;T&gt; actualOutput(outputTensorInfo.GetNumElements());</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    std::vector&lt;T&gt; outputVector;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    outputVector.assign(outputExpected.data(), outputExpected.data() + (batchSize * timeSize * outputSize));</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateInHandle =</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateInTensorInfo);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateInHandle =</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateInTensorInfo);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateOutHandle =</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateOutTensorInfo);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateOutHandle =</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateOutTensorInfo);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml">armnn::UnidirectionalSequenceLstmQueueDescriptor</a> data;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> info;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    AddInputToWorkload(data, info, outputStateInTensorInfo, outputStateInHandle.get());</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    AddInputToWorkload(data, info, cellStateInTensorInfo, cellStateInHandle.get());</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    AddOutputToWorkload(data, info, outputStateOutTensorInfo, outputStateOutHandle.get());</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    AddOutputToWorkload(data, info, cellStateOutTensorInfo, cellStateOutHandle.get());</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo4({numUnits}, constantDataType, qScale, qOffset);</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo12({numUnits, 3}, constantDataType, qScale, qOffset);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo16({numUnits, 4}, constantDataType, qScale, qOffset);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    std::vector&lt;float&gt; inputToInputWeights = { 0.27277296781539917f, 0.3813590407371521f, -0.394489049911499f,</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                                               0.2782636880874634f, -0.3793870210647583f, -0.018918335437774658f,</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                                               0.2724653482437134f, -0.19314253330230713f, -0.2947450876235962f,</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                                               -0.30253493785858154f, 0.4241350293159485f, -0.22560018301010132f };</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    std::vector&lt;float&gt; inputToForgetWeights = { -0.2667974531650543f, -0.05505800247192383f, -0.20932340621948242f,</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                                                -0.14345619082450867f, 0.09666192531585693f, -0.2604355812072754f,</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                                                -0.2681812047958374f, -0.3314584493637085f, 0.4485899806022644f,</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                                                -0.23467743396759033f, 0.5072842240333557f, -0.4192768931388855f };</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    std::vector&lt;float&gt; inputToCellWeights = { -0.15782442688941956f, -0.027530014514923096f, 0.4789854884147644f,</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                                              0.23227906227111816f, 0.28259342908859253f, -0.030095696449279785f,</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                                              0.10071521997451782f, -0.08535495400428772f, 0.18563997745513916f,</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                                              -0.3049069046974182f, -0.478048175573349f, 0.025234103202819824f };</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    std::vector&lt;float&gt; inputToOutputWeights = { -0.04584759473800659f, -0.2716066539287567f, 0.012970447540283203f,</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                                                -0.4729190170764923f, -0.37422770261764526f, 0.49352723360061646f,</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                                                0.3163864016532898f, -0.436781644821167f, -0.33074596524238586f,</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                                                -0.32885751128196716f, -0.40959352254867554f, -0.2124689817428589f };</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    std::vector&lt;float&gt; recurrentToInputWeights = { 0.23788475990f, -0.24948765337f, 0.50044941902f, 0.14431896805f,</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                                                   -0.115940228137f, -0.717082679f, -0.17208620906f, 0.17850610617f,</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                                                   -0.16702319684f, -0.11384502053f, -0.309785276245f, -0.3316611672f,</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                                                   0.52380162477f, -0.06839632987f, -0.391478359627f, -0.10756178963f };</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    std::vector&lt;float&gt; recurrentToForgetWeights = { 0.11383482068f, 0.1676601767f, -0.08550968004f, 0.03399394089f,</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                                                    0.08042152225f, -0.2133381964f, 0.05182432704f, 0.38161808255f,</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                                                    -0.5018365979f, -0.08043262364f, 0.07894329014f, -0.07547105155f,</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                                                    0.12047368288f, 0.2986997961f, 0.0485043078f, -0.13372567296f };</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    std::vector&lt;float&gt; recurrentToCellWeights = { 0.0433832928545f, 0.07587072294f, -0.120520234107f, 0.604576051f,</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                                                  -0.434353142986f, 0.009314475068f, 0.005085289478f, 0.08488202038f,</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                                                  -0.00025437487886f, 0.15245915082f, -0.1936587542f, 0.004754020f,</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                                                  -0.1582719236f, 0.3307867646f, 0.0236605107784f, 0.307716339826f };</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    std::vector&lt;float&gt; recurrentToOutputWeights = { -0.079031050201f, 0.041414566286f, -0.583727357285f, 0.1025384515f,</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                                                    -0.172372072937f, 0.09214124082f, 0.178184121827f, -0.2439443916f,</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                                                    0.104485116899f, 0.2600405514f, 0.064414866268f, 0.24141204357f,</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                                                    0.281875759363f, -0.14234502664f, 0.15126448862f, -0.24421440064f };</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    std::vector&lt;float&gt; inputGateBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    std::vector&lt;float&gt; forgetGateBias = { 1., 1., 1., 1. };</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    std::vector&lt;float&gt; cellBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    std::vector&lt;float&gt; outputGateBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToInputWeightsTensor(tensorInfo12);</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToForgetWeightsTensor(tensorInfo12);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToCellWeightsTensor(tensorInfo12);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToOutputWeightsTensor(tensorInfo12);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToInputWeightsTensor(tensorInfo16);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToForgetWeightsTensor(tensorInfo16);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToCellWeightsTensor(tensorInfo16);</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToOutputWeightsTensor(tensorInfo16);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputGateBiasTensor(tensorInfo4);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> forgetGateBiasTensor(tensorInfo4);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellBiasTensor(tensorInfo4);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> outputGateBiasTensor(tensorInfo4);</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToInputWeightsTensor, inputToInputWeights.data());</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToForgetWeightsTensor, inputToForgetWeights.data());</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToCellWeightsTensor, inputToCellWeights.data());</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToOutputWeightsTensor, inputToOutputWeights.data());</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToInputWeightsTensor, recurrentToInputWeights.data());</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToForgetWeightsTensor, recurrentToForgetWeights.data());</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToCellWeightsTensor, recurrentToCellWeights.data());</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToOutputWeightsTensor, recurrentToOutputWeights.data());</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputGateBiasTensor, inputGateBias.data());</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;forgetGateBiasTensor, forgetGateBias.data());</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellBiasTensor, cellBias.data());</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;outputGateBiasTensor, outputGateBias.data());</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ab160eba2493d5fe52185c0986dcb190c">m_InputToInputWeights</a> = &amp;inputToInputWeightsTensor;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aab77f54a037658ca9b2bf9cc8a1fadf1">m_InputToForgetWeights</a> = &amp;inputToForgetWeightsTensor;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a841439e3b8dc157a7368b19c9ecb7d03">m_InputToCellWeights</a> = &amp;inputToCellWeightsTensor;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a17ba1c8bcc71a55a95b2a3913f8cb203">m_InputToOutputWeights</a> = &amp;inputToOutputWeightsTensor;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a299587d4f3fca029492700f3e2585bd8">m_RecurrentToInputWeights</a> = &amp;recurrentToInputWeightsTensor;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#adf8571dd1867ee91082bd005f94f2610">m_RecurrentToForgetWeights</a> = &amp;recurrentToForgetWeightsTensor;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac18c8b8b2039267d8282e91b4162d8aa">m_RecurrentToCellWeights</a> = &amp;recurrentToCellWeightsTensor;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a4c27716f61bb68e8ea0bd4e8389ba01a">m_RecurrentToOutputWeights</a> = &amp;recurrentToOutputWeightsTensor;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a44eb7524badcca9b2073359e3814c98b">m_InputGateBias</a> = &amp;inputGateBiasTensor;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a29fa293fffbf9c6f00cd75db1dc0a52a">m_ForgetGateBias</a> = &amp;forgetGateBiasTensor;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a6e9593869b82984de198fed27f72cdcf">m_CellBias</a> = &amp;cellBiasTensor;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a5ff4158b1b363b898d0da04c42d37ce0">m_OutputGateBias</a> = &amp;outputGateBiasTensor;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <span class="comment">// Flags to set test configuration</span></div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a> = 10;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a> = 0;</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> = 4;</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a3dcd10ca3ea2e132558b1e2814668c15">m_TimeMajor</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a>, data, info);</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    outputStateInHandle-&gt;Allocate();</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    cellStateInHandle-&gt;Allocate();</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    outputStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    cellStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), inputVector.data());</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(outputStateInHandle.get(), outputStateInVector.data());</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(cellStateInHandle.get(), cellStateInVector.data());</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutputStateOut.data(), outputStateOutHandle.get());</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualCellStateOut.data(), cellStateOutHandle.get());</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutput.data(), outputHandle.get());</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, 3&gt;</a>(actualOutput,</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                                 outputVector,</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                                 outputHandle-&gt;GetShape(),</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                                 outputTensorInfo.GetShape());</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;}</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;} <span class="comment">// anonymous namespace</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno"><a class="line" href="_unidirectional_sequence_lstm_test_impl_8hpp.xhtml#a3f75458bc87de352d9becdfa047868de">  595</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a> <a class="code" href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#a3f75458bc87de352d9becdfa047868de">UnidirectionalSequenceLstmLayerFloat32TimeMajorSingleBatchTest</a>(</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory)</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;{</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputDesc({1, 2, 2}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    std::vector&lt;float&gt; input = {2., 3., 3., 4.};</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputDesc({1, 2, 4}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    std::vector&lt;float&gt; expectedOutput =</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                          {-0.02973187f, 0.1229473f,   0.20885126f, -0.15358765f,</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                           -0.0185422f,   0.11281417f,  0.24466537f, -0.1826292f};</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordflow">return</span> UnidirectionalSequenceLstmTimeMajorSingleBatchTestImpl&lt;armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        workloadFactory, memoryManager, tensorHandleFactory,</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        input, expectedOutput, inputDesc.GetShape(), outputDesc.GetShape());</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;}</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div><div class="line"><a name="l00613"></a><span class="lineno"><a class="line" href="_unidirectional_sequence_lstm_test_impl_8hpp.xhtml#a012c80e868a22936a96f2464262127e1">  613</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a> <a class="code" href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#a012c80e868a22936a96f2464262127e1">UnidirectionalSequenceLstmLayerFloat32BatchMajorSingleBatchTest</a>(</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory) {</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputInfo({3, 1, 3}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    std::vector&lt;float&gt; input = { 1., 2., 3., 4., 5., 4., 3., 2., 1. };</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo({3, 1, 4}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    std::vector&lt;float&gt; expectedOutput = { -0.0714901f, -0.162117f, -0.175168f, -0.0232934f,</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                                          -0.0424661f, -0.231802f, -0.513374f, -0.00680323f,</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                                          -0.0668735f, 0.204078f, -0.42765f, -0.0312321f };</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <span class="keywordflow">return</span> UnidirectionalSequenceLstmLayerFloat32TestImpl&lt;armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        workloadFactory, memoryManager, tensorHandleFactory,</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        input, expectedOutput, inputInfo.GetShape(), outputInfo.GetShape());</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;}</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno"><a class="line" href="_unidirectional_sequence_lstm_test_impl_8hpp.xhtml#ab5aedf0fbe3810773302b480ff1ef0fe">  629</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a> <a class="code" href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#ab5aedf0fbe3810773302b480ff1ef0fe">UnidirectionalSequenceLstmLayerFloat32Test</a>(</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory) {</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputInfo({3, 2, 3}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    std::vector&lt;float&gt; input = { 1., 2., 3., 4., 5., 4.,</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                                 3., 2., 1., 2., 3., 4.,</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                                 5., 4., 3., 2., 1., 2. };</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo({3, 2, 4}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    std::vector&lt;float&gt; expectedOutput = { -0.07149004f, -0.1621171f, -0.17516759f, -0.0232934225f,</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                                          -0.16810727f, -0.41412935f, -0.5498753f, -0.00803578f,</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                                          -0.06687349f, 0.204077631f, -0.4276504f, -0.03123213f,</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                                          -0.12000261f, -0.0941918f, -0.45639035f, -0.02870186f,</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                                          -0.03429216f, 0.20824050f, -0.6569892f, -0.004152651f,</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                                          -0.10493034f,  0.14210969f, -0.58347696f, -0.03297536f };</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keywordflow">return</span> UnidirectionalSequenceLstmLayerFloat32TestImpl&lt;armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        workloadFactory, memoryManager, tensorHandleFactory,</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        input, expectedOutput, inputInfo.GetShape(), outputInfo.GetShape());</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;}</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div><div class="line"><a name="l00650"></a><span class="lineno"><a class="line" href="_unidirectional_sequence_lstm_test_impl_8hpp.xhtml#a3e62d48c04adef20dc1e813544e5792f">  650</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a> <a class="code" href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#a3e62d48c04adef20dc1e813544e5792f">UnidirectionalSequenceLstmLayerFloat32TimeMajorTest</a>(</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory) {</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputInfo({2, 3, 3}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    std::vector&lt;float&gt; input = { 1., 2., 3., 4., 5., 4.,</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                                 3., 2., 1., 2., 3., 4.,</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                                 5., 4., 3., 2., 1., 2. };</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputInfo({2, 3, 4}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    std::vector&lt;float&gt; expectedOutput = { 0.135657698f, 0.124672532f, 0.0212090332f, -0.0530203655f,</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                                          0.106138252f, 0.0404792242f, 0.0151643595f, -0.00675163185f,</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                                          -0.0128514022f, 0.0644884035f, 0.0709072053f, -0.0454045124f,</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                                          0.16288602f,  0.16649379f,  0.02770456f, -0.03698075f,</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                                          0.11171641f,  0.043119f  ,  0.0762981f , -0.01228541f,</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                                          0.10439701f,  0.21439962f,  0.11919238f, -0.08390583f };</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keywordflow">return</span> UnidirectionalSequenceLstmLayerFloat32TimeMajorTestImpl&lt;armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        workloadFactory, memoryManager, tensorHandleFactory,</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        input, expectedOutput, inputInfo.GetShape(), outputInfo.GetShape());</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;}</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div><div class="line"><a name="l00671"></a><span class="lineno"><a class="line" href="_unidirectional_sequence_lstm_test_impl_8hpp.xhtml#ab8fb90e22b99c4d41ad3566fd5968829">  671</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a> <a class="code" href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#ab8fb90e22b99c4d41ad3566fd5968829">UnidirectionalSequenceLstmLayerNoCifgWithPeepholeWithProjectionTest</a>(</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory)</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;{</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 2;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timeSize = 3;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputSize = 5;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = 4;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keywordtype">unsigned</span> numUnits = 6;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({batchSize, timeSize, inputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateInTensorInfo({batchSize , numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateInTensorInfo({batchSize , outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; inputVector = { 1., 2., 3., 4., 5., 4.,</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                                             3., 2., 1., 2., 3., 4.,</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                                             5., 4., 3., 2., 1., 2.,</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                                             1., 2., 3., 4., 5., 4.};</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    std::vector&lt;float&gt; cellStateInVector(batchSize * numUnits, 0.f);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    std::vector&lt;float&gt; outputStateInVector(batchSize * outputSize, 0.f);</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    std::vector&lt;float&gt; actualOutputStateOut(outputStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    std::vector&lt;float&gt; actualCellStateOut(cellStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    std::vector&lt;float&gt; actualOutput(outputTensorInfo.GetNumElements());</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; expectedOutput = { -0.0135612f, -0.0263441f, 0.0314008f, -0.00883455f, 0.00763052f,</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                                                -0.00126877f, -0.0292959f, 0.0449957f, -0.00976195f, -0.00492338f,</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                                                -0.0175702f, -0.0431753f, 0.0597117f, -0.0169154f, 0.0142087f,</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                                                0.00472515f, -0.0196355f, 0.0342524f, -0.00407936f, -0.0253189f,</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                                                -0.00512944f, -0.0293754f, 0.0512771f, -0.0151874f, -0.0246433f,</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                                                -0.00744986f, -0.0345103f, 0.0450666f, -0.00944991f, 0.0127171f };</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateInHandle =</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateInTensorInfo);</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateInHandle =</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateInTensorInfo);</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateOutHandle =</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateOutTensorInfo);</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateOutHandle =</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateOutTensorInfo);</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml">armnn::UnidirectionalSequenceLstmQueueDescriptor</a> data;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> info;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    AddInputToWorkload(data, info, outputStateInTensorInfo, outputStateInHandle.get());</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    AddInputToWorkload(data, info, cellStateInTensorInfo, cellStateInHandle.get());</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    AddOutputToWorkload(data, info, outputStateOutTensorInfo, outputStateOutHandle.get());</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    AddOutputToWorkload(data, info, cellStateOutTensorInfo, cellStateOutHandle.get());</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo5({outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo6({numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo6x4({numUnits, inputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo6x5({numUnits, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo5x6({outputSize, numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    std::vector&lt;float&gt; inputToInputWeights = { 0.021393683f, 0.06124551f, 0.046905167f, -0.014657677f,</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                                               -0.03149463f, 0.09171803f, 0.14647801f, 0.10797193f,</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                                               -0.0057968358f, 0.0019193048f, -0.2726754f, 0.10154029f,</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                                               -0.018539885f, 0.080349885f, -0.10262385f, -0.022599787f,</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                                               -0.09121155f, -0.008675967f, -0.045206103f, -0.0821282f,</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                                               -0.008045952f, 0.015478081f, 0.055217247f, 0.038719587f };</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    std::vector&lt;float&gt; inputToForgetWeights = { -0.0018401089f, -0.004852237f, 0.03698424f, 0.014181704f,</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                                                0.028273236f, -0.016726194f, -0.05249759f, -0.10204261f,</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                                                0.00861066f, -0.040979505f, -0.009899187f, 0.01923892f,</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                                                -0.028177269f, -0.08535103f, -0.14585495f, 0.10662567f,</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                                                -0.01909731f, -0.017883534f, -0.0047269356f, -0.045103323f,</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                                                0.0030784295f, 0.076784775f, 0.07463696f, 0.094531395f};</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    std::vector&lt;float&gt; inputToCellWeights = { -0.04580283f, -0.09549462f, -0.032418985f, -0.06454633f,</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                                              -0.043528453f, 0.043018587f, -0.049152344f, -0.12418144f,</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                                              -0.078985475f, -0.07596889f, 0.019484362f, -0.11434962f,</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                                              -0.0074034138f, -0.06314844f, -0.092981495f, 0.0062155537f,</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                                              -0.025034338f, -0.0028890965f, 0.048929527f, 0.06235075f,</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                                              0.10665918f, -0.032036792f, -0.08505916f, -0.10843358f };</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    std::vector&lt;float&gt; inputToOutputWeights = { -0.0998932f, -0.07201956f, -0.052803773f, -0.15629593f,</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                                                -0.15001918f, -0.07650751f, 0.02359855f, -0.075155355f,</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                                                -0.08037709f, -0.15093534f, 0.029517552f, -0.04751393f,</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                                                0.010350531f, -0.02664851f, -0.016839722f, -0.023121163f,</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                                                0.0077019283f, 0.012851257f, -0.05040649f, -0.0129761f,</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                                                -0.021737747f, -0.038305793f, -0.06870586f, -0.01481247f };</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    std::vector&lt;float&gt; inputGateBias = { 0.02234832f, 0.14757581f, 0.18176508f,</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                                         0.10380666f, 0.053110216f, -0.06928846f };</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    std::vector&lt;float&gt; forgetGateBias = { 0.035185695f, -0.042891346f, -0.03032477f,</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                                          0.23027696f, 0.11098921f, 0.08989442f };</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    std::vector&lt;float&gt; cellBias = { -0.024379363f, 0.0055531194f, 0.23377132f,</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;                                    0.033463873f, -0.1483596f, 0.029460307f };</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    std::vector&lt;float&gt; outputGateBias = { 0.046159424f, -0.0012809046f, 0.03563469f,</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                                          0.12648113f, 0.027195795f, 0.35373217f };</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    std::vector&lt;float&gt; recurrentToInputWeights = { -0.001374326f, -0.078856036f, 0.10672688f, 0.029162422f,</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                                                   -0.11585556f, 0.02557986f, -0.13446963f, -0.035785314f,</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                                                   -0.01244275f, 0.025961924f, -0.02337298f, -0.044228926f,</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                                                   -0.055839065f, -0.046598054f, -0.010546039f, -0.06900766f,</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;                                                   0.027239809f, 0.022582639f, -0.013296484f, -0.05459212f,</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                                                   0.08981f, -0.045407712f, 0.08682226f, -0.06867011f,</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                                                   -0.14390695f, -0.02916037f, 0.000996957f, 0.091420636f,</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                                                   0.14283475f, -0.07390571f };</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    std::vector&lt;float&gt; recurrentToCellWeights = { -0.037322544f, 0.018592842f, 0.0056175636f, -0.06253426f,</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                                                   0.055647098f, -0.05713207f, -0.05626563f, 0.005559383f,</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                                                   0.03375411f, -0.025757805f, -0.088049285f, 0.06017052f,</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                                                   -0.06570978f, 0.007384076f, 0.035123326f, -0.07920549f,</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                                                   0.053676967f, 0.044480428f, -0.07663568f, 0.0071805613f,</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                                                   0.08089997f, 0.05143358f, 0.038261272f, 0.03339287f,</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                                                   -0.027673481f, 0.044746667f, 0.028349208f, 0.020090483f,</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                                                   -0.019443132f, -0.030755889f };</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    std::vector&lt;float&gt; recurrentToForgetWeights = { -0.057784554f, -0.026057621f, -0.068447545f, -0.022581743f,</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                                                    0.14811787f, 0.10826372f, 0.09471067f, 0.03987225f,</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                                                    -0.0039523416f, 0.00030638507f, 0.053185795f, 0.10572994f,</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                                                    0.08414449f, -0.022036452f, -0.00066928595f, -0.09203576f,</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                                                    0.032950465f, -0.10985798f, -0.023809856f, 0.0021431844f,</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                                                    -0.02196096f, -0.00326074f, 0.00058621005f, -0.074678116f,</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                                                    -0.06193199f, 0.055729095f, 0.03736828f, 0.020123724f,</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                                                    0.061878487f, -0.04729229f };</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    std::vector&lt;float&gt; recurrentToOutputWeights = { 0.025825322f, -0.05813119f, 0.09495884f,</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                                                    -0.045984812f,-0.01255415f, -0.0026479573f,</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;                                                    -0.08196161f, -0.054914974f, -0.0046604523f,</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                                                    -0.029587349f, -0.044576716f, -0.07480124f,</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                                                    -0.082868785f, 0.023254942f, 0.027502948f,</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                                                    -0.0039728214f, -0.08683098f, -0.08116779f,</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                                                    -0.014675607f, -0.037924774f, -0.023314456f,</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                                                    -0.007401714f, -0.09255757f, 0.029460307f,</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                                                    -0.08829125f, -0.005139627f, -0.08989442f,</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                                                    -0.0555066f, 0.13596267f, 0.025062224f };</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    std::vector&lt;float&gt; cellToInputWeights = { 0.040369894f, 0.030746894f, 0.24704495f,</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;                                              0.018586371f, -0.037586458f, -0.15312155f };</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    std::vector&lt;float&gt; cellToForgetWeights = { -0.01998659f, -0.15568835f, -0.24248174f,</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                                               -0.012770197f, 0.041331276f, -0.072311886f };</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    std::vector&lt;float&gt; cellToOutputWeights = { 0.08286371f, -0.08261836f, -0.51210177f,</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                                               0.002913762f, 0.17764764f, -0.5495371f };</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    std::vector&lt;float&gt; projectionWeights = { -0.009802181f, 0.09401916f, 0.0717386f, -0.13895074f, 0.09641832f,</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                                             0.060420845f, 0.08539281f, 0.054285463f, 0.061395317f, 0.034448683f,</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;                                             -0.042991187f, 0.019801661f, -0.16840284f, -0.015726732f, -0.23041931f,</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;                                             -0.024478018f, -0.10959692f, -0.013875541f, 0.18600968f, -0.061274476f,</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;                                             0.0138165f, -0.08160894f, -0.07661644f, 0.032372914f, 0.16169067f,</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;                                             0.22465782f, -0.03993472f, -0.004017731f, 0.08633481f, -0.28869787f };</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    std::vector&lt;float&gt; projectionBiasVector(outputSize, 0.f); <span class="comment">//{outputSize}</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToInputWeightsTensor(tensorInfo6x4);</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToForgetWeightsTensor(tensorInfo6x4);</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToCellWeightsTensor(tensorInfo6x4);</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToOutputWeightsTensor(tensorInfo6x4);</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToForgetWeightsTensor(tensorInfo6x5);</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToInputWeightsTensor(tensorInfo6x5);</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToCellWeightsTensor(tensorInfo6x5);</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToOutputWeightsTensor(tensorInfo6x5);</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToInputWeightsTensor(tensorInfo6);</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputGateBiasTensor(tensorInfo6);</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> forgetGateBiasTensor(tensorInfo6);</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellBiasTensor(tensorInfo6);</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> outputGateBiasTensor(tensorInfo6);</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToForgetWeightsTensor(tensorInfo6);</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToOutputWeightsTensor(tensorInfo6);</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> projectionWeightsTensor(tensorInfo5x6);</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> projectionBiasTensor(tensorInfo5);</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToInputWeightsTensor, inputToInputWeights.data());</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToForgetWeightsTensor, inputToForgetWeights.data());</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToCellWeightsTensor, inputToCellWeights.data());</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToOutputWeightsTensor, inputToOutputWeights.data());</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToInputWeightsTensor, recurrentToInputWeights.data());</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToForgetWeightsTensor, recurrentToForgetWeights.data());</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToCellWeightsTensor, recurrentToCellWeights.data());</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToOutputWeightsTensor, recurrentToOutputWeights.data());</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToInputWeightsTensor, cellToInputWeights.data());</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputGateBiasTensor, inputGateBias.data());</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;forgetGateBiasTensor, forgetGateBias.data());</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellBiasTensor, cellBias.data());</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;outputGateBiasTensor, outputGateBias.data());</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToForgetWeightsTensor, cellToForgetWeights.data());</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToOutputWeightsTensor, cellToOutputWeights.data());</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;projectionWeightsTensor, projectionWeights.data());</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;projectionBiasTensor, projectionBiasVector.data());</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ab160eba2493d5fe52185c0986dcb190c">m_InputToInputWeights</a> = &amp;inputToInputWeightsTensor;</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aab77f54a037658ca9b2bf9cc8a1fadf1">m_InputToForgetWeights</a> = &amp;inputToForgetWeightsTensor;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a841439e3b8dc157a7368b19c9ecb7d03">m_InputToCellWeights</a> = &amp;inputToCellWeightsTensor;</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a17ba1c8bcc71a55a95b2a3913f8cb203">m_InputToOutputWeights</a> = &amp;inputToOutputWeightsTensor;</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a299587d4f3fca029492700f3e2585bd8">m_RecurrentToInputWeights</a> = &amp;recurrentToInputWeightsTensor;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#adf8571dd1867ee91082bd005f94f2610">m_RecurrentToForgetWeights</a> = &amp;recurrentToForgetWeightsTensor;</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac18c8b8b2039267d8282e91b4162d8aa">m_RecurrentToCellWeights</a> = &amp;recurrentToCellWeightsTensor;</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a4c27716f61bb68e8ea0bd4e8389ba01a">m_RecurrentToOutputWeights</a> = &amp;recurrentToOutputWeightsTensor;</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a951b7c90b862138071a298065f16be61">m_CellToInputWeights</a> = &amp;cellToInputWeightsTensor;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a44eb7524badcca9b2073359e3814c98b">m_InputGateBias</a> = &amp;inputGateBiasTensor;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a29fa293fffbf9c6f00cd75db1dc0a52a">m_ForgetGateBias</a> = &amp;forgetGateBiasTensor;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a6e9593869b82984de198fed27f72cdcf">m_CellBias</a> = &amp;cellBiasTensor;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a5ff4158b1b363b898d0da04c42d37ce0">m_OutputGateBias</a> = &amp;outputGateBiasTensor;</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a20c10fcb26657477377d07b7b1e13120">m_CellToForgetWeights</a> = &amp;cellToForgetWeightsTensor;</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aa09f7bdb9fd0d06b6386e412a4e72dd6">m_CellToOutputWeights</a> = &amp;cellToOutputWeightsTensor;</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a3ead2ef8da00b2709d561d85996fc513">m_ProjectionWeights</a> = &amp;projectionWeightsTensor;</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac668b31de6fb0f19d4c793d5ed3c3316">m_ProjectionBias</a> = &amp;projectionBiasTensor;</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    <span class="comment">// Flags to set test configuration</span></div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> = 4;</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a3dcd10ca3ea2e132558b1e2814668c15">m_TimeMajor</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a> = 10.0f;</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;            = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a>, data, info);</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    outputStateInHandle-&gt;Allocate();</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    cellStateInHandle-&gt;Allocate();</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    outputStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    cellStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), inputVector.data());</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(outputStateInHandle.get(), outputStateInVector.data());</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(cellStateInHandle.get(), cellStateInVector.data());</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutputStateOut.data(), outputStateOutHandle.get());</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualCellStateOut.data(), cellStateOutHandle.get());</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutput.data(), outputHandle.get());</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a>(actualOutput,</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;                                     expectedOutput,</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;                                     outputHandle-&gt;GetShape(),</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;                                     outputTensorInfo.GetShape());</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;}</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;</div><div class="line"><a name="l00924"></a><span class="lineno"><a class="line" href="_unidirectional_sequence_lstm_test_impl_8hpp.xhtml#adf8faacc3aacfa0b1342d78cfe1b61fe">  924</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a> <a class="code" href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#adf8faacc3aacfa0b1342d78cfe1b61fe">UnidirectionalSequenceLstmLayerNoCifgWithPeepholeWithProjectionWithLayerNormTest</a>(</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory)</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;{</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 3;</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timeSize = 2;</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputSize = 4;</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = 3;</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    <span class="keywordtype">unsigned</span> numUnits = 5;</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({batchSize, timeSize, inputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateInTensorInfo({batchSize , numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateInTensorInfo({batchSize , outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; inputVector = { 1., 2., 3., 4., 5., 4.,</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                                             3., 2., 1., 2., 3., 4.,</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                                             5., 4., 3., 2., 1., 2. };</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    std::vector&lt;float&gt; cellStateInVector(batchSize * numUnits, 0.f);</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    std::vector&lt;float&gt; outputStateInVector(batchSize * outputSize, 0.f);</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    std::vector&lt;float&gt; actualOutputStateOut(outputStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    std::vector&lt;float&gt; actualCellStateOut(cellStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    std::vector&lt;float&gt; actualOutput(outputTensorInfo.GetNumElements());</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; expectedOutput = { 0.0642256f, 0.0343966f, 0.184122f, 0.114717f,</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;                                                0.11458f, 0.0407109f, 0.300327f, 0.174301f,</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                                                0.0864761f, 0.0362912f, 0.178635f, 0.115689f,</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                                                0.108008f, 0.0386623f, 0.273471f, 0.167115f,</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                                                0.0859545f, 0.0331481f, 0.186051f, 0.11888f,</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                                                0.106649f, 0.0276847f, 0.229863f, 0.166958f };</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateInHandle =</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateInTensorInfo);</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateInHandle =</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateInTensorInfo);</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateOutHandle =</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateOutTensorInfo);</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateOutHandle =</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateOutTensorInfo);</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    <a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml">armnn::UnidirectionalSequenceLstmQueueDescriptor</a> data;</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> info;</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    AddInputToWorkload(data, info, outputStateInTensorInfo, outputStateInHandle.get());</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    AddInputToWorkload(data, info, cellStateInTensorInfo, cellStateInHandle.get());</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    AddOutputToWorkload(data, info, outputStateOutTensorInfo, outputStateOutHandle.get());</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    AddOutputToWorkload(data, info, cellStateOutTensorInfo, cellStateOutHandle.get());</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo4({outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo5({numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo5x3({numUnits, inputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo5x4({numUnits, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo4x5({outputSize, numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    std::vector&lt;float&gt; inputToInputWeights = { -0.49536117f, -0.0556083915f, -0.102400711f,</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;                                               -0.117484632f, 0.3298470976f, -0.1179017122f,</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;                                               0.214305695f, 0.42135173085f, 0.003878414626f,</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;                                               -0.348303917f, -0.1881275477f, 0.0343011027f,</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;                                               -0.38837709614f, -0.05636804124f, 0.4259087456f};</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    std::vector&lt;float&gt; inputToForgetWeights = { 0.2415594226f, 0.15400093799f, 0.4566498398f,</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;                                                -0.3810434485f, 0.268383264f, -0.009807467424f,</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;                                                -0.3522925403f, -0.24275735512f, -0.28344226125f,</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;                                                0.13512269116f, -0.4932442977f, -0.10039821991f,</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;                                                0.2726137042f, 0.09216640889f, -0.06551410215f};</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    std::vector&lt;float&gt; inputToCellWeights = { -0.2504855627f, 0.184490025045f, -0.2480507493f,</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;                                              0.386399507f, -0.259465157985f, -0.16545993089f,</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;                                              -0.4230232555f, 0.341664791103f, -0.18127849691f,</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;                                              -0.2277662414f, -0.55275535589f, 0.34184026718f,</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;                                              0.3954237699f, -0.19407111404f, 0.30412107706f};</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    std::vector&lt;float&gt; inputToOutputWeights = { 0.2303854227f, 0.5218806862f, -0.4865379333f,</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;                                                0.53969591851f, 0.23393625035f, -0.27140527306f,</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;                                                0.50009280443f, 0.07511717046f, 0.3998299249f,</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;                                                -0.51717478049f, 0.1889653282f, -0.367323637f,</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;                                                -0.12584099173f, -0.12319286912f, 0.2407919466f};</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;    std::vector&lt;float&gt; inputGateBias{ 0.03f, 0.15f, 0.22f, 0.38f, 0.05f };</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    std::vector&lt;float&gt; forgetGateBias{ 0.1f, -0.3f, -0.2f, 0.1f, 0.4f };</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    std::vector&lt;float&gt; cellBias{ -0.05f, 0.72f, 0.25f, 0.08f, 0.1f };</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    std::vector&lt;float&gt; outputGateBias{ 0.05f, -0.01f, 0.2f, 0.1f, -0.2f };</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    std::vector&lt;float&gt; recurrentToInputWeights = { -0.128009796112f, 0.1995525098f, -0.07745539397f, 0.1558421701f,</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;                                                   -0.265254765766f, -0.38837709614f, -0.05636804124f, 0.4259087456f,</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;                                                   0.17628988623f, 0.3877420127f, 0.53300309181f, -0.0959980934f,</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;                                                   0.00302857416f, 0.3266998827f, -0.142509296562f, -0.04433270756f,</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;                                                   0.54066205f, -0.32668582f, -0.43562764f, -0.56094903f };</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    std::vector&lt;float&gt; recurrentToForgetWeights = { -0.09499983487f, -0.08814888417f, -0.04834804721f, 0.1516668247f,</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;                                                    -0.3967529535f, -0.06463699788f, 0.4952811002f, 0.003274492938f,</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;                                                    -0.0968840941f, 0.17928104102f, 0.0031281141592f, -0.3387276584f,</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;                                                    -0.3587934076f, 0.06705895066f, 0.22463923692f, 0.1961955726f,</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;                                                    0.01841056f, -0.32764608f, -0.33027974f, -0.10826075f };</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    std::vector&lt;float&gt; recurrentToCellWeights = { -0.21938985582f, -0.3023648226f, -0.1170005202f, -0.3509177422f,</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;                                                  -0.4286288613f, 0.2726137042f, 0.09216640889f, -0.06551410215f,</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;                                                  0.20453298098f, 0.2393476665f, 0.11846517771f, 0.2630801796f,</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;                                                  0.3954237699f, -0.19407111404f, 0.30412107706f, -0.27342408554f,</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;                                                  0.19069612f, -0.03026325f, -0.54532051f, 0.33003211f };</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    std::vector&lt;float&gt; recurrentToOutputWeights = { -0.32921677827f, 0.32624614238f, -0.1388191282f, -0.17879831790f,</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;                                                    -0.15185534954f, -0.16918526583f, -0.10087361183f, -0.5436913968f,</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;                                                    0.016758225858f, 0.30454617738f, -0.41493862867f, -0.005565764375f,</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;                                                    -0.12584099173f, -0.12319286912f, 0.2407919466f, -0.08879069983f,</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;                                                    0.11178309f, 0.09481031f, -0.26424935f, 0.46261835f };</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;    std::vector&lt;float&gt; cellToInputWeights { 0.05f, 0.1f, 0.25f, 0.15f, -0.02f };</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    std::vector&lt;float&gt; cellToForgetWeights { -0.02f, -0.15f, -0.25f, -0.03f, 0.15f };</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;    std::vector&lt;float&gt; cellToOutputWeights { 0.1f, -0.1f, -0.5f, 0.05f, 0.01f };</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;     std::vector&lt;float&gt; projectionWeights{ -0.1f, 0.2f, 0.01f, -0.2f,</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;                                           0.1f, 0.5f,  0.3f, 0.08f,</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;                                           0.07f, 0.2f, -0.4f,  0.2f,</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;                                           0.5f, -0.4f, 0.3f, -0.2f,</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;                                           0.3f, 0.08f, -0.07f, 0.2f};</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;    std::vector&lt;float&gt; projectionBiasVector(outputSize, 0.f); <span class="comment">//{outputSize}</span></div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;    std::vector&lt;float&gt; inputLayerNormWeights{ 0.1f, 0.2f, 0.3f, 0.5f, 0.8f };</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;    std::vector&lt;float&gt; forgetLayerNormWeights{ 0.1f, 0.2f, 0.3f, 0.5f, 0.2f };</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;    std::vector&lt;float&gt; cellLayerNormWeights{ 0.7f, 0.2f, 0.3f, 0.8f, 0.5f };</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;    std::vector&lt;float&gt; outputLayerNormWeights{ 0.6f, 0.2f, 0.2f, 0.5f, 0.1f };</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToInputWeightsTensor(tensorInfo5x3);</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToForgetWeightsTensor(tensorInfo5x3);</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToCellWeightsTensor(tensorInfo5x3);</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToOutputWeightsTensor(tensorInfo5x3);</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToForgetWeightsTensor(tensorInfo5x4);</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToInputWeightsTensor(tensorInfo5x4);</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToCellWeightsTensor(tensorInfo5x4);</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToOutputWeightsTensor(tensorInfo5x4);</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToInputWeightsTensor(tensorInfo5);</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputGateBiasTensor(tensorInfo5);</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> forgetGateBiasTensor(tensorInfo5);</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellBiasTensor(tensorInfo5);</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> outputGateBiasTensor(tensorInfo5);</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToForgetWeightsTensor(tensorInfo5);</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToOutputWeightsTensor(tensorInfo5);</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> projectionWeightsTensor(tensorInfo4x5);</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> projectionBiasTensor(tensorInfo4);</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputLayerNormWeightsTensor(tensorInfo5);</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> forgetLayerNormWeightsTensor(tensorInfo5);</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellLayerNormWeightsTensor(tensorInfo5);</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> outputLayerNormWeightsTensor(tensorInfo5);</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToInputWeightsTensor, inputToInputWeights.data());</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToForgetWeightsTensor, inputToForgetWeights.data());</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToCellWeightsTensor, inputToCellWeights.data());</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToOutputWeightsTensor, inputToOutputWeights.data());</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToInputWeightsTensor, recurrentToInputWeights.data());</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToForgetWeightsTensor, recurrentToForgetWeights.data());</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToCellWeightsTensor, recurrentToCellWeights.data());</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToOutputWeightsTensor, recurrentToOutputWeights.data());</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToInputWeightsTensor, cellToInputWeights.data());</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputGateBiasTensor, inputGateBias.data());</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;forgetGateBiasTensor, forgetGateBias.data());</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellBiasTensor, cellBias.data());</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;outputGateBiasTensor, outputGateBias.data());</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToForgetWeightsTensor, cellToForgetWeights.data());</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToOutputWeightsTensor, cellToOutputWeights.data());</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;projectionWeightsTensor, projectionWeights.data());</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;projectionBiasTensor, projectionBiasVector.data());</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputLayerNormWeightsTensor, inputLayerNormWeights.data());</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;forgetLayerNormWeightsTensor, forgetLayerNormWeights.data());</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellLayerNormWeightsTensor, cellLayerNormWeights.data());</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;outputLayerNormWeightsTensor, outputLayerNormWeights.data());</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ab160eba2493d5fe52185c0986dcb190c">m_InputToInputWeights</a> = &amp;inputToInputWeightsTensor;</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aab77f54a037658ca9b2bf9cc8a1fadf1">m_InputToForgetWeights</a> = &amp;inputToForgetWeightsTensor;</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a841439e3b8dc157a7368b19c9ecb7d03">m_InputToCellWeights</a> = &amp;inputToCellWeightsTensor;</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a17ba1c8bcc71a55a95b2a3913f8cb203">m_InputToOutputWeights</a> = &amp;inputToOutputWeightsTensor;</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a299587d4f3fca029492700f3e2585bd8">m_RecurrentToInputWeights</a> = &amp;recurrentToInputWeightsTensor;</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#adf8571dd1867ee91082bd005f94f2610">m_RecurrentToForgetWeights</a> = &amp;recurrentToForgetWeightsTensor;</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac18c8b8b2039267d8282e91b4162d8aa">m_RecurrentToCellWeights</a> = &amp;recurrentToCellWeightsTensor;</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a4c27716f61bb68e8ea0bd4e8389ba01a">m_RecurrentToOutputWeights</a> = &amp;recurrentToOutputWeightsTensor;</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a951b7c90b862138071a298065f16be61">m_CellToInputWeights</a> = &amp;cellToInputWeightsTensor;</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a44eb7524badcca9b2073359e3814c98b">m_InputGateBias</a> = &amp;inputGateBiasTensor;</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a29fa293fffbf9c6f00cd75db1dc0a52a">m_ForgetGateBias</a> = &amp;forgetGateBiasTensor;</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a6e9593869b82984de198fed27f72cdcf">m_CellBias</a> = &amp;cellBiasTensor;</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a5ff4158b1b363b898d0da04c42d37ce0">m_OutputGateBias</a> = &amp;outputGateBiasTensor;</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a20c10fcb26657477377d07b7b1e13120">m_CellToForgetWeights</a> = &amp;cellToForgetWeightsTensor;</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aa09f7bdb9fd0d06b6386e412a4e72dd6">m_CellToOutputWeights</a> = &amp;cellToOutputWeightsTensor;</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a3ead2ef8da00b2709d561d85996fc513">m_ProjectionWeights</a> = &amp;projectionWeightsTensor;</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac668b31de6fb0f19d4c793d5ed3c3316">m_ProjectionBias</a> = &amp;projectionBiasTensor;</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a1dbad32cad5c0437e1272f59fedf52ea">m_InputLayerNormWeights</a> = &amp;inputLayerNormWeightsTensor;</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ad9442e26aa79f896da5f404ab825a9c8">m_ForgetLayerNormWeights</a> = &amp;forgetLayerNormWeightsTensor;</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aeef6f1ac3efad8ec8b0a7118652b64c9">m_CellLayerNormWeights</a> = &amp;cellLayerNormWeightsTensor;</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a0e0f66bd03c88f3d2dc666f581d3cf12">m_OutputLayerNormWeights</a> = &amp;outputLayerNormWeightsTensor;</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;    <span class="comment">// Flags to set test configuration</span></div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> = 4;</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a3dcd10ca3ea2e132558b1e2814668c15">m_TimeMajor</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a> = 10.0f;</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;            = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a>, data, info);</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;    outputStateInHandle-&gt;Allocate();</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;    cellStateInHandle-&gt;Allocate();</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;    outputStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;    cellStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), inputVector.data());</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(outputStateInHandle.get(), outputStateInVector.data());</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(cellStateInHandle.get(), cellStateInVector.data());</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutputStateOut.data(), outputStateOutHandle.get());</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualCellStateOut.data(), cellStateOutHandle.get());</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutput.data(), outputHandle.get());</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a>(actualOutput,</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;                                     expectedOutput,</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;                                     outputHandle-&gt;GetShape(),</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;                                     outputTensorInfo.GetShape());</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;}</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;</div><div class="line"><a name="l01164"></a><span class="lineno"><a class="line" href="_unidirectional_sequence_lstm_test_impl_8hpp.xhtml#a5c36dcbd8e95871d57e8a50222a02494"> 1164</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a> <a class="code" href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#a5c36dcbd8e95871d57e8a50222a02494">UnidirectionalSequenceLstmWithCifgWithPeepholeNoProjectionTest</a>(</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory)</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;{</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 3;</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timeSize = 2;</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = 3;</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputSize = 4;</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;    <span class="keywordtype">unsigned</span> numUnits = outputSize;</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({batchSize, timeSize, inputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateInTensorInfo({batchSize, numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateInTensorInfo({batchSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    std::vector&lt;float&gt; inputVector = { 1., 2., 3., 4., 5., 4.,</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;                                       3., 2., 1., 2., 3., 4.,</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;                                       5., 4., 3., 2., 1., 2. };</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    std::vector&lt;float&gt; cellStateInVector(batchSize * numUnits, 0.f);</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    std::vector&lt;float&gt; outputStateInVector(batchSize * outputSize, 0.f);</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    std::vector&lt;float&gt; actualOutputStateOut(outputStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    std::vector&lt;float&gt; actualCellStateOut(cellStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;    std::vector&lt;float&gt; actualOutput(outputTensorInfo.GetNumElements());</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;    std::vector&lt;float&gt; outputVector = { -0.0129257f, -0.070531f, -0.153508f, -0.0392391f,</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;                                        -0.0300169f, -0.195717f, -0.528679f, -0.0818106f,</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;                                        -0.0332748f, 0.155429f, -0.353966f, -0.0801505f,</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;                                        -0.032312f, -0.0407911f, -0.435053f, -0.0932317f,</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;                                        -0.0108233f, 0.165584f, -0.640424f, -0.0447535f,</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;                                        -0.031675f, 0.125987f, -0.526695f, -0.110093f };</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateInHandle =</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateInTensorInfo);</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateInHandle =</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateInTensorInfo);</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateOutHandle =</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateOutTensorInfo);</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateOutHandle =</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateOutTensorInfo);</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;    <a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml">armnn::UnidirectionalSequenceLstmQueueDescriptor</a> data;</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> info;</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;    AddInputToWorkload(data, info, outputStateInTensorInfo, outputStateInHandle.get());</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    AddInputToWorkload(data, info, cellStateInTensorInfo, cellStateInHandle.get());</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;    AddOutputToWorkload(data, info, outputStateOutTensorInfo, outputStateOutHandle.get());</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    AddOutputToWorkload(data, info, cellStateOutTensorInfo, cellStateOutHandle.get());</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo4({numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo12({numUnits, 3}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo16({numUnits, 4}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;    std::vector&lt;float&gt; inputToForgetWeights = { 0.2415594226f, 0.15400093799f, 0.4566498398f,</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;                                                -0.3810434485f, 0.268383264f, -0.009807467424f,</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;                                                -0.3522925403f, -0.24275735512f, -0.28344226125f,</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;                                                0.13512269116f, -0.4932442977f, -0.10039821991f };</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    std::vector&lt;float&gt; inputToCellWeights = { -0.2504855627f, 0.184490025045f, -0.2480507493f,</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;                                              0.386399507f, -0.259465157985f, -0.16545993089f,</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;                                              -0.4230232555f, 0.341664791103f, -0.18127849691f,</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;                                              -0.2277662414f, -0.55275535589f, 0.34184026718f };</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    std::vector&lt;float&gt; inputToOutputWeights = { 0.2303854227f, 0.5218806862f, -0.4865379333f,</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;                                                0.53969591851f, 0.23393625035f, -0.27140527306f,</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;                                                0.50009280443f, 0.07511717046f, 0.3998299249f,</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;                                                -0.51717478049f, 0.1889653282f, -0.367323637f };</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    std::vector&lt;float&gt; recurrentToForgetWeights = { -0.09499983487f, -0.08814888417f, -0.04834804721f, 0.1516668247f,</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;                                                    -0.3967529535f, -0.06463699788f, 0.4952811002f, 0.003274492938f,</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;                                                    -0.0968840941f, 0.17928104102f, 0.0031281141592f, -0.3387276584f,</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;                                                    -0.3587934076f, 0.06705895066f, 0.22463923692f, 0.1961955726f };</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    std::vector&lt;float&gt; recurrentToCellWeights = { -0.21938985582f, -0.3023648226f, -0.1170005202f, -0.3509177422f,</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;                                                  -0.4286288613f, 0.2726137042f, 0.09216640889f, -0.06551410215f,</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;                                                  0.20453298098f, 0.2393476665f, 0.11846517771f, 0.2630801796f,</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;                                                  0.3954237699f, -0.19407111404f, 0.30412107706f, -0.27342408554f };</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    std::vector&lt;float&gt; recurrentToOutputWeights = { -0.32921677827f, 0.32624614238f, -0.1388191282f, -0.17879831790f,</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;                                                    -0.15185534954f, -0.16918526583f, -0.10087361183f, -0.5436913968f,</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;                                                    0.016758225858f, 0.30454617738f, -0.41493862867f, -0.005565764375f,</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;                                                    -0.12584099173f, -0.12319286912f, 0.2407919466f, -0.08879069983f };</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    std::vector&lt;float&gt; cellToForgetWeights{ 0.47485286f, -0.51955009f, -0.24458408f, 0.31544167f };</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;    std::vector&lt;float&gt; cellToOutputWeights{ -0.17135078f, 0.82760304f, 0.85573703f, -0.77109635f };</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;    std::vector&lt;float&gt; forgetGateBias = { 1., 1., 1., 1. };</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;    std::vector&lt;float&gt; cellBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    std::vector&lt;float&gt; outputGateBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToForgetWeightsTensor(tensorInfo12);</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToCellWeightsTensor(tensorInfo12);</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToOutputWeightsTensor(tensorInfo12);</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToForgetWeightsTensor(tensorInfo16);</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToCellWeightsTensor(tensorInfo16);</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToOutputWeightsTensor(tensorInfo16);</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToForgetWeightsTensor(tensorInfo4);</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToOutputWeightsTensor(tensorInfo4);</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> forgetGateBiasTensor(tensorInfo4);</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellBiasTensor(tensorInfo4);</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> outputGateBiasTensor(tensorInfo4);</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToForgetWeightsTensor, inputToForgetWeights.data());</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToCellWeightsTensor, inputToCellWeights.data());</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToOutputWeightsTensor, inputToOutputWeights.data());</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToForgetWeightsTensor, recurrentToForgetWeights.data());</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToCellWeightsTensor, recurrentToCellWeights.data());</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToOutputWeightsTensor, recurrentToOutputWeights.data());</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToForgetWeightsTensor, cellToForgetWeights.data());</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToOutputWeightsTensor, cellToOutputWeights.data());</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;forgetGateBiasTensor, forgetGateBias.data());</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellBiasTensor, cellBias.data());</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;outputGateBiasTensor, outputGateBias.data());</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aab77f54a037658ca9b2bf9cc8a1fadf1">m_InputToForgetWeights</a> = &amp;inputToForgetWeightsTensor;</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a841439e3b8dc157a7368b19c9ecb7d03">m_InputToCellWeights</a> = &amp;inputToCellWeightsTensor;</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a17ba1c8bcc71a55a95b2a3913f8cb203">m_InputToOutputWeights</a> = &amp;inputToOutputWeightsTensor;</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#adf8571dd1867ee91082bd005f94f2610">m_RecurrentToForgetWeights</a> = &amp;recurrentToForgetWeightsTensor;</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac18c8b8b2039267d8282e91b4162d8aa">m_RecurrentToCellWeights</a> = &amp;recurrentToCellWeightsTensor;</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a4c27716f61bb68e8ea0bd4e8389ba01a">m_RecurrentToOutputWeights</a> = &amp;recurrentToOutputWeightsTensor;</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a20c10fcb26657477377d07b7b1e13120">m_CellToForgetWeights</a> = &amp;cellToForgetWeightsTensor;</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aa09f7bdb9fd0d06b6386e412a4e72dd6">m_CellToOutputWeights</a> = &amp;cellToOutputWeightsTensor;</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a29fa293fffbf9c6f00cd75db1dc0a52a">m_ForgetGateBias</a> = &amp;forgetGateBiasTensor;</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a6e9593869b82984de198fed27f72cdcf">m_CellBias</a> = &amp;cellBiasTensor;</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a5ff4158b1b363b898d0da04c42d37ce0">m_OutputGateBias</a> = &amp;outputGateBiasTensor;</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;    <span class="comment">// Flags to set test configuration</span></div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a> = 10;</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a> = 0;</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> = 4;</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a3dcd10ca3ea2e132558b1e2814668c15">m_TimeMajor</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;            = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a>, data, info);</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;    outputStateInHandle-&gt;Allocate();</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;    cellStateInHandle-&gt;Allocate();</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;    outputStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;    cellStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), inputVector.data());</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(outputStateInHandle.get(), outputStateInVector.data());</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(cellStateInHandle.get(), cellStateInVector.data());</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutputStateOut.data(), outputStateOutHandle.get());</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualCellStateOut.data(), cellStateOutHandle.get());</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutput.data(), outputHandle.get());</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a>(actualOutput,</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;                                     outputVector,</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;                                     outputHandle-&gt;GetShape(),</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;                                     outputTensorInfo.GetShape());</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;}</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;</div><div class="line"><a name="l01339"></a><span class="lineno"><a class="line" href="_unidirectional_sequence_lstm_test_impl_8hpp.xhtml#a96b8e256c3e15254d98f27f291d6befb"> 1339</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a> <a class="code" href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#a96b8e256c3e15254d98f27f291d6befb">UnidirectionalSequenceLstmLayerInt8Test</a>(</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory)</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;{</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 3;</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timeSize = 2;</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = 3;</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputSize = 4;</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;    <span class="keywordtype">unsigned</span> numUnits = outputSize;</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({batchSize, timeSize, inputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateInTensorInfo({batchSize, numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateInTensorInfo({batchSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; inputVector = { 0.1f, 0.2f, 0.3f, 0.4f, 0.5f, 0.4f,</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;                                             0.3f, 0.2f, 0.1f, 0.2f, 0.3f, 0.4f,</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;                                             0.5f, 0.4f, 0.3f, 0.2f, 0.1f, 0.2f };</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;    std::vector&lt;float&gt; cellStateInVector(batchSize * numUnits, 0.f);</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;    std::vector&lt;float&gt; outputStateInVector(batchSize * outputSize, 0.f);</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;    std::vector&lt;float&gt; actualOutputStateOut(outputStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;    std::vector&lt;float&gt; actualCellStateOut(cellStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;    std::vector&lt;float&gt; actualOutput(outputTensorInfo.GetNumElements());</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; outputVector = { -0.0142517f, -0.0198845f, -0.0120569f, -0.0116868f,</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;                                              -0.0350714f, -0.0343202f, -0.047504f, -0.0569789f,</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;                                              -0.0146346f, 0.0106663f, -0.0247238f, -0.0319502f,</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;                                              -0.0294759f, -0.0129935f, -0.0444175f, -0.0444354f,</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;                                              -0.0280855f, 0.00545101f, -0.051422f, -0.0463838f,</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;                                              -0.0310702f, 0.00915739f, -0.0625207f, -0.0482648f };</div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateInHandle =</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateInTensorInfo);</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateInHandle =</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateInTensorInfo);</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateOutHandle =</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateOutTensorInfo);</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateOutHandle =</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateOutTensorInfo);</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;    <a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml">armnn::UnidirectionalSequenceLstmQueueDescriptor</a> data;</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> info;</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;    AddInputToWorkload(data, info, outputStateInTensorInfo, outputStateInHandle.get());</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    AddInputToWorkload(data, info, cellStateInTensorInfo, cellStateInHandle.get());</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;    AddOutputToWorkload(data, info, outputStateOutTensorInfo, outputStateOutHandle.get());</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;    AddOutputToWorkload(data, info, cellStateOutTensorInfo, cellStateOutHandle.get());</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNumFp({numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNumInput({numUnits, inputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>, 0.1f, 0);</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNumOutput({numUnits, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>, 0.1f, 0);</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;    std::vector&lt;int8_t&gt; inputToInputWeights = { -4, -1, -1, -2, 3, -2, 2, 4, 1, -4, -2, 3 };</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;    std::vector&lt;int8_t&gt; inputToForgetWeights = { 2, 1, 4, -4, 3, -1, -3, -2, -3, 1, -4, -1 };</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;    std::vector&lt;int8_t&gt; inputToCellWeights = { -2, 1, -2, 4, -3, -2, -4, 3, -2, -2, -6, 3 };</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;    std::vector&lt;int8_t&gt; inputToOutputWeights = { 2, 5, -4, 5, 2, -3, 5, 7, 3, -5, 1, -4 };</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;    std::vector&lt;int8_t&gt; recurrentToInputWeights = { -1, 1, -1, 1, -3, -4, -1, 4, 2, 3, 5, -1, 1, 3, -1, -1 };</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;    std::vector&lt;int8_t&gt; recurrentToForgetWeights = { -1, 1, -1, 1, -3, -4, -1, 4, 2, 3, 5, -1, 1, 3, -2, -1 };</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;    std::vector&lt;int8_t&gt; recurrentToCellWeights = { -2, -3, -1, -3, -4, 2, 1, -1, 2, 2, 1, 2, 3, -2, 3, -3 };</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;    std::vector&lt;int8_t&gt; recurrentToOutputWeights = { -3, 3, -1, -2, -2, -2, -1, -5, 1, 3, -4, -1, -1, -1, 2, -1 };</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;    std::vector&lt;float&gt; inputGateBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    std::vector&lt;float&gt; forgetGateBias = { 1., 1., 1., 1. };</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;    std::vector&lt;float&gt; cellBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;    std::vector&lt;float&gt; outputGateBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToInputWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToForgetWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToCellWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToOutputWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToInputWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToForgetWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToCellWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToOutputWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputGateBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> forgetGateBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> outputGateBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToInputWeightsTensor, inputToInputWeights.data());</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToForgetWeightsTensor, inputToForgetWeights.data());</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToCellWeightsTensor, inputToCellWeights.data());</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToOutputWeightsTensor, inputToOutputWeights.data());</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToInputWeightsTensor, recurrentToInputWeights.data());</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToForgetWeightsTensor, recurrentToForgetWeights.data());</div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToCellWeightsTensor, recurrentToCellWeights.data());</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToOutputWeightsTensor, recurrentToOutputWeights.data());</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputGateBiasTensor, inputGateBias.data());</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;forgetGateBiasTensor, forgetGateBias.data());</div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellBiasTensor, cellBias.data());</div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;outputGateBiasTensor, outputGateBias.data());</div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ab160eba2493d5fe52185c0986dcb190c">m_InputToInputWeights</a> = &amp;inputToInputWeightsTensor;</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aab77f54a037658ca9b2bf9cc8a1fadf1">m_InputToForgetWeights</a> = &amp;inputToForgetWeightsTensor;</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a841439e3b8dc157a7368b19c9ecb7d03">m_InputToCellWeights</a> = &amp;inputToCellWeightsTensor;</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a17ba1c8bcc71a55a95b2a3913f8cb203">m_InputToOutputWeights</a> = &amp;inputToOutputWeightsTensor;</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a299587d4f3fca029492700f3e2585bd8">m_RecurrentToInputWeights</a> = &amp;recurrentToInputWeightsTensor;</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#adf8571dd1867ee91082bd005f94f2610">m_RecurrentToForgetWeights</a> = &amp;recurrentToForgetWeightsTensor;</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac18c8b8b2039267d8282e91b4162d8aa">m_RecurrentToCellWeights</a> = &amp;recurrentToCellWeightsTensor;</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a4c27716f61bb68e8ea0bd4e8389ba01a">m_RecurrentToOutputWeights</a> = &amp;recurrentToOutputWeightsTensor;</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a44eb7524badcca9b2073359e3814c98b">m_InputGateBias</a> = &amp;inputGateBiasTensor;</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a29fa293fffbf9c6f00cd75db1dc0a52a">m_ForgetGateBias</a> = &amp;forgetGateBiasTensor;</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a6e9593869b82984de198fed27f72cdcf">m_CellBias</a> = &amp;cellBiasTensor;</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a5ff4158b1b363b898d0da04c42d37ce0">m_OutputGateBias</a> = &amp;outputGateBiasTensor;</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    <span class="comment">// Flags to set test configuration</span></div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a> = 10;</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a> = 0;</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> = 4;</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a3dcd10ca3ea2e132558b1e2814668c15">m_TimeMajor</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;</div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;            = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a>, data, info);</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;    outputStateInHandle-&gt;Allocate();</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;    cellStateInHandle-&gt;Allocate();</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;    outputStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;    cellStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), inputVector.data());</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(outputStateInHandle.get(), outputStateInVector.data());</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(cellStateInHandle.get(), cellStateInVector.data());</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutputStateOut.data(), outputStateOutHandle.get());</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualCellStateOut.data(), cellStateOutHandle.get());</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutput.data(), outputHandle.get());</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a>(actualOutput,</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;                                 outputVector,</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;                                 outputHandle-&gt;GetShape(),</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;                                 outputTensorInfo.GetShape());</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;}</div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;</div><div class="line"><a name="l01493"></a><span class="lineno"><a class="line" href="_unidirectional_sequence_lstm_test_impl_8hpp.xhtml#af09125829e58e0e9e05e0ecd3f1bcacb"> 1493</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a> <a class="code" href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#af09125829e58e0e9e05e0ecd3f1bcacb">UnidirectionalSequenceLstmLayerInt8TimeMajorTest</a>(</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory)</div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;{</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 3;</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timeSize = 2;</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = 3;</div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputSize = 4;</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;    <span class="keywordtype">unsigned</span> numUnits = outputSize;</div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({timeSize, batchSize, inputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateInTensorInfo({batchSize, numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateInTensorInfo({batchSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({timeSize, batchSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; inputVector = { 0.1f, 0.2f, 0.3f, 0.4f, 0.5f, 0.4f,</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;                                             0.3f, 0.2f, 0.1f, 0.2f, 0.3f, 0.4f,</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;                                             0.5f, 0.4f, 0.3f, 0.2f, 0.1f, 0.2f };</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;    std::vector&lt;float&gt; cellStateInVector(batchSize * numUnits, 0.f);</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    std::vector&lt;float&gt; outputStateInVector(batchSize * outputSize, 0.f);</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;</div><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;    std::vector&lt;float&gt; actualOutputStateOut(outputStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    std::vector&lt;float&gt; actualCellStateOut(cellStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;    std::vector&lt;float&gt; actualOutput(outputTensorInfo.GetNumElements());</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; outputVector = { -0.0142517f, -0.0198845f, -0.0120122f, -0.0116868f,</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;                                              -0.0261295f, -0.0188487f, -0.0345463f, -0.049733f,</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;                                              -0.0146346f, 0.0106663f, -0.0247238f, -0.0319502f,</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;                                              -0.0291863f, -0.0369402f, -0.0354071f, -0.0296529f,</div><div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;                                              -0.0419539f, -0.00617731f, -0.0814796f, -0.0804005f,</div><div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;                                              -0.0244737f, 0.0119905f, -0.0457527f, -0.0331862f };</div><div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateInHandle =</div><div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateInTensorInfo);</div><div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateInHandle =</div><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateInTensorInfo);</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateOutHandle =</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateOutTensorInfo);</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateOutHandle =</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateOutTensorInfo);</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;</div><div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;</div><div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;    <a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml">armnn::UnidirectionalSequenceLstmQueueDescriptor</a> data;</div><div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> info;</div><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;    AddInputToWorkload(data, info, outputStateInTensorInfo, outputStateInHandle.get());</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;    AddInputToWorkload(data, info, cellStateInTensorInfo, cellStateInHandle.get());</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;    AddOutputToWorkload(data, info, outputStateOutTensorInfo, outputStateOutHandle.get());</div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;    AddOutputToWorkload(data, info, cellStateOutTensorInfo, cellStateOutHandle.get());</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNumFp({numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNumInput({numUnits, inputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>, 0.1f, 0);</div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNumOutput({numUnits, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>, 0.1f, 0);</div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;</div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;    std::vector&lt;int8_t&gt; inputToInputWeights = { -4, -1, -1, -2, 3, -2, 2, 4, 1, -4, -2, 3 };</div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;    std::vector&lt;int8_t&gt; inputToForgetWeights = { 2, 1, 4, -4, 3, -1, -3, -2, -3, 1, -4, -1 };</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;    std::vector&lt;int8_t&gt; inputToCellWeights = { -2, 1, -2, 4, -3, -2, -4, 3, -2, -2, -6, 3 };</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;    std::vector&lt;int8_t&gt; inputToOutputWeights = { 2, 5, -4, 5, 2, -3, 5, 7, 3, -5, 1, -4 };</div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;</div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;    std::vector&lt;int8_t&gt; recurrentToInputWeights = { -1, 1, -1, 1, -3, -4, -1, 4, 2, 3, 5, -1, 1, 3, -1, -1 };</div><div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;    std::vector&lt;int8_t&gt; recurrentToForgetWeights = { -1, 1, -1, 1, -3, -4, -1, 4, 2, 3, 5, -1, 1, 3, -2, -1 };</div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;    std::vector&lt;int8_t&gt; recurrentToCellWeights = { -2, -3, -1, -3, -4, 2, 1, -1, 2, 2, 1, 2, 3, -2, 3, -3 };</div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;    std::vector&lt;int8_t&gt; recurrentToOutputWeights = { -3, 3, -1, -2, -2, -2, -1, -5, 1, 3, -4, -1, -1, -1, 2, -1 };</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;</div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;</div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;    std::vector&lt;float&gt; inputGateBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;    std::vector&lt;float&gt; forgetGateBias = { 1., 1., 1., 1. };</div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    std::vector&lt;float&gt; cellBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;    std::vector&lt;float&gt; outputGateBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;</div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToInputWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToForgetWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToCellWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToOutputWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToInputWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToForgetWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToCellWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToOutputWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputGateBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> forgetGateBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> outputGateBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;</div><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToInputWeightsTensor, inputToInputWeights.data());</div><div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToForgetWeightsTensor, inputToForgetWeights.data());</div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToCellWeightsTensor, inputToCellWeights.data());</div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToOutputWeightsTensor, inputToOutputWeights.data());</div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToInputWeightsTensor, recurrentToInputWeights.data());</div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToForgetWeightsTensor, recurrentToForgetWeights.data());</div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToCellWeightsTensor, recurrentToCellWeights.data());</div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToOutputWeightsTensor, recurrentToOutputWeights.data());</div><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputGateBiasTensor, inputGateBias.data());</div><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;forgetGateBiasTensor, forgetGateBias.data());</div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellBiasTensor, cellBias.data());</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;outputGateBiasTensor, outputGateBias.data());</div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;</div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ab160eba2493d5fe52185c0986dcb190c">m_InputToInputWeights</a> = &amp;inputToInputWeightsTensor;</div><div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aab77f54a037658ca9b2bf9cc8a1fadf1">m_InputToForgetWeights</a> = &amp;inputToForgetWeightsTensor;</div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a841439e3b8dc157a7368b19c9ecb7d03">m_InputToCellWeights</a> = &amp;inputToCellWeightsTensor;</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a17ba1c8bcc71a55a95b2a3913f8cb203">m_InputToOutputWeights</a> = &amp;inputToOutputWeightsTensor;</div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a299587d4f3fca029492700f3e2585bd8">m_RecurrentToInputWeights</a> = &amp;recurrentToInputWeightsTensor;</div><div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#adf8571dd1867ee91082bd005f94f2610">m_RecurrentToForgetWeights</a> = &amp;recurrentToForgetWeightsTensor;</div><div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac18c8b8b2039267d8282e91b4162d8aa">m_RecurrentToCellWeights</a> = &amp;recurrentToCellWeightsTensor;</div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a4c27716f61bb68e8ea0bd4e8389ba01a">m_RecurrentToOutputWeights</a> = &amp;recurrentToOutputWeightsTensor;</div><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a44eb7524badcca9b2073359e3814c98b">m_InputGateBias</a> = &amp;inputGateBiasTensor;</div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a29fa293fffbf9c6f00cd75db1dc0a52a">m_ForgetGateBias</a> = &amp;forgetGateBiasTensor;</div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a6e9593869b82984de198fed27f72cdcf">m_CellBias</a> = &amp;cellBiasTensor;</div><div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a5ff4158b1b363b898d0da04c42d37ce0">m_OutputGateBias</a> = &amp;outputGateBiasTensor;</div><div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;</div><div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;    <span class="comment">// Flags to set test configuration</span></div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a> = 10;</div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a> = 0;</div><div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> = 4;</div><div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a3dcd10ca3ea2e132558b1e2814668c15">m_TimeMajor</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;</div><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload</div><div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;            = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a>, data, info);</div><div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;    outputStateInHandle-&gt;Allocate();</div><div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;    cellStateInHandle-&gt;Allocate();</div><div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;</div><div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;    outputStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;    cellStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;</div><div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), inputVector.data());</div><div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(outputStateInHandle.get(), outputStateInVector.data());</div><div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(cellStateInHandle.get(), cellStateInVector.data());</div><div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;</div><div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;</div><div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutputStateOut.data(), outputStateOutHandle.get());</div><div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualCellStateOut.data(), cellStateOutHandle.get());</div><div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutput.data(), outputHandle.get());</div><div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;</div><div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a>(actualOutput,</div><div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;                                 outputVector,</div><div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;                                 outputHandle-&gt;GetShape(),</div><div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;                                 outputTensorInfo.GetShape());</div><div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;}</div><div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;</div><div class="line"><a name="l01647"></a><span class="lineno"><a class="line" href="_unidirectional_sequence_lstm_test_impl_8hpp.xhtml#a8a1a97bb52fc24a8d66e2c2dd98c6d9b"> 1647</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a> <a class="code" href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#a8a1a97bb52fc24a8d66e2c2dd98c6d9b">UnidirectionalSequenceLstmLayerInt8NoCifgWithPeepholeWithProjectionTest</a>(</div><div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory)</div><div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;{</div><div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 3;</div><div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timeSize = 2;</div><div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputSize = 4;</div><div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = 3;</div><div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;    <span class="keywordtype">unsigned</span> numUnits = 4;</div><div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;</div><div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({batchSize, timeSize, inputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateInTensorInfo({batchSize , numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateInTensorInfo({batchSize , outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;</div><div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; inputVector = { 0.1f, 0.2f, 0.3f, 0.4f, 0.5f, 0.4f,</div><div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;                                             0.3f, 0.2f, 0.1f, 0.2f, 0.3f, 0.4f,</div><div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;                                             0.5f, 0.4f, 0.3f, 0.2f, 0.1f, 0.2f };</div><div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;</div><div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;    std::vector&lt;float&gt; cellStateInVector(batchSize * numUnits, 0.f);</div><div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;    std::vector&lt;float&gt; outputStateInVector(batchSize * outputSize, 0.f);</div><div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;</div><div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;    std::vector&lt;float&gt; actualOutputStateOut(outputStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;    std::vector&lt;float&gt; actualCellStateOut(cellStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;    std::vector&lt;float&gt; actualOutput(outputTensorInfo.GetNumElements());</div><div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;</div><div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; expectedOutput = { 0.612103f, 1.56788f, 0.31966f, 1.42956f,</div><div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;                                                0.909718f, 3.07916f, -0.560586f, 3.8907f,</div><div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;                                                0.753671f, 1.77485f, 0.365122f, 1.60077f,</div><div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;                                                0.812644f, 2.79092f, -0.605396f, 3.61742f,</div><div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;                                                0.791857f, 1.64353f, 0.316588f, 1.55192f,</div><div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;                                                0.807265f, 2.47012f, -0.539598f, 3.25654f };</div><div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;</div><div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateInHandle =</div><div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateInTensorInfo);</div><div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateInHandle =</div><div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateInTensorInfo);</div><div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;</div><div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateOutHandle =</div><div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateOutTensorInfo);</div><div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateOutHandle =</div><div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateOutTensorInfo);</div><div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;</div><div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;    <a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml">armnn::UnidirectionalSequenceLstmQueueDescriptor</a> data;</div><div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> info;</div><div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;</div><div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;    AddInputToWorkload(data, info, outputStateInTensorInfo, outputStateInHandle.get());</div><div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;    AddInputToWorkload(data, info, cellStateInTensorInfo, cellStateInHandle.get());</div><div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;</div><div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;    AddOutputToWorkload(data, info, outputStateOutTensorInfo, outputStateOutHandle.get());</div><div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;    AddOutputToWorkload(data, info, cellStateOutTensorInfo, cellStateOutHandle.get());</div><div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;</div><div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoOut({outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNumFp({numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNum({numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>, 0.1f, 0);</div><div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNumInput({numUnits, inputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>, 0.1f, 0);</div><div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNumOutput({numUnits, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>, 0.1f, 0);</div><div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoOutNum({outputSize, numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>, 0.1f, 0);</div><div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;</div><div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;    std::vector&lt;int8_t&gt; inputToInputWeights = { -4, -1, -1, -2, 3, -2, 2, 4, 1, -4, -2, 3 };</div><div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;    std::vector&lt;int8_t&gt; inputToForgetWeights = { 2, 1, 4, -4, 3, -1, -3, -2, -3, 1, -4, -1 };</div><div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;    std::vector&lt;int8_t&gt; inputToCellWeights = { -2, 1, -2, 4, -3, -2, -4, 3, -2, -2, -6, 3 };</div><div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;    std::vector&lt;int8_t&gt; inputToOutputWeights = { 2, 5, -4, 5, 2, -3, 5, 7, 3, -5, 1, -4 };</div><div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;</div><div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;    std::vector&lt;int8_t&gt; recurrentToInputWeights = { -1, 1, -1, 1, -3, -4, -1, 4, 2, 3, 5, -1, 1, 3, -1, -1 };</div><div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;    std::vector&lt;int8_t&gt; recurrentToForgetWeights = { -1, 1, -1, 1, -3, -4, -1, 4, 2, 3, 5, -1, 1, 3, -2, -1 };</div><div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;    std::vector&lt;int8_t&gt; recurrentToCellWeights = { -2, -3, -1, -3, -4, 2, 1, -1, 2, 2, 1, 2, 3, -2, 3, -3 };</div><div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;    std::vector&lt;int8_t&gt; recurrentToOutputWeights = { -3, 3, -1, -2, -2, -2, -1, -5, 1, 3, -4, -1, -1, -1, 2, -1 };</div><div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;</div><div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;    std::vector&lt;float&gt; inputGateBias = { 0.02234832f,  0.14757581f,   0.18176508f,  0.10380666f};</div><div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;    std::vector&lt;float&gt; forgetGateBias = { 0.035185695f, -0.042891346f, -0.3032477f, 0.23027696f};</div><div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;    std::vector&lt;float&gt; cellBias = { -0.124379363f, 0.55531194f, 0.23377132f,   0.033463873f };</div><div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;    std::vector&lt;float&gt; outputGateBias = { 0.046159424f,  -0.12809046f, 0.03563469f, 0.12648113f };</div><div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;</div><div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;    std::vector&lt;int8_t&gt; cellToInputWeights = { 5, 10, 25, 15 };</div><div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;    std::vector&lt;int8_t&gt; cellToForgetWeights = { -5, 15, 25, 3 };</div><div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;    std::vector&lt;int8_t&gt; cellToOutputWeights = { 10, -10, -5, 50 };</div><div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;</div><div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;    std::vector&lt;int8_t&gt; projectionWeights = { -25, 51, 3, -5, 25, 127, 77, 20, 18, 51, -10, 51, -25, 88, 77, -13 };</div><div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;</div><div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;    std::vector&lt;float&gt; projectionBiasVector(outputSize, 0.f); <span class="comment">//{outputSize}</span></div><div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;</div><div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToInputWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToForgetWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToCellWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToOutputWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToForgetWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToInputWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToCellWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToOutputWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToInputWeightsTensor(tensorInfoNum);</div><div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputGateBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> forgetGateBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> outputGateBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToForgetWeightsTensor(tensorInfoNum);</div><div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToOutputWeightsTensor(tensorInfoNum);</div><div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> projectionWeightsTensor(tensorInfoOutNum);</div><div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> projectionBiasTensor(tensorInfoOut);</div><div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;</div><div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToInputWeightsTensor, inputToInputWeights.data());</div><div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToForgetWeightsTensor, inputToForgetWeights.data());</div><div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToCellWeightsTensor, inputToCellWeights.data());</div><div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToOutputWeightsTensor, inputToOutputWeights.data());</div><div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToInputWeightsTensor, recurrentToInputWeights.data());</div><div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToForgetWeightsTensor, recurrentToForgetWeights.data());</div><div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToCellWeightsTensor, recurrentToCellWeights.data());</div><div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToOutputWeightsTensor, recurrentToOutputWeights.data());</div><div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToInputWeightsTensor, cellToInputWeights.data());</div><div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputGateBiasTensor, inputGateBias.data());</div><div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;forgetGateBiasTensor, forgetGateBias.data());</div><div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellBiasTensor, cellBias.data());</div><div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;outputGateBiasTensor, outputGateBias.data());</div><div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToForgetWeightsTensor, cellToForgetWeights.data());</div><div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToOutputWeightsTensor, cellToOutputWeights.data());</div><div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;projectionWeightsTensor, projectionWeights.data());</div><div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;projectionBiasTensor, projectionBiasVector.data());</div><div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;</div><div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ab160eba2493d5fe52185c0986dcb190c">m_InputToInputWeights</a> = &amp;inputToInputWeightsTensor;</div><div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aab77f54a037658ca9b2bf9cc8a1fadf1">m_InputToForgetWeights</a> = &amp;inputToForgetWeightsTensor;</div><div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a841439e3b8dc157a7368b19c9ecb7d03">m_InputToCellWeights</a> = &amp;inputToCellWeightsTensor;</div><div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a17ba1c8bcc71a55a95b2a3913f8cb203">m_InputToOutputWeights</a> = &amp;inputToOutputWeightsTensor;</div><div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a299587d4f3fca029492700f3e2585bd8">m_RecurrentToInputWeights</a> = &amp;recurrentToInputWeightsTensor;</div><div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#adf8571dd1867ee91082bd005f94f2610">m_RecurrentToForgetWeights</a> = &amp;recurrentToForgetWeightsTensor;</div><div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac18c8b8b2039267d8282e91b4162d8aa">m_RecurrentToCellWeights</a> = &amp;recurrentToCellWeightsTensor;</div><div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a4c27716f61bb68e8ea0bd4e8389ba01a">m_RecurrentToOutputWeights</a> = &amp;recurrentToOutputWeightsTensor;</div><div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a951b7c90b862138071a298065f16be61">m_CellToInputWeights</a> = &amp;cellToInputWeightsTensor;</div><div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a44eb7524badcca9b2073359e3814c98b">m_InputGateBias</a> = &amp;inputGateBiasTensor;</div><div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a29fa293fffbf9c6f00cd75db1dc0a52a">m_ForgetGateBias</a> = &amp;forgetGateBiasTensor;</div><div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a6e9593869b82984de198fed27f72cdcf">m_CellBias</a> = &amp;cellBiasTensor;</div><div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a5ff4158b1b363b898d0da04c42d37ce0">m_OutputGateBias</a> = &amp;outputGateBiasTensor;</div><div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a20c10fcb26657477377d07b7b1e13120">m_CellToForgetWeights</a> = &amp;cellToForgetWeightsTensor;</div><div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aa09f7bdb9fd0d06b6386e412a4e72dd6">m_CellToOutputWeights</a> = &amp;cellToOutputWeightsTensor;</div><div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a3ead2ef8da00b2709d561d85996fc513">m_ProjectionWeights</a> = &amp;projectionWeightsTensor;</div><div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac668b31de6fb0f19d4c793d5ed3c3316">m_ProjectionBias</a> = &amp;projectionBiasTensor;</div><div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;</div><div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;    <span class="comment">// Flags to set test configuration</span></div><div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> = 4;</div><div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a3dcd10ca3ea2e132558b1e2814668c15">m_TimeMajor</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a> = 10.0f;</div><div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;</div><div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;</div><div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload</div><div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;            = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a>, data, info);</div><div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;    outputStateInHandle-&gt;Allocate();</div><div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;    cellStateInHandle-&gt;Allocate();</div><div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;</div><div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;    outputStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;    cellStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;</div><div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), inputVector.data());</div><div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(outputStateInHandle.get(), outputStateInVector.data());</div><div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(cellStateInHandle.get(), cellStateInVector.data());</div><div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;</div><div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;</div><div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutputStateOut.data(), outputStateOutHandle.get());</div><div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualCellStateOut.data(), cellStateOutHandle.get());</div><div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutput.data(), outputHandle.get());</div><div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;</div><div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a>(actualOutput,</div><div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;                                     expectedOutput,</div><div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;                                     outputHandle-&gt;GetShape(),</div><div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;                                     outputTensorInfo.GetShape());</div><div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;}</div><div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;</div><div class="line"><a name="l01827"></a><span class="lineno"><a class="line" href="_unidirectional_sequence_lstm_test_impl_8hpp.xhtml#af7d1e03806f56e8e8e1444f16d735af5"> 1827</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a> <a class="code" href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#af7d1e03806f56e8e8e1444f16d735af5">UnidirectionalSequenceLstmLayerInt8NoCifgWithPeepholeWithProjectionWithLayerNormTest</a>(</div><div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory)</div><div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;{</div><div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 3;</div><div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timeSize = 2;</div><div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputSize = 4;</div><div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = 3;</div><div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;    <span class="keywordtype">unsigned</span> numUnits = 5;</div><div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;</div><div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({batchSize, timeSize, inputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateInTensorInfo({batchSize , numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateInTensorInfo({batchSize , outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;</div><div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; inputVector = { 1., 8., 3., 4., 5., 4.,</div><div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;                                             3., 2., 1., 2., 3., 4.,</div><div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;                                             5., 4., 3., 2., 1., 2. };</div><div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;</div><div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;    std::vector&lt;float&gt; cellStateInVector(batchSize * numUnits, 0.f);</div><div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;    std::vector&lt;float&gt; outputStateInVector(batchSize * outputSize, 0.f);</div><div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;</div><div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;    std::vector&lt;float&gt; actualOutputStateOut(outputStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;    std::vector&lt;float&gt; actualCellStateOut(cellStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;    std::vector&lt;float&gt; actualOutput(outputTensorInfo.GetNumElements());</div><div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;</div><div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; expectedOutput = { 0.0471276f, 0.0168155f, 0.0789885f, 0.16550f,</div><div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;                                                0.0643133f, -0.0400722f, 0.100593f, 0.197722f,</div><div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;                                                0.0465562f, -0.0600682f, 0.0622087f, 0.115053f,</div><div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;                                                0.056287f, -0.0566218f, 0.0856832f, 0.148484f,</div><div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;                                                0.0457859f, -0.0588112f, 0.0623636f, 0.114333f,</div><div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;                                                0.0509271f, -0.0754262f, 0.058600f, 0.0801288f };</div><div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;</div><div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateInHandle =</div><div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateInTensorInfo);</div><div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateInHandle =</div><div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateInTensorInfo);</div><div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;</div><div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateOutHandle =</div><div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateOutTensorInfo);</div><div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateOutHandle =</div><div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;            tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateOutTensorInfo);</div><div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;</div><div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;    <a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml">armnn::UnidirectionalSequenceLstmQueueDescriptor</a> data;</div><div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> info;</div><div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;</div><div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;    AddInputToWorkload(data, info, outputStateInTensorInfo, outputStateInHandle.get());</div><div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;    AddInputToWorkload(data, info, cellStateInTensorInfo, cellStateInHandle.get());</div><div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;</div><div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;    AddOutputToWorkload(data, info, outputStateOutTensorInfo, outputStateOutHandle.get());</div><div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;    AddOutputToWorkload(data, info, cellStateOutTensorInfo, cellStateOutHandle.get());</div><div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;</div><div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoOut({outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNumFp({numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNum({numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>, 0.1f, 0);</div><div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNumInput({numUnits, inputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>, 0.1f, 0);</div><div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNumOutput({numUnits, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>, 0.1f, 0);</div><div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoOutNum({outputSize, numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>, 0.1f, 0);</div><div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;</div><div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;    std::vector&lt;int8_t&gt; inputToInputWeights = { -4, -1, -1, -2, 3, -2, 2, 4, 1, -4, -2, 3, 2, 2, -4 };</div><div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;    std::vector&lt;int8_t&gt; inputToForgetWeights = { 2, 1, 4, -4, 3, -1, -3, -2, -3, 1, -4, -1, -3, -2, -4 };</div><div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;    std::vector&lt;int8_t&gt; inputToCellWeights = { -2, 1, -2, 4, -3, -2, -4, 3, -2, -2, -6, 3, 2, 5, -4 };</div><div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;    std::vector&lt;int8_t&gt; inputToOutputWeights = { 2, 5, -4, 5, 2, -3, 5, 7, 3, -5, 1, -4, -4, -1, -1 };</div><div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;</div><div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;    std::vector&lt;float&gt; inputGateBias = { 0.03f, 0.15f, 0.22f, 0.38f, 0.05f };</div><div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;    std::vector&lt;float&gt; forgetGateBias = { 0.1f, -0.3f, -0.2f, 0.1f, 0.4f };</div><div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;    std::vector&lt;float&gt; cellBias = { -0.05f, 0.72f, 0.25f, 0.08f, 0.1f };</div><div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;    std::vector&lt;float&gt; outputGateBias = { 0.05f, -0.01f, 0.2f, 0.1f, -0.2f };</div><div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;</div><div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;    std::vector&lt;int8_t&gt; recurrentToInputWeights = { -1, 1, -1, 1, -3, -4, -1, 4, 2, 3,</div><div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;                                                    5, -1, 1, 3, -1, -1, -1, 4, 2, 3 };</div><div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;</div><div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;    std::vector&lt;int8_t&gt; recurrentToForgetWeights = { -1, 1, -1, 1, -3, -4, -1, 4, 2, 3,</div><div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;                                                     5, -1, 1, 3, -2, -1, -1, 2, 2, 1 };</div><div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;</div><div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;    std::vector&lt;int8_t&gt; recurrentToCellWeights = { -2, -3, -1, -3, -4, 2, 1, -1, 2, 2,</div><div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;                                                   1, 2, 3, -2, 3, -3,  -1, -5, 1, 3 };</div><div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;</div><div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;    std::vector&lt;int8_t&gt; recurrentToOutputWeights = { -3, 3, -1, -2, -2, -2, -1, -5, 1, 3,</div><div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;                                                     -4, -1, -1, -1, 2, -1, 5, 1, -3, -4 };</div><div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;</div><div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;    std::vector&lt;int8_t&gt; cellToInputWeights = { 5, 3, 8, -5, 2 };</div><div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;    std::vector&lt;int8_t&gt; cellToForgetWeights = { -2, -7, 5, -3, 4 };</div><div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;    std::vector&lt;int8_t&gt; cellToOutputWeights = { 9, -10 , -5, 5, 1 };</div><div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;</div><div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;    std::vector&lt;int8_t&gt; projectionWeights = { -1, 2, 1, -2, 1, 5, 3, 8, 7, 2,</div><div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;                                              -4, 2, 5, -4, 3, -2, 3, 8, -7, 2 };</div><div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;</div><div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;    std::vector&lt;float&gt; projectionBiasVector(outputSize, 0.f); <span class="comment">//{outputSize}</span></div><div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;</div><div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;    std::vector&lt;float&gt; inputLayerNormWeights = { 0.1f, 0.2f, -0.3f, -0.1f, 0.5f };</div><div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;    std::vector&lt;float&gt; forgetLayerNormWeights = { -0.1f, 0.2f, 0.3f, 0.5f, 0.2f };</div><div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;    std::vector&lt;float&gt; cellLayerNormWeights = { 0.5f, 0.2f, 0.3f, 0.4f, -0.5f };</div><div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160;    std::vector&lt;float&gt; outputLayerNormWeights = { 0.6f, -0.2f, -0.2f, 0.5f, 0.1f };</div><div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;</div><div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToInputWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToForgetWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToCellWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToOutputWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToForgetWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToInputWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToCellWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToOutputWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToInputWeightsTensor(tensorInfoNum);</div><div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputGateBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> forgetGateBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> outputGateBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToForgetWeightsTensor(tensorInfoNum);</div><div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToOutputWeightsTensor(tensorInfoNum);</div><div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> projectionWeightsTensor(tensorInfoOutNum);</div><div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> projectionBiasTensor(tensorInfoOut);</div><div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;</div><div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputLayerNormWeightsTensor(tensorInfoNumFp);</div><div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> forgetLayerNormWeightsTensor(tensorInfoNumFp);</div><div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellLayerNormWeightsTensor(tensorInfoNumFp);</div><div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> outputLayerNormWeightsTensor(tensorInfoNumFp);</div><div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;</div><div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToInputWeightsTensor, inputToInputWeights.data());</div><div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToForgetWeightsTensor, inputToForgetWeights.data());</div><div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToCellWeightsTensor, inputToCellWeights.data());</div><div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToOutputWeightsTensor, inputToOutputWeights.data());</div><div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToInputWeightsTensor, recurrentToInputWeights.data());</div><div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToForgetWeightsTensor, recurrentToForgetWeights.data());</div><div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToCellWeightsTensor, recurrentToCellWeights.data());</div><div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToOutputWeightsTensor, recurrentToOutputWeights.data());</div><div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToInputWeightsTensor, cellToInputWeights.data());</div><div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputGateBiasTensor, inputGateBias.data());</div><div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;forgetGateBiasTensor, forgetGateBias.data());</div><div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellBiasTensor, cellBias.data());</div><div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;outputGateBiasTensor, outputGateBias.data());</div><div class="line"><a name="l01966"></a><span class="lineno"> 1966</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToForgetWeightsTensor, cellToForgetWeights.data());</div><div class="line"><a name="l01967"></a><span class="lineno"> 1967</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToOutputWeightsTensor, cellToOutputWeights.data());</div><div class="line"><a name="l01968"></a><span class="lineno"> 1968</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;projectionWeightsTensor, projectionWeights.data());</div><div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;projectionBiasTensor, projectionBiasVector.data());</div><div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;</div><div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputLayerNormWeightsTensor, inputLayerNormWeights.data());</div><div class="line"><a name="l01972"></a><span class="lineno"> 1972</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;forgetLayerNormWeightsTensor, forgetLayerNormWeights.data());</div><div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellLayerNormWeightsTensor, cellLayerNormWeights.data());</div><div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;outputLayerNormWeightsTensor, outputLayerNormWeights.data());</div><div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;</div><div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ab160eba2493d5fe52185c0986dcb190c">m_InputToInputWeights</a> = &amp;inputToInputWeightsTensor;</div><div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aab77f54a037658ca9b2bf9cc8a1fadf1">m_InputToForgetWeights</a> = &amp;inputToForgetWeightsTensor;</div><div class="line"><a name="l01978"></a><span class="lineno"> 1978</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a841439e3b8dc157a7368b19c9ecb7d03">m_InputToCellWeights</a> = &amp;inputToCellWeightsTensor;</div><div class="line"><a name="l01979"></a><span class="lineno"> 1979</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a17ba1c8bcc71a55a95b2a3913f8cb203">m_InputToOutputWeights</a> = &amp;inputToOutputWeightsTensor;</div><div class="line"><a name="l01980"></a><span class="lineno"> 1980</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a299587d4f3fca029492700f3e2585bd8">m_RecurrentToInputWeights</a> = &amp;recurrentToInputWeightsTensor;</div><div class="line"><a name="l01981"></a><span class="lineno"> 1981</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#adf8571dd1867ee91082bd005f94f2610">m_RecurrentToForgetWeights</a> = &amp;recurrentToForgetWeightsTensor;</div><div class="line"><a name="l01982"></a><span class="lineno"> 1982</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac18c8b8b2039267d8282e91b4162d8aa">m_RecurrentToCellWeights</a> = &amp;recurrentToCellWeightsTensor;</div><div class="line"><a name="l01983"></a><span class="lineno"> 1983</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a4c27716f61bb68e8ea0bd4e8389ba01a">m_RecurrentToOutputWeights</a> = &amp;recurrentToOutputWeightsTensor;</div><div class="line"><a name="l01984"></a><span class="lineno"> 1984</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a951b7c90b862138071a298065f16be61">m_CellToInputWeights</a> = &amp;cellToInputWeightsTensor;</div><div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a44eb7524badcca9b2073359e3814c98b">m_InputGateBias</a> = &amp;inputGateBiasTensor;</div><div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a29fa293fffbf9c6f00cd75db1dc0a52a">m_ForgetGateBias</a> = &amp;forgetGateBiasTensor;</div><div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a6e9593869b82984de198fed27f72cdcf">m_CellBias</a> = &amp;cellBiasTensor;</div><div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a5ff4158b1b363b898d0da04c42d37ce0">m_OutputGateBias</a> = &amp;outputGateBiasTensor;</div><div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a20c10fcb26657477377d07b7b1e13120">m_CellToForgetWeights</a> = &amp;cellToForgetWeightsTensor;</div><div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aa09f7bdb9fd0d06b6386e412a4e72dd6">m_CellToOutputWeights</a> = &amp;cellToOutputWeightsTensor;</div><div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a3ead2ef8da00b2709d561d85996fc513">m_ProjectionWeights</a> = &amp;projectionWeightsTensor;</div><div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac668b31de6fb0f19d4c793d5ed3c3316">m_ProjectionBias</a> = &amp;projectionBiasTensor;</div><div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;</div><div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a1dbad32cad5c0437e1272f59fedf52ea">m_InputLayerNormWeights</a> = &amp;inputLayerNormWeightsTensor;</div><div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ad9442e26aa79f896da5f404ab825a9c8">m_ForgetLayerNormWeights</a> = &amp;forgetLayerNormWeightsTensor;</div><div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aeef6f1ac3efad8ec8b0a7118652b64c9">m_CellLayerNormWeights</a> = &amp;cellLayerNormWeightsTensor;</div><div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a0e0f66bd03c88f3d2dc666f581d3cf12">m_OutputLayerNormWeights</a> = &amp;outputLayerNormWeightsTensor;</div><div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;</div><div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;    <span class="comment">// Flags to set test configuration</span></div><div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> = 4;</div><div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l02003"></a><span class="lineno"> 2003</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l02004"></a><span class="lineno"> 2004</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">m_LayerNormEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l02005"></a><span class="lineno"> 2005</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a3dcd10ca3ea2e132558b1e2814668c15">m_TimeMajor</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a> = 10.0f;</div><div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160;</div><div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload</div><div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;            = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a>, data, info);</div><div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;    outputStateInHandle-&gt;Allocate();</div><div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;    cellStateInHandle-&gt;Allocate();</div><div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;</div><div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;    outputStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;    cellStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160;</div><div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), inputVector.data());</div><div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(outputStateInHandle.get(), outputStateInVector.data());</div><div class="line"><a name="l02020"></a><span class="lineno"> 2020</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(cellStateInHandle.get(), cellStateInVector.data());</div><div class="line"><a name="l02021"></a><span class="lineno"> 2021</span>&#160;</div><div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;</div><div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutputStateOut.data(), outputStateOutHandle.get());</div><div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualCellStateOut.data(), cellStateOutHandle.get());</div><div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutput.data(), outputHandle.get());</div><div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160;</div><div class="line"><a name="l02028"></a><span class="lineno"> 2028</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a>(actualOutput,</div><div class="line"><a name="l02029"></a><span class="lineno"> 2029</span>&#160;                                     expectedOutput,</div><div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;                                     outputHandle-&gt;GetShape(),</div><div class="line"><a name="l02031"></a><span class="lineno"> 2031</span>&#160;                                     outputTensorInfo.GetShape());</div><div class="line"><a name="l02032"></a><span class="lineno"> 2032</span>&#160;}</div><div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;</div><div class="line"><a name="l02034"></a><span class="lineno"><a class="line" href="_unidirectional_sequence_lstm_test_impl_8hpp.xhtml#a45a379eda493e31f0f34de4aa69c7b65"> 2034</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a> <a class="code" href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#a45a379eda493e31f0f34de4aa69c7b65">UnidirectionalSequenceLstmInt8WithCifgWithPeepholeNoProjectionTest</a>(</div><div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160;    <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l02036"></a><span class="lineno"> 2036</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l02037"></a><span class="lineno"> 2037</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory)</div><div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160;{</div><div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(memoryManager);</div><div class="line"><a name="l02040"></a><span class="lineno"> 2040</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchSize = 3;</div><div class="line"><a name="l02041"></a><span class="lineno"> 2041</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> timeSize = 2;</div><div class="line"><a name="l02042"></a><span class="lineno"> 2042</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputSize = 3;</div><div class="line"><a name="l02043"></a><span class="lineno"> 2043</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputSize = 4;</div><div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160;    <span class="keywordtype">unsigned</span> numUnits = outputSize;</div><div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;</div><div class="line"><a name="l02046"></a><span class="lineno"> 2046</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo({batchSize, timeSize, inputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l02047"></a><span class="lineno"> 2047</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateInTensorInfo({batchSize, numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l02048"></a><span class="lineno"> 2048</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateInTensorInfo({batchSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l02049"></a><span class="lineno"> 2049</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l02050"></a><span class="lineno"> 2050</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> cellStateOutTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo({batchSize, timeSize, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;</div><div class="line"><a name="l02053"></a><span class="lineno"> 2053</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; inputVector = { 0.1f, 0.2f, 0.3f, 0.4f, 0.5f, 0.4f,</div><div class="line"><a name="l02054"></a><span class="lineno"> 2054</span>&#160;                                             0.3f, 0.2f, 0.1f, 0.2f, 0.3f, 0.4f,</div><div class="line"><a name="l02055"></a><span class="lineno"> 2055</span>&#160;                                             0.5f, 0.4f, 0.3f, 0.2f, 0.1f, 0.2f };</div><div class="line"><a name="l02056"></a><span class="lineno"> 2056</span>&#160;</div><div class="line"><a name="l02057"></a><span class="lineno"> 2057</span>&#160;    std::vector&lt;float&gt; cellStateInVector(batchSize * numUnits, 0.f);</div><div class="line"><a name="l02058"></a><span class="lineno"> 2058</span>&#160;    std::vector&lt;float&gt; outputStateInVector(batchSize * outputSize, 0.f);</div><div class="line"><a name="l02059"></a><span class="lineno"> 2059</span>&#160;</div><div class="line"><a name="l02060"></a><span class="lineno"> 2060</span>&#160;    std::vector&lt;float&gt; actualOutputStateOut(outputStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l02061"></a><span class="lineno"> 2061</span>&#160;    std::vector&lt;float&gt; actualCellStateOut(cellStateOutTensorInfo.GetNumElements());</div><div class="line"><a name="l02062"></a><span class="lineno"> 2062</span>&#160;    std::vector&lt;float&gt; actualOutput(outputTensorInfo.GetNumElements());</div><div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;</div><div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; outputVector = { -0.0072104f, -0.00991171f, -0.00650478f, -0.00713055f,</div><div class="line"><a name="l02065"></a><span class="lineno"> 2065</span>&#160;                                              -0.0191782f, -0.0161269f, -0.0233683f, -0.054299f,</div><div class="line"><a name="l02066"></a><span class="lineno"> 2066</span>&#160;                                              -0.00783725f, 0.00635271f, -0.0126718f, -0.022613f,</div><div class="line"><a name="l02067"></a><span class="lineno"> 2067</span>&#160;                                              -0.0161351f, -0.00775868f, -0.021054f, -0.0339778f,</div><div class="line"><a name="l02068"></a><span class="lineno"> 2068</span>&#160;                                              -0.0146392f, 0.00330261f, -0.0258733f, -0.0407797f,</div><div class="line"><a name="l02069"></a><span class="lineno"> 2069</span>&#160;                                              -0.0174297f, 0.0050105f, -0.0266275f, -0.0362564f };</div><div class="line"><a name="l02070"></a><span class="lineno"> 2070</span>&#160;</div><div class="line"><a name="l02071"></a><span class="lineno"> 2071</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo);</div><div class="line"><a name="l02072"></a><span class="lineno"> 2072</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateInHandle =</div><div class="line"><a name="l02073"></a><span class="lineno"> 2073</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateInTensorInfo);</div><div class="line"><a name="l02074"></a><span class="lineno"> 2074</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateInHandle =</div><div class="line"><a name="l02075"></a><span class="lineno"> 2075</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateInTensorInfo);</div><div class="line"><a name="l02076"></a><span class="lineno"> 2076</span>&#160;</div><div class="line"><a name="l02077"></a><span class="lineno"> 2077</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputStateOutHandle =</div><div class="line"><a name="l02078"></a><span class="lineno"> 2078</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputStateOutTensorInfo);</div><div class="line"><a name="l02079"></a><span class="lineno"> 2079</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; cellStateOutHandle =</div><div class="line"><a name="l02080"></a><span class="lineno"> 2080</span>&#160;        tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(cellStateOutTensorInfo);</div><div class="line"><a name="l02081"></a><span class="lineno"> 2081</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l02082"></a><span class="lineno"> 2082</span>&#160;</div><div class="line"><a name="l02083"></a><span class="lineno"> 2083</span>&#160;    <a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml">armnn::UnidirectionalSequenceLstmQueueDescriptor</a> data;</div><div class="line"><a name="l02084"></a><span class="lineno"> 2084</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> info;</div><div class="line"><a name="l02085"></a><span class="lineno"> 2085</span>&#160;</div><div class="line"><a name="l02086"></a><span class="lineno"> 2086</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo, inputHandle.get());</div><div class="line"><a name="l02087"></a><span class="lineno"> 2087</span>&#160;    AddInputToWorkload(data, info, outputStateInTensorInfo, outputStateInHandle.get());</div><div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;    AddInputToWorkload(data, info, cellStateInTensorInfo, cellStateInHandle.get());</div><div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;</div><div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160;    AddOutputToWorkload(data, info, outputStateOutTensorInfo, outputStateOutHandle.get());</div><div class="line"><a name="l02091"></a><span class="lineno"> 2091</span>&#160;    AddOutputToWorkload(data, info, cellStateOutTensorInfo, cellStateOutHandle.get());</div><div class="line"><a name="l02092"></a><span class="lineno"> 2092</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;</div><div class="line"><a name="l02094"></a><span class="lineno"> 2094</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNumFp({numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>);</div><div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNum({numUnits}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>, 0.1f, 0);</div><div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNumInput({numUnits, inputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>, 0.1f, 0);</div><div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfoNumOutput({numUnits, outputSize}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>, 0.1f, 0);</div><div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;</div><div class="line"><a name="l02099"></a><span class="lineno"> 2099</span>&#160;    std::vector&lt;int8_t&gt; inputToForgetWeights = { 2, 1, 4, -4, 3, -1, -3, -2, -3, 1, -4, -1 };</div><div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;    std::vector&lt;int8_t&gt; inputToCellWeights = { -2, 1, -2, 4, -3, -2, -4, 3, -2, -2, -6, 3 };</div><div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;    std::vector&lt;int8_t&gt; inputToOutputWeights = { 2, 5, -4, 5, 2, -3, 5, 7, 3, -5, 1, -4 };</div><div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;</div><div class="line"><a name="l02103"></a><span class="lineno"> 2103</span>&#160;    std::vector&lt;int8_t&gt; recurrentToForgetWeights = { -1, 1, -1, 1, -3, -4, -1, 4, 2, 3, 5, -1, 1, 3, -2, -1 };</div><div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;    std::vector&lt;int8_t&gt; recurrentToCellWeights = { -2, -3, -1, -3, -4, 2, 1, -1, 2, 2, 1, 2, 3, -2, 3, -3 };</div><div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;    std::vector&lt;int8_t&gt; recurrentToOutputWeights = { -3, 3, -1, -2, -2, -2, -1, -5, 1, 3, -4, -1, -1, -1, 2, -1 };</div><div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;</div><div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;    std::vector&lt;int8_t&gt; cellToForgetWeights = { 47, -52, -24, 31 };</div><div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;    std::vector&lt;int8_t&gt; cellToOutputWeights = { -17, 82, 85, -77 };</div><div class="line"><a name="l02109"></a><span class="lineno"> 2109</span>&#160;</div><div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;    std::vector&lt;float&gt; forgetGateBias = { 1., 1., 1., 1. };</div><div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;    std::vector&lt;float&gt; cellBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160;    std::vector&lt;float&gt; outputGateBias = { 0., 0., 0., 0. };</div><div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;</div><div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToForgetWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l02115"></a><span class="lineno"> 2115</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToCellWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l02116"></a><span class="lineno"> 2116</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> inputToOutputWeightsTensor(tensorInfoNumInput);</div><div class="line"><a name="l02117"></a><span class="lineno"> 2117</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToForgetWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToCellWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> recurrentToOutputWeightsTensor(tensorInfoNumOutput);</div><div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToForgetWeightsTensor(tensorInfoNum);</div><div class="line"><a name="l02121"></a><span class="lineno"> 2121</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellToOutputWeightsTensor(tensorInfoNum);</div><div class="line"><a name="l02122"></a><span class="lineno"> 2122</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> forgetGateBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> cellBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a> outputGateBiasTensor(tensorInfoNumFp);</div><div class="line"><a name="l02125"></a><span class="lineno"> 2125</span>&#160;</div><div class="line"><a name="l02126"></a><span class="lineno"> 2126</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToForgetWeightsTensor, inputToForgetWeights.data());</div><div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToCellWeightsTensor, inputToCellWeights.data());</div><div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;inputToOutputWeightsTensor, inputToOutputWeights.data());</div><div class="line"><a name="l02129"></a><span class="lineno"> 2129</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToForgetWeightsTensor, recurrentToForgetWeights.data());</div><div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToCellWeightsTensor, recurrentToCellWeights.data());</div><div class="line"><a name="l02131"></a><span class="lineno"> 2131</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;recurrentToOutputWeightsTensor, recurrentToOutputWeights.data());</div><div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToForgetWeightsTensor, cellToForgetWeights.data());</div><div class="line"><a name="l02133"></a><span class="lineno"> 2133</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellToOutputWeightsTensor, cellToOutputWeights.data());</div><div class="line"><a name="l02134"></a><span class="lineno"> 2134</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;forgetGateBiasTensor, forgetGateBias.data());</div><div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;cellBiasTensor, cellBias.data());</div><div class="line"><a name="l02136"></a><span class="lineno"> 2136</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;outputGateBiasTensor, outputGateBias.data());</div><div class="line"><a name="l02137"></a><span class="lineno"> 2137</span>&#160;</div><div class="line"><a name="l02138"></a><span class="lineno"> 2138</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aab77f54a037658ca9b2bf9cc8a1fadf1">m_InputToForgetWeights</a> = &amp;inputToForgetWeightsTensor;</div><div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a841439e3b8dc157a7368b19c9ecb7d03">m_InputToCellWeights</a> = &amp;inputToCellWeightsTensor;</div><div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a17ba1c8bcc71a55a95b2a3913f8cb203">m_InputToOutputWeights</a> = &amp;inputToOutputWeightsTensor;</div><div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#adf8571dd1867ee91082bd005f94f2610">m_RecurrentToForgetWeights</a> = &amp;recurrentToForgetWeightsTensor;</div><div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac18c8b8b2039267d8282e91b4162d8aa">m_RecurrentToCellWeights</a> = &amp;recurrentToCellWeightsTensor;</div><div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a4c27716f61bb68e8ea0bd4e8389ba01a">m_RecurrentToOutputWeights</a> = &amp;recurrentToOutputWeightsTensor;</div><div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a20c10fcb26657477377d07b7b1e13120">m_CellToForgetWeights</a> = &amp;cellToForgetWeightsTensor;</div><div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aa09f7bdb9fd0d06b6386e412a4e72dd6">m_CellToOutputWeights</a> = &amp;cellToOutputWeightsTensor;</div><div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a29fa293fffbf9c6f00cd75db1dc0a52a">m_ForgetGateBias</a> = &amp;forgetGateBiasTensor;</div><div class="line"><a name="l02147"></a><span class="lineno"> 2147</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a6e9593869b82984de198fed27f72cdcf">m_CellBias</a> = &amp;cellBiasTensor;</div><div class="line"><a name="l02148"></a><span class="lineno"> 2148</span>&#160;    data.<a class="code" href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a5ff4158b1b363b898d0da04c42d37ce0">m_OutputGateBias</a> = &amp;outputGateBiasTensor;</div><div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160;</div><div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;    <span class="comment">// Flags to set test configuration</span></div><div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">m_ClippingThresCell</a> = 10;</div><div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">m_ClippingThresProj</a> = 0;</div><div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">m_ActivationFunc</a> = 4;</div><div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">m_CifgEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">m_PeepholeEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">m_ProjectionEnabled</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;    data.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a>.<a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml#a3dcd10ca3ea2e132558b1e2814668c15">m_TimeMajor</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160;</div><div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;    std::unique_ptr&lt;armnn::IWorkload&gt; workload</div><div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;            = workloadFactory.<a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a>(<a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a>, data, info);</div><div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;    outputStateInHandle-&gt;Allocate();</div><div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;    cellStateInHandle-&gt;Allocate();</div><div class="line"><a name="l02164"></a><span class="lineno"> 2164</span>&#160;</div><div class="line"><a name="l02165"></a><span class="lineno"> 2165</span>&#160;    outputStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l02166"></a><span class="lineno"> 2166</span>&#160;    cellStateOutHandle-&gt;Allocate();</div><div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l02168"></a><span class="lineno"> 2168</span>&#160;</div><div class="line"><a name="l02169"></a><span class="lineno"> 2169</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle.get(), inputVector.data());</div><div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(outputStateInHandle.get(), outputStateInVector.data());</div><div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(cellStateInHandle.get(), cellStateInVector.data());</div><div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;</div><div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;    workload-&gt;Execute();</div><div class="line"><a name="l02174"></a><span class="lineno"> 2174</span>&#160;</div><div class="line"><a name="l02175"></a><span class="lineno"> 2175</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutputStateOut.data(), outputStateOutHandle.get());</div><div class="line"><a name="l02176"></a><span class="lineno"> 2176</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualCellStateOut.data(), cellStateOutHandle.get());</div><div class="line"><a name="l02177"></a><span class="lineno"> 2177</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutput.data(), outputHandle.get());</div><div class="line"><a name="l02178"></a><span class="lineno"> 2178</span>&#160;</div><div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;float, 3&gt;</a>(actualOutput,</div><div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;                                     outputVector,</div><div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;                                     outputHandle-&gt;GetShape(),</div><div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;                                     outputTensorInfo.GetShape());</div><div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a6c9de81fc65b3c4924cab11907075a17"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a6c9de81fc65b3c4924cab11907075a17">armnn::LstmDescriptor::m_ProjectionEnabled</a></div><div class="ttdeci">bool m_ProjectionEnabled</div><div class="ttdoc">Enable/disable the projection layer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01131">Descriptors.hpp:1131</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_a44eb7524badcca9b2073359e3814c98b"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a44eb7524badcca9b2073359e3814c98b">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_InputGateBias</a></div><div class="ttdeci">const ConstTensorHandle * m_InputGateBias</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00769">WorkloadData.hpp:769</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a86e88bef0df4df96df752b4b8955a3af"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a86e88bef0df4df96df752b4b8955a3af">armnn::LstmDescriptor::m_ClippingThresProj</a></div><div class="ttdeci">float m_ClippingThresProj</div><div class="ttdoc">Clipping threshold value for the projection. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01125">Descriptors.hpp:1125</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml#l00022">WorkloadFactory.hpp:22</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_ac18c8b8b2039267d8282e91b4162d8aa"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac18c8b8b2039267d8282e91b4162d8aa">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_RecurrentToCellWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_RecurrentToCellWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00764">WorkloadData.hpp:764</a></div></div>
<div class="ttc" id="_unidirectional_sequence_lstm_test_impl_8cpp_xhtml_a96b8e256c3e15254d98f27f291d6befb"><div class="ttname"><a href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#a96b8e256c3e15254d98f27f291d6befb">UnidirectionalSequenceLstmLayerInt8Test</a></div><div class="ttdeci">LayerTestResult&lt; float, 3 &gt; UnidirectionalSequenceLstmLayerInt8Test(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory)</div><div class="ttdef"><b>Definition:</b> <a href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l01339">UnidirectionalSequenceLstmTestImpl.cpp:1339</a></div></div>
<div class="ttc" id="_unidirectional_sequence_lstm_test_impl_8cpp_xhtml_a45a379eda493e31f0f34de4aa69c7b65"><div class="ttname"><a href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#a45a379eda493e31f0f34de4aa69c7b65">UnidirectionalSequenceLstmInt8WithCifgWithPeepholeNoProjectionTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 3 &gt; UnidirectionalSequenceLstmInt8WithCifgWithPeepholeNoProjectionTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory)</div><div class="ttdef"><b>Definition:</b> <a href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l02034">UnidirectionalSequenceLstmTestImpl.cpp:2034</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="_resolve_type_8hpp_xhtml"><div class="ttname"><a href="_resolve_type_8hpp.xhtml">ResolveType.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_ab160eba2493d5fe52185c0986dcb190c"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ab160eba2493d5fe52185c0986dcb190c">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_InputToInputWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_InputToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00758">WorkloadData.hpp:758</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a3dcd10ca3ea2e132558b1e2814668c15"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a3dcd10ca3ea2e132558b1e2814668c15">armnn::LstmDescriptor::m_TimeMajor</a></div><div class="ttdeci">bool m_TimeMajor</div><div class="ttdoc">Enable/disable time major. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01135">Descriptors.hpp:1135</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="_unidirectional_sequence_lstm_test_impl_8cpp_xhtml_ab5aedf0fbe3810773302b480ff1ef0fe"><div class="ttname"><a href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#ab5aedf0fbe3810773302b480ff1ef0fe">UnidirectionalSequenceLstmLayerFloat32Test</a></div><div class="ttdeci">LayerTestResult&lt; float, 3 &gt; UnidirectionalSequenceLstmLayerFloat32Test(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory)</div><div class="ttdef"><b>Definition:</b> <a href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l00629">UnidirectionalSequenceLstmTestImpl.cpp:629</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_with_parameters_xhtml_aad91b9bbf7aa365d304febe79a3d1333"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">armnn::QueueDescriptorWithParameters::m_Parameters</a></div><div class="ttdeci">LayerDescriptor m_Parameters</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00066">WorkloadData.hpp:66</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_copy_utils_8hpp_xhtml_afaaca8c3f3a467d124bba44067d2afa8"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a></div><div class="ttdeci">void AllocateAndCopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00019">TensorCopyUtils.cpp:19</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_a5ff4158b1b363b898d0da04c42d37ce0"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a5ff4158b1b363b898d0da04c42d37ce0">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_OutputGateBias</a></div><div class="ttdeci">const ConstTensorHandle * m_OutputGateBias</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00772">WorkloadData.hpp:772</a></div></div>
<div class="ttc" id="_numeric_cast_8hpp_xhtml"><div class="ttname"><a href="_numeric_cast_8hpp.xhtml">NumericCast.hpp</a></div></div>
<div class="ttc" id="_unidirectional_sequence_lstm_test_impl_8cpp_xhtml_af09125829e58e0e9e05e0ecd3f1bcacb"><div class="ttname"><a href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#af09125829e58e0e9e05e0ecd3f1bcacb">UnidirectionalSequenceLstmLayerInt8TimeMajorTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 3 &gt; UnidirectionalSequenceLstmLayerInt8TimeMajorTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory)</div><div class="ttdef"><b>Definition:</b> <a href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l01493">UnidirectionalSequenceLstmTestImpl.cpp:1493</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_ac668b31de6fb0f19d4c793d5ed3c3316"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ac668b31de6fb0f19d4c793d5ed3c3316">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_ProjectionBias</a></div><div class="ttdeci">const ConstTensorHandle * m_ProjectionBias</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00774">WorkloadData.hpp:774</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_a17ba1c8bcc71a55a95b2a3913f8cb203"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a17ba1c8bcc71a55a95b2a3913f8cb203">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_InputToOutputWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_InputToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00761">WorkloadData.hpp:761</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_a841439e3b8dc157a7368b19c9ecb7d03"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a841439e3b8dc157a7368b19c9ecb7d03">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_InputToCellWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_InputToCellWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00760">WorkloadData.hpp:760</a></div></div>
<div class="ttc" id="_unidirectional_sequence_lstm_test_impl_8cpp_xhtml_a3f75458bc87de352d9becdfa047868de"><div class="ttname"><a href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#a3f75458bc87de352d9becdfa047868de">UnidirectionalSequenceLstmLayerFloat32TimeMajorSingleBatchTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 3 &gt; UnidirectionalSequenceLstmLayerFloat32TimeMajorSingleBatchTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory)</div><div class="ttdef"><b>Definition:</b> <a href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l00595">UnidirectionalSequenceLstmTestImpl.cpp:595</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_aab77f54a037658ca9b2bf9cc8a1fadf1"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aab77f54a037658ca9b2bf9cc8a1fadf1">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_InputToForgetWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_InputToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00759">WorkloadData.hpp:759</a></div></div>
<div class="ttc" id="_unidirectional_sequence_lstm_test_impl_8cpp_xhtml_ab8fb90e22b99c4d41ad3566fd5968829"><div class="ttname"><a href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#ab8fb90e22b99c4d41ad3566fd5968829">UnidirectionalSequenceLstmLayerNoCifgWithPeepholeWithProjectionTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 3 &gt; UnidirectionalSequenceLstmLayerNoCifgWithPeepholeWithProjectionTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory)</div><div class="ttdef"><b>Definition:</b> <a href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l00671">UnidirectionalSequenceLstmTestImpl.cpp:671</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_aeef6f1ac3efad8ec8b0a7118652b64c9"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aeef6f1ac3efad8ec8b0a7118652b64c9">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_CellLayerNormWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_CellLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00777">WorkloadData.hpp:777</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00048">Types.hpp:48</a></div></div>
<div class="ttc" id="_unidirectional_sequence_lstm_test_impl_8cpp_xhtml_adf8faacc3aacfa0b1342d78cfe1b61fe"><div class="ttname"><a href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#adf8faacc3aacfa0b1342d78cfe1b61fe">UnidirectionalSequenceLstmLayerNoCifgWithPeepholeWithProjectionWithLayerNormTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 3 &gt; UnidirectionalSequenceLstmLayerNoCifgWithPeepholeWithProjectionWithLayerNormTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory)</div><div class="ttdef"><b>Definition:</b> <a href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l00924">UnidirectionalSequenceLstmTestImpl.cpp:924</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_a951b7c90b862138071a298065f16be61"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a951b7c90b862138071a298065f16be61">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_CellToInputWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_CellToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00766">WorkloadData.hpp:766</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_a3ead2ef8da00b2709d561d85996fc513"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a3ead2ef8da00b2709d561d85996fc513">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_ProjectionWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_ProjectionWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00773">WorkloadData.hpp:773</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a693b40e6b94e958836aeb0410ca186bd"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; IMemoryManagerSharedPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00097">IBackendInternal.hpp:97</a></div></div>
<div class="ttc" id="_unidirectional_sequence_lstm_test_impl_8cpp_xhtml_a5c36dcbd8e95871d57e8a50222a02494"><div class="ttname"><a href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#a5c36dcbd8e95871d57e8a50222a02494">UnidirectionalSequenceLstmWithCifgWithPeepholeNoProjectionTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 3 &gt; UnidirectionalSequenceLstmWithCifgWithPeepholeNoProjectionTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory)</div><div class="ttdef"><b>Definition:</b> <a href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l01164">UnidirectionalSequenceLstmTestImpl.cpp:1164</a></div></div>
<div class="ttc" id="_unidirectional_sequence_lstm_test_impl_8hpp_xhtml"><div class="ttname"><a href="_unidirectional_sequence_lstm_test_impl_8hpp.xhtml">UnidirectionalSequenceLstmTestImpl.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_scoped_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00115">TensorHandle.hpp:115</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a2837b4396f20c956952d1a7286cab5f8"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a2837b4396f20c956952d1a7286cab5f8">armnn::LstmDescriptor::m_PeepholeEnabled</a></div><div class="ttdeci">bool m_PeepholeEnabled</div><div class="ttdoc">Enable/disable peephole. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01129">Descriptors.hpp:1129</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_copy_utils_8hpp_xhtml_ab5dfed8358e500ed523d78090ec78e88"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *mem, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_tensor_handle_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_tensor_handle_8hpp.xhtml">TensorHandle.hpp</a></div></div>
<div class="ttc" id="_unidirectional_sequence_lstm_test_impl_8cpp_xhtml_a8a1a97bb52fc24a8d66e2c2dd98c6d9b"><div class="ttname"><a href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#a8a1a97bb52fc24a8d66e2c2dd98c6d9b">UnidirectionalSequenceLstmLayerInt8NoCifgWithPeepholeWithProjectionTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 3 &gt; UnidirectionalSequenceLstmLayerInt8NoCifgWithPeepholeWithProjectionTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory)</div><div class="ttdef"><b>Definition:</b> <a href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l01647">UnidirectionalSequenceLstmTestImpl.cpp:1647</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_ae1b07ed928036004bd257169e5aeeef4"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ae1b07ed928036004bd257169e5aeeef4">armnn::LstmDescriptor::m_ActivationFunc</a></div><div class="ttdeci">uint32_t m_ActivationFunc</div><div class="ttdoc">The activation function to use. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01121">Descriptors.hpp:1121</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a531a3907ec13d3772370da88030191a5"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a531a3907ec13d3772370da88030191a5">armnn::LstmDescriptor::m_ClippingThresCell</a></div><div class="ttdeci">float m_ClippingThresCell</div><div class="ttdoc">Clipping threshold value for the cell state. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01123">Descriptors.hpp:1123</a></div></div>
<div class="ttc" id="_unidirectional_sequence_lstm_test_impl_8cpp_xhtml_a012c80e868a22936a96f2464262127e1"><div class="ttname"><a href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#a012c80e868a22936a96f2464262127e1">UnidirectionalSequenceLstmLayerFloat32BatchMajorSingleBatchTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 3 &gt; UnidirectionalSequenceLstmLayerFloat32BatchMajorSingleBatchTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory)</div><div class="ttdef"><b>Definition:</b> <a href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l00613">UnidirectionalSequenceLstmTestImpl.cpp:613</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_ad9442e26aa79f896da5f404ab825a9c8"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#ad9442e26aa79f896da5f404ab825a9c8">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_ForgetLayerNormWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_ForgetLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00776">WorkloadData.hpp:776</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_a0e0f66bd03c88f3d2dc666f581d3cf12"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a0e0f66bd03c88f3d2dc666f581d3cf12">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_OutputLayerNormWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_OutputLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00778">WorkloadData.hpp:778</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_ad474e5c51a0b194ef32e812b86c0cbdb"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#ad474e5c51a0b194ef32e812b86c0cbdb">armnn::LstmDescriptor::m_CifgEnabled</a></div><div class="ttdeci">bool m_CifgEnabled</div><div class="ttdoc">Enable/disable cifg (coupled input &amp; forget gate). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01127">Descriptors.hpp:1127</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_a29fa293fffbf9c6f00cd75db1dc0a52a"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a29fa293fffbf9c6f00cd75db1dc0a52a">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_ForgetGateBias</a></div><div class="ttdeci">const ConstTensorHandle * m_ForgetGateBias</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00770">WorkloadData.hpp:770</a></div></div>
<div class="ttc" id="_unidirectional_sequence_lstm_test_impl_8cpp_xhtml_a3e62d48c04adef20dc1e813544e5792f"><div class="ttname"><a href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#a3e62d48c04adef20dc1e813544e5792f">UnidirectionalSequenceLstmLayerFloat32TimeMajorTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 3 &gt; UnidirectionalSequenceLstmLayerFloat32TimeMajorTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory)</div><div class="ttdef"><b>Definition:</b> <a href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l00650">UnidirectionalSequenceLstmTestImpl.cpp:650</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_copy_utils_8hpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00042">ITensorHandleFactory.hpp:42</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_a6e9593869b82984de198fed27f72cdcf"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a6e9593869b82984de198fed27f72cdcf">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_CellBias</a></div><div class="ttdeci">const ConstTensorHandle * m_CellBias</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00771">WorkloadData.hpp:771</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml_a4a8ec49f130084445d44297549254780"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml#a4a8ec49f130084445d44297549254780">armnn::LstmDescriptor::m_LayerNormEnabled</a></div><div class="ttdeci">bool m_LayerNormEnabled</div><div class="ttdoc">Enable/disable layer normalization. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01133">Descriptors.hpp:1133</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="_unidirectional_sequence_lstm_test_impl_8cpp_xhtml_af7d1e03806f56e8e8e1444f16d735af5"><div class="ttname"><a href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml#af7d1e03806f56e8e8e1444f16d735af5">UnidirectionalSequenceLstmLayerInt8NoCifgWithPeepholeWithProjectionWithLayerNormTest</a></div><div class="ttdeci">LayerTestResult&lt; float, 3 &gt; UnidirectionalSequenceLstmLayerInt8NoCifgWithPeepholeWithProjectionWithLayerNormTest(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const armnn::ITensorHandleFactory &amp;tensorHandleFactory)</div><div class="ttdef"><b>Definition:</b> <a href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l01827">UnidirectionalSequenceLstmTestImpl.cpp:1827</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_a299587d4f3fca029492700f3e2585bd8"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a299587d4f3fca029492700f3e2585bd8">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_RecurrentToInputWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_RecurrentToInputWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00762">WorkloadData.hpp:762</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about TensorInfos of a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_test_utils_2_layer_test_result_8hpp_source.xhtml#l00015">LayerTestResult.hpp:15</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_a20c10fcb26657477377d07b7b1e13120"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a20c10fcb26657477377d07b7b1e13120">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_CellToForgetWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_CellToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00767">WorkloadData.hpp:767</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml">armnn::UnidirectionalSequenceLstmQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00731">WorkloadData.hpp:731</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_a4c27716f61bb68e8ea0bd4e8389ba01a"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a4c27716f61bb68e8ea0bd4e8389ba01a">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_RecurrentToOutputWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_RecurrentToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00765">WorkloadData.hpp:765</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_a13060ebb89d2c21a7a5d897e99cccf72"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">armnn::IWorkloadFactory::CreateWorkload</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateWorkload(LayerType type, const QueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_factory_8cpp_source.xhtml#l01559">WorkloadFactory.cpp:1559</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_factory_xhtml_a375f11dd42ff042435e8771cf287b20c"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">armnn::ITensorHandleFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo) const =0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_adf8571dd1867ee91082bd005f94f2610"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#adf8571dd1867ee91082bd005f94f2610">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_RecurrentToForgetWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_RecurrentToForgetWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00763">WorkloadData.hpp:763</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_aa09f7bdb9fd0d06b6386e412a4e72dd6"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#aa09f7bdb9fd0d06b6386e412a4e72dd6">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_CellToOutputWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_CellToOutputWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00768">WorkloadData.hpp:768</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_copy_utils_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml">TensorCopyUtils.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor_xhtml_a1dbad32cad5c0437e1272f59fedf52ea"><div class="ttname"><a href="structarmnn_1_1_unidirectional_sequence_lstm_queue_descriptor.xhtml#a1dbad32cad5c0437e1272f59fedf52ea">armnn::UnidirectionalSequenceLstmQueueDescriptor::m_InputLayerNormWeights</a></div><div class="ttdeci">const ConstTensorHandle * m_InputLayerNormWeights</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00775">WorkloadData.hpp:775</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_workload_test_utils_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_test_utils_2_workload_test_utils_8hpp.xhtml">WorkloadTestUtils.hpp</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="dir_99a30439342d160875b21dac3498ad7f.xhtml">layerTests</a></li><li class="navelem"><a class="el" href="_unidirectional_sequence_lstm_test_impl_8cpp.xhtml">UnidirectionalSequenceLstmTestImpl.cpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:22 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
