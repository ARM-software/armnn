<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/cl/test/ClCreateWorkloadTests.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_cl_create_workload_tests_8cpp.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ClCreateWorkloadTests.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_cl_context_control_fixture_8hpp_source.xhtml">ClContextControlFixture.hpp</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_cl_workload_factory_helper_8hpp_source.xhtml">ClWorkloadFactoryHelper.hpp</a>&quot;</code><br />
<code>#include &lt;<a class="el" href="_assert_8hpp_source.xhtml">armnn/utility/Assert.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_ignore_unused_8hpp_source.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_polymorphic_downcast_8hpp_source.xhtml">armnn/utility/PolymorphicDowncast.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_2backends_2_mem_copy_workload_8hpp_source.xhtml">armnn/backends/MemCopyWorkload.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp_source.xhtml">armnnTestUtils/TensorCopyUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_test_utils_2_tensor_helpers_8hpp_source.xhtml">armnnTestUtils/TensorHelpers.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="include_2armnn_test_utils_2_workload_test_utils_8hpp_source.xhtml">armnnTestUtils/WorkloadTestUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_create_workload_cl_neon_8hpp_source.xhtml">aclCommon/test/CreateWorkloadClNeon.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_arm_compute_tensor_utils_8hpp_source.xhtml">aclCommon/ArmComputeTensorUtils.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_cl_import_tensor_handle_8hpp_source.xhtml">cl/ClImportTensorHandle.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_cl_import_tensor_handle_factory_8hpp_source.xhtml">cl/ClImportTensorHandleFactory.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_cl_tensor_handle_8hpp_source.xhtml">cl/ClTensorHandle.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_cl_workload_factory_8hpp_source.xhtml">cl/ClWorkloadFactory.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_cl_workloads_8hpp_source.xhtml">cl/workloads/ClWorkloads.hpp</a>&gt;</code><br />
<code>#include &lt;<a class="el" href="_cl_workload_utils_8hpp_source.xhtml">cl/workloads/ClWorkloadUtils.hpp</a>&gt;</code><br />
<code>#include &lt;doctest/doctest.h&gt;</code><br />
</div>
<p><a href="_cl_create_workload_tests_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aa07afce0809a8e612748eb080bdc24f1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_predicate_result.xhtml">armnn::PredicateResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a> (<a class="el" href="classarmnn_1_1_i_cl_tensor_handle.xhtml">IClTensorHandle</a> *tensorHandle, std::initializer_list&lt; unsigned int &gt; expectedDimensions)</td></tr>
<tr class="separator:aa07afce0809a8e612748eb080bdc24f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0c1100771647ae2536f861267f6076c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_cl_create_workload_tests_8cpp.xhtml#ad0c1100771647ae2536f861267f6076c">TEST_SUITE</a> (&quot;CreateWorkloadCl&quot;)</td></tr>
<tr class="separator:ad0c1100771647ae2536f861267f6076c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="aa07afce0809a8e612748eb080bdc24f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa07afce0809a8e612748eb080bdc24f1">&#9670;&nbsp;</a></span>CompareIClTensorHandleShape()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_predicate_result.xhtml">armnn::PredicateResult</a> CompareIClTensorHandleShape </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_cl_tensor_handle.xhtml">IClTensorHandle</a> *&#160;</td>
          <td class="paramname"><em>tensorHandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::initializer_list&lt; unsigned int &gt;&#160;</td>
          <td class="paramname"><em>expectedDimensions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_create_workload_tests_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="_cl_create_workload_tests_8cpp_source.xhtml">ClCreateWorkloadTests.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_create_workload_tests_8cpp_source.xhtml#l00035">TEST_SUITE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">return</span> CompareTensorHandleShape&lt;IClTensorHandle&gt;(tensorHandle, expectedDimensions);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ad0c1100771647ae2536f861267f6076c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0c1100771647ae2536f861267f6076c">&#9670;&nbsp;</a></span>TEST_SUITE()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">TEST_SUITE </td>
          <td>(</td>
          <td class="paramtype">&quot;CreateWorkloadCl&quot;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cl_create_workload_tests_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="_cl_create_workload_tests_8cpp_source.xhtml">ClCreateWorkloadTests.cpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_copy_utils_8cpp_source.xhtml#l00019">AllocateAndCopyDataToITensorHandle()</a>, <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_cl_create_workload_tests_8cpp_source.xhtml#l00029">CompareIClTensorHandleShape()</a>, <a class="el" href="_cl_import_tensor_handle_factory_8cpp_source.xhtml#l00056">ClImportTensorHandleFactory::CreateTensorHandle()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::Float16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="classarmnn_1_1_i_acl_tensor_handle.xhtml#a3767f569fc55323ddf7b2ee57987d9c5">IAclTensorHandle::GetDataType()</a>, <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">ITensorHandle::GetShape()</a>, <a class="el" href="_cl_tensor_handle_8hpp_source.xhtml#l00243">ClSubTensorHandle::GetTensor()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00543">Convolution2dDescriptor::m_BiasEnabled</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00545">Convolution2dDescriptor::m_DataLayout</a>, <a class="el" href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00026">QueueDescriptor::m_Inputs</a>, <a class="el" href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00027">QueueDescriptor::m_Outputs</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00533">Convolution2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00527">Convolution2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00529">Convolution2dDescriptor::m_PadRight</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00531">Convolution2dDescriptor::m_PadTop</a>, <a class="el" href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00066">QueueDescriptorWithParameters&lt; LayerDescriptor &gt;::m_Parameters</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00535">Convolution2dDescriptor::m_StrideX</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00537">Convolution2dDescriptor::m_StrideY</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::NCHW</a>, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00489">TensorInfo::SetQuantizationOffset()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::Signed32</a>, and <a class="el" href="_mem_copy_tests_8cpp_source.xhtml#l00089">TEST_CASE_FIXTURE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">template</span> &lt;armnn::DataType DataType&gt;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClCreateActivationWorkloadTest()</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">auto</span> workload = CreateActivationWorkloadTest&lt;ClActivationWorkload, DataType&gt;(factory, graph);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="comment">// Checks that inputs/outputs are as we expect them (see definition of CreateActivationWorkloadTest).</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="structarmnn_1_1_activation_queue_descriptor.xhtml">ActivationQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">auto</span> inputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">auto</span> predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, {1, 1});</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, {1, 1});</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateActivationFloatWorkload&quot;</span>)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    ClCreateActivationWorkloadTest&lt;armnn::DataType::Float32&gt;();</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateActivationFloat16Workload&quot;</span>)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    ClCreateActivationWorkloadTest&lt;armnn::DataType::Float16&gt;();</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> WorkloadType,</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;          <span class="keyword">typename</span> DescriptorType,</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;          <span class="keyword">typename</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;          <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&gt;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClCreateElementwiseWorkloadTest()</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">auto</span> workload = CreateElementwiseWorkloadTest&lt;WorkloadType, DescriptorType, LayerType, DataType&gt;(factory, graph);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="comment">// Checks that inputs/outputs are as we expect them (see definition of CreateElementwiseWorkloadTest).</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    DescriptorType queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">auto</span> inputHandle1 = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">auto</span> inputHandle2 = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[1]);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">auto</span> predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle1, {2, 3});</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle2, {2, 3});</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, {2, 3});</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateAdditionFloatWorkload&quot;</span>)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    ClCreateElementwiseWorkloadTest&lt;<a class="code" href="classarmnn_1_1_cl_addition_workload.xhtml">ClAdditionWorkload</a>,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                    <a class="code" href="structarmnn_1_1_addition_queue_descriptor.xhtml">AdditionQueueDescriptor</a>,</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                    <a class="code" href="classarmnn_1_1_addition_layer.xhtml">AdditionLayer</a>,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>&gt;();</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;}</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateAdditionFloat16Workload&quot;</span>)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;{</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    ClCreateElementwiseWorkloadTest&lt;<a class="code" href="classarmnn_1_1_cl_addition_workload.xhtml">ClAdditionWorkload</a>,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                    <a class="code" href="structarmnn_1_1_addition_queue_descriptor.xhtml">AdditionQueueDescriptor</a>,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                                    <a class="code" href="classarmnn_1_1_addition_layer.xhtml">AdditionLayer</a>,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a>&gt;();</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateSubtractionFloatWorkload&quot;</span>)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    ClCreateElementwiseWorkloadTest&lt;<a class="code" href="classarmnn_1_1_cl_subtraction_workload.xhtml">ClSubtractionWorkload</a>,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                    <a class="code" href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">SubtractionQueueDescriptor</a>,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                    <a class="code" href="classarmnn_1_1_subtraction_layer.xhtml">SubtractionLayer</a>,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>&gt;();</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateSubtractionFloat16Workload&quot;</span>)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    ClCreateElementwiseWorkloadTest&lt;<a class="code" href="classarmnn_1_1_cl_subtraction_workload.xhtml">ClSubtractionWorkload</a>,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                                    <a class="code" href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">SubtractionQueueDescriptor</a>,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                    <a class="code" href="classarmnn_1_1_subtraction_layer.xhtml">SubtractionLayer</a>,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a>&gt;();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateMultiplicationFloatWorkloadTest&quot;</span>)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    ClCreateElementwiseWorkloadTest&lt;<a class="code" href="classarmnn_1_1_cl_multiplication_workload.xhtml">ClMultiplicationWorkload</a>,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                                    <a class="code" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">MultiplicationQueueDescriptor</a>,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                    <a class="code" href="classarmnn_1_1_multiplication_layer.xhtml">MultiplicationLayer</a>,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                                    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>&gt;();</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateMultiplicationFloat16WorkloadTest&quot;</span>)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;{</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    ClCreateElementwiseWorkloadTest&lt;<a class="code" href="classarmnn_1_1_cl_multiplication_workload.xhtml">ClMultiplicationWorkload</a>,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                                    <a class="code" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">MultiplicationQueueDescriptor</a>,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                    <a class="code" href="classarmnn_1_1_multiplication_layer.xhtml">MultiplicationLayer</a>,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a>&gt;();</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateMultiplicationUint8WorkloadTest&quot;</span>)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;{</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    ClCreateElementwiseWorkloadTest&lt;<a class="code" href="classarmnn_1_1_cl_multiplication_workload.xhtml">ClMultiplicationWorkload</a>,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                    <a class="code" href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">MultiplicationQueueDescriptor</a>,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                    <a class="code" href="classarmnn_1_1_multiplication_layer.xhtml">MultiplicationLayer</a>,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a>&gt;();</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateDivisionFloatWorkloadTest&quot;</span>)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    ClCreateElementwiseWorkloadTest&lt;<a class="code" href="classarmnn_1_1_cl_division_workload.xhtml">ClDivisionWorkload</a>,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                    <a class="code" href="structarmnn_1_1_division_queue_descriptor.xhtml">DivisionQueueDescriptor</a>,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                    <a class="code" href="classarmnn_1_1_division_layer.xhtml">DivisionLayer</a>,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>&gt;();</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateDivisionFloat16WorkloadTest&quot;</span>)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;{</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    ClCreateElementwiseWorkloadTest&lt;<a class="code" href="classarmnn_1_1_cl_division_workload.xhtml">ClDivisionWorkload</a>,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                    <a class="code" href="structarmnn_1_1_division_queue_descriptor.xhtml">DivisionQueueDescriptor</a>,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                    <a class="code" href="classarmnn_1_1_division_layer.xhtml">DivisionLayer</a>,</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                                    <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a>&gt;();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> WorkloadType, </div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;          <span class="keyword">typename</span> DescriptorType,</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;          <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&gt;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClCreateElementwiseUnaryWorkloadTest(<a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8">armnn::UnaryOperation</a> op)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">auto</span> workload = CreateElementwiseUnaryWorkloadTest&lt;WorkloadType, DescriptorType, DataType&gt;(factory, graph, op);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    DescriptorType queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keyword">auto</span> inputHandle  = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">auto</span> predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, {2, 3});</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, {2, 3});</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;}</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateRsqrtFloat32WorkloadTest&quot;</span>)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;{</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    ClCreateElementwiseUnaryWorkloadTest&lt;ClRsqrtWorkload, RsqrtQueueDescriptor, armnn::DataType::Float32&gt;(</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        UnaryOperation::Rsqrt);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;}</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> BatchNormalizationWorkloadType, armnn::DataType DataType&gt;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClCreateBatchNormalizationWorkloadTest(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;{</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">auto</span> workload = CreateBatchNormalizationWorkloadTest&lt;BatchNormalizationWorkloadType, DataType&gt;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    (factory, graph, dataLayout);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// Checks that inputs/outputs are as we expect them (see definition of CreateBatchNormalizationWorkloadTest).</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <a class="code" href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">BatchNormalizationQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">auto</span> inputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="classarmnn_1_1_predicate_result.xhtml">armnn::PredicateResult</a> predResult(<span class="keyword">true</span>);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">switch</span> (dataLayout)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">case</span> DataLayout::NHWC:</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, { 2, 4, 4, 3 });</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, { 2, 4, 4, 3 });</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">default</span>: <span class="comment">// NCHW</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, { 2, 3, 4, 4 });</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, { 2, 3, 4, 4 });</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateBatchNormalizationFloatNchwWorkload&quot;</span>)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;{</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    ClCreateBatchNormalizationWorkloadTest&lt;<a class="code" href="classarmnn_1_1_cl_batch_normalization_float_workload.xhtml">ClBatchNormalizationFloatWorkload</a>,</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>&gt;(DataLayout::NCHW);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;}</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateBatchNormalizationFloat16NchwWorkload&quot;</span>)</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    ClCreateBatchNormalizationWorkloadTest&lt;<a class="code" href="classarmnn_1_1_cl_batch_normalization_float_workload.xhtml">ClBatchNormalizationFloatWorkload</a>,</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a>&gt;(DataLayout::NCHW);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateBatchNormalizationFloatNhwcWorkload&quot;</span>)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;{</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    ClCreateBatchNormalizationWorkloadTest&lt;<a class="code" href="classarmnn_1_1_cl_batch_normalization_float_workload.xhtml">ClBatchNormalizationFloatWorkload</a>,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>&gt;(DataLayout::NHWC);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateBatchNormalizationNhwcFloat16NhwcWorkload&quot;</span>)</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;{</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    ClCreateBatchNormalizationWorkloadTest&lt;<a class="code" href="classarmnn_1_1_cl_batch_normalization_float_workload.xhtml">ClBatchNormalizationFloatWorkload</a>,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                           <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a>&gt;(DataLayout::NHWC);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateConvertFp16ToFp32Workload&quot;</span>)</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;{</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">auto</span> workload = CreateConvertFp16ToFp32WorkloadTest&lt;ClConvertFp16ToFp32Workload&gt;(factory, graph);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <a class="code" href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml">ConvertFp16ToFp32QueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">auto</span> inputHandle  = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">auto</span> predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, {1, 3, 2, 3});</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, {1, 3, 2, 3});</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    CHECK((inputHandle-&gt;GetTensor().info()-&gt;data_type() == arm_compute::DataType::F16));</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    CHECK((outputHandle-&gt;GetTensor().info()-&gt;data_type() == arm_compute::DataType::F32));</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;}</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateConvertFp32ToFp16Workload&quot;</span>)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">auto</span> workload = CreateConvertFp32ToFp16WorkloadTest&lt;ClConvertFp32ToFp16Workload&gt;(factory, graph);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <a class="code" href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml">ConvertFp32ToFp16QueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keyword">auto</span> inputHandle  = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keyword">auto</span> predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, {1, 3, 2, 3});</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, {1, 3, 2, 3});</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    CHECK((inputHandle-&gt;GetTensor().info()-&gt;data_type() == arm_compute::DataType::F32));</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    CHECK((outputHandle-&gt;GetTensor().info()-&gt;data_type() == arm_compute::DataType::F16));</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;}</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Convolution2dWorkloadType, <span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClConvolution2dWorkloadTest(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;{</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keyword">auto</span> workload = CreateConvolution2dWorkloadTest&lt;ClConvolution2dWorkload, DataType&gt;(factory,</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                                                                       graph,</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                                                                       dataLayout);</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputShape  = (dataLayout == DataLayout::NCHW) ? std::initializer_list&lt;unsigned int&gt;({2, 3, 8, 16})</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                                               : std::initializer_list&lt;unsigned int&gt;({2, 8, 16, 3});</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape = (dataLayout == DataLayout::NCHW) ? std::initializer_list&lt;unsigned int&gt;({2, 2, 2, 10})</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                                               : std::initializer_list&lt;unsigned int&gt;({2, 2, 10, 2});</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="comment">// Checks that outputs and inputs are as we expect them (see definition of CreateConvolution2dWorkloadTest).</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <a class="code" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keyword">auto</span> inputHandle  = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a>[0]);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[0]);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    CHECK((inputHandle-&gt;GetShape() == inputShape));</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    CHECK((outputHandle-&gt;GetShape() == outputShape));</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateConvolution2dFloatNchwWorkload&quot;</span>)</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;{</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    ClConvolution2dWorkloadTest&lt;ClConvolution2dWorkload, armnn::DataType::Float32&gt;(DataLayout::NCHW);</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;}</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateConvolution2dFloatNhwcWorkload&quot;</span>)</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;{</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    ClConvolution2dWorkloadTest&lt;ClConvolution2dWorkload, armnn::DataType::Float32&gt;(DataLayout::NHWC);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;}</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateConvolution2dFloat16NchwWorkload&quot;</span>)</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;{</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    ClConvolution2dWorkloadTest&lt;ClConvolution2dWorkload, armnn::DataType::Float16&gt;(DataLayout::NCHW);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateConvolution2dFloat16NhwcWorkload&quot;</span>)</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;{</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    ClConvolution2dWorkloadTest&lt;ClConvolution2dWorkload, armnn::DataType::Float16&gt;(DataLayout::NHWC);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;}</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateConvolution2dFastMathEnabledWorkload&quot;</span>)</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;{</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> = std::vector&lt;BackendOptions&gt;;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> modelOptions = {};</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <a class="code" href="structarmnn_1_1_backend_options.xhtml">BackendOptions</a> gpuAcc(<span class="stringliteral">&quot;GpuAcc&quot;</span>,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    {</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        { <span class="stringliteral">&quot;FastMathEnabled&quot;</span>, <span class="keyword">true</span> }</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    });</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    modelOptions.push_back(gpuAcc);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager(), modelOptions);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keyword">auto</span> workload =</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        CreateConvolution2dWorkloadFastMathTest&lt;ClConvolution2dWorkload, armnn::DataType::Float32&gt;(factory,</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                                                                                           graph,</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                                                                                           DataLayout::NCHW,</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                                                                                           modelOptions);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(workload != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keyword">auto</span> conv2dWorkload = PolymorphicDowncast&lt;ClConvolution2dWorkload*&gt;(workload.get());</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(conv2dWorkload);</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(conv2dWorkload != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(conv2dWorkload-&gt;GetConvolutionMethod() == arm_compute::ConvolutionMethod::WINOGRAD);</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;}</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;ClReplaceInputOutputConvolution2dWorkload&quot;</span>)</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;{</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="comment">// Create Convolution2dWorkload with ClTensorHandle input and output</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="comment">// Then replace the input and output with ClImportTensorHandle</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keyword">auto</span> workload =</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        CreateConvolution2dWorkloadTest&lt;ClConvolution2dWorkload, DataType::Float32&gt;(factory,</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                                                                    graph,</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                                                                    DataLayout::NHWC);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputShape  = std::initializer_list&lt;unsigned int&gt;({2, 8, 16, 3});</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape = std::initializer_list&lt;unsigned int&gt;({2, 2, 10, 2});</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="comment">// Checks that outputs and inputs are as we expect them (see definition of CreateConvolution2dWorkloadTest).</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <a class="code" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keyword">auto</span> inputHandle  = PolymorphicDowncast&lt;ITensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;ITensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    CHECK((inputHandle-&gt;GetShape() == inputShape));</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    CHECK((outputHandle-&gt;GetShape() == outputShape));</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="comment">// The input and output handles are created correctly as ClTensorHandle</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    CHECK((dynamic_cast&lt;ClTensorHandle*&gt;(inputHandle) != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    CHECK((dynamic_cast&lt;ClTensorHandle*&gt;(outputHandle) != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="comment">// Replace with ImportTensorHandle</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <a class="code" href="classarmnn_1_1_cl_import_tensor_handle_factory.xhtml">ClImportTensorHandleFactory</a> importFactory(static_cast&lt;MemorySourceFlags&gt;(MemorySource::Malloc),</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                              static_cast&lt;MemorySourceFlags&gt;(MemorySource::Malloc));</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputInfo({ 2, 8, 16, 3 }, DataType::Float32);</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputInfo({ 2, 2, 10, 2 }, DataType::Float32);</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="comment">// create TensorHandle for memory import</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keyword">auto</span> inputImportHandle = importFactory.CreateTensorHandle(inputInfo);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keyword">auto</span> outputImportHandle = importFactory.CreateTensorHandle(outputInfo);</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="comment">// Calling ReplaceInputTensorHandle and ReplaceOutputTensorHandle does not throw exception</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="comment">// as Reconfigure function is implemented</span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    workload-&gt;ReplaceInputTensorHandle(inputImportHandle.get(), 0);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    workload-&gt;ReplaceOutputTensorHandle(outputImportHandle.get(), 0);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="comment">// Correctly replaced with the import handles with correct information</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keyword">auto</span> replacedInputHandle  = PolymorphicDowncast&lt;ITensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keyword">auto</span> replacedOutputHandle = PolymorphicDowncast&lt;ITensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    CHECK((replacedInputHandle-&gt;GetShape() == inputShape));</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    CHECK((replacedOutputHandle-&gt;GetShape() == outputShape));</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    CHECK((inputImportHandle.get() == replacedInputHandle));</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    CHECK((inputImportHandle.get() == replacedInputHandle));</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    CHECK((dynamic_cast&lt;ClTensorHandle*&gt;(replacedInputHandle) == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    CHECK((dynamic_cast&lt;ClImportTensorHandle*&gt;(replacedInputHandle) != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    CHECK((dynamic_cast&lt;ClTensorHandle*&gt;(replacedOutputHandle) == <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    CHECK((dynamic_cast&lt;ClImportTensorHandle*&gt;(replacedOutputHandle) != <span class="keyword">nullptr</span>));</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;}</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateConvolution2dClCompiledContextWorkload&quot;</span>)</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;{</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> inputType  = <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> kernelType = <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">DataType::QSymmS8</a>;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> biasType   = <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">DataType::Signed32</a>;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputInfo ({ 1, 3, 1, 2 }, inputType, 0.5f, 128);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputInfo({ 1, 3, 1, 3 }, inputType, 1.0f, 128);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; quantScales{ 0.5f, 0.75f, 1.0f };</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> quantDimension = 0;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> kernelInfo({ 3, 1, 1, 2 }, kernelType, quantScales, quantDimension);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keyword">const</span> std::vector&lt;float&gt; biasQuantScales{ 0.25f, 0.375f, 0.5f };</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> biasInfo({ 3 }, biasType, biasQuantScales, quantDimension);</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    std::vector&lt;uint8_t&gt; inputData =</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    {</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        138, 108, 138, 108, 138, 108</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    };</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    std::vector&lt;int8_t&gt; kernelData =</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    {</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        1, 2, 1, 2, 1, 2</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    };</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    std::vector&lt;int32_t&gt; biasData =</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    {</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        4, 4, 4</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    };</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    std::vector&lt;uint8_t&gt; expectedOutputData =</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    {</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        121, 118, 115, 121, 118, 115, 121, 118, 115</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    };</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> descriptor;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">m_StrideX</a>     = 1;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">m_StrideY</a>     = 1;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">m_PadLeft</a>     = 0;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">m_PadRight</a>    = 0;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">m_PadTop</a>      = 0;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">m_PadBottom</a>   = 0;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">m_BiasEnabled</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    descriptor.<a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">m_DataLayout</a>  = <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keyword">auto</span> memoryManager = ClWorkloadFactoryHelper::GetMemoryManager();</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keyword">auto</span> clMemoryManager = armnn::PolymorphicPointerDowncast&lt;armnn::ClMemoryManager&gt;(memoryManager);</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keyword">auto</span> tensorHandleFactory = ClWorkloadFactoryHelper::GetTensorHandleFactory(memoryManager);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    std::unique_ptr&lt;ITensorHandle&gt; inputHandle  = tensorHandleFactory.CreateTensorHandle(inputInfo);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; weightsHandle = tensorHandleFactory.CreateTensorHandle(kernelInfo);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; biasHandle = tensorHandleFactory.CreateTensorHandle(biasInfo);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    std::unique_ptr&lt;ITensorHandle&gt; outputHandle = tensorHandleFactory.CreateTensorHandle(outputInfo);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> workloadInfo;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">ScopedTensorHandle</a> weightTensor(kernelInfo);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <a class="code" href="classarmnn_1_1_scoped_tensor_handle.xhtml">ScopedTensorHandle</a> biasTensor(biasInfo);</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;weightTensor, kernelData.data());</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a>(&amp;biasTensor, biasData.data());</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <a class="code" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a> queueDescriptor;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    queueDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">m_Parameters</a> = descriptor;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    queueDescriptor.m_Weight     = &amp;weightTensor;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    queueDescriptor.m_Bias       = &amp;biasTensor;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    AddInputToWorkload(queueDescriptor, workloadInfo, inputInfo, inputHandle.get());</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    AddInputToWorkload(queueDescriptor, workloadInfo, kernelInfo, weightsHandle.get());</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    AddInputToWorkload(queueDescriptor, workloadInfo, biasInfo, biasHandle.get());</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    AddOutputToWorkload(queueDescriptor, workloadInfo, outputInfo, outputHandle.get());</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="comment">// Initialize our m_CLCompileContext using default device and context</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keyword">auto</span> context = arm_compute::CLKernelLibrary::get().context();</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keyword">auto</span> device  = arm_compute::CLKernelLibrary::get().get_device();</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keyword">auto</span> clCompileContext = arm_compute::CLCompileContext(context, device);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="comment">// Check built programs are empty in context</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    CHECK(clCompileContext.get_built_programs().empty());</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="keyword">auto</span> workload = std::make_unique&lt;ClConvolution2dWorkload&gt;(queueDescriptor,</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                                                              workloadInfo,</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                                                              clMemoryManager-&gt;GetIntraLayerManager(),</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                                                              clCompileContext);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(workload != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="comment">// Check built programs are not empty in context</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    CHECK(!clCompileContext.get_built_programs().empty());</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;}</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DepthwiseConvolutionWorkloadType, <span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClDepthwiseConvolutionWorkloadTest(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout)</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;{</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keyword">auto</span> workload = CreateDepthwiseConvolution2dWorkloadTest&lt;DepthwiseConvolutionWorkloadType, DataType&gt;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                    (factory, graph, dataLayout);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="comment">// Checks that inputs/outputs are as we expect them (see definition of CreateDepthwiseConvolution2dWorkloadTest).</span></div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <a class="code" href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">DepthwiseConvolution2dQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keyword">auto</span> inputHandle  = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputShape  = (dataLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>) ? std::initializer_list&lt;unsigned int&gt;({ 2, 2, 5, 5 })</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                                                               : std::initializer_list&lt;unsigned int&gt;({ 2, 5, 5, 2 });</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape = (dataLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>) ? std::initializer_list&lt;unsigned int&gt;({ 2, 2, 5, 5 })</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                                               : std::initializer_list&lt;unsigned int&gt;({ 2, 5, 5, 2 });</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    CHECK((inputHandle-&gt;GetShape() == inputShape));</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    CHECK((outputHandle-&gt;GetShape() == outputShape));</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;}</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateDepthwiseConvolutionFloat32NhwcWorkload&quot;</span>)</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;{</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    ClDepthwiseConvolutionWorkloadTest&lt;ClDepthwiseConvolutionWorkload, DataType::Float32&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;}</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Convolution2dWorkloadType, <span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClDirectConvolution2dWorkloadTest()</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;{</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keyword">auto</span> workload = CreateDirectConvolution2dWorkloadTest&lt;ClConvolution2dWorkload, DataType&gt;(factory, graph);</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="comment">// Checks that outputs and inputs are as we expect them (see definition of CreateDirectConvolution2dWorkloadTest).</span></div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <a class="code" href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">Convolution2dQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="keyword">auto</span> inputHandle  = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keyword">auto</span> predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, {2, 3, 6, 6});</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, {2, 2, 6, 6});</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;}</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateDirectConvolution2dFloatWorkload&quot;</span>)</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;{</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    ClDirectConvolution2dWorkloadTest&lt;ClConvolution2dWorkload, armnn::DataType::Float32&gt;();</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;}</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateDirectConvolution2dFloat16Workload&quot;</span>)</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;{</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    ClDirectConvolution2dWorkloadTest&lt;ClConvolution2dWorkload, armnn::DataType::Float16&gt;();</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;}</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateDirectConvolution2dUint8Workload&quot;</span>)</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;{</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    ClDirectConvolution2dWorkloadTest&lt;ClConvolution2dWorkload, armnn::DataType::QAsymmU8&gt;();</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;}</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> FullyConnectedWorkloadType, <span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClCreateFullyConnectedWorkloadTest()</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;{</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keyword">auto</span> workload =</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        CreateFullyConnectedWorkloadTest&lt;FullyConnectedWorkloadType, DataType&gt;(factory, graph);</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <span class="comment">// Checks that outputs and inputs are as we expect them (see definition of CreateFullyConnectedWorkloadTest).</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <a class="code" href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">FullyConnectedQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="keyword">auto</span> inputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keyword">auto</span> predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, {3, 1, 4, 5});</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, {3, 7});</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;}</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateFullyConnectedFloatWorkloadTest&quot;</span>)</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;{</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    ClCreateFullyConnectedWorkloadTest&lt;ClFullyConnectedWorkload, armnn::DataType::Float32&gt;();</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;}</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateFullyConnectedFloat16WorkloadTest&quot;</span>)</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;{</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    ClCreateFullyConnectedWorkloadTest&lt;ClFullyConnectedWorkload, armnn::DataType::Float16&gt;();</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;}</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> NormalizationWorkloadType, <span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClNormalizationWorkloadTest(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout)</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;{</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <span class="keyword">auto</span> workload = CreateNormalizationWorkloadTest&lt;NormalizationWorkloadType, DataType&gt;(factory, graph, dataLayout);</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="comment">// Checks that inputs/outputs are as we expect them (see definition of CreateNormalizationWorkloadTest).</span></div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <a class="code" href="structarmnn_1_1_normalization_queue_descriptor.xhtml">NormalizationQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <span class="keyword">auto</span> inputHandle  = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputShape  = (dataLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>) ? std::initializer_list&lt;unsigned int&gt;({3, 5, 5, 1})</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                                                               : std::initializer_list&lt;unsigned int&gt;({3, 1, 5, 5});</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape = (dataLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>) ? std::initializer_list&lt;unsigned int&gt;({3, 5, 5, 1})</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                                                               : std::initializer_list&lt;unsigned int&gt;({3, 1, 5, 5});</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    CHECK((inputHandle-&gt;GetShape() == inputShape));</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    CHECK((outputHandle-&gt;GetShape() == outputShape));</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;}</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateNormalizationFloat32NchwWorkload&quot;</span>)</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;{</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    ClNormalizationWorkloadTest&lt;ClNormalizationFloatWorkload, armnn::DataType::Float32&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>);</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;}</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateNormalizationFloat16NchwWorkload&quot;</span>)</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;{</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    ClNormalizationWorkloadTest&lt;ClNormalizationFloatWorkload, armnn::DataType::Float16&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>);</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;}</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateNormalizationFloat32NhwcWorkload&quot;</span>)</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;{</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    ClNormalizationWorkloadTest&lt;ClNormalizationFloatWorkload, armnn::DataType::Float32&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;}</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateNormalizationFloat16NhwcWorkload&quot;</span>)</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;{</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    ClNormalizationWorkloadTest&lt;ClNormalizationFloatWorkload, armnn::DataType::Float16&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;}</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClPooling2dWorkloadTest(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout)</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;{</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keyword">auto</span> workload = CreatePooling2dWorkloadTest&lt;ClPooling2dWorkload, DataType&gt;(factory, graph, dataLayout);</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputShape  = (dataLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>) ? std::initializer_list&lt;unsigned int&gt;({3, 2, 5, 5})</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                                                               : std::initializer_list&lt;unsigned int&gt;({3, 5, 5, 2});</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape = (dataLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>) ? std::initializer_list&lt;unsigned int&gt;({3, 2, 2, 4})</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                                                               : std::initializer_list&lt;unsigned int&gt;({3, 2, 4, 2});</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="comment">// Check that inputs/outputs are as we expect them (see definition of CreatePooling2dWorkloadTest).</span></div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <a class="code" href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">Pooling2dQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="keyword">auto</span> inputHandle  = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a>[0]);</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>[0]);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    CHECK((inputHandle-&gt;GetShape() == inputShape));</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    CHECK((outputHandle-&gt;GetShape() == outputShape));</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;}</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreatePooling2dFloatNchwWorkload&quot;</span>)</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;{</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    ClPooling2dWorkloadTest&lt;armnn::DataType::Float32&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>);</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;}</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreatePooling2dFloatNhwcWorkload&quot;</span>)</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;{</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    ClPooling2dWorkloadTest&lt;armnn::DataType::Float32&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;}</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreatePooling2dFloat16NchwWorkload&quot;</span>)</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;{</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    ClPooling2dWorkloadTest&lt;armnn::DataType::Float16&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>);</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;}</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreatePooling2dFloat16NhwcWorkload&quot;</span>)</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;{</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    ClPooling2dWorkloadTest&lt;armnn::DataType::Float16&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;}</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClCreatePreluWorkloadTest(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&amp; inputShape,</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&amp; alphaShape,</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a>&amp; outputShape,</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                                      <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> dataType)</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;{</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;            ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="keyword">auto</span> workload = CreatePreluWorkloadTest&lt;ClPreluWorkload&gt;(factory,</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                                                             graph,</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                                                             inputShape,</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                                                             alphaShape,</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                                                             outputShape,</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                                                             dataType);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="comment">// Checks that outputs and inputs are as we expect them (see definition of CreatePreluWorkloadTest).</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <a class="code" href="structarmnn_1_1_prelu_queue_descriptor.xhtml">PreluQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <span class="keyword">auto</span> inputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keyword">auto</span> alphaHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[1]);</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    CHECK((inputHandle-&gt;GetShape() == inputShape));</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    CHECK((alphaHandle-&gt;GetShape() == alphaShape));</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    CHECK((outputHandle-&gt;GetShape() == outputShape));</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;}</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreatePreluFloat16Workload&quot;</span>)</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;{</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    ClCreatePreluWorkloadTest({ 1, 4, 1, 2 }, { 5, 4, 3, 1 }, { 5, 4, 3, 2 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>);</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;}</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreatePreluFloatWorkload&quot;</span>)</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;{</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    ClCreatePreluWorkloadTest({ 1, 4, 1, 2 }, { 5, 4, 3, 1 }, { 5, 4, 3, 2 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>);</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;}</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreatePreluUint8Workload&quot;</span>)</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;{</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    ClCreatePreluWorkloadTest({ 1, 4, 1, 2 }, { 5, 4, 3, 1 }, { 5, 4, 3, 2 }, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">DataType::QAsymmU8</a>);</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;}</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClCreateReshapeWorkloadTest()</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;{</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <span class="keyword">auto</span> workload = CreateReshapeWorkloadTest&lt;ClReshapeWorkload, DataType&gt;(factory, graph);</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    <span class="comment">// Checks that outputs and inputs are as we expect them (see definition of CreateReshapeWorkloadTest).</span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    <a class="code" href="structarmnn_1_1_reshape_queue_descriptor.xhtml">ReshapeQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    <span class="keyword">auto</span> inputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    <span class="keyword">auto</span> predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, {4, 1});</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, {1, 4});</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;}</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateReshapeFloatWorkload&quot;</span>)</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;{</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    ClCreateReshapeWorkloadTest&lt;armnn::DataType::Float32&gt;();</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;}</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateReshapeFloat16Workload&quot;</span>)</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;{</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    ClCreateReshapeWorkloadTest&lt;armnn::DataType::Float16&gt;();</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;}</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateReshapeUint8Workload&quot;</span>)</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;{</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    ClCreateReshapeWorkloadTest&lt;armnn::DataType::QAsymmU8&gt;();</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;}</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> SoftmaxWorkloadType, <span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClSoftmaxWorkloadTest()</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;{</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    <span class="keyword">auto</span> workload = CreateSoftmaxWorkloadTest&lt;SoftmaxWorkloadType, DataType&gt;(factory, graph);</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    <span class="comment">// Checks that inputs/outputs are as we expect them (see definition of ClSoftmaxFloatWorkload).</span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    <a class="code" href="structarmnn_1_1_softmax_queue_descriptor.xhtml">SoftmaxQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    <span class="keyword">auto</span> inputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> tensorInfo({4, 1}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>);</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a>)</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    {</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        tensorInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">SetQuantizationOffset</a>(0);</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        tensorInfo.SetQuantizationScale(1.f / 256);</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    }</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>)</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    {</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        tensorInfo.SetQuantizationOffset(-128);</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        tensorInfo.SetQuantizationScale(1.f / 256);</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    }</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <span class="keyword">auto</span> predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, {4, 1});</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, {4, 1});</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;}</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateSoftmaxFloat32WorkloadTest&quot;</span>)</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;{</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    ClSoftmaxWorkloadTest&lt;ClSoftmaxWorkload, armnn::DataType::Float32&gt;();</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;}</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateSoftmaxFloat16WorkloadTest&quot;</span>)</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;{</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    ClSoftmaxWorkloadTest&lt;ClSoftmaxWorkload, armnn::DataType::Float16&gt;();</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;}</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateSoftmaxQAsymmU8Workload&quot;</span>)</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;{</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    ClSoftmaxWorkloadTest&lt;ClSoftmaxWorkload, armnn::DataType::QAsymmU8&gt;();</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;}</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateSoftmaxQAsymmS8Workload&quot;</span>)</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;{</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    ClSoftmaxWorkloadTest&lt;ClSoftmaxWorkload, armnn::DataType::QAsymmS8&gt;();</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;}</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClSplitterWorkloadTest()</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;{</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    <span class="keyword">auto</span> workload = CreateSplitterWorkloadTest&lt;ClSplitterWorkload, DataType&gt;(factory, graph);</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    <span class="comment">// Checks that outputs are as we expect them (see definition of CreateSplitterWorkloadTest).</span></div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    <a class="code" href="structarmnn_1_1_splitter_queue_descriptor.xhtml">SplitterQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <span class="keyword">auto</span> inputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    <span class="keyword">auto</span> predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, {5, 7, 7});</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    <span class="keyword">auto</span> outputHandle1 = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[1]);</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle1, {2, 7, 7});</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    <span class="keyword">auto</span> outputHandle2 = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[2]);</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle2, {2, 7, 7});</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    <span class="keyword">auto</span> outputHandle0 = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle0, {1, 7, 7});</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;}</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateSplitterFloatWorkload&quot;</span>)</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;{</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    ClSplitterWorkloadTest&lt;armnn::DataType::Float32&gt;();</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;}</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateSplitterFloat16Workload&quot;</span>)</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;{</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    ClSplitterWorkloadTest&lt;armnn::DataType::Float16&gt;();</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;}</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClSplitterConcatTest()</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;{</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <span class="comment">// Tests that it is possible to decide which output of the splitter layer</span></div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    <span class="comment">// should be lined to which input of the concat layer.</span></div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    <span class="comment">// We test that is is possible to specify 0th output</span></div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <span class="comment">// of the splitter to be the 1st input to the concat and the 1st output of the splitter  to be 0th input</span></div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    <span class="comment">// of the concat.</span></div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    <span class="keyword">auto</span> workloads =</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;        CreateSplitterConcatWorkloadTest&lt;ClSplitterWorkload, ClConcatWorkload, DataType&gt;</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;            (factory, graph);</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    <span class="keyword">auto</span> wlSplitter = std::move(workloads.first);</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    <span class="keyword">auto</span> wlConcat = std::move(workloads.second);</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    <span class="comment">//Checks that the index of inputs/outputs matches what we declared on InputDescriptor construction.</span></div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    <a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>* sOut0 = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>*<span class="keyword">&gt;</span>(wlSplitter-&gt;GetData().m_Outputs[0]);</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    <a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>* sOut1 = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>*<span class="keyword">&gt;</span>(wlSplitter-&gt;GetData().m_Outputs[1]);</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    <a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>* mIn0 = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>*<span class="keyword">&gt;</span>(wlConcat-&gt;GetData().m_Inputs[0]);</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    <a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>* mIn1 = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>*<span class="keyword">&gt;</span>(wlConcat-&gt;GetData().m_Inputs[1]);</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    CHECK(sOut0);</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    CHECK(sOut1);</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    CHECK(mIn0);</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    CHECK(mIn1);</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <span class="comment">//Fliped order of inputs/outputs.</span></div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    <span class="keywordtype">bool</span> validDataPointers = (sOut0 == mIn1) &amp;&amp; (sOut1 == mIn0);</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    CHECK(validDataPointers);</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    <span class="comment">//Also make sure that the inputs are subtensors of one tensor and outputs are sub tensors of another tensor.</span></div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    <span class="keywordtype">bool</span> validSubTensorParents = (mIn0-&gt;<a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml#acc4bae0ff435653e44b6e6eed89c08fa">GetTensor</a>().parent() == mIn1-&gt;<a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml#acc4bae0ff435653e44b6e6eed89c08fa">GetTensor</a>().parent())</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;                                    &amp;&amp; (sOut0-&gt;<a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml#acc4bae0ff435653e44b6e6eed89c08fa">GetTensor</a>().parent() == sOut1-&gt;<a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml#acc4bae0ff435653e44b6e6eed89c08fa">GetTensor</a>().parent());</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    CHECK(validSubTensorParents);</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;}</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateSplitterConcatFloatWorkload&quot;</span>)</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;{</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    ClSplitterConcatTest&lt;armnn::DataType::Float32&gt;();</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;}</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateSplitterConcatFloat16Workload&quot;</span>)</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;{</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    ClSplitterConcatTest&lt;armnn::DataType::Float16&gt;();</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;}</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateSingleOutputMultipleInputs&quot;</span>)</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;{</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    <span class="comment">// Test that it is possible to assign multiple (two) different layers to each of the outputs of a splitter layer.</span></div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    <span class="comment">// We create a splitter with two outputs. That each of those outputs is used by two different activation layers.</span></div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    std::unique_ptr&lt;ClSplitterWorkload&gt; wlSplitter;</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    std::unique_ptr&lt;ClActivationWorkload&gt; wlActiv0_0;</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    std::unique_ptr&lt;ClActivationWorkload&gt; wlActiv0_1;</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    std::unique_ptr&lt;ClActivationWorkload&gt; wlActiv1_0;</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    std::unique_ptr&lt;ClActivationWorkload&gt; wlActiv1_1;</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    CreateSplitterMultipleInputsOneOutputWorkloadTest&lt;<a class="code" href="classarmnn_1_1_cl_splitter_workload.xhtml">ClSplitterWorkload</a>,</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;        <a class="code" href="classarmnn_1_1_cl_activation_workload.xhtml">ClActivationWorkload</a>, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a>&gt;(factory, graph, wlSplitter, wlActiv0_0, wlActiv0_1,</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                                                               wlActiv1_0, wlActiv1_1);</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <span class="comment">//Checks that the index of inputs/outputs matches what we declared on InputDescriptor construction.</span></div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    <a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>* sOut0 = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>*<span class="keyword">&gt;</span>(wlSplitter-&gt;GetData().m_Outputs[0]);</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;    <a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>* sOut1 = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>*<span class="keyword">&gt;</span>(wlSplitter-&gt;GetData().m_Outputs[1]);</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    <a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>* activ0_0Im = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>*<span class="keyword">&gt;</span>(wlActiv0_0-&gt;GetData().m_Inputs[0]);</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    <a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>* activ0_1Im = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>*<span class="keyword">&gt;</span>(wlActiv0_1-&gt;GetData().m_Inputs[0]);</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>* activ1_0Im = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>*<span class="keyword">&gt;</span>(wlActiv1_0-&gt;GetData().m_Inputs[0]);</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    <a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>* activ1_1Im = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a>*<span class="keyword">&gt;</span>(wlActiv1_1-&gt;GetData().m_Inputs[0]);</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    CHECK(sOut0);</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    CHECK(sOut1);</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    CHECK(activ0_0Im);</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    CHECK(activ0_1Im);</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    CHECK(activ1_0Im);</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    CHECK(activ1_1Im);</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    <span class="keywordtype">bool</span> validDataPointers = (sOut0 == activ0_0Im) &amp;&amp; (sOut0 == activ0_1Im) &amp;&amp;</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                             (sOut1 == activ1_0Im) &amp;&amp; (sOut1 == activ1_1Im);</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;    CHECK(validDataPointers);</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;}</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;<span class="preprocessor">#if defined(ARMNNREF_ENABLED)</span></div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;<span class="comment">// This test unit needs the reference backend, it&#39;s not available if the reference backend is not built</span></div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateMemCopyWorkloadsCl&quot;</span>)</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;{</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    CreateMemCopyWorkloads&lt;IClTensorHandle&gt;(factory);</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;}</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> L2NormalizationWorkloadType, <span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClL2NormalizationWorkloadTest(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout)</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;{</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    <span class="keyword">auto</span> workload =</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;            CreateL2NormalizationWorkloadTest&lt;L2NormalizationWorkloadType, DataType&gt;(factory, graph, dataLayout);</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    <span class="comment">// Checks that inputs/outputs are as we expect them (see definition of CreateNormalizationWorkloadTest).</span></div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    <a class="code" href="structarmnn_1_1_l2_normalization_queue_descriptor.xhtml">L2NormalizationQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    <span class="keyword">auto</span> inputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> inputShape  = (dataLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>) ? std::initializer_list&lt;unsigned int&gt;({ 5, 20, 50, 67 })</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                                                               : std::initializer_list&lt;unsigned int&gt;({ 5, 50, 67, 20 });</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> outputShape = (dataLayout == <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>) ? std::initializer_list&lt;unsigned int&gt;({ 5, 20, 50, 67 })</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                                                               : std::initializer_list&lt;unsigned int&gt;({ 5, 50, 67, 20 });</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    CHECK((inputHandle-&gt;GetShape() == inputShape));</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    CHECK((outputHandle-&gt;GetShape() == outputShape));</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;}</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateL2NormalizationFloatNchwWorkload&quot;</span>)</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;{</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    ClL2NormalizationWorkloadTest&lt;ClL2NormalizationFloatWorkload, armnn::DataType::Float32&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>);</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;}</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateL2NormalizationFloatNhwcWorkload&quot;</span>)</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;{</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    ClL2NormalizationWorkloadTest&lt;ClL2NormalizationFloatWorkload, armnn::DataType::Float32&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;}</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateL2NormalizationFloat16NchwWorkload&quot;</span>)</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;{</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    ClL2NormalizationWorkloadTest&lt;ClL2NormalizationFloatWorkload, armnn::DataType::Float16&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>);</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;}</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateL2NormalizationFloat16NhwcWorkload&quot;</span>)</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;{</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;    ClL2NormalizationWorkloadTest&lt;ClL2NormalizationFloatWorkload, armnn::DataType::Float16&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;}</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> LogSoftmaxWorkloadType, <span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClCreateLogSoftmaxWorkloadTest()</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;{</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;            ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    <span class="keyword">auto</span> workload = CreateLogSoftmaxWorkloadTest&lt;LogSoftmaxWorkloadType, DataType&gt;(factory, graph);</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    <span class="comment">// Checks that outputs and inputs are as we expect them (see definition of CreateLogSoftmaxWorkloadTest).</span></div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    <a class="code" href="structarmnn_1_1_log_softmax_queue_descriptor.xhtml">LogSoftmaxQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <span class="keyword">auto</span> inputHandle  = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    <span class="keyword">auto</span> predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, {4, 1});</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, {4, 1});</div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;}</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateLogSoftmaxFloat32WorkloadTest&quot;</span>)</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;{</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    ClCreateLogSoftmaxWorkloadTest&lt;ClLogSoftmaxWorkload, armnn::DataType::Float32&gt;();</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;}</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> LstmWorkloadType&gt;</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClCreateLstmWorkloadTest()</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;{</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    <span class="keyword">auto</span> workload = CreateLstmWorkloadTest&lt;LstmWorkloadType&gt;(factory, graph);</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    <a class="code" href="structarmnn_1_1_lstm_queue_descriptor.xhtml">LstmQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    <span class="keyword">auto</span> inputHandle  = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[1]);</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;    <span class="keyword">auto</span> predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, {2, 2});</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, {2, 4});</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;}</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateLSTMWorkloadFloatWorkload&quot;</span>)</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;{</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    ClCreateLstmWorkloadTest&lt;ClLstmFloatWorkload&gt;();</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;}</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ResizeWorkloadType, <span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClResizeWorkloadTest(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout)</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;{</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    <span class="keyword">auto</span> workload = CreateResizeBilinearWorkloadTest&lt;ResizeWorkloadType, DataType&gt;(factory, graph, dataLayout);</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;    <span class="keyword">auto</span> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    <span class="keyword">auto</span> inputHandle  = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;    <a class="code" href="classarmnn_1_1_predicate_result.xhtml">armnn::PredicateResult</a> predResult(<span class="keyword">true</span>);</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;    <span class="keywordflow">switch</span> (dataLayout)</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;    {</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>:</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;            predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, { 2, 4, 4, 3 });</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;            CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;            predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, { 2, 2, 2, 3 });</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;            CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;        <span class="keywordflow">default</span>: <span class="comment">// DataLayout::NCHW</span></div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;            predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, { 2, 3, 4, 4 });</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;            CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;            predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, { 2, 3, 2, 2 });</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;            CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    }</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;}</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateResizeFloat32NchwWorkload&quot;</span>)</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;{</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;    ClResizeWorkloadTest&lt;ClResizeWorkload, armnn::DataType::Float32&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>);</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;}</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;</div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateResizeFloat16NchwWorkload&quot;</span>)</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;{</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    ClResizeWorkloadTest&lt;ClResizeWorkload, armnn::DataType::Float16&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>);</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;}</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateResizeUint8NchwWorkload&quot;</span>)</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;{</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;    ClResizeWorkloadTest&lt;ClResizeWorkload, armnn::DataType::QAsymmU8&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">DataLayout::NCHW</a>);</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;}</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateResizeFloat32NhwcWorkload&quot;</span>)</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;{</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;    ClResizeWorkloadTest&lt;ClResizeWorkload, armnn::DataType::Float32&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;}</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateResizeFloat16NhwcWorkload&quot;</span>)</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;{</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;    ClResizeWorkloadTest&lt;ClResizeWorkload, armnn::DataType::Float16&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;}</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateResizeUint8NhwcWorkload&quot;</span>)</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;{</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    ClResizeWorkloadTest&lt;ClResizeWorkload, armnn::DataType::QAsymmU8&gt;(<a class="code" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>);</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;}</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> MeanWorkloadType, <span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClMeanWorkloadTest()</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;{</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    <span class="keyword">auto</span> workload = CreateMeanWorkloadTest&lt;MeanWorkloadType, DataType&gt;(factory, graph);</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    <span class="comment">// Checks that inputs/outputs are as we expect them (see definition of CreateMeanWorkloadTest).</span></div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    <a class="code" href="structarmnn_1_1_mean_queue_descriptor.xhtml">MeanQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    <span class="keyword">auto</span> inputHandle  = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;    <span class="comment">// The first dimension (batch size) in both input and output is singular thus it has been reduced by ACL.</span></div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    <span class="keyword">auto</span> predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, {  1, 3, 7, 4 });</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, { 1, 4 });</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;}</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateMeanFloat32Workload&quot;</span>)</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;{</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    ClMeanWorkloadTest&lt;ClMeanWorkload, armnn::DataType::Float32&gt;();</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;}</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateMeanFloat16Workload&quot;</span>)</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;{</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;    ClMeanWorkloadTest&lt;ClMeanWorkload, armnn::DataType::Float16&gt;();</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;}</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateMeanUint8Workload&quot;</span>)</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;{</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;    ClMeanWorkloadTest&lt;ClMeanWorkload, armnn::DataType::QAsymmU8&gt;();</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;}</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ConcatWorkloadType, armnn::DataType DataType&gt;</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClCreateConcatWorkloadTest(std::initializer_list&lt;unsigned int&gt; outputShape,</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;                                       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> concatAxis)</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;{</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;        ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    <span class="keyword">auto</span> workload = CreateConcatWorkloadTest&lt;ConcatWorkloadType, DataType&gt;(factory, graph, outputShape, concatAxis);</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    <a class="code" href="structarmnn_1_1_concat_queue_descriptor.xhtml">ConcatQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;    <span class="keyword">auto</span> inputHandle0  = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;    <span class="keyword">auto</span> inputHandle1  = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[1]);</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    <span class="keyword">auto</span> predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle0, { 2, 3, 2, 5 });</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle1, { 2, 3, 2, 5 });</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, outputShape);</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;}</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateConcatDim0Float32Workload&quot;</span>)</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;{</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    ClCreateConcatWorkloadTest&lt;ClConcatWorkload, armnn::DataType::Float32&gt;({ 4, 3, 2, 5 }, 0);</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;}</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateConcatDim1Float32Workload&quot;</span>)</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;{</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    ClCreateConcatWorkloadTest&lt;ClConcatWorkload, armnn::DataType::Float32&gt;({ 2, 6, 2, 5 }, 1);</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;}</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateConcatDim3Float32Workload&quot;</span>)</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;{</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    ClCreateConcatWorkloadTest&lt;ClConcatWorkload, armnn::DataType::Float32&gt;({ 2, 3, 2, 10 }, 3);</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;}</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateConcatDim0Uint8Workload&quot;</span>)</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;{</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    ClCreateConcatWorkloadTest&lt;ClConcatWorkload, armnn::DataType::QAsymmU8&gt;({ 4, 3, 2, 5 }, 0);</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;}</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateConcatDim1Uint8Workload&quot;</span>)</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;{</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;    ClCreateConcatWorkloadTest&lt;ClConcatWorkload, armnn::DataType::QAsymmU8&gt;({ 2, 6, 2, 5 }, 1);</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;}</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateConcatDim3Uint8Workload&quot;</span>)</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;{</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;    ClCreateConcatWorkloadTest&lt;ClConcatWorkload, armnn::DataType::QAsymmU8&gt;({ 2, 3, 2, 10 }, 3);</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;}</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> SpaceToDepthWorkloadType, <span class="keyword">typename</span> armnn::DataType DataType&gt;</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClSpaceToDepthWorkloadTest()</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;{</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;            ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    <span class="keyword">auto</span> workload = CreateSpaceToDepthWorkloadTest&lt;SpaceToDepthWorkloadType, DataType&gt;(factory, graph);</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;    <a class="code" href="structarmnn_1_1_space_to_depth_queue_descriptor.xhtml">SpaceToDepthQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;    <span class="keyword">auto</span> inputHandle  = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;    <span class="keyword">auto</span> predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, { 1, 2, 2, 1 });</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;    predResult = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, { 1, 1, 1, 4 });</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;    CHECK_MESSAGE(predResult.m_Result, predResult.m_Message.str());</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;}</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateSpaceToDepthFloat32Workload&quot;</span>)</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;{</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;    ClSpaceToDepthWorkloadTest&lt;ClSpaceToDepthWorkload, armnn::DataType::Float32&gt;();</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;}</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateSpaceToDepthFloat16Workload&quot;</span>)</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;{</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;    ClSpaceToDepthWorkloadTest&lt;ClSpaceToDepthWorkload, armnn::DataType::Float16&gt;();</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;}</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateSpaceToDepthQAsymm8Workload&quot;</span>)</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;{</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    ClSpaceToDepthWorkloadTest&lt;ClSpaceToDepthWorkload, armnn::DataType::QAsymmU8&gt;();</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;}</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateSpaceToDepthQSymm16Workload&quot;</span>)</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;{</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;    ClSpaceToDepthWorkloadTest&lt;ClSpaceToDepthWorkload, armnn::DataType::QSymmS16&gt;();</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;}</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;<span class="keyword">template</span> &lt;armnn::DataType DataType&gt;</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClCreateStackWorkloadTest(<span class="keyword">const</span> std::initializer_list&lt;unsigned int&gt;&amp; inputShape,</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;                                      <span class="keyword">const</span> std::initializer_list&lt;unsigned int&gt;&amp; outputShape,</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;                                      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> axis,</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;                                      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numInputs)</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;{</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">armnn::Graph</a> graph;</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;            ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;    <span class="keyword">auto</span> workload = CreateStackWorkloadTest&lt;ClStackWorkload, DataType&gt;(factory,</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;                                                                       graph,</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;                                                                       <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(inputShape),</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;                                                                       <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>(outputShape),</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;                                                                       axis,</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;                                                                       numInputs);</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    <span class="comment">// Check inputs and output are as expected</span></div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;    <a class="code" href="structarmnn_1_1_stack_queue_descriptor.xhtml">StackQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numInputs; ++i)</div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    {</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;        <span class="keyword">auto</span> inputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Inputs[i]);</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;        <span class="keyword">auto</span> predResult1 = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(inputHandle, inputShape);</div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;        CHECK_MESSAGE(predResult1.m_Result, predResult1.m_Message.str());</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    }</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;    <span class="keyword">auto</span> outputHandle = PolymorphicDowncast&lt;IClTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;    <span class="keyword">auto</span> predResult2 = <a class="code" href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a>(outputHandle, outputShape);</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    CHECK_MESSAGE(predResult2.m_Result, predResult2.m_Message.str());</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;}</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateStackFloat32Workload&quot;</span>)</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;{</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    ClCreateStackWorkloadTest&lt;armnn::DataType::Float32&gt;({ 3, 4, 5 }, { 3, 4, 2, 5 }, 2, 2);</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;}</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateStackFloat16Workload&quot;</span>)</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;{</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;    ClCreateStackWorkloadTest&lt;armnn::DataType::Float16&gt;({ 3, 4, 5 }, { 3, 4, 2, 5 }, 2, 2);</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;}</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateStackUint8Workload&quot;</span>)</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;{</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;    ClCreateStackWorkloadTest&lt;armnn::DataType::QAsymmU8&gt;({ 3, 4, 5 }, { 3, 4, 2, 5 }, 2, 2);</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;}</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QLstmWorkloadType&gt;</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClCreateQLstmWorkloadTest()</div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;{</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory = ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;</div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;    <span class="keyword">auto</span> workload = CreateQLstmWorkloadTest&lt;QLstmWorkloadType&gt;(factory, graph);</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;    <a class="code" href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">QLstmQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">IAclTensorHandle</a>* inputHandle = PolymorphicDowncast&lt;IAclTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;    CHECK((inputHandle-&gt;<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">GetShape</a>() == <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({2, 4})));</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;    CHECK((inputHandle-&gt;<a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml#a3767f569fc55323ddf7b2ee57987d9c5">GetDataType</a>() == arm_compute::DataType::QASYMM8_SIGNED));</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">IAclTensorHandle</a>* cellStateOutHandle = PolymorphicDowncast&lt;IAclTensorHandle*&gt;(queueDescriptor.m_Outputs[1]);</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;    CHECK((cellStateOutHandle-&gt;<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">GetShape</a>() == <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({2, 4})));</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;    CHECK((cellStateOutHandle-&gt;<a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml#a3767f569fc55323ddf7b2ee57987d9c5">GetDataType</a>() == arm_compute::DataType::QSYMM16));</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">IAclTensorHandle</a>* outputHandle = PolymorphicDowncast&lt;IAclTensorHandle*&gt;(queueDescriptor.m_Outputs[2]);</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;    CHECK((outputHandle-&gt;<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">GetShape</a>() == <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({2, 4})));</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    CHECK((outputHandle-&gt;<a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml#a3767f569fc55323ddf7b2ee57987d9c5">GetDataType</a>() == arm_compute::DataType::QASYMM8_SIGNED));</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;}</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateQLstmWorkloadTest&quot;</span>)</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;{</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    ClCreateQLstmWorkloadTest&lt;ClQLstmWorkload&gt;();</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;}</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> QuantizedLstmWorkloadType&gt;</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClCreateQuantizedLstmWorkloadTest()</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;{</div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn_1_1armcomputetensorutils.xhtml">armnn::armcomputetensorutils</a>;</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory =</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;            ClWorkloadFactoryHelper::GetFactory(ClWorkloadFactoryHelper::GetMemoryManager());</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;    <span class="keyword">auto</span> workload = CreateQuantizedLstmWorkloadTest&lt;QuantizedLstmWorkloadType&gt;(factory, graph);</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;    <a class="code" href="structarmnn_1_1_quantized_lstm_queue_descriptor.xhtml">QuantizedLstmQueueDescriptor</a> queueDescriptor = workload-&gt;GetData();</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">IAclTensorHandle</a>* inputHandle = PolymorphicDowncast&lt;IAclTensorHandle*&gt;(queueDescriptor.m_Inputs[0]);</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;    CHECK((inputHandle-&gt;<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">GetShape</a>() == <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({2, 2})));</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    CHECK((inputHandle-&gt;<a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml#a3767f569fc55323ddf7b2ee57987d9c5">GetDataType</a>() == arm_compute::DataType::QASYMM8));</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">IAclTensorHandle</a>* cellStateInHandle = PolymorphicDowncast&lt;IAclTensorHandle*&gt;(queueDescriptor.m_Inputs[1]);</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;    CHECK((cellStateInHandle-&gt;<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">GetShape</a>() == <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({2, 4})));</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;    CHECK((cellStateInHandle-&gt;<a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml#a3767f569fc55323ddf7b2ee57987d9c5">GetDataType</a>() == arm_compute::DataType::QSYMM16));</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">IAclTensorHandle</a>* outputStateInHandle = PolymorphicDowncast&lt;IAclTensorHandle*&gt;(queueDescriptor.m_Inputs[2]);</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;    CHECK((outputStateInHandle-&gt;<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">GetShape</a>() == <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({2, 4})));</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;    CHECK((outputStateInHandle-&gt;<a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml#a3767f569fc55323ddf7b2ee57987d9c5">GetDataType</a>() == arm_compute::DataType::QASYMM8));</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">IAclTensorHandle</a>* cellStateOutHandle = PolymorphicDowncast&lt;IAclTensorHandle*&gt;(queueDescriptor.m_Outputs[0]);</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;    CHECK((cellStateOutHandle-&gt;<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">GetShape</a>() == <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({2, 4})));</div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;    CHECK((cellStateOutHandle-&gt;<a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml#a3767f569fc55323ddf7b2ee57987d9c5">GetDataType</a>() == arm_compute::DataType::QSYMM16));</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;    <a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml">IAclTensorHandle</a>* outputStateOutHandle = PolymorphicDowncast&lt;IAclTensorHandle*&gt;(queueDescriptor.m_Outputs[1]);</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;    CHECK((outputStateOutHandle-&gt;<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">GetShape</a>() == <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>({2, 4})));</div><div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;    CHECK((outputStateOutHandle-&gt;<a class="code" href="classarmnn_1_1_i_acl_tensor_handle.xhtml#a3767f569fc55323ddf7b2ee57987d9c5">GetDataType</a>() == arm_compute::DataType::QASYMM8));</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;}</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;<a class="code" href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a>(<a class="code" href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixture</a>, <span class="stringliteral">&quot;CreateQuantizedLstmWorkload&quot;</span>)</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;{</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;    ClCreateQuantizedLstmWorkloadTest&lt;ClQuantizedLstmWorkload&gt;();</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;}</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;<span class="keyword">template</span> &lt;armnn::DataType DataType&gt;</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> ClCreateActivationWorkloadReplaceFunctionsTest()</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;{</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;    std::shared_ptr&lt;ClMemoryManager&gt; memoryManager = std::make_shared&lt;ClMemoryManager&gt;(</div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;            std::make_unique&lt;arm_compute::CLBufferAllocator&gt;());</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;    <a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a> graph;</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;    <a class="code" href="classarmnn_1_1_cl_workload_factory.xhtml">ClWorkloadFactory</a> factory = ClWorkloadFactoryHelper::GetFactory(memoryManager);</div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;    <span class="comment">// input and output are created as armnn::TensorInfo tensorInfo({1, 1}, DataType)</span></div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;    <span class="keyword">auto</span> workloadPtr = CreateActivationWorkloadTest&lt;ClActivationWorkload, DataType&gt;(factory, graph);</div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;    <span class="comment">// new input and output tensor handlers are created and then replace in the workload</span></div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_cl_tensor_handle_factory.xhtml">ClTensorHandleFactory</a> tensorHandleFactory(memoryManager);</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> inputInfo({2 , 2}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>);</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> outputInfo({2 , 2}, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">DataType::Float16</a>);</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;    unique_ptr&lt;ITensorHandle&gt; inputHandle  = tensorHandleFactory.CreateTensorHandle(inputInfo, <span class="keyword">true</span>);</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;    inputHandle-&gt;<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#a04149d0f9b9c54c05e95693111490daf">Manage</a>();</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;    inputHandle-&gt;Allocate();</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;    unique_ptr&lt;ITensorHandle&gt; outputHandle = tensorHandleFactory.CreateTensorHandle(outputInfo, <span class="keyword">true</span>);</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;    outputHandle-&gt;<a class="code" href="classarmnn_1_1_i_tensor_handle.xhtml#a04149d0f9b9c54c05e95693111490daf">Manage</a>();</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slot = 0;</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    CHECK_THROWS_AS(workloadPtr-&gt;ReplaceInputTensorHandle(inputHandle.get(), slot), <a class="code" href="classarmnn_1_1_unimplemented_exception.xhtml">UnimplementedException</a>);</div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;    CHECK_THROWS_AS(workloadPtr-&gt;ReplaceOutputTensorHandle(outputHandle.get(), slot), <a class="code" href="classarmnn_1_1_unimplemented_exception.xhtml">UnimplementedException</a>);</div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;}</div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;TEST_CASE(<span class="stringliteral">&quot;ClReplaceFunctionsfromFloat32toFloat16ActivationWorkload&quot;</span>)</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;{</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    ClCreateActivationWorkloadReplaceFunctionsTest&lt;armnn::DataType::Float32&gt;();</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;}</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;}</div><div class="ttc" id="structarmnn_1_1_multiplication_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_multiplication_queue_descriptor.xhtml">armnn::MultiplicationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00286">WorkloadData.hpp:286</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_workload_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_cl_workload_factory.xhtml">armnn::ClWorkloadFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_factory_8hpp_source.xhtml#l00021">ClWorkloadFactory.hpp:21</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_aa9e49717ebdb741e8c767741647fc618"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#aa9e49717ebdb741e8c767741647fc618">armnn::Convolution2dDescriptor::m_PadBottom</a></div><div class="ttdeci">uint32_t m_PadBottom</div><div class="ttdoc">Padding bottom value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00533">Descriptors.hpp:533</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_aea202e14d8874cefd9a0f778022b7e25"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#aea202e14d8874cefd9a0f778022b7e25">armnn::Convolution2dDescriptor::m_BiasEnabled</a></div><div class="ttdeci">bool m_BiasEnabled</div><div class="ttdoc">Enable/disable bias. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00543">Descriptors.hpp:543</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_a6089e1ca91914015777ea780a513131a"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a6089e1ca91914015777ea780a513131a">armnn::Convolution2dDescriptor::m_DataLayout</a></div><div class="ttdeci">DataLayout m_DataLayout</div><div class="ttdoc">The data layout to be used (NCHW, NHWC). </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00545">Descriptors.hpp:545</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">armnn::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00062">Types.hpp:62</a></div></div>
<div class="ttc" id="_cl_create_workload_tests_8cpp_xhtml_aa07afce0809a8e612748eb080bdc24f1"><div class="ttname"><a href="_cl_create_workload_tests_8cpp.xhtml#aa07afce0809a8e612748eb080bdc24f1">CompareIClTensorHandleShape</a></div><div class="ttdeci">armnn::PredicateResult CompareIClTensorHandleShape(IClTensorHandle *tensorHandle, std::initializer_list&lt; unsigned int &gt; expectedDimensions)</div><div class="ttdef"><b>Definition:</b> <a href="_cl_create_workload_tests_8cpp_source.xhtml#l00029">ClCreateWorkloadTests.cpp:29</a></div></div>
<div class="ttc" id="structarmnn_1_1_splitter_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_splitter_queue_descriptor.xhtml">armnn::SplitterQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00111">WorkloadData.hpp:111</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_queue_descriptor.xhtml">armnn::QuantizedLstmQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00654">WorkloadData.hpp:654</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_predicate_result_xhtml"><div class="ttname"><a href="classarmnn_1_1_predicate_result.xhtml">armnn::PredicateResult</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_test_utils_2_predicate_result_8hpp_source.xhtml#l00012">PredicateResult.hpp:12</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5b6893cda5b69359a4244c06054da18f"><div class="ttname"><a href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">armnn::ModelOptions</a></div><div class="ttdeci">std::vector&lt; BackendOptions &gt; ModelOptions</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00018">BackendOptions.hpp:18</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a></div><div class="ttdoc">A Convolution2dDescriptor for the Convolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00495">Descriptors.hpp:495</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6accedffbc6e5308e33d3843e8bdc0dad7">armnn::DataType::Signed32</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_addition_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_cl_addition_workload.xhtml">armnn::ClAdditionWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_cl_addition_workload_8hpp_source.xhtml#l00015">ClAdditionWorkload.hpp:15</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_stack_queue_descriptor.xhtml">armnn::StackQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00152">WorkloadData.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_unimplemented_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_unimplemented_exception.xhtml">armnn::UnimplementedException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00098">Exceptions.hpp:98</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_xhtml_a04149d0f9b9c54c05e95693111490daf"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle.xhtml#a04149d0f9b9c54c05e95693111490daf">armnn::ITensorHandle::Manage</a></div><div class="ttdeci">virtual void Manage()=0</div><div class="ttdoc">Indicate to the memory manager that this resource is active. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="structarmnn_1_1_addition_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_addition_queue_descriptor.xhtml">armnn::AdditionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00280">WorkloadData.hpp:280</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_a002bc30e590d78cbb4f4d12171055ca7"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a002bc30e590d78cbb4f4d12171055ca7">armnn::Convolution2dDescriptor::m_PadRight</a></div><div class="ttdeci">uint32_t m_PadRight</div><div class="ttdoc">Padding right value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00529">Descriptors.hpp:529</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_tensor_handle_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_cl_tensor_handle_factory.xhtml">armnn::ClTensorHandleFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="_cl_tensor_handle_factory_8hpp_source.xhtml#l00020">ClTensorHandleFactory.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_queue_descriptor.xhtml">armnn::FullyConnectedQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00180">WorkloadData.hpp:180</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_prelu_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_prelu_queue_descriptor.xhtml">armnn::PreluQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00579">WorkloadData.hpp:579</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_acl_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_acl_tensor_handle.xhtml">armnn::IAclTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_tensor_handle_8hpp_source.xhtml#l00016">ArmComputeTensorHandle.hpp:16</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_softmax_queue_descriptor.xhtml">armnn::SoftmaxQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00105">WorkloadData.hpp:105</a></div></div>
<div class="ttc" id="structarmnn_1_1_division_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_division_queue_descriptor.xhtml">armnn::DivisionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00292">WorkloadData.hpp:292</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_with_parameters_xhtml_aad91b9bbf7aa365d304febe79a3d1333"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml#aad91b9bbf7aa365d304febe79a3d1333">armnn::QueueDescriptorWithParameters::m_Parameters</a></div><div class="ttdeci">LayerDescriptor m_Parameters</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00066">WorkloadData.hpp:66</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_copy_utils_8hpp_xhtml_afaaca8c3f3a467d124bba44067d2afa8"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#afaaca8c3f3a467d124bba44067d2afa8">AllocateAndCopyDataToITensorHandle</a></div><div class="ttdeci">void AllocateAndCopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00019">TensorCopyUtils.cpp:19</a></div></div>
<div class="ttc" id="structarmnn_1_1_subtraction_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_subtraction_queue_descriptor.xhtml">armnn::SubtractionQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00298">WorkloadData.hpp:298</a></div></div>
<div class="ttc" id="structarmnn_1_1_concat_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_concat_queue_descriptor.xhtml">armnn::ConcatQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00130">WorkloadData.hpp:130</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_queue_descriptor.xhtml">armnn::SpaceToDepthQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00422">WorkloadData.hpp:422</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_acl_tensor_handle_xhtml_a3767f569fc55323ddf7b2ee57987d9c5"><div class="ttname"><a href="classarmnn_1_1_i_acl_tensor_handle.xhtml#a3767f569fc55323ddf7b2ee57987d9c5">armnn::IAclTensorHandle::GetDataType</a></div><div class="ttdeci">virtual arm_compute::DataType GetDataType() const =0</div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_a56b51f56cef50cdfa554258eecdab046"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#a56b51f56cef50cdfa554258eecdab046">armnn::Convolution2dDescriptor::m_PadTop</a></div><div class="ttdeci">uint32_t m_PadTop</div><div class="ttdoc">Padding top value in the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00531">Descriptors.hpp:531</a></div></div>
<div class="ttc" id="_mem_copy_tests_8cpp_xhtml_a3df1acc0ccc35bce0bd6c027e23e2c45"><div class="ttname"><a href="_mem_copy_tests_8cpp.xhtml#a3df1acc0ccc35bce0bd6c027e23e2c45">TEST_CASE_FIXTURE</a></div><div class="ttdeci">TEST_CASE_FIXTURE(ClContextControlFixture, &quot;CopyBetweenNeonAndGpu&quot;)</div><div class="ttdef"><b>Definition:</b> <a href="_mem_copy_tests_8cpp_source.xhtml#l00089">MemCopyTests.cpp:89</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_afe6a3377c4531315354def9023c8fdda"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#afe6a3377c4531315354def9023c8fdda">armnn::Convolution2dDescriptor::m_StrideX</a></div><div class="ttdeci">uint32_t m_StrideX</div><div class="ttdoc">Stride value when proceeding through input for the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00535">Descriptors.hpp:535</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_division_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_cl_division_workload.xhtml">armnn::ClDivisionWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_cl_division_workload_8hpp_source.xhtml#l00020">ClDivisionWorkload.hpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00048">Types.hpp:48</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_queue_descriptor.xhtml">armnn::LstmQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00432">WorkloadData.hpp:432</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::DataType::QAsymmU8</a></div></div>
<div class="ttc" id="classarmnn_1_1_scoped_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_scoped_tensor_handle.xhtml">armnn::ScopedTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_tensor_handle_8hpp_source.xhtml#l00115">TensorHandle.hpp:115</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::DataType::Float16</a></div></div>
<div class="ttc" id="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml">armnn::ConvertFp16ToFp32QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00494">WorkloadData.hpp:494</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_splitter_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_cl_splitter_workload.xhtml">armnn::ClSplitterWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_cl_splitter_workload_8hpp_source.xhtml#l00023">ClSplitterWorkload.hpp:23</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_activation_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_cl_activation_workload.xhtml">armnn::ClActivationWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_cl_activation_workload_8hpp_source.xhtml#l00018">ClActivationWorkload.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_multiplication_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_cl_multiplication_workload.xhtml">armnn::ClMultiplicationWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_cl_multiplication_workload_8hpp_source.xhtml#l00020">ClMultiplicationWorkload.hpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_import_tensor_handle_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_cl_import_tensor_handle_factory.xhtml">armnn::ClImportTensorHandleFactory</a></div><div class="ttdoc">This factory creates ClImportTensorHandles that refer to imported memory tensors. ...</div><div class="ttdef"><b>Definition:</b> <a href="_cl_import_tensor_handle_factory_8hpp_source.xhtml#l00023">ClImportTensorHandleFactory.hpp:23</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_xhtml_affd5aae75cad90f472f96cfd25a13f29"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle.xhtml#affd5aae75cad90f472f96cfd25a13f29">armnn::ITensorHandle::GetShape</a></div><div class="ttdeci">virtual TensorShape GetShape() const =0</div><div class="ttdoc">Get the number of elements for each dimension ordered from slowest iterating dimension to fastest ite...</div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_ac1fe174bbadfb39a2b636940c2e647c8"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac1fe174bbadfb39a2b636940c2e647c8">armnn::Convolution2dDescriptor::m_StrideY</a></div><div class="ttdeci">uint32_t m_StrideY</div><div class="ttdoc">Stride value when proceeding through input for the height dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00537">Descriptors.hpp:537</a></div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
<div class="ttc" id="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml">armnn::ConvertFp32ToFp16QueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00499">WorkloadData.hpp:499</a></div></div>
<div class="ttc" id="classarmnn_1_1_addition_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_addition_layer.xhtml">armnn::AdditionLayer</a></div><div class="ttdoc">This layer represents an addition operation. </div><div class="ttdef"><b>Definition:</b> <a href="_addition_layer_8hpp_source.xhtml#l00013">AdditionLayer.hpp:13</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_queue_descriptor.xhtml">armnn::Convolution2dQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00214">WorkloadData.hpp:214</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a></div><div class="ttdoc">Struct for the users to pass backend specific options. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00022">BackendOptions.hpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_subtraction_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_subtraction_layer.xhtml">armnn::SubtractionLayer</a></div><div class="ttdoc">This layer represents a subtraction operation. </div><div class="ttdef"><b>Definition:</b> <a href="_subtraction_layer_8hpp_source.xhtml#l00014">SubtractionLayer.hpp:14</a></div></div>
<div class="ttc" id="structarmnn_1_1_l2_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_l2_normalization_queue_descriptor.xhtml">armnn::L2NormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00390">WorkloadData.hpp:390</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_sub_tensor_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1_cl_sub_tensor_handle.xhtml">armnn::ClSubTensorHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_cl_tensor_handle_8hpp_source.xhtml#l00232">ClTensorHandle.hpp:232</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_xhtml_a6abd491bb99ffe88bd472c1ae5a1ed1a"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">armnn::QueueDescriptor::m_Outputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Outputs</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00027">WorkloadData.hpp:27</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_q_lstm_queue_descriptor.xhtml">armnn::QLstmQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00602">WorkloadData.hpp:602</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_queue_descriptor.xhtml">armnn::BatchNormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00333">WorkloadData.hpp:333</a></div></div>
<div class="ttc" id="classarmnn_1_1_division_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_division_layer.xhtml">armnn::DivisionLayer</a></div><div class="ttdoc">This layer represents a division operation. </div><div class="ttdef"><b>Definition:</b> <a href="_division_layer_8hpp_source.xhtml#l00014">DivisionLayer.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8">armnn::UnaryOperation</a></div><div class="ttdeci">UnaryOperation</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00124">Types.hpp:124</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about TensorInfos of a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::DataType::QSymmS8</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a63cbc581012c957f9d68d224ddc3e43c"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a63cbc581012c957f9d68d224ddc3e43c">armnn::TensorInfo::SetQuantizationOffset</a></div><div class="ttdeci">void SetQuantizationOffset(int32_t offset)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00489">Tensor.cpp:489</a></div></div>
<div class="ttc" id="struct_cl_context_control_fixture_base_xhtml"><div class="ttname"><a href="struct_cl_context_control_fixture_base.xhtml">ClContextControlFixtureBase</a></div><div class="ttdef"><b>Definition:</b> <a href="_cl_context_control_fixture_8hpp_source.xhtml#l00012">ClContextControlFixture.hpp:12</a></div></div>
<div class="ttc" id="structarmnn_1_1_queue_descriptor_xhtml_a4b50e46a6810018f3edecfb68b2a76b3"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">armnn::QueueDescriptor::m_Inputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Inputs</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00026">WorkloadData.hpp:26</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_subtraction_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_cl_subtraction_workload.xhtml">armnn::ClSubtractionWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_cl_subtraction_workload_8hpp_source.xhtml#l00015">ClSubtractionWorkload.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">armnn::DataLayout::NCHW</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_queue_descriptor.xhtml">armnn::Pooling2dQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00201">WorkloadData.hpp:201</a></div></div>
<div class="ttc" id="structarmnn_1_1_mean_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mean_queue_descriptor.xhtml">armnn::MeanQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00310">WorkloadData.hpp:310</a></div></div>
<div class="ttc" id="namespacearmnn_1_1armcomputetensorutils_xhtml"><div class="ttname"><a href="namespacearmnn_1_1armcomputetensorutils.xhtml">armnn::armcomputetensorutils</a></div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_tensor_utils_8cpp_source.xhtml#l00015">ArmComputeTensorUtils.cpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_multiplication_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_multiplication_layer.xhtml">armnn::MultiplicationLayer</a></div><div class="ttdoc">This layer represents a multiplication operation. </div><div class="ttdef"><b>Definition:</b> <a href="_multiplication_layer_8hpp_source.xhtml#l00014">MultiplicationLayer.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_sub_tensor_handle_xhtml_acc4bae0ff435653e44b6e6eed89c08fa"><div class="ttname"><a href="classarmnn_1_1_cl_sub_tensor_handle.xhtml#acc4bae0ff435653e44b6e6eed89c08fa">armnn::ClSubTensorHandle::GetTensor</a></div><div class="ttdeci">arm_compute::CLSubTensor &amp; GetTensor() override</div><div class="ttdef"><b>Definition:</b> <a href="_cl_tensor_handle_8hpp_source.xhtml#l00243">ClTensorHandle.hpp:243</a></div></div>
<div class="ttc" id="structarmnn_1_1_log_softmax_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_log_softmax_queue_descriptor.xhtml">armnn::LogSoftmaxQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00395">WorkloadData.hpp:395</a></div></div>
<div class="ttc" id="structarmnn_1_1_reshape_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reshape_queue_descriptor.xhtml">armnn::ReshapeQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00412">WorkloadData.hpp:412</a></div></div>
<div class="ttc" id="classarmnn_1_1_cl_batch_normalization_float_workload_xhtml"><div class="ttname"><a href="classarmnn_1_1_cl_batch_normalization_float_workload.xhtml">armnn::ClBatchNormalizationFloatWorkload</a></div><div class="ttdef"><b>Definition:</b> <a href="_cl_batch_normalization_float_workload_8hpp_source.xhtml#l00025">ClBatchNormalizationFloatWorkload.hpp:25</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_queue_descriptor.xhtml">armnn::DepthwiseConvolution2dQueueDescriptor</a></div><div class="ttdoc">Depthwise Convolution 2D layer workload data. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00247">WorkloadData.hpp:247</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_queue_descriptor.xhtml">armnn::ActivationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00158">WorkloadData.hpp:158</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml_ac18546ebbebbb32fe0a03baa9bf2c600"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml#ac18546ebbebbb32fe0a03baa9bf2c600">armnn::Convolution2dDescriptor::m_PadLeft</a></div><div class="ttdeci">uint32_t m_PadLeft</div><div class="ttdoc">Padding left value in the width dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00527">Descriptors.hpp:527</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::DataLayout::NHWC</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">armnn::LayerType</a></div><div class="ttdeci">LayerType</div><div class="ttdoc">When adding a new layer, adapt also the LastLayer enum value in the enum class LayerType below...</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00468">Types.hpp:468</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_queue_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_normalization_queue_descriptor.xhtml">armnn::NormalizationQueueDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00274">WorkloadData.hpp:274</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_1ad86c6d39ab715a831555571b9e98a5.xhtml">cl</a></li><li class="navelem"><a class="el" href="dir_02bab2737bbb2fb3882a0be567244fbf.xhtml">test</a></li><li class="navelem"><a class="el" href="_cl_create_workload_tests_8cpp.xhtml">ClCreateWorkloadTests.cpp</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:33 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
