<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/SubgraphViewSelector.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_subgraph_view_selector_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">SubgraphViewSelector.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_subgraph_view_selector_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_subgraph_view_selector_8hpp.xhtml">SubgraphViewSelector.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_8hpp.xhtml">Graph.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_assert_8hpp.xhtml">armnn/utility/Assert.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_polymorphic_downcast_8hpp.xhtml">armnn/utility/PolymorphicDowncast.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;queue&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;unordered_set&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">/// Intermediate data-structure to store the subgraph that a layer has been assigned to.</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">/// This is a &quot;disjoint set&quot; data structure that allows efficient merging of subgraphs,</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">/// which is a key part of the algorithm. Subgraphs are arranged in singly-linked trees</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">/// (with each node storing a pointer to its parent). Subgraphs in the same tree are considered</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">/// to have been merged. Merging subgraphs is performed by attaching one tree to another,</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">/// which is a simple pointer update.</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">/// NOTE: Due to the way this is stored, it is almost never correct to directly compare pointers</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">/// to two PartialSubgraphs to check if two layers belong in the same subgraph. Instead you</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">/// should use IsMergedWith().</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">/// This structure also stores information about the dependencies of each subgraph, which is needed</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">/// to determine whether certain subgraphs can be merged. Checking whether a subgraph</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">/// depends on another subgraph is a frequent operation in the algorithm (see AssignSplitId) and so this is optimized</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">/// in preference to the merging of subgraphs. This leads to an approach where each subgraph stores</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">/// a set of all the subgraphs it depends on (for a fast lookup). In order to efficiently update this</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">/// set as subgraphs are merged means we also store a set of subgraphs which *depend on us* (i.e. the</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">/// complement of our dependencies).</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"></span><span class="keyword">class </span>PartialSubgraph</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">    /// If this subgraph has been merged with another then there is an agreed &quot;representative&quot; for the combined</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">    /// subgraph, which uniquely identifies the subgraph.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span>    PartialSubgraph* GetRepresentative()</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="comment">// Recurse up the tree to find the root node.</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">if</span> (m_Parent == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">this</span>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            PartialSubgraph* result = m_Parent-&gt;GetRepresentative();</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="comment">// Update our parent pointer to point directly to the root in order to speed up future calls to this method.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="comment">// This essentially &quot;flattens&quot; the tree.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            m_Parent = result;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">    /// Merges this subgraph with another.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> MergeWith(PartialSubgraph* other)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">if</span> (m_Parent == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            other = other-&gt;GetRepresentative();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">if</span> (<span class="keyword">this</span> == other)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="comment">// Already merged - no-op</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="keywordflow">return</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            m_Parent = other;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="comment">// Update others&#39; dependency sets to point to the new representative rather than us.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="comment">// Keeping these up-to-date means we can rely on these sets containing representatives when</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="comment">// we perform a lookup in HasAntecedent() and so don&#39;t need to resolve the representative for each element</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="comment">// of the set. See description at the top of this class for more rationale.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">for</span> (PartialSubgraph* a : m_Antecedents)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="keywordtype">size_t</span> numErased = a-&gt;m_Dependants.erase(<span class="keyword">this</span>);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(numErased == 1);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(numErased);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                a-&gt;m_Dependants.insert(m_Parent);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">for</span> (PartialSubgraph* a : m_Dependants)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keywordtype">size_t</span> numErased = a-&gt;m_Antecedents.erase(<span class="keyword">this</span>);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(numErased == 1);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(numErased);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                a-&gt;m_Antecedents.insert(m_Parent);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="comment">// Merge our dependency sets into our new representative.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="comment">// We no longer need to maintain our own sets, as requests will always be forwarded to the representative.</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            m_Parent-&gt;m_Antecedents.insert(m_Antecedents.begin(), m_Antecedents.end());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            m_Antecedents.clear();</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            m_Parent-&gt;m_Dependants.insert(m_Dependants.begin(), m_Dependants.end());</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            m_Dependants.clear();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="comment">// Defer request to the representative</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            GetRepresentative()-&gt;MergeWith(other);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">    /// Checks if this subgraph has been merged with the given subgraph.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> IsMergedWith(PartialSubgraph* other)</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">return</span> GetRepresentative() == other-&gt;GetRepresentative();</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">    /// Marks the given subgraph as a direct antecedent (dependency) of this one.</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"></span>    <span class="keywordtype">void</span> AddDirectAntecedent(PartialSubgraph* antecedent)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">if</span> (m_Parent == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            antecedent = antecedent-&gt;GetRepresentative();</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            m_Antecedents.insert(antecedent);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="comment">// Also record all of its antecedents, so that we end up with direct and indirect antecedents.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="comment">// This makes the lookup in HasAntecedent() faster.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            m_Antecedents.insert(antecedent-&gt;m_Antecedents.begin(), antecedent-&gt;m_Antecedents.end());</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="comment">// All of our dependents also need to include the new antecedents</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">for</span> (PartialSubgraph* d : m_Dependants)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                d-&gt;m_Antecedents.insert(antecedent);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                d-&gt;m_Antecedents.insert(antecedent-&gt;m_Antecedents.begin(), antecedent-&gt;m_Antecedents.end());</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="comment">// Store reverse dependencies as well, required so that we can efficiently navigate the graph</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="comment">// when making updates.</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            antecedent-&gt;m_Dependants.insert(<span class="keyword">this</span>);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            antecedent-&gt;m_Dependants.insert(m_Dependants.begin(), m_Dependants.end());</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">for</span> (PartialSubgraph* a : antecedent-&gt;m_Antecedents)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                a-&gt;m_Dependants.insert(<span class="keyword">this</span>);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                a-&gt;m_Dependants.insert(m_Dependants.begin(), m_Dependants.end());</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="comment">// Defer request to the representative</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            GetRepresentative()-&gt;AddDirectAntecedent(antecedent);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">    /// Checks if this subgraph is dependent on the given subgraph, either directly or indirectly.</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span> HasAntecedent(PartialSubgraph* antecedent)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">if</span> (m_Parent == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            antecedent = antecedent-&gt;GetRepresentative();</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="comment">// Thanks to keeping this set updated in MergeWith and AddDirectAntecedent, we can do an efficient lookup.</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keywordflow">return</span> m_Antecedents.count(antecedent) &gt; 0;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="comment">// Defer request to the representative</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">return</span> GetRepresentative()-&gt;HasAntecedent(antecedent);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">    /// Pointer to the parent node in the tree. If this is null then we are the representative for our merged subgraph.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"></span>    PartialSubgraph* m_Parent;<span class="comment"></span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">    /// The representatives of all the subgraphs which we depend on, either directly or indirectly.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"></span>    std::unordered_set&lt;PartialSubgraph*&gt; m_Antecedents;<span class="comment"></span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">    /// The representatives of all the subgraphs which depend on us, either directly or indirectly.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment"></span>    std::unordered_set&lt;PartialSubgraph*&gt; m_Dependants;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;};</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">/// Intermediate data structure to store information associated with a particular layer.</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"></span><span class="keyword">struct </span>LayerSelectionInfo</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;{</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">using</span> LayerInfoContainer = std::map&lt;IConnectableLayer*, LayerSelectionInfo&gt;;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">using</span> LayerInfoQueue = std::queue&lt;LayerSelectionInfo*&gt;;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    LayerSelectionInfo(Layer* layer, <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#a341a1b47a5f71edaebf81f3a5f0f4c55">SubgraphViewSelector::LayerSelectorFunction</a>&amp; selector)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    : <a class="code" href="_subgraph_view_selector_8cpp.xhtml#ac0f60caa770d0eda339103aa4098ad15">m_Layer</a>{layer}</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    , <a class="code" href="_subgraph_view_selector_8cpp.xhtml#a3a672da6a5207243cf3e5c933872b5bf">m_Subgraph</a>{<span class="keyword">nullptr</span>}</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    , <a class="code" href="_subgraph_view_selector_8cpp.xhtml#aa479d97c404e5996e29b009c60b22e8b">m_IsSelected</a>{selector(*layer)}</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    , <a class="code" href="_subgraph_view_selector_8cpp.xhtml#a849c95a020d031ec405d7d21021d87c2">m_IsProcessed</a>(<span class="keyword">false</span>)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordtype">bool</span> IsInputLayer()<span class="keyword"> const</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="_subgraph_view_selector_8cpp.xhtml#ac0f60caa770d0eda339103aa4098ad15">m_Layer</a>-&gt;GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a> || <a class="code" href="_subgraph_view_selector_8cpp.xhtml#ac0f60caa770d0eda339103aa4098ad15">m_Layer</a>-&gt;GetType() == <a class="code" href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::LayerType::Constant</a>;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordtype">void</span> CollectNonSelectedInputs(LayerSelectionInfo::LayerInfoContainer&amp; layerInfos,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                  <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a4ad949634fd697549da161eb09d8b7fd">SubgraphView::IInputSlots</a>&amp; inputSlots)</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; slot = PolymorphicDowncast&lt;Layer*&gt;(<a class="code" href="_subgraph_view_selector_8cpp.xhtml#ac0f60caa770d0eda339103aa4098ad15">m_Layer</a>)-&gt;BeginInputSlots();</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;             slot != PolymorphicDowncast&lt;Layer*&gt;(<a class="code" href="_subgraph_view_selector_8cpp.xhtml#ac0f60caa770d0eda339103aa4098ad15">m_Layer</a>)-&gt;EndInputSlots();</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;             ++slot)</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            OutputSlot* parentLayerOutputSlot = slot-&gt;GetConnectedOutputSlot();</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(parentLayerOutputSlot != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The input slots must be connected here.&quot;</span>);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keywordflow">if</span> (parentLayerOutputSlot)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                Layer&amp; parentLayer = parentLayerOutputSlot-&gt;GetOwningLayer();</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                <span class="keyword">auto</span> parentInfo = layerInfos.find(&amp;parentLayer);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keywordflow">if</span> (parentInfo == layerInfos.end() ||</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                        !<a class="code" href="_subgraph_view_selector_8cpp.xhtml#a3a672da6a5207243cf3e5c933872b5bf">m_Subgraph</a>-&gt;IsMergedWith(parentInfo-&gt;second.m_Subgraph.get()))</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    <span class="comment">// Avoid collecting duplicate input slots</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    InputSlot* inputSlot = &amp;(*slot);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    <span class="keywordflow">if</span> (std::find(inputSlots.begin(), inputSlots.end(), inputSlot) == inputSlots.end())</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                        inputSlots.push_back(inputSlot);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordtype">void</span> CollectNonSelectedOutputSlots(LayerSelectionInfo::LayerInfoContainer&amp; layerInfos,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                       <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a3f717693851810942d3ae0180a97fb4c">SubgraphView::IOutputSlots</a>&amp; outputSlots)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; slot = PolymorphicDowncast&lt;Layer*&gt;(<a class="code" href="_subgraph_view_selector_8cpp.xhtml#ac0f60caa770d0eda339103aa4098ad15">m_Layer</a>)-&gt;BeginOutputSlots();</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;             slot != PolymorphicDowncast&lt;Layer*&gt;(<a class="code" href="_subgraph_view_selector_8cpp.xhtml#ac0f60caa770d0eda339103aa4098ad15">m_Layer</a>)-&gt;EndOutputSlots();</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;             ++slot)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keywordflow">for</span> (InputSlot* childLayerInputSlot : slot-&gt;GetConnections())</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                Layer&amp; childLayer = childLayerInputSlot-&gt;GetOwningLayer();</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <span class="keyword">auto</span> childInfo = layerInfos.find(&amp;childLayer);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                <span class="keywordflow">if</span> (childInfo == layerInfos.end() ||</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                        !<a class="code" href="_subgraph_view_selector_8cpp.xhtml#a3a672da6a5207243cf3e5c933872b5bf">m_Subgraph</a>-&gt;IsMergedWith(childInfo-&gt;second.m_Subgraph.get()))</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    <span class="comment">// Avoid collecting duplicate output slots</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    OutputSlot* outputSlot = &amp;(*slot);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                    <span class="keywordflow">if</span> (std::find(outputSlots.begin(), outputSlots.end(), outputSlot) == outputSlots.end())</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                    {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                        outputSlots.push_back(outputSlot);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                }</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="_subgraph_view_selector_8cpp.xhtml#ac0f60caa770d0eda339103aa4098ad15">  247</a></span>&#160;    IConnectableLayer* <a class="code" href="_subgraph_view_selector_8cpp.xhtml#ac0f60caa770d0eda339103aa4098ad15">m_Layer</a>;<span class="comment"></span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">    /// Which subgraph this layer has been assigned to. Only valid once m_IsProcessed is true.</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">    /// Two layers with different m_Subgraph pointers may in fact have been merged into the same subgraph -</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">    /// see the description of the PartialSubgraph class.</span></div><div class="line"><a name="l00251"></a><span class="lineno"><a class="line" href="_subgraph_view_selector_8cpp.xhtml#a3a672da6a5207243cf3e5c933872b5bf">  251</a></span>&#160;<span class="comment"></span>    std::shared_ptr&lt;PartialSubgraph&gt; <a class="code" href="_subgraph_view_selector_8cpp.xhtml#a3a672da6a5207243cf3e5c933872b5bf">m_Subgraph</a>;</div><div class="line"><a name="l00252"></a><span class="lineno"><a class="line" href="_subgraph_view_selector_8cpp.xhtml#aa479d97c404e5996e29b009c60b22e8b">  252</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="_subgraph_view_selector_8cpp.xhtml#aa479d97c404e5996e29b009c60b22e8b">m_IsSelected</a>;</div><div class="line"><a name="l00253"></a><span class="lineno"><a class="line" href="_subgraph_view_selector_8cpp.xhtml#a849c95a020d031ec405d7d21021d87c2">  253</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="_subgraph_view_selector_8cpp.xhtml#a849c95a020d031ec405d7d21021d87c2">m_IsProcessed</a>;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;};</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;} <span class="comment">// namespace &lt;anonymous&gt;</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#aaf71a63dbbc776f8961b0f4fdb9da021">SubgraphViewSelector::Subgraphs</a></div><div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="classarmnn_1_1_subgraph_view_selector.xhtml#a3730b0a6006f0d87f894a44e01869d90">  259</a></span>&#160;<a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#a3730b0a6006f0d87f894a44e01869d90">SubgraphViewSelector::SelectSubgraphs</a>(<a class="code" href="classarmnn_1_1_graph.xhtml">Graph</a>&amp; graph, <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#a341a1b47a5f71edaebf81f3a5f0f4c55">LayerSelectorFunction</a>&amp; selector)</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;{</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a> subgraph(graph);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#a3730b0a6006f0d87f894a44e01869d90">SubgraphViewSelector::SelectSubgraphs</a>(subgraph, selector);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Delegate&gt;</div><div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#afce94270d9c4a51cd0c4ac6a58af4e26">  267</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#afce94270d9c4a51cd0c4ac6a58af4e26">ForEachLayerInput</a>(LayerSelectionInfo::LayerInfoContainer&amp; layerInfos,</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                       LayerSelectionInfo&amp; layerInfo,</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                       Delegate <span class="keyword">function</span>)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>&amp; layer = *PolymorphicDowncast&lt;Layer*&gt;(layerInfo.m_Layer);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> inputSlot : layer.<a class="code" href="classarmnn_1_1_layer.xhtml#af5f530544d09a44d726f24702b67b35b">GetInputSlots</a>())</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keyword">auto</span> connectedInput = PolymorphicDowncast&lt;OutputSlot*&gt;(inputSlot.GetConnection());</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(connectedInput, <span class="stringliteral">&quot;Dangling input slot detected.&quot;</span>);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>&amp; inputLayer = connectedInput-&gt;GetOwningLayer();</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keyword">auto</span> parentInfo = layerInfos.find(&amp;inputLayer);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keywordflow">if</span> (parentInfo != layerInfos.end())</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        {</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            <span class="keyword">function</span>(parentInfo-&gt;second);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    }</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;}</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Delegate&gt;</div><div class="line"><a name="l00288"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a49538fa883b70c944e437d65d6628eec">  288</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a49538fa883b70c944e437d65d6628eec">ForEachLayerOutput</a>(LayerSelectionInfo::LayerInfoContainer&amp; layerInfos,</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                        LayerSelectionInfo&amp; layerInfo,</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                        Delegate <span class="keyword">function</span>)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;{</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>&amp; layer = *PolymorphicDowncast&lt;Layer*&gt;(layerInfo.m_Layer);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; outputSlot : layer.<a class="code" href="classarmnn_1_1_layer.xhtml#a98cdff4e0b45f4c80bfcedaf926e16e0">GetOutputSlots</a>())</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    {</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; output : outputSlot.GetConnections())</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>&amp; childLayer = output-&gt;GetOwningLayer();</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="keyword">auto</span> childInfo = layerInfos.find(&amp;childLayer);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keywordflow">if</span> (childInfo != layerInfos.end())</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            {</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                <span class="keyword">function</span>(childInfo-&gt;second);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;}</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a09ff1f6670d27d3b41e5b5d35a6c9f37">  309</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a09ff1f6670d27d3b41e5b5d35a6c9f37">AssignSplitId</a>(LayerSelectionInfo::LayerInfoContainer&amp; layerInfos, LayerSelectionInfo&amp; layerInfo)</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;{</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="comment">// Check each input to see if we can attach ourselves to any of the subgraphs that have already been assigned.</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <a class="code" href="namespacearmnn.xhtml#afce94270d9c4a51cd0c4ac6a58af4e26">ForEachLayerInput</a>(layerInfos, layerInfo, [&amp;](LayerSelectionInfo&amp; parentInfo)</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="comment">// We can only attach ourselves to the subgraph from this input if there isn&#39;t a cut here.</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keywordflow">if</span> (layerInfo.m_IsSelected == parentInfo.m_IsSelected)</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="comment">// We also need to check that merging into this subgraph won&#39;t cause a dependency cycle between subgraphs.</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <span class="comment">// This will be the case if the subgraph that we will become part of is already a dependency</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            <span class="comment">// of one of the subgraphs that are input to this layer, e.g:</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            <span class="comment">//</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            <span class="comment">//    0     |  The numbers (0, 1) are the subgraph IDs of each layer and we are looking at layer X.</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="comment">//   / \    |</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="comment">//  1   0   |  We can&#39;t merge X into subgraph 0, because the left-hand input already depends on subgraph 0.</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            <span class="comment">//   \ /    |  We can however merge X into subgraph 1.</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="comment">//    X     |</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <span class="comment">//</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            bool dependenciesOk = true;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            ForEachLayerInput(layerInfos, layerInfo, [&amp;](LayerSelectionInfo&amp; otherParentInfo)</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                <span class="comment">// We call HasAntecedent() ~ n^2 times, where n is the number of inputs to this layer.</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                <span class="comment">// Hence it is important that this is efficient - see PartialSubgraph class description.</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                if (otherParentInfo.m_Subgraph-&gt;HasAntecedent(parentInfo.m_Subgraph.get()))</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                {</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                    dependenciesOk = false;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                }</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            });</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <span class="keywordflow">if</span> (dependenciesOk)</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            {</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                <span class="comment">// Merge into the subgraph of this input. If we have already been merged into another subgraph</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                <span class="comment">// (from another input of this layer), then merge both of them together.</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                <span class="keywordflow">if</span> (layerInfo.m_Subgraph == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                {</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                    layerInfo.m_Subgraph = parentInfo.m_Subgraph;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                }</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                {</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                    <span class="comment">// We call MergeWith() ~ n times, where n is the number of inputs to this layer.</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                    <span class="comment">// Therefore it does not need to be as performant as HasAntecedent().</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                    layerInfo.m_Subgraph-&gt;MergeWith(parentInfo.m_Subgraph.get());</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                }</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            }</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        }</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    });</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="comment">// If we weren&#39;t able to merge into an existing subgraph then we need to make a new one</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keywordflow">if</span> (layerInfo.m_Subgraph == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    {</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        layerInfo.m_Subgraph = std::make_shared&lt;PartialSubgraph&gt;();</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    }</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="comment">// Record dependencies of the chosen subgraph based on the inputs of this layer.</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <a class="code" href="namespacearmnn.xhtml#afce94270d9c4a51cd0c4ac6a58af4e26">ForEachLayerInput</a>(layerInfos, layerInfo, [&amp;](LayerSelectionInfo&amp; parentInfo)</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    {</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="comment">// These functions are called ~n times, where n is the number of inputs to this layer.</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <span class="comment">// Therefore it does not need to be as performant as HasAntecedent().</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keywordflow">if</span> (!layerInfo.m_Subgraph-&gt;IsMergedWith(parentInfo.m_Subgraph.get()))</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        {</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            layerInfo.m_Subgraph-&gt;AddDirectAntecedent(parentInfo.m_Subgraph.get());</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        }</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    });</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;}</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a6b10dc0d12c7f4a52ad01b9975dbe908">  374</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearmnn.xhtml#a6b10dc0d12c7f4a52ad01b9975dbe908">IsReadyForSplitAssignment</a>(LayerSelectionInfo::LayerInfoContainer&amp; layerInfos, LayerSelectionInfo&amp; layerInfo)</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;{</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordtype">bool</span> ready = <span class="keyword">true</span>;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <a class="code" href="namespacearmnn.xhtml#afce94270d9c4a51cd0c4ac6a58af4e26">ForEachLayerInput</a>(layerInfos, layerInfo,</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                      [&amp;ready](LayerSelectionInfo&amp; parentInfo)</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                          {</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                              <span class="keywordflow">if</span> (!parentInfo.m_IsProcessed)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                              {</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                                  ready = false;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                              }</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                          });</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keywordflow">return</span> ready;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;}</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#aaf71a63dbbc776f8961b0f4fdb9da021">SubgraphViewSelector::Subgraphs</a></div><div class="line"><a name="l00389"></a><span class="lineno"><a class="line" href="classarmnn_1_1_subgraph_view_selector.xhtml#ad28bb1b624cde39578cfefa8b7809aef">  389</a></span>&#160;<a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#a3730b0a6006f0d87f894a44e01869d90">SubgraphViewSelector::SelectSubgraphs</a>(<a class="code" href="classarmnn_1_1_subgraph_view.xhtml">SubgraphView</a>&amp; subgraph, <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#a341a1b47a5f71edaebf81f3a5f0f4c55">LayerSelectorFunction</a>&amp; selector)</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;{</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    LayerSelectionInfo::LayerInfoContainer layerInfos;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    LayerSelectionInfo::LayerInfoQueue processQueue;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#ad7c7687cd3542e5cbb45e56f9a9456e7">SubgraphView::IConnectableLayers</a>&amp; subgraphLayers = subgraph.<a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a8055e06b4f21d51fd8b4fc22ead2bdf0">GetIConnectableLayers</a>();</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; layer : subgraphLayers)</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    {</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="keyword">auto</span> emplaced = layerInfos.emplace(layer, LayerSelectionInfo{PolymorphicDowncast&lt;Layer*&gt;(layer), selector});</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        LayerSelectionInfo&amp; layerInfo = emplaced.first-&gt;second;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="comment">// Start with Input type layers</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="keywordflow">if</span> (layerInfo.IsInputLayer())</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        {</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            processQueue.push(&amp;layerInfo);</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        }</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    }</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a4ad949634fd697549da161eb09d8b7fd">SubgraphView::IInputSlots</a>&amp; subgraphInputSlots = subgraph.<a class="code" href="classarmnn_1_1_subgraph_view.xhtml#ada17adb05f8061fffa3e193544795fd5">GetIInputSlots</a>();</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; inputSlot : subgraphInputSlots)</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    {</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <a class="code" href="classarmnn_1_1_layer.xhtml">Layer</a>&amp; layer = PolymorphicDowncast&lt;InputSlot*&gt;(inputSlot)-&gt;GetOwningLayer();</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="keyword">auto</span> emplaced = layerInfos.emplace(&amp;layer, LayerSelectionInfo{&amp;layer, selector});</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        LayerSelectionInfo&amp; layerInfo = emplaced.first-&gt;second;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        processQueue.push(&amp;layerInfo);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    }</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordflow">while</span> (!processQueue.empty())</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    {</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        LayerSelectionInfo&amp; layerInfo = *processQueue.front();</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        processQueue.pop(); <span class="comment">// remove front from queue</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="comment">// This layerInfo may have been added to the queue multiple times, so skip if we have already processed it</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        <span class="keywordflow">if</span> (!layerInfo.m_IsProcessed)</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        {</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            <span class="comment">// Only process this layerInfo if all inputs have been processed</span></div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn.xhtml#a6b10dc0d12c7f4a52ad01b9975dbe908">IsReadyForSplitAssignment</a>(layerInfos, layerInfo))</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            {</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                <span class="comment">// Put back of the process queue if we can&#39;t process it just yet</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                processQueue.push(&amp;layerInfo);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                <span class="keywordflow">continue</span>; <span class="comment">// Skip to next iteration</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            }</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            <span class="comment">// Now we do the processing</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a09ff1f6670d27d3b41e5b5d35a6c9f37">AssignSplitId</a>(layerInfos, layerInfo);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            <span class="comment">// Queue any child nodes for processing</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a49538fa883b70c944e437d65d6628eec">ForEachLayerOutput</a>(layerInfos, layerInfo, [&amp;processQueue](LayerSelectionInfo&amp; childInfo)</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                {</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                    processQueue.push(&amp;childInfo);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                });</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <span class="comment">// We don&#39;t need to process this node again</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            layerInfo.m_IsProcessed = <span class="keyword">true</span>;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        }</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    }</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="comment">// Collect all selected layers keyed by subgraph representative into a map</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">using</span> SelectionInfoPtrs = std::vector&lt;LayerSelectionInfo*&gt;;</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    std::map&lt;PartialSubgraph*, SelectionInfoPtrs&gt; splitMap;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a> : layerInfos)</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    {</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.second.m_IsSelected)</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        {</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            <span class="keyword">auto</span> it = splitMap.find(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.second.m_Subgraph-&gt;GetRepresentative());</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;            <span class="keywordflow">if</span> (it == splitMap.end())</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            {</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                splitMap.insert(</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                    std::make_pair(<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.second.m_Subgraph-&gt;GetRepresentative(), SelectionInfoPtrs{&amp;<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.second}));</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            }</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            {</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                it-&gt;second.push_back(&amp;<a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.second);</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            }</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        }</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    }</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="comment">// Now each entry in splitMap represents a subgraph</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <a class="code" href="classarmnn_1_1_subgraph_view_selector.xhtml#aaf71a63dbbc776f8961b0f4fdb9da021">Subgraphs</a> result;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; splitGraph : splitMap)</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    {</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a4ad949634fd697549da161eb09d8b7fd">SubgraphView::IInputSlots</a> inputs;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#a3f717693851810942d3ae0180a97fb4c">SubgraphView::IOutputSlots</a> outputs;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        <a class="code" href="classarmnn_1_1_subgraph_view.xhtml#ad7c7687cd3542e5cbb45e56f9a9456e7">SubgraphView::IConnectableLayers</a> layers;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; infoPtr : splitGraph.second)</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        {</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            infoPtr-&gt;CollectNonSelectedInputs(layerInfos, inputs);</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            infoPtr-&gt;CollectNonSelectedOutputSlots(layerInfos, outputs);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            layers.push_back(infoPtr-&gt;m_Layer);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        }</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="comment">// Sort lists into deterministic order, not relying on pointer values which may be different on each execution.</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="comment">// This makes debugging the optimised graph much easier as subsequent stages can also be deterministic.</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        std::sort(inputs.begin(), inputs.end(), [](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a>* a, <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_input_slot.xhtml">IInputSlot</a>* b)</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        {</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            <span class="keyword">auto</span>* castA = PolymorphicDowncast&lt;const InputSlot*&gt;(a);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            <span class="keyword">auto</span>* castB = PolymorphicDowncast&lt;const InputSlot*&gt;(b);</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            <span class="keyword">const</span> <a class="code" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guidA = castA-&gt;GetOwningLayer().GetGuid();</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            <span class="keyword">const</span> <a class="code" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guidB = castB-&gt;GetOwningLayer().GetGuid();</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            <span class="keywordflow">if</span> (guidA &lt; guidB)</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            {</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            }</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (guidA == guidB)</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            {</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                <span class="keywordflow">return</span> (castA-&gt;GetSlotIndex() &lt; castB-&gt;GetSlotIndex());</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            }</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        });</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        std::sort(outputs.begin(), outputs.end(), [](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">IOutputSlot</a>* a, <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">IOutputSlot</a>* b)</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        {</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            <span class="keyword">auto</span>* castA = PolymorphicDowncast&lt;const OutputSlot*&gt;(a);</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            <span class="keyword">auto</span>* castB = PolymorphicDowncast&lt;const OutputSlot*&gt;(b);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            <span class="keyword">const</span> <a class="code" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guidA = castA-&gt;GetOwningLayer().GetGuid();</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            <span class="keyword">const</span> <a class="code" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guidB = castB-&gt;GetOwningLayer().GetGuid();</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            <span class="keywordflow">if</span> (guidA &lt; guidB)</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            {</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            }</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (guidA == guidB)</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            {</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                <span class="keywordflow">return</span> (a-&gt;<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a41d30a9cd272e05986d71a69d6ad618b">CalculateIndexOnOwner</a>() &lt; b-&gt;CalculateIndexOnOwner());</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            }</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        });</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        layers.sort([](<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* a, <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a>* b) { <span class="keywordflow">return</span> a-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#afb5e65c770f6cee222db8af7581541a6">GetGuid</a>() &lt; b-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#afb5e65c770f6cee222db8af7581541a6">GetGuid</a>(); });</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="comment">// Create a new sub-graph with the new lists of input/output slots and layer</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        result.emplace_back(std::make_unique&lt;SubgraphView&gt;(std::move(layers),</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                                                           std::move(inputs),</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                                                           std::move(outputs)));</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    }</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;}</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="_subgraph_view_selector_8cpp_xhtml_aa479d97c404e5996e29b009c60b22e8b"><div class="ttname"><a href="_subgraph_view_selector_8cpp.xhtml#aa479d97c404e5996e29b009c60b22e8b">m_IsSelected</a></div><div class="ttdeci">bool m_IsSelected</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8cpp_source.xhtml#l00252">SubgraphViewSelector.cpp:252</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00068">INetwork.hpp:68</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_afce94270d9c4a51cd0c4ac6a58af4e26"><div class="ttname"><a href="namespacearmnn.xhtml#afce94270d9c4a51cd0c4ac6a58af4e26">armnn::ForEachLayerInput</a></div><div class="ttdeci">void ForEachLayerInput(LayerSelectionInfo::LayerInfoContainer &amp;layerInfos, LayerSelectionInfo &amp;layerInfo, Delegate function)</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8cpp_source.xhtml#l00267">SubgraphViewSelector.cpp:267</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_a8055e06b4f21d51fd8b4fc22ead2bdf0"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#a8055e06b4f21d51fd8b4fc22ead2bdf0">armnn::SubgraphView::GetIConnectableLayers</a></div><div class="ttdeci">const IConnectableLayers &amp; GetIConnectableLayers() const</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_8cpp_source.xhtml#l00300">SubgraphView.cpp:300</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_ada17adb05f8061fffa3e193544795fd5"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#ada17adb05f8061fffa3e193544795fd5">armnn::SubgraphView::GetIInputSlots</a></div><div class="ttdeci">const IInputSlots &amp; GetIInputSlots() const</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_8cpp_source.xhtml#l00230">SubgraphView.cpp:230</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a09ff1f6670d27d3b41e5b5d35a6c9f37"><div class="ttname"><a href="namespacearmnn.xhtml#a09ff1f6670d27d3b41e5b5d35a6c9f37">armnn::AssignSplitId</a></div><div class="ttdeci">void AssignSplitId(LayerSelectionInfo::LayerInfoContainer &amp;layerInfos, LayerSelectionInfo &amp;layerInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8cpp_source.xhtml#l00309">SubgraphViewSelector.cpp:309</a></div></div>
<div class="ttc" id="_subgraph_view_selector_8cpp_xhtml_ac0f60caa770d0eda339103aa4098ad15"><div class="ttname"><a href="_subgraph_view_selector_8cpp.xhtml#ac0f60caa770d0eda339103aa4098ad15">m_Layer</a></div><div class="ttdeci">IConnectableLayer * m_Layer</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8cpp_source.xhtml#l00247">SubgraphViewSelector.cpp:247</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_selector_xhtml_a341a1b47a5f71edaebf81f3a5f0f4c55"><div class="ttname"><a href="classarmnn_1_1_subgraph_view_selector.xhtml#a341a1b47a5f71edaebf81f3a5f0f4c55">armnn::SubgraphViewSelector::LayerSelectorFunction</a></div><div class="ttdeci">std::function&lt; bool(const Layer &amp;)&gt; LayerSelectorFunction</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8hpp_source.xhtml#l00026">SubgraphViewSelector.hpp:26</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_af5f530544d09a44d726f24702b67b35b"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#af5f530544d09a44d726f24702b67b35b">armnn::Layer::GetInputSlots</a></div><div class="ttdeci">const std::vector&lt; InputSlot &gt; &amp; GetInputSlots() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00245">Layer.hpp:245</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a6b10dc0d12c7f4a52ad01b9975dbe908"><div class="ttname"><a href="namespacearmnn.xhtml#a6b10dc0d12c7f4a52ad01b9975dbe908">armnn::IsReadyForSplitAssignment</a></div><div class="ttdeci">bool IsReadyForSplitAssignment(LayerSelectionInfo::LayerInfoContainer &amp;layerInfos, LayerSelectionInfo &amp;layerInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8cpp_source.xhtml#l00374">SubgraphViewSelector.cpp:374</a></div></div>
<div class="ttc" id="_polymorphic_downcast_8hpp_xhtml"><div class="ttname"><a href="_polymorphic_downcast_8hpp.xhtml">PolymorphicDowncast.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml">armnn::SubgraphView</a></div><div class="ttdoc">The SubgraphView class represents a subgraph of a Graph. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_subgraph_view_8hpp_source.xhtml#l00023">SubgraphView.hpp:23</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_ad7c7687cd3542e5cbb45e56f9a9456e7"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#ad7c7687cd3542e5cbb45e56f9a9456e7">armnn::SubgraphView::IConnectableLayers</a></div><div class="ttdeci">std::list&lt; IConnectableLayer * &gt; IConnectableLayers</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_subgraph_view_8hpp_source.xhtml#l00054">SubgraphView.hpp:54</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a></div><div class="ttdoc">An output connection slot for a layer. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00041">INetwork.hpp:41</a></div></div>
<div class="ttc" id="_graph_8hpp_xhtml"><div class="ttname"><a href="_graph_8hpp.xhtml">Graph.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_a3f717693851810942d3ae0180a97fb4c"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#a3f717693851810942d3ae0180a97fb4c">armnn::SubgraphView::IOutputSlots</a></div><div class="ttdeci">std::vector&lt; IOutputSlot * &gt; IOutputSlots</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_subgraph_view_8hpp_source.xhtml#l00052">SubgraphView.hpp:52</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_afb5e65c770f6cee222db8af7581541a6"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#afb5e65c770f6cee222db8af7581541a6">armnn::IConnectableLayer::GetGuid</a></div><div class="ttdeci">virtual LayerGuid GetGuid() const =0</div><div class="ttdoc">Returns the unique id of the layer. </div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_selector_xhtml_aaf71a63dbbc776f8961b0f4fdb9da021"><div class="ttname"><a href="classarmnn_1_1_subgraph_view_selector.xhtml#aaf71a63dbbc776f8961b0f4fdb9da021">armnn::SubgraphViewSelector::Subgraphs</a></div><div class="ttdeci">std::vector&lt; SubgraphViewPtr &gt; Subgraphs</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8hpp_source.xhtml#l00025">SubgraphViewSelector.hpp:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_xhtml_a4ad949634fd697549da161eb09d8b7fd"><div class="ttname"><a href="classarmnn_1_1_subgraph_view.xhtml#a4ad949634fd697549da161eb09d8b7fd">armnn::SubgraphView::IInputSlots</a></div><div class="ttdeci">std::vector&lt; IInputSlot * &gt; IInputSlots</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_subgraph_view_8hpp_source.xhtml#l00050">SubgraphView.hpp:50</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a41d30a9cd272e05986d71a69d6ad618b"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a41d30a9cd272e05986d71a69d6ad618b">armnn::IOutputSlot::CalculateIndexOnOwner</a></div><div class="ttdeci">virtual unsigned int CalculateIndexOnOwner() const =0</div></div>
<div class="ttc" id="classarmnn_1_1_graph_xhtml"><div class="ttname"><a href="classarmnn_1_1_graph.xhtml">armnn::Graph</a></div><div class="ttdef"><b>Definition:</b> <a href="_graph_8hpp_source.xhtml#l00030">Graph.hpp:30</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml_a98cdff4e0b45f4c80bfcedaf926e16e0"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml#a98cdff4e0b45f4c80bfcedaf926e16e0">armnn::Layer::GetOutputSlots</a></div><div class="ttdeci">const std::vector&lt; OutputSlot &gt; &amp; GetOutputSlots() const</div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00246">Layer.hpp:246</a></div></div>
<div class="ttc" id="_types_8hpp_xhtml_af22094b802160f09f7c89ad9eee10084"><div class="ttname"><a href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a></div><div class="ttdeci">arm::pipe::ProfilingGuid LayerGuid</div><div class="ttdoc">Define LayerGuid type. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00026">Types.hpp:26</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml"><div class="ttname"><a href="_assert_8hpp.xhtml">Assert.hpp</a></div></div>
<div class="ttc" id="_subgraph_view_selector_8cpp_xhtml_a849c95a020d031ec405d7d21021d87c2"><div class="ttname"><a href="_subgraph_view_selector_8cpp.xhtml#a849c95a020d031ec405d7d21021d87c2">m_IsProcessed</a></div><div class="ttdeci">bool m_IsProcessed</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8cpp_source.xhtml#l00253">SubgraphViewSelector.cpp:253</a></div></div>
<div class="ttc" id="classarmnn_1_1_subgraph_view_selector_xhtml_a3730b0a6006f0d87f894a44e01869d90"><div class="ttname"><a href="classarmnn_1_1_subgraph_view_selector.xhtml#a3730b0a6006f0d87f894a44e01869d90">armnn::SubgraphViewSelector::SelectSubgraphs</a></div><div class="ttdeci">static Subgraphs SelectSubgraphs(Graph &amp;graph, const LayerSelectorFunction &amp;selector)</div><div class="ttdoc">Selects subgraphs from a graph based on the selector function and the algorithm. </div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8cpp_source.xhtml#l00259">SubgraphViewSelector.cpp:259</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
<div class="ttc" id="_subgraph_view_selector_8cpp_xhtml_a3a672da6a5207243cf3e5c933872b5bf"><div class="ttname"><a href="_subgraph_view_selector_8cpp.xhtml#a3a672da6a5207243cf3e5c933872b5bf">m_Subgraph</a></div><div class="ttdeci">std::shared_ptr&lt; PartialSubgraph &gt; m_Subgraph</div><div class="ttdoc">Which subgraph this layer has been assigned to. </div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8cpp_source.xhtml#l00251">SubgraphViewSelector.cpp:251</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255"><div class="ttname"><a href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::PaddingMode::Constant</a></div></div>
<div class="ttc" id="_subgraph_view_selector_8hpp_xhtml"><div class="ttname"><a href="_subgraph_view_selector_8hpp.xhtml">SubgraphViewSelector.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a49538fa883b70c944e437d65d6628eec"><div class="ttname"><a href="namespacearmnn.xhtml#a49538fa883b70c944e437d65d6628eec">armnn::ForEachLayerOutput</a></div><div class="ttdeci">void ForEachLayerOutput(LayerSelectionInfo::LayerInfoContainer &amp;layerInfos, LayerSelectionInfo &amp;layerInfo, Delegate function)</div><div class="ttdef"><b>Definition:</b> <a href="_subgraph_view_selector_8cpp_source.xhtml#l00288">SubgraphViewSelector.cpp:288</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_input_slot_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_input_slot.xhtml">armnn::IInputSlot</a></div><div class="ttdoc">An input connection slot for a layer. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00025">INetwork.hpp:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_layer.xhtml">armnn::Layer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layer_8hpp_source.xhtml#l00217">Layer.hpp:217</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="_subgraph_view_selector_8cpp.xhtml">SubgraphViewSelector.cpp</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:27 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
