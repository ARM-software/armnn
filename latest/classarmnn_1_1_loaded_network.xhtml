<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: LoadedNetwork Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarmnn_1_1_loaded_network.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_1_1_loaded_network-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">LoadedNetwork Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_loaded_network_8hpp_source.xhtml">LoadedNetwork.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a48fe2df41d914c38c913160956acc706"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a48fe2df41d914c38c913160956acc706">WorkloadQueue</a> = std::vector&lt; std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; &gt;</td></tr>
<tr class="separator:a48fe2df41d914c38c913160956acc706"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1bf130efa381d53486c78ea417ea4db1"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a1bf130efa381d53486c78ea417ea4db1">~LoadedNetwork</a> ()</td></tr>
<tr class="separator:a1bf130efa381d53486c78ea417ea4db1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16e72675c37a8f251cf02951e222d4ab"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a16e72675c37a8f251cf02951e222d4ab">CreateWorkingMemHandle</a> (<a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a> networkId)</td></tr>
<tr class="memdesc:a16e72675c37a8f251cf02951e222d4ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a new unique WorkingMemHandle object.  <a href="classarmnn_1_1_loaded_network.xhtml#a16e72675c37a8f251cf02951e222d4ab">More...</a><br /></td></tr>
<tr class="separator:a16e72675c37a8f251cf02951e222d4ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af616683424cb40d83b5a923db7f06f11"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#af616683424cb40d83b5a923db7f06f11">GetInputTensorInfo</a> (<a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerId) const</td></tr>
<tr class="separator:af616683424cb40d83b5a923db7f06f11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b6b57945bc68f659e08d28c8a015e91"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a2b6b57945bc68f659e08d28c8a015e91">GetOutputTensorInfo</a> (<a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerId) const</td></tr>
<tr class="separator:a2b6b57945bc68f659e08d28c8a015e91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a704bd570f39deda992bccdc639640dc7"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a704bd570f39deda992bccdc639640dc7">ImportInputs</a> (const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;inputTensors, <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a> forceImportMemorySource=<a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277aec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a>)</td></tr>
<tr class="separator:a704bd570f39deda992bccdc639640dc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac88d932e6e015a59551322b25796b11a"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#ac88d932e6e015a59551322b25796b11a">ImportOutputs</a> (const <a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> &amp;outputTensors, <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a> forceImportMemorySource=<a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277aec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a>)</td></tr>
<tr class="separator:ac88d932e6e015a59551322b25796b11a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa792fd8b43401e3d6665110cdb0af27b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#aa792fd8b43401e3d6665110cdb0af27b">ClearImportedInputs</a> (const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> &gt; inputIds)</td></tr>
<tr class="separator:aa792fd8b43401e3d6665110cdb0af27b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af06f742ce80985a8fbbbc028c20259b1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#af06f742ce80985a8fbbbc028c20259b1">ClearImportedOutputs</a> (const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> &gt; outputIds)</td></tr>
<tr class="separator:af06f742ce80985a8fbbbc028c20259b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87880cba8611688cc57bec8f913958e8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a87880cba8611688cc57bec8f913958e8">EnqueueWorkload</a> (const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;inputTensors, const <a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> &amp;outputTensors, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> &gt; preImportedInputIds={}, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> &gt; preImportedOutputIds={})</td></tr>
<tr class="memdesc:a87880cba8611688cc57bec8f913958e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Single thread execution of the loaded network.  <a href="classarmnn_1_1_loaded_network.xhtml#a87880cba8611688cc57bec8f913958e8">More...</a><br /></td></tr>
<tr class="separator:a87880cba8611688cc57bec8f913958e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95b1c23f6f296a0c39383bef20fdd46a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a95b1c23f6f296a0c39383bef20fdd46a">Execute</a> (const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;inputTensors, const <a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> &amp;outputTensors, <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a> &amp;workingMemHandle, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> &gt; preImportedInputs={}, std::vector&lt; <a class="el" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> &gt; preImportedOutputs={})</td></tr>
<tr class="memdesc:a95b1c23f6f296a0c39383bef20fdd46a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thread safe execution of the loaded network.  <a href="classarmnn_1_1_loaded_network.xhtml#a95b1c23f6f296a0c39383bef20fdd46a">More...</a><br /></td></tr>
<tr class="separator:a95b1c23f6f296a0c39383bef20fdd46a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee8e1cb09e0d4dcbe64df111c5edd55e"><td class="memItemLeft" align="right" valign="top">const std::shared_ptr&lt; <a class="el" href="classarmnn_1_1_i_profiler.xhtml">IProfiler</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#aee8e1cb09e0d4dcbe64df111c5edd55e">GetProfiler</a> () const</td></tr>
<tr class="separator:aee8e1cb09e0d4dcbe64df111c5edd55e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf8558a23ae9be6e7ea165989f1fa808"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#aaf8558a23ae9be6e7ea165989f1fa808">FreeWorkingMemory</a> ()</td></tr>
<tr class="separator:aaf8558a23ae9be6e7ea165989f1fa808"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a091ea8d2d804c8902f3120fdf2a36512"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a091ea8d2d804c8902f3120fdf2a36512">RegisterDebugCallback</a> (const <a class="el" href="namespacearmnn.xhtml#a15f3ad9b5e4e3d46b0a6dda246a7bc28">DebugCallbackFunction</a> &amp;func)</td></tr>
<tr class="separator:a091ea8d2d804c8902f3120fdf2a36512"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae41171032a9c106c1fd4b5991045eb0b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#ae41171032a9c106c1fd4b5991045eb0b">SendNetworkStructure</a> (arm::pipe::IProfilingService &amp;profilingService)</td></tr>
<tr class="separator:ae41171032a9c106c1fd4b5991045eb0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a390c87e27deac4f51af9533053b2ee14"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#a390c87e27deac4f51af9533053b2ee14">IsAsyncEnabled</a> ()</td></tr>
<tr class="separator:a390c87e27deac4f51af9533053b2ee14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad90f4f6c9360c5cb64c164b9ddcb3130"><td class="memItemLeft" align="right" valign="top">arm::pipe::ProfilingGuid&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#ad90f4f6c9360c5cb64c164b9ddcb3130">GetNetworkGuid</a> ()</td></tr>
<tr class="separator:ad90f4f6c9360c5cb64c164b9ddcb3130"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:af75dd30cff3d42ff35ddd2b625b7e9ae"><td class="memItemLeft" align="right" valign="top">static std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_loaded_network.xhtml">LoadedNetwork</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_loaded_network.xhtml#af75dd30cff3d42ff35ddd2b625b7e9ae">MakeLoadedNetwork</a> (std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_optimized_network.xhtml">IOptimizedNetwork</a> &gt; net, std::string &amp;errorMessage, const <a class="el" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> &amp;networkProperties, arm::pipe::IProfilingService *profilingService)</td></tr>
<tr class="separator:af75dd30cff3d42ff35ddd2b625b7e9ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_loaded_network_8hpp_source.xhtml#l00042">42</a> of file <a class="el" href="_loaded_network_8hpp_source.xhtml">LoadedNetwork.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a48fe2df41d914c38c913160956acc706"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48fe2df41d914c38c913160956acc706">&#9670;&nbsp;</a></span>WorkloadQueue</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classarmnn_1_1_loaded_network.xhtml#a48fe2df41d914c38c913160956acc706">WorkloadQueue</a> =  std::vector&lt;std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a>&gt; &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8hpp_source.xhtml#l00045">45</a> of file <a class="el" href="_loaded_network_8hpp_source.xhtml">LoadedNetwork.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a1bf130efa381d53486c78ea417ea4db1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bf130efa381d53486c78ea417ea4db1">&#9670;&nbsp;</a></span>~LoadedNetwork()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_loaded_network.xhtml">LoadedNetwork</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8hpp_source.xhtml#l00047">47</a> of file <a class="el" href="_loaded_network_8hpp_source.xhtml">LoadedNetwork.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <a class="code" href="classarmnn_1_1_loaded_network.xhtml#aaf8558a23ae9be6e7ea165989f1fa808">FreeWorkingMemory</a>();</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_loaded_network_8cpp_source.xhtml#l01222">LoadedNetwork::FreeWorkingMemory()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa792fd8b43401e3d6665110cdb0af27b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa792fd8b43401e3d6665110cdb0af27b">&#9670;&nbsp;</a></span>ClearImportedInputs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ClearImportedInputs </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> &gt;&#160;</td>
          <td class="paramname"><em>inputIds</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l01685">1685</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;{</div>
<div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keywordtype">id</span> : inputIds)</div>
<div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;    {</div>
<div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;        <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &gt; m_PreImportedInputHandles.size())</div>
<div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;        {</div>
<div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(fmt::format(<span class="stringliteral">&quot;ClearImportedInputs::Unknown ImportedInputId: {}&quot;</span>, <span class="keywordtype">id</span>));</div>
<div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;        }</div>
<div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160; </div>
<div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;        <span class="keyword">auto</span>&amp; importedTensorHandle = m_PreImportedInputHandles[id].m_TensorHandle;</div>
<div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;        <span class="keywordflow">if</span> (!importedTensorHandle)</div>
<div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;        {</div>
<div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(</div>
<div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;                    fmt::format(<span class="stringliteral">&quot;ClearImportedInputs::ImportedInput with id: {} has already been deleted&quot;</span>, <span class="keywordtype">id</span>));</div>
<div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;        }</div>
<div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;        <span class="comment">// Call Unimport then destroy the tensorHandle</span></div>
<div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;        importedTensorHandle-&gt;Unimport();</div>
<div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;        importedTensorHandle = {};</div>
<div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;    }</div>
<div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00635">RuntimeImpl::ClearImportedInputs()</a>.</p>

</div>
</div>
<a id="af06f742ce80985a8fbbbc028c20259b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af06f742ce80985a8fbbbc028c20259b1">&#9670;&nbsp;</a></span>ClearImportedOutputs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ClearImportedOutputs </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> &gt;&#160;</td>
          <td class="paramname"><em>outputIds</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l01706">1706</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;{</div>
<div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <span class="keywordtype">id</span> : outputIds)</div>
<div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;    {</div>
<div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;        <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &gt; m_PreImportedOutputHandles.size())</div>
<div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;        {</div>
<div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(fmt::format(<span class="stringliteral">&quot;ClearImportedOutputs::Unknown ImportedOutputId: {}&quot;</span>, <span class="keywordtype">id</span>));</div>
<div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;        }</div>
<div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160; </div>
<div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;        <span class="keyword">auto</span>&amp; importedTensorHandle = m_PreImportedOutputHandles[id].m_TensorHandle;</div>
<div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;        <span class="keywordflow">if</span> (!importedTensorHandle)</div>
<div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;        {</div>
<div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(</div>
<div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;                    fmt::format(<span class="stringliteral">&quot;ClearImportedOutputs::ImportedOutput with id: {} has already been deleted&quot;</span>, <span class="keywordtype">id</span>));</div>
<div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;        }</div>
<div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;        <span class="comment">// Call Unimport then destroy the tensorHandle</span></div>
<div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;        importedTensorHandle-&gt;Unimport();</div>
<div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;        importedTensorHandle = {};</div>
<div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;    }</div>
<div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00639">RuntimeImpl::ClearImportedOutputs()</a>.</p>

</div>
</div>
<a id="a16e72675c37a8f251cf02951e222d4ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16e72675c37a8f251cf02951e222d4ab">&#9670;&nbsp;</a></span>CreateWorkingMemHandle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a> &gt; CreateWorkingMemHandle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">NetworkId</a>&#160;</td>
          <td class="paramname"><em>networkId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a new unique WorkingMemHandle object. </p>
<p>Create multiple handles if you wish to have overlapped Execution by calling this function from different threads. </p>

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l01949">1949</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;{</div>
<div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;    Graph&amp; order = m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph();</div>
<div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160; </div>
<div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;    <span class="comment">// Tensors that will need to be allocated internally within armnn</span></div>
<div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;    std::vector&lt;std::unique_ptr&lt;ITensorHandle&gt;&gt; managedTensorHandles;</div>
<div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;    <span class="comment">// Tensors that will be allocated externally by the user</span></div>
<div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160;    std::vector&lt;std::unique_ptr&lt;ITensorHandle&gt;&gt; unmanagedTensorHandles;</div>
<div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160; </div>
<div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;    std::vector&lt;WorkingMemDescriptor&gt; workingMemDescriptors;</div>
<div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;    std::vector&lt;std::pair&lt;BackendId, ExecutionData&gt;&gt; executionDataVec;</div>
<div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160; </div>
<div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160;    <span class="keyword">auto</span> GetTensorHandle = [&amp;](Layer* layer, <span class="keyword">const</span> OutputSlot&amp; outputSlot)</div>
<div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160;    {</div>
<div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;        <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a> factoryId = outputSlot.GetTensorHandleFactoryId();</div>
<div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;        <span class="keyword">const</span> TensorInfo&amp; tensorInfo = outputSlot.GetTensorInfo();</div>
<div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160; </div>
<div class="line"><a name="l01966"></a><span class="lineno"> 1966</span>&#160;        <span class="keywordflow">if</span> (factoryId == <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a9c95f90eb40e31f629e0e2947b8bc6f9">ITensorHandleFactory::LegacyFactoryId</a>)</div>
<div class="line"><a name="l01967"></a><span class="lineno"> 1967</span>&#160;        {</div>
<div class="line"><a name="l01968"></a><span class="lineno"> 1968</span>&#160;            BackendId <span class="keywordtype">id</span> = layer-&gt;GetBackendId();</div>
<div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div>
<div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;            <span class="keywordflow">return</span> m_WorkloadFactories.at(<span class="keywordtype">id</span>)-&gt;CreateTensorHandle(tensorInfo, <span class="keyword">false</span>);</div>
<div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;            <a class="code" href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div>
<div class="line"><a name="l01972"></a><span class="lineno"> 1972</span>&#160;        }</div>
<div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;        {</div>
<div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;            ITensorHandleFactory* handleFactory = m_TensorHandleFactoryRegistry.<a class="code" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml#ae5ecc42140a12c855554a4a621fc8456">GetFactory</a>(factoryId);</div>
<div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(handleFactory);</div>
<div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;            <span class="keywordflow">return</span> handleFactory-&gt;CreateTensorHandle(tensorInfo, <span class="keyword">false</span>);</div>
<div class="line"><a name="l01978"></a><span class="lineno"> 1978</span>&#160;        }</div>
<div class="line"><a name="l01979"></a><span class="lineno"> 1979</span>&#160;    };</div>
<div class="line"><a name="l01980"></a><span class="lineno"> 1980</span>&#160; </div>
<div class="line"><a name="l01981"></a><span class="lineno"> 1981</span>&#160;    <span class="keyword">struct </span>HandleInfo</div>
<div class="line"><a name="l01982"></a><span class="lineno"> 1982</span>&#160;    {</div>
<div class="line"><a name="l01983"></a><span class="lineno"> 1983</span>&#160;        ITensorHandle* m_TensorHandle;</div>
<div class="line"><a name="l01984"></a><span class="lineno"> 1984</span>&#160; </div>
<div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;        <span class="keywordtype">bool</span> m_IsInputLayerHandle = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;        <span class="keywordtype">bool</span> m_IsOutputLayerHandle = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160; </div>
<div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;        WorkingMemHandle::InputMemDescriptorCoords m_InputMemDescriptorCoords;</div>
<div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;        WorkingMemHandle::OutputMemDescriptorCoords m_OutputMemDescriptorCoords;</div>
<div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;    };</div>
<div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160; </div>
<div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;    std::unordered_map&lt;const OutputSlot*, HandleInfo&gt; outputToHandleInfoMap;</div>
<div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160; </div>
<div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> layerIndex = 0;</div>
<div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; layer : order)</div>
<div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;    {</div>
<div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;        <span class="comment">// Constant layers execution and management is handled during loaded network construction</span></div>
<div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;        <span class="keywordflow">if</span> (layer-&gt;GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acb17869fe51048b5a5c4c6106551a255">LayerType::Constant</a>)</div>
<div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;        {</div>
<div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;        }</div>
<div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160; </div>
<div class="line"><a name="l02003"></a><span class="lineno"> 2003</span>&#160;        WorkingMemDescriptor workingMemDescriptor;</div>
<div class="line"><a name="l02004"></a><span class="lineno"> 2004</span>&#160; </div>
<div class="line"><a name="l02005"></a><span class="lineno"> 2005</span>&#160;        <span class="keywordtype">bool</span> isMemoryManaged = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160;        <span class="keywordtype">bool</span> isInputLayer = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160;        <span class="keywordtype">bool</span> isOutputLayer = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;        <span class="keywordtype">bool</span> isConnectedToOutputLayer = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160; </div>
<div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;        <span class="keywordflow">if</span> (layer-&gt;GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a> || layer-&gt;GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">LayerType::MemImport</a>)</div>
<div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;        {</div>
<div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;            <span class="comment">// Input layers/workloads will not be executed so the descriptor is not added to workingMemDescriptors</span></div>
<div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;            <span class="comment">// However we will still need to manage the tensorHandle</span></div>
<div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;            isInputLayer = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;            isMemoryManaged = !m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#a111a52fb2bd24aee9fc125f28c2eb1cb">m_ImportEnabled</a>;</div>
<div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160;        }</div>
<div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (layer-&gt;GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a>)</div>
<div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;        {</div>
<div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;            isOutputLayer = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02020"></a><span class="lineno"> 2020</span>&#160;        }</div>
<div class="line"><a name="l02021"></a><span class="lineno"> 2021</span>&#160; </div>
<div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex = 0;</div>
<div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;        <span class="comment">// Create a tensor handle for each output slot of a layer</span></div>
<div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;        <span class="comment">// Once we create it, we start managing its lifetime</span></div>
<div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; slot : layer-&gt;GetOutputSlots())</div>
<div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;        {</div>
<div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; slot.GetNumConnections(); ++i)</div>
<div class="line"><a name="l02028"></a><span class="lineno"> 2028</span>&#160;            {</div>
<div class="line"><a name="l02029"></a><span class="lineno"> 2029</span>&#160;                <span class="keywordflow">if</span> ((slot.GetConnection(i)-&gt;GetOwningLayer().GetType() == <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a>))</div>
<div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;                {</div>
<div class="line"><a name="l02031"></a><span class="lineno"> 2031</span>&#160;                    <span class="keywordflow">if</span> (!isConnectedToOutputLayer)</div>
<div class="line"><a name="l02032"></a><span class="lineno"> 2032</span>&#160;                    {</div>
<div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;                        isConnectedToOutputLayer = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02034"></a><span class="lineno"> 2034</span>&#160;                        <span class="comment">// If Export is enabled disable memory management, so we can export, otherwise we do a copy</span></div>
<div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160;                        isMemoryManaged = !m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#a042fb9a87ffa70730766d19505d80490">m_ExportEnabled</a>;</div>
<div class="line"><a name="l02036"></a><span class="lineno"> 2036</span>&#160;                    }</div>
<div class="line"><a name="l02037"></a><span class="lineno"> 2037</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160;                    {</div>
<div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;                        <span class="comment">// Importing in this case would likely cause unexpected behaviour, so we disallow it.</span></div>
<div class="line"><a name="l02040"></a><span class="lineno"> 2040</span>&#160;                        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt;</div>
<div class="line"><a name="l02041"></a><span class="lineno"> 2041</span>&#160;                           fmt::format(<span class="stringliteral">&quot;Layer name: &#39;{0}&#39; guid: &#39;{1}&#39; has two or more OutputLayers connected to it. &quot;</span></div>
<div class="line"><a name="l02042"></a><span class="lineno"> 2042</span>&#160;                                       <span class="stringliteral">&quot;This will prevent importing on the connected OutputLayers.&quot;</span>,</div>
<div class="line"><a name="l02043"></a><span class="lineno"> 2043</span>&#160;                                        layer-&gt;GetName(), layer-&gt;GetGuid());</div>
<div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160;                        isMemoryManaged = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;                    }</div>
<div class="line"><a name="l02046"></a><span class="lineno"> 2046</span>&#160;                }</div>
<div class="line"><a name="l02047"></a><span class="lineno"> 2047</span>&#160;            }</div>
<div class="line"><a name="l02048"></a><span class="lineno"> 2048</span>&#160; </div>
<div class="line"><a name="l02049"></a><span class="lineno"> 2049</span>&#160;            ITensorHandle* tensorHandle;</div>
<div class="line"><a name="l02050"></a><span class="lineno"> 2050</span>&#160;            <span class="keywordflow">if</span> (isMemoryManaged)</div>
<div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160;            {</div>
<div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;                managedTensorHandles.emplace_back(GetTensorHandle(layer, slot));</div>
<div class="line"><a name="l02053"></a><span class="lineno"> 2053</span>&#160;                tensorHandle = managedTensorHandles.back().get();</div>
<div class="line"><a name="l02054"></a><span class="lineno"> 2054</span>&#160;            }</div>
<div class="line"><a name="l02055"></a><span class="lineno"> 2055</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l02056"></a><span class="lineno"> 2056</span>&#160;            {</div>
<div class="line"><a name="l02057"></a><span class="lineno"> 2057</span>&#160;                unmanagedTensorHandles.emplace_back(GetTensorHandle(layer, slot));</div>
<div class="line"><a name="l02058"></a><span class="lineno"> 2058</span>&#160;                tensorHandle = unmanagedTensorHandles.back().get();</div>
<div class="line"><a name="l02059"></a><span class="lineno"> 2059</span>&#160;            }</div>
<div class="line"><a name="l02060"></a><span class="lineno"> 2060</span>&#160; </div>
<div class="line"><a name="l02061"></a><span class="lineno"> 2061</span>&#160;            workingMemDescriptor.m_Outputs.push_back(tensorHandle);</div>
<div class="line"><a name="l02062"></a><span class="lineno"> 2062</span>&#160; </div>
<div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;            HandleInfo&amp; handleInfo = outputToHandleInfoMap[&amp;slot];</div>
<div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;            handleInfo.m_TensorHandle = tensorHandle;</div>
<div class="line"><a name="l02065"></a><span class="lineno"> 2065</span>&#160; </div>
<div class="line"><a name="l02066"></a><span class="lineno"> 2066</span>&#160;            <span class="comment">// Store the coordinates of the current layer&#39;s OutputSlot that is connected to the OutputLayer</span></div>
<div class="line"><a name="l02067"></a><span class="lineno"> 2067</span>&#160;            <span class="keywordflow">if</span> (isConnectedToOutputLayer)</div>
<div class="line"><a name="l02068"></a><span class="lineno"> 2068</span>&#160;            {</div>
<div class="line"><a name="l02069"></a><span class="lineno"> 2069</span>&#160;                handleInfo.m_IsOutputLayerHandle = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02070"></a><span class="lineno"> 2070</span>&#160;                handleInfo.m_OutputMemDescriptorCoords.m_OutputSlotCoords = {layerIndex, slotIndex};</div>
<div class="line"><a name="l02071"></a><span class="lineno"> 2071</span>&#160;            }</div>
<div class="line"><a name="l02072"></a><span class="lineno"> 2072</span>&#160;            <span class="comment">// Store the LayerBindingId of the InputLayer</span></div>
<div class="line"><a name="l02073"></a><span class="lineno"> 2073</span>&#160;            <span class="keywordflow">if</span> (isInputLayer)</div>
<div class="line"><a name="l02074"></a><span class="lineno"> 2074</span>&#160;            {</div>
<div class="line"><a name="l02075"></a><span class="lineno"> 2075</span>&#160;                handleInfo.m_IsInputLayerHandle = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02076"></a><span class="lineno"> 2076</span>&#160;                <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> bindingId = <span class="keyword">static_cast&lt;</span>BindableLayer*<span class="keyword">&gt;</span>(layer)-&gt;GetBindingId();</div>
<div class="line"><a name="l02077"></a><span class="lineno"> 2077</span>&#160;                handleInfo.m_InputMemDescriptorCoords.m_LayerBindingId = bindingId;</div>
<div class="line"><a name="l02078"></a><span class="lineno"> 2078</span>&#160;            }</div>
<div class="line"><a name="l02079"></a><span class="lineno"> 2079</span>&#160;            slotIndex++;</div>
<div class="line"><a name="l02080"></a><span class="lineno"> 2080</span>&#160;        }</div>
<div class="line"><a name="l02081"></a><span class="lineno"> 2081</span>&#160;        <span class="comment">// Loop through the input slots in the same layer and decrement the reference counter associated</span></div>
<div class="line"><a name="l02082"></a><span class="lineno"> 2082</span>&#160;        <span class="comment">// to each tensor handle we encounter.</span></div>
<div class="line"><a name="l02083"></a><span class="lineno"> 2083</span>&#160;        <span class="comment">// Once it reaches zero, the lifetime of the tensor handle has ended, and we mark its memory as available</span></div>
<div class="line"><a name="l02084"></a><span class="lineno"> 2084</span>&#160;        <span class="comment">// so that the next tensor handle with a non overlapping lifetime can share its memory.</span></div>
<div class="line"><a name="l02085"></a><span class="lineno"> 2085</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; slot : layer-&gt;GetInputSlots())</div>
<div class="line"><a name="l02086"></a><span class="lineno"> 2086</span>&#160;        {</div>
<div class="line"><a name="l02087"></a><span class="lineno"> 2087</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(slot.GetConnection());</div>
<div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;            <span class="keyword">auto</span> outputSlot = slot.GetConnectedOutputSlot();</div>
<div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;            <span class="keyword">auto</span> key = outputSlot-&gt;GetOwningLayer().GetGuid();</div>
<div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160; </div>
<div class="line"><a name="l02091"></a><span class="lineno"> 2091</span>&#160;            <span class="comment">// Constant layers execution and management is handled during loaded network construction</span></div>
<div class="line"><a name="l02092"></a><span class="lineno"> 2092</span>&#160;            <span class="keyword">auto</span> found = m_ConstantTensorHandles.find(key);</div>
<div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;            <span class="keywordflow">if</span> (found != m_ConstantTensorHandles.end())</div>
<div class="line"><a name="l02094"></a><span class="lineno"> 2094</span>&#160;            {</div>
<div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;                ITensorHandle* tensorHandle = found-&gt;second;</div>
<div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;                workingMemDescriptor.m_Inputs.push_back(tensorHandle);</div>
<div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160; </div>
<div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;                <span class="comment">// Odd case where a constant layer is connected to an output layer</span></div>
<div class="line"><a name="l02099"></a><span class="lineno"> 2099</span>&#160;                <span class="comment">// We will need to create a HandleInfo to track it</span></div>
<div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;                <span class="keywordflow">if</span> (isOutputLayer)</div>
<div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;                {</div>
<div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;                    <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> bindingId = <span class="keyword">static_cast&lt;</span>BindableLayer*<span class="keyword">&gt;</span>(layer)-&gt;GetBindingId();</div>
<div class="line"><a name="l02103"></a><span class="lineno"> 2103</span>&#160; </div>
<div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;                    HandleInfo&amp; handleInfo = outputToHandleInfoMap[outputSlot];</div>
<div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;                    handleInfo.m_TensorHandle = tensorHandle;</div>
<div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;                    handleInfo.m_IsOutputLayerHandle = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;                    handleInfo.m_OutputMemDescriptorCoords.m_LayerBindingIds.push_back(bindingId);</div>
<div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;                    handleInfo.m_OutputMemDescriptorCoords.m_InputSlotCoords.push_back({layerIndex, 0});</div>
<div class="line"><a name="l02109"></a><span class="lineno"> 2109</span>&#160;                }</div>
<div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;            }</div>
<div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160; </div>
<div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;            HandleInfo&amp; handleInfo = outputToHandleInfoMap.at(outputSlot);</div>
<div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160; </div>
<div class="line"><a name="l02115"></a><span class="lineno"> 2115</span>&#160;            ITensorHandle* inputTensorHandle = handleInfo.m_TensorHandle;</div>
<div class="line"><a name="l02116"></a><span class="lineno"> 2116</span>&#160;            workingMemDescriptor.m_Inputs.push_back(inputTensorHandle);</div>
<div class="line"><a name="l02117"></a><span class="lineno"> 2117</span>&#160; </div>
<div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;            <span class="comment">// Store the LayerBindingId of the OutputLayer</span></div>
<div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;            <span class="keywordflow">if</span> (isOutputLayer)</div>
<div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160;            {</div>
<div class="line"><a name="l02121"></a><span class="lineno"> 2121</span>&#160;                <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> bindingId = <span class="keyword">static_cast&lt;</span>BindableLayer*<span class="keyword">&gt;</span>(layer)-&gt;GetBindingId();</div>
<div class="line"><a name="l02122"></a><span class="lineno"> 2122</span>&#160;                handleInfo.m_OutputMemDescriptorCoords.m_LayerBindingIds.push_back(bindingId);</div>
<div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160;                handleInfo.m_OutputMemDescriptorCoords.m_InputSlotCoords.push_back({layerIndex, 0});</div>
<div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;            }</div>
<div class="line"><a name="l02125"></a><span class="lineno"> 2125</span>&#160;            <span class="comment">// In this case the layer is not an Output Layer but shares its input tensorhandle with an OutputLayer</span></div>
<div class="line"><a name="l02126"></a><span class="lineno"> 2126</span>&#160;            <span class="comment">// It will need to be updated as well, if we swap out the tensorhandle</span></div>
<div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (handleInfo.m_IsOutputLayerHandle)</div>
<div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;            {</div>
<div class="line"><a name="l02129"></a><span class="lineno"> 2129</span>&#160;                handleInfo.m_OutputMemDescriptorCoords.m_InputSlotCoords.push_back({layerIndex, slot.GetSlotIndex()});</div>
<div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;            }</div>
<div class="line"><a name="l02131"></a><span class="lineno"> 2131</span>&#160; </div>
<div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;            <span class="comment">// Store the coordinates of the InputSlots connected to the InputLayer</span></div>
<div class="line"><a name="l02133"></a><span class="lineno"> 2133</span>&#160;            <span class="comment">// There can be more than one InputSlot connected to an InputLayer, so we use a vector</span></div>
<div class="line"><a name="l02134"></a><span class="lineno"> 2134</span>&#160;            <span class="keywordflow">if</span> (handleInfo.m_IsInputLayerHandle)</div>
<div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;            {</div>
<div class="line"><a name="l02136"></a><span class="lineno"> 2136</span>&#160;                std::pair&lt;LayerGuid, unsigned int&gt; connectionLocation{layerIndex, slot.GetSlotIndex()};</div>
<div class="line"><a name="l02137"></a><span class="lineno"> 2137</span>&#160;                handleInfo.m_InputMemDescriptorCoords.m_InputSlotCoords.emplace_back(connectionLocation);</div>
<div class="line"><a name="l02138"></a><span class="lineno"> 2138</span>&#160;            }</div>
<div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;        }</div>
<div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160; </div>
<div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;        <span class="comment">// Input/Output layers/workloads will not be executed, so the descriptor is not added to workingMemDescriptors</span></div>
<div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;        <span class="comment">// However we will still need to manage the tensorHandle</span></div>
<div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160;        <span class="keywordflow">if</span> (!isInputLayer)</div>
<div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160;        {</div>
<div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;            <span class="comment">// Simply auto initialise ExecutionData here, so it&#39;s added only for the layer that require execution.</span></div>
<div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;            <span class="comment">// The memory and data will be allocated/assigned for the void* in WorkingMemHandle::Allocate.</span></div>
<div class="line"><a name="l02147"></a><span class="lineno"> 2147</span>&#160;            std::pair&lt;BackendId, ExecutionData&gt; dataPair;</div>
<div class="line"><a name="l02148"></a><span class="lineno"> 2148</span>&#160;            dataPair.first = layer-&gt;GetBackendId();</div>
<div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160; </div>
<div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;            executionDataVec.push_back(dataPair);</div>
<div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;            workingMemDescriptors.push_back(workingMemDescriptor);</div>
<div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160; </div>
<div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;            layerIndex++;</div>
<div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160;        }</div>
<div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;    }</div>
<div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160; </div>
<div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;    std::vector&lt;std::pair&lt;std::shared_ptr&lt;TensorMemory&gt;, <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a>&gt;&gt; tensorMemory;</div>
<div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160; </div>
<div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;    <span class="keyword">auto</span> externalMemoryManager = CreateExternalMemoryManger(tensorMemory);</div>
<div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160; </div>
<div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;    <span class="comment">// Sort m_TensorMemory, so it&#39;s order matches the outputSlot order</span></div>
<div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;    std::sort(tensorMemory.begin(), tensorMemory.end(),</div>
<div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;              [](<span class="keyword">const</span> std::pair&lt;std::shared_ptr&lt;TensorMemory&gt;, <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a>&gt;&amp; lhs,</div>
<div class="line"><a name="l02164"></a><span class="lineno"> 2164</span>&#160;                 <span class="keyword">const</span> std::pair&lt;std::shared_ptr&lt;TensorMemory&gt;, <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a>&gt;&amp; rhs)</div>
<div class="line"><a name="l02165"></a><span class="lineno"> 2165</span>&#160;              {</div>
<div class="line"><a name="l02166"></a><span class="lineno"> 2166</span>&#160;                  return lhs.first-&gt;m_OutputSlotId &lt; rhs.first-&gt;m_OutputSlotId;</div>
<div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;              });</div>
<div class="line"><a name="l02168"></a><span class="lineno"> 2168</span>&#160; </div>
<div class="line"><a name="l02169"></a><span class="lineno"> 2169</span>&#160;    std::vector&lt;WorkingMemHandle::InputMemDescriptorCoords&gt; inputConnectionsInfo;</div>
<div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;    std::vector&lt;WorkingMemHandle::OutputMemDescriptorCoords&gt; outputConnectionsInfo;</div>
<div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160; </div>
<div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; handleInfo: outputToHandleInfoMap)</div>
<div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;    {</div>
<div class="line"><a name="l02174"></a><span class="lineno"> 2174</span>&#160;        <span class="keywordflow">if</span> (handleInfo.second.m_IsOutputLayerHandle)</div>
<div class="line"><a name="l02175"></a><span class="lineno"> 2175</span>&#160;        {</div>
<div class="line"><a name="l02176"></a><span class="lineno"> 2176</span>&#160;            outputConnectionsInfo.emplace_back(handleInfo.second.m_OutputMemDescriptorCoords);</div>
<div class="line"><a name="l02177"></a><span class="lineno"> 2177</span>&#160;        }</div>
<div class="line"><a name="l02178"></a><span class="lineno"> 2178</span>&#160; </div>
<div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160;        <span class="keywordflow">if</span> (handleInfo.second.m_IsInputLayerHandle)</div>
<div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;        {</div>
<div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;            inputConnectionsInfo.emplace_back(handleInfo.second.m_InputMemDescriptorCoords);</div>
<div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;        }</div>
<div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;    }</div>
<div class="line"><a name="l02184"></a><span class="lineno"> 2184</span>&#160; </div>
<div class="line"><a name="l02185"></a><span class="lineno"> 2185</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;WorkingMemHandle&gt;(networkId,</div>
<div class="line"><a name="l02186"></a><span class="lineno"> 2186</span>&#160;                                              inputConnectionsInfo,</div>
<div class="line"><a name="l02187"></a><span class="lineno"> 2187</span>&#160;                                              outputConnectionsInfo,</div>
<div class="line"><a name="l02188"></a><span class="lineno"> 2188</span>&#160;                                              workingMemDescriptors,</div>
<div class="line"><a name="l02189"></a><span class="lineno"> 2189</span>&#160;                                              std::move(externalMemoryManager),</div>
<div class="line"><a name="l02190"></a><span class="lineno"> 2190</span>&#160;                                              std::move(tensorMemory),</div>
<div class="line"><a name="l02191"></a><span class="lineno"> 2191</span>&#160;                                              std::move(managedTensorHandles),</div>
<div class="line"><a name="l02192"></a><span class="lineno"> 2192</span>&#160;                                              std::move(unmanagedTensorHandles),</div>
<div class="line"><a name="l02193"></a><span class="lineno"> 2193</span>&#160;                                              executionDataVec,</div>
<div class="line"><a name="l02194"></a><span class="lineno"> 2194</span>&#160;                                              &amp;m_Backends);</div>
<div class="line"><a name="l02195"></a><span class="lineno"> 2195</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">ITensorHandleFactory::CreateTensorHandle()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00277">Layer::GetBackendId()</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00039">TensorHandleFactoryRegistry::GetFactory()</a>, and <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00050">ITensorHandleFactory::LegacyFactoryId</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00735">RuntimeImpl::CreateWorkingMemHandle()</a>.</p>

</div>
</div>
<a id="a87880cba8611688cc57bec8f913958e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87880cba8611688cc57bec8f913958e8">&#9670;&nbsp;</a></span>EnqueueWorkload()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> EnqueueWorkload </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>outputTensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> &gt;&#160;</td>
          <td class="paramname"><em>preImportedInputIds</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> &gt;&#160;</td>
          <td class="paramname"><em>preImportedOutputIds</em> = <code>{}</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Single thread execution of the loaded network. </p>

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l00839">839</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;{</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    <span class="keyword">const</span> Graph&amp; graph = m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph();</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160; </div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    <span class="comment">// Walk graph to determine the order of execution.</span></div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    <span class="keywordflow">if</span> (graph.GetNumLayers() &lt; 2)</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    {</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(warning) &lt;&lt; <span class="stringliteral">&quot;IRuntime::EnqueueWorkload()::Less than two nodes in graph&quot;</span>;</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">Status::Failure</a>;</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    }</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160; </div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <span class="comment">// Data that must be kept alive for the entire execution of the workload.</span></div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    WorkloadData workloadData(inputTensors, outputTensors);</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160; </div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <span class="comment">// Input tensors can be provided as parameters or pre imported. Either way the number of</span></div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    <span class="comment">// tensors should match the number of inputs.</span></div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="keywordflow">if</span> (graph.GetNumInputs() != (inputTensors.size() + preImportedInputIds.size()))</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    {</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Number of inputs provided does not match network.&quot;</span>);</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    }</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160; </div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    <span class="comment">// For each input to the network, call EnqueueInput with the data passed by the user.</span></div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    {</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Compute::Undefined</a>, <span class="stringliteral">&quot;PrepareInputs&quot;</span>);</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;        m_InputQueue.clear();</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;        m_InputQueue.reserve(graph.GetNumInputs());</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160; </div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputIndex = 0;</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> importedInputIdIndex = 0;</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;        std::sort(preImportedInputIds.begin(), preImportedInputIds.end());</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> BindableLayer* inputLayer : graph.GetInputLayers())</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;        {</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;            <span class="keywordflow">if</span> (importedInputIdIndex &lt; preImportedInputIds.size() &amp;&amp;</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                inputIndex == preImportedInputIds[importedInputIdIndex])</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;            {</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                <span class="comment">// Only replace tensorhandles if they have not already been replaced</span></div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                <span class="keywordflow">if</span> (!m_IsInputImported[inputIndex])</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                {</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                    <span class="keyword">auto</span> outputTensorHandle = m_PreImportedInputHandles[inputIndex].m_TensorHandle.get();</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160; </div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;                    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; workloadInfo: m_InputWorkloadSlotPairs[inputLayer-&gt;GetBindingId()])</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;                    {</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                        <span class="keyword">auto</span> workload = m_WorkloadQueue[workloadInfo.m_WorkloadIndex].get();</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;                        workload-&gt;ReplaceInputTensorHandle(outputTensorHandle, workloadInfo.m_SlotIndex);</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;                    }</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;                    m_IsInputImported[inputIndex] = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;                }</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;                importedInputIdIndex++;</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;            }</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;            {</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                <span class="keywordflow">if</span> (m_IsInputImported[inputIndex])</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                {</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;                    OutputHandler&amp; handler = <span class="keyword">const_cast&lt;</span>OutputHandler&amp;<span class="keyword">&gt;</span>(inputLayer-&gt;GetOutputHandler(0));</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160; </div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;                    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; workloadInfo: m_InputWorkloadSlotPairs[inputLayer-&gt;GetBindingId()])</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;                    {</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;                        <span class="keyword">auto</span> workload = m_WorkloadQueue[workloadInfo.m_WorkloadIndex].get();</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                        workload-&gt;ReplaceInputTensorHandle(handler.GetData(), workloadInfo.m_SlotIndex);</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;                    }</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160; </div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;                    m_IsInputImported[inputIndex] = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;                }</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160; </div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;                <span class="comment">// InputTensorHandle is not imported yet, process to enqueue input</span></div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;                <span class="keyword">const</span> TensorPin&amp; pin = workloadData.GetInputTensorPin(inputLayer-&gt;GetBindingId());</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;                EnqueueInput(*inputLayer, pin.GetTensorHandle(), pin.GetTensorInfo());</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;            }</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;            inputIndex++;</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;        }</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    }</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    <span class="comment">// For each output to the network, call EnqueueOutput with the data passed by the user.</span></div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    {</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Compute::Undefined</a>, <span class="stringliteral">&quot;PrepareOutputs&quot;</span>);</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;        m_OutputQueue.clear();</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;        m_OutputQueue.reserve(graph.GetNumOutputs());</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160; </div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;        <span class="keywordflow">if</span> (preImportedOutputIds.size() &gt; graph.GetNumOutputs())</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;        {</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;Invalid number of preImportedOutputIds&quot;</span>);</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;        }</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160; </div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIndex = 0;</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> importedOutputIdIndex = 0;</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;        std::sort(preImportedOutputIds.begin(), preImportedOutputIds.end());</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> BindableLayer* outputLayer : graph.GetOutputLayers())</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;        {</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;            <span class="keywordflow">if</span> (importedOutputIdIndex &lt; preImportedOutputIds.size() &amp;&amp;</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;                outputIndex == preImportedOutputIds[importedOutputIdIndex])</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;            {</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;                <span class="comment">// Only replace tensorhandles if they have not already been replaced</span></div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;                ITensorHandle* inputTensorHandle = m_PreImportedOutputHandles[outputIndex].m_TensorHandle.get();</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160; </div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                <span class="keywordflow">if</span> (!m_IsOutputImported[outputIndex])</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                {</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bindingId = outputLayer-&gt;GetBindingId();</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; indices = m_OutputWorkloadSlotPairs[bindingId];</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160; </div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                    <span class="keyword">auto</span> outputWorkload = m_WorkloadQueue[indices.m_OutputSlotIndices.m_WorkloadIndex].get();</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160; </div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                    outputWorkload-&gt;ReplaceOutputTensorHandle(inputTensorHandle,</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                                                              indices.m_OutputSlotIndices.m_SlotIndex);</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160; </div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; workloadInfo: indices.m_InputSlotIndices)</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;                    {</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                        <span class="keyword">auto</span> inputWorkload = m_WorkloadQueue[workloadInfo.m_WorkloadIndex].get();</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                        inputWorkload-&gt;ReplaceInputTensorHandle(inputTensorHandle, workloadInfo.m_SlotIndex);</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;                    }</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;                    m_IsOutputImported[outputIndex] = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                }</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160; </div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(inputTensorHandle != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Data should have been allocated.&quot;</span>);</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                MemSyncQueueDescriptor syncDesc;</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;                syncDesc.m_Inputs.push_back(inputTensorHandle);</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                WorkloadInfo <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>;</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>.m_InputTensorInfos.push_back(</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                        outputLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetTensorInfo());</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                <span class="keyword">auto</span> syncWorkload = std::make_unique&lt;SyncMemGenericWorkload&gt;(syncDesc, info);</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(syncWorkload, <span class="stringliteral">&quot;No sync workload created&quot;</span>);</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                m_OutputQueue.push_back(move(syncWorkload));</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                importedOutputIdIndex++;</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;            }</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;            {</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                <span class="keywordflow">if</span> (m_IsOutputImported[outputIndex])</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;                {</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bindingId = outputLayer-&gt;GetBindingId();</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; indices = m_OutputWorkloadSlotPairs[bindingId];</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160; </div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                    <span class="keyword">auto</span> outputWorkload = m_WorkloadQueue[indices.m_OutputSlotIndices.m_WorkloadIndex].get();</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;                    <span class="keyword">const</span> OutputHandler&amp; outputHandler =</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;                            outputLayer-&gt;GetInputSlot(0).GetConnectedOutputSlot()-&gt;GetOutputHandler();</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160; </div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;                    outputWorkload-&gt;ReplaceOutputTensorHandle(</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;                            outputHandler.GetData(), indices.m_OutputSlotIndices.m_SlotIndex);</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160; </div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;                    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; workloadInfo: indices.m_InputSlotIndices)</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;                    {</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;                        <span class="keyword">auto</span> inputWorkload = m_WorkloadQueue[workloadInfo.m_WorkloadIndex].get();</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;                        inputWorkload-&gt;ReplaceInputTensorHandle(outputHandler.GetData(), workloadInfo.m_SlotIndex);</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                    }</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                    m_IsOutputImported[outputIndex] = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                }</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160; </div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;                <span class="keyword">const</span> TensorPin&amp; pin = workloadData.GetOutputTensorPin(outputLayer-&gt;GetBindingId());</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                <span class="comment">// OutputTensorHandle is not imported yet, process to enqueue Output</span></div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                EnqueueOutput(*outputLayer, pin.GetTensorHandle(), pin.GetTensorInfo());</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;            }</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;            outputIndex++;</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;        }</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    }</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160; </div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;    std::unique_ptr&lt;TimelineUtilityMethods&gt; timelineUtils =</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;                        TimelineUtilityMethods::GetTimelineUtils(*m_ProfilingService);</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    ProfilingGuid inferenceGuid = m_ProfilingService-&gt;GetNextGuid();</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    <span class="keywordflow">if</span> (timelineUtils)</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    {</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;        <span class="comment">// Add inference timeline trace if profiling is enabled.</span></div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;        ProfilingGuid networkGuid = m_OptimizedNetwork-&gt;GetGuid();</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;        timelineUtils-&gt;CreateTypedEntity(inferenceGuid, LabelsAndEventClasses::INFERENCE_GUID);</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;        timelineUtils-&gt;CreateRelationship(ProfilingRelationshipType::RetentionLink,</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;                                          networkGuid,</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;                                          inferenceGuid,</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;                                          LabelsAndEventClasses::EXECUTION_OF_GUID);</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;        timelineUtils-&gt;RecordEvent(inferenceGuid, LabelsAndEventClasses::ARMNN_PROFILING_SOL_EVENT_CLASS);</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    }</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160; </div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;    <span class="keywordtype">bool</span> executionSucceeded = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160; </div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    {</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;        <span class="keywordflow">if</span> (m_ProfilingService-&gt;IsProfilingEnabled())</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;        {</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;            m_ProfilingService-&gt;IncrementCounterValue(INFERENCES_RUN);</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;        }</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;        <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Compute::Undefined</a>, <span class="stringliteral">&quot;Execute&quot;</span>);</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;        <a class="code" href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a>(<span class="stringliteral">&quot;Executing&quot;</span>);</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;        executionSucceeded = <a class="code" href="classarmnn_1_1_loaded_network.xhtml#a95b1c23f6f296a0c39383bef20fdd46a">Execute</a>(timelineUtils, inferenceGuid);</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    }</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160; </div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    <span class="keywordflow">if</span> (timelineUtils)</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;    {</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;        <span class="comment">// Add end of life of the inference timeline if profiling is enabled.</span></div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;        timelineUtils-&gt;RecordEvent(inferenceGuid, LabelsAndEventClasses::ARMNN_PROFILING_EOL_EVENT_CLASS);</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;        timelineUtils-&gt;Commit();</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    }</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160; </div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    <span class="keywordflow">return</span> executionSucceeded ? <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">Status::Success</a> : <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">Status::Failure</a>;</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00212">ARMNN_LOG</a>, <a class="el" href="_profiling_8hpp_source.xhtml#l00220">ARMNN_SCOPED_PROFILING_EVENT</a>, <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Failure</a>, <a class="el" href="_output_handler_8hpp_source.xhtml#l00046">OutputHandler::GetData()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00192">Graph::GetInputLayers()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00187">Graph::GetNumInputs()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00198">Graph::GetNumLayers()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00188">Graph::GetNumOutputs()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00196">Graph::GetOutputLayers()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_workload_data_8hpp_source.xhtml#l00026">QueueDescriptor::m_Inputs</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407a7b83d3f08fa392b79e3f553b585971cd">armnn::warning</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00644">RuntimeImpl::EnqueueWorkload()</a>.</p>

</div>
</div>
<a id="a95b1c23f6f296a0c39383bef20fdd46a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95b1c23f6f296a0c39383bef20fdd46a">&#9670;&nbsp;</a></span>Execute()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> Execute </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>outputTensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">IWorkingMemHandle</a> &amp;&#160;</td>
          <td class="paramname"><em>workingMemHandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> &gt;&#160;</td>
          <td class="paramname"><em>preImportedInputs</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> &gt;&#160;</td>
          <td class="paramname"><em>preImportedOutputs</em> = <code>{}</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Thread safe execution of the loaded network. </p>

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l01727">1727</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;{</div>
<div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;    <span class="keyword">const</span> Graph&amp; graph = m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph();</div>
<div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160; </div>
<div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;    <span class="keywordflow">if</span> (inputTensors.size() + preImportedInputs.size() != graph.GetNumInputs())</div>
<div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;    {</div>
<div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;        <span class="keywordflow">if</span> (preImportedInputs.empty())</div>
<div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;        {</div>
<div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;LoadedNetwork::Execute: Number of inputs provided does not match network.&quot;</span>);</div>
<div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;        }</div>
<div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;        {</div>
<div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;LoadedNetwork::Execute: &quot;</span></div>
<div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;                                           <span class="stringliteral">&quot;Number of inputs + preImportedInputs provided does not match network.&quot;</span>);</div>
<div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;        }</div>
<div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;    }</div>
<div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160; </div>
<div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;    <span class="keywordflow">if</span> (outputTensors.size() + preImportedOutputs.size() != graph.GetNumOutputs())</div>
<div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;    {</div>
<div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;        <span class="keywordflow">if</span> (preImportedOutputs.empty())</div>
<div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;        {</div>
<div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;LoadedNetwork::Execute: &quot;</span></div>
<div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;                                           <span class="stringliteral">&quot;Number of outputs provided does not match network.&quot;</span>);</div>
<div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;        }</div>
<div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;        {</div>
<div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;LoadedNetwork::Execute: &quot;</span></div>
<div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;                                           <span class="stringliteral">&quot;Number of outputs + preImportedOutputs provided does not match network.&quot;</span>);</div>
<div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;        }</div>
<div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;    }</div>
<div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160; </div>
<div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;    WorkingMemHandle&amp; workingMemHandle = <span class="keyword">dynamic_cast&lt;</span>WorkingMemHandle&amp;<span class="keyword">&gt;</span>(iWorkingMemHandle);</div>
<div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;    <span class="comment">// Collect all the given LayerBindingIds and check them for duplicates and unknowns.</span></div>
<div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;    std::vector&lt;LayerBindingId&gt;&amp; bindingIds = workingMemHandle.GetBindingIdVector();</div>
<div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index = 0;</div>
<div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> pair : inputTensors)</div>
<div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;    {</div>
<div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;        bindingIds[index++] = pair.first;</div>
<div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;    }</div>
<div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> <span class="keywordtype">id</span> : preImportedInputs)</div>
<div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;    {</div>
<div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;        bindingIds[index++] = ValidateImportedInputID(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;    }</div>
<div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> pair : outputTensors)</div>
<div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;    {</div>
<div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;        bindingIds[index++] = pair.first;</div>
<div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;    }</div>
<div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> <span class="keywordtype">id</span> : preImportedOutputs)</div>
<div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;    {</div>
<div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;        bindingIds[index++] = ValidateImportedOutputID(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;    }</div>
<div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160; </div>
<div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;    workingMemHandle.ValidateBindingIds();</div>
<div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160; </div>
<div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;    <span class="keyword">auto</span> resetMemHandle = [&amp;]()</div>
<div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;    {</div>
<div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> <span class="keywordtype">id</span>: preImportedInputs)</div>
<div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;        {</div>
<div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerBindingId = m_PreImportedInputHandles[id].m_LayerBindingId;</div>
<div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160; </div>
<div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;            <span class="keyword">auto</span> inputHandle = workingMemHandle.GetInputHandle(layerBindingId);</div>
<div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;            <span class="keyword">auto</span> inputConnections = workingMemHandle.GetInputConnections(layerBindingId);</div>
<div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> it : inputConnections)</div>
<div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;            {</div>
<div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;                *it = inputHandle;</div>
<div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;            }</div>
<div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;        }</div>
<div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160; </div>
<div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> <span class="keywordtype">id</span>: preImportedOutputs)</div>
<div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;        {</div>
<div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerBindingId = m_PreImportedOutputHandles[id].m_LayerBindingId;</div>
<div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160; </div>
<div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;            <span class="keyword">auto</span> outputHandle = workingMemHandle.GetOutputHandle(layerBindingId);</div>
<div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;            <span class="keyword">auto</span> outputConnections = workingMemHandle.GetOutputConnection(layerBindingId);</div>
<div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160; </div>
<div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> it : outputConnections)</div>
<div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;            {</div>
<div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;                *it = outputHandle;</div>
<div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;            }</div>
<div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;        }</div>
<div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;    };</div>
<div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160; </div>
<div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;    std::unique_ptr&lt;TimelineUtilityMethods&gt; timelineUtils =</div>
<div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;           TimelineUtilityMethods::GetTimelineUtils(*m_ProfilingService);</div>
<div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;    ProfilingGuid inferenceGuid = m_ProfilingService-&gt;GetNextGuid();</div>
<div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;    <span class="keywordflow">if</span> (timelineUtils)</div>
<div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;    {</div>
<div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;        <span class="comment">// Add inference timeline trace if profiling is enabled.</span></div>
<div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;       ProfilingGuid networkGuid = m_OptimizedNetwork-&gt;GetGuid();</div>
<div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;        timelineUtils-&gt;CreateTypedEntity(inferenceGuid,LabelsAndEventClasses::INFERENCE_GUID);</div>
<div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;        timelineUtils-&gt;CreateRelationship(ProfilingRelationshipType::RetentionLink,</div>
<div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;                                          networkGuid,</div>
<div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;                                          inferenceGuid,</div>
<div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;                                         LabelsAndEventClasses::EXECUTION_OF_GUID);</div>
<div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;        timelineUtils-&gt;RecordEvent(inferenceGuid,LabelsAndEventClasses::ARMNN_PROFILING_SOL_EVENT_CLASS);</div>
<div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;    }</div>
<div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160; </div>
<div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;    <span class="keywordtype">bool</span> executionSucceeded = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160; </div>
<div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;    <span class="keywordflow">if</span> (timelineUtils)</div>
<div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;    {</div>
<div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;        <span class="comment">// Add end of life of the inference timeline if profiling is enabled.</span></div>
<div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;        timelineUtils-&gt;RecordEvent(inferenceGuid,LabelsAndEventClasses::ARMNN_PROFILING_EOL_EVENT_CLASS);</div>
<div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;        timelineUtils-&gt;Commit();</div>
<div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;    }</div>
<div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160; </div>
<div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;    <span class="keywordflow">if</span> (!workingMemHandle.IsAllocated())</div>
<div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;    {</div>
<div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;        workingMemHandle.Allocate();</div>
<div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;    }</div>
<div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160; </div>
<div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;    {</div>
<div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;        <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Compute::Undefined</a>, <span class="stringliteral">&quot;PrepareInputs&quot;</span>);</div>
<div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> pair : inputTensors)</div>
<div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;        {</div>
<div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;            EnqueueInput(pair.second, workingMemHandle.GetInputHandle(pair.first));</div>
<div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;        }</div>
<div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160; </div>
<div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;        <span class="comment">// Swap in the pre-imported inputs if any</span></div>
<div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> <span class="keywordtype">id</span> : preImportedInputs)</div>
<div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;        {</div>
<div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;            <span class="keyword">const</span> ImportedTensorHandlePin&amp; importedInputPin = m_PreImportedInputHandles[id];</div>
<div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerBindingId = m_PreImportedInputHandles[id].m_LayerBindingId;</div>
<div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>&amp; preimportedHandle = importedInputPin.m_TensorHandle;</div>
<div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160; </div>
<div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;            <span class="keyword">auto</span> inputConnections = workingMemHandle.GetInputConnections(layerBindingId);</div>
<div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> it : inputConnections)</div>
<div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;            {</div>
<div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;                *it = preimportedHandle.get();</div>
<div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;            }</div>
<div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;        }</div>
<div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;    }</div>
<div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;    {</div>
<div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;        <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Compute::Undefined</a>, <span class="stringliteral">&quot;PrepareOutputs&quot;</span>);</div>
<div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;        <span class="keywordflow">if</span> (m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#a042fb9a87ffa70730766d19505d80490">m_ExportEnabled</a>)</div>
<div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;        {</div>
<div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> pair: outputTensors)</div>
<div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;            {</div>
<div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;                ImportOutputTensor(pair.second, workingMemHandle.GetOutputHandle(pair.first));</div>
<div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;            }</div>
<div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;        }</div>
<div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160; </div>
<div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> <span class="keywordtype">id</span> : preImportedOutputs)</div>
<div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;        {</div>
<div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;            <span class="keyword">const</span> ImportedTensorHandlePin&amp; importedOutputPin = m_PreImportedOutputHandles[id];</div>
<div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a> layerBindingId = m_PreImportedOutputHandles[id].m_LayerBindingId;</div>
<div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>&amp; preimportedHandle = importedOutputPin.m_TensorHandle;</div>
<div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160; </div>
<div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;            <span class="keyword">auto</span> outputConnections = workingMemHandle.GetOutputConnection(layerBindingId);</div>
<div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> it : outputConnections)</div>
<div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;            {</div>
<div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;                *it = preimportedHandle.get();</div>
<div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;            }</div>
<div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;        }</div>
<div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;    }</div>
<div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160; </div>
<div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;    <span class="keyword">auto</span> Fail = [&amp;](<span class="keyword">const</span> std::exception&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>)</div>
<div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;    {</div>
<div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;An error occurred attempting to execute a workload: &quot;</span> &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>.what();</div>
<div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;        executionSucceeded = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;    };</div>
<div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;    ProfilingDynamicGuid workloadInferenceID(0);</div>
<div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160; </div>
<div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;    {</div>
<div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; m_WorkloadQueue.size(); ++i)</div>
<div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;        {</div>
<div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;            <span class="keyword">auto</span>&amp; workload = m_WorkloadQueue[i];</div>
<div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;            <span class="keywordflow">if</span> (timelineUtils)</div>
<div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;            {</div>
<div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;                workloadInferenceID = timelineUtils-&gt;RecordWorkloadInferenceAndStartOfLifeEvent(workload-&gt;GetGuid(),</div>
<div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;                                                                                                inferenceGuid);</div>
<div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;            }</div>
<div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160; </div>
<div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;            workload-&gt;ExecuteAsync(workingMemHandle.GetExecutionDataAt(i).second);</div>
<div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160; </div>
<div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;            <span class="keywordflow">if</span> (timelineUtils)</div>
<div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;            {</div>
<div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;                timelineUtils-&gt;RecordEndOfLifeEvent(workloadInferenceID);</div>
<div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;            }</div>
<div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;        }</div>
<div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;    }</div>
<div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> RuntimeException&amp; error)</div>
<div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;    {</div>
<div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;        resetMemHandle();</div>
<div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;        Fail(error);</div>
<div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;    }</div>
<div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::runtime_error&amp; error)</div>
<div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;    {</div>
<div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;        resetMemHandle();</div>
<div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;        Fail(error);</div>
<div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;    }</div>
<div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;    <span class="keywordflow">catch</span> (...)</div>
<div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;    {</div>
<div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;        resetMemHandle();</div>
<div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;        <span class="keywordflow">throw</span>;</div>
<div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;    }</div>
<div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160; </div>
<div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;    <span class="keywordflow">if</span> (!m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#a042fb9a87ffa70730766d19505d80490">m_ExportEnabled</a>)</div>
<div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;    {</div>
<div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> pair: outputTensors)</div>
<div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;        {</div>
<div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a5acae80f1d8fd03cdb3878bd356683d7">CopyToOutputTensor</a>(pair.second, workingMemHandle.GetOutputHandle(pair.first));</div>
<div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;        }</div>
<div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;    }</div>
<div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;    {</div>
<div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;       <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Compute::Undefined</a>, <span class="stringliteral">&quot;SyncMemGeneric_Execute&quot;</span>);</div>
<div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;       workingMemHandle.MemSyncOutputs();</div>
<div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;    }</div>
<div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160; </div>
<div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;    resetMemHandle();</div>
<div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160; </div>
<div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;    <span class="keywordflow">return</span> executionSucceeded ? <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">Status::Success</a> : <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">Status::Failure</a>;</div>
<div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00100">WorkingMemHandle::Allocate()</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00212">ARMNN_LOG</a>, <a class="el" href="_profiling_8hpp_source.xhtml#l00220">ARMNN_SCOPED_PROFILING_EVENT</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l01376">armnn::CopyToOutputTensor()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>, <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Failure</a>, <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00119">WorkingMemHandle::GetBindingIdVector()</a>, <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00092">WorkingMemHandle::GetExecutionDataAt()</a>, <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00107">WorkingMemHandle::GetInputConnections()</a>, <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00097">WorkingMemHandle::GetInputHandle()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00187">Graph::GetNumInputs()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00188">Graph::GetNumOutputs()</a>, <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00112">WorkingMemHandle::GetOutputConnection()</a>, <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00102">WorkingMemHandle::GetOutputHandle()</a>, <a class="el" href="_working_mem_handle_8hpp_source.xhtml#l00077">WorkingMemHandle::IsAllocated()</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00064">INetworkProperties::m_ExportEnabled</a>, <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00136">WorkingMemHandle::MemSyncOutputs()</a>, <a class="el" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Success</a>, <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>, and <a class="el" href="_working_mem_handle_8cpp_source.xhtml#l00145">WorkingMemHandle::ValidateBindingIds()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00696">RuntimeImpl::Execute()</a>.</p>

</div>
</div>
<a id="aaf8558a23ae9be6e7ea165989f1fa808"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf8558a23ae9be6e7ea165989f1fa808">&#9670;&nbsp;</a></span>FreeWorkingMemory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FreeWorkingMemory </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l01222">1222</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;{</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;<span class="preprocessor">#if !defined(ARMNN_DISABLE_THREADS)</span></div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;    std::lock_guard&lt;std::mutex&gt; lockGuard(m_WorkingMemMutex);</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160; </div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;    <span class="keywordflow">if</span> (!m_IsWorkingMemAllocated)</div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;    {</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;    }</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160; </div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    <span class="keywordflow">if</span> (m_ExternalMemoryManager)</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;    {</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;        m_ExternalMemoryManager-&gt;Deallocate();</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;    }</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160; </div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    <span class="comment">// Informs the memory managers to release memory in its respective memory group</span></div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; memoryManager : m_BackendMemoryMangers)</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;    {</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;        <span class="keywordflow">if</span> (memoryManager)</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;        {</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;            memoryManager-&gt;Release();</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;        }</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    }</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;    m_TensorHandleFactoryRegistry.<a class="code" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml#a69ca23561f4f8a887f19c6580cbd34c8">ReleaseMemory</a>();</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    m_IsWorkingMemAllocated = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00086">TensorHandleFactoryRegistry::ReleaseMemory()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00735">RuntimeImpl::CreateWorkingMemHandle()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00644">RuntimeImpl::EnqueueWorkload()</a>, and <a class="el" href="_loaded_network_8hpp_source.xhtml#l00047">LoadedNetwork::~LoadedNetwork()</a>.</p>

</div>
</div>
<a id="af616683424cb40d83b5a923db7f06f11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af616683424cb40d83b5a923db7f06f11">&#9670;&nbsp;</a></span>GetInputTensorInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> GetInputTensorInfo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>layerId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l00697">697</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;{</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; inputLayer : m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph().GetInputLayers())</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    {</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(inputLayer-&gt;GetNumOutputSlots() == 1, <span class="stringliteral">&quot;Input layer should have exactly 1 output slot&quot;</span>);</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        <span class="keywordflow">if</span> (inputLayer-&gt;GetBindingId() == layerId)</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        {</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;            <span class="keywordflow">return</span> inputLayer-&gt;GetOutputSlot(0).GetTensorInfo();</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        }</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    }</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160; </div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keywordflow">throw</span> InvalidArgumentException(fmt::format(<span class="stringliteral">&quot;No input layer is associated with id {}&quot;</span>, layerId));</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00613">RuntimeImpl::GetInputTensorInfo()</a>.</p>

</div>
</div>
<a id="ad90f4f6c9360c5cb64c164b9ddcb3130"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad90f4f6c9360c5cb64c164b9ddcb3130">&#9670;&nbsp;</a></span>GetNetworkGuid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ProfilingGuid GetNetworkGuid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l00692">692</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;{</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="keywordflow">return</span> m_OptimizedNetwork-&gt;GetGuid();</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a2b6b57945bc68f659e08d28c8a015e91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b6b57945bc68f659e08d28c8a015e91">&#9670;&nbsp;</a></span>GetOutputTensorInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> GetOutputTensorInfo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">LayerBindingId</a>&#160;</td>
          <td class="paramname"><em>layerId</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l00711">711</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;{</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; outputLayer : m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph().GetOutputLayers())</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    {</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(outputLayer-&gt;GetNumInputSlots() == 1, <span class="stringliteral">&quot;Output layer should have exactly 1 input slot&quot;</span>);</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(outputLayer-&gt;GetInputSlot(0).GetConnection(), <span class="stringliteral">&quot;Input slot on Output layer must be connected&quot;</span>);</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        <span class="keywordflow">if</span> (outputLayer-&gt;GetBindingId() == layerId)</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;        {</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;            <span class="keywordflow">return</span> outputLayer-&gt;GetInputSlot(0).GetConnection()-&gt;GetTensorInfo();</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;        }</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    }</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160; </div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="keywordflow">throw</span> InvalidArgumentException(fmt::format(<span class="stringliteral">&quot;No output layer is associated with id {}&quot;</span>, layerId));</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00618">RuntimeImpl::GetOutputTensorInfo()</a>.</p>

</div>
</div>
<a id="aee8e1cb09e0d4dcbe64df111c5edd55e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee8e1cb09e0d4dcbe64df111c5edd55e">&#9670;&nbsp;</a></span>GetProfiler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::shared_ptr&lt;<a class="el" href="classarmnn_1_1_i_profiler.xhtml">IProfiler</a>&gt;&amp; GetProfiler </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8hpp_source.xhtml#l00087">87</a> of file <a class="el" href="_loaded_network_8hpp_source.xhtml">LoadedNetwork.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{ <span class="keywordflow">return</span> m_OptimizedNetwork-&gt;GetProfiler(); }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00735">RuntimeImpl::CreateWorkingMemHandle()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00644">RuntimeImpl::EnqueueWorkload()</a>, and <a class="el" href="_runtime_8cpp_source.xhtml#l00696">RuntimeImpl::Execute()</a>.</p>

</div>
</div>
<a id="a704bd570f39deda992bccdc639640dc7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a704bd570f39deda992bccdc639640dc7">&#9670;&nbsp;</a></span>ImportInputs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">ImportedInputId</a> &gt; ImportInputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">InputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>inputTensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a>&#160;</td>
          <td class="paramname"><em>forceImportMemorySource</em> = <code><a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277aec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l01418">1418</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;{</div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;    <span class="keywordflow">if</span> (!m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#ad3ab02a7f6310b35c59ca78b509905ca">m_AsyncEnabled</a>)</div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;    {</div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;        <span class="comment">// Cannot import if import is not enabled and forceImportMemorySource is undefined</span></div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;        <span class="keywordflow">if</span> (forceImportMemorySource == <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277aec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a>)</div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;        {</div>
<div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;            <span class="keywordflow">throw</span> MemoryImportException(<span class="stringliteral">&quot;ImportInputs: Memory Import failed, NetworkProperties.m_ImportEnabled&quot;</span>);</div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;        }</div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;        <span class="comment">// The number of pre imported tensors should not exceed the number of inputs.</span></div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;        <span class="keywordflow">if</span> (inputTensors.size() &gt; m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph().GetNumInputs())</div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;        {</div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;            <span class="keywordflow">throw</span> MemoryImportException(<span class="stringliteral">&quot;ImportInputs: The number of tensors provided exceeds the number of inputs.&quot;</span>);</div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;        }</div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160; </div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;        std::vector&lt;ImportedInputId&gt; importedInputs;</div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;        Graph&amp; graph = m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph().TopologicalSort();</div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputIndex = 0;</div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> BindableLayer* inputLayer : graph.GetInputLayers())</div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;        {</div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;            <span class="keyword">auto</span> outputTensorHandle = m_PreImportedInputHandles[inputIndex].m_TensorHandle.get();</div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160; </div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;            <span class="keywordflow">if</span> (!outputTensorHandle)</div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;            {</div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;                inputIndex++;</div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;            }</div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160; </div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;            <span class="keyword">auto</span> layerBindingId = inputLayer-&gt;GetBindingId();</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;            <span class="keyword">auto</span> it = std::find_if(inputTensors.begin(), inputTensors.end(), [=](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; inputTensor)</div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;            {</div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;                return inputTensor.first == layerBindingId;</div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;            });</div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160; </div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;            <span class="keywordflow">if</span> (it == inputTensors.end())</div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;            {</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;                inputIndex++;</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;            }</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160; </div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>&amp; inputTensor = *it;</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;            std::unique_ptr&lt;ITensorHandle&gt; passThroughTensorHandle =</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;                    std::make_unique&lt;ConstPassthroughTensorHandle&gt;(inputTensor.second.GetInfo(),</div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;                                                                   inputTensor.second.GetMemoryArea());</div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160; </div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;            <span class="keywordflow">try</span></div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;            {</div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;                <span class="keywordflow">if</span> (outputTensorHandle-&gt;CanBeImported(passThroughTensorHandle-&gt;Map(), forceImportMemorySource)</div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;                    &amp;&amp; (outputTensorHandle-&gt;Import(passThroughTensorHandle-&gt;Map(), forceImportMemorySource)))</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;                {</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;                    importedInputs.push_back(inputIndex);</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;                }</div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;                passThroughTensorHandle-&gt;Unmap();</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;            }</div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;            <span class="keywordflow">catch</span>(<span class="keyword">const</span> MemoryImportException&amp; exception)</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;            {</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;An error occurred attempting to import input_&quot;</span></div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;                                           &lt;&lt; inputIndex &lt;&lt; <span class="stringliteral">&quot; : &quot;</span> &lt;&lt; exception.what();</div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;                passThroughTensorHandle-&gt;Unmap();</div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;            }</div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;            inputIndex++;</div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;        }</div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160; </div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;        <span class="keywordflow">return</span> importedInputs;</div>
<div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;    }</div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;    {</div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;        <span class="comment">// Import when the import of network properties is enabled</span></div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;        std::vector&lt;ImportedInputId&gt; importedInputs;</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;        Graph&amp; graph = m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph().TopologicalSort();</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160; </div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> inputTensor : inputTensors)</div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;        {</div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;            <span class="keyword">auto</span> layerBindingId = inputTensor.first;</div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;            <span class="keyword">auto</span> it = std::find_if(graph.GetInputLayers().begin(), graph.GetInputLayers().end(), [=](<span class="keyword">auto</span>* layer)</div>
<div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;            {</div>
<div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;                return layer-&gt;GetBindingId() == layerBindingId;</div>
<div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;            });</div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160; </div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;            <span class="keywordflow">if</span> (it == graph.GetInputLayers().end())</div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;            {</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;                <span class="keywordflow">throw</span> MemoryImportException(fmt::format(</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;                    <span class="stringliteral">&quot;ImportInputs: Memory Import failed, unknown LayerBindingId: {}&quot;</span>, layerBindingId));</div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;            }</div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160; </div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;            <span class="keyword">const</span> Layer* layer = *it;</div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;            <span class="keywordflow">if</span> (layer-&gt;GetType() != <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a>)</div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;            {</div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;                <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;ImportInputs: given layer not an InputLayer&quot;</span>);</div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;            }</div>
<div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160; </div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;            <span class="keyword">auto</span>&amp; backend = m_Backends.at(layer-&gt;GetBackendId());</div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn.xhtml#abd839f0f103c1ae19a4b38d59b869108">HasCapability</a>(BackendOptions::BackendOption{<span class="stringliteral">&quot;PreImportIOTensors&quot;</span>, <span class="keyword">true</span>}, backend-&gt;GetCapabilities()))</div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;            {</div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;                std::string er = backend-&gt;GetId();</div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;                er += <span class="stringliteral">&quot; does not have PreImportIOTensors capability&quot;</span>;</div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;                <span class="keywordflow">throw</span> BackendCapabilityException(er);</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;            }</div>
<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160; </div>
<div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;            <span class="keyword">const</span> OutputSlot&amp; outputSlot = layer-&gt;GetOutputSlots()[0];</div>
<div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160; </div>
<div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;            <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a> factoryId = outputSlot.GetTensorHandleFactoryId();</div>
<div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;            <span class="keyword">const</span> TensorInfo&amp; tensorInfo = outputSlot.GetTensorInfo();</div>
<div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160; </div>
<div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;            ITensorHandleFactory* handleFactory = m_TensorHandleFactoryRegistry.<a class="code" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml#ae5ecc42140a12c855554a4a621fc8456">GetFactory</a>(factoryId);</div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(handleFactory);</div>
<div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160; </div>
<div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;            ImportedTensorHandlePin importedTensorHandlePin{layerBindingId,</div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;                                                            handleFactory-&gt;CreateTensorHandle(tensorInfo, <span class="keyword">false</span>)};</div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160; </div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;            ITensorHandle* tensorHandle = importedTensorHandlePin.m_TensorHandle.get();</div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160; </div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn.xhtml#a84f86b4de5adf0b164e811c87051a0ee">CheckFlag</a>(tensorHandle-&gt;GetImportFlags(), forceImportMemorySource))</div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;            {</div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;                <span class="keywordflow">throw</span> MemoryImportException(</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;                    fmt::format(<span class="stringliteral">&quot;ImportInputs: Memory Import failed, backend: &quot;</span></div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;                                <span class="stringliteral">&quot;{} does not support importing from source {}&quot;</span></div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;                                , factoryId, m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#a53d95b257e52b0fd292ba6d40d3c5dc3">m_InputSource</a>));</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;            }</div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160; </div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;            std::unique_ptr&lt;ITensorHandle&gt; passThroughTensorHandle =</div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;                    std::make_unique&lt;ConstPassthroughTensorHandle&gt;(inputTensor.second.GetInfo(),</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;                                                                   inputTensor.second.GetMemoryArea());</div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160; </div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;            <span class="keywordflow">if</span> (tensorHandle-&gt;Import(passThroughTensorHandle-&gt;Map(), forceImportMemorySource))</div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;            {</div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;                importedInputs.push_back(m_CurImportedInputId++);</div>
<div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;                passThroughTensorHandle-&gt;Unmap();</div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;            }</div>
<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;            {</div>
<div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;                passThroughTensorHandle-&gt;Unmap();</div>
<div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;                <span class="keywordflow">throw</span> MemoryImportException(<span class="stringliteral">&quot;ImportInputs: Memory Import failed&quot;</span>);</div>
<div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;            }</div>
<div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160; </div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;            m_PreImportedInputHandles.push_back(std::move(importedTensorHandlePin));</div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;        }</div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;        <span class="keywordflow">return</span> importedInputs;</div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;    }</div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00212">ARMNN_LOG</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00065">Graph::InputLayersAccessor::begin()</a>, <a class="el" href="_memory_sources_8hpp_source.xhtml#l00041">armnn::CheckFlag()</a>, <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">ITensorHandleFactory::CreateTensorHandle()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00070">Graph::InputLayersAccessor::end()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00277">Layer::GetBackendId()</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00039">TensorHandleFactoryRegistry::GetFactory()</a>, <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00069">ITensorHandle::GetImportFlags()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00192">Graph::GetInputLayers()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00246">Layer::GetOutputSlots()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00205">OutputSlot::GetTensorHandleFactoryId()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00092">OutputSlot::GetTensorInfo()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00273">Layer::GetType()</a>, <a class="el" href="_backend_helper_8cpp_source.xhtml#l00065">armnn::HasCapability()</a>, <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00075">ITensorHandle::Import()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00066">INetworkProperties::m_AsyncEnabled</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00072">INetworkProperties::m_InputSource</a>, <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277aec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00032">Exception::what()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00623">RuntimeImpl::ImportInputs()</a>.</p>

</div>
</div>
<a id="ac88d932e6e015a59551322b25796b11a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac88d932e6e015a59551322b25796b11a">&#9670;&nbsp;</a></span>ImportOutputs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">ImportedOutputId</a> &gt; ImportOutputs </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">OutputTensors</a> &amp;&#160;</td>
          <td class="paramname"><em>outputTensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">MemorySource</a>&#160;</td>
          <td class="paramname"><em>forceImportMemorySource</em> = <code><a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277aec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l01560">1560</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;{</div>
<div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;    <span class="keywordflow">if</span> (!m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#ad3ab02a7f6310b35c59ca78b509905ca">m_AsyncEnabled</a>)</div>
<div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;    {</div>
<div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;        <span class="comment">// Cannot import if import is not enabled and forceImportMemorySource is undefined</span></div>
<div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;        <span class="keywordflow">if</span> (forceImportMemorySource == <a class="code" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277aec0fc0100c4fc1ce4eea230c3dc10360">MemorySource::Undefined</a>)</div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;        {</div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;            <span class="keywordflow">throw</span> MemoryImportException(<span class="stringliteral">&quot;ImportOutputs: Memory Import failed, NetworkProperties.m_ImportEnabled&quot;</span>);</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;        }</div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;        <span class="comment">// If forceImportMemorySource is defined, try import if memory is aligned</span></div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;        <span class="keywordflow">if</span> (outputTensors.size() != m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph().GetNumOutputs())</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;        {</div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;            <span class="keywordflow">throw</span> MemoryImportException(<span class="stringliteral">&quot;ImportOutputs: Force Import failed, incorrect number of tensors&quot;</span>);</div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;        }</div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;        std::vector&lt;ImportedOutputId&gt; importedOutputs;</div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;        Graph&amp; graph = m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph().TopologicalSort();</div>
<div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160; </div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIndex = 0;</div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> BindableLayer* <span class="keyword">const</span> outputLayer : graph.GetOutputLayers())</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;        {</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;            <span class="keyword">auto</span> inputTensorHandle = m_PreImportedOutputHandles[outputIndex].m_TensorHandle.get();</div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;            <span class="keywordflow">if</span> (!inputTensorHandle)</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;            {</div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;                outputIndex++;</div>
<div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;            }</div>
<div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160; </div>
<div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;            <span class="keyword">auto</span> layerBindingId = outputLayer-&gt;GetBindingId();</div>
<div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;            <span class="keyword">auto</span> it = std::find_if(outputTensors.begin(), outputTensors.end(), [=] (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; outputTensor)</div>
<div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;            {</div>
<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;                return outputTensor.first == layerBindingId;</div>
<div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;            });</div>
<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160; </div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;            <span class="keywordflow">if</span> (it == outputTensors.end())</div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;            {</div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;                outputIndex++;</div>
<div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;            }</div>
<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160; </div>
<div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> outputTensor = *it;</div>
<div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;            <span class="keywordflow">try</span></div>
<div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;            {</div>
<div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;                <span class="comment">// Check if the output memory can be imported</span></div>
<div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;                <span class="keywordflow">if</span> (inputTensorHandle-&gt;CanBeImported(outputTensor.second.GetMemoryArea(), forceImportMemorySource)</div>
<div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;                    &amp;&amp; inputTensorHandle-&gt;Import(outputTensor.second.GetMemoryArea(), forceImportMemorySource))</div>
<div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;                {</div>
<div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;                    importedOutputs.push_back(outputIndex);</div>
<div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;                }</div>
<div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;            }</div>
<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;            <span class="keywordflow">catch</span>(<span class="keyword">const</span> MemoryImportException&amp; exception)</div>
<div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;            {</div>
<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;An error occurred attempting to import output_&quot;</span></div>
<div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;                                 &lt;&lt; outputIndex &lt;&lt; <span class="stringliteral">&quot; : &quot;</span> &lt;&lt; exception.what();</div>
<div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;            }</div>
<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;            outputIndex++;</div>
<div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;        }</div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;        <span class="keywordflow">return</span> importedOutputs;</div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;    }</div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160; </div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;    std::vector&lt;ImportedOutputId&gt; importedOutputs;</div>
<div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;    Graph&amp; graph = m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph().TopologicalSort();</div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160; </div>
<div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; outputTensor : outputTensors)</div>
<div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;    {</div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;        <span class="keyword">auto</span> layerBindingId = outputTensor.first;</div>
<div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;        <span class="keyword">auto</span> it = std::find_if(graph.GetOutputLayers().begin(), graph.GetOutputLayers().end(), [=](<span class="keyword">auto</span>* layer)</div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;        {</div>
<div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;            return layer-&gt;GetBindingId() == layerBindingId;</div>
<div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;        });</div>
<div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160; </div>
<div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;        <span class="keywordflow">if</span> (it == graph.GetOutputLayers().end())</div>
<div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;        {</div>
<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;            <span class="keywordflow">throw</span> MemoryImportException(fmt::format(<span class="stringliteral">&quot;ImportOutputs: Memory Import failed, unknown LayerBindingId: {}&quot;</span>,</div>
<div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;                                                     layerBindingId));</div>
<div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;        }</div>
<div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160; </div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;        <span class="keyword">const</span> Layer* layer = *it;</div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;        <span class="keywordflow">if</span> (layer-&gt;GetType() != <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a>)</div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;        {</div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;            <span class="keywordflow">throw</span> InvalidArgumentException(<span class="stringliteral">&quot;ImportOutputs: given layer not an OutputLayer&quot;</span>);</div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;        }</div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160; </div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;        <span class="keyword">auto</span>&amp; backend = m_Backends.at(layer-&gt;GetBackendId());</div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn.xhtml#abd839f0f103c1ae19a4b38d59b869108">HasCapability</a>(BackendOptions::BackendOption{<span class="stringliteral">&quot;PreImportIOTensors&quot;</span>, <span class="keyword">true</span>}, backend-&gt;GetCapabilities()))</div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;        {</div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;            std::string er = backend-&gt;GetId();</div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;            er += <span class="stringliteral">&quot; does not have PreImportIOTensors capability&quot;</span>;</div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;            <span class="keywordflow">throw</span> BackendCapabilityException(er);</div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;        }</div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160; </div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;        <span class="keyword">const</span> InputSlot&amp; inputSlot = layer-&gt;GetInputSlots()[0];</div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;        <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">ITensorHandleFactory::FactoryId</a> factoryId = inputSlot.GetConnectedOutputSlot()-&gt;GetTensorHandleFactoryId();</div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;        <span class="keyword">const</span> TensorInfo&amp; tensorInfo = inputSlot.GetConnectedOutputSlot()-&gt;GetTensorInfo();</div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160; </div>
<div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;        ITensorHandleFactory* handleFactory = m_TensorHandleFactoryRegistry.<a class="code" href="classarmnn_1_1_tensor_handle_factory_registry.xhtml#ae5ecc42140a12c855554a4a621fc8456">GetFactory</a>(factoryId);</div>
<div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(handleFactory);</div>
<div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160; </div>
<div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;        ImportedTensorHandlePin importedTensorHandlePin{layerBindingId,</div>
<div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;                                                        handleFactory-&gt;CreateTensorHandle(tensorInfo, <span class="keyword">false</span>)};</div>
<div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160; </div>
<div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;        ITensorHandle* tensorHandle = importedTensorHandlePin.m_TensorHandle.get();</div>
<div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160; </div>
<div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn.xhtml#a84f86b4de5adf0b164e811c87051a0ee">CheckFlag</a>(tensorHandle-&gt;GetImportFlags(), forceImportMemorySource))</div>
<div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;        {</div>
<div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;            <span class="keywordflow">throw</span> MemoryImportException(fmt::format(<span class="stringliteral">&quot;ImportInputs: Memory Import failed, backend: &quot;</span></div>
<div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;                                                    <span class="stringliteral">&quot;{} does not support importing from source {}&quot;</span></div>
<div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;                                                    , factoryId, forceImportMemorySource));</div>
<div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;        }</div>
<div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160; </div>
<div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;        <span class="keywordflow">if</span> (tensorHandle-&gt;Import(outputTensor.second.GetMemoryArea(), forceImportMemorySource))</div>
<div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;        {</div>
<div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;            importedOutputs.push_back(m_CurImportedOutputId++);</div>
<div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;        }</div>
<div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;        {</div>
<div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;            <span class="keywordflow">throw</span> MemoryImportException(<span class="stringliteral">&quot;ImportInputs: Memory Import failed&quot;</span>);</div>
<div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;        }</div>
<div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160; </div>
<div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;        m_PreImportedOutputHandles.push_back(std::move(importedTensorHandlePin));</div>
<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;    }</div>
<div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160; </div>
<div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;    <span class="keywordflow">return</span> importedOutputs;</div>
<div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00014">ARMNN_ASSERT</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00212">ARMNN_LOG</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00084">Graph::OutputLayersAccessor::begin()</a>, <a class="el" href="_memory_sources_8hpp_source.xhtml#l00041">armnn::CheckFlag()</a>, <a class="el" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">ITensorHandleFactory::CreateTensorHandle()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00090">Graph::OutputLayersAccessor::end()</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00277">Layer::GetBackendId()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00056">InputSlot::GetConnectedOutputSlot()</a>, <a class="el" href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00039">TensorHandleFactoryRegistry::GetFactory()</a>, <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00069">ITensorHandle::GetImportFlags()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00245">Layer::GetInputSlots()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00196">Graph::GetOutputLayers()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00205">OutputSlot::GetTensorHandleFactoryId()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00092">OutputSlot::GetTensorInfo()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00273">Layer::GetType()</a>, <a class="el" href="_backend_helper_8cpp_source.xhtml#l00065">armnn::HasCapability()</a>, <a class="el" href="include_2armnn_2backends_2_i_tensor_handle_8hpp_source.xhtml#l00075">ITensorHandle::Import()</a>, <a class="el" href="_i_runtime_8hpp_source.xhtml#l00066">INetworkProperties::m_AsyncEnabled</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>, <a class="el" href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277aec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>, and <a class="el" href="_exceptions_8cpp_source.xhtml#l00032">Exception::what()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00629">RuntimeImpl::ImportOutputs()</a>.</p>

</div>
</div>
<a id="a390c87e27deac4f51af9533053b2ee14"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a390c87e27deac4f51af9533053b2ee14">&#9670;&nbsp;</a></span>IsAsyncEnabled()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsAsyncEnabled </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8hpp_source.xhtml#l00095">95</a> of file <a class="el" href="_loaded_network_8hpp_source.xhtml">LoadedNetwork.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">return</span> m_NetworkProperties.<a class="code" href="structarmnn_1_1_i_network_properties.xhtml#ad3ab02a7f6310b35c59ca78b509905ca">m_AsyncEnabled</a>;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_runtime_8hpp_source.xhtml#l00066">INetworkProperties::m_AsyncEnabled</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00735">RuntimeImpl::CreateWorkingMemHandle()</a>, <a class="el" href="_runtime_8cpp_source.xhtml#l00644">RuntimeImpl::EnqueueWorkload()</a>, and <a class="el" href="_runtime_8cpp_source.xhtml#l00696">RuntimeImpl::Execute()</a>.</p>

</div>
</div>
<a id="af75dd30cff3d42ff35ddd2b625b7e9ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af75dd30cff3d42ff35ddd2b625b7e9ae">&#9670;&nbsp;</a></span>MakeLoadedNetwork()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_loaded_network.xhtml">LoadedNetwork</a> &gt; MakeLoadedNetwork </td>
          <td>(</td>
          <td class="paramtype">std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_optimized_network.xhtml">IOptimizedNetwork</a> &gt;&#160;</td>
          <td class="paramname"><em>net</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>errorMessage</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_i_network_properties.xhtml">INetworkProperties</a> &amp;&#160;</td>
          <td class="paramname"><em>networkProperties</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">arm::pipe::IProfilingService *&#160;</td>
          <td class="paramname"><em>profilingService</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l00170">170</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;{</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    std::unique_ptr&lt;LoadedNetwork&gt; loadedNetwork;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">auto</span> Fail = [&amp;](<span class="keyword">const</span> std::exception&amp; <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">error</a>) -&gt; std::unique_ptr&lt;LoadedNetwork&gt;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        errorMessage = ToErrorMessage(<span class="stringliteral">&quot;An error occurred when preparing the network workloads: &quot;</span>, error);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; errorMessage;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">return</span> std::unique_ptr&lt;LoadedNetwork&gt;();</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    };</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">try</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        loadedNetwork.reset(<span class="keyword">new</span> LoadedNetwork(std::move(net), networkProperties, profilingService));</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a>&amp; error)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">return</span> Fail(error);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>&amp; error)</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">return</span> Fail(error);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> std::runtime_error&amp; error)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">return</span> Fail(error);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">return</span> loadedNetwork;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_logging_8hpp_source.xhtml#l00212">ARMNN_LOG</a>, and <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::error</a>.</p>

<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00181">RuntimeImpl::LoadNetwork()</a>.</p>

</div>
</div>
<a id="a091ea8d2d804c8902f3120fdf2a36512"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a091ea8d2d804c8902f3120fdf2a36512">&#9670;&nbsp;</a></span>RegisterDebugCallback()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RegisterDebugCallback </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a15f3ad9b5e4e3d46b0a6dda246a7bc28">DebugCallbackFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>func</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l02197">2197</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l02198"></a><span class="lineno"> 2198</span>&#160;{</div>
<div class="line"><a name="l02199"></a><span class="lineno"> 2199</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; workloadPtr: m_WorkloadQueue)</div>
<div class="line"><a name="l02200"></a><span class="lineno"> 2200</span>&#160;    {</div>
<div class="line"><a name="l02201"></a><span class="lineno"> 2201</span>&#160;        workloadPtr.get()-&gt;RegisterDebugCallback(func);</div>
<div class="line"><a name="l02202"></a><span class="lineno"> 2202</span>&#160;    }</div>
<div class="line"><a name="l02203"></a><span class="lineno"> 2203</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_runtime_8cpp_source.xhtml#l00766">RuntimeImpl::RegisterDebugCallback()</a>.</p>

</div>
</div>
<a id="ae41171032a9c106c1fd4b5991045eb0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae41171032a9c106c1fd4b5991045eb0b">&#9670;&nbsp;</a></span>SendNetworkStructure()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SendNetworkStructure </td>
          <td>(</td>
          <td class="paramtype">arm::pipe::IProfilingService &amp;&#160;</td>
          <td class="paramname"><em>profilingService</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_loaded_network_8cpp_source.xhtml#l00654">654</a> of file <a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;{</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <a class="code" href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a>(<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">Compute::Undefined</a>, <span class="stringliteral">&quot;LoadNetwork_SendNetworkStructure&quot;</span>);</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    Graph&amp; order = m_OptimizedNetwork-&gt;pOptimizedNetworkImpl-&gt;GetGraph().TopologicalSort();</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    ProfilingGuid networkGuid = m_OptimizedNetwork-&gt;GetGuid();</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160; </div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    std::unique_ptr&lt;TimelineUtilityMethods&gt; timelineUtils =</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        TimelineUtilityMethods::GetTimelineUtils(profilingService);</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160; </div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    timelineUtils-&gt;CreateTypedEntity(networkGuid, LabelsAndEventClasses::NETWORK_GUID);</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160; </div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; layer : order)</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    {</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        <span class="comment">// Add layer to the post-optimisation network structure</span></div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        AddLayerStructure(timelineUtils, *layer, networkGuid);</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        <span class="keywordflow">switch</span> (layer-&gt;GetType())</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        {</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a>:</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a>:</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;            {</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                <span class="comment">// Inputs and outputs are treated in a special way - see EnqueueInput() and EnqueueOutput().</span></div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;            }</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;            {</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; workload : m_WorkloadQueue)</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                {</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                    <span class="comment">// Add workload to the post-optimisation network structure</span></div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                    AddWorkloadStructure(timelineUtils, workload, *layer);</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                }</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;            }</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        }</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    }</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="comment">// Commit to send the post-optimisation network structure</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    timelineUtils-&gt;Commit();</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_profiling_8hpp_source.xhtml#l00220">ARMNN_SCOPED_PROFILING_EVENT</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>, and <a class="el" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Undefined</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/armnn/<a class="el" href="_loaded_network_8hpp_source.xhtml">LoadedNetwork.hpp</a></li>
<li>src/armnn/<a class="el" href="_loaded_network_8cpp_source.xhtml">LoadedNetwork.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277aec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277aec0fc0100c4fc1ce4eea230c3dc10360">armnn::MemorySource::Undefined</a></div><div class="ttdeci">@ Undefined</div></div>
<div class="ttc" id="aclassarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those.</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a5acae80f1d8fd03cdb3878bd356683d7"><div class="ttname"><a href="namespacearmnn.xhtml#a5acae80f1d8fd03cdb3878bd356683d7">armnn::CopyToOutputTensor</a></div><div class="ttdeci">void CopyToOutputTensor(const Tensor &amp;outputTensor, ITensorHandle *outputTensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_loaded_network_8cpp_source.xhtml#l01376">LoadedNetwork.cpp:1376</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div><div class="ttdeci">@ Input</div></div>
<div class="ttc" id="astructarmnn_1_1_i_network_properties_xhtml_a53d95b257e52b0fd292ba6d40d3c5dc3"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml#a53d95b257e52b0fd292ba6d40d3c5dc3">armnn::INetworkProperties::m_InputSource</a></div><div class="ttdeci">const MemorySource m_InputSource</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00072">IRuntime.hpp:72</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs).</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00290">Types.hpp:290</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_tensor_handle_factory_xhtml_a9c95f90eb40e31f629e0e2947b8bc6f9"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a9c95f90eb40e31f629e0e2947b8bc6f9">armnn::ITensorHandleFactory::LegacyFactoryId</a></div><div class="ttdeci">static const FactoryId LegacyFactoryId</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00050">ITensorHandleFactory.hpp:50</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_loaded_network_xhtml_aaf8558a23ae9be6e7ea165989f1fa808"><div class="ttname"><a href="classarmnn_1_1_loaded_network.xhtml#aaf8558a23ae9be6e7ea165989f1fa808">armnn::LoadedNetwork::FreeWorkingMemory</a></div><div class="ttdeci">void FreeWorkingMemory()</div><div class="ttdef"><b>Definition:</b> <a href="_loaded_network_8cpp_source.xhtml#l01222">LoadedNetwork.cpp:1222</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1c5ec805688cb558465a82a8d9f56a90"><div class="ttname"><a href="namespacearmnn.xhtml#a1c5ec805688cb558465a82a8d9f56a90">armnn::ImportedInputId</a></div><div class="ttdeci">unsigned int ImportedInputId</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00291">Types.hpp:291</a></div></div>
<div class="ttc" id="a_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00212">Logging.hpp:212</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_runtime_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_runtime_exception.xhtml">armnn::RuntimeException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00120">Exceptions.hpp:120</a></div></div>
<div class="ttc" id="astructarmnn_1_1_i_network_properties_xhtml_ad3ab02a7f6310b35c59ca78b509905ca"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml#ad3ab02a7f6310b35c59ca78b509905ca">armnn::INetworkProperties::m_AsyncEnabled</a></div><div class="ttdeci">const bool m_AsyncEnabled</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00066">IRuntime.hpp:66</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a></div><div class="ttdeci">@ Failure</div></div>
<div class="ttc" id="a_profiling_8hpp_xhtml_a5ccc65e2c464ac05ce311fdae7ede03a"><div class="ttname"><a href="_profiling_8hpp.xhtml#a5ccc65e2c464ac05ce311fdae7ede03a">ARMNN_SCOPED_PROFILING_EVENT</a></div><div class="ttdeci">#define ARMNN_SCOPED_PROFILING_EVENT(backendId, name)</div><div class="ttdef"><b>Definition:</b> <a href="_profiling_8hpp_source.xhtml#l00220">Profiling.hpp:220</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_handle_factory_registry_xhtml_a69ca23561f4f8a887f19c6580cbd34c8"><div class="ttname"><a href="classarmnn_1_1_tensor_handle_factory_registry.xhtml#a69ca23561f4f8a887f19c6580cbd34c8">armnn::TensorHandleFactoryRegistry::ReleaseMemory</a></div><div class="ttdeci">void ReleaseMemory()</div><div class="ttdoc">Release memory required for inference.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00086">TensorHandleFactoryRegistry.cpp:86</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a14fcd7f88d11cea0a018269dca5f9277"><div class="ttname"><a href="namespacearmnn.xhtml#a14fcd7f88d11cea0a018269dca5f9277">armnn::MemorySource</a></div><div class="ttdeci">MemorySource</div><div class="ttdoc">Define the Memory Source to reduce copies.</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00230">Types.hpp:230</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_loaded_network_xhtml_a95b1c23f6f296a0c39383bef20fdd46a"><div class="ttname"><a href="classarmnn_1_1_loaded_network.xhtml#a95b1c23f6f296a0c39383bef20fdd46a">armnn::LoadedNetwork::Execute</a></div><div class="ttdeci">Status Execute(const InputTensors &amp;inputTensors, const OutputTensors &amp;outputTensors, IWorkingMemHandle &amp;workingMemHandle, std::vector&lt; ImportedInputId &gt; preImportedInputs={}, std::vector&lt; ImportedOutputId &gt; preImportedOutputs={})</div><div class="ttdoc">Thread safe execution of the loaded network.</div><div class="ttdef"><b>Definition:</b> <a href="_loaded_network_8cpp_source.xhtml#l01727">LoadedNetwork.cpp:1727</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4acb17869fe51048b5a5c4c6106551a255"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acb17869fe51048b5a5c4c6106551a255">armnn::LayerType::Constant</a></div><div class="ttdeci">@ Constant</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div><div class="ttdeci">@ Success</div></div>
<div class="ttc" id="astructarmnn_1_1_i_network_properties_xhtml_a111a52fb2bd24aee9fc125f28c2eb1cb"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml#a111a52fb2bd24aee9fc125f28c2eb1cb">armnn::INetworkProperties::m_ImportEnabled</a></div><div class="ttdeci">const bool m_ImportEnabled</div><div class="ttdoc">Deprecated and will be removed in future release.</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00062">IRuntime.hpp:62</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_handle_factory_registry_xhtml_ae5ecc42140a12c855554a4a621fc8456"><div class="ttname"><a href="classarmnn_1_1_tensor_handle_factory_registry.xhtml#ae5ecc42140a12c855554a4a621fc8456">armnn::TensorHandleFactoryRegistry::GetFactory</a></div><div class="ttdeci">ITensorHandleFactory * GetFactory(ITensorHandleFactory::FactoryId id) const</div><div class="ttdoc">Find a TensorHandleFactory by Id Returns nullptr if not found.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_handle_factory_registry_8cpp_source.xhtml#l00039">TensorHandleFactoryRegistry.cpp:39</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div><div class="ttdeci">@ Undefined</div></div>
<div class="ttc" id="astructarmnn_1_1_i_network_properties_xhtml_a042fb9a87ffa70730766d19505d80490"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml#a042fb9a87ffa70730766d19505d80490">armnn::INetworkProperties::m_ExportEnabled</a></div><div class="ttdeci">const bool m_ExportEnabled</div><div class="ttdoc">Deprecated and will be removed in future release.</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00064">IRuntime.hpp:64</a></div></div>
<div class="ttc" id="a_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a84f86b4de5adf0b164e811c87051a0ee"><div class="ttname"><a href="namespacearmnn.xhtml#a84f86b4de5adf0b164e811c87051a0ee">armnn::CheckFlag</a></div><div class="ttdeci">bool CheckFlag(MemorySourceFlags flags, MemorySource source)</div><div class="ttdef"><b>Definition:</b> <a href="_memory_sources_8hpp_source.xhtml#l00041">MemorySources.hpp:41</a></div></div>
<div class="ttc" id="a_deprecated_8hpp_xhtml_ab66a241a0ed3ee89c866e777b035d0ed"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_BEGIN</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00033">Deprecated.hpp:33</a></div></div>
<div class="ttc" id="a_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="a_heap_profiling_8hpp_xhtml_aeeb927880fc4ffc2eea754a67d884a53"><div class="ttname"><a href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a></div><div class="ttdeci">#define ARMNN_SCOPED_HEAP_PROFILING(TAG)</div><div class="ttdef"><b>Definition:</b> <a href="_heap_profiling_8hpp_source.xhtml#l00045">HeapProfiling.hpp:45</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_tensor_handle_factory_xhtml_a32f4aa6a7089d877af08928139c2c277"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a32f4aa6a7089d877af08928139c2c277">armnn::ITensorHandleFactory::FactoryId</a></div><div class="ttdeci">std::string FactoryId</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00049">ITensorHandleFactory.hpp:49</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div><div class="ttdeci">@ Output</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::LayerType::MemImport</a></div><div class="ttdeci">@ MemImport</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acb5e100e5a9a3e7f6d1fd97512215282">armnn::BoostLogSeverityMapping::error</a></div><div class="ttdeci">@ error</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ac68a434f0e78e33726bfb22a39ec813f"><div class="ttname"><a href="namespacearmnn.xhtml#ac68a434f0e78e33726bfb22a39ec813f">armnn::ImportedOutputId</a></div><div class="ttdeci">unsigned int ImportedOutputId</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00292">Types.hpp:292</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_abd839f0f103c1ae19a4b38d59b869108"><div class="ttname"><a href="namespacearmnn.xhtml#abd839f0f103c1ae19a4b38d59b869108">armnn::HasCapability</a></div><div class="ttdeci">bool HasCapability(const std::string &amp;name, const BackendCapabilities &amp;capabilities)</div><div class="ttdoc">Convenience function to check if a capability exists in a BackendCapabilites struct.</div><div class="ttdef"><b>Definition:</b> <a href="_backend_helper_8cpp_source.xhtml#l00065">BackendHelper.cpp:65</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div><div class="ttdeci">@ info</div></div>
<div class="ttc" id="a_deprecated_8hpp_xhtml_ad762b11b48e5c1d1c1743f529485728a"><div class="ttname"><a href="_deprecated_8hpp.xhtml#ad762b11b48e5c1d1c1743f529485728a">ARMNN_NO_DEPRECATE_WARN_END</a></div><div class="ttdeci">#define ARMNN_NO_DEPRECATE_WARN_END</div><div class="ttdef"><b>Definition:</b> <a href="_deprecated_8hpp_source.xhtml#l00034">Deprecated.hpp:34</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_loaded_network.xhtml">LoadedNetwork</a></li>
    <li class="footer">Generated on Wed Mar 22 2023 15:53:06 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
