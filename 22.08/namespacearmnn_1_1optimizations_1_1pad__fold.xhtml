<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: armnn::optimizations::pad_fold Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.08</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearmnn_1_1optimizations_1_1pad__fold.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">armnn::optimizations::pad_fold Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1optimizations_1_1pad__fold_1_1_fold_pad_into_convolution2d_impl.xhtml">FoldPadIntoConvolution2dImpl</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1optimizations_1_1pad__fold_1_1_fold_pad_into_depthwise_convolution2d_impl.xhtml">FoldPadIntoDepthwiseConvolution2dImpl</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1optimizations_1_1pad__fold_1_1_fold_pad_into_pooling2d_impl.xhtml">FoldPadIntoPooling2dImpl</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a41605a45fe3f148071b04c7d861f391f"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a41605a45fe3f148071b04c7d861f391f">GetZeroElement</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo)</td></tr>
<tr class="separator:a41605a45fe3f148071b04c7d861f391f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1112c7c010be092e8d2478e5268666de"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a1112c7c010be092e8d2478e5268666de">GetLowestElement</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo)</td></tr>
<tr class="separator:a1112c7c010be092e8d2478e5268666de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef8fbdfbe08862db57b8ea6e09d84bce"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#aef8fbdfbe08862db57b8ea6e09d84bce">IsNeutralElement</a> (const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, const float tensorValue)</td></tr>
<tr class="separator:aef8fbdfbe08862db57b8ea6e09d84bce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c5795e478ba9afc068c645f3ac72ca5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a9c5795e478ba9afc068c645f3ac72ca5">IsNeutralElement</a> (const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, const float tensorValue)</td></tr>
<tr class="separator:a9c5795e478ba9afc068c645f3ac72ca5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a860dc7bc83a72db266ef5d6759686d24"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a860dc7bc83a72db266ef5d6759686d24">IsNeutralElement</a> (const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;descriptor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, const float tensorValue)</td></tr>
<tr class="separator:a860dc7bc83a72db266ef5d6759686d24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f3ad988ab5cf0c11de5380e77bbb50e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a9f3ad988ab5cf0c11de5380e77bbb50e">IsPooling2dPadded</a> (const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;poolDescriptor)</td></tr>
<tr class="separator:a9f3ad988ab5cf0c11de5380e77bbb50e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33ffc65d1f6581b0789d3d3a033f698e"><td class="memTemplParams" colspan="2">template&lt;typename Descriptor &gt; </td></tr>
<tr class="memitem:a33ffc65d1f6581b0789d3d3a033f698e"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a33ffc65d1f6581b0789d3d3a033f698e">TryFoldPadIntoLayer2d</a> (const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;padDescriptor, Descriptor &amp;layerDescriptor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo)</td></tr>
<tr class="separator:a33ffc65d1f6581b0789d3d3a033f698e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adeaaacf15ed6830d77298930545187e6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#adeaaacf15ed6830d77298930545187e6">TryFoldPadIntoLayer2d</a> (const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;padDescriptor, <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;poolDescriptor, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, bool isBackendOptimization=false)</td></tr>
<tr class="separator:adeaaacf15ed6830d77298930545187e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0dfb192db7209941d02bba0bd904822e"><td class="memTemplParams" colspan="2">template&lt;typename Layer2dT &gt; </td></tr>
<tr class="memitem:a0dfb192db7209941d02bba0bd904822e"><td class="memTemplItemLeft" align="right" valign="top">Layer2dT *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a0dfb192db7209941d02bba0bd904822e">FoldPadIntoLayer2dImpl</a> (<a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;graph, <a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &amp;connection)</td></tr>
<tr class="separator:a0dfb192db7209941d02bba0bd904822e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a0dfb192db7209941d02bba0bd904822e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0dfb192db7209941d02bba0bd904822e">&#9670;&nbsp;</a></span>FoldPadIntoLayer2dImpl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Layer2dT* armnn::optimizations::pad_fold::FoldPadIntoLayer2dImpl </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>graph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_input_slot.xhtml">InputSlot</a> &amp;&#160;</td>
          <td class="paramname"><em>connection</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00144">144</a> of file <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml">FoldPadIntoLayer2d.hpp</a>.</p>

<p class="reference">References <a class="el" href="_layer_8cpp_source.xhtml#l00112">OutputSlot::Connect()</a>, <a class="el" href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::Constant</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00120">OutputSlot::Disconnect()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00056">InputSlot::GetConnectedOutputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00324">Layer::GetInputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00319">Layer::GetName()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00326">Layer::GetOutputSlot()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00053">InputSlot::GetOwningLayer()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00119">OutputSlot::GetOwningLayer()</a>, <a class="el" href="_layer_with_parameters_8hpp_source.xhtml#l00019">LayerWithParameters&lt; Parameters &gt;::GetParameters()</a>, <a class="el" href="_layer_8cpp_source.xhtml#l00092">OutputSlot::GetTensorInfo()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00273">Layer::GetType()</a>, <a class="el" href="_graph_8hpp_source.xhtml#l00471">Graph::InsertNewLayer()</a>, and <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00088">TryFoldPadIntoLayer2d()</a>.</p>
<div class="fragment"><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;{</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    PadLayer&amp; padLayer = *PolymorphicDowncast&lt;PadLayer*&gt;(&amp;connection.GetConnectedOutputSlot()-&gt;GetOwningLayer());</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    Layer2dT&amp; layer2d = *PolymorphicDowncast&lt;Layer2dT*&gt;(&amp;connection.GetOwningLayer());</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">const</span> PadDescriptor&amp; padDescriptor = padLayer.GetParameters();</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">auto</span> newLayer2dDescriptor = layer2d.GetParameters();</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#adeaaacf15ed6830d77298930545187e6">TryFoldPadIntoLayer2d</a>(padDescriptor, newLayer2dDescriptor, padLayer.GetOutputSlot().GetTensorInfo()))</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">// Save original parent output slot of the pad layer</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    OutputSlot&amp; parentSlot = *padLayer.GetInputSlot(0).GetConnectedOutputSlot();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Insert new layer2d layer between the pad layer an its parent layer.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">const</span> std::string name = std::string(<span class="stringliteral">&quot;folded-&quot;</span>) + padLayer.GetName() + <span class="stringliteral">&quot;-into-&quot;</span> + layer2d.GetName();</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">auto</span>&amp; newLayer2d = *graph.InsertNewLayer&lt;Layer2dT&gt;(padLayer.GetInputSlot(0), newLayer2dDescriptor, name.c_str());</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    newLayer2d.GetOutputSlot().MoveAllConnections(parentSlot);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// Start at 1 to connect only weights and bias</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 1; i &lt; layer2d.GetNumInputSlots(); ++i)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">if</span> (layer2d.GetInputSlot(i).GetConnectedOutputSlot() != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            Layer&amp; tgtLayer = layer2d.GetInputSlot(i).GetConnectedOutputSlot()-&gt;GetOwningLayer();</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="comment">// Ensure we are definitely connecting the necessary constant layers</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keywordflow">if</span> (tgtLayer.GetType() == <a class="code" href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::LayerType::Constant</a>)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <span class="comment">// Remove old connection and connect to new layer2d</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                tgtLayer.GetOutputSlot(0).Disconnect(layer2d.GetInputSlot(i));</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                tgtLayer.GetOutputSlot(0).Connect(newLayer2d.GetInputSlot(i));</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="comment">// Moves connections in old layer2d layer output to new layer.</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="comment">// Old layer2d layer will be removed as it&#39;s left unconnected.</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="comment">// Pad layer will be removed if left unconnected.</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    layer2d.GetOutputSlot().MoveAllConnections(newLayer2d.GetOutputSlot());</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">return</span> &amp;newLayer2d;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1optimizations_1_1pad__fold_xhtml_adeaaacf15ed6830d77298930545187e6"><div class="ttname"><a href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#adeaaacf15ed6830d77298930545187e6">armnn::optimizations::pad_fold::TryFoldPadIntoLayer2d</a></div><div class="ttdeci">bool TryFoldPadIntoLayer2d(const PadDescriptor &amp;padDescriptor, Pooling2dDescriptor &amp;poolDescriptor, const TensorInfo &amp;tensorInfo, bool isBackendOptimization=false)</div><div class="ttdef"><b>Definition:</b> <a href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00115">FoldPadIntoLayer2d.hpp:115</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255"><div class="ttname"><a href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::PaddingMode::Constant</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1112c7c010be092e8d2478e5268666de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1112c7c010be092e8d2478e5268666de">&#9670;&nbsp;</a></span>GetLowestElement()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float armnn::optimizations::pad_fold::GetLowestElement </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00026">26</a> of file <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml">FoldPadIntoLayer2d.hpp</a>.</p>

<p class="reference">References <a class="el" href="_assert_8hpp_source.xhtml#l00015">ARMNN_ASSERT_MSG</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">armnn::BFloat16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">armnn::Float16</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00478">TensorInfo::GetQuantizationOffset()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00461">TensorInfo::GetQuantizationScale()</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a0a3f57c876f5a230244c38e1453a8a6e">armnn::QAsymmU8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::QSymmS16</a>, and <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9945327825b115e93a3b89f4302e76db">armnn::QSymmS8</a>.</p>

<p class="reference">Referenced by <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00068">IsNeutralElement()</a>.</p>
<div class="fragment"><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    constexpr <span class="keywordtype">float</span> negativeInfinity = -std::numeric_limits&lt;float&gt;::infinity();</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> scale = tensorInfo.GetQuantizationScale();</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keyword">const</span> int32_t offset = tensorInfo.GetQuantizationOffset();</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">switch</span> (tensorInfo.GetDataType())</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordflow">case</span> DataType::Float16:</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="keywordflow">return</span> armnnUtils::SelectiveQuantize&lt;armnn::Half&gt;(negativeInfinity, scale, offset);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">case</span> DataType::Float32:</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            <span class="keywordflow">return</span> armnnUtils::SelectiveQuantize&lt;float&gt;(negativeInfinity, scale, offset);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">case</span> DataType::QAsymmU8:</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            <span class="keywordflow">return</span> armnnUtils::SelectiveQuantize&lt;uint8_t&gt;(negativeInfinity, scale, offset);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">case</span> DataType::QSymmS16:</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            <span class="keywordflow">return</span> armnnUtils::SelectiveQuantize&lt;int16_t&gt;(negativeInfinity, scale, offset);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">case</span> DataType::QSymmS8:</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="comment">// Fall-through</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">case</span> DataType::QAsymmS8:</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            <span class="keywordflow">return</span> armnnUtils::SelectiveQuantize&lt;int8_t&gt;(negativeInfinity, scale, offset);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">case</span> DataType::BFloat16:</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keywordflow">return</span> armnnUtils::SelectiveQuantize&lt;armnn::BFloat16&gt;(negativeInfinity, scale, offset);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <a class="code" href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;Unsupported DataType&quot;</span>);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keywordflow">return</span> NAN;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="ttc" id="_assert_8hpp_xhtml_a91c4dfde57907d7698c7531785690a7f"><div class="ttname"><a href="_assert_8hpp.xhtml#a91c4dfde57907d7698c7531785690a7f">ARMNN_ASSERT_MSG</a></div><div class="ttdeci">#define ARMNN_ASSERT_MSG(COND, MSG)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00015">Assert.hpp:15</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a41605a45fe3f148071b04c7d861f391f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41605a45fe3f148071b04c7d861f391f">&#9670;&nbsp;</a></span>GetZeroElement()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float armnn::optimizations::pad_fold::GetZeroElement </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00021">21</a> of file <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml">FoldPadIntoLayer2d.hpp</a>.</p>

<p class="reference">References <a class="el" href="_tensor_8cpp_source.xhtml#l00478">TensorInfo::GetQuantizationOffset()</a>, and <a class="el" href="_tensor_8cpp_source.xhtml#l00504">TensorInfo::IsQuantized()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00056">IsNeutralElement()</a>.</p>
<div class="fragment"><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(tensorInfo.IsQuantized() ? tensorInfo.GetQuantizationOffset() : 0);</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aef8fbdfbe08862db57b8ea6e09d84bce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef8fbdfbe08862db57b8ea6e09d84bce">&#9670;&nbsp;</a></span>IsNeutralElement() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool armnn::optimizations::pad_fold::IsNeutralElement </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>tensorValue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00056">56</a> of file <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml">FoldPadIntoLayer2d.hpp</a>.</p>

<p class="reference">References <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00021">GetZeroElement()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00088">TryFoldPadIntoLayer2d()</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> tensorValue == <a class="code" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a41605a45fe3f148071b04c7d861f391f">GetZeroElement</a>(tensorInfo);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1optimizations_1_1pad__fold_xhtml_a41605a45fe3f148071b04c7d861f391f"><div class="ttname"><a href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a41605a45fe3f148071b04c7d861f391f">armnn::optimizations::pad_fold::GetZeroElement</a></div><div class="ttdeci">float GetZeroElement(const TensorInfo &amp;tensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00021">FoldPadIntoLayer2d.hpp:21</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9c5795e478ba9afc068c645f3ac72ca5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c5795e478ba9afc068c645f3ac72ca5">&#9670;&nbsp;</a></span>IsNeutralElement() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool armnn::optimizations::pad_fold::IsNeutralElement </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>tensorValue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00061">61</a> of file <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml">FoldPadIntoLayer2d.hpp</a>.</p>

<p class="reference">References <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00021">GetZeroElement()</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">return</span> tensorValue == <a class="code" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a41605a45fe3f148071b04c7d861f391f">GetZeroElement</a>(tensorInfo);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1optimizations_1_1pad__fold_xhtml_a41605a45fe3f148071b04c7d861f391f"><div class="ttname"><a href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a41605a45fe3f148071b04c7d861f391f">armnn::optimizations::pad_fold::GetZeroElement</a></div><div class="ttdeci">float GetZeroElement(const TensorInfo &amp;tensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00021">FoldPadIntoLayer2d.hpp:21</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a860dc7bc83a72db266ef5d6759686d24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a860dc7bc83a72db266ef5d6759686d24">&#9670;&nbsp;</a></span>IsNeutralElement() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool armnn::optimizations::pad_fold::IsNeutralElement </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>tensorValue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00068">68</a> of file <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml">FoldPadIntoLayer2d.hpp</a>.</p>

<p class="reference">References <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00026">GetLowestElement()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00021">GetZeroElement()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00366">Pooling2dDescriptor::m_PoolType</a>, and <a class="el" href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718a6a061313d22e51e0f25b7cd4dc065233">armnn::Max</a>.</p>
<div class="fragment"><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">return</span> (descriptor.m_PoolType == PoolingAlgorithm::Max)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        ? tensorValue &lt;= <a class="code" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a1112c7c010be092e8d2478e5268666de">GetLowestElement</a>(tensorInfo)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        : tensorValue == <a class="code" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a41605a45fe3f148071b04c7d861f391f">GetZeroElement</a>(tensorInfo);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1optimizations_1_1pad__fold_xhtml_a41605a45fe3f148071b04c7d861f391f"><div class="ttname"><a href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a41605a45fe3f148071b04c7d861f391f">armnn::optimizations::pad_fold::GetZeroElement</a></div><div class="ttdeci">float GetZeroElement(const TensorInfo &amp;tensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00021">FoldPadIntoLayer2d.hpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_1_1optimizations_1_1pad__fold_xhtml_a1112c7c010be092e8d2478e5268666de"><div class="ttname"><a href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a1112c7c010be092e8d2478e5268666de">armnn::optimizations::pad_fold::GetLowestElement</a></div><div class="ttdeci">float GetLowestElement(const TensorInfo &amp;tensorInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00026">FoldPadIntoLayer2d.hpp:26</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9f3ad988ab5cf0c11de5380e77bbb50e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f3ad988ab5cf0c11de5380e77bbb50e">&#9670;&nbsp;</a></span>IsPooling2dPadded()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool armnn::optimizations::pad_fold::IsPooling2dPadded </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>poolDescriptor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00076">76</a> of file <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml">FoldPadIntoLayer2d.hpp</a>.</p>

<p class="reference">References <a class="el" href="_descriptors_8hpp_source.xhtml#l00374">Pooling2dDescriptor::m_PadBottom</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00368">Pooling2dDescriptor::m_PadLeft</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00370">Pooling2dDescriptor::m_PadRight</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l00372">Pooling2dDescriptor::m_PadTop</a>.</p>

<p class="reference">Referenced by <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00115">TryFoldPadIntoLayer2d()</a>.</p>
<div class="fragment"><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> poolingPadValues = std::make_tuple(poolDescriptor.m_PadLeft, poolDescriptor.m_PadRight,</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                                  poolDescriptor.m_PadTop, poolDescriptor.m_PadBottom);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">if</span> (poolingPadValues != std::make_tuple(0U, 0U, 0U, 0U))</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a33ffc65d1f6581b0789d3d3a033f698e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33ffc65d1f6581b0789d3d3a033f698e">&#9670;&nbsp;</a></span>TryFoldPadIntoLayer2d() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool armnn::optimizations::pad_fold::TryFoldPadIntoLayer2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>padDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Descriptor &amp;&#160;</td>
          <td class="paramname"><em>layerDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00088">88</a> of file <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml">FoldPadIntoLayer2d.hpp</a>.</p>

<p class="reference">References <a class="el" href="_data_layout_indexed_8hpp_source.xhtml#l00023">DataLayoutIndexed::GetChannelsIndex()</a>, <a class="el" href="_data_layout_indexed_8hpp_source.xhtml#l00024">DataLayoutIndexed::GetHeightIndex()</a>, <a class="el" href="_data_layout_indexed_8hpp_source.xhtml#l00025">DataLayoutIndexed::GetWidthIndex()</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00056">IsNeutralElement()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l01195">PadDescriptor::m_PadList</a>, and <a class="el" href="_descriptors_8hpp_source.xhtml#l01198">PadDescriptor::m_PadValue</a>.</p>

<p class="reference">Referenced by <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00144">FoldPadIntoLayer2dImpl()</a>, <a class="el" href="_ref_backend_8cpp_source.xhtml#l00074">RefBackend::OptimizeSubgraphView()</a>, and <a class="el" href="_cl_backend_8cpp_source.xhtml#l00276">ClBackend::OptimizeSubgraphView()</a>.</p>
<div class="fragment"><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml">armnnUtils::DataLayoutIndexed</a> layout = <a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml">armnnUtils::DataLayoutIndexed</a>(layerDescriptor.m_DataLayout);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batchIndex = 0;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    constexpr <span class="keyword">auto</span> noPad = std::make_pair(0U, 0U);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">if</span> ((!<a class="code" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a860dc7bc83a72db266ef5d6759686d24">IsNeutralElement</a>(layerDescriptor, tensorInfo, padDescriptor.m_PadValue)) ||</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        (padDescriptor.m_PadList[batchIndex] != noPad) || (padDescriptor.m_PadList[layout.<a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a861b2621ee46e4b63379988b360b8cd9">GetChannelsIndex</a>()] != noPad))</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; padList = padDescriptor.m_PadList;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="comment">// In Convolution2dDescriptor/Pooling2dDescriptor, padLeft and padRight are defined as paddings</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="comment">// on width dimension whereas padTop and padBottom - paddings on height dimension, so updating</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">// these according to data layout</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    layerDescriptor.m_PadLeft += padList[layout.<a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a414e6f95548e6f7a01d5028b55ad3941">GetWidthIndex</a>()].first;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    layerDescriptor.m_PadRight += padList[layout.<a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a414e6f95548e6f7a01d5028b55ad3941">GetWidthIndex</a>()].second;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    layerDescriptor.m_PadTop += padList[layout.<a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a61c00316c443adc233c24e85c6c5b740">GetHeightIndex</a>()].first;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    layerDescriptor.m_PadBottom += padList[layout.<a class="code" href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a61c00316c443adc233c24e85c6c5b740">GetHeightIndex</a>()].second;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div><div class="ttc" id="classarmnn_utils_1_1_data_layout_indexed_xhtml_a414e6f95548e6f7a01d5028b55ad3941"><div class="ttname"><a href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a414e6f95548e6f7a01d5028b55ad3941">armnnUtils::DataLayoutIndexed::GetWidthIndex</a></div><div class="ttdeci">unsigned int GetWidthIndex() const</div><div class="ttdef"><b>Definition:</b> <a href="_data_layout_indexed_8hpp_source.xhtml#l00025">DataLayoutIndexed.hpp:25</a></div></div>
<div class="ttc" id="classarmnn_utils_1_1_data_layout_indexed_xhtml_a61c00316c443adc233c24e85c6c5b740"><div class="ttname"><a href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a61c00316c443adc233c24e85c6c5b740">armnnUtils::DataLayoutIndexed::GetHeightIndex</a></div><div class="ttdeci">unsigned int GetHeightIndex() const</div><div class="ttdef"><b>Definition:</b> <a href="_data_layout_indexed_8hpp_source.xhtml#l00024">DataLayoutIndexed.hpp:24</a></div></div>
<div class="ttc" id="classarmnn_utils_1_1_data_layout_indexed_xhtml"><div class="ttname"><a href="classarmnn_utils_1_1_data_layout_indexed.xhtml">armnnUtils::DataLayoutIndexed</a></div><div class="ttdoc">Provides access to the appropriate indexes for Channels, Height and Width based on DataLayout...</div><div class="ttdef"><b>Definition:</b> <a href="_data_layout_indexed_8hpp_source.xhtml#l00017">DataLayoutIndexed.hpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_1_1optimizations_1_1pad__fold_xhtml_a860dc7bc83a72db266ef5d6759686d24"><div class="ttname"><a href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a860dc7bc83a72db266ef5d6759686d24">armnn::optimizations::pad_fold::IsNeutralElement</a></div><div class="ttdeci">bool IsNeutralElement(const Pooling2dDescriptor &amp;descriptor, const TensorInfo &amp;tensorInfo, const float tensorValue)</div><div class="ttdef"><b>Definition:</b> <a href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00068">FoldPadIntoLayer2d.hpp:68</a></div></div>
<div class="ttc" id="classarmnn_utils_1_1_data_layout_indexed_xhtml_a861b2621ee46e4b63379988b360b8cd9"><div class="ttname"><a href="classarmnn_utils_1_1_data_layout_indexed.xhtml#a861b2621ee46e4b63379988b360b8cd9">armnnUtils::DataLayoutIndexed::GetChannelsIndex</a></div><div class="ttdeci">unsigned int GetChannelsIndex() const</div><div class="ttdef"><b>Definition:</b> <a href="_data_layout_indexed_8hpp_source.xhtml#l00023">DataLayoutIndexed.hpp:23</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="adeaaacf15ed6830d77298930545187e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adeaaacf15ed6830d77298930545187e6">&#9670;&nbsp;</a></span>TryFoldPadIntoLayer2d() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool armnn::optimizations::pad_fold::TryFoldPadIntoLayer2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>padDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>poolDescriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isBackendOptimization</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00115">115</a> of file <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml">FoldPadIntoLayer2d.hpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718ab1897515d548a960afe49ecf66a29021">armnn::Average</a>, <a class="el" href="namespacearmnn.xhtml#a3888429b6ebc79f9a7df549e5e4d9a2fa843f2812f595e7ec7c5036e89fde02d6">armnn::Exclude</a>, <a class="el" href="namespacearmnn.xhtml#a3888429b6ebc79f9a7df549e5e4d9a2faad301514192636ad34210adce598a45a">armnn::IgnoreValue</a>, <a class="el" href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00076">IsPooling2dPadded()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00504">TensorInfo::IsQuantized()</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00388">Pooling2dDescriptor::m_DataLayout</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00386">Pooling2dDescriptor::m_PaddingMethod</a>, <a class="el" href="_descriptors_8hpp_source.xhtml#l00366">Pooling2dDescriptor::m_PoolType</a>, <a class="el" href="namespacearmnn.xhtml#a961bbfe1db71a848eff5a1f0ab775718a6a061313d22e51e0f25b7cd4dc065233">armnn::Max</a>, and <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">armnn::NHWC</a>.</p>
<div class="fragment"><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// Cannot fold Average or L2 pooling if padding exists and the padding method is Exclude.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">if</span> (poolDescriptor.m_PoolType != PoolingAlgorithm::Max &amp;&amp;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <a class="code" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a9f3ad988ab5cf0c11de5380e77bbb50e">IsPooling2dPadded</a>(poolDescriptor) &amp;&amp;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        poolDescriptor.m_PaddingMethod == PaddingMethod::Exclude)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// Cannot fold Average pooling if data type is quantized and layout is NHWC in Neon backend.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="comment">// Therefore, this specific case will become a backend specific optimization.</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">if</span>  (!isBackendOptimization &amp;&amp;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;         tensorInfo.IsQuantized() &amp;&amp;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;         poolDescriptor.m_PoolType == PoolingAlgorithm::Average &amp;&amp;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;         poolDescriptor.m_DataLayout == DataLayout::NHWC)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    poolDescriptor.m_PaddingMethod = PaddingMethod::IgnoreValue;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">return</span> TryFoldPadIntoLayer2d&lt;Pooling2dDescriptor&gt;(padDescriptor, poolDescriptor, tensorInfo);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div><div class="ttc" id="namespacearmnn_1_1optimizations_1_1pad__fold_xhtml_a9f3ad988ab5cf0c11de5380e77bbb50e"><div class="ttname"><a href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml#a9f3ad988ab5cf0c11de5380e77bbb50e">armnn::optimizations::pad_fold::IsPooling2dPadded</a></div><div class="ttdeci">bool IsPooling2dPadded(const Pooling2dDescriptor &amp;poolDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_fold_pad_into_layer2d_8hpp_source.xhtml#l00076">FoldPadIntoLayer2d.hpp:76</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="namespacearmnn_1_1optimizations.xhtml">optimizations</a></li><li class="navelem"><a class="el" href="namespacearmnn_1_1optimizations_1_1pad__fold.xhtml">pad_fold</a></li>
    <li class="footer">Generated on Fri Aug 19 2022 14:38:42 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
