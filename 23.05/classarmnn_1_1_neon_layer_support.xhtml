<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: NeonLayerSupport Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarmnn_1_1_neon_layer_support.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1_neon_layer_support-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">NeonLayerSupport Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_neon_layer_support_8hpp_source.xhtml">NeonLayerSupport.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for NeonLayerSupport:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_neon_layer_support.png" usemap="#NeonLayerSupport_map" alt=""/>
  <map id="NeonLayerSupport_map" name="NeonLayerSupport_map">
<area href="classarmnn_1_1_layer_support_base.xhtml" alt="LayerSupportBase" shape="rect" coords="0,56,119,80"/>
<area href="classarmnn_1_1_i_layer_support.xhtml" alt="ILayerSupport" shape="rect" coords="0,0,119,24"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a45ecbb863cc8ef62d09bd7749089e0f8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a45ecbb863cc8ef62d09bd7749089e0f8">NeonLayerSupport</a> (const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a> &amp;modelContextPtr)</td></tr>
<tr class="separator:a45ecbb863cc8ef62d09bd7749089e0f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e8bdd2741997b0cdc329cbfcaeebf93"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0e8bdd2741997b0cdc329cbfcaeebf93">NeonLayerSupport</a> ()</td></tr>
<tr class="separator:a0e8bdd2741997b0cdc329cbfcaeebf93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19528981c1519ecc64cc4a70b12ce8d3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a19528981c1519ecc64cc4a70b12ce8d3">~NeonLayerSupport</a> ()</td></tr>
<tr class="separator:a19528981c1519ecc64cc4a70b12ce8d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f75cea2b43e602f4b99d60375d41a8a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a1f75cea2b43e602f4b99d60375d41a8a">IsLayerSupported</a> (const <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> &amp;type, const std::vector&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;infos, const <a class="el" href="structarmnn_1_1_base_descriptor.xhtml">BaseDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &gt; &amp;lstmParamsInfo, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &gt; &amp;quantizedLstmParamsInfo, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:a1f75cea2b43e602f4b99d60375d41a8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd148b61eab388a9313c61f4c7a96c4b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#acd148b61eab388a9313c61f4c7a96c4b">IsActivationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:acd148b61eab388a9313c61f4c7a96c4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06a955e172cf18898d966eab7383efa1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a06a955e172cf18898d966eab7383efa1">IsAdditionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a06a955e172cf18898d966eab7383efa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7224fbfbc4c5a2b3710543e3f574171f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a7224fbfbc4c5a2b3710543e3f574171f">IsArgMinMaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7224fbfbc4c5a2b3710543e3f574171f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22cfc1d5f68bd32db0aa126e8fd9e615"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a22cfc1d5f68bd32db0aa126e8fd9e615">IsBatchMatMulSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;inputX, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;inputY, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml">BatchMatMulDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a22cfc1d5f68bd32db0aa126e8fd9e615"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a450ddf4b4335cb37e07e3b0171b00096"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a450ddf4b4335cb37e07e3b0171b00096">IsBatchNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">mean</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">var</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">beta</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">gamma</a>, const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a450ddf4b4335cb37e07e3b0171b00096"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30cbe4bc4e20ae9b2aac66a108088919"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a30cbe4bc4e20ae9b2aac66a108088919">IsBatchToSpaceNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a30cbe4bc4e20ae9b2aac66a108088919"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac680aa10b0a3768da4c23e691881b5ea"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ac680aa10b0a3768da4c23e691881b5ea">IsCastSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac680aa10b0a3768da4c23e691881b5ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1362503332222029f9d73d40520f35bd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a1362503332222029f9d73d40520f35bd">IsChannelShuffleSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a1362503332222029f9d73d40520f35bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a387c184902d9f09d35bb22b076cb245d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a387c184902d9f09d35bb22b076cb245d">IsComparisonSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a387c184902d9f09d35bb22b076cb245d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6465e7a85f4ef0013c7d7161cd07a4d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#af6465e7a85f4ef0013c7d7161cd07a4d">IsConcatSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt; inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:af6465e7a85f4ef0013c7d7161cd07a4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57aee9aba2e2ad5d0bd9f65acd05b6e4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a57aee9aba2e2ad5d0bd9f65acd05b6e4">IsConstantSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a57aee9aba2e2ad5d0bd9f65acd05b6e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95dac0c44b7e759694a97778bfbea954"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a95dac0c44b7e759694a97778bfbea954">IsConvertFp16ToFp32Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a95dac0c44b7e759694a97778bfbea954"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f9272cdf0224364e1bb9b47efe4130a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a5f9272cdf0224364e1bb9b47efe4130a">IsConvertFp32ToFp16Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a5f9272cdf0224364e1bb9b47efe4130a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bd807090f4cb45bbfaa9c67e49532f5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a4bd807090f4cb45bbfaa9c67e49532f5">IsConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a4bd807090f4cb45bbfaa9c67e49532f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe850b2a5be4ce4617cb51ceb5344756"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#abe850b2a5be4ce4617cb51ceb5344756">IsConvolution3dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:abe850b2a5be4ce4617cb51ceb5344756"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84f23a37f7fd69269f072e114b7f0afb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a84f23a37f7fd69269f072e114b7f0afb">IsDepthToSpaceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a84f23a37f7fd69269f072e114b7f0afb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56c4df05190f0f465e8501ae831af234"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a56c4df05190f0f465e8501ae831af234">IsDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a56c4df05190f0f465e8501ae831af234"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a866844299dc03c65ca41be5990bf19e8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a866844299dc03c65ca41be5990bf19e8">IsDequantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a866844299dc03c65ca41be5990bf19e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3b8e44b40a9c02ef372081ee2e454a1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ae3b8e44b40a9c02ef372081ee2e454a1">IsDilatedDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; reason=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae3b8e44b40a9c02ef372081ee2e454a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeec02af89681b711706472de7be52871"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aeec02af89681b711706472de7be52871">IsElementwiseUnarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aeec02af89681b711706472de7be52871"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab747f27ee2acb8409799d6ea1af0dff7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ab747f27ee2acb8409799d6ea1af0dff7">IsFillSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab747f27ee2acb8409799d6ea1af0dff7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae054f879bca9ff680f7e42ae97cc5ed3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ae054f879bca9ff680f7e42ae97cc5ed3">IsFloorSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae054f879bca9ff680f7e42ae97cc5ed3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7249912502bfa13dad25038e8fb9379b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a7249912502bfa13dad25038e8fb9379b">IsFullyConnectedSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7249912502bfa13dad25038e8fb9379b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0bca4c0de78df48fd6e63a3b8239f57"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ad0bca4c0de78df48fd6e63a3b8239f57">IsGatherNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const</td></tr>
<tr class="separator:ad0bca4c0de78df48fd6e63a3b8239f57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae02f78731b0d046f4ed85fcf46c5d17d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ae02f78731b0d046f4ed85fcf46c5d17d">IsGatherSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:ae02f78731b0d046f4ed85fcf46c5d17d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d0dbfd77d3461ded89d3bf6a4eab62c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a5d0dbfd77d3461ded89d3bf6a4eab62c">IsInputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a5d0dbfd77d3461ded89d3bf6a4eab62c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ee45bf624e40815207a2117f8e02b5d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a9ee45bf624e40815207a2117f8e02b5d">IsInstanceNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a9ee45bf624e40815207a2117f8e02b5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad17197c4dc4dd190610d6d205108255a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ad17197c4dc4dd190610d6d205108255a">IsL2NormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad17197c4dc4dd190610d6d205108255a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acaca6012c89942f00869d80c389d5e8a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#acaca6012c89942f00869d80c389d5e8a">IsLogicalBinarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:acaca6012c89942f00869d80c389d5e8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae13d577a85b2b121febb2fe43899fd6c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ae13d577a85b2b121febb2fe43899fd6c">IsLogSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae13d577a85b2b121febb2fe43899fd6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a533ad0fa8ff06bef939f4260a8183350"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a533ad0fa8ff06bef939f4260a8183350">IsLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">scratchBuffer</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a533ad0fa8ff06bef939f4260a8183350"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac92df5c79bae4ccdc68d9d2045fa2110"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ac92df5c79bae4ccdc68d9d2045fa2110">IsMaximumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac92df5c79bae4ccdc68d9d2045fa2110"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9869f2a0cbe051fcc87fb1405d4091d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ad9869f2a0cbe051fcc87fb1405d4091d">IsMeanSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad9869f2a0cbe051fcc87fb1405d4091d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4eb9b602052470f8eadcfa7a63b17d54"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a4eb9b602052470f8eadcfa7a63b17d54">IsMinimumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a4eb9b602052470f8eadcfa7a63b17d54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5960d08e30fb9542125688580c5f623"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ab5960d08e30fb9542125688580c5f623">IsMultiplicationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab5960d08e30fb9542125688580c5f623"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4217d27bcb41e14cd023552004b21a3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ad4217d27bcb41e14cd023552004b21a3">IsDivisionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad4217d27bcb41e14cd023552004b21a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedd6e4de83db27813fad327c29402033"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aedd6e4de83db27813fad327c29402033">IsNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aedd6e4de83db27813fad327c29402033"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2078e9d66b086cf1225f0610b05a520"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ac2078e9d66b086cf1225f0610b05a520">IsOutputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac2078e9d66b086cf1225f0610b05a520"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef4e4cfc054c2fd0e9bd0947909ebe83"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aef4e4cfc054c2fd0e9bd0947909ebe83">IsPadSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aef4e4cfc054c2fd0e9bd0947909ebe83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a336cc17b9c2cd4e7f667c7fcf5c9377e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a336cc17b9c2cd4e7f667c7fcf5c9377e">IsPermuteSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a336cc17b9c2cd4e7f667c7fcf5c9377e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6262dc3169d8e809c272b31b25aaa6a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ad6262dc3169d8e809c272b31b25aaa6a">IsPooling2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad6262dc3169d8e809c272b31b25aaa6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70c3043f5b6dd3091646fb2c1648a5f5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a70c3043f5b6dd3091646fb2c1648a5f5">IsPooling3dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a70c3043f5b6dd3091646fb2c1648a5f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdf847462abb9af6a8a932589a0046bb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#abdf847462abb9af6a8a932589a0046bb">IsPreluSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">alpha</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:abdf847462abb9af6a8a932589a0046bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a052a3d7389be3a0993c9f9a508fa435e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a052a3d7389be3a0993c9f9a508fa435e">IsQLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a052a3d7389be3a0993c9f9a508fa435e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4474f6170d9abd571f612b2dae34820"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ab4474f6170d9abd571f612b2dae34820">IsQuantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab4474f6170d9abd571f612b2dae34820"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7574a8a0dbde3c5058b24b43c4c88125"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a7574a8a0dbde3c5058b24b43c4c88125">IsQuantizedLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>, const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7574a8a0dbde3c5058b24b43c4c88125"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fe9a6e2b79cc5c97e582f1fe0e1f514"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a9fe9a6e2b79cc5c97e582f1fe0e1f514">IsReduceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a9fe9a6e2b79cc5c97e582f1fe0e1f514"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab226977f41ce8cc1ee82c314949bb184"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ab226977f41ce8cc1ee82c314949bb184">IsReshapeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab226977f41ce8cc1ee82c314949bb184"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a629a1df03491e1bdc19dbd415fd2ad74"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a629a1df03491e1bdc19dbd415fd2ad74">IsResizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a629a1df03491e1bdc19dbd415fd2ad74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a227dac81ac83d16f474881c2252d14cc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a227dac81ac83d16f474881c2252d14cc">IsSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a227dac81ac83d16f474881c2252d14cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3115a72a9cca31fb27b40da54a435dfa"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a3115a72a9cca31fb27b40da54a435dfa">IsSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3115a72a9cca31fb27b40da54a435dfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa421c466a09cc8048aa0b700b7e300d8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aa421c466a09cc8048aa0b700b7e300d8">IsSpaceToBatchNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa421c466a09cc8048aa0b700b7e300d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78c8c01a898f4bdcebddeda9f3d39a51"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a78c8c01a898f4bdcebddeda9f3d39a51">IsSpaceToDepthSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a78c8c01a898f4bdcebddeda9f3d39a51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a159deb89f2f5dbc1a12b8d365162760f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a159deb89f2f5dbc1a12b8d365162760f">IsSplitterSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt;&gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a159deb89f2f5dbc1a12b8d365162760f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d99d635906837ed6c582aba6ca6b178"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a0d99d635906837ed6c582aba6ca6b178">IsStackSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt; &amp;inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0d99d635906837ed6c582aba6ca6b178"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaa749f75b5ca145f6ad41aa210dbd19"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#aaaa749f75b5ca145f6ad41aa210dbd19">IsStridedSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aaaa749f75b5ca145f6ad41aa210dbd19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a520378fa336d155e23478456eb45fe"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a8a520378fa336d155e23478456eb45fe">IsSubtractionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a8a520378fa336d155e23478456eb45fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfc649259b4e9d8bb830da564f7556c6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#abfc649259b4e9d8bb830da564f7556c6">IsTransposeConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:abfc649259b4e9d8bb830da564f7556c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d8316c4fac71a34c0f95745a0cae0a8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#a5d8316c4fac71a34c0f95745a0cae0a8">IsTransposeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a5d8316c4fac71a34c0f95745a0cae0a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5cccf9f21abbc944a20817804cfb964"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml#ae5cccf9f21abbc944a20817804cfb964">IsUnidirectionalSequenceLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="namespacearmnn.xhtml#ae6c5f1b51bd32133c4dcc632045d6b58">UnidirectionalSequenceLstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:ae5cccf9f21abbc944a20817804cfb964"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_layer_support_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_layer_support_base')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml">LayerSupportBase</a></td></tr>
<tr class="memitem:acd148b61eab388a9313c61f4c7a96c4b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#acd148b61eab388a9313c61f4c7a96c4b">IsActivationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:acd148b61eab388a9313c61f4c7a96c4b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06a955e172cf18898d966eab7383efa1 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a06a955e172cf18898d966eab7383efa1">IsAdditionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a06a955e172cf18898d966eab7383efa1 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7224fbfbc4c5a2b3710543e3f574171f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a7224fbfbc4c5a2b3710543e3f574171f">IsArgMinMaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7224fbfbc4c5a2b3710543e3f574171f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a450ddf4b4335cb37e07e3b0171b00096 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a450ddf4b4335cb37e07e3b0171b00096">IsBatchNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">mean</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">var</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">beta</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">gamma</a>, const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a450ddf4b4335cb37e07e3b0171b00096 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30cbe4bc4e20ae9b2aac66a108088919 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a30cbe4bc4e20ae9b2aac66a108088919">IsBatchToSpaceNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a30cbe4bc4e20ae9b2aac66a108088919 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac680aa10b0a3768da4c23e691881b5ea inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ac680aa10b0a3768da4c23e691881b5ea">IsCastSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac680aa10b0a3768da4c23e691881b5ea inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1362503332222029f9d73d40520f35bd inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a1362503332222029f9d73d40520f35bd">IsChannelShuffleSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a1362503332222029f9d73d40520f35bd inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a387c184902d9f09d35bb22b076cb245d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a387c184902d9f09d35bb22b076cb245d">IsComparisonSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a387c184902d9f09d35bb22b076cb245d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6465e7a85f4ef0013c7d7161cd07a4d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#af6465e7a85f4ef0013c7d7161cd07a4d">IsConcatSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt; inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:af6465e7a85f4ef0013c7d7161cd07a4d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57aee9aba2e2ad5d0bd9f65acd05b6e4 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a57aee9aba2e2ad5d0bd9f65acd05b6e4">IsConstantSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a57aee9aba2e2ad5d0bd9f65acd05b6e4 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95dac0c44b7e759694a97778bfbea954 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a95dac0c44b7e759694a97778bfbea954">IsConvertFp16ToFp32Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a95dac0c44b7e759694a97778bfbea954 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f9272cdf0224364e1bb9b47efe4130a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a5f9272cdf0224364e1bb9b47efe4130a">IsConvertFp32ToFp16Supported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a5f9272cdf0224364e1bb9b47efe4130a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bd807090f4cb45bbfaa9c67e49532f5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a4bd807090f4cb45bbfaa9c67e49532f5">IsConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a4bd807090f4cb45bbfaa9c67e49532f5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe850b2a5be4ce4617cb51ceb5344756 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#abe850b2a5be4ce4617cb51ceb5344756">IsConvolution3dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:abe850b2a5be4ce4617cb51ceb5344756 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb2631acff8b8d0dc61334ff9f8a957a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aeb2631acff8b8d0dc61334ff9f8a957a">IsDebugSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aeb2631acff8b8d0dc61334ff9f8a957a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84f23a37f7fd69269f072e114b7f0afb inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a84f23a37f7fd69269f072e114b7f0afb">IsDepthToSpaceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a84f23a37f7fd69269f072e114b7f0afb inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56c4df05190f0f465e8501ae831af234 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a56c4df05190f0f465e8501ae831af234">IsDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a56c4df05190f0f465e8501ae831af234 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a866844299dc03c65ca41be5990bf19e8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a866844299dc03c65ca41be5990bf19e8">IsDequantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a866844299dc03c65ca41be5990bf19e8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a884cfe928faf62853edc9607142efce9 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a884cfe928faf62853edc9607142efce9">IsDetectionPostProcessSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;boxEncodings, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a97cbe8ac8df2e213185599d693079acf">scores</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1e19982da8ec2840ca14748c2d8522c">anchors</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d0c2ca9c78e81a5e9e0f3db51934782">detectionBoxes</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a56d52f01c9d80f3710ddace11e534434">detectionClasses</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac8776b306c349e20905e7ae17255b395">detectionScores</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3b204a7fda471668ab54dc967c5a7917">numDetections</a>, const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a884cfe928faf62853edc9607142efce9 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcbd5fad9ab8476db32cec8db3f4346e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#abcbd5fad9ab8476db32cec8db3f4346e">IsDilatedDepthwiseConvolutionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:abcbd5fad9ab8476db32cec8db3f4346e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4217d27bcb41e14cd023552004b21a3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad4217d27bcb41e14cd023552004b21a3">IsDivisionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad4217d27bcb41e14cd023552004b21a3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeec02af89681b711706472de7be52871 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aeec02af89681b711706472de7be52871">IsElementwiseUnarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aeec02af89681b711706472de7be52871 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06cd4c70d33d2f49a3418a65d8f45f14 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a06cd4c70d33d2f49a3418a65d8f45f14">IsFakeQuantizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a06cd4c70d33d2f49a3418a65d8f45f14 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae054f879bca9ff680f7e42ae97cc5ed3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ae054f879bca9ff680f7e42ae97cc5ed3">IsFloorSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae054f879bca9ff680f7e42ae97cc5ed3 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7249912502bfa13dad25038e8fb9379b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a7249912502bfa13dad25038e8fb9379b">IsFullyConnectedSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7249912502bfa13dad25038e8fb9379b inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97a643c5aa50c3419dab27c24cade1e0 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a97a643c5aa50c3419dab27c24cade1e0">IsGatherSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a97a643c5aa50c3419dab27c24cade1e0 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d0dbfd77d3461ded89d3bf6a4eab62c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a5d0dbfd77d3461ded89d3bf6a4eab62c">IsInputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a5d0dbfd77d3461ded89d3bf6a4eab62c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ee45bf624e40815207a2117f8e02b5d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a9ee45bf624e40815207a2117f8e02b5d">IsInstanceNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a9ee45bf624e40815207a2117f8e02b5d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad17197c4dc4dd190610d6d205108255a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad17197c4dc4dd190610d6d205108255a">IsL2NormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad17197c4dc4dd190610d6d205108255a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66ebc7658ecd90158cfb7b03606f0bda inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a66ebc7658ecd90158cfb7b03606f0bda">IsLogicalBinarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a66ebc7658ecd90158cfb7b03606f0bda inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b8c4b4fd867e2e68a3ae1e2adb090f5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a7b8c4b4fd867e2e68a3ae1e2adb090f5">IsLogicalUnarySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7b8c4b4fd867e2e68a3ae1e2adb090f5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae13d577a85b2b121febb2fe43899fd6c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ae13d577a85b2b121febb2fe43899fd6c">IsLogSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae13d577a85b2b121febb2fe43899fd6c inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a533ad0fa8ff06bef939f4260a8183350 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a533ad0fa8ff06bef939f4260a8183350">IsLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">scratchBuffer</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a533ad0fa8ff06bef939f4260a8183350 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac92df5c79bae4ccdc68d9d2045fa2110 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ac92df5c79bae4ccdc68d9d2045fa2110">IsMaximumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac92df5c79bae4ccdc68d9d2045fa2110 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9869f2a0cbe051fcc87fb1405d4091d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad9869f2a0cbe051fcc87fb1405d4091d">IsMeanSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad9869f2a0cbe051fcc87fb1405d4091d inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae12212269e173407398a6d4fef80f76f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ae12212269e173407398a6d4fef80f76f">IsMemCopySupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ae12212269e173407398a6d4fef80f76f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ff6fcb839280edf41013d349df4f848 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3ff6fcb839280edf41013d349df4f848">IsMemImportSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3ff6fcb839280edf41013d349df4f848 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93a1d7a75c6802d3c4f7911f35e1cfa8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a93a1d7a75c6802d3c4f7911f35e1cfa8">IsMergeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a93a1d7a75c6802d3c4f7911f35e1cfa8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4eb9b602052470f8eadcfa7a63b17d54 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a4eb9b602052470f8eadcfa7a63b17d54">IsMinimumSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a4eb9b602052470f8eadcfa7a63b17d54 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5960d08e30fb9542125688580c5f623 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab5960d08e30fb9542125688580c5f623">IsMultiplicationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab5960d08e30fb9542125688580c5f623 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedd6e4de83db27813fad327c29402033 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aedd6e4de83db27813fad327c29402033">IsNormalizationSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aedd6e4de83db27813fad327c29402033 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2078e9d66b086cf1225f0610b05a520 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ac2078e9d66b086cf1225f0610b05a520">IsOutputSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ac2078e9d66b086cf1225f0610b05a520 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef4e4cfc054c2fd0e9bd0947909ebe83 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aef4e4cfc054c2fd0e9bd0947909ebe83">IsPadSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aef4e4cfc054c2fd0e9bd0947909ebe83 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a336cc17b9c2cd4e7f667c7fcf5c9377e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a336cc17b9c2cd4e7f667c7fcf5c9377e">IsPermuteSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a336cc17b9c2cd4e7f667c7fcf5c9377e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6262dc3169d8e809c272b31b25aaa6a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ad6262dc3169d8e809c272b31b25aaa6a">IsPooling2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ad6262dc3169d8e809c272b31b25aaa6a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70c3043f5b6dd3091646fb2c1648a5f5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a70c3043f5b6dd3091646fb2c1648a5f5">IsPooling3dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a70c3043f5b6dd3091646fb2c1648a5f5 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56d839ce23fcd124ff86b31ce5f786b1 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a56d839ce23fcd124ff86b31ce5f786b1">IsPreCompiledSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a56d839ce23fcd124ff86b31ce5f786b1 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d0fd89e5c982e1e0cfcaef64995499a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3d0fd89e5c982e1e0cfcaef64995499a">IsPreluSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">alpha</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:a3d0fd89e5c982e1e0cfcaef64995499a inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4474f6170d9abd571f612b2dae34820 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab4474f6170d9abd571f612b2dae34820">IsQuantizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab4474f6170d9abd571f612b2dae34820 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a052a3d7389be3a0993c9f9a508fa435e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a052a3d7389be3a0993c9f9a508fa435e">IsQLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a052a3d7389be3a0993c9f9a508fa435e inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7956a5f8822ae4071b4c5f133bf05a82 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a7956a5f8822ae4071b4c5f133bf05a82">IsQuantizedLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a7956a5f8822ae4071b4c5f133bf05a82 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7cec5ce0429fcac8459a0cac24bbcc8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ac7cec5ce0429fcac8459a0cac24bbcc8">IsRankSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) const override</td></tr>
<tr class="separator:ac7cec5ce0429fcac8459a0cac24bbcc8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fe9a6e2b79cc5c97e582f1fe0e1f514 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a9fe9a6e2b79cc5c97e582f1fe0e1f514">IsReduceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a9fe9a6e2b79cc5c97e582f1fe0e1f514 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab226977f41ce8cc1ee82c314949bb184 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab226977f41ce8cc1ee82c314949bb184">IsReshapeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:ab226977f41ce8cc1ee82c314949bb184 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a629a1df03491e1bdc19dbd415fd2ad74 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a629a1df03491e1bdc19dbd415fd2ad74">IsResizeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a629a1df03491e1bdc19dbd415fd2ad74 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d720441480c7b7af4285f628f07fbcd inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0d720441480c7b7af4285f628f07fbcd">IsShapeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0d720441480c7b7af4285f628f07fbcd inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a227dac81ac83d16f474881c2252d14cc inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a227dac81ac83d16f474881c2252d14cc">IsSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a227dac81ac83d16f474881c2252d14cc inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3115a72a9cca31fb27b40da54a435dfa inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a3115a72a9cca31fb27b40da54a435dfa">IsSoftmaxSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a3115a72a9cca31fb27b40da54a435dfa inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa421c466a09cc8048aa0b700b7e300d8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aa421c466a09cc8048aa0b700b7e300d8">IsSpaceToBatchNdSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aa421c466a09cc8048aa0b700b7e300d8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78c8c01a898f4bdcebddeda9f3d39a51 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a78c8c01a898f4bdcebddeda9f3d39a51">IsSpaceToDepthSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a78c8c01a898f4bdcebddeda9f3d39a51 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a159deb89f2f5dbc1a12b8d365162760f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a159deb89f2f5dbc1a12b8d365162760f">IsSplitterSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt;&gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>, const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a159deb89f2f5dbc1a12b8d365162760f inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d99d635906837ed6c582aba6ca6b178 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a0d99d635906837ed6c582aba6ca6b178">IsStackSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt; &amp;inputs, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a0d99d635906837ed6c582aba6ca6b178 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99da2ac37691d245f1a50d2b4dda5321 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a99da2ac37691d245f1a50d2b4dda5321">IsStandInSupported</a> (const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt; &amp;inputs, const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>, const <a class="el" href="structarmnn_1_1_stand_in_descriptor.xhtml">StandInDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a99da2ac37691d245f1a50d2b4dda5321 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaa749f75b5ca145f6ad41aa210dbd19 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#aaaa749f75b5ca145f6ad41aa210dbd19">IsStridedSliceSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:aaaa749f75b5ca145f6ad41aa210dbd19 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a520378fa336d155e23478456eb45fe inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a8a520378fa336d155e23478456eb45fe">IsSubtractionSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a8a520378fa336d155e23478456eb45fe inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41569ebd2d1c9777e057bc60e8bc88ae inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a41569ebd2d1c9777e057bc60e8bc88ae">IsSwitchSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5c2243c4c3b723129082dd38daf0387f">output0</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a53e5afe9ffb176f1f3c98a4222ceb2b9">output1</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a41569ebd2d1c9777e057bc60e8bc88ae inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfc649259b4e9d8bb830da564f7556c6 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#abfc649259b4e9d8bb830da564f7556c6">IsTransposeConvolution2dSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>, const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:abfc649259b4e9d8bb830da564f7556c6 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d8316c4fac71a34c0f95745a0cae0a8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a5d8316c4fac71a34c0f95745a0cae0a8">IsTransposeSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a5d8316c4fac71a34c0f95745a0cae0a8 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4522416bd1c86a58e232254d1a24bed1 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a4522416bd1c86a58e232254d1a24bed1">IsUnidirectionalSequenceLstmSupported</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>, const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt; <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>=<a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const override</td></tr>
<tr class="separator:a4522416bd1c86a58e232254d1a24bed1 inherit pub_methods_classarmnn_1_1_layer_support_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarmnn_1_1_i_layer_support"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarmnn_1_1_i_layer_support')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td></tr>
<tr class="memitem:a6d593367be03c4ef23ba028caec5603d inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a6e7dc8639c4b2f0a93031afff5182735">IsActivationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a6d593367be03c4ef23ba028caec5603d inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeec4e38c19f0f78eecae1d5f36f5fd26 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aeec4e38c19f0f78eecae1d5f36f5fd26">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ab5569e5b664498e011e8bd92cc3cc5b2">IsAdditionSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:aeec4e38c19f0f78eecae1d5f36f5fd26 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad203022ce40888e1ff058e4843405f6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aad203022ce40888e1ff058e4843405f6">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsArgMinMaxSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:aad203022ce40888e1ff058e4843405f6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9776b80872cf5419aa88c36287a039a1 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9776b80872cf5419aa88c36287a039a1">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a49b7a701c6a0c569015309102221c702">IsBatchNormalizationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a9776b80872cf5419aa88c36287a039a1 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a092b824a5ac66ee5a594c2ef03a52ba7 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a092b824a5ac66ee5a594c2ef03a52ba7">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#abb893c7adb7b64d0964bd244c46dd06b">IsBatchToSpaceNdSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a092b824a5ac66ee5a594c2ef03a52ba7 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61bea315fcd8d1b7b1d5e546d24f07fb inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a61bea315fcd8d1b7b1d5e546d24f07fb">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsCastSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a61bea315fcd8d1b7b1d5e546d24f07fb inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ce9baa51a30a4044f42980ea4bcc89e inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3ce9baa51a30a4044f42980ea4bcc89e">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsChannelShuffleSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a3ce9baa51a30a4044f42980ea4bcc89e inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b8dc681ee5a6e59f950273e37050807 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2b8dc681ee5a6e59f950273e37050807">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsComparisonSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a2b8dc681ee5a6e59f950273e37050807 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21e60883836c268b7cc34708af6f31ab inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a21e60883836c268b7cc34708af6f31ab">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#af9decd6720482e602efc6ac5ef7dab50">IsConvertFp16ToFp32Supported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a21e60883836c268b7cc34708af6f31ab inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d4ec9191bbfb9f36ed4787451cb5b7e inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1d4ec9191bbfb9f36ed4787451cb5b7e">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a080c11383c6a29b4295ae359cde5c19c">IsConvertFp32ToFp16Supported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a1d4ec9191bbfb9f36ed4787451cb5b7e inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25b351e94be4470408e1634ffb94843f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a25b351e94be4470408e1634ffb94843f">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#aff785aa7c076b1d2f51f76fa0f0647e4">IsConvolution2dSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a25b351e94be4470408e1634ffb94843f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab00b60ee587b97f018caad286efbfa44 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab00b60ee587b97f018caad286efbfa44">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsConvolution3dSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ab00b60ee587b97f018caad286efbfa44 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ef9f5276ab9f125959381e9cd7f5890 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5ef9f5276ab9f125959381e9cd7f5890">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#aa6503439334e0a79181a51e084b0268f">IsDebugSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a5ef9f5276ab9f125959381e9cd7f5890 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0b23752d6141c8851a8d5c299c86fef inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad0b23752d6141c8851a8d5c299c86fef">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsDepthToSpaceSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ad0b23752d6141c8851a8d5c299c86fef inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2eb8826e6ff60a60d033337adab2230 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad2eb8826e6ff60a60d033337adab2230">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a87f06345ddd902d027eb8f792ca8cdb4">IsDepthwiseConvolutionSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ad2eb8826e6ff60a60d033337adab2230 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f6b9c65c6b43b247fcbe492dbfe1567 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9f6b9c65c6b43b247fcbe492dbfe1567">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a1b4b4304198668d3af8e9d0c40d9343d">IsDequantizeSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a9f6b9c65c6b43b247fcbe492dbfe1567 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeae53bda542871e25e739263bca59189 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aeae53bda542871e25e739263bca59189">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsDetectionPostProcessSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;boxEncodings</td></tr>
<tr class="separator:aeae53bda542871e25e739263bca59189 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af98669e014571a58d05d7dd4c6e350b9 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af98669e014571a58d05d7dd4c6e350b9">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsDilatedDepthwiseConvolutionSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:af98669e014571a58d05d7dd4c6e350b9 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a990944ee00fd7671183f61c9005b5d2c inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a990944ee00fd7671183f61c9005b5d2c">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a3378acd6bc867577ee4bf1657945f1b5">IsDivisionSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a990944ee00fd7671183f61c9005b5d2c inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a94556ac3a389a2525a5daff81ac1e2 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9a94556ac3a389a2525a5daff81ac1e2">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsElementwiseUnarySupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a9a94556ac3a389a2525a5daff81ac1e2 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d508799a6e733e4fb6d6cce2115d6e6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5d508799a6e733e4fb6d6cce2115d6e6">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a4539c40ac5e36641f8ec10b88d658db1">IsFakeQuantizationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a5d508799a6e733e4fb6d6cce2115d6e6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8100db86e5543a0f6d0d059c44062285 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8100db86e5543a0f6d0d059c44062285">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsFillSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a8100db86e5543a0f6d0d059c44062285 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa893d0b0faf8970d82c307a3d5c50e0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afa893d0b0faf8970d82c307a3d5c50e0">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a2b6003e1d9226301e4badcac0b53c0ef">IsFloorSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:afa893d0b0faf8970d82c307a3d5c50e0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aade22edeec8bee958aa75d7227db5914 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aade22edeec8bee958aa75d7227db5914">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a0a72d1f8a0d43ee551c7ac654f8816fa">IsFullyConnectedSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:aade22edeec8bee958aa75d7227db5914 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cee8ba4b839d4e22c03860cfcbbe9a4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9cee8ba4b839d4e22c03860cfcbbe9a4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsGatherSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a9cee8ba4b839d4e22c03860cfcbbe9a4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ba01b4153b1afa2d5a9ea610e6df730 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2ba01b4153b1afa2d5a9ea610e6df730">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a3512b2f24950886288c5d01df1488f15">IsInputSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a2ba01b4153b1afa2d5a9ea610e6df730 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a183cc18864272ba200695ab474195b45 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a183cc18864272ba200695ab474195b45">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsInstanceNormalizationSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a183cc18864272ba200695ab474195b45 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11899c4fe1155508ed9902c0ddfd0d20 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a11899c4fe1155508ed9902c0ddfd0d20">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a57862de9b939281d1fe0242a8f04ead9">IsL2NormalizationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a11899c4fe1155508ed9902c0ddfd0d20 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4fab3545c737ef54a0634641c59e112 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac4fab3545c737ef54a0634641c59e112">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsLogicalBinarySupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:ac4fab3545c737ef54a0634641c59e112 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89b872fd1ca25d03c5c976edd587002d inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a89b872fd1ca25d03c5c976edd587002d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsLogicalUnarySupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a89b872fd1ca25d03c5c976edd587002d inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1256283d4a7c08ec93a21ad80e9d7464 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1256283d4a7c08ec93a21ad80e9d7464">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsLogSoftmaxSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a1256283d4a7c08ec93a21ad80e9d7464 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad90882a75bd3c2a1ae207e92618354fb inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad90882a75bd3c2a1ae207e92618354fb">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a2c62d8aa5aeab36458f9ecfa5db1f785">IsLstmSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ad90882a75bd3c2a1ae207e92618354fb inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06d62cc367f573577df892a943f052be inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a06d62cc367f573577df892a943f052be">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a977729771e5ab4263e933f785fa532a6">IsMaximumSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a06d62cc367f573577df892a943f052be inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae50be3397650e1ff69b5f7b1e440dda0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae50be3397650e1ff69b5f7b1e440dda0">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a79698fa98352bffccc6723de84677680">IsMeanSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ae50be3397650e1ff69b5f7b1e440dda0 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6d8e43b3cc40ce6b903508d78fac583 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac6d8e43b3cc40ce6b903508d78fac583">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a1401f21967557c5f70830e06f9b10d4d">IsMemCopySupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ac6d8e43b3cc40ce6b903508d78fac583 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7020dc86e0cf160d45274120408bc4e4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7020dc86e0cf160d45274120408bc4e4">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsMemImportSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a7020dc86e0cf160d45274120408bc4e4 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9d5547ab145d0fd568ac67f5fe1ba6f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af9d5547ab145d0fd568ac67f5fe1ba6f">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a8c24c4caabe9282b927f8777d7ca993f">IsMergeSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:af9d5547ab145d0fd568ac67f5fe1ba6f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a492b981866826d2e045dce285ea01b94 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a492b981866826d2e045dce285ea01b94">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a29bdc2efd75bb437f4292dd9fcb5c89a">IsMinimumSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a492b981866826d2e045dce285ea01b94 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f0ab402e1c977850544e08543894d32 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9f0ab402e1c977850544e08543894d32">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a9624be7520f71d00bfb769d94e0b088b">IsMultiplicationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a9f0ab402e1c977850544e08543894d32 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55e20465ccd90066627577688df6a71f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a55e20465ccd90066627577688df6a71f">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a23d54c0b96b63178811174d5e7b2d328">IsNormalizationSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a55e20465ccd90066627577688df6a71f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dfa7e88158748ab38f0aba8fe0d2f04 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8dfa7e88158748ab38f0aba8fe0d2f04">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a60699e7f86e142739ccddd43c20c4fc0">IsOutputSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;<a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a></td></tr>
<tr class="separator:a8dfa7e88158748ab38f0aba8fe0d2f04 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd25dc18752718ae08e31b643a698123 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afd25dc18752718ae08e31b643a698123">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ae467c9a579c8fb41427227a1c1e1cb4c">IsPadSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:afd25dc18752718ae08e31b643a698123 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc056cbd46c4992064f41733e2c2e1da inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#acc056cbd46c4992064f41733e2c2e1da">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ab4c606b53ae4d03aec1fcfe537c757ef">IsPermuteSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:acc056cbd46c4992064f41733e2c2e1da inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a192171475c11ada67c18d2dbaf1c6ced inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a192171475c11ada67c18d2dbaf1c6ced">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#af4f2d40a67380e91bd7ed0c1bcc4658f">IsPooling2dSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a192171475c11ada67c18d2dbaf1c6ced inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae89e4edadef0440c6a1cf213f79e31fc inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae89e4edadef0440c6a1cf213f79e31fc">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsPooling3dSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ae89e4edadef0440c6a1cf213f79e31fc inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1427d4be196246308aabe04f42bf1a7b inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1427d4be196246308aabe04f42bf1a7b">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a3b4773564c3fd8c88e697ffe0afbe10d">IsPreCompiledSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a1427d4be196246308aabe04f42bf1a7b inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9edaa28e8eb6efad5b382b9017e8980a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9edaa28e8eb6efad5b382b9017e8980a">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a36d55a20000a7b50f7369c3ceeca46bd">IsPreluSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a9edaa28e8eb6efad5b382b9017e8980a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5e0874e21fe0c0bfda8e1db8e0e77cf inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab5e0874e21fe0c0bfda8e1db8e0e77cf">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsQuantizeSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ab5e0874e21fe0c0bfda8e1db8e0e77cf inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11f192f5130908bf197d5a2f84517381 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a11f192f5130908bf197d5a2f84517381">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsQLstmSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a11f192f5130908bf197d5a2f84517381 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ba381e4950fcae873b221a24dd28249 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2ba381e4950fcae873b221a24dd28249">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a237992b29706fe1c1653dae916ea67ef">IsQuantizedLstmSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a2ba381e4950fcae873b221a24dd28249 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd72ead37cfafd013116d862841845bf inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#acd72ead37cfafd013116d862841845bf">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsRankSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:acd72ead37cfafd013116d862841845bf inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5760e0b2cdbb62c70a9ca8821f2e47d2 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5760e0b2cdbb62c70a9ca8821f2e47d2">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#aefa2e47c23dc8faac4b7edb12b5d1c2c">IsReduceSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a5760e0b2cdbb62c70a9ca8821f2e47d2 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09e602a950bb9f1cf594ca39de2b8b23 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a09e602a950bb9f1cf594ca39de2b8b23">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#af5014cbc003abcf201d4372b0012734c">IsReshapeSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a09e602a950bb9f1cf594ca39de2b8b23 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aded9d0d93eb505a62ce28cf68a83a36a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aded9d0d93eb505a62ce28cf68a83a36a">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a0c70182e7d26983945ae75229d607cce">IsResizeSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:aded9d0d93eb505a62ce28cf68a83a36a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79e4921bb9a3e4b76c73b6b00595d829 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a79e4921bb9a3e4b76c73b6b00595d829">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsShapeSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a79e4921bb9a3e4b76c73b6b00595d829 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af56bedf3a6d15e1aefd0b5b646f81d6c inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af56bedf3a6d15e1aefd0b5b646f81d6c">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsSliceSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:af56bedf3a6d15e1aefd0b5b646f81d6c inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00275d31ac00fad6572400a7681e915a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a00275d31ac00fad6572400a7681e915a">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a242f6c2f0376aaacd7d65a6f1498dea9">IsSoftmaxSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a00275d31ac00fad6572400a7681e915a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a150c0be192629ca524f0a872e5ede5a3 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a150c0be192629ca524f0a872e5ede5a3">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a55f4c243c58ee7a084f4a674d3c69948">IsSpaceToBatchNdSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a150c0be192629ca524f0a872e5ede5a3 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a459ebaf286230e8bfe9a004a391ac19a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a459ebaf286230e8bfe9a004a391ac19a">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a32e51e4810a549b4a15d59ba73c64d2c">IsSpaceToDepthSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a459ebaf286230e8bfe9a004a391ac19a inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e4cf8c4c56b95c8c33f07debe6c7e3f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6e4cf8c4c56b95c8c33f07debe6c7e3f">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#adf1e16300483fadf9fd19299ca8a67c4">IsSplitterSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:a6e4cf8c4c56b95c8c33f07debe6c7e3f inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c9eb7a5f4f3d361b00ba705d187c9e6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4c9eb7a5f4f3d361b00ba705d187c9e6">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a1a74a4ecd0f25e6031ef05210a0cfe51">IsSubtractionSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a4c9eb7a5f4f3d361b00ba705d187c9e6 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a451f8304d02e50586a673bcb2cb07839 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a451f8304d02e50586a673bcb2cb07839">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ae8a3ee5f60ae5ae2df15626eaf727ed0">IsSwitchSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input0</td></tr>
<tr class="separator:a451f8304d02e50586a673bcb2cb07839 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab809b1dd2dd077001dfdcfa7f12b95bc inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab809b1dd2dd077001dfdcfa7f12b95bc">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ac6cc8e0bd35d229486fe6d844d88e0d4">IsTransposeConvolution2dSupported</a>(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ab809b1dd2dd077001dfdcfa7f12b95bc inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0ca892ee5fcc069629a915274d6a98d inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad0ca892ee5fcc069629a915274d6a98d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsTransposeSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:ad0ca892ee5fcc069629a915274d6a98d inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcbf96feaeb94bd3d25bd6f64711de86 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afcbf96feaeb94bd3d25bd6f64711de86">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a> (&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsUnidirectionalSequenceLstmSupported(const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;input</td></tr>
<tr class="separator:afcbf96feaeb94bd3d25bd6f64711de86 inherit pub_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_attribs_classarmnn_1_1_i_layer_support"><td colspan="2" onclick="javascript:toggleInherit('pub_attribs_classarmnn_1_1_i_layer_support')"><img src="closed.png" alt="-"/>&#160;Public Attributes inherited from <a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td></tr>
<tr class="memitem:a4e25e081529b7e99e5e454d916ed83fb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a></td></tr>
<tr class="separator:a4e25e081529b7e99e5e454d916ed83fb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a859feaa966620ae0ea88abf5226f2d04 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a></td></tr>
<tr class="separator:a859feaa966620ae0ea88abf5226f2d04 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac75f9a02b051716a0cc1cc0818dfe454 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ac75f9a02b051716a0cc1cc0818dfe454 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab82416560ced17268c6ba4443a3aac5e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a></td></tr>
<tr class="separator:ab82416560ced17268c6ba4443a3aac5e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae84bf10ef48c058969781b1b6a409e3e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae84bf10ef48c058969781b1b6a409e3e">output</a></td></tr>
<tr class="separator:ae84bf10ef48c058969781b1b6a409e3e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae65adc68847fa1162957c412061d433c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae65adc68847fa1162957c412061d433c">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ae65adc68847fa1162957c412061d433c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e5d6597e95614c4736b8bb9c5044653 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5e5d6597e95614c4736b8bb9c5044653">descriptor</a></td></tr>
<tr class="separator:a5e5d6597e95614c4736b8bb9c5044653 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa6f9f63e1cd44519053cb463315260a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aaa6f9f63e1cd44519053cb463315260a">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aaa6f9f63e1cd44519053cb463315260a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a895a8451e0799b95d65caf7ffe0a32d7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">mean</a></td></tr>
<tr class="separator:a895a8451e0799b95d65caf7ffe0a32d7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a903053b422754682265fba0c03d94a52 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">var</a></td></tr>
<tr class="separator:a903053b422754682265fba0c03d94a52 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83a99de40f6bffaa36f0333d04690b2a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">beta</a></td></tr>
<tr class="separator:a83a99de40f6bffaa36f0333d04690b2a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5cccb3233f5eff2119e8acc80cec209 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">gamma</a></td></tr>
<tr class="separator:ab5cccb3233f5eff2119e8acc80cec209 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dd4d7e0f9ef6a222d4485824e3c0a56 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8dd4d7e0f9ef6a222d4485824e3c0a56">descriptor</a></td></tr>
<tr class="separator:a8dd4d7e0f9ef6a222d4485824e3c0a56 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20b9a294f37b4775bc1fabbbd63eb120 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a20b9a294f37b4775bc1fabbbd63eb120">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a20b9a294f37b4775bc1fabbbd63eb120 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac839b39c94dd578e651f516f43c13d2a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac839b39c94dd578e651f516f43c13d2a">descriptor</a></td></tr>
<tr class="separator:ac839b39c94dd578e651f516f43c13d2a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc86745c8b6d5363bc2646244c67a351 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#abc86745c8b6d5363bc2646244c67a351">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:abc86745c8b6d5363bc2646244c67a351 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29ad9d5b956606cb36fd58a434cc2e23 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a29ad9d5b956606cb36fd58a434cc2e23">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a29ad9d5b956606cb36fd58a434cc2e23 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41ded06f4f66acf111aedf45a93cbe15 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a41ded06f4f66acf111aedf45a93cbe15">descriptor</a></td></tr>
<tr class="separator:a41ded06f4f66acf111aedf45a93cbe15 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e9bc16a6e56f65862b22c90306f6e82 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2e9bc16a6e56f65862b22c90306f6e82">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a2e9bc16a6e56f65862b22c90306f6e82 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9cacb12fe0d3a0a6d6cb108f8a65487 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab9cacb12fe0d3a0a6d6cb108f8a65487">descriptor</a></td></tr>
<tr class="separator:ab9cacb12fe0d3a0a6d6cb108f8a65487 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dc09e407b409b429f1c79d5bed8fd90 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8dc09e407b409b429f1c79d5bed8fd90">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a8dc09e407b409b429f1c79d5bed8fd90 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d68e7f2c341fe70292d8c83a4e6cc4c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#ac8b3d64c6b38fe4bc59bd05959577fb6">IsConcatSupported</a>(const std <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3d68e7f2c341fe70292d8c83a4e6cc4c">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a3d68e7f2c341fe70292d8c83a4e6cc4c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7f4c641d6fbd044a923ec4d869f1ce5 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae7f4c641d6fbd044a923ec4d869f1ce5">descriptor</a></td></tr>
<tr class="separator:ae7f4c641d6fbd044a923ec4d869f1ce5 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a631f893f44415523924016ed3f54a661 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a></td></tr>
<tr class="separator:a631f893f44415523924016ed3f54a661 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71cf13fc7f7aeac054919e0c6dcab52e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a></td></tr>
<tr class="separator:a71cf13fc7f7aeac054919e0c6dcab52e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9779892a1f4195b2a3e81d0013b42657 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9779892a1f4195b2a3e81d0013b42657">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a9779892a1f4195b2a3e81d0013b42657 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f5fdd0c0139292c1abc64114844d1f4 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7f5fdd0c0139292c1abc64114844d1f4">descriptor</a></td></tr>
<tr class="separator:a7f5fdd0c0139292c1abc64114844d1f4 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78f86eb2582e7c771b9bd0c6ce50faac inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a78f86eb2582e7c771b9bd0c6ce50faac">weights</a></td></tr>
<tr class="separator:a78f86eb2582e7c771b9bd0c6ce50faac inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae65b1330e0be2c2a52f65cbfb193c872 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae65b1330e0be2c2a52f65cbfb193c872">biases</a></td></tr>
<tr class="separator:ae65b1330e0be2c2a52f65cbfb193c872 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad75429b6fbe944b033b5500e30f8d1f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aad75429b6fbe944b033b5500e30f8d1f">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aad75429b6fbe944b033b5500e30f8d1f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba6f06f1c1fecfbf4aace221f43e3294 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aba6f06f1c1fecfbf4aace221f43e3294">descriptor</a></td></tr>
<tr class="separator:aba6f06f1c1fecfbf4aace221f43e3294 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfa7d2b012931907e00b5b309adc53cd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#acfa7d2b012931907e00b5b309adc53cd">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:acfa7d2b012931907e00b5b309adc53cd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a851286140a843c9e576fdd0da5323397 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a851286140a843c9e576fdd0da5323397">descriptor</a></td></tr>
<tr class="separator:a851286140a843c9e576fdd0da5323397 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b02295b42222ccd14fa4e525b3b209b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2b02295b42222ccd14fa4e525b3b209b">weights</a></td></tr>
<tr class="separator:a2b02295b42222ccd14fa4e525b3b209b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a293d81775f1cf5fc4212960d93f2e663 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a293d81775f1cf5fc4212960d93f2e663">biases</a></td></tr>
<tr class="separator:a293d81775f1cf5fc4212960d93f2e663 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a150b84957a8a590ecad5e8b7aa3419c6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a150b84957a8a590ecad5e8b7aa3419c6">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a150b84957a8a590ecad5e8b7aa3419c6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97cbe8ac8df2e213185599d693079acf inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a97cbe8ac8df2e213185599d693079acf">scores</a></td></tr>
<tr class="separator:a97cbe8ac8df2e213185599d693079acf inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1e19982da8ec2840ca14748c2d8522c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1e19982da8ec2840ca14748c2d8522c">anchors</a></td></tr>
<tr class="separator:ae1e19982da8ec2840ca14748c2d8522c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d0c2ca9c78e81a5e9e0f3db51934782 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d0c2ca9c78e81a5e9e0f3db51934782">detectionBoxes</a></td></tr>
<tr class="separator:a6d0c2ca9c78e81a5e9e0f3db51934782 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56d52f01c9d80f3710ddace11e534434 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a56d52f01c9d80f3710ddace11e534434">detectionClasses</a></td></tr>
<tr class="separator:a56d52f01c9d80f3710ddace11e534434 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8776b306c349e20905e7ae17255b395 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac8776b306c349e20905e7ae17255b395">detectionScores</a></td></tr>
<tr class="separator:ac8776b306c349e20905e7ae17255b395 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b204a7fda471668ab54dc967c5a7917 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3b204a7fda471668ab54dc967c5a7917">numDetections</a></td></tr>
<tr class="separator:a3b204a7fda471668ab54dc967c5a7917 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a730ea10711ec9b130de59852b061d3bd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a730ea10711ec9b130de59852b061d3bd">descriptor</a></td></tr>
<tr class="separator:a730ea10711ec9b130de59852b061d3bd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd1d3d219373a3b773be1bd29a03840f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_detection_post_process_descriptor.xhtml">DetectionPostProcessDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afd1d3d219373a3b773be1bd29a03840f">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:afd1d3d219373a3b773be1bd29a03840f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75e6a2fd11b81665527cef162e51d995 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a75e6a2fd11b81665527cef162e51d995">descriptor</a></td></tr>
<tr class="separator:a75e6a2fd11b81665527cef162e51d995 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0882060fd5b0aa781212b94f73dfe63c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0882060fd5b0aa781212b94f73dfe63c">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a0882060fd5b0aa781212b94f73dfe63c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af044b1f8e48ba25b3a7573aa9a67d10c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af044b1f8e48ba25b3a7573aa9a67d10c">descriptor</a></td></tr>
<tr class="separator:af044b1f8e48ba25b3a7573aa9a67d10c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac48e5137a5a809909297c5ae3b882ea6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structarmnn_1_1_fake_quantization_descriptor.xhtml">FakeQuantizationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac48e5137a5a809909297c5ae3b882ea6">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ac48e5137a5a809909297c5ae3b882ea6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad57391891b17ad49107ae84c8ee5a69e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad57391891b17ad49107ae84c8ee5a69e">descriptor</a></td></tr>
<tr class="separator:ad57391891b17ad49107ae84c8ee5a69e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58540f633cf1bab7b2bfea01169383c4 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a58540f633cf1bab7b2bfea01169383c4">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a58540f633cf1bab7b2bfea01169383c4 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98ace67e4b8ff91da426a011e7b1630b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a98ace67e4b8ff91da426a011e7b1630b">weights</a></td></tr>
<tr class="separator:a98ace67e4b8ff91da426a011e7b1630b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada7c27be0ec37a4c98459164e00cd618 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ada7c27be0ec37a4c98459164e00cd618">biases</a></td></tr>
<tr class="separator:ada7c27be0ec37a4c98459164e00cd618 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85d6ba46a89488436d0fff881f2370ba inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a85d6ba46a89488436d0fff881f2370ba">descriptor</a></td></tr>
<tr class="separator:a85d6ba46a89488436d0fff881f2370ba inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a389e8924fffa57dd73ffead6fde9d1a9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a389e8924fffa57dd73ffead6fde9d1a9">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a389e8924fffa57dd73ffead6fde9d1a9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10b6c65d39b282401448aff724037aae inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a10b6c65d39b282401448aff724037aae">descriptor</a></td></tr>
<tr class="separator:a10b6c65d39b282401448aff724037aae inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a435bee1e83fa5d5fb2753525f6ff5162 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a435bee1e83fa5d5fb2753525f6ff5162">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a435bee1e83fa5d5fb2753525f6ff5162 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81b3c2919b174e2d6d4a2217e14858c9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a81b3c2919b174e2d6d4a2217e14858c9">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a81b3c2919b174e2d6d4a2217e14858c9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a939cab6010bf54769aadbbbe1a2ccb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7a939cab6010bf54769aadbbbe1a2ccb">descriptor</a></td></tr>
<tr class="separator:a7a939cab6010bf54769aadbbbe1a2ccb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa459040aa42210d103192b224b6b5d79 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa459040aa42210d103192b224b6b5d79">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aa459040aa42210d103192b224b6b5d79 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac53977992deddc04c00092e967aaf0d7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac53977992deddc04c00092e967aaf0d7">descriptor</a></td></tr>
<tr class="separator:ac53977992deddc04c00092e967aaf0d7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31130b6d97bbc90b428a410a03a3bf06 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a31130b6d97bbc90b428a410a03a3bf06">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a31130b6d97bbc90b428a410a03a3bf06 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bee7ba1901580222cded96f938ac8df inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3bee7ba1901580222cded96f938ac8df">descriptor</a></td></tr>
<tr class="separator:a3bee7ba1901580222cded96f938ac8df inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af20317b332f276b5c4c4ff755fe61016 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#af20317b332f276b5c4c4ff755fe61016">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:af20317b332f276b5c4c4ff755fe61016 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7c38b1f3b73fb1b67b0928c9cd390a3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad7c38b1f3b73fb1b67b0928c9cd390a3">descriptor</a></td></tr>
<tr class="separator:ad7c38b1f3b73fb1b67b0928c9cd390a3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e509e880a10237c69d74ca18a276706 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9e509e880a10237c69d74ca18a276706">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a9e509e880a10237c69d74ca18a276706 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a01de4e3851a25f2df77897fb8f7083 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a></td></tr>
<tr class="separator:a5a01de4e3851a25f2df77897fb8f7083 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec04a02758804219fb461623464a8e96 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a></td></tr>
<tr class="separator:aec04a02758804219fb461623464a8e96 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f6f59c4e91c7c37d9a119d615093ed3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">scratchBuffer</a></td></tr>
<tr class="separator:a4f6f59c4e91c7c37d9a119d615093ed3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44eb2a514bddb31fe20f9e4f04159c9f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a></td></tr>
<tr class="separator:a44eb2a514bddb31fe20f9e4f04159c9f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1ee2d524d4252bffc0ed67e75882952 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a></td></tr>
<tr class="separator:ae1ee2d524d4252bffc0ed67e75882952 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa930d13649875f8801e323a212445a16 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa930d13649875f8801e323a212445a16">output</a></td></tr>
<tr class="separator:aa930d13649875f8801e323a212445a16 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd4dba56c2ef1c650c48c525cb56f5c0 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#acd4dba56c2ef1c650c48c525cb56f5c0">descriptor</a></td></tr>
<tr class="separator:acd4dba56c2ef1c650c48c525cb56f5c0 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca7a974c8803242968a8d6540275264a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a></td></tr>
<tr class="separator:aca7a974c8803242968a8d6540275264a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52c5081cfb456749136ad9a392f9ea3a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a52c5081cfb456749136ad9a392f9ea3a">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a52c5081cfb456749136ad9a392f9ea3a inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f04d51318166c899ede06bb45850bbe inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9f04d51318166c899ede06bb45850bbe">descriptor</a></td></tr>
<tr class="separator:a9f04d51318166c899ede06bb45850bbe inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab97ebc2c58cc8f57e52a54eb1413c358 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab97ebc2c58cc8f57e52a54eb1413c358">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ab97ebc2c58cc8f57e52a54eb1413c358 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a076bc5e2bfb7bf8fb352b4b8fb8e3c2e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a076bc5e2bfb7bf8fb352b4b8fb8e3c2e">ouput</a></td></tr>
<tr class="separator:a076bc5e2bfb7bf8fb352b4b8fb8e3c2e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcd0960fc6f0018d8232b054dab379d9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afcd0960fc6f0018d8232b054dab379d9">descriptor</a></td></tr>
<tr class="separator:afcd0960fc6f0018d8232b054dab379d9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35711aefa941f96db71b995722aa39eb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a35711aefa941f96db71b995722aa39eb">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a35711aefa941f96db71b995722aa39eb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ce43368e08d80c272b521c463f11e7b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9ce43368e08d80c272b521c463f11e7b">descriptor</a></td></tr>
<tr class="separator:a9ce43368e08d80c272b521c463f11e7b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9befa35b9485c78ddba2f9e710eed05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad9befa35b9485c78ddba2f9e710eed05">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ad9befa35b9485c78ddba2f9e710eed05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9617f94c779168d6208c2732d50b701e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9617f94c779168d6208c2732d50b701e">descriptor</a></td></tr>
<tr class="separator:a9617f94c779168d6208c2732d50b701e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa844a2559a5c5a13520b3c5f4dd21ba3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa844a2559a5c5a13520b3c5f4dd21ba3">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aa844a2559a5c5a13520b3c5f4dd21ba3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ffc76ae21b0e36f386a580678379708 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5ffc76ae21b0e36f386a580678379708">descriptor</a></td></tr>
<tr class="separator:a5ffc76ae21b0e36f386a580678379708 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fa61de2e37218b13b6065132be433eb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6fa61de2e37218b13b6065132be433eb">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a6fa61de2e37218b13b6065132be433eb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2de917e7d1e41ef25c94aa699ce7019 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad2de917e7d1e41ef25c94aa699ce7019">descriptor</a></td></tr>
<tr class="separator:ad2de917e7d1e41ef25c94aa699ce7019 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d1114dd734cd87b78a87148e3eae2d3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a4d1114dd734cd87b78a87148e3eae2d3">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a4d1114dd734cd87b78a87148e3eae2d3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bea23d979ad4bfdfda7f2f96be55ca7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a0bea23d979ad4bfdfda7f2f96be55ca7">descriptor</a></td></tr>
<tr class="separator:a0bea23d979ad4bfdfda7f2f96be55ca7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e0dcfaa4069d35d315fbdcc8a0ec2ff inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structarmnn_1_1_pre_compiled_descriptor.xhtml">PreCompiledDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2e0dcfaa4069d35d315fbdcc8a0ec2ff">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a2e0dcfaa4069d35d315fbdcc8a0ec2ff inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a218e2ebb5babb8323688906b8997eafb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">alpha</a></td></tr>
<tr class="separator:a218e2ebb5babb8323688906b8997eafb inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b09834cc88bb4156e291c37bd2434ff inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a></td></tr>
<tr class="separator:a5b09834cc88bb4156e291c37bd2434ff inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5e0e3fb8a59107ac3366028a057db12 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a></td></tr>
<tr class="separator:ad5e0e3fb8a59107ac3366028a057db12 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff8d75a6c22d819b2f00d22f7a8df868 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aff8d75a6c22d819b2f00d22f7a8df868">outputStateOut</a></td></tr>
<tr class="separator:aff8d75a6c22d819b2f00d22f7a8df868 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7369eda0b60ec397afbecbc1f1cc686e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7369eda0b60ec397afbecbc1f1cc686e">cellStateOut</a></td></tr>
<tr class="separator:a7369eda0b60ec397afbecbc1f1cc686e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc8db3bfb13b523f94d8df0917940ba9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afc8db3bfb13b523f94d8df0917940ba9">output</a></td></tr>
<tr class="separator:afc8db3bfb13b523f94d8df0917940ba9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae88892fd128211c5c66f6b875f53e634 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ae88892fd128211c5c66f6b875f53e634">descriptor</a></td></tr>
<tr class="separator:ae88892fd128211c5c66f6b875f53e634 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a671c5ab0aaf443061ecd29858eb0c27e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a671c5ab0aaf443061ecd29858eb0c27e">paramsInfo</a></td></tr>
<tr class="separator:a671c5ab0aaf443061ecd29858eb0c27e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ae68a93565a313b372c3454a281a30e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9ae68a93565a313b372c3454a281a30e">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a9ae68a93565a313b372c3454a281a30e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad996e1751e73c950760b7f2372a5f1b7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad996e1751e73c950760b7f2372a5f1b7">previousCellStateIn</a></td></tr>
<tr class="separator:ad996e1751e73c950760b7f2372a5f1b7 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee968b67d55019bc399fd9305382c946 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aee968b67d55019bc399fd9305382c946">previousOutputIn</a></td></tr>
<tr class="separator:aee968b67d55019bc399fd9305382c946 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab23b6d2020ea2dc447e70ae7a899b05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aab23b6d2020ea2dc447e70ae7a899b05">cellStateOut</a></td></tr>
<tr class="separator:aab23b6d2020ea2dc447e70ae7a899b05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c883c1fe0ab4c6e0bb0cf1973e7bb86 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9c883c1fe0ab4c6e0bb0cf1973e7bb86">output</a></td></tr>
<tr class="separator:a9c883c1fe0ab4c6e0bb0cf1973e7bb86 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6538a383d19e83aabba1aa625f608a8b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6538a383d19e83aabba1aa625f608a8b">paramsInfo</a></td></tr>
<tr class="separator:a6538a383d19e83aabba1aa625f608a8b inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c3d94577f10865f35c9e8a75b456e29 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6c3d94577f10865f35c9e8a75b456e29">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a6c3d94577f10865f35c9e8a75b456e29 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a286560bd886ad2694d524d82bc6691 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3a286560bd886ad2694d524d82bc6691">descriptor</a></td></tr>
<tr class="separator:a3a286560bd886ad2694d524d82bc6691 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22417051704e7e34a77b2aa84f81f447 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a22417051704e7e34a77b2aa84f81f447">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a22417051704e7e34a77b2aa84f81f447 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8925984b66dd710f605a0787ec21a98c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a8925984b66dd710f605a0787ec21a98c">descriptor</a></td></tr>
<tr class="separator:a8925984b66dd710f605a0787ec21a98c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab56e5339be7133a62ac75257eb9ed457 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab56e5339be7133a62ac75257eb9ed457">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ab56e5339be7133a62ac75257eb9ed457 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad80fdfd6b8520aad7f3b4e642770bb76 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad80fdfd6b8520aad7f3b4e642770bb76">descriptor</a></td></tr>
<tr class="separator:ad80fdfd6b8520aad7f3b4e642770bb76 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa073ddc855c3a77e9abc6e2bcf385682 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa073ddc855c3a77e9abc6e2bcf385682">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aa073ddc855c3a77e9abc6e2bcf385682 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3637b7ecf8b3ac293667439e68ca5e05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a3637b7ecf8b3ac293667439e68ca5e05">descriptor</a></td></tr>
<tr class="separator:a3637b7ecf8b3ac293667439e68ca5e05 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec1ad6717dc6152700644e22663ae529 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec1ad6717dc6152700644e22663ae529">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aec1ad6717dc6152700644e22663ae529 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a052da8f6981ac7c0983b15d6fd255b67 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a052da8f6981ac7c0983b15d6fd255b67">descriptor</a></td></tr>
<tr class="separator:a052da8f6981ac7c0983b15d6fd255b67 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec2b0f9142a47b16e695d1e4c43b78c5 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aec2b0f9142a47b16e695d1e4c43b78c5">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aec2b0f9142a47b16e695d1e4c43b78c5 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99573c8d31f135ab27d42a2026b19dcd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a99573c8d31f135ab27d42a2026b19dcd">descriptor</a></td></tr>
<tr class="separator:a99573c8d31f135ab27d42a2026b19dcd inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3231c01123af9b82028f8d82295f4df inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ad3231c01123af9b82028f8d82295f4df">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ad3231c01123af9b82028f8d82295f4df inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33fc1676a91f2295365e18b00311a7f1 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a33fc1676a91f2295365e18b00311a7f1">descriptor</a></td></tr>
<tr class="separator:a33fc1676a91f2295365e18b00311a7f1 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab39984d1114858f962d5d770640fa5c6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab39984d1114858f962d5d770640fa5c6">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ab39984d1114858f962d5d770640fa5c6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a311602de6b1e53b4feb3b8a37a433f44 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a></td></tr>
<tr class="separator:a311602de6b1e53b4feb3b8a37a433f44 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9973ef4f89338f01171369b4fb64cf93 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &gt; const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9973ef4f89338f01171369b4fb64cf93">descriptor</a></td></tr>
<tr class="separator:a9973ef4f89338f01171369b4fb64cf93 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6be296df135df66f2a0f81ef6696bcc inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &gt; const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ab6be296df135df66f2a0f81ef6696bcc">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ab6be296df135df66f2a0f81ef6696bcc inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ba70d562aa15f92d6c313257bad013f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a1ef301853035778cebf30782cae7b86d">IsStackSupported</a>(const std <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsStandInSupported(const std const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1ba70d562aa15f92d6c313257bad013f">output</a></td></tr>
<tr class="separator:a1ba70d562aa15f92d6c313257bad013f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c5822222a1b990385e835855059cf82 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a1ef301853035778cebf30782cae7b86d">IsStackSupported</a>(const std <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsStandInSupported(const std const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a1c5822222a1b990385e835855059cf82">descriptor</a></td></tr>
<tr class="separator:a1c5822222a1b990385e835855059cf82 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeeee84a5c55c63467d9a6063e6873d5d inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool <a class="el" href="namespacearmnn.xhtml#a1ef301853035778cebf30782cae7b86d">IsStackSupported</a>(const std <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a6d593367be03c4ef23ba028caec5603d">ARMNN_DEPRECATED_MSG_REMOVAL_DATE</a>(&quot;This method is deprecated. &quot; &quot;Use ABI Stable <a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2c1b415a54db4f8e37940a0c87779b95">IsLayerSupported</a> accepting <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> argument instead.&quot;, &quot;23.08&quot;) virtual bool IsStandInSupported(const std const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aeeee84a5c55c63467d9a6063e6873d5d">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aeeee84a5c55c63467d9a6063e6873d5d inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c2243c4c3b723129082dd38daf0387f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a5c2243c4c3b723129082dd38daf0387f">output0</a></td></tr>
<tr class="separator:a5c2243c4c3b723129082dd38daf0387f inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53e5afe9ffb176f1f3c98a4222ceb2b9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a53e5afe9ffb176f1f3c98a4222ceb2b9">output1</a></td></tr>
<tr class="separator:a53e5afe9ffb176f1f3c98a4222ceb2b9 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3a9012fc339e9bfc9e5e3d84805653e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aa3a9012fc339e9bfc9e5e3d84805653e">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:aa3a9012fc339e9bfc9e5e3d84805653e inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed34ce46eb939133d71d4f47ee39df22 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aed34ce46eb939133d71d4f47ee39df22">descriptor</a></td></tr>
<tr class="separator:aed34ce46eb939133d71d4f47ee39df22 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc7d09b6ee3bd1d5d07ff8b2f3a16ec3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#afc7d09b6ee3bd1d5d07ff8b2f3a16ec3">weights</a></td></tr>
<tr class="separator:afc7d09b6ee3bd1d5d07ff8b2f3a16ec3 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2daef2df1f67976f598368fe21ac9154 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2daef2df1f67976f598368fe21ac9154">biases</a></td></tr>
<tr class="separator:a2daef2df1f67976f598368fe21ac9154 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f103a30a0d120c7984c507ceb20b2d6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a2f103a30a0d120c7984c507ceb20b2d6">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a2f103a30a0d120c7984c507ceb20b2d6 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cbc317bc6d7c12e54f852cd20636840 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a7cbc317bc6d7c12e54f852cd20636840">descriptor</a></td></tr>
<tr class="separator:a7cbc317bc6d7c12e54f852cd20636840 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0046a9c32fc1066cc22eaaee8876d41 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#ac0046a9c32fc1066cc22eaaee8876d41">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:ac0046a9c32fc1066cc22eaaee8876d41 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88889983d2422e584ae1ca5b2385ec4c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a88889983d2422e584ae1ca5b2385ec4c">descriptor</a></td></tr>
<tr class="separator:a88889983d2422e584ae1ca5b2385ec4c inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a540c4a7d2defc036c939d2caaaefffce inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a540c4a7d2defc036c939d2caaaefffce">paramsInfo</a></td></tr>
<tr class="separator:a540c4a7d2defc036c939d2caaaefffce inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a145611e87292ec30a1458ac5ae426787 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a145611e87292ec30a1458ac5ae426787">reasonIfUnsupported</a> = <a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()) const</td></tr>
<tr class="separator:a145611e87292ec30a1458ac5ae426787 inherit pub_attribs_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classarmnn_1_1_i_layer_support"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn_1_1_i_layer_support')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn_1_1_i_layer_support.xhtml">ILayerSupport</a></td></tr>
<tr class="memitem:aab2a487bc88047443d8a0f87c3c40b8d inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#aab2a487bc88047443d8a0f87c3c40b8d">ILayerSupport</a> ()</td></tr>
<tr class="separator:aab2a487bc88047443d8a0f87c3c40b8d inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e7f4f28576904804cd759e49173beeb inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_layer_support.xhtml#a9e7f4f28576904804cd759e49173beeb">~ILayerSupport</a> ()</td></tr>
<tr class="separator:a9e7f4f28576904804cd759e49173beeb inherit pro_methods_classarmnn_1_1_i_layer_support"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00014">14</a> of file <a class="el" href="_neon_layer_support_8hpp_source.xhtml">NeonLayerSupport.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a45ecbb863cc8ef62d09bd7749089e0f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45ecbb863cc8ef62d09bd7749089e0f8">&#9670;&nbsp;</a></span>NeonLayerSupport() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml">NeonLayerSupport</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a> &amp;&#160;</td>
          <td class="paramname"><em>modelContextPtr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00159">159</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    : m_ModelContextPtr(modelContextPtr)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;{</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a0e8bdd2741997b0cdc329cbfcaeebf93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e8bdd2741997b0cdc329cbfcaeebf93">&#9670;&nbsp;</a></span>NeonLayerSupport() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml">NeonLayerSupport</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00164">164</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    : m_ModelContextPtr(<span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;{</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a19528981c1519ecc64cc4a70b12ce8d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19528981c1519ecc64cc4a70b12ce8d3">&#9670;&nbsp;</a></span>~NeonLayerSupport()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn_1_1_neon_layer_support.xhtml">NeonLayerSupport</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8hpp_source.xhtml#l00020">20</a> of file <a class="el" href="_neon_layer_support_8hpp_source.xhtml">NeonLayerSupport.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{}</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="acd148b61eab388a9313c61f4c7a96c4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd148b61eab388a9313c61f4c7a96c4b">&#9670;&nbsp;</a></span>IsActivationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsActivationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00719">719</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;{</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a46495807633a01d826851e1cb498f071">NeonActivationWorkloadValidate</a>,</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                                   input,</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_neon_activation_workload_8cpp_source.xhtml#l00017">armnn::NeonActivationWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a06a955e172cf18898d966eab7383efa1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06a955e172cf18898d966eab7383efa1">&#9670;&nbsp;</a></span>IsAdditionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsAdditionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00732">732</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;{</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a1b03e82a1a53b686aedea3734b2fb957">NeonAdditionWorkloadValidate</a>,</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                                   input0,</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_neon_addition_workload_8cpp_source.xhtml#l00020">armnn::NeonAdditionWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a7224fbfbc4c5a2b3710543e3f574171f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7224fbfbc4c5a2b3710543e3f574171f">&#9670;&nbsp;</a></span>IsArgMinMaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsArgMinMaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00745">745</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;{</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a61d1f39297fec6e3062e4047dc5f236e">NeonArgMinMaxWorkloadValidate</a>,</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                                   input,</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_arg_min_max_workload_8cpp_source.xhtml#l00031">armnn::NeonArgMinMaxWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a22cfc1d5f68bd32db0aa126e8fd9e615"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22cfc1d5f68bd32db0aa126e8fd9e615">&#9670;&nbsp;</a></span>IsBatchMatMulSupported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsBatchMatMulSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>inputY</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_mat_mul_descriptor.xhtml">BatchMatMulDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00757">757</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;{</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTENEON_ENABLED)</span></div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr)</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    {</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        <span class="keywordflow">if</span> (m_ModelContextPtr.get() != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        {</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span>NeonBackendModelContext*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;            <span class="keywordflow">if</span> (modelOptions)</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;            {</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;                isFastMathEnabled = modelOptions-&gt;IsFastMathEnabled();</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;            }</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        }</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    }</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a52cdeda888e3ecf0dbebb533ba0856f1">NeonBatchMatMulValidate</a>,</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                                   inputX,</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                                   inputY,</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                                   isFastMathEnabled,</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_backend_model_context_8cpp_source.xhtml#l00053">NeonBackendModelContext::IsFastMathEnabled()</a>, <a class="el" href="_neon_batch_mat_mul_workload_8cpp_source.xhtml#l00017">armnn::NeonBatchMatMulValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a450ddf4b4335cb37e07e3b0171b00096"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a450ddf4b4335cb37e07e3b0171b00096">&#9670;&nbsp;</a></span>IsBatchNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsBatchNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00787">787</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;{</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ac1be1c9a317b23b5684c83af59fb2c96">NeonBatchNormalizationValidate</a>,</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                                   input,</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">mean</a>,</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">var</a>,</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">beta</a>,</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">gamma</a>,</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00065">ILayerSupport::beta</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00066">ILayerSupport::gamma</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00063">ILayerSupport::mean</a>, <a class="el" href="_neon_batch_normalization_workload_8cpp_source.xhtml#l00024">armnn::NeonBatchNormalizationValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00064">ILayerSupport::var</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a30cbe4bc4e20ae9b2aac66a108088919"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30cbe4bc4e20ae9b2aac66a108088919">&#9670;&nbsp;</a></span>IsBatchToSpaceNdSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsBatchToSpaceNdSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00808">808</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;{</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aad5f7f0fcd2dbb0aad7016ff984e7cc6">NeonBatchToSpaceNdWorkloadValidate</a>,</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                                   input,</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_batch_to_space_nd_workload_8cpp_source.xhtml#l00020">armnn::NeonBatchToSpaceNdWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ac680aa10b0a3768da4c23e691881b5ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac680aa10b0a3768da4c23e691881b5ea">&#9670;&nbsp;</a></span>IsCastSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCastSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00820">820</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;{</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a3ab69cec1cab301e096a2830f65a36ec">NeonCastValidate</a>,</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                                   input,</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_cast_workload_8cpp_source.xhtml#l00019">armnn::NeonCastValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a1362503332222029f9d73d40520f35bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1362503332222029f9d73d40520f35bd">&#9670;&nbsp;</a></span>IsChannelShuffleSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsChannelShuffleSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00830">830</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;{</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a2ee21869ffad00d6344afffb0a9baba1">NeonChannelShuffleValidate</a>,</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;                                   input,</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_channel_shuffle_workload_8cpp_source.xhtml#l00017">armnn::NeonChannelShuffleValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a387c184902d9f09d35bb22b076cb245d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a387c184902d9f09d35bb22b076cb245d">&#9670;&nbsp;</a></span>IsComparisonSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsComparisonSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00842">842</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;{</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160; </div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae412e8e64d6a6dde3ace908b59c29c06">NeonComparisonWorkloadValidate</a>,</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                                   input0,</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_neon_comparison_workload_8cpp_source.xhtml#l00016">armnn::NeonComparisonWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="af6465e7a85f4ef0013c7d7161cd07a4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6465e7a85f4ef0013c7d7161cd07a4d">&#9670;&nbsp;</a></span>IsConcatSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConcatSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00857">857</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;{</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &lt;= <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.GetConcatAxis())</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    {</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a8c88a8a91827e9ccc3cf3ce6b14fcd17">SetValueChecked</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, <span class="stringliteral">&quot;Neon Concat: Concat axis &gt; Number of dimensions.&quot;</span>);</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    }</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160; </div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> concatInnerAxis = (<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() - <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.GetConcatAxis()) - 1;</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <span class="keywordflow">if</span>(concatInnerAxis &lt; 3) <span class="comment">// Width, height, or channels</span></div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    {</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;        <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a3653413d74a951674c88db372d217baa">NeonConcatWorkloadValidate</a>,</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;                                       inputs,</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    }</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (concatInnerAxis == 3)</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    {</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; input : inputs)</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;        {</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;            <span class="keywordflow">if</span> (input &amp;&amp; !<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a22f377fc4e10dc1773a3f979061e85f1">IsTypeSpaceMatch</a>(*input)) <span class="comment">// Cannot use sub-tensors if the types are not same space</span></div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;            {</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;                <a class="code" href="namespacearmnn.xhtml#a8c88a8a91827e9ccc3cf3ce6b14fcd17">SetValueChecked</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, <span class="stringliteral">&quot;Neon Concat: Types and quantization parameters must match.&quot;</span>);</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;            }</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;        }</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>; <span class="comment">// Sub-tensors support concat along batch</span></div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    }</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    <span class="keywordflow">else</span> <span class="comment">// &gt; 4 dimensions not supported.</span></div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    {</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a8c88a8a91827e9ccc3cf3ce6b14fcd17">SetValueChecked</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, <span class="stringliteral">&quot;Neon Concat: Maximum of 4 dimensions supported.&quot;</span>);</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    }</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00432">TensorInfo::IsTypeSpaceMatch()</a>, <a class="el" href="_neon_concat_workload_8cpp_source.xhtml#l00027">armnn::NeonConcatWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_layer_support_common_8hpp_source.xhtml#l00017">armnn::SetValueChecked()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a57aee9aba2e2ad5d0bd9f65acd05b6e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57aee9aba2e2ad5d0bd9f65acd05b6e4">&#9670;&nbsp;</a></span>IsConstantSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConstantSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00896">896</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;{</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#afb681fd9b8afe0b236d51b6c868ae660">NeonConstantWorkloadValidate</a>,</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_constant_workload_8cpp_source.xhtml#l00020">armnn::NeonConstantWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a95dac0c44b7e759694a97778bfbea954"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95dac0c44b7e759694a97778bfbea954">&#9670;&nbsp;</a></span>IsConvertFp16ToFp32Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvertFp16ToFp32Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00904">904</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;{</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a3d5735d5be6c2acce502ba572cd47d7e">NeonConvertFp16ToFp32WorkloadValidate</a>,</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;                                   input,</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00019">armnn::NeonConvertFp16ToFp32WorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a5f9272cdf0224364e1bb9b47efe4130a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f9272cdf0224364e1bb9b47efe4130a">&#9670;&nbsp;</a></span>IsConvertFp32ToFp16Supported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvertFp32ToFp16Supported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00914">914</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;{</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a940d1c3e8ff3949cb5f230637fb8656c">NeonConvertFp32ToFp16WorkloadValidate</a>,</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;                                   input,</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00021">armnn::NeonConvertFp32ToFp16WorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a4bd807090f4cb45bbfaa9c67e49532f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bd807090f4cb45bbfaa9c67e49532f5">&#9670;&nbsp;</a></span>IsConvolution2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvolution2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00924">924</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;{</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTENEON_ENABLED)</span></div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr)</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    {</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;        <span class="keywordflow">if</span> (m_ModelContextPtr.get() != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;        {</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;            <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span>NeonBackendModelContext*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;            <span class="keywordflow">if</span> (modelOptions)</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;            {</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                isFastMathEnabled = modelOptions-&gt;IsFastMathEnabled();</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;            }</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;        }</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    }</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160; </div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a45691b0c4a46c239b4986cfed95de13b">NeonConvolution2dWorkloadValidate</a>,</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                                   input,</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                                   isFastMathEnabled,</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00128">ILayerSupport::biases</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_backend_model_context_8cpp_source.xhtml#l00053">NeonBackendModelContext::IsFastMathEnabled()</a>, <a class="el" href="_neon_convolution2d_workload_8cpp_source.xhtml#l00024">armnn::NeonConvolution2dWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00127">ILayerSupport::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="abe850b2a5be4ce4617cb51ceb5344756"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe850b2a5be4ce4617cb51ceb5344756">&#9670;&nbsp;</a></span>IsConvolution3dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsConvolution3dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00957">957</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;{</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;    <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTENEON_ENABLED)</span></div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr)</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    {</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;        <span class="keywordflow">if</span> (m_ModelContextPtr.get() != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        {</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;            <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span>NeonBackendModelContext*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;            <span class="keywordflow">if</span> (modelOptions)</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;            {</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;                isFastMathEnabled = modelOptions-&gt;IsFastMathEnabled();</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;            }</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;        }</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    }</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160; </div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#acbb4d7b86eb01bb437230e1586b9aeb4">NeonConvolution3dWorkloadValidate</a>,</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;                                   input,</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;                                   isFastMathEnabled,</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00128">ILayerSupport::biases</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_backend_model_context_8cpp_source.xhtml#l00053">NeonBackendModelContext::IsFastMathEnabled()</a>, <a class="el" href="_neon_convolution3d_workload_8cpp_source.xhtml#l00024">armnn::NeonConvolution3dWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00127">ILayerSupport::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a84f23a37f7fd69269f072e114b7f0afb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84f23a37f7fd69269f072e114b7f0afb">&#9670;&nbsp;</a></span>IsDepthToSpaceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDepthToSpaceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a3647f60510bc8ddaced01c51b0ee8714">DepthToSpaceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00990">990</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;{</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a116d88067bf98ce9858ab73e68f605f9">NeonDepthToSpaceWorkloadValidate</a>,</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;                                   input,</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_depth_to_space_workload_8cpp_source.xhtml#l00019">armnn::NeonDepthToSpaceWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a56c4df05190f0f465e8501ae831af234"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56c4df05190f0f465e8501ae831af234">&#9670;&nbsp;</a></span>IsDepthwiseConvolutionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDepthwiseConvolutionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01002">1002</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;{</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a63d684b26fb838b22123490d780bce08">NeonDepthwiseConvolutionWorkloadValidate</a>,</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;                                   input,</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00128">ILayerSupport::biases</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_depthwise_convolution_workload_8cpp_source.xhtml#l00029">armnn::NeonDepthwiseConvolutionWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00127">ILayerSupport::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a866844299dc03c65ca41be5990bf19e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a866844299dc03c65ca41be5990bf19e8">&#9670;&nbsp;</a></span>IsDequantizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDequantizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01019">1019</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;{</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#acefede7cc57c71ea4cfe1c888bb413e0">NeonDequantizeWorkloadValidate</a>,</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;                                   input,</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_dequantize_workload_8cpp_source.xhtml#l00022">armnn::NeonDequantizeWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ae3b8e44b40a9c02ef372081ee2e454a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3b8e44b40a9c02ef372081ee2e454a1">&#9670;&nbsp;</a></span>IsDilatedDepthwiseConvolutionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDilatedDepthwiseConvolutionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reason</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01029">1029</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;{</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a63d684b26fb838b22123490d780bce08">NeonDepthwiseConvolutionWorkloadValidate</a>,</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;                                   input,</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00128">ILayerSupport::biases</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_depthwise_convolution_workload_8cpp_source.xhtml#l00029">armnn::NeonDepthwiseConvolutionWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00127">ILayerSupport::weights</a>.</p>

</div>
</div>
<a id="ad4217d27bcb41e14cd023552004b21a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4217d27bcb41e14cd023552004b21a3">&#9670;&nbsp;</a></span>IsDivisionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDivisionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01300">1300</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;{</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a65c912bfcf02b3096f36caf21fa175d0">NeonDivisionWorkloadValidate</a>,</div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;                                   input0,</div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_neon_division_workload_8cpp_source.xhtml#l00018">armnn::NeonDivisionWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="aeec02af89681b711706472de7be52871"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeec02af89681b711706472de7be52871">&#9670;&nbsp;</a></span>IsElementwiseUnarySupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsElementwiseUnarySupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01046">1046</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;{</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.m_Operation)</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;    {</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a1e34af023adeb7d5f484f8eb4b9826b6">UnaryOperation::Abs</a>:</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#afc773aec6f845adc0cc547ce475dfe3f">NeonAbsWorkloadValidate</a>,</div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;                                           input,</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">UnaryOperation::Exp</a>:</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aec5669eb9285cbca1ee6c7e1dd7bcf6a">NeonExpWorkloadValidate</a>,</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;                                           input,</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">UnaryOperation::LogicalNot</a>:</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#af4f8e11ae5715973420a82d841dfa676">NeonLogicalNotWorkloadValidate</a>,</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;                                           input,</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;       <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">UnaryOperation::Log</a>:</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ad1991a3499a991b1fdd71d918f793f13">NeonLogWorkloadValidate</a>,</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;                                           input,</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">UnaryOperation::Neg</a>:</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7f955750d00cdcae6038f07cc73686ea">NeonNegWorkloadValidate</a>,</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;                                           input,</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">UnaryOperation::Rsqrt</a>:</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aa7d1b5e38aa8cb731519ff12e2a73350">NeonRsqrtWorkloadValidate</a>,</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;                                           input,</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">UnaryOperation::Sin</a>:</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#af873a38f5251d348f37f0e94a2adc400">NeonSinWorkloadValidate</a>,</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;                                           input,</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8aae77f3ad25595e35b327334d89410054">UnaryOperation::Sqrt</a>:</div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a5fadc539a1a3c35c4a6138bf6e970e4c">NeonSqrtWorkloadValidate</a>,</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;                                           input,</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;    }</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a1e34af023adeb7d5f484f8eb4b9826b6">armnn::Abs</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">armnn::Exp</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">armnn::Log</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">armnn::LogicalNot</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">armnn::Neg</a>, <a class="el" href="_neon_abs_workload_8cpp_source.xhtml#l00017">armnn::NeonAbsWorkloadValidate()</a>, <a class="el" href="_neon_exp_workload_8cpp_source.xhtml#l00017">armnn::NeonExpWorkloadValidate()</a>, <a class="el" href="_neon_logical_not_workload_8cpp_source.xhtml#l00019">armnn::NeonLogicalNotWorkloadValidate()</a>, <a class="el" href="_neon_log_workload_8cpp_source.xhtml#l00017">armnn::NeonLogWorkloadValidate()</a>, <a class="el" href="_neon_neg_workload_8cpp_source.xhtml#l00017">armnn::NeonNegWorkloadValidate()</a>, <a class="el" href="_neon_rsqrt_workload_8cpp_source.xhtml#l00018">armnn::NeonRsqrtWorkloadValidate()</a>, <a class="el" href="_neon_sin_workload_8cpp_source.xhtml#l00017">armnn::NeonSinWorkloadValidate()</a>, <a class="el" href="_neon_sqrt_workload_8cpp_source.xhtml#l00018">armnn::NeonSqrtWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::Rsqrt</a>, <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">armnn::Sin</a>, and <a class="el" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8aae77f3ad25595e35b327334d89410054">armnn::Sqrt</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ab747f27ee2acb8409799d6ea1af0dff7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab747f27ee2acb8409799d6ea1af0dff7">&#9670;&nbsp;</a></span>IsFillSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFillSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#ab747f27ee2acb8409799d6ea1af0dff7">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01098">1098</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;{</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(input);</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160; </div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;    <span class="keywordflow">return</span> IsNeonBackendSupported(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ae054f879bca9ff680f7e42ae97cc5ed3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae054f879bca9ff680f7e42ae97cc5ed3">&#9670;&nbsp;</a></span>IsFloorSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFloorSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01110">1110</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;{</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;    <span class="keywordflow">return</span> IsNeonBackendSupported(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>) &amp;&amp;</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;           <a class="code" href="namespacearmnn.xhtml#a23a5267702f036fe70a34f91e6c07490">IsSupportedForDataTypeGeneric</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;                                         input.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>(),</div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;                                         &amp;FalseFuncF16&lt;&gt;,</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;                                         &amp;TrueFunc&lt;&gt;,</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;                                         &amp;FalseFuncU8&lt;&gt;,</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;                                         &amp;FalseFuncI32&lt;&gt;,</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;                                         &amp;FalseFuncU8&lt;&gt;);</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_layer_support_common_8hpp_source.xhtml#l00027">armnn::IsSupportedForDataTypeGeneric()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a7249912502bfa13dad25038e8fb9379b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7249912502bfa13dad25038e8fb9379b">&#9670;&nbsp;</a></span>IsFullyConnectedSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFullyConnectedSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01125">1125</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;{</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae455144d3472c502b636697f4775400c">NeonFullyConnectedWorkloadValidate</a>,</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;                                   input,</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00128">ILayerSupport::biases</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_fully_connected_workload_8cpp_source.xhtml#l00024">armnn::NeonFullyConnectedWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00127">ILayerSupport::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ad0bca4c0de78df48fd6e63a3b8239f57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0bca4c0de78df48fd6e63a3b8239f57">&#9670;&nbsp;</a></span>IsGatherNdSupported()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsGatherNdSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01156">1156</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;{</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aec41b8c86e61ce02a07b8215bf8bc073">NeonGatherNdWorkloadValidate</a>,</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;                                   input0,</div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_neon_gather_nd_workload_8cpp_source.xhtml#l00014">armnn::NeonGatherNdWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ae02f78731b0d046f4ed85fcf46c5d17d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae02f78731b0d046f4ed85fcf46c5d17d">&#9670;&nbsp;</a></span>IsGatherSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsGatherSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01142">1142</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;{</div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a6c354904637149b84767275e6f725741">NeonGatherWorkloadValidate</a>,</div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;                                   input0,</div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_neon_gather_workload_8cpp_source.xhtml#l00013">armnn::NeonGatherWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a5d0dbfd77d3461ded89d3bf6a4eab62c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d0dbfd77d3461ded89d3bf6a4eab62c">&#9670;&nbsp;</a></span>IsInputSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsInputSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01168">1168</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;{</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    <span class="keywordflow">return</span> IsNeonBackendSupported(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input);</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a9ee45bf624e40815207a2117f8e02b5d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ee45bf624e40815207a2117f8e02b5d">&#9670;&nbsp;</a></span>IsInstanceNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsInstanceNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01174">1174</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;{</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aea722abe239545030f4c6fe4e083816f">NeonInstanceNormalizationWorkloadValidate</a>,</div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;                                   input,</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_instance_normalization_workload_8cpp_source.xhtml#l00019">armnn::NeonInstanceNormalizationWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ad17197c4dc4dd190610d6d205108255a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad17197c4dc4dd190610d6d205108255a">&#9670;&nbsp;</a></span>IsL2NormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsL2NormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01186">1186</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;{</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae838df3960d2b5d18d73ed2a07aee917">NeonL2NormalizationWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_l2_normalization_float_workload_8cpp_source.xhtml#l00019">armnn::NeonL2NormalizationWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a1f75cea2b43e602f4b99d60375d41a8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f75cea2b43e602f4b99d60375d41a8a">&#9670;&nbsp;</a></span>IsLayerSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> &amp;&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>infos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_base_descriptor.xhtml">BaseDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>lstmParamsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>quantizedLstmParamsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classarmnn_1_1_layer_support_base.xhtml#a4da81c0c187071252d23c014db1c867d">LayerSupportBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00671">671</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;{</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="keywordtype">bool</span> isSupported = <a class="code" href="namespacearmnn.xhtml#a8c69ca5000838df92215ca5053141cf6">IsLayerTypeSupported</a>(type,</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                                            infos,</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                                            <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                                            lstmParamsInfo,</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                                            quantizedLstmParamsInfo,</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                                            <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                                            *<span class="keyword">this</span>);</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160; </div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="comment">// For android-nn-driver and support library, to run FP16 operations on CpuAcc we need at least v8.2</span></div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="comment">// architecture. If the available architecture is older than v8.2, we can check if the operator is</span></div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="comment">// supported by changing operator inputs &amp; outputs to be FP32.</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="comment">// This does not change the operator datatype in the above parsers to be FP32. We are simply reporting</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <span class="comment">// to the parsers if the operator can supported in ArmNN. We will then re-enter ArmNN (Network.cpp)</span></div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="comment">// where we will recheck IsLayerSupported() on the FP16 datatype, update the operator to be FP32,</span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <span class="comment">// and, insert convert layers around the FP32 operator.</span></div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>.has_value())</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    {</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        std::string checkStr = <span class="stringliteral">&quot;This CPU architecture does not support F16 data type, you need v8.2 or above&quot;</span>;</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        <span class="keywordflow">if</span> (!isSupported</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;            &amp;&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>.value().find(checkStr) != std::string::npos)</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        {</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;            std::vector&lt;TensorInfo&gt; newInfos;</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span>               info: infos)</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            {</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                newInfos.emplace_back(OverrideDataType(info, <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">DataType::Float32</a>));</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            }</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160; </div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;            std::string tmpString;</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearmnn.xhtml#a8c69ca5000838df92215ca5053141cf6">IsLayerTypeSupported</a>(type,</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                                        newInfos,</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                                        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                                        lstmParamsInfo,</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                                        quantizedLstmParamsInfo,</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                                        tmpString,</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                                        *<span class="keyword">this</span>);</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        }</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    }</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160; </div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="keywordflow">return</span> isSupported;</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::Float32</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

</div>
</div>
<a id="acaca6012c89942f00869d80c389d5e8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acaca6012c89942f00869d80c389d5e8a">&#9670;&nbsp;</a></span>IsLogicalBinarySupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLogicalBinarySupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01194">1194</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;{</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    <span class="keywordflow">switch</span>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.m_Operation)</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    {</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">LogicalBinaryOperation::LogicalAnd</a>:</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7832b675e7efeb1315b31067e46ce705">NeonLogicalAndWorkloadValidate</a>,</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;                                           input0,</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">LogicalBinaryOperation::LogicalOr</a>:</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a2de04fd10d0a2419e0a05f12741017dc">NeonLogicalOrWorkloadValidate</a>,</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;                                           input0,</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;                                           <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;    }</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">armnn::LogicalAnd</a>, <a class="el" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">armnn::LogicalOr</a>, <a class="el" href="_neon_logical_and_workload_8cpp_source.xhtml#l00018">armnn::NeonLogicalAndWorkloadValidate()</a>, <a class="el" href="_neon_logical_or_workload_8cpp_source.xhtml#l00018">armnn::NeonLogicalOrWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ae13d577a85b2b121febb2fe43899fd6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae13d577a85b2b121febb2fe43899fd6c">&#9670;&nbsp;</a></span>IsLogSoftmaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLogSoftmaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ac14705405cbcdd580df613de6766fe65">LogSoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01219">1219</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;{</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ac57d1e00cc24022c21aa7ff95eb618ba">NeonLogSoftmaxWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_log_softmax_workload_8cpp_source.xhtml#l00019">armnn::NeonLogSoftmaxWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a533ad0fa8ff06bef939f4260a8183350"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a533ad0fa8ff06bef939f4260a8183350">&#9670;&nbsp;</a></span>IsLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>scratchBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01227">1227</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;{</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a9e06cc2a2ac8b88fc72972695a17910f">NeonLstmFloatWorkloadValidate</a>,</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;                                   input,</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>,</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>,</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">scratchBuffer</a>,</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>,</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>,</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>);</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00287">ILayerSupport::cellStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00290">ILayerSupport::cellStateOut</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_lstm_float_workload_8cpp_source.xhtml#l00253">armnn::NeonLstmFloatWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00286">ILayerSupport::outputStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00289">ILayerSupport::outputStateOut</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00293">ILayerSupport::paramsInfo</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00288">ILayerSupport::scratchBuffer</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ac92df5c79bae4ccdc68d9d2045fa2110"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac92df5c79bae4ccdc68d9d2045fa2110">&#9670;&nbsp;</a></span>IsMaximumSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMaximumSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01251">1251</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;{</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8d2ea79addd8ef64be2ca0dad3408f00">NeonMaximumWorkloadValidate</a>,</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;                                   input0,</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_neon_maximum_workload_8cpp_source.xhtml#l00014">armnn::NeonMaximumWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ad9869f2a0cbe051fcc87fb1405d4091d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9869f2a0cbe051fcc87fb1405d4091d">&#9670;&nbsp;</a></span>IsMeanSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMeanSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01263">1263</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;{</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae74e210a3f716c1f5f32663a8ec66345">NeonMeanWorkloadValidate</a>,</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;                                   input,</div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_mean_workload_8cpp_source.xhtml#l00018">armnn::NeonMeanWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a4eb9b602052470f8eadcfa7a63b17d54"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4eb9b602052470f8eadcfa7a63b17d54">&#9670;&nbsp;</a></span>IsMinimumSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMinimumSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01275">1275</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;{</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ab81159ebfa638af1b91fe1e8c5de1955">NeonMinimumWorkloadValidate</a>,</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;                                   input0,</div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_neon_minimum_workload_8cpp_source.xhtml#l00015">armnn::NeonMinimumWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ab5960d08e30fb9542125688580c5f623"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5960d08e30fb9542125688580c5f623">&#9670;&nbsp;</a></span>IsMultiplicationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsMultiplicationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01287">1287</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;{</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ad512520e809bfed4fbd3db9fbc241263">NeonMultiplicationWorkloadValidate</a>,</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;                                   input0,</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_neon_multiplication_workload_8cpp_source.xhtml#l00019">armnn::NeonMultiplicationWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="aedd6e4de83db27813fad327c29402033"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aedd6e4de83db27813fad327c29402033">&#9670;&nbsp;</a></span>IsNormalizationSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsNormalizationSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01313">1313</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;{</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a2ec6297db90d1d4c258c13d2d72b13d9">NeonNormalizationWorkloadValidate</a>,</div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;                                   input,</div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_normalization_float_workload_8cpp_source.xhtml#l00049">armnn::NeonNormalizationWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ac2078e9d66b086cf1225f0610b05a520"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2078e9d66b086cf1225f0610b05a520">&#9670;&nbsp;</a></span>IsOutputSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsOutputSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01325">1325</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;{</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;    <span class="keywordflow">return</span> IsNeonBackendSupported(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="aef4e4cfc054c2fd0e9bd0947909ebe83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef4e4cfc054c2fd0e9bd0947909ebe83">&#9670;&nbsp;</a></span>IsPadSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPadSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01331">1331</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;{</div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a39209c0c078e83227222eb885317c2c5">NeonPadWorkloadValidate</a>,</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;                                   input,</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_pad_workload_8cpp_source.xhtml#l00059">armnn::NeonPadWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a336cc17b9c2cd4e7f667c7fcf5c9377e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a336cc17b9c2cd4e7f667c7fcf5c9377e">&#9670;&nbsp;</a></span>IsPermuteSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPermuteSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01343">1343</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;{</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a70650f6b1d3b8511fcdb989ca769cdbb">NeonPermuteWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_permute_workload_8cpp_source.xhtml#l00015">armnn::NeonPermuteWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ad6262dc3169d8e809c272b31b25aaa6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6262dc3169d8e809c272b31b25aaa6a">&#9670;&nbsp;</a></span>IsPooling2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPooling2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01351">1351</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;{</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a1f07655db8ad7f2738bb0d3d9e2316cc">NeonPooling2dWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_pooling2d_workload_8cpp_source.xhtml#l00022">armnn::NeonPooling2dWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a70c3043f5b6dd3091646fb2c1648a5f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70c3043f5b6dd3091646fb2c1648a5f5">&#9670;&nbsp;</a></span>IsPooling3dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPooling3dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01359">1359</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;{</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aa2b7034aa064d5ec7a9d07828edc48bc">NeonPooling3dWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_pooling3d_workload_8cpp_source.xhtml#l00015">armnn::NeonPooling3dWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="abdf847462abb9af6a8a932589a0046bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abdf847462abb9af6a8a932589a0046bb">&#9670;&nbsp;</a></span>IsPreluSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPreluSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01367">1367</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;{</div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a188adc104b16db3dc23ed2c5ff06cbb8">NeonPreluWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">alpha</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00392">ILayerSupport::alpha</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_prelu_workload_8cpp_source.xhtml#l00017">armnn::NeonPreluWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a052a3d7389be3a0993c9f9a508fa435e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a052a3d7389be3a0993c9f9a508fa435e">&#9670;&nbsp;</a></span>IsQLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousOutputIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>previousCellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01375">1375</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;{</div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    <span class="comment">// Check required here in order to pass IsLayerSupported for datatypes tests</span></div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    <span class="keywordflow">if</span> (input.GetDataType()               == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()    == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()      == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()        == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()              == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>)</div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;    {</div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;        <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a6e6f731864d33c0acd4140c7dfe17b0a">NeonQLstmWorkloadValidate</a>,</div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;                                       input,</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>,</div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>,</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>,</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>,</div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>);</div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;    }</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;    {</div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;    }</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00290">ILayerSupport::cellStateOut</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_neon_q_lstm_workload_8cpp_source.xhtml#l00243">armnn::NeonQLstmWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00289">ILayerSupport::outputStateOut</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00293">ILayerSupport::paramsInfo</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00406">ILayerSupport::previousCellStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00405">ILayerSupport::previousOutputIn</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::QSymmS16</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a7574a8a0dbde3c5058b24b43c4c88125"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7574a8a0dbde3c5058b24b43c4c88125">&#9670;&nbsp;</a></span>IsQuantizedLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQuantizedLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01420">1420</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;{</div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae83632e641892ad2de78f316376f6bd0">NeonQuantizedLstmWorkloadValidate</a>,</div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;                                   input,</div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>,</div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>,</div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>,</div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>,</div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>);</div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00287">ILayerSupport::cellStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00290">ILayerSupport::cellStateOut</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_quantized_lstm_workload_8cpp_source.xhtml#l00131">armnn::NeonQuantizedLstmWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00286">ILayerSupport::outputStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00289">ILayerSupport::outputStateOut</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00293">ILayerSupport::paramsInfo</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ab4474f6170d9abd571f612b2dae34820"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4474f6170d9abd571f612b2dae34820">&#9670;&nbsp;</a></span>IsQuantizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsQuantizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01410">1410</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;{</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a4d1e35c8bbe48e99dd522ac0f75f77d7">NeonQuantizeWorkloadValidate</a>,</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;                                   input,</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_quantize_workload_8cpp_source.xhtml#l00018">armnn::NeonQuantizeWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a9fe9a6e2b79cc5c97e582f1fe0e1f514"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fe9a6e2b79cc5c97e582f1fe0e1f514">&#9670;&nbsp;</a></span>IsReduceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsReduceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01438">1438</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;{</div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aceb6d218204c4e0e7b4c968d6266917c">NeonReduceWorkloadValidate</a>,</div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;                                   input,</div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_reduce_workload_8cpp_source.xhtml#l00019">armnn::NeonReduceWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ab226977f41ce8cc1ee82c314949bb184"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab226977f41ce8cc1ee82c314949bb184">&#9670;&nbsp;</a></span>IsReshapeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsReshapeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01450">1450</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;{</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a430021076042c8157a926a3bb3a37152">NeonReshapeWorkloadValidate</a>,</div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;                                   input,</div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>);</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_neon_reshape_workload_8cpp_source.xhtml#l00017">armnn::NeonReshapeWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a629a1df03491e1bdc19dbd415fd2ad74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a629a1df03491e1bdc19dbd415fd2ad74">&#9670;&nbsp;</a></span>IsResizeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsResizeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01462">1462</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;{</div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a552d65f4e0a6c9e7c7796e77590063e9">NeonResizeWorkloadValidate</a>,</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;                                   input,</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_resize_workload_8cpp_source.xhtml#l00022">armnn::NeonResizeWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a227dac81ac83d16f474881c2252d14cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a227dac81ac83d16f474881c2252d14cc">&#9670;&nbsp;</a></span>IsSliceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSliceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01474">1474</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;{</div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a0a223c0997e3f7faa373ed55f954252b">NeonSliceWorkloadValidate</a>,</div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;                                   input,</div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_slice_workload_8cpp_source.xhtml#l00021">armnn::NeonSliceWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a3115a72a9cca31fb27b40da54a435dfa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3115a72a9cca31fb27b40da54a435dfa">&#9670;&nbsp;</a></span>IsSoftmaxSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSoftmaxSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01486">1486</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;{</div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a4077a9771ba9c551f4ce61863f65e798">NeonSoftmaxWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_softmax_workload_8cpp_source.xhtml#l00019">armnn::NeonSoftmaxWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="aa421c466a09cc8048aa0b700b7e300d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa421c466a09cc8048aa0b700b7e300d8">&#9670;&nbsp;</a></span>IsSpaceToBatchNdSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSpaceToBatchNdSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01494">1494</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;{</div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ab29257da888af2c4971db1344d8a526c">NeonSpaceToBatchNdWorkloadValidate</a>,</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;                                   input,</div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_space_to_batch_nd_workload_8cpp_source.xhtml#l00020">armnn::NeonSpaceToBatchNdWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a78c8c01a898f4bdcebddeda9f3d39a51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78c8c01a898f4bdcebddeda9f3d39a51">&#9670;&nbsp;</a></span>IsSpaceToDepthSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSpaceToDepthSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01506">1506</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;{</div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#af6d2d40482240def4614deb694933d1e">NeonSpaceToDepthWorkloadValidate</a>,</div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;                                   input,</div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_space_to_depth_workload_8cpp_source.xhtml#l00019">armnn::NeonSpaceToDepthWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a159deb89f2f5dbc1a12b8d365162760f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a159deb89f2f5dbc1a12b8d365162760f">&#9670;&nbsp;</a></span>IsSplitterSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSplitterSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::reference_wrapper&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>outputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01518">1518</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;{</div>
<div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTENEON_ENABLED)</span></div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    <span class="comment">// Split along the last dimension, cannot use sub-tensors</span></div>
<div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;    <span class="comment">// as width and height of the sub-tensors do not match</span></div>
<div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;    <span class="comment">// the width and height of the parent tensor</span></div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;    <span class="comment">// in case of input with more than 2D.</span></div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;    std::set&lt;unsigned int&gt; splitAxis = <a class="code" href="namespacearmnn.xhtml#a8cbabc875597b3bed0ccdc0adb289fde">ComputeSplitAxis</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>, input.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>());</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &gt; 2 &amp;&amp; splitAxis.size() == 1 &amp;&amp;</div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;        *splitAxis.begin() == <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() - 1 )</div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;    {</div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;        <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aab5ea316b3decb05430323d847e3a773">NeonSplitterWorkloadValidate</a>,</div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;                                       input,</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>,</div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;                                       *splitAxis.begin());</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    }</div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a> : <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>)</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;    {</div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;        <span class="keywordflow">if</span> (!input.IsTypeSpaceMatch(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>)) <span class="comment">// Cannot use sub-tensors if the types are not same space</span></div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;        {</div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a8c88a8a91827e9ccc3cf3ce6b14fcd17">SetValueChecked</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, <span class="stringliteral">&quot;Neon Splitter: Types and quantization parameters must match.&quot;</span>);</div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;        }</div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;    }</div>
<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_arm_compute_utils_8hpp_source.xhtml#l00244">armnn::ComputeSplitAxis()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, <a class="el" href="_ignore_unused_8hpp_source.xhtml#l00014">armnn::IgnoreUnused()</a>, <a class="el" href="_tensor_8cpp_source.xhtml#l00432">TensorInfo::IsTypeSpaceMatch()</a>, <a class="el" href="_neon_splitter_workload_8cpp_source.xhtml#l00032">armnn::NeonSplitterWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00488">ILayerSupport::outputs</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_layer_support_common_8hpp_source.xhtml#l00017">armnn::SetValueChecked()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a0d99d635906837ed6c582aba6ca6b178"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d99d635906837ed6c582aba6ca6b178">&#9670;&nbsp;</a></span>IsStackSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsStackSupported </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01551">1551</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;{</div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#add549d4deb11580fc32d17fb38b309b4">NeonStackWorkloadValidate</a>,</div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;                                   inputs,</div>
<div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_stack_workload_8cpp_source.xhtml#l00027">armnn::NeonStackWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="aaaa749f75b5ca145f6ad41aa210dbd19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaaa749f75b5ca145f6ad41aa210dbd19">&#9670;&nbsp;</a></span>IsStridedSliceSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsStridedSliceSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01563">1563</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;{</div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ac71d08bf1257807c112b4d019802acc3">NeonStridedSliceWorkloadValidate</a>,</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;                                   input,</div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_strided_slice_workload_8cpp_source.xhtml#l00019">armnn::NeonStridedSliceWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a8a520378fa336d155e23478456eb45fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a520378fa336d155e23478456eb45fe">&#9670;&nbsp;</a></span>IsSubtractionSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSubtractionSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01575">1575</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;{</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#abc968e1323027f9e42cbc7642800d5ce">NeonSubtractionWorkloadValidate</a>,</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;                                   input0,</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;                                   <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport::input1</a>, <a class="el" href="_neon_subtraction_workload_8cpp_source.xhtml#l00022">armnn::NeonSubtractionWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="abfc649259b4e9d8bb830da564f7556c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfc649259b4e9d8bb830da564f7556c6">&#9670;&nbsp;</a></span>IsTransposeConvolution2dSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTransposeConvolution2dSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01588">1588</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;{</div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#abc73c3c9a09f91c22c64d7c166e9be4d">NeonTransposeConvolution2dWorkloadValidate</a>,</div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;                                   input,</div>
<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div>
<div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>);</div>
<div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00128">ILayerSupport::biases</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_transpose_convolution2d_workload_8cpp_source.xhtml#l00025">armnn::NeonTransposeConvolution2dWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00127">ILayerSupport::weights</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="a5d8316c4fac71a34c0f95745a0cae0a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d8316c4fac71a34c0f95745a0cae0a8">&#9670;&nbsp;</a></span>IsTransposeSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTransposeSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em> = <code><a class="el" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01604">1604</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;{</div>
<div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a2b8555526752015115fa7fa00d88542b">NeonTransposeWorkloadValidate</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>, input, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>, <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>);</div>
<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_neon_transpose_workload_8cpp_source.xhtml#l00015">armnn::NeonTransposeWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<a id="ae5cccf9f21abbc944a20817804cfb964"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5cccf9f21abbc944a20817804cfb964">&#9670;&nbsp;</a></span>IsUnidirectionalSequenceLstmSupported()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsUnidirectionalSequenceLstmSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>outputStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>cellStateOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#ae6c5f1b51bd32133c4dcc632045d6b58">UnidirectionalSequenceLstmDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>paramsInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; std::string &amp; &gt;&#160;</td>
          <td class="paramname"><em>reasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l01612">1612</a> of file <a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;{</div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;    <span class="keywordflow">if</span> (input.GetDataType() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div>
<div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div>
<div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div>
<div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;        <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>)</div>
<div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;    {</div>
<div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;        <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a42561b8004ee341ac089d5f1657120db">NeonUnidirectionalSequenceLstmWorkloadValidate</a>,</div>
<div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;                                       input,</div>
<div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>,</div>
<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>,</div>
<div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>,</div>
<div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>,</div>
<div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>);</div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;    }</div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;    {</div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;        <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a963622d85527f420f0b922ef27de4f6b">NeonUnidirectionalSequenceLstmFloatWorkloadValidate</a>,</div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>,</div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;                                       input,</div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>,</div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>,</div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>,</div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>,</div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>);</div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;    }</div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00287">ILayerSupport::cellStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00290">ILayerSupport::cellStateOut</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport::descriptor</a>, <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00151">FORWARD_WORKLOAD_VALIDATE_FUNC</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00198">TensorInfo::GetDataType()</a>, <a class="el" href="_neon_unidirectional_sequence_lstm_float_workload_8cpp_source.xhtml#l00510">armnn::NeonUnidirectionalSequenceLstmFloatWorkloadValidate()</a>, <a class="el" href="_neon_unidirectional_sequence_lstm_workload_8cpp_source.xhtml#l00491">armnn::NeonUnidirectionalSequenceLstmWorkloadValidate()</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport::output</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00286">ILayerSupport::outputStateIn</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00289">ILayerSupport::outputStateOut</a>, <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00293">ILayerSupport::paramsInfo</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::QAsymmS8</a>, <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::QSymmS16</a>, and <a class="el" href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport::reasonIfUnsupported</a>.</p>

<p class="reference">Referenced by <a class="el" href="_neon_layer_support_8cpp_source.xhtml#l00169">armnn::IsLayerTypeSupported()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/backends/neon/<a class="el" href="_neon_layer_support_8hpp_source.xhtml">NeonLayerSupport.hpp</a></li>
<li>src/backends/neon/<a class="el" href="_neon_layer_support_8cpp_source.xhtml">NeonLayerSupport.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearmnn_xhtml_a61d1f39297fec6e3062e4047dc5f236e"><div class="ttname"><a href="namespacearmnn.xhtml#a61d1f39297fec6e3062e4047dc5f236e">armnn::NeonArgMinMaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonArgMinMaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ArgMinMaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_arg_min_max_workload_8cpp_source.xhtml#l00031">NeonArgMinMaxWorkload.cpp:31</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a4077a9771ba9c551f4ce61863f65e798"><div class="ttname"><a href="namespacearmnn.xhtml#a4077a9771ba9c551f4ce61863f65e798">armnn::NeonSoftmaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSoftmaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SoftmaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_softmax_workload_8cpp_source.xhtml#l00019">NeonSoftmaxWorkload.cpp:19</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a5a01de4e3851a25f2df77897fb8f7083"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">armnn::ILayerSupport::outputStateIn</a></div><div class="ttdeci">const TensorInfo &amp; outputStateIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00286">ILayerSupport.hpp:286</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aab5ea316b3decb05430323d847e3a773"><div class="ttname"><a href="namespacearmnn.xhtml#aab5ea316b3decb05430323d847e3a773">armnn::NeonSplitterWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSplitterWorkloadValidate(const TensorInfo &amp;input, const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt;&gt; &amp;outputs, unsigned int splitAxis)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_splitter_workload_8cpp_source.xhtml#l00032">NeonSplitterWorkload.cpp:32</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ac71d08bf1257807c112b4d019802acc3"><div class="ttname"><a href="namespacearmnn.xhtml#ac71d08bf1257807c112b4d019802acc3">armnn::NeonStridedSliceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonStridedSliceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const StridedSliceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_strided_slice_workload_8cpp_source.xhtml#l00019">NeonStridedSliceWorkload.cpp:19</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_aca7a974c8803242968a8d6540275264a"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">armnn::ILayerSupport::paramsInfo</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo const LstmDescriptor const LstmInputParamsInfo &amp; paramsInfo</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00293">ILayerSupport.hpp:293</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aec41b8c86e61ce02a07b8215bf8bc073"><div class="ttname"><a href="namespacearmnn.xhtml#aec41b8c86e61ce02a07b8215bf8bc073">armnn::NeonGatherNdWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonGatherNdWorkloadValidate(const TensorInfo &amp;paramsInfo, const TensorInfo &amp;indicesInfo, const TensorInfo &amp;outputInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_gather_nd_workload_8cpp_source.xhtml#l00014">NeonGatherNdWorkload.cpp:14</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55"><div class="ttname"><a href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">armnn::LogicalBinaryOperation::LogicalAnd</a></div><div class="ttdeci">@ LogicalAnd</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a4f6f59c4e91c7c37d9a119d615093ed3"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">armnn::ILayerSupport::scratchBuffer</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo &amp; scratchBuffer</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00288">ILayerSupport.hpp:288</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a4d1e35c8bbe48e99dd522ac0f75f77d7"><div class="ttname"><a href="namespacearmnn.xhtml#a4d1e35c8bbe48e99dd522ac0f75f77d7">armnn::NeonQuantizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonQuantizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_quantize_workload_8cpp_source.xhtml#l00018">NeonQuantizeWorkload.cpp:18</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a39209c0c078e83227222eb885317c2c5"><div class="ttname"><a href="namespacearmnn.xhtml#a39209c0c078e83227222eb885317c2c5">armnn::NeonPadWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonPadWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const PadDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_pad_workload_8cpp_source.xhtml#l00059">NeonPadWorkload.cpp:59</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_afc773aec6f845adc0cc547ce475dfe3f"><div class="ttname"><a href="namespacearmnn.xhtml#afc773aec6f845adc0cc547ce475dfe3f">armnn::NeonAbsWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonAbsWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_abs_workload_8cpp_source.xhtml#l00017">NeonAbsWorkload.cpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a3d5735d5be6c2acce502ba572cd47d7e"><div class="ttname"><a href="namespacearmnn.xhtml#a3d5735d5be6c2acce502ba572cd47d7e">armnn::NeonConvertFp16ToFp32WorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonConvertFp16ToFp32WorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00019">NeonConvertFp16ToFp32Workload.cpp:19</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">armnn::UnaryOperation::Exp</a></div><div class="ttdeci">@ Exp</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a7832b675e7efeb1315b31067e46ce705"><div class="ttname"><a href="namespacearmnn.xhtml#a7832b675e7efeb1315b31067e46ce705">armnn::NeonLogicalAndWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLogicalAndWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_logical_and_workload_8cpp_source.xhtml#l00018">NeonLogicalAndWorkload.cpp:18</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a5b09834cc88bb4156e291c37bd2434ff"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">armnn::ILayerSupport::previousOutputIn</a></div><div class="ttdeci">const TensorInfo &amp; previousOutputIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00405">ILayerSupport.hpp:405</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8aae77f3ad25595e35b327334d89410054"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8aae77f3ad25595e35b327334d89410054">armnn::UnaryOperation::Sqrt</a></div><div class="ttdeci">@ Sqrt</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">armnn::UnaryOperation::Neg</a></div><div class="ttdeci">@ Neg</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a45691b0c4a46c239b4986cfed95de13b"><div class="ttname"><a href="namespacearmnn.xhtml#a45691b0c4a46c239b4986cfed95de13b">armnn::NeonConvolution2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonConvolution2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, bool isFastMathEnabled, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_convolution2d_workload_8cpp_source.xhtml#l00024">NeonConvolution2dWorkload.cpp:24</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_abc73c3c9a09f91c22c64d7c166e9be4d"><div class="ttname"><a href="namespacearmnn.xhtml#abc73c3c9a09f91c22c64d7c166e9be4d">armnn::NeonTransposeConvolution2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonTransposeConvolution2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_transpose_convolution2d_workload_8cpp_source.xhtml#l00025">NeonTransposeConvolution2dWorkload.cpp:25</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a895a8451e0799b95d65caf7ffe0a32d7"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">armnn::ILayerSupport::mean</a></div><div class="ttdeci">const TensorInfo const TensorInfo &amp; mean</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00063">ILayerSupport.hpp:63</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aa2b7034aa064d5ec7a9d07828edc48bc"><div class="ttname"><a href="namespacearmnn.xhtml#aa2b7034aa064d5ec7a9d07828edc48bc">armnn::NeonPooling3dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonPooling3dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling3dDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_pooling3d_workload_8cpp_source.xhtml#l00015">NeonPooling3dWorkload.cpp:15</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a3ab69cec1cab301e096a2830f65a36ec"><div class="ttname"><a href="namespacearmnn.xhtml#a3ab69cec1cab301e096a2830f65a36ec">armnn::NeonCastValidate</a></div><div class="ttdeci">arm_compute::Status NeonCastValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_cast_workload_8cpp_source.xhtml#l00019">NeonCastWorkload.cpp:19</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ab29257da888af2c4971db1344d8a526c"><div class="ttname"><a href="namespacearmnn.xhtml#ab29257da888af2c4971db1344d8a526c">armnn::NeonSpaceToBatchNdWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSpaceToBatchNdWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToBatchNdDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_space_to_batch_nd_workload_8cpp_source.xhtml#l00020">NeonSpaceToBatchNdWorkload.cpp:20</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ad1991a3499a991b1fdd71d918f793f13"><div class="ttname"><a href="namespacearmnn.xhtml#ad1991a3499a991b1fdd71d918f793f13">armnn::NeonLogWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLogWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_log_workload_8cpp_source.xhtml#l00017">NeonLogWorkload.cpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div><div class="ttdeci">@ QAsymmS8</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a46495807633a01d826851e1cb498f071"><div class="ttname"><a href="namespacearmnn.xhtml#a46495807633a01d826851e1cb498f071">armnn::NeonActivationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonActivationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_activation_workload_8cpp_source.xhtml#l00017">NeonActivationWorkload.cpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1b03e82a1a53b686aedea3734b2fb957"><div class="ttname"><a href="namespacearmnn.xhtml#a1b03e82a1a53b686aedea3734b2fb957">armnn::NeonAdditionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonAdditionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_addition_workload_8cpp_source.xhtml#l00020">NeonAdditionWorkload.cpp:20</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ae455144d3472c502b636697f4775400c"><div class="ttname"><a href="namespacearmnn.xhtml#ae455144d3472c502b636697f4775400c">armnn::NeonFullyConnectedWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonFullyConnectedWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const FullyConnectedDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_fully_connected_workload_8cpp_source.xhtml#l00024">NeonFullyConnectedWorkload.cpp:24</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a8c88a8a91827e9ccc3cf3ce6b14fcd17"><div class="ttname"><a href="namespacearmnn.xhtml#a8c88a8a91827e9ccc3cf3ce6b14fcd17">armnn::SetValueChecked</a></div><div class="ttdeci">void SetValueChecked(Optional&lt; T &amp; &gt; optionalRef, V &amp;&amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_common_8hpp_source.xhtml#l00017">LayerSupportCommon.hpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a8cbabc875597b3bed0ccdc0adb289fde"><div class="ttname"><a href="namespacearmnn.xhtml#a8cbabc875597b3bed0ccdc0adb289fde">armnn::ComputeSplitAxis</a></div><div class="ttdeci">std::set&lt; unsigned int &gt; ComputeSplitAxis(const armnn::SplitterDescriptor &amp;desc, const TensorShape &amp;input)</div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_utils_8hpp_source.xhtml#l00244">ArmComputeUtils.hpp:244</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_afb681fd9b8afe0b236d51b6c868ae660"><div class="ttname"><a href="namespacearmnn.xhtml#afb681fd9b8afe0b236d51b6c868ae660">armnn::NeonConstantWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonConstantWorkloadValidate(const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_constant_workload_8cpp_source.xhtml#l00020">NeonConstantWorkload.cpp:20</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ae838df3960d2b5d18d73ed2a07aee917"><div class="ttname"><a href="namespacearmnn.xhtml#ae838df3960d2b5d18d73ed2a07aee917">armnn::NeonL2NormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonL2NormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const L2NormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_l2_normalization_float_workload_8cpp_source.xhtml#l00019">NeonL2NormalizationFloatWorkload.cpp:19</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_acefede7cc57c71ea4cfe1c888bb413e0"><div class="ttname"><a href="namespacearmnn.xhtml#acefede7cc57c71ea4cfe1c888bb413e0">armnn::NeonDequantizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonDequantizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_dequantize_workload_8cpp_source.xhtml#l00022">NeonDequantizeWorkload.cpp:22</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00042">ILayerSupport.hpp:42</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a116d88067bf98ce9858ab73e68f605f9"><div class="ttname"><a href="namespacearmnn.xhtml#a116d88067bf98ce9858ab73e68f605f9">armnn::NeonDepthToSpaceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonDepthToSpaceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthToSpaceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_depth_to_space_workload_8cpp_source.xhtml#l00019">NeonDepthToSpaceWorkload.cpp:19</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_ad5e0e3fb8a59107ac3366028a057db12"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">armnn::ILayerSupport::previousCellStateIn</a></div><div class="ttdeci">const TensorInfo const TensorInfo &amp; previousCellStateIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00406">ILayerSupport.hpp:406</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247"><div class="ttname"><a href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">armnn::LogicalBinaryOperation::LogicalOr</a></div><div class="ttdeci">@ LogicalOr</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a552d65f4e0a6c9e7c7796e77590063e9"><div class="ttname"><a href="namespacearmnn.xhtml#a552d65f4e0a6c9e7c7796e77590063e9">armnn::NeonResizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonResizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_resize_workload_8cpp_source.xhtml#l00022">NeonResizeWorkload.cpp:22</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a52cdeda888e3ecf0dbebb533ba0856f1"><div class="ttname"><a href="namespacearmnn.xhtml#a52cdeda888e3ecf0dbebb533ba0856f1">armnn::NeonBatchMatMulValidate</a></div><div class="ttdeci">arm_compute::Status NeonBatchMatMulValidate(const TensorInfo &amp;inputInfoX, const TensorInfo &amp;inputInfoY, const TensorInfo &amp;outputInfo, const BatchMatMulDescriptor &amp;descriptor, const bool isFastMathEnabled, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_batch_mat_mul_workload_8cpp_source.xhtml#l00017">NeonBatchMatMulWorkload.cpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ac1be1c9a317b23b5684c83af59fb2c96"><div class="ttname"><a href="namespacearmnn.xhtml#ac1be1c9a317b23b5684c83af59fb2c96">armnn::NeonBatchNormalizationValidate</a></div><div class="ttdeci">arm_compute::Status NeonBatchNormalizationValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_batch_normalization_workload_8cpp_source.xhtml#l00024">NeonBatchNormalizationWorkload.cpp:24</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a218e2ebb5babb8323688906b8997eafb"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">armnn::ILayerSupport::alpha</a></div><div class="ttdeci">const TensorInfo &amp; alpha</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00392">ILayerSupport.hpp:392</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ae74e210a3f716c1f5f32663a8ec66345"><div class="ttname"><a href="namespacearmnn.xhtml#ae74e210a3f716c1f5f32663a8ec66345">armnn::NeonMeanWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonMeanWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const MeanDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_mean_workload_8cpp_source.xhtml#l00018">NeonMeanWorkload.cpp:18</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a7f955750d00cdcae6038f07cc73686ea"><div class="ttname"><a href="namespacearmnn.xhtml#a7f955750d00cdcae6038f07cc73686ea">armnn::NeonNegWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonNegWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_neg_workload_8cpp_source.xhtml#l00017">NeonNegWorkload.cpp:17</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aea722abe239545030f4c6fe4e083816f"><div class="ttname"><a href="namespacearmnn.xhtml#aea722abe239545030f4c6fe4e083816f">armnn::NeonInstanceNormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonInstanceNormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const InstanceNormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_instance_normalization_workload_8cpp_source.xhtml#l00019">NeonInstanceNormalizationWorkload.cpp:19</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a3653413d74a951674c88db372d217baa"><div class="ttname"><a href="namespacearmnn.xhtml#a3653413d74a951674c88db372d217baa">armnn::NeonConcatWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonConcatWorkloadValidate(const std::vector&lt; const TensorInfo * &gt; &amp;inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_concat_workload_8cpp_source.xhtml#l00027">NeonConcatWorkload.cpp:27</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a22f377fc4e10dc1773a3f979061e85f1"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a22f377fc4e10dc1773a3f979061e85f1">armnn::TensorInfo::IsTypeSpaceMatch</a></div><div class="ttdeci">bool IsTypeSpaceMatch(const TensorInfo &amp;other) const</div><div class="ttdoc">Check that the types are the same and, if quantize, that the quantization parameters are the same.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00432">Tensor.cpp:432</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a0a223c0997e3f7faa373ed55f954252b"><div class="ttname"><a href="namespacearmnn.xhtml#a0a223c0997e3f7faa373ed55f954252b">armnn::NeonSliceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSliceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SliceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_slice_workload_8cpp_source.xhtml#l00021">NeonSliceWorkload.cpp:21</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aceb6d218204c4e0e7b4c968d6266917c"><div class="ttname"><a href="namespacearmnn.xhtml#aceb6d218204c4e0e7b4c968d6266917c">armnn::NeonReduceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonReduceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReduceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_reduce_workload_8cpp_source.xhtml#l00019">NeonReduceWorkload.cpp:19</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">armnn::DataType::Float32</a></div><div class="ttdeci">@ Float32</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_ab82416560ced17268c6ba4443a3aac5e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">armnn::ILayerSupport::input1</a></div><div class="ttdeci">const TensorInfo &amp; input1</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport.hpp:48</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aad5f7f0fcd2dbb0aad7016ff984e7cc6"><div class="ttname"><a href="namespacearmnn.xhtml#aad5f7f0fcd2dbb0aad7016ff984e7cc6">armnn::NeonBatchToSpaceNdWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonBatchToSpaceNdWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const BatchToSpaceNdDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_batch_to_space_nd_workload_8cpp_source.xhtml#l00020">NeonBatchToSpaceNdWorkload.cpp:20</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ae83632e641892ad2de78f316376f6bd0"><div class="ttname"><a href="namespacearmnn.xhtml#ae83632e641892ad2de78f316376f6bd0">armnn::NeonQuantizedLstmWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonQuantizedLstmWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;outputStateOut, const QuantizedLstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_quantized_lstm_workload_8cpp_source.xhtml#l00131">NeonQuantizedLstmWorkload.cpp:131</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a6c354904637149b84767275e6f725741"><div class="ttname"><a href="namespacearmnn.xhtml#a6c354904637149b84767275e6f725741">armnn::NeonGatherWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonGatherWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;indices, const TensorInfo &amp;output, const GatherDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_gather_workload_8cpp_source.xhtml#l00013">NeonGatherWorkload.cpp:13</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_ab5cccb3233f5eff2119e8acc80cec209"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">armnn::ILayerSupport::gamma</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; gamma</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00066">ILayerSupport.hpp:66</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a903053b422754682265fba0c03d94a52"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">armnn::ILayerSupport::var</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo &amp; var</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00064">ILayerSupport.hpp:64</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ab81159ebfa638af1b91fe1e8c5de1955"><div class="ttname"><a href="namespacearmnn.xhtml#ab81159ebfa638af1b91fe1e8c5de1955">armnn::NeonMinimumWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonMinimumWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdoc">Validate function for validating the inputs and output.</div><div class="ttdef"><b>Definition:</b> <a href="_neon_minimum_workload_8cpp_source.xhtml#l00015">NeonMinimumWorkload.cpp:15</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a963622d85527f420f0b922ef27de4f6b"><div class="ttname"><a href="namespacearmnn.xhtml#a963622d85527f420f0b922ef27de4f6b">armnn::NeonUnidirectionalSequenceLstmFloatWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonUnidirectionalSequenceLstmFloatWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const UnidirectionalSequenceLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_unidirectional_sequence_lstm_float_workload_8cpp_source.xhtml#l00510">NeonUnidirectionalSequenceLstmFloatWorkload.cpp:510</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a430021076042c8157a926a3bb3a37152"><div class="ttname"><a href="namespacearmnn.xhtml#a430021076042c8157a926a3bb3a37152">armnn::NeonReshapeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonReshapeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_reshape_workload_8cpp_source.xhtml#l00017">NeonReshapeWorkload.cpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a188adc104b16db3dc23ed2c5ff06cbb8"><div class="ttname"><a href="namespacearmnn.xhtml#a188adc104b16db3dc23ed2c5ff06cbb8">armnn::NeonPreluWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonPreluWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;alpha, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_prelu_workload_8cpp_source.xhtml#l00017">NeonPreluWorkload.cpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a42561b8004ee341ac089d5f1657120db"><div class="ttname"><a href="namespacearmnn.xhtml#a42561b8004ee341ac089d5f1657120db">armnn::NeonUnidirectionalSequenceLstmWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonUnidirectionalSequenceLstmWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const UnidirectionalSequenceLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_unidirectional_sequence_lstm_workload_8cpp_source.xhtml#l00491">NeonUnidirectionalSequenceLstmWorkload.cpp:491</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a83a99de40f6bffaa36f0333d04690b2a"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">armnn::ILayerSupport::beta</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; beta</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00065">ILayerSupport.hpp:65</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_abc968e1323027f9e42cbc7642800d5ce"><div class="ttname"><a href="namespacearmnn.xhtml#abc968e1323027f9e42cbc7642800d5ce">armnn::NeonSubtractionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSubtractionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_subtraction_workload_8cpp_source.xhtml#l00022">NeonSubtractionWorkload.cpp:22</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aa7d1b5e38aa8cb731519ff12e2a73350"><div class="ttname"><a href="namespacearmnn.xhtml#aa7d1b5e38aa8cb731519ff12e2a73350">armnn::NeonRsqrtWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonRsqrtWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_rsqrt_workload_8cpp_source.xhtml#l00018">NeonRsqrtWorkload.cpp:18</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a631f893f44415523924016ed3f54a661"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">armnn::ILayerSupport::weights</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo &amp; weights</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00127">ILayerSupport.hpp:127</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a1e34af023adeb7d5f484f8eb4b9826b6">armnn::UnaryOperation::Abs</a></div><div class="ttdeci">@ Abs</div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_aec04a02758804219fb461623464a8e96"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">armnn::ILayerSupport::cellStateIn</a></div><div class="ttdeci">const TensorInfo const TensorInfo &amp; cellStateIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00287">ILayerSupport.hpp:287</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2ee21869ffad00d6344afffb0a9baba1"><div class="ttname"><a href="namespacearmnn.xhtml#a2ee21869ffad00d6344afffb0a9baba1">armnn::NeonChannelShuffleValidate</a></div><div class="ttdeci">arm_compute::Status NeonChannelShuffleValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ChannelShuffleDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_channel_shuffle_workload_8cpp_source.xhtml#l00017">NeonChannelShuffleWorkload.cpp:17</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a71cf13fc7f7aeac054919e0c6dcab52e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">armnn::ILayerSupport::biases</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo const Optional&lt; TensorInfo &gt; &amp; biases</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00128">ILayerSupport.hpp:128</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a940d1c3e8ff3949cb5f230637fb8656c"><div class="ttname"><a href="namespacearmnn.xhtml#a940d1c3e8ff3949cb5f230637fb8656c">armnn::NeonConvertFp32ToFp16WorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonConvertFp32ToFp16WorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00021">NeonConvertFp32ToFp16Workload.cpp:21</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_af6d2d40482240def4614deb694933d1e"><div class="ttname"><a href="namespacearmnn.xhtml#af6d2d40482240def4614deb694933d1e">armnn::NeonSpaceToDepthWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSpaceToDepthWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToDepthDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_space_to_depth_workload_8cpp_source.xhtml#l00019">NeonSpaceToDepthWorkload.cpp:19</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a70650f6b1d3b8511fcdb989ca769cdbb"><div class="ttname"><a href="namespacearmnn.xhtml#a70650f6b1d3b8511fcdb989ca769cdbb">armnn::NeonPermuteWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonPermuteWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const PermuteDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_permute_workload_8cpp_source.xhtml#l00015">NeonPermuteWorkload.cpp:15</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a8c69ca5000838df92215ca5053141cf6"><div class="ttname"><a href="namespacearmnn.xhtml#a8c69ca5000838df92215ca5053141cf6">armnn::IsLayerTypeSupported</a></div><div class="ttdeci">bool IsLayerTypeSupported(const LayerType &amp;type, const std::vector&lt; TensorInfo &gt; &amp;infos, const BaseDescriptor &amp;descriptor, const Optional&lt; LstmInputParamsInfo &gt; &amp;lstmParamsInfo, const Optional&lt; QuantizedLstmInputParamsInfo &gt; &amp;quantizedLstmParamsInfo, Optional&lt; std::string &amp; &gt; reasonIfUnsupported, const NeonLayerSupport &amp;support)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00169">NeonLayerSupport.cpp:169</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a23a5267702f036fe70a34f91e6c07490"><div class="ttname"><a href="namespacearmnn.xhtml#a23a5267702f036fe70a34f91e6c07490">armnn::IsSupportedForDataTypeGeneric</a></div><div class="ttdeci">bool IsSupportedForDataTypeGeneric(Optional&lt; std::string &amp; &gt; reasonIfUnsupported, DataType dataType, Float16Func float16FuncPtr, Float32Func float32FuncPtr, Uint8Func uint8FuncPtr, Int32Func int32FuncPtr, BooleanFunc booleanFuncPtr, Params &amp;&amp;... params)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_common_8hpp_source.xhtml#l00027">LayerSupportCommon.hpp:27</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_aec5669eb9285cbca1ee6c7e1dd7bcf6a"><div class="ttname"><a href="namespacearmnn.xhtml#aec5669eb9285cbca1ee6c7e1dd7bcf6a">armnn::NeonExpWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonExpWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_exp_workload_8cpp_source.xhtml#l00017">NeonExpWorkload.cpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_af873a38f5251d348f37f0e94a2adc400"><div class="ttname"><a href="namespacearmnn.xhtml#af873a38f5251d348f37f0e94a2adc400">armnn::NeonSinWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSinWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_sin_workload_8cpp_source.xhtml#l00017">NeonSinWorkload.cpp:17</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a5fadc539a1a3c35c4a6138bf6e970e4c"><div class="ttname"><a href="namespacearmnn.xhtml#a5fadc539a1a3c35c4a6138bf6e970e4c">armnn::NeonSqrtWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSqrtWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_sqrt_workload_8cpp_source.xhtml#l00018">NeonSqrtWorkload.cpp:18</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2b8555526752015115fa7fa00d88542b"><div class="ttname"><a href="namespacearmnn.xhtml#a2b8555526752015115fa7fa00d88542b">armnn::NeonTransposeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonTransposeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_transpose_workload_8cpp_source.xhtml#l00015">NeonTransposeWorkload.cpp:15</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a311602de6b1e53b4feb3b8a37a433f44"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">armnn::ILayerSupport::outputs</a></div><div class="ttdeci">const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt; &gt; &amp; outputs</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00488">ILayerSupport.hpp:488</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">armnn::UnaryOperation::LogicalNot</a></div><div class="ttdeci">@ LogicalNot</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">armnn::UnaryOperation::Sin</a></div><div class="ttdeci">@ Sin</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a6e6f731864d33c0acd4140c7dfe17b0a"><div class="ttname"><a href="namespacearmnn.xhtml#a6e6f731864d33c0acd4140c7dfe17b0a">armnn::NeonQLstmWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonQLstmWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;output, const QLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_q_lstm_workload_8cpp_source.xhtml#l00243">NeonQLstmWorkload.cpp:243</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_add549d4deb11580fc32d17fb38b309b4"><div class="ttname"><a href="namespacearmnn.xhtml#add549d4deb11580fc32d17fb38b309b4">armnn::NeonStackWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonStackWorkloadValidate(const std::vector&lt; const TensorInfo * &gt; &amp;inputs, const TensorInfo &amp;output, const StackDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_stack_workload_8cpp_source.xhtml#l00027">NeonStackWorkload.cpp:27</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a65c912bfcf02b3096f36caf21fa175d0"><div class="ttname"><a href="namespacearmnn.xhtml#a65c912bfcf02b3096f36caf21fa175d0">armnn::NeonDivisionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonDivisionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_division_workload_8cpp_source.xhtml#l00018">NeonDivisionWorkload.cpp:18</a></div></div>
<div class="ttc" id="a_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00151">NeonLayerSupport.cpp:151</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_acbb4d7b86eb01bb437230e1586b9aeb4"><div class="ttname"><a href="namespacearmnn.xhtml#acbb4d7b86eb01bb437230e1586b9aeb4">armnn::NeonConvolution3dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonConvolution3dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution3dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, bool isFastMathEnabled, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_convolution3d_workload_8cpp_source.xhtml#l00024">NeonConvolution3dWorkload.cpp:24</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::UnaryOperation::Rsqrt</a></div><div class="ttdeci">@ Rsqrt</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a></div><div class="ttdeci">@ QSymmS16</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ad512520e809bfed4fbd3db9fbc241263"><div class="ttname"><a href="namespacearmnn.xhtml#ad512520e809bfed4fbd3db9fbc241263">armnn::NeonMultiplicationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonMultiplicationWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_multiplication_workload_8cpp_source.xhtml#l00019">NeonMultiplicationWorkload.cpp:19</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a8d2ea79addd8ef64be2ca0dad3408f00"><div class="ttname"><a href="namespacearmnn.xhtml#a8d2ea79addd8ef64be2ca0dad3408f00">armnn::NeonMaximumWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonMaximumWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_maximum_workload_8cpp_source.xhtml#l00014">NeonMaximumWorkload.cpp:14</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a4e25e081529b7e99e5e454d916ed83fb"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2de04fd10d0a2419e0a05f12741017dc"><div class="ttname"><a href="namespacearmnn.xhtml#a2de04fd10d0a2419e0a05f12741017dc">armnn::NeonLogicalOrWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLogicalOrWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_logical_or_workload_8cpp_source.xhtml#l00018">NeonLogicalOrWorkload.cpp:18</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ae412e8e64d6a6dde3ace908b59c29c06"><div class="ttname"><a href="namespacearmnn.xhtml#ae412e8e64d6a6dde3ace908b59c29c06">armnn::NeonComparisonWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonComparisonWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ComparisonDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_comparison_workload_8cpp_source.xhtml#l00016">NeonComparisonWorkload.cpp:16</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a2ec6297db90d1d4c258c13d2d72b13d9"><div class="ttname"><a href="namespacearmnn.xhtml#a2ec6297db90d1d4c258c13d2d72b13d9">armnn::NeonNormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonNormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const NormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_normalization_float_workload_8cpp_source.xhtml#l00049">NeonNormalizationFloatWorkload.cpp:49</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_a44eb2a514bddb31fe20f9e4f04159c9f"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">armnn::ILayerSupport::outputStateOut</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; outputStateOut</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00289">ILayerSupport.hpp:289</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1f07655db8ad7f2738bb0d3d9e2316cc"><div class="ttname"><a href="namespacearmnn.xhtml#a1f07655db8ad7f2738bb0d3d9e2316cc">armnn::NeonPooling2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonPooling2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling2dDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_pooling2d_workload_8cpp_source.xhtml#l00022">NeonPooling2dWorkload.cpp:22</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a63d684b26fb838b22123490d780bce08"><div class="ttname"><a href="namespacearmnn.xhtml#a63d684b26fb838b22123490d780bce08">armnn::NeonDepthwiseConvolutionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonDepthwiseConvolutionWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_depthwise_convolution_workload_8cpp_source.xhtml#l00029">NeonDepthwiseConvolutionWorkload.cpp:29</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_i_layer_support_xhtml_ae1ee2d524d4252bffc0ed67e75882952"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">armnn::ILayerSupport::cellStateOut</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; cellStateOut</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00290">ILayerSupport.hpp:290</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_ac57d1e00cc24022c21aa7ff95eb618ba"><div class="ttname"><a href="namespacearmnn.xhtml#ac57d1e00cc24022c21aa7ff95eb618ba">armnn::NeonLogSoftmaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLogSoftmaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const LogSoftmaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_log_softmax_workload_8cpp_source.xhtml#l00019">NeonLogSoftmaxWorkload.cpp:19</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">armnn::UnaryOperation::Log</a></div><div class="ttdeci">@ Log</div></div>
<div class="ttc" id="anamespacearmnn_xhtml_af4f8e11ae5715973420a82d841dfa676"><div class="ttname"><a href="namespacearmnn.xhtml#af4f8e11ae5715973420a82d841dfa676">armnn::NeonLogicalNotWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLogicalNotWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_logical_not_workload_8cpp_source.xhtml#l00019">NeonLogicalNotWorkload.cpp:19</a></div></div>
<div class="ttc" id="anamespacearmnn_xhtml_a9e06cc2a2ac8b88fc72972695a17910f"><div class="ttname"><a href="namespacearmnn.xhtml#a9e06cc2a2ac8b88fc72972695a17910f">armnn::NeonLstmFloatWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLstmFloatWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;scratchBuffer, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_lstm_float_workload_8cpp_source.xhtml#l00253">NeonLstmFloatWorkload.cpp:253</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_neon_layer_support.xhtml">NeonLayerSupport</a></li>
    <li class="footer">Generated on Thu May 18 2023 10:35:48 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
