<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnDeserializer/test/ParserFlatbuffersSerializeFixture.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ParserFlatbuffersSerializeFixture.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_parser_flatbuffers_serialize_fixture_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_schema_serialize_8hpp.xhtml">SchemaSerialize.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_test_utils_2_tensor_helpers_8hpp.xhtml">armnnTestUtils/TensorHelpers.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;flatbuffers/idl.h&quot;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;flatbuffers/util.h&quot;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_armnn_schema__generated_8h.xhtml">ArmnnSchema_generated.h</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_runtime_8hpp.xhtml">armnn/IRuntime.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_deserializer_8hpp.xhtml">armnnDeserializer/IDeserializer.hpp</a>&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_assert_8hpp.xhtml">armnn/utility/Assert.hpp</a>&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_resolve_type_8hpp.xhtml">ResolveType.hpp</a>&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;fmt/format.h&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;doctest/doctest.h&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">using</span> <a class="code" href="classarmnn_deserializer_1_1_i_deserializer.xhtml">armnnDeserializer::IDeserializer</a>;</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="_parser_flatbuffers_serialize_fixture_8hpp.xhtml#a15c20a0693cd3fc4d85565e2f920d8ef">   27</a></span>&#160;<span class="keyword">using</span> <a class="code" href="_parser_flatbuffers_serialize_fixture_8hpp.xhtml#a15c20a0693cd3fc4d85565e2f920d8ef">TensorRawPtr</a> = armnnSerializer::TensorInfo*;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml">   29</a></span>&#160;<span class="keyword">struct </span><a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml">ParserFlatbuffersSerializeFixture</a></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#accb0415cfdd9f1dbcf83d8e761edeb33">   31</a></span>&#160;    <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#accb0415cfdd9f1dbcf83d8e761edeb33">ParserFlatbuffersSerializeFixture</a>() :</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a1b4988dc1a728466d3f1b5b30513a97a">m_Parser</a>(<a class="code" href="classarmnn_deserializer_1_1_i_deserializer.xhtml">IDeserializer</a>::Create()),</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>(<a class="code" href="namespacearmnn.xhtml">armnn</a>::IRuntime::Create(<a class="code" href="namespacearmnn.xhtml">armnn</a>::IRuntime::CreationOptions())),</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>(-1)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    }</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a9fbc789fd0aca759cb40737fdeb8ed63">   38</a></span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a9fbc789fd0aca759cb40737fdeb8ed63">m_GraphBinary</a>;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a803c86dca3acef653c1cc481a27be7a9">   39</a></span>&#160;    std::string <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a803c86dca3acef653c1cc481a27be7a9">m_JsonString</a>;</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a1b4988dc1a728466d3f1b5b30513a97a">   40</a></span>&#160;    std::unique_ptr&lt;IDeserializer, void (*)(IDeserializer* parser)&gt; <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a1b4988dc1a728466d3f1b5b30513a97a">m_Parser</a>;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">   41</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a> <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">   42</a></span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a> <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">    /// If the single-input-single-output overload of Setup() is called, these will store the input and output name</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">    /// so they don&#39;t need to be passed to the single-input-single-output overload of RunTest().</span></div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">   46</a></span>&#160;<span class="comment"></span>    std::string <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">m_SingleInputName</a>;</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">   47</a></span>&#160;    std::string <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">m_SingleOutputName</a>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">   49</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">Setup</a>()</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordtype">bool</span> ok = <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a69fc8e7f42386fa67732cb8c98d8b024">ReadStringToBinary</a>();</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">if</span> (!ok)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;LoadNetwork failed while reading binary input&quot;</span>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network =</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                m_Parser-&gt;CreateNetworkFromBinary(m_GraphBinary);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">if</span> (!network)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;The parser failed to create an ArmNN network&quot;</span>);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">auto</span> optimized = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">Optimize</a>(*network, {<a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a>},</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                  m_Runtime-&gt;GetDeviceSpec());</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        std::string errorMessage;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a> ret = m_Runtime-&gt;LoadNetwork(m_NetworkIdentifier, move(optimized), errorMessage);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">if</span> (ret != <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a>)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(fmt::format(<span class="stringliteral">&quot;The runtime failed to load the network. &quot;</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                               <span class="stringliteral">&quot;Error was: {0}. in {1} [{2}:{3}]&quot;</span>,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                               errorMessage,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                               __func__,</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                               __FILE__,</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                               __LINE__));</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a2bb4ea256fbbf6d53068ca93bb4bc95c">   83</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a2bb4ea256fbbf6d53068ca93bb4bc95c">SetupSingleInputSingleOutput</a>(<span class="keyword">const</span> std::string&amp; inputName, <span class="keyword">const</span> std::string&amp; outputName)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="comment">// Store the input and output name so they don&#39;t need to be passed to the single-input-single-output RunTest().</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        m_SingleInputName = inputName;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        m_SingleOutputName = outputName;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">Setup</a>();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a69fc8e7f42386fa67732cb8c98d8b024">   91</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a69fc8e7f42386fa67732cb8c98d8b024">ReadStringToBinary</a>()</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        std::string schemafile(&amp;<a class="code" href="_schema_serialize_8hpp.xhtml#a0cc366ea2aac864a65b56f2c6e5dbcd0">deserialize_schema_start</a>, &amp;<a class="code" href="_schema_serialize_8hpp.xhtml#a535b75d8b7b9ae68d8c9de8937ebd8d8">deserialize_schema_end</a>);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="comment">// parse schema first, so we can use it to parse the data after</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        flatbuffers::Parser parser;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordtype">bool</span> ok = parser.Parse(schemafile.c_str());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        CHECK_MESSAGE(ok, std::string(<span class="stringliteral">&quot;Failed to parse schema file. Error was: &quot;</span> + parser.error_).c_str());</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        ok &amp;= parser.Parse(m_JsonString.c_str());</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        CHECK_MESSAGE(ok, std::string(<span class="stringliteral">&quot;Failed to parse json input. Error was: &quot;</span> + parser.error_).c_str());</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">if</span> (!ok)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keyword">const</span> uint8_t* bufferPtr = parser.builder_.GetBufferPointer();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keywordtype">size_t</span> size = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(parser.builder_.GetSize());</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            m_GraphBinary.assign(bufferPtr, bufferPtr+size);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">return</span> ok;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">    /// Executes the network with the given input tensor and checks the result against the given output tensor.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">    /// This overload assumes the network has a single input and a single output.</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"></span>    <span class="keyword">template</span>&lt;std::size_t NumOutputDimensions,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;             <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnType,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;             <span class="keyword">typename</span> <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnType&gt;</a>&gt;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a9e0ef357389fbb780ad5ecd979ac5e95">RunTest</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> layersId,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                 <span class="keyword">const</span> std::vector&lt;DataType&gt;&amp; inputData,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                 <span class="keyword">const</span> std::vector&lt;DataType&gt;&amp; expectedOutputData);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">template</span>&lt;std::size_t NumOutputDimensions,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;             <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnInputType,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;             <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnOutputType,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;             <span class="keyword">typename</span> InputDataType = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnInputType&gt;</a>,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;             <span class="keyword">typename</span> OutputDataType = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnOutputType&gt;</a>&gt;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a9e0ef357389fbb780ad5ecd979ac5e95">RunTest</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> layersId,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                 <span class="keyword">const</span> std::vector&lt;InputDataType&gt;&amp; inputData,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                 <span class="keyword">const</span> std::vector&lt;OutputDataType&gt;&amp; expectedOutputData);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">    /// Executes the network with the given input tensors and checks the results against the given output tensors.</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">    /// This overload supports multiple inputs and multiple outputs, identified by name.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"></span>    <span class="keyword">template</span>&lt;std::size_t NumOutputDimensions,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;             <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnType,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;             <span class="keyword">typename</span> DataType = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnType&gt;</a>&gt;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a9e0ef357389fbb780ad5ecd979ac5e95">RunTest</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> layersId,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                 <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;DataType&gt;&gt;&amp; inputData,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                 <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;DataType&gt;&gt;&amp; expectedOutputData);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">template</span>&lt;std::size_t NumOutputDimensions,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;             <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnInputType,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;             <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnOutputType,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;             <span class="keyword">typename</span> InputDataType = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnInputType&gt;</a>,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;             <span class="keyword">typename</span> OutputDataType = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnOutputType&gt;</a>&gt;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a9e0ef357389fbb780ad5ecd979ac5e95">RunTest</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> layersId,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                 <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;InputDataType&gt;&gt;&amp; inputData,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                 <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;OutputDataType&gt;&gt;&amp; expectedOutputData);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a2889be68b376ed9d92cd074610a24a8c">  153</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a2889be68b376ed9d92cd074610a24a8c">CheckTensors</a>(<span class="keyword">const</span> <a class="code" href="_parser_flatbuffers_serialize_fixture_8hpp.xhtml#a15c20a0693cd3fc4d85565e2f920d8ef">TensorRawPtr</a>&amp; tensors, <span class="keywordtype">size_t</span> shapeSize, <span class="keyword">const</span> std::vector&lt;int32_t&gt;&amp; shape,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                      armnnSerializer::TensorInfo tensorType, <span class="keyword">const</span> std::string&amp; name,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                      <span class="keyword">const</span> <span class="keywordtype">float</span> scale, <span class="keyword">const</span> int64_t zeroPoint)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(name);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        CHECK_EQ(shapeSize, tensors-&gt;dimensions()-&gt;size());</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        CHECK(std::equal(shape.begin(), shape.end(),</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                      tensors-&gt;dimensions()-&gt;begin(), tensors-&gt;dimensions()-&gt;end()));</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        CHECK_EQ(tensorType.dataType(), tensors-&gt;dataType());</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        CHECK_EQ(scale, tensors-&gt;quantizationScale());</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        CHECK_EQ(zeroPoint, tensors-&gt;quantizationOffset());</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;};</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">template</span>&lt;std::<span class="keywordtype">size_t</span> NumOutputDimensions, armnn::DataType ArmnnType, <span class="keyword">typename</span> DataType&gt;</div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a9e0ef357389fbb780ad5ecd979ac5e95">  168</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a9e0ef357389fbb780ad5ecd979ac5e95">ParserFlatbuffersSerializeFixture::RunTest</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> layersId,</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                                                <span class="keyword">const</span> std::vector&lt;DataType&gt;&amp; inputData,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                                <span class="keyword">const</span> std::vector&lt;DataType&gt;&amp; expectedOutputData)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;{</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    RunTest&lt;NumOutputDimensions, ArmnnType, ArmnnType, DataType, DataType&gt;(layersId, inputData, expectedOutputData);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keyword">template</span>&lt;std::size_t NumOutputDimensions,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;         <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnInputType,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;         <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnOutputType,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;         <span class="keyword">typename</span> InputDataType,</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;         <span class="keyword">typename</span> OutputDataType&gt;</div><div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a04a887d03d9ae67300e40c738a495331">  180</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a9e0ef357389fbb780ad5ecd979ac5e95">ParserFlatbuffersSerializeFixture::RunTest</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> layersId,</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                                <span class="keyword">const</span> std::vector&lt;InputDataType&gt;&amp; inputData,</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                                <span class="keyword">const</span> std::vector&lt;OutputDataType&gt;&amp; expectedOutputData)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;{</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    RunTest&lt;NumOutputDimensions, ArmnnInputType, ArmnnOutputType&gt;(layersId,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                                                                  { { <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">m_SingleInputName</a>, inputData } },</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                                                  { { <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">m_SingleOutputName</a>, expectedOutputData } });</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keyword">template</span>&lt;std::<span class="keywordtype">size_t</span> NumOutputDimensions, armnn::DataType ArmnnType, <span class="keyword">typename</span> DataType&gt;</div><div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#acc794a616d9a3096559e95e3b1a3d651">  190</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a9e0ef357389fbb780ad5ecd979ac5e95">ParserFlatbuffersSerializeFixture::RunTest</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> layersId,</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                                <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;DataType&gt;&gt;&amp; inputData,</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                                                <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;DataType&gt;&gt;&amp; expectedOutputData)</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;{</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    RunTest&lt;NumOutputDimensions, ArmnnType, ArmnnType, DataType, DataType&gt;(layersId, inputData, expectedOutputData);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="keyword">template</span>&lt;std::size_t NumOutputDimensions,</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;         <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnInputType,</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;         <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnOutputType,</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;         <span class="keyword">typename</span> InputDataType,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;         <span class="keyword">typename</span> OutputDataType&gt;</div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a8dd0848c39b17c4401325390d170e24c">  202</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a9e0ef357389fbb780ad5ecd979ac5e95">ParserFlatbuffersSerializeFixture::RunTest</a>(</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> layersId,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;InputDataType&gt;&gt;&amp; inputData,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">const</span> std::map&lt;std::string, std::vector&lt;OutputDataType&gt;&gt;&amp; expectedOutputData)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;{</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">auto</span> ConvertBindingInfo = [](<span class="keyword">const</span> <a class="code" href="structarmnn_deserializer_1_1_binding_point_info.xhtml">armnnDeserializer::BindingPointInfo</a>&amp; bindingInfo)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keywordflow">return</span> std::make_pair(bindingInfo.m_BindingId, bindingInfo.m_TensorInfo);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        };</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="comment">// Setup the armnn input tensors from the given vectors.</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> inputTensors;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : inputData)</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> bindingInfo = ConvertBindingInfo(</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a1b4988dc1a728466d3f1b5b30513a97a">m_Parser</a>-&gt;GetNetworkInputBindingInfo(layersId, it.first));</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        bindingInfo.second.SetConstant(<span class="keyword">true</span>);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a9667bea652e3a5ef81fea59b71513ced">armnn::VerifyTensorInfoDataType</a>(bindingInfo.second, ArmnnInputType);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        inputTensors.push_back({ bindingInfo.first, <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>(bindingInfo.second, it.second.data()) });</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="comment">// Allocate storage for the output tensors to be written to and setup the armnn output tensors.</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    std::map&lt;std::string, std::vector&lt;OutputDataType&gt;&gt; outputStorage;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> outputTensors;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> bindingInfo = ConvertBindingInfo(</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a1b4988dc1a728466d3f1b5b30513a97a">m_Parser</a>-&gt;GetNetworkOutputBindingInfo(layersId, it.first));</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a9667bea652e3a5ef81fea59b71513ced">armnn::VerifyTensorInfoDataType</a>(bindingInfo.second, ArmnnOutputType);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        outputStorage.emplace(it.first, std::vector&lt;OutputDataType&gt;(bindingInfo.second.GetNumElements()));</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        outputTensors.push_back(</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                { bindingInfo.first, <a class="code" href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a>(bindingInfo.second, outputStorage.at(it.first).data()) });</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    }</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>-&gt;EnqueueWorkload(<a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">m_NetworkIdentifier</a>, inputTensors, outputTensors);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="comment">// Compare each output tensor to the expected values</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp;&amp; it : expectedOutputData)</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> bindingInfo = ConvertBindingInfo(</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <a class="code" href="struct_parser_flatbuffers_serialize_fixture.xhtml#a1b4988dc1a728466d3f1b5b30513a97a">m_Parser</a>-&gt;GetNetworkOutputBindingInfo(layersId, it.first));</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keyword">auto</span> outputExpected = it.second;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keyword">auto</span> result = <a class="code" href="include_2armnn_test_utils_2_tensor_helpers_8hpp.xhtml#a5fea88a1c3398e303fb83b6db155ff2d">CompareTensors</a>(outputExpected, outputStorage[it.first],</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                     bindingInfo.second.GetShape(), bindingInfo.second.GetShape());</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        CHECK_MESSAGE(result.m_Result, result.m_Message.str());</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div><div class="ttc" id="_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_serialize_fixture_xhtml_a2889be68b376ed9d92cd074610a24a8c"><div class="ttname"><a href="struct_parser_flatbuffers_serialize_fixture.xhtml#a2889be68b376ed9d92cd074610a24a8c">ParserFlatbuffersSerializeFixture::CheckTensors</a></div><div class="ttdeci">void CheckTensors(const TensorRawPtr &amp;tensors, size_t shapeSize, const std::vector&lt; int32_t &gt; &amp;shape, armnnSerializer::TensorInfo tensorType, const std::string &amp;name, const float scale, const int64_t zeroPoint)</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00153">ParserFlatbuffersSerializeFixture.hpp:153</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aea83c2c4e9b658ccafbcbe6309c5d84c64">armnn::Compute::CpuRef</a></div><div class="ttdoc">CPU Execution: Reference C++ kernels. </div></div>
<div class="ttc" id="struct_parser_flatbuffers_serialize_fixture_xhtml_a9e0ef357389fbb780ad5ecd979ac5e95"><div class="ttname"><a href="struct_parser_flatbuffers_serialize_fixture.xhtml#a9e0ef357389fbb780ad5ecd979ac5e95">ParserFlatbuffersSerializeFixture::RunTest</a></div><div class="ttdeci">void RunTest(unsigned int layersId, const std::vector&lt; DataType &gt; &amp;inputData, const std::vector&lt; DataType &gt; &amp;expectedOutputData)</div><div class="ttdoc">Executes the network with the given input tensor and checks the result against the given output tenso...</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00168">ParserFlatbuffersSerializeFixture.hpp:168</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_serialize_fixture_xhtml_a2bb4ea256fbbf6d53068ca93bb4bc95c"><div class="ttname"><a href="struct_parser_flatbuffers_serialize_fixture.xhtml#a2bb4ea256fbbf6d53068ca93bb4bc95c">ParserFlatbuffersSerializeFixture::SetupSingleInputSingleOutput</a></div><div class="ttdeci">void SetupSingleInputSingleOutput(const std::string &amp;inputName, const std::string &amp;outputName)</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00083">ParserFlatbuffersSerializeFixture.hpp:83</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_serialize_fixture_xhtml_accb0415cfdd9f1dbcf83d8e761edeb33"><div class="ttname"><a href="struct_parser_flatbuffers_serialize_fixture.xhtml#accb0415cfdd9f1dbcf83d8e761edeb33">ParserFlatbuffersSerializeFixture::ParserFlatbuffersSerializeFixture</a></div><div class="ttdeci">ParserFlatbuffersSerializeFixture()</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00031">ParserFlatbuffersSerializeFixture.hpp:31</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_serialize_fixture_xhtml_a69fc8e7f42386fa67732cb8c98d8b024"><div class="ttname"><a href="struct_parser_flatbuffers_serialize_fixture.xhtml#a69fc8e7f42386fa67732cb8c98d8b024">ParserFlatbuffersSerializeFixture::ReadStringToBinary</a></div><div class="ttdeci">bool ReadStringToBinary()</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00091">ParserFlatbuffersSerializeFixture.hpp:91</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a150468a02bd7b2d2d061c4aaaee939f0"><div class="ttname"><a href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a></div><div class="ttdeci">std::unique_ptr&lt; IRuntime, void(*)(IRuntime *runtime)&gt; IRuntimePtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00031">IRuntime.hpp:31</a></div></div>
<div class="ttc" id="_i_runtime_8hpp_xhtml"><div class="ttname"><a href="_i_runtime_8hpp.xhtml">IRuntime.hpp</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_serialize_fixture_xhtml_a0b81fa34e5ca505b9880755f702fafe7"><div class="ttname"><a href="struct_parser_flatbuffers_serialize_fixture.xhtml#a0b81fa34e5ca505b9880755f702fafe7">ParserFlatbuffersSerializeFixture::m_NetworkIdentifier</a></div><div class="ttdeci">armnn::NetworkId m_NetworkIdentifier</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00042">ParserFlatbuffersSerializeFixture.hpp:42</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_serialize_fixture_xhtml_a769404f2985a027a0d626fedfd4de1e9"><div class="ttname"><a href="struct_parser_flatbuffers_serialize_fixture.xhtml#a769404f2985a027a0d626fedfd4de1e9">ParserFlatbuffersSerializeFixture::Setup</a></div><div class="ttdeci">void Setup()</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00049">ParserFlatbuffersSerializeFixture.hpp:49</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0743ed5e860c316a20b68ca96301b411"><div class="ttname"><a href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a></div><div class="ttdeci">typename ResolveTypeImpl&lt; DT &gt;::Type ResolveType</div><div class="ttdef"><b>Definition:</b> <a href="_resolve_type_8hpp_source.xhtml#l00079">ResolveType.hpp:79</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="_resolve_type_8hpp_xhtml"><div class="ttname"><a href="_resolve_type_8hpp.xhtml">ResolveType.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_serialize_fixture_xhtml_a1b4988dc1a728466d3f1b5b30513a97a"><div class="ttname"><a href="struct_parser_flatbuffers_serialize_fixture.xhtml#a1b4988dc1a728466d3f1b5b30513a97a">ParserFlatbuffersSerializeFixture::m_Parser</a></div><div class="ttdeci">std::unique_ptr&lt; IDeserializer, void(*)(IDeserializer *parser)&gt; m_Parser</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00040">ParserFlatbuffersSerializeFixture.hpp:40</a></div></div>
<div class="ttc" id="structarmnn_deserializer_1_1_binding_point_info_xhtml"><div class="ttname"><a href="structarmnn_deserializer_1_1_binding_point_info.xhtml">armnnDeserializer::BindingPointInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_deserializer_8hpp_source.xhtml#l00018">IDeserializer.hpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor.xhtml">armnn::Tensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and a mutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00319">Tensor.hpp:319</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_serialize_fixture_xhtml"><div class="ttname"><a href="struct_parser_flatbuffers_serialize_fixture.xhtml">ParserFlatbuffersSerializeFixture</a></div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00029">ParserFlatbuffersSerializeFixture.hpp:29</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00035">Types.hpp:35</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01680">Network.cpp:1680</a></div></div>
<div class="ttc" id="_parser_flatbuffers_serialize_fixture_8hpp_xhtml_a15c20a0693cd3fc4d85565e2f920d8ef"><div class="ttname"><a href="_parser_flatbuffers_serialize_fixture_8hpp.xhtml#a15c20a0693cd3fc4d85565e2f920d8ef">TensorRawPtr</a></div><div class="ttdeci">armnnSerializer::TensorInfo * TensorRawPtr</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00027">ParserFlatbuffersSerializeFixture.hpp:27</a></div></div>
<div class="ttc" id="_schema_serialize_8hpp_xhtml"><div class="ttname"><a href="_schema_serialize_8hpp.xhtml">SchemaSerialize.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0d8160388a127c1a23b37bc88dc6e2ec"><div class="ttname"><a href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00025">IRuntime.hpp:25</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00029">Types.hpp:29</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_serialize_fixture_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="struct_parser_flatbuffers_serialize_fixture.xhtml#aefd699eb0838261fbe9770d511f63f24">ParserFlatbuffersSerializeFixture::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00041">ParserFlatbuffersSerializeFixture.hpp:41</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_serialize_fixture_xhtml_add32b4d209a5b5d6ea6db94b9894ad75"><div class="ttname"><a href="struct_parser_flatbuffers_serialize_fixture.xhtml#add32b4d209a5b5d6ea6db94b9894ad75">ParserFlatbuffersSerializeFixture::m_SingleOutputName</a></div><div class="ttdeci">std::string m_SingleOutputName</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00047">ParserFlatbuffersSerializeFixture.hpp:47</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_helpers_8hpp_xhtml_a5fea88a1c3398e303fb83b6db155ff2d"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_helpers_8hpp.xhtml#a5fea88a1c3398e303fb83b6db155ff2d">CompareTensors</a></div><div class="ttdeci">armnn::PredicateResult CompareTensors(const std::vector&lt; T &gt; &amp;actualData, const std::vector&lt; T &gt; &amp;expectedData, const armnn::TensorShape &amp;actualShape, const armnn::TensorShape &amp;expectedShape, bool compareBoolean=false, bool isDynamic=false)</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_test_utils_2_tensor_helpers_8hpp_source.xhtml#l00073">TensorHelpers.hpp:73</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_helpers_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_helpers_8hpp.xhtml">TensorHelpers.hpp</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml"><div class="ttname"><a href="_assert_8hpp.xhtml">Assert.hpp</a></div></div>
<div class="ttc" id="_armnn_schema__generated_8h_xhtml"><div class="ttname"><a href="_armnn_schema__generated_8h.xhtml">ArmnnSchema_generated.h</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a280670a263dc4fd40491f6d0a2737f44"><div class="ttname"><a href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></div><div class="ttdeci">std::pair&lt; armnn::LayerBindingId, armnn::TensorInfo &gt; BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00274">Tensor.hpp:274</a></div></div>
<div class="ttc" id="_schema_serialize_8hpp_xhtml_a0cc366ea2aac864a65b56f2c6e5dbcd0"><div class="ttname"><a href="_schema_serialize_8hpp.xhtml#a0cc366ea2aac864a65b56f2c6e5dbcd0">deserialize_schema_start</a></div><div class="ttdeci">const char deserialize_schema_start</div></div>
<div class="ttc" id="_i_deserializer_8hpp_xhtml"><div class="ttname"><a href="_i_deserializer_8hpp.xhtml">IDeserializer.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="_schema_serialize_8hpp_xhtml_a535b75d8b7b9ae68d8c9de8937ebd8d8"><div class="ttname"><a href="_schema_serialize_8hpp.xhtml#a535b75d8b7b9ae68d8c9de8937ebd8d8">deserialize_schema_end</a></div><div class="ttdeci">const char deserialize_schema_end</div></div>
<div class="ttc" id="struct_parser_flatbuffers_serialize_fixture_xhtml_a803c86dca3acef653c1cc481a27be7a9"><div class="ttname"><a href="struct_parser_flatbuffers_serialize_fixture.xhtml#a803c86dca3acef653c1cc481a27be7a9">ParserFlatbuffersSerializeFixture::m_JsonString</a></div><div class="ttdeci">std::string m_JsonString</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00039">ParserFlatbuffersSerializeFixture.hpp:39</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9667bea652e3a5ef81fea59b71513ced"><div class="ttname"><a href="namespacearmnn.xhtml#a9667bea652e3a5ef81fea59b71513ced">armnn::VerifyTensorInfoDataType</a></div><div class="ttdeci">void VerifyTensorInfoDataType(const armnn::TensorInfo &amp;info, armnn::DataType dataType)</div><div class="ttdef"><b>Definition:</b> <a href="_types_utils_8hpp_source.xhtml#l00337">TypesUtils.hpp:337</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00241">INetwork.hpp:241</a></div></div>
<div class="ttc" id="classarmnn_deserializer_1_1_i_deserializer_xhtml"><div class="ttname"><a href="classarmnn_deserializer_1_1_i_deserializer.xhtml">armnnDeserializer::IDeserializer</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_deserializer_8hpp_source.xhtml#l00027">IDeserializer.hpp:27</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_serialize_fixture_xhtml_a9fbc789fd0aca759cb40737fdeb8ed63"><div class="ttname"><a href="struct_parser_flatbuffers_serialize_fixture.xhtml#a9fbc789fd0aca759cb40737fdeb8ed63">ParserFlatbuffersSerializeFixture::m_GraphBinary</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; m_GraphBinary</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00038">ParserFlatbuffersSerializeFixture.hpp:38</a></div></div>
<div class="ttc" id="struct_parser_flatbuffers_serialize_fixture_xhtml_a2f8365158b7c75e43897fbe804b7fc4f"><div class="ttname"><a href="struct_parser_flatbuffers_serialize_fixture.xhtml#a2f8365158b7c75e43897fbe804b7fc4f">ParserFlatbuffersSerializeFixture::m_SingleInputName</a></div><div class="ttdeci">std::string m_SingleInputName</div><div class="ttdoc">If the single-input-single-output overload of Setup() is called, these will store the input and outpu...</div><div class="ttdef"><b>Definition:</b> <a href="_parser_flatbuffers_serialize_fixture_8hpp_source.xhtml#l00046">ParserFlatbuffersSerializeFixture.hpp:46</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_926e64104daaa2ed9ca6061297f76df9.xhtml">armnnDeserializer</a></li><li class="navelem"><a class="el" href="dir_5f8021bbd8815b3505ceb680cf087e1e.xhtml">test</a></li><li class="navelem"><a class="el" href="_parser_flatbuffers_serialize_fixture_8hpp.xhtml">ParserFlatbuffersSerializeFixture.hpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:00:08 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
