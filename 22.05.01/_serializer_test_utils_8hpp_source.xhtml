<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnnSerializer/test/SerializerTestUtils.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_serializer_test_utils_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">SerializerTestUtils.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_serializer_test_utils_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2021 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_descriptors_8hpp.xhtml">armnn/Descriptors.hpp</a>&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_network_8hpp.xhtml">armnn/INetwork.hpp</a>&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_utils_8hpp.xhtml">armnn/TypesUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_deserializer_8hpp.xhtml">armnnDeserializer/IDeserializer.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;random&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;doctest/doctest.h&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> <a class="code" href="_serializer_test_utils_8hpp.xhtml#a59d03e40f8f051241e46091cca50d31f">DeserializeNetwork</a>(<span class="keyword">const</span> std::string&amp; serializerString);</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;std::string <a class="code" href="_serializer_test_utils_8hpp.xhtml#a228162aa622e2e39abb4f498c761ab5e">SerializeNetwork</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a>&amp; network);</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keywordtype">void</span> <a class="code" href="_serializer_test_utils_8hpp.xhtml#a104f74b01c30ad4a17d765309a9731bd">CompareConstTensor</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>&amp; tensor1, <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>&amp; tensor2);</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="class_layer_verifier_base.xhtml">   24</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_layer_verifier_base.xhtml">LayerVerifierBase</a> : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1_i_strategy.xhtml">armnn::IStrategy</a></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <a class="code" href="class_layer_verifier_base.xhtml#a39bdf94af97d9484d02649b749da327c">LayerVerifierBase</a>(<span class="keyword">const</span> std::string&amp; layerName,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                      <span class="keyword">const</span> std::vector&lt;armnn::TensorInfo&gt;&amp; inputInfos,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                      <span class="keyword">const</span> std::vector&lt;armnn::TensorInfo&gt;&amp; outputInfos);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_layer_verifier_base.xhtml#a49f7f1098adb86fd2197d9aee3924de2">ExecuteStrategy</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_base_descriptor.xhtml">armnn::BaseDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                         <span class="keyword">const</span> std::vector&lt;armnn::ConstTensor&gt;&amp; constants,</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                         <span class="keyword">const</span> <span class="keywordtype">char</span>* name,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                         <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> <span class="keywordtype">id</span> = 0) <span class="keyword">override</span>;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_layer_verifier_base.xhtml#a56e5da77beb8c601e09bf78371b95828">VerifyNameAndConnections</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer, <span class="keyword">const</span> <span class="keywordtype">char</span>* name);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_layer_verifier_base.xhtml#a9c63da545906a03b453fff6b556ed6ad">VerifyConstTensors</a>(<span class="keyword">const</span> std::string&amp; tensorName,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>* expectedPtr,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a>* actualPtr);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    std::string m_LayerName;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    std::vector&lt;armnn::TensorInfo&gt; m_InputTensorInfos;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    std::vector&lt;armnn::TensorInfo&gt; m_OutputTensorInfos;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;};</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Descriptor&gt;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="class_layer_verifier_base_with_descriptor.xhtml">   51</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_layer_verifier_base_with_descriptor.xhtml">LayerVerifierBaseWithDescriptor</a> : <span class="keyword">public</span> <a class="code" href="class_layer_verifier_base.xhtml">LayerVerifierBase</a></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="class_layer_verifier_base_with_descriptor.xhtml#a323b0872a098739d4c8d0ba81490f022">   54</a></span>&#160;    <a class="code" href="class_layer_verifier_base_with_descriptor.xhtml#a323b0872a098739d4c8d0ba81490f022">LayerVerifierBaseWithDescriptor</a>(<span class="keyword">const</span> std::string&amp; layerName,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                                    <span class="keyword">const</span> std::vector&lt;armnn::TensorInfo&gt;&amp; inputInfos,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                                    <span class="keyword">const</span> std::vector&lt;armnn::TensorInfo&gt;&amp; outputInfos,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                                    <span class="keyword">const</span> Descriptor&amp; descriptor)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        : <a class="code" href="class_layer_verifier_base.xhtml">LayerVerifierBase</a>(layerName, inputInfos, outputInfos)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        , m_Descriptor(descriptor) {}</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="class_layer_verifier_base_with_descriptor.xhtml#a49f7f1098adb86fd2197d9aee3924de2">   61</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_layer_verifier_base_with_descriptor.xhtml#a49f7f1098adb86fd2197d9aee3924de2">ExecuteStrategy</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_base_descriptor.xhtml">armnn::BaseDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                         <span class="keyword">const</span> std::vector&lt;armnn::ConstTensor&gt;&amp; constants,</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                         <span class="keyword">const</span> <span class="keywordtype">char</span>* name,</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                         <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> <span class="keywordtype">id</span> = 0)<span class="keyword"> override</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(constants, <span class="keywordtype">id</span>);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">switch</span> (layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">GetType</a>())</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a>: <span class="keywordflow">break</span>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a>: <span class="keywordflow">break</span>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::LayerType::Constant</a>: <span class="keywordflow">break</span>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <a class="code" href="class_layer_verifier_base.xhtml#a56e5da77beb8c601e09bf78371b95828">VerifyNameAndConnections</a>(layer, name);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="keyword">const</span> Descriptor&amp; internalDescriptor = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Descriptor&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                VerifyDescriptor(internalDescriptor);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="class_layer_verifier_base_with_descriptor.xhtml#a05ef6b0820f03499921f103759525a80">   84</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_layer_verifier_base_with_descriptor.xhtml#a05ef6b0820f03499921f103759525a80">VerifyDescriptor</a>(<span class="keyword">const</span> Descriptor&amp; descriptor)</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        CHECK(descriptor == m_Descriptor);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="class_layer_verifier_base_with_descriptor.xhtml#ace902ee0475eaa43381205dac041e342">   89</a></span>&#160;    Descriptor <a class="code" href="class_layer_verifier_base_with_descriptor.xhtml#ace902ee0475eaa43381205dac041e342">m_Descriptor</a>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;};</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="_serializer_test_utils_8hpp.xhtml#ac67c744dcc3724ed775868c5b0ba22e3">   93</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="_serializer_test_utils_8hpp.xhtml#ac67c744dcc3724ed775868c5b0ba22e3">CompareConstTensorData</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* data1, <span class="keyword">const</span> <span class="keywordtype">void</span>* data2, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numElements)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    T typedData1 = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(data1);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    T typedData2 = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(data2);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    CHECK(typedData1);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    CHECK(typedData2);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numElements; i++)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        CHECK(typedData1[i] == typedData2[i]);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Descriptor&gt;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="class_layer_verifier_base_with_descriptor_and_constants.xhtml">  108</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_layer_verifier_base_with_descriptor_and_constants.xhtml">LayerVerifierBaseWithDescriptorAndConstants</a> : <span class="keyword">public</span> <a class="code" href="class_layer_verifier_base_with_descriptor.xhtml">LayerVerifierBaseWithDescriptor</a>&lt;Descriptor&gt;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="class_layer_verifier_base_with_descriptor_and_constants.xhtml#ae3e49b2e71417d7ee1679399d18abb58">  111</a></span>&#160;    <a class="code" href="class_layer_verifier_base_with_descriptor_and_constants.xhtml#ae3e49b2e71417d7ee1679399d18abb58">LayerVerifierBaseWithDescriptorAndConstants</a>(<span class="keyword">const</span> std::string&amp; layerName,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                                <span class="keyword">const</span> std::vector&lt;armnn::TensorInfo&gt;&amp; inputInfos,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                                <span class="keyword">const</span> std::vector&lt;armnn::TensorInfo&gt;&amp; outputInfos,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                                <span class="keyword">const</span> Descriptor&amp; descriptor,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                                <span class="keyword">const</span> std::vector&lt;armnn::ConstTensor&gt;&amp; constants)</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            : <a class="code" href="class_layer_verifier_base_with_descriptor.xhtml">LayerVerifierBaseWithDescriptor</a>&lt;Descriptor&gt;(layerName, inputInfos, outputInfos, descriptor)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            , m_Constants(constants) {}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="class_layer_verifier_base_with_descriptor_and_constants.xhtml#a49f7f1098adb86fd2197d9aee3924de2">  119</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_layer_verifier_base_with_descriptor_and_constants.xhtml#a49f7f1098adb86fd2197d9aee3924de2">ExecuteStrategy</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_base_descriptor.xhtml">armnn::BaseDescriptor</a>&amp; descriptor,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                         <span class="keyword">const</span> std::vector&lt;armnn::ConstTensor&gt;&amp; constants,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                         <span class="keyword">const</span> <span class="keywordtype">char</span>* name,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                         <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a> <span class="keywordtype">id</span> = 0)<span class="keyword"> override</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">switch</span> (layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">GetType</a>())</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a>: <span class="keywordflow">break</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a>: <span class="keywordflow">break</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::LayerType::Constant</a>: <span class="keywordflow">break</span>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                this-&gt;<a class="code" href="class_layer_verifier_base.xhtml#a56e5da77beb8c601e09bf78371b95828">VerifyNameAndConnections</a>(layer, name);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="keyword">const</span> Descriptor&amp; internalDescriptor = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Descriptor&amp;<span class="keyword">&gt;</span>(descriptor);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                this-&gt;VerifyDescriptor(internalDescriptor);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                <span class="keywordflow">for</span>(std::size_t i = 0; i &lt; constants.size(); i++)</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    <a class="code" href="_serializer_test_utils_8hpp.xhtml#a104f74b01c30ad4a17d765309a9731bd">CompareConstTensor</a>(constants[i], m_Constants[i]);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    std::vector&lt;armnn::ConstTensor&gt; m_Constants;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;};</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> DataType&gt;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">static</span> std::vector&lt;DataType&gt; GenerateRandomData(<span class="keywordtype">size_t</span> size)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;{</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    constexpr <span class="keywordtype">bool</span> isIntegerType = std::is_integral&lt;DataType&gt;::value;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">using</span> Distribution =</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keyword">typename</span> std::conditional&lt;isIntegerType,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                  std::uniform_int_distribution&lt;DataType&gt;,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                  std::uniform_real_distribution&lt;DataType&gt;&gt;::type;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">static</span> constexpr <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> lowerLimit = std::numeric_limits&lt;DataType&gt;::min();</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">static</span> constexpr <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> upperLimit = std::numeric_limits&lt;DataType&gt;::max();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">static</span> Distribution distribution(lowerLimit, upperLimit);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">static</span> std::default_random_engine generator;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    std::vector&lt;DataType&gt; randomData(size);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    generate(randomData.begin(), randomData.end(), []() { <span class="keywordflow">return</span> distribution(generator); });</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">return</span> randomData;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div><div class="ttc" id="_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="_serializer_test_utils_8hpp_xhtml_a228162aa622e2e39abb4f498c761ab5e"><div class="ttname"><a href="_serializer_test_utils_8hpp.xhtml#a228162aa622e2e39abb4f498c761ab5e">SerializeNetwork</a></div><div class="ttdeci">std::string SerializeNetwork(const armnn::INetwork &amp;network)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8cpp_source.xhtml#l00159">SerializerTestUtils.cpp:159</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00066">INetwork.hpp:66</a></div></div>
<div class="ttc" id="class_layer_verifier_base_with_descriptor_xhtml"><div class="ttname"><a href="class_layer_verifier_base_with_descriptor.xhtml">LayerVerifierBaseWithDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8hpp_source.xhtml#l00051">SerializerTestUtils.hpp:51</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div></div>
<div class="ttc" id="class_layer_verifier_base_with_descriptor_xhtml_a05ef6b0820f03499921f103759525a80"><div class="ttname"><a href="class_layer_verifier_base_with_descriptor.xhtml#a05ef6b0820f03499921f103759525a80">LayerVerifierBaseWithDescriptor::VerifyDescriptor</a></div><div class="ttdeci">void VerifyDescriptor(const Descriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8hpp_source.xhtml#l00084">SerializerTestUtils.hpp:84</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a></div><div class="ttdoc">Main network class which provides the interface for building up a neural network. ...</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00249">INetwork.hpp:249</a></div></div>
<div class="ttc" id="class_layer_verifier_base_with_descriptor_xhtml_a323b0872a098739d4c8d0ba81490f022"><div class="ttname"><a href="class_layer_verifier_base_with_descriptor.xhtml#a323b0872a098739d4c8d0ba81490f022">LayerVerifierBaseWithDescriptor::LayerVerifierBaseWithDescriptor</a></div><div class="ttdeci">LayerVerifierBaseWithDescriptor(const std::string &amp;layerName, const std::vector&lt; armnn::TensorInfo &gt; &amp;inputInfos, const std::vector&lt; armnn::TensorInfo &gt; &amp;outputInfos, const Descriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8hpp_source.xhtml#l00054">SerializerTestUtils.hpp:54</a></div></div>
<div class="ttc" id="class_layer_verifier_base_with_descriptor_xhtml_a49f7f1098adb86fd2197d9aee3924de2"><div class="ttname"><a href="class_layer_verifier_base_with_descriptor.xhtml#a49f7f1098adb86fd2197d9aee3924de2">LayerVerifierBaseWithDescriptor::ExecuteStrategy</a></div><div class="ttdeci">void ExecuteStrategy(const armnn::IConnectableLayer *layer, const armnn::BaseDescriptor &amp;descriptor, const std::vector&lt; armnn::ConstTensor &gt; &amp;constants, const char *name, const armnn::LayerBindingId id=0) override</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8hpp_source.xhtml#l00061">SerializerTestUtils.hpp:61</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab8cf8f9fb6792e654c2d8d8382f6f01b"><div class="ttname"><a href="namespacearmnn.xhtml#ab8cf8f9fb6792e654c2d8d8382f6f01b">armnn::LayerBindingId</a></div><div class="ttdeci">int LayerBindingId</div><div class="ttdoc">Type of identifiers for bindable layers (inputs, outputs). </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00290">Types.hpp:290</a></div></div>
<div class="ttc" id="_serializer_test_utils_8hpp_xhtml_a59d03e40f8f051241e46091cca50d31f"><div class="ttname"><a href="_serializer_test_utils_8hpp.xhtml#a59d03e40f8f051241e46091cca50d31f">DeserializeNetwork</a></div><div class="ttdeci">armnn::INetworkPtr DeserializeNetwork(const std::string &amp;serializerString)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8cpp_source.xhtml#l00153">SerializerTestUtils.cpp:153</a></div></div>
<div class="ttc" id="structarmnn_1_1_base_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_base_descriptor.xhtml">armnn::BaseDescriptor</a></div><div class="ttdoc">Base class for all descriptors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00022">Descriptors.hpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_strategy_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_strategy.xhtml">armnn::IStrategy</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_strategy_8hpp_source.xhtml#l00013">IStrategy.hpp:13</a></div></div>
<div class="ttc" id="_types_utils_8hpp_xhtml"><div class="ttname"><a href="_types_utils_8hpp.xhtml">TypesUtils.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00048">Types.hpp:48</a></div></div>
<div class="ttc" id="class_layer_verifier_base_with_descriptor_and_constants_xhtml_a49f7f1098adb86fd2197d9aee3924de2"><div class="ttname"><a href="class_layer_verifier_base_with_descriptor_and_constants.xhtml#a49f7f1098adb86fd2197d9aee3924de2">LayerVerifierBaseWithDescriptorAndConstants::ExecuteStrategy</a></div><div class="ttdeci">void ExecuteStrategy(const armnn::IConnectableLayer *layer, const armnn::BaseDescriptor &amp;descriptor, const std::vector&lt; armnn::ConstTensor &gt; &amp;constants, const char *name, const armnn::LayerBindingId id=0) override</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8hpp_source.xhtml#l00119">SerializerTestUtils.hpp:119</a></div></div>
<div class="ttc" id="class_layer_verifier_base_xhtml_a56e5da77beb8c601e09bf78371b95828"><div class="ttname"><a href="class_layer_verifier_base.xhtml#a56e5da77beb8c601e09bf78371b95828">LayerVerifierBase::VerifyNameAndConnections</a></div><div class="ttdeci">void VerifyNameAndConnections(const armnn::IConnectableLayer *layer, const char *name)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8cpp_source.xhtml#l00040">SerializerTestUtils.cpp:40</a></div></div>
<div class="ttc" id="classarmnn_1_1_const_tensor_xhtml"><div class="ttname"><a href="classarmnn_1_1_const_tensor.xhtml">armnn::ConstTensor</a></div><div class="ttdoc">A tensor defined by a TensorInfo (shape and data type) and an immutable backing store. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00327">Tensor.hpp:327</a></div></div>
<div class="ttc" id="_serializer_test_utils_8hpp_xhtml_ac67c744dcc3724ed775868c5b0ba22e3"><div class="ttname"><a href="_serializer_test_utils_8hpp.xhtml#ac67c744dcc3724ed775868c5b0ba22e3">CompareConstTensorData</a></div><div class="ttdeci">void CompareConstTensorData(const void *data1, const void *data2, unsigned int numElements)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8hpp_source.xhtml#l00093">SerializerTestUtils.hpp:93</a></div></div>
<div class="ttc" id="class_layer_verifier_base_with_descriptor_and_constants_xhtml"><div class="ttname"><a href="class_layer_verifier_base_with_descriptor_and_constants.xhtml">LayerVerifierBaseWithDescriptorAndConstants</a></div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8hpp_source.xhtml#l00108">SerializerTestUtils.hpp:108</a></div></div>
<div class="ttc" id="class_layer_verifier_base_xhtml_a39bdf94af97d9484d02649b749da327c"><div class="ttname"><a href="class_layer_verifier_base.xhtml#a39bdf94af97d9484d02649b749da327c">LayerVerifierBase::LayerVerifierBase</a></div><div class="ttdeci">LayerVerifierBase(const std::string &amp;layerName, const std::vector&lt; armnn::TensorInfo &gt; &amp;inputInfos, const std::vector&lt; armnn::TensorInfo &gt; &amp;outputInfos)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8cpp_source.xhtml#l00013">SerializerTestUtils.cpp:13</a></div></div>
<div class="ttc" id="class_layer_verifier_base_with_descriptor_and_constants_xhtml_ae3e49b2e71417d7ee1679399d18abb58"><div class="ttname"><a href="class_layer_verifier_base_with_descriptor_and_constants.xhtml#ae3e49b2e71417d7ee1679399d18abb58">LayerVerifierBaseWithDescriptorAndConstants::LayerVerifierBaseWithDescriptorAndConstants</a></div><div class="ttdeci">LayerVerifierBaseWithDescriptorAndConstants(const std::string &amp;layerName, const std::vector&lt; armnn::TensorInfo &gt; &amp;inputInfos, const std::vector&lt; armnn::TensorInfo &gt; &amp;outputInfos, const Descriptor &amp;descriptor, const std::vector&lt; armnn::ConstTensor &gt; &amp;constants)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8hpp_source.xhtml#l00111">SerializerTestUtils.hpp:111</a></div></div>
<div class="ttc" id="class_layer_verifier_base_with_descriptor_xhtml_ace902ee0475eaa43381205dac041e342"><div class="ttname"><a href="class_layer_verifier_base_with_descriptor.xhtml#ace902ee0475eaa43381205dac041e342">LayerVerifierBaseWithDescriptor::m_Descriptor</a></div><div class="ttdeci">Descriptor m_Descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8hpp_source.xhtml#l00089">SerializerTestUtils.hpp:89</a></div></div>
<div class="ttc" id="class_layer_verifier_base_xhtml_a9c63da545906a03b453fff6b556ed6ad"><div class="ttname"><a href="class_layer_verifier_base.xhtml#a9c63da545906a03b453fff6b556ed6ad">LayerVerifierBase::VerifyConstTensors</a></div><div class="ttdeci">void VerifyConstTensors(const std::string &amp;tensorName, const armnn::ConstTensor *expectedPtr, const armnn::ConstTensor *actualPtr)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8cpp_source.xhtml#l00078">SerializerTestUtils.cpp:78</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_adceb04ae84c524e4d01881e3754a4d59"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#adceb04ae84c524e4d01881e3754a4d59">armnn::IConnectableLayer::GetType</a></div><div class="ttdeci">virtual LayerType GetType() const =0</div><div class="ttdoc">Returns the armnn::LayerType of this layer. </div></div>
<div class="ttc" id="_i_network_8hpp_xhtml"><div class="ttname"><a href="_i_network_8hpp.xhtml">INetwork.hpp</a></div></div>
<div class="ttc" id="_i_deserializer_8hpp_xhtml"><div class="ttname"><a href="_i_deserializer_8hpp.xhtml">IDeserializer.hpp</a></div></div>
<div class="ttc" id="_descriptors_8hpp_xhtml"><div class="ttname"><a href="_descriptors_8hpp.xhtml">Descriptors.hpp</a></div></div>
<div class="ttc" id="class_layer_verifier_base_xhtml"><div class="ttname"><a href="class_layer_verifier_base.xhtml">LayerVerifierBase</a></div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8hpp_source.xhtml#l00024">SerializerTestUtils.hpp:24</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00241">INetwork.hpp:241</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255"><div class="ttname"><a href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::PaddingMode::Constant</a></div></div>
<div class="ttc" id="_serializer_test_utils_8hpp_xhtml_a104f74b01c30ad4a17d765309a9731bd"><div class="ttname"><a href="_serializer_test_utils_8hpp.xhtml#a104f74b01c30ad4a17d765309a9731bd">CompareConstTensor</a></div><div class="ttdeci">void CompareConstTensor(const armnn::ConstTensor &amp;tensor1, const armnn::ConstTensor &amp;tensor2)</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8cpp_source.xhtml#l00122">SerializerTestUtils.cpp:122</a></div></div>
<div class="ttc" id="class_layer_verifier_base_xhtml_a49f7f1098adb86fd2197d9aee3924de2"><div class="ttname"><a href="class_layer_verifier_base.xhtml#a49f7f1098adb86fd2197d9aee3924de2">LayerVerifierBase::ExecuteStrategy</a></div><div class="ttdeci">void ExecuteStrategy(const armnn::IConnectableLayer *layer, const armnn::BaseDescriptor &amp;descriptor, const std::vector&lt; armnn::ConstTensor &gt; &amp;constants, const char *name, const armnn::LayerBindingId id=0) override</div><div class="ttdef"><b>Definition:</b> <a href="_serializer_test_utils_8cpp_source.xhtml#l00021">SerializerTestUtils.cpp:21</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_bff0d59bec81fb3d13742442d8f4421d.xhtml">armnnSerializer</a></li><li class="navelem"><a class="el" href="dir_fa9774f03679f86fc845ac51a8a81eba.xhtml">test</a></li><li class="navelem"><a class="el" href="_serializer_test_utils_8hpp.xhtml">SerializerTestUtils.hpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:20 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
