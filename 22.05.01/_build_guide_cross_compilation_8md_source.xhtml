<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: BuildGuideCrossCompilation.md Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_build_guide_cross_compilation_8md.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">BuildGuideCrossCompilation.md</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_build_guide_cross_compilation_8md.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;# How to Cross-Compile Arm NN on x86_64 for arm64</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;- [Introduction](#introduction)</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;- [Cross-compiling ToolChain](#cross-compiling-toolchain)</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;- [Install Cmake](#build-cmake)</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;- [Build and install Google&#39;s Protobuf library](#build-and-install-google-s-protobuf-library)</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;- [Download Arm NN](#download-arm-nn)</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;- [Build Arm Compute Library](#build-arm-compute-library)</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;- [Build Flatbuffer](#build-flatbuffer)</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;- [Build Onnx](#build-onnx)</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;- [Build TfLite](#build-tflite)</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;- [Build Arm NN](#build-armnn)</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;- [Generate TF Lite Schema](#generate-tflite-schema)</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;- [Build Standalone Sample Dynamic Backend](#build-standalone-sample-dynamic-backend)</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;- [Run Unit Tests](#run-unit-tests)</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;- [Troubleshooting and Errors:](#troubleshooting-and-errors-)</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;## Introduction</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;These are the step by step instructions on Cross-Compiling Arm NN under an x86_64 system to target an Arm64 Ubuntu Linux system. This build flow has been tested with Ubuntu 18.04 and 20.04 and it depends on the same version of Ubuntu or Debian being installed on both the build host and target machines. The instructions assume you are using a bash shell and show how to build the Arm NN core library, Protobuf, Tflite, Flatbuffer and Compute Libraries.</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;Start by creating a directory to contain all components:</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;&#39;&#39;&#39;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;mkdir $HOME/armnn-devenv</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;cd $HOME/armnn-devenv</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;&#39;&#39;&#39;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;## Cross-compiling ToolChain</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;* Install the standard cross-compilation libraries for arm64:</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;```</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;sudo apt install crossbuild-essential-arm64</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;```</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;## Install Cmake</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;Cmake 3.19rc3 is required to build TF Lite Delegate.</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;&#39;&#39;&#39;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;sudo apt-get install libssl-dev</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;wget https://github.com/Kitware/CMake/releases/download/v3.19.0-rc3/cmake-3.19.0-rc3.tar.gz</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;tar -zxvf cmake-3.19.0-rc3.tar.gz</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;cd cmake-3.19.0-rc3</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;./bootstrap --prefix=$HOME/armnn-devenv/cmake/install</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;make all install</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;cd..</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;&#39;&#39;&#39;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;## Build and install Google&#39;s Protobuf library</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;We support protobuf version 3.12.0</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;* Get protobuf from here: https://github.com/protocolbuffers/protobuf: </div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  (Requires Git if not previously installed: `sudo apt install git`) </div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;```bash</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;git clone -b v3.12.0 https://github.com/google/protobuf.git protobuf</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;cd protobuf</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;git submodule update --init --recursive</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;./autogen.sh</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;```</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;* Build a native (x86_64) version of the protobuf libraries and compiler (protoc):</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  (Requires cUrl, autoconf, llibtool, and other build dependencies if not previously installed: sudo apt install curl autoconf libtool build-essential g++)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;```</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;mkdir x86_64_build</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;cd x86_64_build</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;../configure --prefix=$HOME/armnn-devenv/google/x86_64_pb_install</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;make install -j16</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;cd ..</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;```</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;* Build the arm64 version of the protobuf libraries:</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;```</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;mkdir arm64_build</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;cd arm64_build</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;CC=aarch64-linux-gnu-gcc \</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;CXX=aarch64-linux-gnu-g++ \</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;../configure --host=aarch64-linux \</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;--prefix=$HOME/armnn-devenv/google/arm64_pb_install \</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;--with-protoc=$HOME/armnn-devenv/google/x86_64_pb_install/bin/protoc</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;make install -j16</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;cd ..</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;```</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;## Download Arm NN</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;* Clone Arm NN:</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;```bash</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;cd $HOME/armnn-devenv</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;git clone https://github.com/ARM-software/armnn.git</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;```</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;* Checkout Arm NN branch:</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;```bash</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;cd armnn</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;git checkout &lt;branch_name&gt;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;git pull</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;```</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;For example, if you want to check out the 21.11 release branch:</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;```bash</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;git checkout branches/armnn_21_11</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;git pull</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;```</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;## Build Arm Compute Library</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;* Clone Arm Compute Library:</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;```bash</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;cd $HOME/armnn-devenv</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;git clone https://github.com/ARM-software/ComputeLibrary.git</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;```</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;* Checkout Arm Compute Library release tag:</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;```bash</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;cd ComputeLibrary</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;git checkout &lt;tag_name&gt;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;```</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;Arm NN and Arm Compute Library are developed closely together. If you would like to use the Arm NN 21.11 release you will need the 21.11 release of ACL too. For example, if you want to checkout the 21.11 release tag:</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;```bash</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;git checkout v21.11</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;```</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;Arm NN provides a script that downloads the version of Arm Compute Library that Arm NN was tested with:</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;```bash</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;git checkout $(../armnn/scripts/get_compute_library.sh -p) </div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;```</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;* Build the Arm Compute Library:</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  (Requires SCons if not previously installed: `sudo apt install scons`)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;```bash</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;scons arch=arm64-v8a neon=1 opencl=1 embed_kernels=1 extra_cxx_flags=&quot;-fPIC&quot; -j4</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;```</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;## Build Flatbuffer</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;* Building Flatbuffer version 1.12.0</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;```bash</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;cd $HOME/armnn-devenv</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;wget -O flatbuffers-1.12.0.tar.gz https://github.com/google/flatbuffers/archive/v1.12.0.tar.gz</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;tar xf flatbuffers-1.12.0.tar.gz</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;cd flatbuffers-1.12.0</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;rm -f CMakeCache.txt</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;mkdir build</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;cd build</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;cmake .. -DFLATBUFFERS_BUILD_FLATC=1 \</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;     -DCMAKE_INSTALL_PREFIX:PATH=$HOME/armnn-devenv/flatbuffers \</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;     -DFLATBUFFERS_BUILD_TESTS=0</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;make all install</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;```</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;* Build arm64 version of flatbuffer</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;```bash</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;cd ..</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;mkdir build-arm64</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;cd build-arm64</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;# Add -fPIC to allow us to use the libraries in shared objects.</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;CXXFLAGS=&quot;-fPIC&quot; cmake .. -DCMAKE_C_COMPILER=/usr/bin/aarch64-linux-gnu-gcc \</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;     -DCMAKE_CXX_COMPILER=/usr/bin/aarch64-linux-gnu-g++ \</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;     -DFLATBUFFERS_BUILD_FLATC=1 \</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;     -DCMAKE_INSTALL_PREFIX:PATH=$HOME/armnn-devenv/flatbuffers-arm64 \</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;     -DFLATBUFFERS_BUILD_TESTS=0</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;make all install</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;```</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;## Build Onnx</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;* Building Onnx</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;```bash</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;cd $HOME/armnn-devenv</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;git clone https://github.com/onnx/onnx.git</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;cd onnx</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;git fetch https://github.com/onnx/onnx.git 553df22c67bee5f0fe6599cff60f1afc6748c635 &amp;&amp; git checkout FETCH_HEAD</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;LD_LIBRARY_PATH=$HOME/armnn-devenv/google/x86_64_pb_install/lib:$LD_LIBRARY_PATH \</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;$HOME/armnn-devenv/google/x86_64_pb_install/bin/protoc \</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;onnx/onnx.proto --proto_path=. --proto_path=../google/x86_64_pb_install/include --cpp_out $HOME/armnn-devenv/onnx</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;```</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;## Build TfLite</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;* Arm NN provides a script, armnn/scripts/get_tensorflow.sh, that can be used to check out the version of TensorFlow that Arm NN was tested with:</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;```bash</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;cd $HOME/armnn-devenv</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;git clone https://github.com/tensorflow/tensorflow.git</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;cd tensorflow/</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;git checkout $(../armnn/scripts/get_tensorflow.sh -p) # Checks out the latest tested version of TF</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;cd ..</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;```</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;* You will need to download gcc-arm-8.3-2019.03 toolchain and continue building TF Lite as following:</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;```</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;curl -LO https://storage.googleapis.com/mirror.tensorflow.org/developer.arm.com/media/Files/downloads/gnu-a/8.3-2019.03/binrel/gcc-arm-8.3-2019.03-x86_64-aarch64-linux-gnu.tar.xz</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;mkdir tflite-toolchains</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;tar xvf gcc-arm-8.3-2019.03-x86_64-aarch64-linux-gnu.tar.xz -C tflite-toolchains</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;mkdir -p tflite/build</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;cd tflite/build</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;ARMCC_PREFIX=$HOME/armnn-devenv/tflite-toolchains/gcc-arm-8.3-2019.03-x86_64-aarch64-linux-gnu/bin/aarch64-linux-gnu- \</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;ARMCC_FLAGS=&quot;-funsafe-math-optimizations&quot; \</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;cmake -DCMAKE_C_COMPILER=${ARMCC_PREFIX}gcc \</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;      -DCMAKE_CXX_COMPILER=${ARMCC_PREFIX}g++ \</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      -DCMAKE_C_FLAGS=&quot;${ARMCC_FLAGS}&quot; -DCMAKE_CXX_FLAGS=&quot;${ARMCC_FLAGS}&quot; \</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;      -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON  -DCMAKE_SYSTEM_NAME=Linux \</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;      -DTFLITE_ENABLE_XNNPACK=OFF \</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;      -DCMAKE_SYSTEM_PROCESSOR=aarch64 \</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;      $HOME/armnn-devenv/tensorflow/tensorflow/lite/ \</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;cmake --build .</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;```</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;## Generate TF Lite Schema</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;```</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;cd $HOME/armnn-devenv/tflite</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;cp $HOME/armnn-devenv/tensorflow/tensorflow/lite/schema/schema.fbs .</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;../flatbuffers-1.12.0/build/flatc -c --gen-object-api --reflect-types --reflect-names schema.fbs</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;```</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;## Build Arm NN</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;* Compile Arm NN for arm64:</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;```bash</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;cd $HOME/armnn-devenv/armnn</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;mkdir build</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;cd build</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;```</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;* Use CMake to configure your build environment, update the following script and run it from the armnn/build directory to set up the Arm NN build:</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;```bash</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;#!/bin/bash</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;CXX=aarch64-linux-gnu-g++ CC=aarch64-linux-gnu-gcc cmake .. \</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;-DARMCOMPUTE_ROOT=$HOME/armnn-devenv/ComputeLibrary \</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;-DARMCOMPUTE_BUILD_DIR=$HOME/armnn-devenv/ComputeLibrary/build/ \</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;-DARMCOMPUTENEON=1 -DARMCOMPUTECL=1 -DARMNNREF=1 \</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;-DONNX_GENERATED_SOURCES=$HOME/armnn-devenv/onnx \</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;-DBUILD_ONNX_PARSER=1 \</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;-DBUILD_TF_LITE_PARSER=1 \</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;-DTENSORFLOW_ROOT=$HOME/armnn-devenv/tensorflow \</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;-DTF_LITE_SCHEMA_INCLUDE_PATH=$WORKING_DIR/tflite \</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;-DFLATBUFFERS_ROOT=$HOME/armnn-devenv/flatbuffers-arm64 \</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;-DFLATC_DIR=$HOME/armnn-devenv/flatbuffers-1.12.0/build \</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;-DPROTOBUF_ROOT=$HOME/armnn-devenv/google/x86_64_pb_install \</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;-DPROTOBUF_LIBRARY_DEBUG=$HOME/armnn-devenv/google/arm64_pb_install/lib/libprotobuf.so.23.0.0 \</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;-DPROTOBUF_LIBRARY_RELEASE=$HOME/armnn-devenv/google/arm64_pb_install/lib/libprotobuf.so.23.0.0</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;```</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;* If you want to include standalone sample dynamic backend tests, add the argument to enable the tests and the dynamic backend path to the CMake command:</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;```bash</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;-DSAMPLE_DYNAMIC_BACKEND=1 \</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;-DDYNAMIC_BACKEND_PATHS=$SAMPLE_DYNAMIC_BACKEND_PATH</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;```</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;* If you want to build Arm NN TF Lite Delegate, add the arguments:</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;```bash</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;-DTFLITE_LIB_ROOT=$HOME/armnn-devenv/tflite/build \</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;-DBUILD_ARMNN_TFLITE_DELEGATE=1</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;```</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;* Run the build</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;```bash</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;make -j32</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;```</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;## Build Standalone Sample Dynamic Backend</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;* The sample dynamic backend is located in armnn/src/dynamic/sample</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;```bash</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;cd $HOME/armnn-devenv/armnn/src/dynamic/sample</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;mkdir build</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;cd build</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;```</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;* Use CMake to configure your build environment, update the following script and run it from the armnn/src/dynamic/sample/build directory to set up the Arm NN build:</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;```bash</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;#!/bin/bash</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;CXX=aarch64-linux-gnu-g++ CC=aarch64-linux-gnu-gcc cmake .. \</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;-DCMAKE_CXX_FLAGS=--std=c++14 \</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;-DARMNN_PATH=$HOME/armnn-devenv/armnn/build/libarmnn.so</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;```</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;* Run the build</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;```bash</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;make</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;```</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;## Run Unit Tests</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;* Copy the build folder to an arm64 linux machine</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;* Copy the libprotobuf.so.23.0.0 library file to the build folder</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;* If you enable the standalone sample dynamic tests, also copy libArm_SampleDynamic_backend.so library file to the folder specified as $SAMPLE_DYNAMIC_BACKEND_PATH when you build Arm NN </div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;* cd to the build folder on your arm64 machine and set your LD_LIBRARY_PATH to its current location:</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;```bash</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;cd build/</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;```</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;* Create a symbolic link to libprotobuf.so.23.0.0:</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;```bash</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;ln -s libprotobuf.so.23.0.0 ./libprotobuf.so.23</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;```</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;* Run the UnitTests:</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;```bash</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;LD_LIBRARY_PATH=./:$LD_LIBRARY_PATH ./UnitTests</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;[doctest] doctest version is &quot;2.4.6&quot;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;[doctest] run with &quot;--help&quot; for options</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;===============================================================================</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;[doctest] test cases:   4817 |   4817 passed | 0 failed | 0 skipped</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;[doctest] assertions: 807634 | 807634 passed | 0 failed |</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;[doctest] Status: SUCCESS!</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;```</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;* Run the Delegate UnitTests:</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;```bash</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;LD_LIBRARY_PATH=./:$LD_LIBRARY_PATH ./delegate/DelegateUnitTests</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;```</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;## Troubleshooting and Errors:</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;### Missing xxd</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;* When Cross-compiling Arm NN if you are getting error</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;```bash</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;[ 62%] Generating SchemaText.cpp</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;/bin/sh: 1: xxd: not found</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;make[2]: *** [armnn/CMakeFiles/UnitTests.dir/build.make:63: armnn/SchemaText.cpp] Error 127</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;make[1]: *** [CMakeFiles/Makefile2:674: armnn/CMakeFiles/UnitTests.dir/all] Error 2</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;make[1]: *** Waiting for unfinished jobs....</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;```</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;* Missing xxd, this can be fixed by installing it:</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;```bash</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;sudo apt-get install xxd</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;```</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;&lt;br&gt;&lt;br&gt;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;### Missing libz.so.1</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;* When compiling armNN:</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;```bash</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;/usr/lib/gcc-cross/aarch64-linux-gnu/5/../../../../aarch64-linux-gnu/bin/ld: warning: libz.so.1, needed by /home/&lt;username&gt;/armNN/usr/lib64/libprotobuf.so.23.0.0, not found (try using -rpath or -rpath-link)</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;```</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;* Missing arm64 libraries for libz.so.1, these can be added by adding a second architecture to dpkg and explicitly installing them:</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;```bash</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;sudo dpkg --add-architecture arm64</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;sudo apt-get install zlib1g:arm64</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;sudo apt-get update</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;sudo ldconfig</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;```</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;* If apt-get update returns 404 errors for arm64 repos refer to section 5 below.</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;* Alternatively the missing arm64 version of libz.so.1 can be downloaded and installed from a .deb package here:</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;      https://launchpad.net/ubuntu/wily/arm64/zlib1g/1:1.2.8.dfsg-2ubuntu4</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;```bash</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;sudo dpkg -i zlib1g_1.2.8.dfsg-2ubuntu4_arm64.deb</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;```</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;&lt;br&gt;&lt;br&gt;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;### Unable to install arm64 packages after adding arm64 architecture</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;* Using sudo apt-get update should add all of the required repos for arm64 but if it does not or you are getting 404 errors the following instructions can be used to add the repos manually:</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;* From stackoverflow:</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;https://askubuntu.com/questions/430705/how-to-use-apt-get-to-download-multi-arch-library/430718</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;* Open /etc/apt/sources.list with your preferred text editor.</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;* Mark all the current (default) repos as \[arch=&lt;current_os_arch&gt;], e.g.</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;```bash</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ xenial main restricted</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;```</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;* Then add the following:</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;```bash</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;deb [arch=arm64] http://ports.ubuntu.com/ xenial main restricted</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;deb [arch=arm64] http://ports.ubuntu.com/ xenial-updates main restricted</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;deb [arch=arm64] http://ports.ubuntu.com/ xenial universe</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;deb [arch=arm64] http://ports.ubuntu.com/ xenial-updates universe</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;deb [arch=arm64] http://ports.ubuntu.com/ xenial multiverse</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;deb [arch=arm64] http://ports.ubuntu.com/ xenial-updates multiverse</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;deb [arch=arm64] http://ports.ubuntu.com/ xenial-backports main restricted universe multiverse</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;```</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;* Update and install again:</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;```bash</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;sudo apt-get install zlib1g:arm64</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;sudo apt-get update</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;sudo ldconfig</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;```</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;&lt;br&gt;&lt;br&gt;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;### Undefined references to google::protobuf:: functions</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;* Missing or out of date protobuf compilation libraries.</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    Use the command &#39;protoc --version&#39; to check which version of protobuf is available (version 3.12.0 is required).</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    Follow the instructions above to install protobuf 3.12.0</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;&lt;br&gt;&lt;br&gt;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;### Errors on strict-aliasing rules when compiling the Compute Library</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;* When compiling the Compute Library there are multiple errors on strict-aliasing rules:</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; ```</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;cc1plus: error: unrecognized command line option ‘-Wno-implicit-fallthrough’ [-Werror]</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160; ```</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;* Add Werror=0 to the scons command:</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;```</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;scons arch=arm64-v8a neon=1 opencl=1 embed_kernels=1 extra_cxx_flags=&quot;-fPIC&quot; -j8 Werror=0</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;```</div></div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="_build_guide_cross_compilation_8md.xhtml">BuildGuideCrossCompilation.md</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:19:41 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
