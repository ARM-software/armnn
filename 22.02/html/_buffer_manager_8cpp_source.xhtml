<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/profiling/BufferManager.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_buffer_manager_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">BufferManager.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_buffer_manager_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2019 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_buffer_manager_8hpp.xhtml">BufferManager.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_packet_buffer_8hpp.xhtml">PacketBuffer.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;{</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">namespace </span>profiling</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;{</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a0aee89a45e5c21933b2f16b46bec25e3">   15</a></span>&#160;<a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a0aee89a45e5c21933b2f16b46bec25e3">BufferManager::BufferManager</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfBuffers, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxPacketSize)</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    : m_MaxBufferSize(maxPacketSize),</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;      m_NumberOfBuffers(numberOfBuffers),</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;      m_MaxNumberOfBuffers(numberOfBuffers * 3),</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;      m_CurrentNumberOfBuffers(numberOfBuffers)</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    Initialize();</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;}</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#ac3f43b4dd3fafd6b13342acc2263bbb4">   24</a></span>&#160;<a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#ac3f43b4dd3fafd6b13342acc2263bbb4">BufferManager::Reserve</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> requestedSize, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; reservedSize)</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    reservedSize = 0;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    std::unique_lock&lt;std::mutex&gt; availableListLock(m_AvailableMutex, std::defer_lock);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">if</span> (requestedSize &gt; m_MaxBufferSize)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    }</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    availableListLock.lock();</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">if</span> (m_AvailableList.empty())</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordflow">if</span> (m_CurrentNumberOfBuffers &lt; m_MaxNumberOfBuffers)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            <span class="comment">// create a temporary overflow/surge buffer and hand it back</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            m_CurrentNumberOfBuffers++;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            availableListLock.unlock();</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            <a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> buffer = std::make_unique&lt;PacketBuffer&gt;(m_MaxBufferSize);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            reservedSize = requestedSize;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="keywordflow">return</span> buffer;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="comment">// we have totally busted the limit. call a halt to new memory allocations.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            availableListLock.unlock();</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> buffer = std::move(m_AvailableList.back());</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    m_AvailableList.pop_back();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    availableListLock.unlock();</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    reservedSize = requestedSize;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> buffer;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a183eaa37ccd326bd82179bed901c7122">   58</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a183eaa37ccd326bd82179bed901c7122">BufferManager::Commit</a>(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a>&amp; packetBuffer, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size, <span class="keywordtype">bool</span> notifyConsumer)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    std::unique_lock&lt;std::mutex&gt; readableListLock(m_ReadableMutex, std::defer_lock);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    packetBuffer-&gt;Commit(size);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    readableListLock.lock();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    m_ReadableList.push(std::move(packetBuffer));</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    readableListLock.unlock();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">if</span> (notifyConsumer)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#af22fdc7450c285c4d7449425c8fe994f">FlushReadList</a>();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keywordtype">void</span> BufferManager::Initialize()</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    m_AvailableList.reserve(m_NumberOfBuffers);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    m_CurrentNumberOfBuffers = m_NumberOfBuffers;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; m_NumberOfBuffers; ++i)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> buffer = std::make_unique&lt;PacketBuffer&gt;(m_MaxBufferSize);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        m_AvailableList.emplace_back(std::move(buffer));</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a226108649851aa1b1a8168560c5228b5">   83</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a226108649851aa1b1a8168560c5228b5">BufferManager::Release</a>(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a>&amp; packetBuffer)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    std::unique_lock&lt;std::mutex&gt; availableListLock(m_AvailableMutex, std::defer_lock);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    packetBuffer-&gt;Release();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    availableListLock.lock();</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">if</span> (m_AvailableList.size() &lt;= m_NumberOfBuffers)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        m_AvailableList.push_back(std::move(packetBuffer));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="comment">// we have been handed a temporary overflow/surge buffer get rid of it</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        packetBuffer-&gt;Destroy();</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">if</span> (m_CurrentNumberOfBuffers &gt; m_NumberOfBuffers)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            --m_CurrentNumberOfBuffers;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    availableListLock.unlock();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a372de693ad40b3f42839c8ec6ac845f4">  104</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a372de693ad40b3f42839c8ec6ac845f4">BufferManager::Reset</a>()</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">//This method should only be called once all threads have been joined</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    std::lock_guard&lt;std::mutex&gt; readableListLock(m_ReadableMutex);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    std::lock_guard&lt;std::mutex&gt; availableListLock(m_AvailableMutex);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    m_AvailableList.clear();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    std::queue&lt;IPacketBufferPtr&gt;().<a class="code" href="namespacearmnn.xhtml#a14d7f180bf51e86850305965c3707e07">swap</a>(m_ReadableList);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    Initialize();</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">  116</a></span>&#160;<a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">BufferManager::GetReadableBuffer</a>()</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;{</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    std::unique_lock&lt;std::mutex&gt; readableListLock(m_ReadableMutex);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">if</span> (!m_ReadableList.empty())</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a> buffer = std::move(m_ReadableList.front());</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        m_ReadableList.pop();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        readableListLock.unlock();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">return</span> buffer;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">  129</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">BufferManager::MarkRead</a>(<a class="code" href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">IPacketBufferPtr</a>&amp; packetBuffer)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;{</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    std::unique_lock&lt;std::mutex&gt; availableListLock(m_AvailableMutex, std::defer_lock);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    packetBuffer-&gt;MarkRead();</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    availableListLock.lock();</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">if</span> (m_AvailableList.size() &lt;= m_NumberOfBuffers)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        m_AvailableList.push_back(std::move(packetBuffer));</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="comment">// we have been handed a temporary overflow/surge buffer get rid of it</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        packetBuffer-&gt;Destroy();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">if</span> (m_CurrentNumberOfBuffers &gt; m_NumberOfBuffers)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            --m_CurrentNumberOfBuffers;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    availableListLock.unlock();</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#ad675ff4e9053375bd41d0aad6b3bbb63">  150</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#ad675ff4e9053375bd41d0aad6b3bbb63">BufferManager::SetConsumer</a>(<a class="code" href="classarmnn_1_1profiling_1_1_i_consumer.xhtml">IConsumer</a>* consumer)</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;{</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    m_Consumer = consumer;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#af22fdc7450c285c4d7449425c8fe994f">  155</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#af22fdc7450c285c4d7449425c8fe994f">BufferManager::FlushReadList</a>()</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">// notify consumer that packet is ready to read</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">if</span> (m_Consumer != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        m_Consumer-&gt;<a class="code" href="classarmnn_1_1profiling_1_1_i_consumer.xhtml#a4b4fe1cfea0198d9defd88178f073365">SetReadyToRead</a>();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;} <span class="comment">// namespace profiling</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="_buffer_manager_8hpp_xhtml"><div class="ttname"><a href="_buffer_manager_8hpp.xhtml">BufferManager.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_consumer_xhtml_a4b4fe1cfea0198d9defd88178f073365"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_consumer.xhtml#a4b4fe1cfea0198d9defd88178f073365">armnn::profiling::IConsumer::SetReadyToRead</a></div><div class="ttdeci">virtual void SetReadyToRead()=0</div><div class="ttdoc">Set a &quot;ready to read&quot; flag in the buffer to notify the reading thread to start reading it...</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14d7f180bf51e86850305965c3707e07"><div class="ttname"><a href="namespacearmnn.xhtml#a14d7f180bf51e86850305965c3707e07">armnn::swap</a></div><div class="ttdeci">void swap(OriginsDescriptor &amp;first, OriginsDescriptor &amp;second)</div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00350">Descriptors.cpp:350</a></div></div>
<div class="ttc" id="_packet_buffer_8hpp_xhtml"><div class="ttname"><a href="_packet_buffer_8hpp.xhtml">PacketBuffer.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_i_consumer_xhtml"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_i_consumer.xhtml">armnn::profiling::IConsumer</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_consumer_8hpp_source.xhtml#l00014">IConsumer.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml_ad675ff4e9053375bd41d0aad6b3bbb63"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#ad675ff4e9053375bd41d0aad6b3bbb63">armnn::profiling::BufferManager::SetConsumer</a></div><div class="ttdeci">void SetConsumer(IConsumer *consumer) override</div><div class="ttdoc">Set Consumer on the buffer manager to be notified when there is a Commit Can only be one consumer...</div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8cpp_source.xhtml#l00150">BufferManager.cpp:150</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml_a0aee89a45e5c21933b2f16b46bec25e3"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a0aee89a45e5c21933b2f16b46bec25e3">armnn::profiling::BufferManager::BufferManager</a></div><div class="ttdeci">BufferManager(unsigned int numberOfBuffers=5, unsigned int maxPacketSize=4096)</div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8cpp_source.xhtml#l00015">BufferManager.cpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml_af22fdc7450c285c4d7449425c8fe994f"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#af22fdc7450c285c4d7449425c8fe994f">armnn::profiling::BufferManager::FlushReadList</a></div><div class="ttdeci">void FlushReadList() override</div><div class="ttdoc">Notify the Consumer buffer can be read. </div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8cpp_source.xhtml#l00155">BufferManager.cpp:155</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml_a183eaa37ccd326bd82179bed901c7122"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a183eaa37ccd326bd82179bed901c7122">armnn::profiling::BufferManager::Commit</a></div><div class="ttdeci">void Commit(IPacketBufferPtr &amp;packetBuffer, unsigned int size, bool notifyConsumer=true) override</div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8cpp_source.xhtml#l00058">BufferManager.cpp:58</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml_ac3f43b4dd3fafd6b13342acc2263bbb4"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#ac3f43b4dd3fafd6b13342acc2263bbb4">armnn::profiling::BufferManager::Reserve</a></div><div class="ttdeci">IPacketBufferPtr Reserve(unsigned int requestedSize, unsigned int &amp;reservedSize) override</div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8cpp_source.xhtml#l00024">BufferManager.cpp:24</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml_abce8709dc1b666a26f427ba7ff08b737"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#abce8709dc1b666a26f427ba7ff08b737">armnn::profiling::BufferManager::GetReadableBuffer</a></div><div class="ttdeci">IPacketBufferPtr GetReadableBuffer() override</div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8cpp_source.xhtml#l00116">BufferManager.cpp:116</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml_ae717263b3243e9f88f4caea6d31b0652"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#ae717263b3243e9f88f4caea6d31b0652">armnn::profiling::BufferManager::MarkRead</a></div><div class="ttdeci">void MarkRead(IPacketBufferPtr &amp;packetBuffer) override</div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8cpp_source.xhtml#l00129">BufferManager.cpp:129</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml_a372de693ad40b3f42839c8ec6ac845f4"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a372de693ad40b3f42839c8ec6ac845f4">armnn::profiling::BufferManager::Reset</a></div><div class="ttdeci">void Reset()</div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8cpp_source.xhtml#l00104">BufferManager.cpp:104</a></div></div>
<div class="ttc" id="namespacearmnn_1_1profiling_xhtml_a14328d977cec3abadcfd5935f04f3409"><div class="ttname"><a href="namespacearmnn_1_1profiling.xhtml#a14328d977cec3abadcfd5935f04f3409">armnn::profiling::IPacketBufferPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IPacketBuffer &gt; IPacketBufferPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_packet_buffer_8hpp_source.xhtml#l00044">IPacketBuffer.hpp:44</a></div></div>
<div class="ttc" id="classarmnn_1_1profiling_1_1_buffer_manager_xhtml_a226108649851aa1b1a8168560c5228b5"><div class="ttname"><a href="classarmnn_1_1profiling_1_1_buffer_manager.xhtml#a226108649851aa1b1a8168560c5228b5">armnn::profiling::BufferManager::Release</a></div><div class="ttdeci">void Release(IPacketBufferPtr &amp;packetBuffer) override</div><div class="ttdef"><b>Definition:</b> <a href="_buffer_manager_8cpp_source.xhtml#l00083">BufferManager.cpp:83</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_637c692f14729569dd2eac0c18e2a54a.xhtml">profiling</a></li><li class="navelem"><a class="el" href="_buffer_manager_8cpp.xhtml">BufferManager.cpp</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:35 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
