<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: QueueDescriptor Struct Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('structarmnn_1_1_queue_descriptor.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="structarmnn_1_1_queue_descriptor-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">QueueDescriptor Struct Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_workload_data_8hpp_source.xhtml">WorkloadData.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for QueueDescriptor:</div>
<div class="dyncontent">
 <div class="center">
  <img src="structarmnn_1_1_queue_descriptor.png" usemap="#QueueDescriptor_map" alt=""/>
  <map id="QueueDescriptor_map" name="QueueDescriptor_map">
<area href="structarmnn_1_1_abs_queue_descriptor.xhtml" alt="AbsQueueDescriptor" shape="rect" coords="430,56,850,80"/>
<area href="structarmnn_1_1_addition_queue_descriptor.xhtml" alt="AdditionQueueDescriptor" shape="rect" coords="430,112,850,136"/>
<area href="structarmnn_1_1_cast_queue_descriptor.xhtml" alt="CastQueueDescriptor" shape="rect" coords="430,168,850,192"/>
<area href="structarmnn_1_1_constant_queue_descriptor.xhtml" alt="ConstantQueueDescriptor" shape="rect" coords="430,224,850,248"/>
<area href="structarmnn_1_1_convert_fp16_to_fp32_queue_descriptor.xhtml" alt="ConvertFp16ToFp32QueueDescriptor" shape="rect" coords="430,280,850,304"/>
<area href="structarmnn_1_1_convert_fp32_to_fp16_queue_descriptor.xhtml" alt="ConvertFp32ToFp16QueueDescriptor" shape="rect" coords="430,336,850,360"/>
<area href="structarmnn_1_1_debug_queue_descriptor.xhtml" alt="DebugQueueDescriptor" shape="rect" coords="430,392,850,416"/>
<area href="structarmnn_1_1_dequantize_queue_descriptor.xhtml" alt="DequantizeQueueDescriptor" shape="rect" coords="430,448,850,472"/>
<area href="structarmnn_1_1_division_queue_descriptor.xhtml" alt="DivisionQueueDescriptor" shape="rect" coords="430,504,850,528"/>
<area href="structarmnn_1_1_equal_queue_descriptor.xhtml" alt="EqualQueueDescriptor" shape="rect" coords="430,560,850,584"/>
<area href="structarmnn_1_1_floor_queue_descriptor.xhtml" alt="FloorQueueDescriptor" shape="rect" coords="430,616,850,640"/>
<area href="structarmnn_1_1_gather_nd_queue_descriptor.xhtml" alt="GatherNdQueueDescriptor" shape="rect" coords="430,672,850,696"/>
<area href="structarmnn_1_1_greater_queue_descriptor.xhtml" alt="GreaterQueueDescriptor" shape="rect" coords="430,728,850,752"/>
<area href="structarmnn_1_1_map_queue_descriptor.xhtml" alt="MapQueueDescriptor" shape="rect" coords="430,784,850,808"/>
<area href="structarmnn_1_1_maximum_queue_descriptor.xhtml" alt="MaximumQueueDescriptor" shape="rect" coords="430,840,850,864"/>
<area href="structarmnn_1_1_mem_copy_queue_descriptor.xhtml" alt="MemCopyQueueDescriptor" shape="rect" coords="430,896,850,920"/>
<area href="structarmnn_1_1_mem_import_queue_descriptor.xhtml" alt="MemImportQueueDescriptor" shape="rect" coords="430,952,850,976"/>
<area href="structarmnn_1_1_mem_sync_queue_descriptor.xhtml" alt="MemSyncQueueDescriptor" shape="rect" coords="430,1008,850,1032"/>
<area href="structarmnn_1_1_merge_queue_descriptor.xhtml" alt="MergeQueueDescriptor" shape="rect" coords="430,1064,850,1088"/>
<area href="structarmnn_1_1_minimum_queue_descriptor.xhtml" alt="MinimumQueueDescriptor" shape="rect" coords="430,1120,850,1144"/>
<area href="structarmnn_1_1_multiplication_queue_descriptor.xhtml" alt="MultiplicationQueueDescriptor" shape="rect" coords="430,1176,850,1200"/>
<area href="structarmnn_1_1_prelu_queue_descriptor.xhtml" alt="PreluQueueDescriptor" shape="rect" coords="430,1232,850,1256"/>
<area href="structarmnn_1_1_quantized_lstm_queue_descriptor.xhtml" alt="QuantizedLstmQueueDescriptor" shape="rect" coords="430,1288,850,1312"/>
<area href="structarmnn_1_1_quantize_queue_descriptor.xhtml" alt="QuantizeQueueDescriptor" shape="rect" coords="430,1344,850,1368"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; LayerDescriptor &gt;" shape="rect" coords="430,1400,850,1424"/>
<area href="structarmnn_1_1_rank_queue_descriptor.xhtml" alt="RankQueueDescriptor" shape="rect" coords="430,1456,850,1480"/>
<area href="structarmnn_1_1_rsqrt_queue_descriptor.xhtml" alt="RsqrtQueueDescriptor" shape="rect" coords="430,1512,850,1536"/>
<area href="structarmnn_1_1_shape_queue_descriptor.xhtml" alt="ShapeQueueDescriptor" shape="rect" coords="430,1568,850,1592"/>
<area href="structarmnn_1_1_subtraction_queue_descriptor.xhtml" alt="SubtractionQueueDescriptor" shape="rect" coords="430,1624,850,1648"/>
<area href="structarmnn_1_1_switch_queue_descriptor.xhtml" alt="SwitchQueueDescriptor" shape="rect" coords="430,1680,850,1704"/>
<area href="structarmnn_1_1_unmap_queue_descriptor.xhtml" alt="UnmapQueueDescriptor" shape="rect" coords="430,1736,850,1760"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; ActivationDescriptor &gt;" shape="rect" coords="430,1792,850,1816"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; ArgMinMaxDescriptor &gt;" shape="rect" coords="430,1848,850,1872"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; BatchMatMulDescriptor &gt;" shape="rect" coords="430,1904,850,1928"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; BatchNormalizationDescriptor &gt;" shape="rect" coords="430,1960,850,1984"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; BatchToSpaceNdDescriptor &gt;" shape="rect" coords="430,2016,850,2040"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; ChannelShuffleDescriptor &gt;" shape="rect" coords="430,2072,850,2096"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; ComparisonDescriptor &gt;" shape="rect" coords="430,2128,850,2152"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; Convolution2dDescriptor &gt;" shape="rect" coords="430,2184,850,2208"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; Convolution3dDescriptor &gt;" shape="rect" coords="430,2240,850,2264"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; DepthToSpaceDescriptor &gt;" shape="rect" coords="430,2296,850,2320"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; DepthwiseConvolution2dDescriptor &gt;" shape="rect" coords="430,2352,850,2376"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; DetectionPostProcessDescriptor &gt;" shape="rect" coords="430,2408,850,2432"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; ElementwiseUnaryDescriptor &gt;" shape="rect" coords="430,2464,850,2488"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; FakeQuantizationDescriptor &gt;" shape="rect" coords="430,2520,850,2544"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; FillDescriptor &gt;" shape="rect" coords="430,2576,850,2600"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; FullyConnectedDescriptor &gt;" shape="rect" coords="430,2632,850,2656"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; GatherDescriptor &gt;" shape="rect" coords="430,2688,850,2712"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; InstanceNormalizationDescriptor &gt;" shape="rect" coords="430,2744,850,2768"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; L2NormalizationDescriptor &gt;" shape="rect" coords="430,2800,850,2824"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; LogicalBinaryDescriptor &gt;" shape="rect" coords="430,2856,850,2880"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; LogSoftmaxDescriptor &gt;" shape="rect" coords="430,2912,850,2936"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; LstmDescriptor &gt;" shape="rect" coords="430,2968,850,2992"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; MeanDescriptor &gt;" shape="rect" coords="430,3024,850,3048"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; NormalizationDescriptor &gt;" shape="rect" coords="430,3080,850,3104"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; OriginsDescriptor &gt;" shape="rect" coords="430,3136,850,3160"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; PadDescriptor &gt;" shape="rect" coords="430,3192,850,3216"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; PermuteDescriptor &gt;" shape="rect" coords="430,3248,850,3272"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; Pooling2dDescriptor &gt;" shape="rect" coords="430,3304,850,3328"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; Pooling3dDescriptor &gt;" shape="rect" coords="430,3360,850,3384"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; PreCompiledDescriptor &gt;" shape="rect" coords="430,3416,850,3440"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; QLstmDescriptor &gt;" shape="rect" coords="430,3472,850,3496"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; ReduceDescriptor &gt;" shape="rect" coords="430,3528,850,3552"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; ReshapeDescriptor &gt;" shape="rect" coords="430,3584,850,3608"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; ResizeDescriptor &gt;" shape="rect" coords="430,3640,850,3664"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; SliceDescriptor &gt;" shape="rect" coords="430,3696,850,3720"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; SoftmaxDescriptor &gt;" shape="rect" coords="430,3752,850,3776"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; SpaceToBatchNdDescriptor &gt;" shape="rect" coords="430,3808,850,3832"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; SpaceToDepthDescriptor &gt;" shape="rect" coords="430,3864,850,3888"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; StackDescriptor &gt;" shape="rect" coords="430,3920,850,3944"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; StridedSliceDescriptor &gt;" shape="rect" coords="430,3976,850,4000"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; TransposeConvolution2dDescriptor &gt;" shape="rect" coords="430,4032,850,4056"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; TransposeDescriptor &gt;" shape="rect" coords="430,4088,850,4112"/>
<area href="structarmnn_1_1_queue_descriptor_with_parameters.xhtml" alt="QueueDescriptorWithParameters&lt; ViewsDescriptor &gt;" shape="rect" coords="430,4144,850,4168"/>
  </map>
</div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a4cb2ebdad75dcaac215c8a1a3d62f315"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a4cb2ebdad75dcaac215c8a1a3d62f315">~QueueDescriptor</a> ()=default</td></tr>
<tr class="separator:a4cb2ebdad75dcaac215c8a1a3d62f315"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a089f647d882d65f657d7984e5f505f7c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a089f647d882d65f657d7984e5f505f7c">ValidateTensorNumDimensions</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensor, std::string const &amp;descName, unsigned int numDimensions, std::string const &amp;tensorName) const</td></tr>
<tr class="separator:a089f647d882d65f657d7984e5f505f7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a30194ce14c088a2625ccc8c3e9d155"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a8a30194ce14c088a2625ccc8c3e9d155">ValidateTensorNumDimNumElem</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, unsigned int numDimension, unsigned int numElements, std::string const &amp;tensorName) const</td></tr>
<tr class="separator:a8a30194ce14c088a2625ccc8c3e9d155"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a765d2cee4ccce5b9467e0c2b6d25b84a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a765d2cee4ccce5b9467e0c2b6d25b84a">ValidateInputsOutputs</a> (const std::string &amp;descName, unsigned int numExpectedIn, unsigned int numExpectedOut) const</td></tr>
<tr class="separator:a765d2cee4ccce5b9467e0c2b6d25b84a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0428f0a7927f8c29264d9c9a287840da"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0428f0a7927f8c29264d9c9a287840da"><td class="memTemplItemLeft" align="right" valign="top">const T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a0428f0a7927f8c29264d9c9a287840da">GetAdditionalInformation</a> () const</td></tr>
<tr class="separator:a0428f0a7927f8c29264d9c9a287840da"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a4b50e46a6810018f3edecfb68b2a76b3"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a></td></tr>
<tr class="separator:a4b50e46a6810018f3edecfb68b2a76b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6abd491bb99ffe88bd472c1ae5a1ed1a"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a></td></tr>
<tr class="separator:a6abd491bb99ffe88bd472c1ae5a1ed1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f2e6134cabedfc58aa53fe38a2b8a67"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a2f2e6134cabedfc58aa53fe38a2b8a67">m_AdditionalInfoObject</a></td></tr>
<tr class="separator:a2f2e6134cabedfc58aa53fe38a2b8a67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ef8ddbeee4b869e4c68eb2ed278b8d9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a9ef8ddbeee4b869e4c68eb2ed278b8d9">m_AllowExpandedDims</a> = false</td></tr>
<tr class="separator:a9ef8ddbeee4b869e4c68eb2ed278b8d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ab088ef357662bcea45cbd49674ad0ff7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#ab088ef357662bcea45cbd49674ad0ff7">QueueDescriptor</a> ()</td></tr>
<tr class="separator:ab088ef357662bcea45cbd49674ad0ff7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75d3b85e1e50b1dff74ee84a593d089e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a75d3b85e1e50b1dff74ee84a593d089e">QueueDescriptor</a> (<a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> const &amp;)=default</td></tr>
<tr class="separator:a75d3b85e1e50b1dff74ee84a593d089e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c928b975a0de05cf2536c721ba6b521"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml#a1c928b975a0de05cf2536c721ba6b521">operator=</a> (<a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> const &amp;)=default</td></tr>
<tr class="separator:a1c928b975a0de05cf2536c721ba6b521"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_workload_data_8hpp_source.xhtml#l00024">24</a> of file <a class="el" href="_workload_data_8hpp_source.xhtml">WorkloadData.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a4cb2ebdad75dcaac215c8a1a3d62f315"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cb2ebdad75dcaac215c8a1a3d62f315">&#9670;&nbsp;</a></span>~QueueDescriptor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab088ef357662bcea45cbd49674ad0ff7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab088ef357662bcea45cbd49674ad0ff7">&#9670;&nbsp;</a></span>QueueDescriptor() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_data_8hpp_source.xhtml#l00055">55</a> of file <a class="el" href="_workload_data_8hpp_source.xhtml">WorkloadData.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        : <a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a2f2e6134cabedfc58aa53fe38a2b8a67">m_AdditionalInfoObject</a>(<span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a75d3b85e1e50b1dff74ee84a593d089e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75d3b85e1e50b1dff74ee84a593d089e">&#9670;&nbsp;</a></span>QueueDescriptor() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> const &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a0428f0a7927f8c29264d9c9a287840da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0428f0a7927f8c29264d9c9a287840da">&#9670;&nbsp;</a></span>GetAdditionalInformation()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const T* GetAdditionalInformation </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_data_8hpp_source.xhtml#l00047">47</a> of file <a class="el" href="_workload_data_8hpp_source.xhtml">WorkloadData.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a2f2e6134cabedfc58aa53fe38a2b8a67">m_AdditionalInfoObject</a>);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_workload_data_8hpp_source.xhtml#l00028">QueueDescriptor::m_AdditionalInfoObject</a>.</p>

<p class="reference">Referenced by <a class="el" href="_arm_compute_utils_8hpp_source.xhtml#l00103">armnn::ConvertAdditionalInfoToAclActivationLayerInfo()</a>.</p>

</div>
</div>
<a id="a1c928b975a0de05cf2536c721ba6b521"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c928b975a0de05cf2536c721ba6b521">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> const &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a765d2cee4ccce5b9467e0c2b6d25b84a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a765d2cee4ccce5b9467e0c2b6d25b84a">&#9670;&nbsp;</a></span>ValidateInputsOutputs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ValidateInputsOutputs </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>descName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numExpectedIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numExpectedOut</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_data_8cpp_source.xhtml#l00475">475</a> of file <a class="el" href="_workload_data_8cpp_source.xhtml">WorkloadData.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;{</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    ValidateTensors(<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">m_Inputs</a>, numExpectedIn, descName, <span class="stringliteral">&quot;input&quot;</span>);</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    ValidateTensors(<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">m_Outputs</a>, numExpectedOut, descName, <span class="stringliteral">&quot;output&quot;</span>);</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_workload_data_8hpp_source.xhtml#l00026">QueueDescriptor::m_Inputs</a>, and <a class="el" href="_workload_data_8hpp_source.xhtml#l00027">QueueDescriptor::m_Outputs</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_abs_workload_8cpp_source.xhtml#l00027">ClAbsWorkload::ClAbsWorkload()</a>, <a class="el" href="_cl_activation_workload_8cpp_source.xhtml#l00032">ClActivationWorkload::ClActivationWorkload()</a>, <a class="el" href="_cl_addition_workload_8cpp_source.xhtml#l00021">ClAdditionWorkload::ClAdditionWorkload()</a>, <a class="el" href="_cl_batch_mat_mul_workload_8cpp_source.xhtml#l00115">ClBatchMatMulWorkload::ClBatchMatMulWorkload()</a>, <a class="el" href="_cl_batch_to_space_nd_workload_8cpp_source.xhtml#l00020">ClBatchToSpaceNdWorkload::ClBatchToSpaceNdWorkload()</a>, <a class="el" href="_cl_cast_workload_8cpp_source.xhtml#l00028">ClCastWorkload::ClCastWorkload()</a>, <a class="el" href="_cl_channel_shuffle_workload_8cpp_source.xhtml#l00054">ClChannelShuffleWorkload::ClChannelShuffleWorkload()</a>, <a class="el" href="_cl_comparison_workload_8cpp_source.xhtml#l00042">ClComparisonWorkload::ClComparisonWorkload()</a>, <a class="el" href="_cl_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00017">ClConvertFp16ToFp32Workload::ClConvertFp16ToFp32Workload()</a>, <a class="el" href="_cl_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00017">ClConvertFp32ToFp16Workload::ClConvertFp32ToFp16Workload()</a>, <a class="el" href="_cl_convolution3d_workload_8cpp_source.xhtml#l00056">ClConvolution3dWorkload::ClConvolution3dWorkload()</a>, <a class="el" href="_cl_depth_to_space_workload_8cpp_source.xhtml#l00039">ClDepthToSpaceWorkload::ClDepthToSpaceWorkload()</a>, <a class="el" href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00088">ClDepthwiseConvolutionWorkload::ClDepthwiseConvolutionWorkload()</a>, <a class="el" href="_cl_dequantize_workload_8cpp_source.xhtml#l00030">ClDequantizeWorkload::ClDequantizeWorkload()</a>, <a class="el" href="_cl_division_workload_8cpp_source.xhtml#l00034">ClDivisionWorkload::ClDivisionWorkload()</a>, <a class="el" href="_cl_exp_workload_8cpp_source.xhtml#l00026">ClExpWorkload::ClExpWorkload()</a>, <a class="el" href="_cl_fill_workload_8cpp_source.xhtml#l00018">ClFillWorkload::ClFillWorkload()</a>, <a class="el" href="_cl_floor_float_workload_8cpp_source.xhtml#l00023">ClFloorFloatWorkload::ClFloorFloatWorkload()</a>, <a class="el" href="_cl_fully_connected_workload_8cpp_source.xhtml#l00056">ClFullyConnectedWorkload::ClFullyConnectedWorkload()</a>, <a class="el" href="_cl_gather_nd_workload_8cpp_source.xhtml#l00099">ClGatherNdWorkload::ClGatherNdWorkload()</a>, <a class="el" href="_cl_gather_workload_8cpp_source.xhtml#l00029">ClGatherWorkload::ClGatherWorkload()</a>, <a class="el" href="_cl_instance_normalization_workload_8cpp_source.xhtml#l00032">ClInstanceNormalizationWorkload::ClInstanceNormalizationWorkload()</a>, <a class="el" href="_cl_l2_normalization_float_workload_8cpp_source.xhtml#l00029">ClL2NormalizationFloatWorkload::ClL2NormalizationFloatWorkload()</a>, <a class="el" href="_cl_logical_and_workload_8cpp_source.xhtml#l00034">ClLogicalAndWorkload::ClLogicalAndWorkload()</a>, <a class="el" href="_cl_logical_not_workload_8cpp_source.xhtml#l00031">ClLogicalNotWorkload::ClLogicalNotWorkload()</a>, <a class="el" href="_cl_logical_or_workload_8cpp_source.xhtml#l00034">ClLogicalOrWorkload::ClLogicalOrWorkload()</a>, <a class="el" href="_cl_log_softmax_workload_8cpp_source.xhtml#l00028">ClLogSoftmaxWorkload::ClLogSoftmaxWorkload()</a>, <a class="el" href="_cl_log_workload_8cpp_source.xhtml#l00026">ClLogWorkload::ClLogWorkload()</a>, <a class="el" href="_cl_maximum_workload_8cpp_source.xhtml#l00039">ClMaximumWorkload::ClMaximumWorkload()</a>, <a class="el" href="_cl_mean_workload_8cpp_source.xhtml#l00031">ClMeanWorkload::ClMeanWorkload()</a>, <a class="el" href="_cl_minimum_workload_8cpp_source.xhtml#l00039">ClMinimumWorkload::ClMinimumWorkload()</a>, <a class="el" href="_cl_multiplication_workload_8cpp_source.xhtml#l00047">ClMultiplicationWorkload::ClMultiplicationWorkload()</a>, <a class="el" href="_cl_neg_workload_8cpp_source.xhtml#l00026">ClNegWorkload::ClNegWorkload()</a>, <a class="el" href="_cl_normalization_float_workload_8cpp_source.xhtml#l00031">ClNormalizationFloatWorkload::ClNormalizationFloatWorkload()</a>, <a class="el" href="_cl_pad_workload_8cpp_source.xhtml#l00019">ClPadWorkload::ClPadWorkload()</a>, <a class="el" href="_cl_pooling2d_workload_8cpp_source.xhtml#l00030">ClPooling2dWorkload::ClPooling2dWorkload()</a>, <a class="el" href="_cl_pooling3d_workload_8cpp_source.xhtml#l00030">ClPooling3dWorkload::ClPooling3dWorkload()</a>, <a class="el" href="_cl_prelu_workload_8cpp_source.xhtml#l00029">ClPreluWorkload::ClPreluWorkload()</a>, <a class="el" href="_cl_quantize_workload_8cpp_source.xhtml#l00032">ClQuantizeWorkload::ClQuantizeWorkload()</a>, <a class="el" href="_cl_reduce_workload_8cpp_source.xhtml#l00046">ClReduceWorkload::ClReduceWorkload()</a>, <a class="el" href="_cl_reshape_workload_8cpp_source.xhtml#l00024">ClReshapeWorkload::ClReshapeWorkload()</a>, <a class="el" href="_cl_resize_workload_8cpp_source.xhtml#l00049">ClResizeWorkload::ClResizeWorkload()</a>, <a class="el" href="_cl_rsqrt_workload_8cpp_source.xhtml#l00026">ClRsqrtWorkload::ClRsqrtWorkload()</a>, <a class="el" href="_cl_sin_workload_8cpp_source.xhtml#l00026">ClSinWorkload::ClSinWorkload()</a>, <a class="el" href="_cl_slice_workload_8cpp_source.xhtml#l00033">ClSliceWorkload::ClSliceWorkload()</a>, <a class="el" href="_cl_softmax_workload_8cpp_source.xhtml#l00028">ClSoftmaxWorkload::ClSoftmaxWorkload()</a>, <a class="el" href="_cl_space_to_batch_nd_workload_8cpp_source.xhtml#l00047">ClSpaceToBatchNdWorkload::ClSpaceToBatchNdWorkload()</a>, <a class="el" href="_cl_space_to_depth_workload_8cpp_source.xhtml#l00020">ClSpaceToDepthWorkload::ClSpaceToDepthWorkload()</a>, <a class="el" href="_cl_sqrt_workload_8cpp_source.xhtml#l00032">ClSqrtWorkload::ClSqrtWorkload()</a>, <a class="el" href="_cl_strided_slice_workload_8cpp_source.xhtml#l00055">ClStridedSliceWorkload::ClStridedSliceWorkload()</a>, <a class="el" href="_cl_subtraction_workload_8cpp_source.xhtml#l00021">ClSubtractionWorkload::ClSubtractionWorkload()</a>, <a class="el" href="_cl_transpose_workload_8cpp_source.xhtml#l00029">ClTransposeWorkload::ClTransposeWorkload()</a>, <a class="el" href="_neon_abs_workload_8cpp_source.xhtml#l00025">NeonAbsWorkload::NeonAbsWorkload()</a>, <a class="el" href="_neon_activation_workload_8cpp_source.xhtml#l00032">NeonActivationWorkload::NeonActivationWorkload()</a>, <a class="el" href="_neon_addition_workload_8cpp_source.xhtml#l00040">NeonAdditionWorkload::NeonAdditionWorkload()</a>, <a class="el" href="_neon_batch_mat_mul_workload_8cpp_source.xhtml#l00102">NeonBatchMatMulWorkload::NeonBatchMatMulWorkload()</a>, <a class="el" href="_neon_batch_normalization_workload_8cpp_source.xhtml#l00059">NeonBatchNormalizationWorkload::NeonBatchNormalizationWorkload()</a>, <a class="el" href="_neon_batch_to_space_nd_workload_8cpp_source.xhtml#l00038">NeonBatchToSpaceNdWorkload::NeonBatchToSpaceNdWorkload()</a>, <a class="el" href="_neon_cast_workload_8cpp_source.xhtml#l00027">NeonCastWorkload::NeonCastWorkload()</a>, <a class="el" href="_neon_channel_shuffle_workload_8cpp_source.xhtml#l00051">NeonChannelShuffleWorkload::NeonChannelShuffleWorkload()</a>, <a class="el" href="_neon_comparison_workload_8cpp_source.xhtml#l00034">NeonComparisonWorkload::NeonComparisonWorkload()</a>, <a class="el" href="_neon_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00017">NeonConvertFp16ToFp32Workload::NeonConvertFp16ToFp32Workload()</a>, <a class="el" href="_neon_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00018">NeonConvertFp32ToFp16Workload::NeonConvertFp32ToFp16Workload()</a>, <a class="el" href="_neon_convolution2d_workload_8cpp_source.xhtml#l00073">NeonConvolution2dWorkload::NeonConvolution2dWorkload()</a>, <a class="el" href="_neon_convolution3d_workload_8cpp_source.xhtml#l00056">NeonConvolution3dWorkload::NeonConvolution3dWorkload()</a>, <a class="el" href="_neon_depth_to_space_workload_8cpp_source.xhtml#l00032">NeonDepthToSpaceWorkload::NeonDepthToSpaceWorkload()</a>, <a class="el" href="_neon_dequantize_workload_8cpp_source.xhtml#l00031">NeonDequantizeWorkload::NeonDequantizeWorkload()</a>, <a class="el" href="_neon_division_workload_8cpp_source.xhtml#l00036">NeonDivisionWorkload::NeonDivisionWorkload()</a>, <a class="el" href="_neon_exp_workload_8cpp_source.xhtml#l00025">NeonExpWorkload::NeonExpWorkload()</a>, <a class="el" href="_neon_fill_workload_8cpp_source.xhtml#l00019">NeonFillWorkload::NeonFillWorkload()</a>, <a class="el" href="_neon_floor_float_workload_8cpp_source.xhtml#l00016">NeonFloorFloatWorkload::NeonFloorFloatWorkload()</a>, <a class="el" href="_neon_fully_connected_workload_8cpp_source.xhtml#l00061">NeonFullyConnectedWorkload::NeonFullyConnectedWorkload()</a>, <a class="el" href="_neon_gather_nd_workload_8cpp_source.xhtml#l00097">NeonGatherNdWorkload::NeonGatherNdWorkload()</a>, <a class="el" href="_neon_gather_workload_8cpp_source.xhtml#l00027">NeonGatherWorkload::NeonGatherWorkload()</a>, <a class="el" href="_neon_instance_normalization_workload_8cpp_source.xhtml#l00033">NeonInstanceNormalizationWorkload::NeonInstanceNormalizationWorkload()</a>, <a class="el" href="_neon_l2_normalization_float_workload_8cpp_source.xhtml#l00031">NeonL2NormalizationFloatWorkload::NeonL2NormalizationFloatWorkload()</a>, <a class="el" href="_neon_logical_and_workload_8cpp_source.xhtml#l00032">NeonLogicalAndWorkload::NeonLogicalAndWorkload()</a>, <a class="el" href="_neon_logical_not_workload_8cpp_source.xhtml#l00030">NeonLogicalNotWorkload::NeonLogicalNotWorkload()</a>, <a class="el" href="_neon_logical_or_workload_8cpp_source.xhtml#l00032">NeonLogicalOrWorkload::NeonLogicalOrWorkload()</a>, <a class="el" href="_neon_log_softmax_workload_8cpp_source.xhtml#l00033">NeonLogSoftmaxWorkload::NeonLogSoftmaxWorkload()</a>, <a class="el" href="_neon_log_workload_8cpp_source.xhtml#l00025">NeonLogWorkload::NeonLogWorkload()</a>, <a class="el" href="_neon_maximum_workload_8cpp_source.xhtml#l00027">NeonMaximumWorkload::NeonMaximumWorkload()</a>, <a class="el" href="_neon_mean_workload_8cpp_source.xhtml#l00032">NeonMeanWorkload::NeonMeanWorkload()</a>, <a class="el" href="_neon_minimum_workload_8cpp_source.xhtml#l00028">NeonMinimumWorkload::NeonMinimumWorkload()</a>, <a class="el" href="_neon_multiplication_workload_8cpp_source.xhtml#l00047">NeonMultiplicationWorkload::NeonMultiplicationWorkload()</a>, <a class="el" href="_neon_neg_workload_8cpp_source.xhtml#l00025">NeonNegWorkload::NeonNegWorkload()</a>, <a class="el" href="_neon_normalization_float_workload_8cpp_source.xhtml#l00061">NeonNormalizationFloatWorkload::NeonNormalizationFloatWorkload()</a>, <a class="el" href="_neon_pad_workload_8cpp_source.xhtml#l00020">NeonPadWorkload::NeonPadWorkload()</a>, <a class="el" href="_neon_pooling2d_workload_8cpp_source.xhtml#l00036">NeonPooling2dWorkload::NeonPooling2dWorkload()</a>, <a class="el" href="_neon_pooling3d_workload_8cpp_source.xhtml#l00025">NeonPooling3dWorkload::NeonPooling3dWorkload()</a>, <a class="el" href="_neon_prelu_workload_8cpp_source.xhtml#l00030">NeonPreluWorkload::NeonPreluWorkload()</a>, <a class="el" href="_neon_quantize_workload_8cpp_source.xhtml#l00026">NeonQuantizeWorkload::NeonQuantizeWorkload()</a>, <a class="el" href="_neon_reduce_workload_8cpp_source.xhtml#l00047">NeonReduceWorkload::NeonReduceWorkload()</a>, <a class="el" href="_neon_reshape_workload_8cpp_source.xhtml#l00026">NeonReshapeWorkload::NeonReshapeWorkload()</a>, <a class="el" href="_neon_resize_workload_8cpp_source.xhtml#l00052">NeonResizeWorkload::NeonResizeWorkload()</a>, <a class="el" href="_neon_rsqrt_workload_8cpp_source.xhtml#l00026">NeonRsqrtWorkload::NeonRsqrtWorkload()</a>, <a class="el" href="_neon_sin_workload_8cpp_source.xhtml#l00025">NeonSinWorkload::NeonSinWorkload()</a>, <a class="el" href="_neon_slice_workload_8cpp_source.xhtml#l00036">NeonSliceWorkload::NeonSliceWorkload()</a>, <a class="el" href="_neon_softmax_workload_8cpp_source.xhtml#l00033">NeonSoftmaxWorkload::NeonSoftmaxWorkload()</a>, <a class="el" href="_neon_space_to_batch_nd_workload_8cpp_source.xhtml#l00044">NeonSpaceToBatchNdWorkload::NeonSpaceToBatchNdWorkload()</a>, <a class="el" href="_neon_space_to_depth_workload_8cpp_source.xhtml#l00032">NeonSpaceToDepthWorkload::NeonSpaceToDepthWorkload()</a>, <a class="el" href="_neon_sqrt_workload_8cpp_source.xhtml#l00031">NeonSqrtWorkload::NeonSqrtWorkload()</a>, <a class="el" href="_neon_strided_slice_workload_8cpp_source.xhtml#l00049">NeonStridedSliceWorkload::NeonStridedSliceWorkload()</a>, <a class="el" href="_neon_subtraction_workload_8cpp_source.xhtml#l00041">NeonSubtractionWorkload::NeonSubtractionWorkload()</a>, <a class="el" href="_neon_transpose_convolution2d_workload_8cpp_source.xhtml#l00055">NeonTransposeConvolution2dWorkload::NeonTransposeConvolution2dWorkload()</a>, and <a class="el" href="_neon_transpose_workload_8cpp_source.xhtml#l00027">NeonTransposeWorkload::NeonTransposeWorkload()</a>.</p>

</div>
</div>
<a id="a089f647d882d65f657d7984e5f505f7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a089f647d882d65f657d7984e5f505f7c">&#9670;&nbsp;</a></span>ValidateTensorNumDimensions()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ValidateTensorNumDimensions </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string const &amp;&#160;</td>
          <td class="paramname"><em>descName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numDimensions</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string const &amp;&#160;</td>
          <td class="paramname"><em>tensorName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_data_8cpp_source.xhtml#l00426">426</a> of file <a class="el" href="_workload_data_8cpp_source.xhtml">WorkloadData.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;{</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="comment">// If we&#39;re allowing expanded dimensions then numDimensions becomes the minimum number of Dimensions we can allow.</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="comment">// Throw an Exception if the tensors has fewer than numDimensions or if the squeezed dimensions are greater than</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="comment">// numDimensions.</span></div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a9ef8ddbeee4b869e4c68eb2ed278b8d9">m_AllowExpandedDims</a>)</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    {</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> squeezedDims = 0;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160; </div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; tensor.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>(); ++i)</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        {</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="keywordflow">if</span> (tensor.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>()[i] != 1)</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            {</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                ++squeezedDims;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            }</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        }</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keywordflow">if</span> (tensor.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() &lt; numDimensions || squeezedDims &gt; numDimensions)</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(descName + <span class="stringliteral">&quot;: Expected &quot;</span> + to_string(numDimensions) + <span class="stringliteral">&quot; or less but got &quot;</span> +</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                                           to_string(tensor.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()) + <span class="stringliteral">&quot; dimensions for &quot;</span> +</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                                           tensorName + <span class="stringliteral">&quot; tensor.&quot;</span>);</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        }</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    }</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    {</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="keywordflow">if</span> (tensor.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>() != numDimensions)</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        {</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(descName + <span class="stringliteral">&quot;: Expected &quot;</span> + to_string(numDimensions) + <span class="stringliteral">&quot; but got &quot;</span> +</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                                           to_string(tensor.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>()) + <span class="stringliteral">&quot; dimensions for &quot;</span> +</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                                           tensorName + <span class="stringliteral">&quot; tensor.&quot;</span>);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        }</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    }</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tensor_8hpp_source.xhtml#l00195">TensorInfo::GetNumDimensions()</a>, <a class="el" href="_tensor_8hpp_source.xhtml#l00191">TensorInfo::GetShape()</a>, and <a class="el" href="_workload_data_8hpp_source.xhtml#l00052">QueueDescriptor::m_AllowExpandedDims</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_data_8cpp_source.xhtml#l01039">FillQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01062">FullyConnectedQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01516">PermuteQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01545">Pooling2dQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01572">Pooling3dQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01273">Convolution2dQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01350">Convolution3dQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01412">DepthwiseConvolution2dQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02735">DetectionPostProcessQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02373">MeanQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02417">PadQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01227">BatchNormalizationQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l03712">RankQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01599">ResizeQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01646">FakeQuantizationQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01811">SpaceToBatchNdQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l01878">SpaceToDepthQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02665">GatherNdQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02700">GatherQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l02961">TransposeConvolution2dQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l03013">TransposeQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l03539">SliceQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l03594">DepthToSpaceQueueDescriptor::Validate()</a>, and <a class="el" href="_workload_data_8cpp_source.xhtml#l00464">QueueDescriptor::ValidateTensorNumDimNumElem()</a>.</p>

</div>
</div>
<a id="a8a30194ce14c088a2625ccc8c3e9d155"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a30194ce14c088a2625ccc8c3e9d155">&#9670;&nbsp;</a></span>ValidateTensorNumDimNumElem()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ValidateTensorNumDimNumElem </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numDimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>numElements</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string const &amp;&#160;</td>
          <td class="paramname"><em>tensorName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_data_8cpp_source.xhtml#l00464">464</a> of file <a class="el" href="_workload_data_8cpp_source.xhtml">WorkloadData.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;{</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keyword">const</span> std::string functionName{<span class="stringliteral">&quot;ValidateTensorNumDimNumElem&quot;</span>};</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <a class="code" href="structarmnn_1_1_queue_descriptor.xhtml#a089f647d882d65f657d7984e5f505f7c">ValidateTensorNumDimensions</a>(tensorInfo, functionName, numDimension, tensorName);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    ValidateTensorNumElements(tensorInfo, functionName, numElements, tensorName);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_workload_data_8cpp_source.xhtml#l00426">QueueDescriptor::ValidateTensorNumDimensions()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_data_8cpp_source.xhtml#l01955">LstmQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l03055">QLstmQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l03341">QuantizedLstmQueueDescriptor::Validate()</a>, and <a class="el" href="_workload_data_8cpp_source.xhtml#l03800">UnidirectionalSequenceLstmQueueDescriptor::Validate()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a2f2e6134cabedfc58aa53fe38a2b8a67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f2e6134cabedfc58aa53fe38a2b8a67">&#9670;&nbsp;</a></span>m_AdditionalInfoObject</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* m_AdditionalInfoObject</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_data_8hpp_source.xhtml#l00028">28</a> of file <a class="el" href="_workload_data_8hpp_source.xhtml">WorkloadData.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_workload_data_8hpp_source.xhtml#l00047">QueueDescriptor::GetAdditionalInformation()</a>, and <a class="el" href="_layer_8cpp_source.xhtml#l00274">Layer::SetAdditionalInfo()</a>.</p>

</div>
</div>
<a id="a9ef8ddbeee4b869e4c68eb2ed278b8d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ef8ddbeee4b869e4c68eb2ed278b8d9">&#9670;&nbsp;</a></span>m_AllowExpandedDims</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool m_AllowExpandedDims = false</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_data_8hpp_source.xhtml#l00052">52</a> of file <a class="el" href="_workload_data_8hpp_source.xhtml">WorkloadData.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layer_with_parameters_8hpp_source.xhtml#l00044">LayerWithParameters&lt; StridedSliceDescriptor &gt;::PrepInfoAndDesc()</a>, and <a class="el" href="_workload_data_8cpp_source.xhtml#l00426">QueueDescriptor::ValidateTensorNumDimensions()</a>.</p>

</div>
</div>
<a id="a4b50e46a6810018f3edecfb68b2a76b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b50e46a6810018f3edecfb68b2a76b3">&#9670;&nbsp;</a></span>m_Inputs</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>*&gt; m_Inputs</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_data_8hpp_source.xhtml#l00026">26</a> of file <a class="el" href="_workload_data_8hpp_source.xhtml">WorkloadData.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_batch_norm_impl_8cpp_source.xhtml#l00018">armnn::BatchNormImpl()</a>, <a class="el" href="_cl_abs_workload_8cpp_source.xhtml#l00027">ClAbsWorkload::ClAbsWorkload()</a>, <a class="el" href="_cl_activation_workload_8cpp_source.xhtml#l00032">ClActivationWorkload::ClActivationWorkload()</a>, <a class="el" href="_cl_addition_workload_8cpp_source.xhtml#l00021">ClAdditionWorkload::ClAdditionWorkload()</a>, <a class="el" href="_cl_arg_min_max_workload_8cpp_source.xhtml#l00055">ClArgMinMaxWorkload::ClArgMinMaxWorkload()</a>, <a class="el" href="_cl_batch_mat_mul_workload_8cpp_source.xhtml#l00115">ClBatchMatMulWorkload::ClBatchMatMulWorkload()</a>, <a class="el" href="_cl_cast_workload_8cpp_source.xhtml#l00028">ClCastWorkload::ClCastWorkload()</a>, <a class="el" href="_cl_channel_shuffle_workload_8cpp_source.xhtml#l00054">ClChannelShuffleWorkload::ClChannelShuffleWorkload()</a>, <a class="el" href="_cl_comparison_workload_8cpp_source.xhtml#l00042">ClComparisonWorkload::ClComparisonWorkload()</a>, <a class="el" href="_cl_concat_workload_8cpp_source.xhtml#l00048">ClConcatWorkload::ClConcatWorkload()</a>, <a class="el" href="_cl_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00017">ClConvertFp16ToFp32Workload::ClConvertFp16ToFp32Workload()</a>, <a class="el" href="_cl_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00017">ClConvertFp32ToFp16Workload::ClConvertFp32ToFp16Workload()</a>, <a class="el" href="_cl_convolution3d_workload_8cpp_source.xhtml#l00056">ClConvolution3dWorkload::ClConvolution3dWorkload()</a>, <a class="el" href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00088">ClDepthwiseConvolutionWorkload::ClDepthwiseConvolutionWorkload()</a>, <a class="el" href="_cl_dequantize_workload_8cpp_source.xhtml#l00030">ClDequantizeWorkload::ClDequantizeWorkload()</a>, <a class="el" href="_cl_division_workload_8cpp_source.xhtml#l00034">ClDivisionWorkload::ClDivisionWorkload()</a>, <a class="el" href="_cl_exp_workload_8cpp_source.xhtml#l00026">ClExpWorkload::ClExpWorkload()</a>, <a class="el" href="_cl_floor_float_workload_8cpp_source.xhtml#l00023">ClFloorFloatWorkload::ClFloorFloatWorkload()</a>, <a class="el" href="_cl_fully_connected_workload_8cpp_source.xhtml#l00056">ClFullyConnectedWorkload::ClFullyConnectedWorkload()</a>, <a class="el" href="_cl_gather_nd_workload_8cpp_source.xhtml#l00099">ClGatherNdWorkload::ClGatherNdWorkload()</a>, <a class="el" href="_cl_gather_workload_8cpp_source.xhtml#l00029">ClGatherWorkload::ClGatherWorkload()</a>, <a class="el" href="_cl_instance_normalization_workload_8cpp_source.xhtml#l00032">ClInstanceNormalizationWorkload::ClInstanceNormalizationWorkload()</a>, <a class="el" href="_cl_l2_normalization_float_workload_8cpp_source.xhtml#l00029">ClL2NormalizationFloatWorkload::ClL2NormalizationFloatWorkload()</a>, <a class="el" href="_cl_logical_and_workload_8cpp_source.xhtml#l00034">ClLogicalAndWorkload::ClLogicalAndWorkload()</a>, <a class="el" href="_cl_logical_not_workload_8cpp_source.xhtml#l00031">ClLogicalNotWorkload::ClLogicalNotWorkload()</a>, <a class="el" href="_cl_logical_or_workload_8cpp_source.xhtml#l00034">ClLogicalOrWorkload::ClLogicalOrWorkload()</a>, <a class="el" href="_cl_log_softmax_workload_8cpp_source.xhtml#l00028">ClLogSoftmaxWorkload::ClLogSoftmaxWorkload()</a>, <a class="el" href="_cl_log_workload_8cpp_source.xhtml#l00026">ClLogWorkload::ClLogWorkload()</a>, <a class="el" href="_cl_maximum_workload_8cpp_source.xhtml#l00039">ClMaximumWorkload::ClMaximumWorkload()</a>, <a class="el" href="_cl_mean_workload_8cpp_source.xhtml#l00031">ClMeanWorkload::ClMeanWorkload()</a>, <a class="el" href="_cl_minimum_workload_8cpp_source.xhtml#l00039">ClMinimumWorkload::ClMinimumWorkload()</a>, <a class="el" href="_cl_multiplication_workload_8cpp_source.xhtml#l00047">ClMultiplicationWorkload::ClMultiplicationWorkload()</a>, <a class="el" href="_cl_neg_workload_8cpp_source.xhtml#l00026">ClNegWorkload::ClNegWorkload()</a>, <a class="el" href="_cl_normalization_float_workload_8cpp_source.xhtml#l00031">ClNormalizationFloatWorkload::ClNormalizationFloatWorkload()</a>, <a class="el" href="_cl_pad_workload_8cpp_source.xhtml#l00019">ClPadWorkload::ClPadWorkload()</a>, <a class="el" href="_cl_pooling2d_workload_8cpp_source.xhtml#l00030">ClPooling2dWorkload::ClPooling2dWorkload()</a>, <a class="el" href="_cl_pooling3d_workload_8cpp_source.xhtml#l00030">ClPooling3dWorkload::ClPooling3dWorkload()</a>, <a class="el" href="_cl_prelu_workload_8cpp_source.xhtml#l00029">ClPreluWorkload::ClPreluWorkload()</a>, <a class="el" href="_cl_quantize_workload_8cpp_source.xhtml#l00032">ClQuantizeWorkload::ClQuantizeWorkload()</a>, <a class="el" href="_cl_reduce_workload_8cpp_source.xhtml#l00046">ClReduceWorkload::ClReduceWorkload()</a>, <a class="el" href="_cl_reshape_workload_8cpp_source.xhtml#l00024">ClReshapeWorkload::ClReshapeWorkload()</a>, <a class="el" href="_cl_resize_workload_8cpp_source.xhtml#l00049">ClResizeWorkload::ClResizeWorkload()</a>, <a class="el" href="_cl_rsqrt_workload_8cpp_source.xhtml#l00026">ClRsqrtWorkload::ClRsqrtWorkload()</a>, <a class="el" href="_cl_sin_workload_8cpp_source.xhtml#l00026">ClSinWorkload::ClSinWorkload()</a>, <a class="el" href="_cl_slice_workload_8cpp_source.xhtml#l00033">ClSliceWorkload::ClSliceWorkload()</a>, <a class="el" href="_cl_softmax_workload_8cpp_source.xhtml#l00028">ClSoftmaxWorkload::ClSoftmaxWorkload()</a>, <a class="el" href="_cl_space_to_batch_nd_workload_8cpp_source.xhtml#l00047">ClSpaceToBatchNdWorkload::ClSpaceToBatchNdWorkload()</a>, <a class="el" href="_cl_splitter_workload_8cpp_source.xhtml#l00055">ClSplitterWorkload::ClSplitterWorkload()</a>, <a class="el" href="_cl_sqrt_workload_8cpp_source.xhtml#l00032">ClSqrtWorkload::ClSqrtWorkload()</a>, <a class="el" href="_cl_stack_workload_8cpp_source.xhtml#l00047">ClStackWorkload::ClStackWorkload()</a>, <a class="el" href="_cl_strided_slice_workload_8cpp_source.xhtml#l00055">ClStridedSliceWorkload::ClStridedSliceWorkload()</a>, <a class="el" href="_cl_subtraction_workload_8cpp_source.xhtml#l00021">ClSubtractionWorkload::ClSubtractionWorkload()</a>, <a class="el" href="_cl_transpose_workload_8cpp_source.xhtml#l00029">ClTransposeWorkload::ClTransposeWorkload()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00373">Layer::CollectQueueDescriptorInputs()</a>, <a class="el" href="_neon_workload_factory_8cpp_source.xhtml#l00134">NeonWorkloadFactory::CreateWorkload()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00247">ClWorkloadFactory::CreateWorkload()</a>, <a class="el" href="_ref_workload_factory_8cpp_source.xhtml#l00144">RefWorkloadFactory::CreateWorkload()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l00839">LoadedNetwork::EnqueueWorkload()</a>, <a class="el" href="_map_workload_8cpp_source.xhtml#l00017">MapWorkload::Execute()</a>, <a class="el" href="_unmap_workload_8cpp_source.xhtml#l00017">UnmapWorkload::Execute()</a>, <a class="el" href="_ref_depth_to_space_workload_8cpp_source.xhtml#l00014">RefDepthToSpaceWorkload::Execute()</a>, <a class="el" href="_ref_gather_nd_workload_8cpp_source.xhtml#l00016">RefGatherNdWorkload::Execute()</a>, <a class="el" href="_ref_strided_slice_workload_8cpp_source.xhtml#l00018">RefStridedSliceWorkload::Execute()</a>, <a class="el" href="_ref_activation_workload_8cpp_source.xhtml#l00018">RefActivationWorkload::Execute()</a>, <a class="el" href="_ref_channel_shuffle_workload_8cpp_source.xhtml#l00016">RefChannelShuffleWorkload::Execute()</a>, <a class="el" href="_ref_concat_workload_8cpp_source.xhtml#l00015">RefConcatWorkload::Execute()</a>, <a class="el" href="_ref_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00016">RefConvertFp16ToFp32Workload::Execute()</a>, <a class="el" href="_ref_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00017">RefConvertFp32ToFp16Workload::Execute()</a>, <a class="el" href="_ref_fake_quantization_float32_workload_8cpp_source.xhtml#l00029">RefFakeQuantizationFloat32Workload::Execute()</a>, <a class="el" href="_ref_floor_workload_8cpp_source.xhtml#l00016">RefFloorWorkload::Execute()</a>, <a class="el" href="_ref_log_softmax_workload_8cpp_source.xhtml#l00020">RefLogSoftmaxWorkload::Execute()</a>, <a class="el" href="_ref_pad_workload_8cpp_source.xhtml#l00016">RefPadWorkload::Execute()</a>, <a class="el" href="_ref_reshape_workload_8cpp_source.xhtml#l00015">RefReshapeWorkload::Execute()</a>, <a class="el" href="_ref_resize_workload_8cpp_source.xhtml#l00020">RefResizeWorkload::Execute()</a>, <a class="el" href="_ref_softmax_workload_8cpp_source.xhtml#l00020">RefSoftmaxWorkload::Execute()</a>, <a class="el" href="_ref_space_to_batch_nd_workload_8cpp_source.xhtml#l00015">RefSpaceToBatchNdWorkload::Execute()</a>, <a class="el" href="_ref_space_to_depth_workload_8cpp_source.xhtml#l00015">RefSpaceToDepthWorkload::Execute()</a>, <a class="el" href="_sample_dynamic_addition_workload_8cpp_source.xhtml#l00039">SampleDynamicAdditionWorkload::Execute()</a>, <a class="el" href="_ref_dequantize_workload_8cpp_source.xhtml#l00015">RefDequantizeWorkload::Execute()</a>, <a class="el" href="_ref_arg_min_max_workload_8cpp_source.xhtml#l00022">RefArgMinMaxWorkload::Execute()</a>, <a class="el" href="_ref_batch_normalization_workload_8cpp_source.xhtml#l00025">RefBatchNormalizationWorkload::Execute()</a>, <a class="el" href="_ref_batch_to_space_nd_workload_8cpp_source.xhtml#l00014">RefBatchToSpaceNdWorkload::Execute()</a>, <a class="el" href="_ref_depthwise_convolution2d_workload_8cpp_source.xhtml#l00039">RefDepthwiseConvolution2dWorkload::Execute()</a>, <a class="el" href="_ref_detection_post_process_workload_8cpp_source.xhtml#l00021">RefDetectionPostProcessWorkload::Execute()</a>, <a class="el" href="_ref_instance_normalization_workload_8cpp_source.xhtml#l00021">RefInstanceNormalizationWorkload::Execute()</a>, <a class="el" href="_ref_prelu_workload_8cpp_source.xhtml#l00021">RefPreluWorkload::Execute()</a>, <a class="el" href="_ref_quantize_workload_8cpp_source.xhtml#l00037">RefQuantizeWorkload::Execute()</a>, <a class="el" href="_ref_slice_workload_8cpp_source.xhtml#l00016">RefSliceWorkload::Execute()</a>, <a class="el" href="_ref_stack_workload_8cpp_source.xhtml#l00021">RefStackWorkload::Execute()</a>, <a class="el" href="_cl_rank_workload_8hpp_source.xhtml#l00020">ClRankWorkload::Execute()</a>, <a class="el" href="_neon_rank_workload_8hpp_source.xhtml#l00020">NeonRankWorkload::Execute()</a>, <a class="el" href="_ref_cast_workload_8cpp_source.xhtml#l00029">RefCastWorkload::Execute()</a>, <a class="el" href="_ref_l2_normalization_workload_8cpp_source.xhtml#l00027">RefL2NormalizationWorkload::Execute()</a>, <a class="el" href="_ref_normalization_workload_8cpp_source.xhtml#l00164">RefNormalizationWorkload::Execute()</a>, <a class="el" href="_ref_rank_workload_8hpp_source.xhtml#l00020">RefRankWorkload::Execute()</a>, <a class="el" href="_ref_shape_workload_8hpp_source.xhtml#l00020">RefShapeWorkload::Execute()</a>, <a class="el" href="_ref_splitter_workload_8cpp_source.xhtml#l00014">RefSplitterWorkload::Execute()</a>, <a class="el" href="_ref_reduce_workload_8cpp_source.xhtml#l00022">RefReduceWorkload::Execute()</a>, <a class="el" href="_ref_q_lstm_workload_8cpp_source.xhtml#l00046">RefQLstmWorkload::Execute()</a>, <a class="el" href="_ref_mean_workload_8cpp_source.xhtml#l00021">RefMeanWorkload::Execute()</a>, <a class="el" href="_ref_pooling2d_workload_8cpp_source.xhtml#l00016">RefPooling2dWorkload::Execute()</a>, <a class="el" href="_ref_pooling3d_workload_8cpp_source.xhtml#l00016">RefPooling3dWorkload::Execute()</a>, <a class="el" href="_ref_lstm_workload_8cpp_source.xhtml#l00042">RefLstmWorkload::Execute()</a>, <a class="el" href="_ref_convolution2d_workload_8cpp_source.xhtml#l00033">RefConvolution2dWorkload::Execute()</a>, <a class="el" href="_ref_batch_mat_mul_workload_8cpp_source.xhtml#l00019">RefBatchMatMulWorkload::Execute()</a>, <a class="el" href="_ref_convolution3d_workload_8cpp_source.xhtml#l00035">RefConvolution3dWorkload::Execute()</a>, <a class="el" href="_ref_elementwise_unary_workload_8cpp_source.xhtml#l00033">RefElementwiseUnaryWorkload::Execute()</a>, <a class="el" href="_ref_logical_binary_workload_8cpp_source.xhtml#l00025">RefLogicalBinaryWorkload::Execute()</a>, <a class="el" href="_ref_logical_unary_workload_8cpp_source.xhtml#l00025">RefLogicalUnaryWorkload::Execute()</a>, <a class="el" href="_ref_comparison_workload_8cpp_source.xhtml#l00045">RefComparisonWorkload::Execute()</a>, <a class="el" href="_ref_gather_workload_8cpp_source.xhtml#l00016">RefGatherWorkload::Execute()</a>, <a class="el" href="_ref_fully_connected_workload_8cpp_source.xhtml#l00037">RefFullyConnectedWorkload::Execute()</a>, <a class="el" href="_ref_transpose_convolution2d_workload_8cpp_source.xhtml#l00036">RefTransposeConvolution2dWorkload::Execute()</a>, <a class="el" href="_ref_unidirectional_sequence_lstm_workload_8cpp_source.xhtml#l00046">RefUnidirectionalSequenceLstmWorkload::Execute()</a>, <a class="el" href="_neon_fully_connected_workload_8cpp_source.xhtml#l00112">NeonFullyConnectedWorkload::Execute()</a>, <a class="el" href="_neon_convolution2d_workload_8cpp_source.xhtml#l00158">NeonConvolution2dWorkload::Execute()</a>, <a class="el" href="_workload_8hpp_source.xhtml#l00044">BaseWorkload&lt; SplitterQueueDescriptor &gt;::ExecuteAsync()</a>, <a class="el" href="_sample_dynamic_addition_workload_8cpp_source.xhtml#l00022">sdb::GetInputTensorData()</a>, <a class="el" href="_mem_import_workload_8cpp_source.xhtml#l00016">ImportMemGenericWorkload::ImportMemGenericWorkload()</a>, <a class="el" href="_neon_abs_workload_8cpp_source.xhtml#l00025">NeonAbsWorkload::NeonAbsWorkload()</a>, <a class="el" href="_neon_activation_workload_8cpp_source.xhtml#l00032">NeonActivationWorkload::NeonActivationWorkload()</a>, <a class="el" href="_neon_addition_workload_8cpp_source.xhtml#l00040">NeonAdditionWorkload::NeonAdditionWorkload()</a>, <a class="el" href="_neon_arg_min_max_workload_8cpp_source.xhtml#l00055">NeonArgMinMaxWorkload::NeonArgMinMaxWorkload()</a>, <a class="el" href="_neon_batch_mat_mul_workload_8cpp_source.xhtml#l00102">NeonBatchMatMulWorkload::NeonBatchMatMulWorkload()</a>, <a class="el" href="_neon_batch_normalization_workload_8cpp_source.xhtml#l00059">NeonBatchNormalizationWorkload::NeonBatchNormalizationWorkload()</a>, <a class="el" href="_neon_batch_to_space_nd_workload_8cpp_source.xhtml#l00038">NeonBatchToSpaceNdWorkload::NeonBatchToSpaceNdWorkload()</a>, <a class="el" href="_neon_cast_workload_8cpp_source.xhtml#l00027">NeonCastWorkload::NeonCastWorkload()</a>, <a class="el" href="_neon_channel_shuffle_workload_8cpp_source.xhtml#l00051">NeonChannelShuffleWorkload::NeonChannelShuffleWorkload()</a>, <a class="el" href="_neon_comparison_workload_8cpp_source.xhtml#l00034">NeonComparisonWorkload::NeonComparisonWorkload()</a>, <a class="el" href="_neon_concat_workload_8cpp_source.xhtml#l00049">NeonConcatWorkload::NeonConcatWorkload()</a>, <a class="el" href="_neon_convolution2d_workload_8cpp_source.xhtml#l00073">NeonConvolution2dWorkload::NeonConvolution2dWorkload()</a>, <a class="el" href="_neon_convolution3d_workload_8cpp_source.xhtml#l00056">NeonConvolution3dWorkload::NeonConvolution3dWorkload()</a>, <a class="el" href="_neon_depthwise_convolution_workload_8cpp_source.xhtml#l00089">NeonDepthwiseConvolutionWorkload::NeonDepthwiseConvolutionWorkload()</a>, <a class="el" href="_neon_dequantize_workload_8cpp_source.xhtml#l00031">NeonDequantizeWorkload::NeonDequantizeWorkload()</a>, <a class="el" href="_neon_division_workload_8cpp_source.xhtml#l00036">NeonDivisionWorkload::NeonDivisionWorkload()</a>, <a class="el" href="_neon_exp_workload_8cpp_source.xhtml#l00025">NeonExpWorkload::NeonExpWorkload()</a>, <a class="el" href="_neon_floor_float_workload_8cpp_source.xhtml#l00016">NeonFloorFloatWorkload::NeonFloorFloatWorkload()</a>, <a class="el" href="_neon_fully_connected_workload_8cpp_source.xhtml#l00061">NeonFullyConnectedWorkload::NeonFullyConnectedWorkload()</a>, <a class="el" href="_neon_gather_nd_workload_8cpp_source.xhtml#l00097">NeonGatherNdWorkload::NeonGatherNdWorkload()</a>, <a class="el" href="_neon_gather_workload_8cpp_source.xhtml#l00027">NeonGatherWorkload::NeonGatherWorkload()</a>, <a class="el" href="_neon_instance_normalization_workload_8cpp_source.xhtml#l00033">NeonInstanceNormalizationWorkload::NeonInstanceNormalizationWorkload()</a>, <a class="el" href="_neon_l2_normalization_float_workload_8cpp_source.xhtml#l00031">NeonL2NormalizationFloatWorkload::NeonL2NormalizationFloatWorkload()</a>, <a class="el" href="_neon_logical_and_workload_8cpp_source.xhtml#l00032">NeonLogicalAndWorkload::NeonLogicalAndWorkload()</a>, <a class="el" href="_neon_logical_not_workload_8cpp_source.xhtml#l00030">NeonLogicalNotWorkload::NeonLogicalNotWorkload()</a>, <a class="el" href="_neon_logical_or_workload_8cpp_source.xhtml#l00032">NeonLogicalOrWorkload::NeonLogicalOrWorkload()</a>, <a class="el" href="_neon_log_softmax_workload_8cpp_source.xhtml#l00033">NeonLogSoftmaxWorkload::NeonLogSoftmaxWorkload()</a>, <a class="el" href="_neon_log_workload_8cpp_source.xhtml#l00025">NeonLogWorkload::NeonLogWorkload()</a>, <a class="el" href="_neon_maximum_workload_8cpp_source.xhtml#l00027">NeonMaximumWorkload::NeonMaximumWorkload()</a>, <a class="el" href="_neon_mean_workload_8cpp_source.xhtml#l00032">NeonMeanWorkload::NeonMeanWorkload()</a>, <a class="el" href="_neon_minimum_workload_8cpp_source.xhtml#l00028">NeonMinimumWorkload::NeonMinimumWorkload()</a>, <a class="el" href="_neon_multiplication_workload_8cpp_source.xhtml#l00047">NeonMultiplicationWorkload::NeonMultiplicationWorkload()</a>, <a class="el" href="_neon_neg_workload_8cpp_source.xhtml#l00025">NeonNegWorkload::NeonNegWorkload()</a>, <a class="el" href="_neon_normalization_float_workload_8cpp_source.xhtml#l00061">NeonNormalizationFloatWorkload::NeonNormalizationFloatWorkload()</a>, <a class="el" href="_neon_pad_workload_8cpp_source.xhtml#l00020">NeonPadWorkload::NeonPadWorkload()</a>, <a class="el" href="_neon_pooling2d_workload_8cpp_source.xhtml#l00036">NeonPooling2dWorkload::NeonPooling2dWorkload()</a>, <a class="el" href="_neon_pooling3d_workload_8cpp_source.xhtml#l00025">NeonPooling3dWorkload::NeonPooling3dWorkload()</a>, <a class="el" href="_neon_prelu_workload_8cpp_source.xhtml#l00030">NeonPreluWorkload::NeonPreluWorkload()</a>, <a class="el" href="_neon_quantize_workload_8cpp_source.xhtml#l00026">NeonQuantizeWorkload::NeonQuantizeWorkload()</a>, <a class="el" href="_neon_reduce_workload_8cpp_source.xhtml#l00047">NeonReduceWorkload::NeonReduceWorkload()</a>, <a class="el" href="_neon_reshape_workload_8cpp_source.xhtml#l00026">NeonReshapeWorkload::NeonReshapeWorkload()</a>, <a class="el" href="_neon_resize_workload_8cpp_source.xhtml#l00052">NeonResizeWorkload::NeonResizeWorkload()</a>, <a class="el" href="_neon_rsqrt_workload_8cpp_source.xhtml#l00026">NeonRsqrtWorkload::NeonRsqrtWorkload()</a>, <a class="el" href="_neon_sin_workload_8cpp_source.xhtml#l00025">NeonSinWorkload::NeonSinWorkload()</a>, <a class="el" href="_neon_slice_workload_8cpp_source.xhtml#l00036">NeonSliceWorkload::NeonSliceWorkload()</a>, <a class="el" href="_neon_softmax_workload_8cpp_source.xhtml#l00033">NeonSoftmaxWorkload::NeonSoftmaxWorkload()</a>, <a class="el" href="_neon_space_to_batch_nd_workload_8cpp_source.xhtml#l00044">NeonSpaceToBatchNdWorkload::NeonSpaceToBatchNdWorkload()</a>, <a class="el" href="_neon_splitter_workload_8cpp_source.xhtml#l00056">NeonSplitterWorkload::NeonSplitterWorkload()</a>, <a class="el" href="_neon_sqrt_workload_8cpp_source.xhtml#l00031">NeonSqrtWorkload::NeonSqrtWorkload()</a>, <a class="el" href="_neon_stack_workload_8cpp_source.xhtml#l00049">NeonStackWorkload::NeonStackWorkload()</a>, <a class="el" href="_neon_strided_slice_workload_8cpp_source.xhtml#l00049">NeonStridedSliceWorkload::NeonStridedSliceWorkload()</a>, <a class="el" href="_neon_subtraction_workload_8cpp_source.xhtml#l00041">NeonSubtractionWorkload::NeonSubtractionWorkload()</a>, <a class="el" href="_neon_transpose_convolution2d_workload_8cpp_source.xhtml#l00055">NeonTransposeConvolution2dWorkload::NeonTransposeConvolution2dWorkload()</a>, <a class="el" href="_neon_transpose_workload_8cpp_source.xhtml#l00027">NeonTransposeWorkload::NeonTransposeWorkload()</a>, <a class="el" href="_ref_comparison_workload_8cpp_source.xhtml#l00027">RefComparisonWorkload::PostAllocationConfigure()</a>, <a class="el" href="_cl_convolution2d_workload_8cpp_source.xhtml#l00166">ClConvolution2dWorkload::Reconfigure()</a>, <a class="el" href="_neon_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00044">NeonConvertFp32ToFp16Workload::ReplaceInputTensorHandle()</a>, <a class="el" href="_cl_base_workload_8hpp_source.xhtml#l00021">ClBaseWorkload&lt; Convolution2dQueueDescriptor &gt;::ReplaceInputTensorHandle()</a>, <a class="el" href="_neon_base_workload_8hpp_source.xhtml#l00021">NeonBaseWorkload&lt; RsqrtQueueDescriptor &gt;::ReplaceInputTensorHandle()</a>, <a class="el" href="_neon_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00043">NeonConvertFp16ToFp32Workload::ReplaceInputTensorHandle()</a>, <a class="el" href="_neon_floor_float_workload_8cpp_source.xhtml#l00036">NeonFloorFloatWorkload::ReplaceInputTensorHandle()</a>, <a class="el" href="_ref_base_workload_8hpp_source.xhtml#l00025">RefBaseWorkload&lt; SplitterQueueDescriptor &gt;::ReplaceInputTensorHandle()</a>, <a class="el" href="_neon_lstm_float_workload_8cpp_source.xhtml#l00417">NeonLstmFloatWorkload::ReplaceInputTensorHandle()</a>, <a class="el" href="_cl_lstm_float_workload_8cpp_source.xhtml#l00396">ClLstmFloatWorkload::ReplaceInputTensorHandle()</a>, <a class="el" href="_cl_floor_float_workload_8cpp_source.xhtml#l00044">ClFloorFloatWorkload::ReplaceInputTensorHandle()</a>, <a class="el" href="_cl_normalization_float_workload_8cpp_source.xhtml#l00065">ClNormalizationFloatWorkload::ReplaceInputTensorHandle()</a>, <a class="el" href="_tosa_ref_base_workload_8hpp_source.xhtml#l00027">TosaRefBaseWorkload&lt; QueueDescriptor &gt;::ReplaceInputTensorHandle()</a>, <a class="el" href="_cl_l2_normalization_float_workload_8cpp_source.xhtml#l00063">ClL2NormalizationFloatWorkload::ReplaceInputTensorHandle()</a>, <a class="el" href="_cl_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00064">ClConvertFp16ToFp32Workload::ReplaceInputTensorHandle()</a>, <a class="el" href="_cl_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00064">ClConvertFp32ToFp16Workload::ReplaceInputTensorHandle()</a>, <a class="el" href="_neon_l2_normalization_float_workload_8cpp_source.xhtml#l00063">NeonL2NormalizationFloatWorkload::ReplaceInputTensorHandle()</a>, <a class="el" href="_neon_normalization_float_workload_8cpp_source.xhtml#l00113">NeonNormalizationFloatWorkload::ReplaceInputTensorHandle()</a>, <a class="el" href="_cl_batch_normalization_float_workload_8cpp_source.xhtml#l00127">ClBatchNormalizationFloatWorkload::ReplaceInputTensorHandle()</a>, <a class="el" href="_neon_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00060">NeonConvertFp16ToFp32Workload::ReplaceOutputTensorHandle()</a>, <a class="el" href="_neon_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00061">NeonConvertFp32ToFp16Workload::ReplaceOutputTensorHandle()</a>, <a class="el" href="_neon_floor_float_workload_8cpp_source.xhtml#l00053">NeonFloorFloatWorkload::ReplaceOutputTensorHandle()</a>, <a class="el" href="_neon_lstm_float_workload_8cpp_source.xhtml#l00434">NeonLstmFloatWorkload::ReplaceOutputTensorHandle()</a>, <a class="el" href="_cl_lstm_float_workload_8cpp_source.xhtml#l00413">ClLstmFloatWorkload::ReplaceOutputTensorHandle()</a>, <a class="el" href="_cl_floor_float_workload_8cpp_source.xhtml#l00061">ClFloorFloatWorkload::ReplaceOutputTensorHandle()</a>, <a class="el" href="_cl_normalization_float_workload_8cpp_source.xhtml#l00082">ClNormalizationFloatWorkload::ReplaceOutputTensorHandle()</a>, <a class="el" href="_cl_l2_normalization_float_workload_8cpp_source.xhtml#l00080">ClL2NormalizationFloatWorkload::ReplaceOutputTensorHandle()</a>, <a class="el" href="_neon_l2_normalization_float_workload_8cpp_source.xhtml#l00080">NeonL2NormalizationFloatWorkload::ReplaceOutputTensorHandle()</a>, <a class="el" href="_neon_normalization_float_workload_8cpp_source.xhtml#l00130">NeonNormalizationFloatWorkload::ReplaceOutputTensorHandle()</a>, <a class="el" href="_cl_base_workload_8hpp_source.xhtml#l00038">ClBaseWorkload&lt; Convolution2dQueueDescriptor &gt;::ReplaceOutputTensorHandle()</a>, <a class="el" href="_neon_base_workload_8hpp_source.xhtml#l00038">NeonBaseWorkload&lt; RsqrtQueueDescriptor &gt;::ReplaceOutputTensorHandle()</a>, <a class="el" href="_cl_batch_normalization_float_workload_8cpp_source.xhtml#l00144">ClBatchNormalizationFloatWorkload::ReplaceOutputTensorHandle()</a>, <a class="el" href="_stack_8cpp_source.xhtml#l00012">armnn::Stack()</a>, <a class="el" href="_mem_sync_workload_8cpp_source.xhtml#l00016">SyncMemGenericWorkload::SyncMemGenericWorkload()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00483">MapQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00501">UnmapQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00519">MemCopyQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00555">MemImportQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00611">MemSyncQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00847">ConcatQueueDescriptor::Validate()</a>, and <a class="el" href="_workload_data_8cpp_source.xhtml#l00475">QueueDescriptor::ValidateInputsOutputs()</a>.</p>

</div>
</div>
<a id="a6abd491bb99ffe88bd472c1ae5a1ed1a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6abd491bb99ffe88bd472c1ae5a1ed1a">&#9670;&nbsp;</a></span>m_Outputs</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>*&gt; m_Outputs</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_data_8hpp_source.xhtml#l00027">27</a> of file <a class="el" href="_workload_data_8hpp_source.xhtml">WorkloadData.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_abs_workload_8cpp_source.xhtml#l00027">ClAbsWorkload::ClAbsWorkload()</a>, <a class="el" href="_cl_activation_workload_8cpp_source.xhtml#l00032">ClActivationWorkload::ClActivationWorkload()</a>, <a class="el" href="_cl_addition_workload_8cpp_source.xhtml#l00021">ClAdditionWorkload::ClAdditionWorkload()</a>, <a class="el" href="_cl_arg_min_max_workload_8cpp_source.xhtml#l00055">ClArgMinMaxWorkload::ClArgMinMaxWorkload()</a>, <a class="el" href="_cl_batch_mat_mul_workload_8cpp_source.xhtml#l00115">ClBatchMatMulWorkload::ClBatchMatMulWorkload()</a>, <a class="el" href="_cl_cast_workload_8cpp_source.xhtml#l00028">ClCastWorkload::ClCastWorkload()</a>, <a class="el" href="_cl_channel_shuffle_workload_8cpp_source.xhtml#l00054">ClChannelShuffleWorkload::ClChannelShuffleWorkload()</a>, <a class="el" href="_cl_comparison_workload_8cpp_source.xhtml#l00042">ClComparisonWorkload::ClComparisonWorkload()</a>, <a class="el" href="_cl_concat_workload_8cpp_source.xhtml#l00048">ClConcatWorkload::ClConcatWorkload()</a>, <a class="el" href="_cl_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00017">ClConvertFp16ToFp32Workload::ClConvertFp16ToFp32Workload()</a>, <a class="el" href="_cl_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00017">ClConvertFp32ToFp16Workload::ClConvertFp32ToFp16Workload()</a>, <a class="el" href="_cl_convolution3d_workload_8cpp_source.xhtml#l00056">ClConvolution3dWorkload::ClConvolution3dWorkload()</a>, <a class="el" href="_cl_depthwise_convolution_workload_8cpp_source.xhtml#l00088">ClDepthwiseConvolutionWorkload::ClDepthwiseConvolutionWorkload()</a>, <a class="el" href="_cl_dequantize_workload_8cpp_source.xhtml#l00030">ClDequantizeWorkload::ClDequantizeWorkload()</a>, <a class="el" href="_cl_division_workload_8cpp_source.xhtml#l00034">ClDivisionWorkload::ClDivisionWorkload()</a>, <a class="el" href="_cl_exp_workload_8cpp_source.xhtml#l00026">ClExpWorkload::ClExpWorkload()</a>, <a class="el" href="_cl_fill_workload_8cpp_source.xhtml#l00018">ClFillWorkload::ClFillWorkload()</a>, <a class="el" href="_cl_floor_float_workload_8cpp_source.xhtml#l00023">ClFloorFloatWorkload::ClFloorFloatWorkload()</a>, <a class="el" href="_cl_fully_connected_workload_8cpp_source.xhtml#l00056">ClFullyConnectedWorkload::ClFullyConnectedWorkload()</a>, <a class="el" href="_cl_gather_nd_workload_8cpp_source.xhtml#l00099">ClGatherNdWorkload::ClGatherNdWorkload()</a>, <a class="el" href="_cl_gather_workload_8cpp_source.xhtml#l00029">ClGatherWorkload::ClGatherWorkload()</a>, <a class="el" href="_cl_instance_normalization_workload_8cpp_source.xhtml#l00032">ClInstanceNormalizationWorkload::ClInstanceNormalizationWorkload()</a>, <a class="el" href="_cl_l2_normalization_float_workload_8cpp_source.xhtml#l00029">ClL2NormalizationFloatWorkload::ClL2NormalizationFloatWorkload()</a>, <a class="el" href="_cl_logical_and_workload_8cpp_source.xhtml#l00034">ClLogicalAndWorkload::ClLogicalAndWorkload()</a>, <a class="el" href="_cl_logical_not_workload_8cpp_source.xhtml#l00031">ClLogicalNotWorkload::ClLogicalNotWorkload()</a>, <a class="el" href="_cl_logical_or_workload_8cpp_source.xhtml#l00034">ClLogicalOrWorkload::ClLogicalOrWorkload()</a>, <a class="el" href="_cl_log_softmax_workload_8cpp_source.xhtml#l00028">ClLogSoftmaxWorkload::ClLogSoftmaxWorkload()</a>, <a class="el" href="_cl_log_workload_8cpp_source.xhtml#l00026">ClLogWorkload::ClLogWorkload()</a>, <a class="el" href="_cl_maximum_workload_8cpp_source.xhtml#l00039">ClMaximumWorkload::ClMaximumWorkload()</a>, <a class="el" href="_cl_mean_workload_8cpp_source.xhtml#l00031">ClMeanWorkload::ClMeanWorkload()</a>, <a class="el" href="_cl_minimum_workload_8cpp_source.xhtml#l00039">ClMinimumWorkload::ClMinimumWorkload()</a>, <a class="el" href="_cl_multiplication_workload_8cpp_source.xhtml#l00047">ClMultiplicationWorkload::ClMultiplicationWorkload()</a>, <a class="el" href="_cl_neg_workload_8cpp_source.xhtml#l00026">ClNegWorkload::ClNegWorkload()</a>, <a class="el" href="_cl_normalization_float_workload_8cpp_source.xhtml#l00031">ClNormalizationFloatWorkload::ClNormalizationFloatWorkload()</a>, <a class="el" href="_cl_pad_workload_8cpp_source.xhtml#l00019">ClPadWorkload::ClPadWorkload()</a>, <a class="el" href="_cl_pooling2d_workload_8cpp_source.xhtml#l00030">ClPooling2dWorkload::ClPooling2dWorkload()</a>, <a class="el" href="_cl_pooling3d_workload_8cpp_source.xhtml#l00030">ClPooling3dWorkload::ClPooling3dWorkload()</a>, <a class="el" href="_cl_prelu_workload_8cpp_source.xhtml#l00029">ClPreluWorkload::ClPreluWorkload()</a>, <a class="el" href="_cl_quantize_workload_8cpp_source.xhtml#l00032">ClQuantizeWorkload::ClQuantizeWorkload()</a>, <a class="el" href="_cl_reduce_workload_8cpp_source.xhtml#l00046">ClReduceWorkload::ClReduceWorkload()</a>, <a class="el" href="_cl_reshape_workload_8cpp_source.xhtml#l00024">ClReshapeWorkload::ClReshapeWorkload()</a>, <a class="el" href="_cl_resize_workload_8cpp_source.xhtml#l00049">ClResizeWorkload::ClResizeWorkload()</a>, <a class="el" href="_cl_rsqrt_workload_8cpp_source.xhtml#l00026">ClRsqrtWorkload::ClRsqrtWorkload()</a>, <a class="el" href="_cl_sin_workload_8cpp_source.xhtml#l00026">ClSinWorkload::ClSinWorkload()</a>, <a class="el" href="_cl_slice_workload_8cpp_source.xhtml#l00033">ClSliceWorkload::ClSliceWorkload()</a>, <a class="el" href="_cl_softmax_workload_8cpp_source.xhtml#l00028">ClSoftmaxWorkload::ClSoftmaxWorkload()</a>, <a class="el" href="_cl_space_to_batch_nd_workload_8cpp_source.xhtml#l00047">ClSpaceToBatchNdWorkload::ClSpaceToBatchNdWorkload()</a>, <a class="el" href="_cl_splitter_workload_8cpp_source.xhtml#l00055">ClSplitterWorkload::ClSplitterWorkload()</a>, <a class="el" href="_cl_sqrt_workload_8cpp_source.xhtml#l00032">ClSqrtWorkload::ClSqrtWorkload()</a>, <a class="el" href="_cl_stack_workload_8cpp_source.xhtml#l00047">ClStackWorkload::ClStackWorkload()</a>, <a class="el" href="_cl_strided_slice_workload_8cpp_source.xhtml#l00055">ClStridedSliceWorkload::ClStridedSliceWorkload()</a>, <a class="el" href="_cl_subtraction_workload_8cpp_source.xhtml#l00021">ClSubtractionWorkload::ClSubtractionWorkload()</a>, <a class="el" href="_cl_transpose_workload_8cpp_source.xhtml#l00029">ClTransposeWorkload::ClTransposeWorkload()</a>, <a class="el" href="_layer_8hpp_source.xhtml#l00380">Layer::CollectQueueDescriptorOutputs()</a>, <a class="el" href="_neon_workload_factory_8cpp_source.xhtml#l00134">NeonWorkloadFactory::CreateWorkload()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00247">ClWorkloadFactory::CreateWorkload()</a>, <a class="el" href="_ref_depth_to_space_workload_8cpp_source.xhtml#l00014">RefDepthToSpaceWorkload::Execute()</a>, <a class="el" href="_ref_gather_nd_workload_8cpp_source.xhtml#l00016">RefGatherNdWorkload::Execute()</a>, <a class="el" href="_ref_strided_slice_workload_8cpp_source.xhtml#l00018">RefStridedSliceWorkload::Execute()</a>, <a class="el" href="_ref_activation_workload_8cpp_source.xhtml#l00018">RefActivationWorkload::Execute()</a>, <a class="el" href="_ref_channel_shuffle_workload_8cpp_source.xhtml#l00016">RefChannelShuffleWorkload::Execute()</a>, <a class="el" href="_ref_concat_workload_8cpp_source.xhtml#l00015">RefConcatWorkload::Execute()</a>, <a class="el" href="_ref_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00016">RefConvertFp16ToFp32Workload::Execute()</a>, <a class="el" href="_ref_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00017">RefConvertFp32ToFp16Workload::Execute()</a>, <a class="el" href="_ref_fake_quantization_float32_workload_8cpp_source.xhtml#l00029">RefFakeQuantizationFloat32Workload::Execute()</a>, <a class="el" href="_ref_fill_workload_8cpp_source.xhtml#l00017">RefFillWorkload::Execute()</a>, <a class="el" href="_ref_floor_workload_8cpp_source.xhtml#l00016">RefFloorWorkload::Execute()</a>, <a class="el" href="_ref_log_softmax_workload_8cpp_source.xhtml#l00020">RefLogSoftmaxWorkload::Execute()</a>, <a class="el" href="_ref_pad_workload_8cpp_source.xhtml#l00016">RefPadWorkload::Execute()</a>, <a class="el" href="_ref_reshape_workload_8cpp_source.xhtml#l00015">RefReshapeWorkload::Execute()</a>, <a class="el" href="_ref_resize_workload_8cpp_source.xhtml#l00020">RefResizeWorkload::Execute()</a>, <a class="el" href="_ref_softmax_workload_8cpp_source.xhtml#l00020">RefSoftmaxWorkload::Execute()</a>, <a class="el" href="_ref_space_to_batch_nd_workload_8cpp_source.xhtml#l00015">RefSpaceToBatchNdWorkload::Execute()</a>, <a class="el" href="_ref_space_to_depth_workload_8cpp_source.xhtml#l00015">RefSpaceToDepthWorkload::Execute()</a>, <a class="el" href="_ref_arg_min_max_workload_8cpp_source.xhtml#l00022">RefArgMinMaxWorkload::Execute()</a>, <a class="el" href="_ref_batch_normalization_workload_8cpp_source.xhtml#l00025">RefBatchNormalizationWorkload::Execute()</a>, <a class="el" href="_ref_batch_to_space_nd_workload_8cpp_source.xhtml#l00014">RefBatchToSpaceNdWorkload::Execute()</a>, <a class="el" href="_ref_depthwise_convolution2d_workload_8cpp_source.xhtml#l00039">RefDepthwiseConvolution2dWorkload::Execute()</a>, <a class="el" href="_ref_dequantize_workload_8cpp_source.xhtml#l00015">RefDequantizeWorkload::Execute()</a>, <a class="el" href="_ref_instance_normalization_workload_8cpp_source.xhtml#l00021">RefInstanceNormalizationWorkload::Execute()</a>, <a class="el" href="_ref_prelu_workload_8cpp_source.xhtml#l00021">RefPreluWorkload::Execute()</a>, <a class="el" href="_ref_quantize_workload_8cpp_source.xhtml#l00037">RefQuantizeWorkload::Execute()</a>, <a class="el" href="_ref_stack_workload_8cpp_source.xhtml#l00021">RefStackWorkload::Execute()</a>, <a class="el" href="_ref_detection_post_process_workload_8cpp_source.xhtml#l00021">RefDetectionPostProcessWorkload::Execute()</a>, <a class="el" href="_ref_slice_workload_8cpp_source.xhtml#l00016">RefSliceWorkload::Execute()</a>, <a class="el" href="_ref_cast_workload_8cpp_source.xhtml#l00029">RefCastWorkload::Execute()</a>, <a class="el" href="_ref_splitter_workload_8cpp_source.xhtml#l00014">RefSplitterWorkload::Execute()</a>, <a class="el" href="_ref_l2_normalization_workload_8cpp_source.xhtml#l00027">RefL2NormalizationWorkload::Execute()</a>, <a class="el" href="_ref_normalization_workload_8cpp_source.xhtml#l00164">RefNormalizationWorkload::Execute()</a>, <a class="el" href="_ref_rank_workload_8hpp_source.xhtml#l00020">RefRankWorkload::Execute()</a>, <a class="el" href="_cl_rank_workload_8hpp_source.xhtml#l00020">ClRankWorkload::Execute()</a>, <a class="el" href="_neon_rank_workload_8hpp_source.xhtml#l00020">NeonRankWorkload::Execute()</a>, <a class="el" href="_ref_shape_workload_8hpp_source.xhtml#l00020">RefShapeWorkload::Execute()</a>, <a class="el" href="_ref_pooling2d_workload_8cpp_source.xhtml#l00016">RefPooling2dWorkload::Execute()</a>, <a class="el" href="_ref_pooling3d_workload_8cpp_source.xhtml#l00016">RefPooling3dWorkload::Execute()</a>, <a class="el" href="_ref_mean_workload_8cpp_source.xhtml#l00021">RefMeanWorkload::Execute()</a>, <a class="el" href="_neon_constant_workload_8cpp_source.xhtml#l00054">NeonConstantWorkload::Execute()</a>, <a class="el" href="_ref_q_lstm_workload_8cpp_source.xhtml#l00046">RefQLstmWorkload::Execute()</a>, <a class="el" href="_ref_lstm_workload_8cpp_source.xhtml#l00042">RefLstmWorkload::Execute()</a>, <a class="el" href="_ref_reduce_workload_8cpp_source.xhtml#l00022">RefReduceWorkload::Execute()</a>, <a class="el" href="_ref_batch_mat_mul_workload_8cpp_source.xhtml#l00019">RefBatchMatMulWorkload::Execute()</a>, <a class="el" href="_ref_convolution2d_workload_8cpp_source.xhtml#l00033">RefConvolution2dWorkload::Execute()</a>, <a class="el" href="_ref_logical_unary_workload_8cpp_source.xhtml#l00025">RefLogicalUnaryWorkload::Execute()</a>, <a class="el" href="_ref_logical_binary_workload_8cpp_source.xhtml#l00025">RefLogicalBinaryWorkload::Execute()</a>, <a class="el" href="_ref_elementwise_unary_workload_8cpp_source.xhtml#l00033">RefElementwiseUnaryWorkload::Execute()</a>, <a class="el" href="_ref_constant_workload_8cpp_source.xhtml#l00023">RefConstantWorkload::Execute()</a>, <a class="el" href="_ref_convolution3d_workload_8cpp_source.xhtml#l00035">RefConvolution3dWorkload::Execute()</a>, <a class="el" href="_ref_comparison_workload_8cpp_source.xhtml#l00045">RefComparisonWorkload::Execute()</a>, <a class="el" href="_ref_gather_workload_8cpp_source.xhtml#l00016">RefGatherWorkload::Execute()</a>, <a class="el" href="_ref_fully_connected_workload_8cpp_source.xhtml#l00037">RefFullyConnectedWorkload::Execute()</a>, <a class="el" href="_cl_constant_workload_8cpp_source.xhtml#l00052">ClConstantWorkload::Execute()</a>, <a class="el" href="_ref_transpose_convolution2d_workload_8cpp_source.xhtml#l00036">RefTransposeConvolution2dWorkload::Execute()</a>, <a class="el" href="_ref_unidirectional_sequence_lstm_workload_8cpp_source.xhtml#l00046">RefUnidirectionalSequenceLstmWorkload::Execute()</a>, <a class="el" href="_workload_8hpp_source.xhtml#l00044">BaseWorkload&lt; SplitterQueueDescriptor &gt;::ExecuteAsync()</a>, <a class="el" href="_sample_dynamic_addition_workload_8cpp_source.xhtml#l00028">sdb::GetOutputTensorData()</a>, <a class="el" href="_mem_import_workload_8cpp_source.xhtml#l00016">ImportMemGenericWorkload::ImportMemGenericWorkload()</a>, <a class="el" href="_neon_abs_workload_8cpp_source.xhtml#l00025">NeonAbsWorkload::NeonAbsWorkload()</a>, <a class="el" href="_neon_activation_workload_8cpp_source.xhtml#l00032">NeonActivationWorkload::NeonActivationWorkload()</a>, <a class="el" href="_neon_addition_workload_8cpp_source.xhtml#l00040">NeonAdditionWorkload::NeonAdditionWorkload()</a>, <a class="el" href="_neon_arg_min_max_workload_8cpp_source.xhtml#l00055">NeonArgMinMaxWorkload::NeonArgMinMaxWorkload()</a>, <a class="el" href="_neon_batch_mat_mul_workload_8cpp_source.xhtml#l00102">NeonBatchMatMulWorkload::NeonBatchMatMulWorkload()</a>, <a class="el" href="_neon_batch_normalization_workload_8cpp_source.xhtml#l00059">NeonBatchNormalizationWorkload::NeonBatchNormalizationWorkload()</a>, <a class="el" href="_neon_batch_to_space_nd_workload_8cpp_source.xhtml#l00038">NeonBatchToSpaceNdWorkload::NeonBatchToSpaceNdWorkload()</a>, <a class="el" href="_neon_cast_workload_8cpp_source.xhtml#l00027">NeonCastWorkload::NeonCastWorkload()</a>, <a class="el" href="_neon_channel_shuffle_workload_8cpp_source.xhtml#l00051">NeonChannelShuffleWorkload::NeonChannelShuffleWorkload()</a>, <a class="el" href="_neon_comparison_workload_8cpp_source.xhtml#l00034">NeonComparisonWorkload::NeonComparisonWorkload()</a>, <a class="el" href="_neon_concat_workload_8cpp_source.xhtml#l00049">NeonConcatWorkload::NeonConcatWorkload()</a>, <a class="el" href="_neon_convolution2d_workload_8cpp_source.xhtml#l00073">NeonConvolution2dWorkload::NeonConvolution2dWorkload()</a>, <a class="el" href="_neon_convolution3d_workload_8cpp_source.xhtml#l00056">NeonConvolution3dWorkload::NeonConvolution3dWorkload()</a>, <a class="el" href="_neon_depthwise_convolution_workload_8cpp_source.xhtml#l00089">NeonDepthwiseConvolutionWorkload::NeonDepthwiseConvolutionWorkload()</a>, <a class="el" href="_neon_dequantize_workload_8cpp_source.xhtml#l00031">NeonDequantizeWorkload::NeonDequantizeWorkload()</a>, <a class="el" href="_neon_division_workload_8cpp_source.xhtml#l00036">NeonDivisionWorkload::NeonDivisionWorkload()</a>, <a class="el" href="_neon_exp_workload_8cpp_source.xhtml#l00025">NeonExpWorkload::NeonExpWorkload()</a>, <a class="el" href="_neon_fill_workload_8cpp_source.xhtml#l00019">NeonFillWorkload::NeonFillWorkload()</a>, <a class="el" href="_neon_floor_float_workload_8cpp_source.xhtml#l00016">NeonFloorFloatWorkload::NeonFloorFloatWorkload()</a>, <a class="el" href="_neon_fully_connected_workload_8cpp_source.xhtml#l00061">NeonFullyConnectedWorkload::NeonFullyConnectedWorkload()</a>, <a class="el" href="_neon_gather_nd_workload_8cpp_source.xhtml#l00097">NeonGatherNdWorkload::NeonGatherNdWorkload()</a>, <a class="el" href="_neon_gather_workload_8cpp_source.xhtml#l00027">NeonGatherWorkload::NeonGatherWorkload()</a>, <a class="el" href="_neon_instance_normalization_workload_8cpp_source.xhtml#l00033">NeonInstanceNormalizationWorkload::NeonInstanceNormalizationWorkload()</a>, <a class="el" href="_neon_l2_normalization_float_workload_8cpp_source.xhtml#l00031">NeonL2NormalizationFloatWorkload::NeonL2NormalizationFloatWorkload()</a>, <a class="el" href="_neon_logical_and_workload_8cpp_source.xhtml#l00032">NeonLogicalAndWorkload::NeonLogicalAndWorkload()</a>, <a class="el" href="_neon_logical_not_workload_8cpp_source.xhtml#l00030">NeonLogicalNotWorkload::NeonLogicalNotWorkload()</a>, <a class="el" href="_neon_logical_or_workload_8cpp_source.xhtml#l00032">NeonLogicalOrWorkload::NeonLogicalOrWorkload()</a>, <a class="el" href="_neon_log_softmax_workload_8cpp_source.xhtml#l00033">NeonLogSoftmaxWorkload::NeonLogSoftmaxWorkload()</a>, <a class="el" href="_neon_log_workload_8cpp_source.xhtml#l00025">NeonLogWorkload::NeonLogWorkload()</a>, <a class="el" href="_neon_maximum_workload_8cpp_source.xhtml#l00027">NeonMaximumWorkload::NeonMaximumWorkload()</a>, <a class="el" href="_neon_mean_workload_8cpp_source.xhtml#l00032">NeonMeanWorkload::NeonMeanWorkload()</a>, <a class="el" href="_neon_minimum_workload_8cpp_source.xhtml#l00028">NeonMinimumWorkload::NeonMinimumWorkload()</a>, <a class="el" href="_neon_multiplication_workload_8cpp_source.xhtml#l00047">NeonMultiplicationWorkload::NeonMultiplicationWorkload()</a>, <a class="el" href="_neon_neg_workload_8cpp_source.xhtml#l00025">NeonNegWorkload::NeonNegWorkload()</a>, <a class="el" href="_neon_normalization_float_workload_8cpp_source.xhtml#l00061">NeonNormalizationFloatWorkload::NeonNormalizationFloatWorkload()</a>, <a class="el" href="_neon_pad_workload_8cpp_source.xhtml#l00020">NeonPadWorkload::NeonPadWorkload()</a>, <a class="el" href="_neon_pooling2d_workload_8cpp_source.xhtml#l00036">NeonPooling2dWorkload::NeonPooling2dWorkload()</a>, <a class="el" href="_neon_pooling3d_workload_8cpp_source.xhtml#l00025">NeonPooling3dWorkload::NeonPooling3dWorkload()</a>, <a class="el" href="_neon_prelu_workload_8cpp_source.xhtml#l00030">NeonPreluWorkload::NeonPreluWorkload()</a>, <a class="el" href="_neon_quantize_workload_8cpp_source.xhtml#l00026">NeonQuantizeWorkload::NeonQuantizeWorkload()</a>, <a class="el" href="_neon_reduce_workload_8cpp_source.xhtml#l00047">NeonReduceWorkload::NeonReduceWorkload()</a>, <a class="el" href="_neon_reshape_workload_8cpp_source.xhtml#l00026">NeonReshapeWorkload::NeonReshapeWorkload()</a>, <a class="el" href="_neon_resize_workload_8cpp_source.xhtml#l00052">NeonResizeWorkload::NeonResizeWorkload()</a>, <a class="el" href="_neon_rsqrt_workload_8cpp_source.xhtml#l00026">NeonRsqrtWorkload::NeonRsqrtWorkload()</a>, <a class="el" href="_neon_sin_workload_8cpp_source.xhtml#l00025">NeonSinWorkload::NeonSinWorkload()</a>, <a class="el" href="_neon_slice_workload_8cpp_source.xhtml#l00036">NeonSliceWorkload::NeonSliceWorkload()</a>, <a class="el" href="_neon_softmax_workload_8cpp_source.xhtml#l00033">NeonSoftmaxWorkload::NeonSoftmaxWorkload()</a>, <a class="el" href="_neon_space_to_batch_nd_workload_8cpp_source.xhtml#l00044">NeonSpaceToBatchNdWorkload::NeonSpaceToBatchNdWorkload()</a>, <a class="el" href="_neon_splitter_workload_8cpp_source.xhtml#l00056">NeonSplitterWorkload::NeonSplitterWorkload()</a>, <a class="el" href="_neon_sqrt_workload_8cpp_source.xhtml#l00031">NeonSqrtWorkload::NeonSqrtWorkload()</a>, <a class="el" href="_neon_stack_workload_8cpp_source.xhtml#l00049">NeonStackWorkload::NeonStackWorkload()</a>, <a class="el" href="_neon_strided_slice_workload_8cpp_source.xhtml#l00049">NeonStridedSliceWorkload::NeonStridedSliceWorkload()</a>, <a class="el" href="_neon_subtraction_workload_8cpp_source.xhtml#l00041">NeonSubtractionWorkload::NeonSubtractionWorkload()</a>, <a class="el" href="_neon_transpose_convolution2d_workload_8cpp_source.xhtml#l00055">NeonTransposeConvolution2dWorkload::NeonTransposeConvolution2dWorkload()</a>, <a class="el" href="_neon_transpose_workload_8cpp_source.xhtml#l00027">NeonTransposeWorkload::NeonTransposeWorkload()</a>, <a class="el" href="_ref_comparison_workload_8cpp_source.xhtml#l00027">RefComparisonWorkload::PostAllocationConfigure()</a>, <a class="el" href="_cl_convolution2d_workload_8cpp_source.xhtml#l00166">ClConvolution2dWorkload::Reconfigure()</a>, <a class="el" href="_ref_base_workload_8hpp_source.xhtml#l00031">RefBaseWorkload&lt; SplitterQueueDescriptor &gt;::ReplaceOutputTensorHandle()</a>, <a class="el" href="_cl_convert_fp32_to_fp16_workload_8cpp_source.xhtml#l00081">ClConvertFp32ToFp16Workload::ReplaceOutputTensorHandle()</a>, <a class="el" href="_cl_convert_fp16_to_fp32_workload_8cpp_source.xhtml#l00081">ClConvertFp16ToFp32Workload::ReplaceOutputTensorHandle()</a>, <a class="el" href="_tosa_ref_base_workload_8hpp_source.xhtml#l00033">TosaRefBaseWorkload&lt; QueueDescriptor &gt;::ReplaceOutputTensorHandle()</a>, <a class="el" href="_neon_base_workload_8hpp_source.xhtml#l00038">NeonBaseWorkload&lt; RsqrtQueueDescriptor &gt;::ReplaceOutputTensorHandle()</a>, <a class="el" href="_cl_base_workload_8hpp_source.xhtml#l00038">ClBaseWorkload&lt; Convolution2dQueueDescriptor &gt;::ReplaceOutputTensorHandle()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00519">MemCopyQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00555">MemImportQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00611">MemSyncQueueDescriptor::Validate()</a>, <a class="el" href="_workload_data_8cpp_source.xhtml#l00847">ConcatQueueDescriptor::Validate()</a>, and <a class="el" href="_workload_data_8cpp_source.xhtml#l00475">QueueDescriptor::ValidateInputsOutputs()</a>.</p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following files:<ul>
<li>include/armnn/backends/<a class="el" href="_workload_data_8hpp_source.xhtml">WorkloadData.hpp</a></li>
<li>src/backends/backendsCommon/<a class="el" href="_workload_data_8cpp_source.xhtml">WorkloadData.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructarmnn_1_1_queue_descriptor_xhtml_a2f2e6134cabedfc58aa53fe38a2b8a67"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml#a2f2e6134cabedfc58aa53fe38a2b8a67">armnn::QueueDescriptor::m_AdditionalInfoObject</a></div><div class="ttdeci">void * m_AdditionalInfoObject</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00028">WorkloadData.hpp:28</a></div></div>
<div class="ttc" id="astructarmnn_1_1_queue_descriptor_xhtml_a9ef8ddbeee4b869e4c68eb2ed278b8d9"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml#a9ef8ddbeee4b869e4c68eb2ed278b8d9">armnn::QueueDescriptor::m_AllowExpandedDims</a></div><div class="ttdeci">bool m_AllowExpandedDims</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00052">WorkloadData.hpp:52</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
<div class="ttc" id="astructarmnn_1_1_queue_descriptor_xhtml_a089f647d882d65f657d7984e5f505f7c"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml#a089f647d882d65f657d7984e5f505f7c">armnn::QueueDescriptor::ValidateTensorNumDimensions</a></div><div class="ttdeci">void ValidateTensorNumDimensions(const TensorInfo &amp;tensor, std::string const &amp;descName, unsigned int numDimensions, std::string const &amp;tensorName) const</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8cpp_source.xhtml#l00426">WorkloadData.cpp:426</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="astructarmnn_1_1_queue_descriptor_xhtml_a6abd491bb99ffe88bd472c1ae5a1ed1a"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml#a6abd491bb99ffe88bd472c1ae5a1ed1a">armnn::QueueDescriptor::m_Outputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Outputs</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00027">WorkloadData.hpp:27</a></div></div>
<div class="ttc" id="aclassarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="astructarmnn_1_1_queue_descriptor_xhtml_a4b50e46a6810018f3edecfb68b2a76b3"><div class="ttname"><a href="structarmnn_1_1_queue_descriptor.xhtml#a4b50e46a6810018f3edecfb68b2a76b3">armnn::QueueDescriptor::m_Inputs</a></div><div class="ttdeci">std::vector&lt; ITensorHandle * &gt; m_Inputs</div><div class="ttdef"><b>Definition:</b> <a href="_workload_data_8hpp_source.xhtml#l00026">WorkloadData.hpp:26</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a></li>
    <li class="footer">Generated on Wed Mar 22 2023 15:53:08 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
