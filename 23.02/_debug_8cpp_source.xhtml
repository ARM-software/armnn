<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/reference/workloads/Debug.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_debug_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Debug.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_debug_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_debug_8hpp.xhtml">Debug.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;common/include/ProfilingGuid.hpp&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_filesystem_8hpp.xhtml">armnnUtils/Filesystem.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_b_float16_8hpp.xhtml">BFloat16.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_half_8hpp.xhtml">Half.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;iosfwd&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;sys/stat.h&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a2b942b6b36b2f6df709b544e01bbdbb0">   23</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a2b942b6b36b2f6df709b544e01bbdbb0">PrintOutput</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;                 <span class="keyword">const</span> T* inputData,</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;                 <a class="code" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guid,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;                 <span class="keyword">const</span> std::string&amp; layerName,</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                 std::ostream&amp; os)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numDims = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">GetNumDimensions</a>();</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numElements = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">GetNumElements</a>();</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a>&amp; inputShape = inputInfo.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>();</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    std::vector&lt;unsigned int&gt; strides(numDims, 0);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    strides[numDims - 1] = inputShape[numDims - 1];</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 2; i &lt;= numDims; i++)</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        strides[numDims - i] = strides[numDims - i + 1] * inputShape[numDims - i];</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;{ &quot;</span>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;\&quot;layerGuid\&quot;: &quot;</span> &lt;&lt; guid &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;\&quot;layerName\&quot;: \&quot;&quot;</span> &lt;&lt; layerName &lt;&lt; <span class="stringliteral">&quot;\&quot;, &quot;</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;\&quot;outputSlot\&quot;: &quot;</span> &lt;&lt; slotIndex &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;\&quot;shape\&quot;: &quot;</span>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;[&quot;</span>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numDims; i++)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        os &lt;&lt; inputShape[i];</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">if</span> (i != numDims - 1)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;], &quot;</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;\&quot;min\&quot;: &quot;</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;              &lt;&lt; <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(*std::min_element(inputData, inputData + numElements)) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;\&quot;max\&quot;: &quot;</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;              &lt;&lt; <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(*std::max_element(inputData, inputData + numElements)) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;\&quot;data\&quot;: &quot;</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numElements; i++)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; numDims; j++)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">if</span> (i % strides[j] == 0)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                os &lt;&lt; <span class="stringliteral">&quot;[&quot;</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        os &lt;&lt; static_cast&lt;float&gt;(inputData[i]);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; numDims; j++)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">if</span> ((i + 1) % strides[j] == 0)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                os &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">if</span> (i != numElements - 1)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            os &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot; }&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="namespacearmnn.xhtml#a181ecb133401da6ff2916c192ca04d48">   97</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a181ecb133401da6ff2916c192ca04d48">Debug</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;           <span class="keyword">const</span> T* inputData,</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;           <a class="code" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guid,</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;           <span class="keyword">const</span> std::string&amp; layerName,</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;           <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex,</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;           <span class="keywordtype">bool</span> outputsToFile)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">if</span> (outputsToFile)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        fs::path tmpDir = fs::temp_directory_path();</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        std::ofstream out(tmpDir.generic_string() + <span class="stringliteral">&quot;/ArmNNIntermediateLayerOutputs/&quot;</span> + layerName + <span class="stringliteral">&quot;.numpy&quot;</span>);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        PrintOutput&lt;T&gt;(inputInfo, inputData, guid, layerName, slotIndex, out);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        out.close();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        PrintOutput&lt;T&gt;(inputInfo, inputData, guid, layerName, slotIndex, std::cout);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#acea0491173b09308ca626ea65e70e1d8">Debug&lt;BFloat16&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_b_float16.xhtml">BFloat16</a>* inputData,</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                              <a class="code" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guid,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                              <span class="keyword">const</span> std::string&amp; layerName,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                              <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                              <span class="keywordtype">bool</span> outputsToFile);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a4dbfaabd2d65dc91bc8bd4d0b5e1ed07">Debug&lt;Half&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                          <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">Half</a>* inputData,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                          <a class="code" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guid,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                          <span class="keyword">const</span> std::string&amp; layerName,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                          <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                          <span class="keywordtype">bool</span> outputsToFile);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#af34b15ddc0dcee095162820e88d84808">Debug&lt;float&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                           <span class="keyword">const</span> <span class="keywordtype">float</span>* inputData,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                           <a class="code" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guid,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                           <span class="keyword">const</span> std::string&amp; layerName,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                           <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                           <span class="keywordtype">bool</span> outputsToFile);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#af5cd3e7fcb637ffad7644cdd2e19a8ae">Debug&lt;uint8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                             <span class="keyword">const</span> uint8_t* inputData,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                             <a class="code" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guid,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                             <span class="keyword">const</span> std::string&amp; layerName,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                             <span class="keywordtype">bool</span> outputsToFile);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a31a77914be2a7b9d8c6d22036df869d8">Debug&lt;int8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                            <span class="keyword">const</span> int8_t* inputData,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                            <a class="code" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guid,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                            <span class="keyword">const</span> std::string&amp; layerName,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                            <span class="keywordtype">bool</span> outputsToFile);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a62669f61a81677f5ca4b1f21bb7d45d8">Debug&lt;int16_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                             <span class="keyword">const</span> int16_t* inputData,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                             <a class="code" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guid,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                             <span class="keyword">const</span> std::string&amp; layerName,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                             <span class="keywordtype">bool</span> outputsToFile);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearmnn.xhtml#a77e5a9b94927bee9c48010efd2dec2b0">Debug&lt;int32_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; inputInfo,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                             <span class="keyword">const</span> int32_t* inputData,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                             <a class="code" href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a> guid,</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                             <span class="keyword">const</span> std::string&amp; layerName,</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> slotIndex,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                             <span class="keywordtype">bool</span> outputsToFile);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="namespacearmnn_xhtml_a77e5a9b94927bee9c48010efd2dec2b0"><div class="ttname"><a href="namespacearmnn.xhtml#a77e5a9b94927bee9c48010efd2dec2b0">armnn::Debug&lt; int32_t &gt;</a></div><div class="ttdeci">template void Debug&lt; int32_t &gt;(const TensorInfo &amp;inputInfo, const int32_t *inputData, LayerGuid guid, const std::string &amp;layerName, unsigned int slotIndex, bool outputsToFile)</div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a62669f61a81677f5ca4b1f21bb7d45d8"><div class="ttname"><a href="namespacearmnn.xhtml#a62669f61a81677f5ca4b1f21bb7d45d8">armnn::Debug&lt; int16_t &gt;</a></div><div class="ttdeci">template void Debug&lt; int16_t &gt;(const TensorInfo &amp;inputInfo, const int16_t *inputData, LayerGuid guid, const std::string &amp;layerName, unsigned int slotIndex, bool outputsToFile)</div></div>
<div class="ttc" id="classarmnn_1_1_b_float16_xhtml"><div class="ttname"><a href="classarmnn_1_1_b_float16.xhtml">armnn::BFloat16</a></div><div class="ttdef"><b>Definition:</b> <a href="_b_float16_8hpp_source.xhtml#l00015">BFloat16.hpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2b942b6b36b2f6df709b544e01bbdbb0"><div class="ttname"><a href="namespacearmnn.xhtml#a2b942b6b36b2f6df709b544e01bbdbb0">armnn::PrintOutput</a></div><div class="ttdeci">void PrintOutput(const TensorInfo &amp;inputInfo, const T *inputData, LayerGuid guid, const std::string &amp;layerName, unsigned int slotIndex, std::ostream &amp;os)</div><div class="ttdef"><b>Definition:</b> <a href="_debug_8cpp_source.xhtml#l00023">Debug.cpp:23</a></div></div>
<div class="ttc" id="_debug_8hpp_xhtml"><div class="ttname"><a href="_debug_8hpp.xhtml">Debug.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_shape.xhtml">armnn::TensorShape</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00020">Tensor.hpp:20</a></div></div>
<div class="ttc" id="_filesystem_8hpp_xhtml"><div class="ttname"><a href="_filesystem_8hpp.xhtml">Filesystem.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_af5cd3e7fcb637ffad7644cdd2e19a8ae"><div class="ttname"><a href="namespacearmnn.xhtml#af5cd3e7fcb637ffad7644cdd2e19a8ae">armnn::Debug&lt; uint8_t &gt;</a></div><div class="ttdeci">template void Debug&lt; uint8_t &gt;(const TensorInfo &amp;inputInfo, const uint8_t *inputData, LayerGuid guid, const std::string &amp;layerName, unsigned int slotIndex, bool outputsToFile)</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0b49aa352b84d572942185ce72cef751"><div class="ttname"><a href="namespacearmnn.xhtml#a0b49aa352b84d572942185ce72cef751">armnn::Half</a></div><div class="ttdeci">half_float::half Half</div><div class="ttdef"><b>Definition:</b> <a href="_half_8hpp_source.xhtml#l00022">Half.hpp:22</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dbfaabd2d65dc91bc8bd4d0b5e1ed07"><div class="ttname"><a href="namespacearmnn.xhtml#a4dbfaabd2d65dc91bc8bd4d0b5e1ed07">armnn::Debug&lt; Half &gt;</a></div><div class="ttdeci">template void Debug&lt; Half &gt;(const TensorInfo &amp;inputInfo, const Half *inputData, LayerGuid guid, const std::string &amp;layerName, unsigned int slotIndex, bool outputsToFile)</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a31a77914be2a7b9d8c6d22036df869d8"><div class="ttname"><a href="namespacearmnn.xhtml#a31a77914be2a7b9d8c6d22036df869d8">armnn::Debug&lt; int8_t &gt;</a></div><div class="ttdeci">template void Debug&lt; int8_t &gt;(const TensorInfo &amp;inputInfo, const int8_t *inputData, LayerGuid guid, const std::string &amp;layerName, unsigned int slotIndex, bool outputsToFile)</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a181ecb133401da6ff2916c192ca04d48"><div class="ttname"><a href="namespacearmnn.xhtml#a181ecb133401da6ff2916c192ca04d48">armnn::Debug</a></div><div class="ttdeci">void Debug(const TensorInfo &amp;inputInfo, const T *inputData, LayerGuid guid, const std::string &amp;layerName, unsigned int slotIndex, bool outputsToFile)</div><div class="ttdef"><b>Definition:</b> <a href="_debug_8cpp_source.xhtml#l00097">Debug.cpp:97</a></div></div>
<div class="ttc" id="_half_8hpp_xhtml"><div class="ttname"><a href="_half_8hpp.xhtml">Half.hpp</a></div></div>
<div class="ttc" id="_types_8hpp_xhtml_af22094b802160f09f7c89ad9eee10084"><div class="ttname"><a href="_types_8hpp.xhtml#af22094b802160f09f7c89ad9eee10084">LayerGuid</a></div><div class="ttdeci">arm::pipe::ProfilingGuid LayerGuid</div><div class="ttdoc">Define LayerGuid type. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00026">Types.hpp:26</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_af34b15ddc0dcee095162820e88d84808"><div class="ttname"><a href="namespacearmnn.xhtml#af34b15ddc0dcee095162820e88d84808">armnn::Debug&lt; float &gt;</a></div><div class="ttdeci">template void Debug&lt; float &gt;(const TensorInfo &amp;inputInfo, const float *inputData, LayerGuid guid, const std::string &amp;layerName, unsigned int slotIndex, bool outputsToFile)</div></div>
<div class="ttc" id="namespacearmnn_xhtml_acea0491173b09308ca626ea65e70e1d8"><div class="ttname"><a href="namespacearmnn.xhtml#acea0491173b09308ca626ea65e70e1d8">armnn::Debug&lt; BFloat16 &gt;</a></div><div class="ttdeci">template void Debug&lt; BFloat16 &gt;(const TensorInfo &amp;inputInfo, const BFloat16 *inputData, LayerGuid guid, const std::string &amp;layerName, unsigned int slotIndex, bool outputsToFile)</div></div>
<div class="ttc" id="_b_float16_8hpp_xhtml"><div class="ttname"><a href="_b_float16_8hpp.xhtml">BFloat16.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a157e27d41e9f6b21f0d3c025fa47dc24"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a157e27d41e9f6b21f0d3c025fa47dc24">armnn::TensorInfo::GetNumDimensions</a></div><div class="ttdeci">unsigned int GetNumDimensions() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00195">Tensor.hpp:195</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8846406ac37fbd2204f0be16ee05d5b7"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8846406ac37fbd2204f0be16ee05d5b7">armnn::TensorInfo::GetNumElements</a></div><div class="ttdeci">unsigned int GetNumElements() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00196">Tensor.hpp:196</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_efae4012d0e357ebeaba7d02491d70e5.xhtml">reference</a></li><li class="navelem"><a class="el" href="dir_d2f3b8e2e64df3181ebe92efcc0a3012.xhtml">workloads</a></li><li class="navelem"><a class="el" href="_debug_8cpp.xhtml">Debug.cpp</a></li>
    <li class="footer">Generated on Fri Feb 24 2023 10:24:27 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
