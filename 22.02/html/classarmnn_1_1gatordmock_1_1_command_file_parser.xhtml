<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: CommandFileParser Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1gatordmock_1_1_command_file_parser.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn_1_1gatordmock_1_1_command_file_parser-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">CommandFileParser Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This class parses a command file for the <a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml" title="A class that implements a Mock Gatord server. ">GatordMockService</a>.  
 <a href="classarmnn_1_1gatordmock_1_1_command_file_parser.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_command_file_parser_8hpp_source.xhtml">CommandFileParser.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a224fc15053b9579998ce82f22038bab1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1gatordmock_1_1_command_file_parser.xhtml#a224fc15053b9579998ce82f22038bab1">ParseFile</a> (std::string CommandFile, <a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a> &amp;mockService)</td></tr>
<tr class="separator:a224fc15053b9579998ce82f22038bab1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This class parses a command file for the <a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml" title="A class that implements a Mock Gatord server. ">GatordMockService</a>. </p>
<p>The file contains one command per line. Valid commands are: SET and WAIT.</p>
<p>SET: Will construct and send a PeriodicCounterSelection packet to enable a set of counters. WAIT: Will pause for a set period of time to allow for data to be received. </p>

<p class="definition">Definition at line <a class="el" href="_command_file_parser_8hpp_source.xhtml#l00022">22</a> of file <a class="el" href="_command_file_parser_8hpp_source.xhtml">CommandFileParser.hpp</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a224fc15053b9579998ce82f22038bab1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a224fc15053b9579998ce82f22038bab1">&#9670;&nbsp;</a></span>ParseFile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParseFile </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>CommandFile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1gatordmock_1_1_gatord_mock_service.xhtml">GatordMockService</a> &amp;&#160;</td>
          <td class="paramname"><em>mockService</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_command_file_parser_8cpp_source.xhtml#l00019">19</a> of file <a class="el" href="_command_file_parser_8cpp_source.xhtml">CommandFileParser.cpp</a>.</p>

<p class="reference">References <a class="el" href="_gatord_mock_service_8hpp_source.xhtml#l00112">GatordMockService::ReceiveThreadRunning()</a>, <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00044">GatordMockService::SendActivateTimelinePacket()</a>, <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00054">GatordMockService::SendDeactivateTimelinePacket()</a>, <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00106">GatordMockService::SendPeriodicCounterSelectionList()</a>, <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00034">GatordMockService::SendRequestCounterDir()</a>, and <a class="el" href="_gatord_mock_service_8cpp_source.xhtml#l00138">GatordMockService::WaitCommand()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gatord_mock_main_8cpp_source.xhtml#l00026">CreateMockService()</a>.</p>
<div class="fragment"><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    std::ifstream infile(CommandFile);</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    std::string line;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;Parsing command file: &quot;</span> &lt;&lt; CommandFile &lt;&lt; std::endl;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordflow">while</span> (mockService.ReceiveThreadRunning() &amp;&amp; std::getline(infile, line))</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        std::istringstream iss(line);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        std::vector&lt;std::string&gt; tokens;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        std::copy(std::istream_iterator&lt;std::string&gt;(iss), std::istream_iterator&lt;std::string&gt;(),</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                  std::back_inserter(tokens));</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keywordflow">if</span> (tokens.size() &gt; 0)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            std::string command = tokens[0];</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            <span class="keywordflow">if</span> (command == <span class="stringliteral">&quot;DISABLE&quot;</span>)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                <span class="comment">// Send a deactivate timeline packet</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                <span class="comment">// Expected format for the ENABLE command</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                <span class="comment">//      DISABLE</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                mockService.SendDeactivateTimelinePacket();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (command == <span class="stringliteral">&quot;ENABLE&quot;</span>)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                <span class="comment">// Send aa activate timeline packet</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                <span class="comment">// Expected format for the ENABLE command</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                <span class="comment">//      ENABLE</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                mockService.SendActivateTimelinePacket();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (command == <span class="stringliteral">&quot;LIST&quot;</span>)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                <span class="comment">// Request the Counter Directory</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                <span class="comment">// Expected format for the LIST command</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                <span class="comment">//      LIST</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                mockService.SendRequestCounterDir();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordflow">if</span> (command == <span class="stringliteral">&quot;SET&quot;</span>)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                <span class="comment">// Send a periodic counter selection packet</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                <span class="comment">// Expected format for the SET command</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                <span class="comment">//      SET 500000 1 2 5 10</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                <span class="comment">// This breaks down to:</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="comment">// SET          command</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="comment">// 500000       polling period in micro seconds</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="comment">// 1 2 5 10     counter list</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="keywordflow">if</span> (tokens.size() &gt; 2) <span class="comment">// minimum of 3 tokens.</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    uint32_t period = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(std::stoul(tokens[1]));</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                    std::vector&lt;uint16_t&gt; counters;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                    std::transform(tokens.begin() + 2, tokens.end(), std::back_inserter(counters),</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                   [](<span class="keyword">const</span> std::string&amp; str)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                       { <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(std::stoul(str)); });</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    mockService.SendPeriodicCounterSelectionList(period, counters);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    std::cerr &lt;&lt; <span class="stringliteral">&quot;Invalid SET command. Format is: SET &lt;polling period&gt; &lt;id list&gt;&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (command == <span class="stringliteral">&quot;WAIT&quot;</span>)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="comment">// Wait for an interval of time in microseconds</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="comment">// Expected format for the WAIT command</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="comment">//      WAIT 11000000</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="comment">//</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                <span class="comment">// This breaks down to:</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="comment">// WAIT         command</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="comment">// 11000000     timeout period in microseconds</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keywordflow">if</span> (tokens.size() &gt; 1) <span class="comment">// minimum of 2 tokens.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    uint32_t timeout = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(std::stoul(tokens[1]));</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    mockService.WaitCommand(timeout);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">else</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    std::cerr &lt;&lt; <span class="stringliteral">&quot;Invalid WAIT command. Format is: WAIT &lt;interval&gt;&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>tests/profiling/gatordmock/<a class="el" href="_command_file_parser_8hpp_source.xhtml">CommandFileParser.hpp</a></li>
<li>tests/profiling/gatordmock/<a class="el" href="_command_file_parser_8cpp_source.xhtml">CommandFileParser.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="namespacearmnn_1_1gatordmock.xhtml">gatordmock</a></li><li class="navelem"><a class="el" href="classarmnn_1_1gatordmock_1_1_command_file_parser.xhtml">CommandFileParser</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:52 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
