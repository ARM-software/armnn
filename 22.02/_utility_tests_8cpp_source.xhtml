<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/armnn/test/UtilityTests.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_utility_tests_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">UtilityTests.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_utility_tests_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2020 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno"><a class="line" href="_utility_tests_8cpp.xhtml#a9c8843f2e977396dc97773ea9e7f0591">    7</a></span>&#160;<span class="preprocessor">#define ARMNN_POLYMORPHIC_CAST_TESTABLE</span></div><div class="line"><a name="l00008"></a><span class="lineno"><a class="line" href="_utility_tests_8cpp.xhtml#a399b20063c50329f7f7078d26e9cac4e">    8</a></span>&#160;<span class="preprocessor">#define ARMNN_NUMERIC_CAST_TESTABLE</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_exceptions_8hpp.xhtml">armnn/Exceptions.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_polymorphic_downcast_8hpp.xhtml">armnn/utility/PolymorphicDowncast.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_numeric_cast_8hpp.xhtml">armnn/utility/NumericCast.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_string_utils_8hpp.xhtml">armnn/utility/StringUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;doctest/doctest.h&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">// Tests of include/Utility files</span></div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="_utility_tests_8cpp.xhtml#a88fa331589632def4550ac5f34a708f0">   21</a></span>&#160;<a class="code" href="_utility_tests_8cpp.xhtml#a88fa331589632def4550ac5f34a708f0">TEST_SUITE</a>(<span class="stringliteral">&quot;UtilityTests&quot;</span>)</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;{</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PolymorphicDowncast&quot;</span>)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keyword">class </span>Base</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keyword">virtual</span> ~Base(){}</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keywordtype">float</span> v;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    };</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keyword">class </span>Child1 : <span class="keyword">public</span> Base</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordtype">int</span> j;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    };</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">class </span>Child2 : <span class="keyword">public</span> Base</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordtype">char</span> b;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    };</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    Child1 child1;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Base* base1 = &amp;child1;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">auto</span> ptr1 = <span class="keyword">dynamic_cast&lt;</span>Child1*<span class="keyword">&gt;</span>(base1);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    CHECK(ptr1 != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    CHECK_NOTHROW(armnn::PolymorphicDowncast&lt;Child1*&gt;(base1));</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    CHECK(armnn::PolymorphicDowncast&lt;Child1*&gt;(base1) == ptr1);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">auto</span> ptr2 = <span class="keyword">dynamic_cast&lt;</span>Child2*<span class="keyword">&gt;</span>(base1);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    CHECK(ptr2 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    CHECK_THROWS_AS(armnn::PolymorphicDowncast&lt;Child2*&gt;(base1), std::bad_cast);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(ptr1, ptr2);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PolymorphicPointerDowncast_SharedPointer&quot;</span>)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">class </span>Base</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">virtual</span> ~Base(){}</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordtype">float</span> v;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    };</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">class </span>Child1 : <span class="keyword">public</span> Base</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordtype">int</span> j;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    };</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">class </span>Child2 : <span class="keyword">public</span> Base</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordtype">char</span> b;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    };</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    std::shared_ptr&lt;Base&gt; base1 = std::make_shared&lt;Child1&gt;();</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    std::shared_ptr&lt;Child1&gt; ptr1 = std::static_pointer_cast&lt;Child1&gt;(base1);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    CHECK(ptr1);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    CHECK_NOTHROW(armnn::PolymorphicPointerDowncast&lt;Child1&gt;(base1));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    CHECK(armnn::PolymorphicPointerDowncast&lt;Child1&gt;(base1) == ptr1);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">auto</span> ptr2 = std::dynamic_pointer_cast&lt;Child2&gt;(base1);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    CHECK(!ptr2);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    CHECK_THROWS_AS(armnn::PolymorphicPointerDowncast&lt;Child2&gt;(base1), std::bad_cast);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(ptr1, ptr2);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;TEST_CASE(<span class="stringliteral">&quot;PolymorphicPointerDowncast_BuildInPointer&quot;</span>)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">class </span>Base</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keyword">virtual</span> ~Base(){}</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordtype">float</span> v;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    };</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">class </span>Child1 : <span class="keyword">public</span> Base</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordtype">int</span> j;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    };</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">class </span>Child2 : <span class="keyword">public</span> Base</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordtype">char</span> b;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    };</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    Child1 child1;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    Base* base1 = &amp;child1;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">auto</span> ptr1 = <span class="keyword">dynamic_cast&lt;</span>Child1*<span class="keyword">&gt;</span>(base1);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    CHECK(ptr1 != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    CHECK_NOTHROW(armnn::PolymorphicPointerDowncast&lt;Child1&gt;(base1));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    CHECK(armnn::PolymorphicPointerDowncast&lt;Child1&gt;(base1) == ptr1);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">auto</span> ptr2 = <span class="keyword">dynamic_cast&lt;</span>Child2*<span class="keyword">&gt;</span>(base1);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    CHECK(ptr2 == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    CHECK_THROWS_AS(armnn::PolymorphicPointerDowncast&lt;Child2&gt;(base1), std::bad_cast);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(ptr1, ptr2);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;TEST_CASE(<span class="stringliteral">&quot;NumericCast&quot;</span>)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;{</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">using namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">// To 8 bit</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;unsigned char&gt;(-1), std::bad_cast);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;unsigned char&gt;(1 &lt;&lt; 8), std::bad_cast);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;unsigned char&gt;(1L &lt;&lt; 16), std::bad_cast);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;unsigned char&gt;(1LL &lt;&lt; 32), std::bad_cast);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;signed char&gt;((1L &lt;&lt; 8)*-1), std::bad_cast);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;signed char&gt;((1L &lt;&lt; 15)*-1), std::bad_cast);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;signed char&gt;((1LL &lt;&lt; 31)*-1), std::bad_cast);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;unsigned char&gt;(1U));</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;unsigned char&gt;(1L));</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;signed char&gt;(-1));</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;signed char&gt;(-1L));</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;signed char&gt;((1 &lt;&lt; 7)*-1));</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">// To 16 bit</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;uint16_t&gt;(-1), std::bad_cast);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;uint16_t&gt;(1L &lt;&lt; 16), std::bad_cast);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;uint16_t&gt;(1LL &lt;&lt; 32), std::bad_cast);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;int16_t&gt;(1L &lt;&lt; 15), std::bad_cast);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;int16_t&gt;(1LL &lt;&lt; 31), std::bad_cast);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;uint16_t&gt;(1L &lt;&lt; 8));</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int16_t&gt;(1L &lt;&lt; 7));</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int16_t&gt;((1L &lt;&lt; 15)*-1));</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int16_t&gt;(1U &lt;&lt; 8));</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int16_t&gt;(1U &lt;&lt; 14));</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="comment">// To 32 bit</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;uint32_t&gt;(1));</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;uint32_t&gt;(1 &lt;&lt; 8));</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;uint32_t&gt;(1L &lt;&lt; 16));</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;uint32_t&gt;(1LL &lt;&lt; 31));</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int32_t&gt;(-1));</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int32_t&gt;((1L &lt;&lt; 8)*-1));</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int32_t&gt;((1L &lt;&lt; 16)*-1));</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int32_t&gt;((1LL &lt;&lt; 31)*-1));</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int32_t&gt;(1U));</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int32_t&gt;(1U &lt;&lt; 8));</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int32_t&gt;(1U &lt;&lt; 16));</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int32_t&gt;(1U &lt;&lt; 30));</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordtype">float</span> float_max = std::numeric_limits&lt;float&gt;::max();</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordtype">float</span> float_min = std::numeric_limits&lt;float&gt;::lowest();</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">auto</span> int8_max = std::numeric_limits&lt;int8_t&gt;::max();</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">auto</span> int16_max = std::numeric_limits&lt;int16_t&gt;::max();</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">auto</span> int32_max = std::numeric_limits&lt;int32_t&gt;::max();</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keyword">auto</span> int8_min = std::numeric_limits&lt;int8_t&gt;::lowest();</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">auto</span> int16_min = std::numeric_limits&lt;int16_t&gt;::lowest();</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keyword">auto</span> int32_min = std::numeric_limits&lt;int32_t&gt;::lowest();</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">auto</span> uint8_max = std::numeric_limits&lt;uint8_t&gt;::max();</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">auto</span> uint16_max = std::numeric_limits&lt;uint16_t&gt;::max();</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">auto</span> uint32_max = std::numeric_limits&lt;uint32_t&gt;::max();</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">auto</span> double_max = std::numeric_limits&lt;double&gt;::max();</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// Float to signed integer</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int32_t&gt;(1.324f));</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    CHECK(1 == numeric_cast&lt;int32_t&gt;(1.324f));</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int32_t&gt;(-1.0f));</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    CHECK(-1 == numeric_cast&lt;int32_t&gt;(-1.0f));</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int8_t&gt;(static_cast&lt;float&gt;(int8_max)));</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int16_t&gt;(static_cast&lt;float&gt;(int16_max)));</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;int32_t&gt;(static_cast&lt;double&gt;(int32_max)));</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;int8_t&gt;(float_max), std::bad_cast);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;int16_t&gt;(float_max), std::bad_cast);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;int32_t&gt;(float_max), std::bad_cast);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;int8_t&gt;(float_min), std::bad_cast);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;int16_t&gt;(float_min), std::bad_cast);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;int32_t&gt;(float_min), std::bad_cast);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="comment">// Signed integer to float</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;float&gt;(1));</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    CHECK(1.0 == numeric_cast&lt;float&gt;(1));</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;float&gt;(-1));</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    CHECK(-1.0 == numeric_cast&lt;float&gt;(-1));</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;float&gt;(int8_max));</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;float&gt;(int16_max));</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;float&gt;(int32_max));</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;float&gt;(int8_min));</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;float&gt;(int16_min));</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;float&gt;(int32_min));</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="comment">// Unsigned integer to float</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;float&gt;(1U));</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    CHECK(1.0 == numeric_cast&lt;float&gt;(1U));</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;float&gt;(uint8_max));</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;float&gt;(uint16_max));</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;float&gt;(uint32_max));</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="comment">// Float to unsigned integer</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;uint32_t&gt;(1.43243f));</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    CHECK(1 == numeric_cast&lt;uint32_t&gt;(1.43243f));</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;uint32_t&gt;(-1.1f), std::bad_cast);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;uint32_t&gt;(float_max), std::bad_cast);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="comment">// Double checks</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;int32_t&gt;(double_max), std::bad_cast);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;int32_t&gt;(double_max), std::bad_cast);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    CHECK_THROWS_AS(numeric_cast&lt;float&gt;(double_max), std::bad_cast);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;double&gt;(int32_max));</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    CHECK_NOTHROW(numeric_cast&lt;long double&gt;(int32_max));</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;TEST_CASE(<span class="stringliteral">&quot;StringToBool&quot;</span>)</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    {</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        CHECK(<span class="keyword">true</span> == <a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;1&quot;</span>));</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        CHECK(<span class="keyword">false</span> == <a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;0&quot;</span>));</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="comment">// Any number larger than 1 will be a failure.</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        CHECK_THROWS_AS(<a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;2&quot;</span>), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        CHECK_THROWS_AS(<a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;23456567&quot;</span>), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        CHECK_THROWS_AS(<a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;-23456567&quot;</span>), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        CHECK_THROWS_AS(<a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;Not a number&quot;</span>), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="comment">// Empty string should be a failure.</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        CHECK_THROWS_AS(<a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;&quot;</span>), <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        CHECK(<span class="keyword">true</span> == <a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;true&quot;</span>));</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        CHECK(<span class="keyword">false</span> == <a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;false&quot;</span>));</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="comment">// Should be case agnostic.</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        CHECK(<span class="keyword">true</span> == <a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;TrUe&quot;</span>));</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        CHECK(<span class="keyword">false</span> == <a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;fAlSe&quot;</span>));</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="comment">// Same negative test cases with throw_on_error set to false.</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        CHECK(<span class="keyword">false</span> == <a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;2&quot;</span>, <span class="keyword">false</span>));</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        CHECK(<span class="keyword">false</span> == <a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;23456567&quot;</span>, <span class="keyword">false</span>));</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        CHECK(<span class="keyword">false</span> == <a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;-23456567&quot;</span>, <span class="keyword">false</span>));</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        CHECK(<span class="keyword">false</span> == <a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;Not a number&quot;</span>, <span class="keyword">false</span>));</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        CHECK(<span class="keyword">false</span> == <a class="code" href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a>(<span class="stringliteral">&quot;&quot;</span>, <span class="keyword">false</span>));</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    }</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div><div class="ttc" id="_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_1_1string_utils_xhtml_a9a85377a37e25f2dd47a4a922691d54c"><div class="ttname"><a href="namespacearmnn_1_1string_utils.xhtml#a9a85377a37e25f2dd47a4a922691d54c">armnn::stringUtils::StringToBool</a></div><div class="ttdeci">bool StringToBool(const std::string &amp;s, bool throw_on_error=true)</div><div class="ttdoc">Converts a string to bool. </div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8hpp_source.xhtml#l00129">StringUtils.hpp:129</a></div></div>
<div class="ttc" id="_utility_tests_8cpp_xhtml_a88fa331589632def4550ac5f34a708f0"><div class="ttname"><a href="_utility_tests_8cpp.xhtml#a88fa331589632def4550ac5f34a708f0">TEST_SUITE</a></div><div class="ttdeci">TEST_SUITE(&quot;UtilityTests&quot;)</div><div class="ttdef"><b>Definition:</b> <a href="_utility_tests_8cpp_source.xhtml#l00021">UtilityTests.cpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="_numeric_cast_8hpp_xhtml"><div class="ttname"><a href="_numeric_cast_8hpp.xhtml">NumericCast.hpp</a></div></div>
<div class="ttc" id="_polymorphic_downcast_8hpp_xhtml"><div class="ttname"><a href="_polymorphic_downcast_8hpp.xhtml">PolymorphicDowncast.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml"><div class="ttname"><a href="_exceptions_8hpp.xhtml">Exceptions.hpp</a></div></div>
<div class="ttc" id="_string_utils_8hpp_xhtml"><div class="ttname"><a href="_string_utils_8hpp.xhtml">StringUtils.hpp</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_e0a84d05c80a2ef4231141dcbbeac5c8.xhtml">armnn</a></li><li class="navelem"><a class="el" href="dir_9d86fd1fbecbedf5bdb69c7e7235fe5f.xhtml">test</a></li><li class="navelem"><a class="el" href="_utility_tests_8cpp.xhtml">UtilityTests.cpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:00:08 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
