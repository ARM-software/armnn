<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: ArmnnDriver Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.11</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn__driver_1_1_armnn_driver.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classarmnn__driver_1_1_armnn_driver-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ArmnnDriver Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ArmnnDriver:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn__driver_1_1_armnn_driver.png" usemap="#ArmnnDriver_map" alt=""/>
  <map id="ArmnnDriver_map" name="ArmnnDriver_map">
<area href="classarmnn__driver_1_1_armnn_device.xhtml" alt="ArmnnDevice" shape="rect" coords="0,0,89,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a132d090eecfeb4e60b1aa5fe22de7324"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml#a132d090eecfeb4e60b1aa5fe22de7324">ArmnnDriver</a> (<a class="el" href="classarmnn__driver_1_1_driver_options.xhtml">DriverOptions</a> options)</td></tr>
<tr class="separator:a132d090eecfeb4e60b1aa5fe22de7324"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a628ca6072fff70434bad4d97f2dafdb0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml#a628ca6072fff70434bad4d97f2dafdb0">~ArmnnDriver</a> ()</td></tr>
<tr class="separator:a628ca6072fff70434bad4d97f2dafdb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40d1d7e884e31b15ae29c80380df6af8"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml#a40d1d7e884e31b15ae29c80380df6af8">getName</a> () const override</td></tr>
<tr class="separator:a40d1d7e884e31b15ae29c80380df6af8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7b29ef934a8850143c5a602b4b4d862"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml#aa7b29ef934a8850143c5a602b4b4d862">getVersionString</a> () const override</td></tr>
<tr class="separator:aa7b29ef934a8850143c5a602b4b4d862"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9168242d0020713e55303e5ea24c67dd"><td class="memItemLeft" align="right" valign="top">Version&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml#a9168242d0020713e55303e5ea24c67dd">getFeatureLevel</a> () const override</td></tr>
<tr class="separator:a9168242d0020713e55303e5ea24c67dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1feb3ca53949b6ca799d5566585b0b1b"><td class="memItemLeft" align="right" valign="top">DeviceType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml#a1feb3ca53949b6ca799d5566585b0b1b">getType</a> () const override</td></tr>
<tr class="separator:a1feb3ca53949b6ca799d5566585b0b1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1803df318d399984db9707863cc393d"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; Extension &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml#ad1803df318d399984db9707863cc393d">getSupportedExtensions</a> () const override</td></tr>
<tr class="separator:ad1803df318d399984db9707863cc393d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6634f9b4231e8a530eb96fd02374e324"><td class="memItemLeft" align="right" valign="top">const Capabilities &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml#a6634f9b4231e8a530eb96fd02374e324">getCapabilities</a> () const override</td></tr>
<tr class="separator:a6634f9b4231e8a530eb96fd02374e324"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fc54539abe7641235bbc5e49c333bcc"><td class="memItemLeft" align="right" valign="top">std::pair&lt; uint32_t, uint32_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml#a6fc54539abe7641235bbc5e49c333bcc">getNumberOfCacheFilesNeeded</a> () const override</td></tr>
<tr class="separator:a6fc54539abe7641235bbc5e49c333bcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa46af6ba82452e5b3308e16bb907d3c6"><td class="memItemLeft" align="right" valign="top">GeneralResult&lt; void &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml#aa46af6ba82452e5b3308e16bb907d3c6">wait</a> () const override</td></tr>
<tr class="separator:aa46af6ba82452e5b3308e16bb907d3c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a002f1e6a2b0645c6cb7a39d41f28240b"><td class="memItemLeft" align="right" valign="top">GeneralResult&lt; std::vector&lt; bool &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml#a002f1e6a2b0645c6cb7a39d41f28240b">getSupportedOperations</a> (const <a class="el" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a> &amp;model) const override</td></tr>
<tr class="separator:a002f1e6a2b0645c6cb7a39d41f28240b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65e479145a11af81821be4e09f61f5ff"><td class="memItemLeft" align="right" valign="top">GeneralResult&lt; SharedPreparedModel &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml#a65e479145a11af81821be4e09f61f5ff">prepareModel</a> (const <a class="el" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a> &amp;model, ExecutionPreference preference, Priority priority, OptionalTimePoint deadline, const std::vector&lt; SharedHandle &gt; &amp;modelCache, const std::vector&lt; SharedHandle &gt; &amp;dataCache, const CacheToken &amp;token, const std::vector&lt; android::nn::TokenValuePair &gt; &amp;hints, const std::vector&lt; android::nn::ExtensionNameAndPrefix &gt; &amp;extensionNameToPrefix) const override</td></tr>
<tr class="separator:a65e479145a11af81821be4e09f61f5ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2f9815f9601ed546fed1d3f7578419f"><td class="memItemLeft" align="right" valign="top">GeneralResult&lt; SharedPreparedModel &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml#ac2f9815f9601ed546fed1d3f7578419f">prepareModelFromCache</a> (OptionalTimePoint deadline, const std::vector&lt; SharedHandle &gt; &amp;modelCache, const std::vector&lt; SharedHandle &gt; &amp;dataCache, const CacheToken &amp;token) const override</td></tr>
<tr class="separator:ac2f9815f9601ed546fed1d3f7578419f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a754825c6b4ab3d717f56bbdbdce35526"><td class="memItemLeft" align="right" valign="top">GeneralResult&lt; SharedBuffer &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml#a754825c6b4ab3d717f56bbdbdce35526">allocate</a> (const BufferDesc &amp;, const std::vector&lt; SharedPreparedModel &gt; &amp;, const std::vector&lt; BufferRole &gt; &amp;, const std::vector&lt; BufferRole &gt; &amp;) const override</td></tr>
<tr class="separator:a754825c6b4ab3d717f56bbdbdce35526"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_methods_classarmnn__driver_1_1_armnn_device"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classarmnn__driver_1_1_armnn_device')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classarmnn__driver_1_1_armnn_device.xhtml">ArmnnDevice</a></td></tr>
<tr class="memitem:a095fedd3ed5795e736055b367869fe07 inherit pro_methods_classarmnn__driver_1_1_armnn_device"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_device.xhtml#a095fedd3ed5795e736055b367869fe07">ArmnnDevice</a> (<a class="el" href="classarmnn__driver_1_1_driver_options.xhtml">DriverOptions</a> options)</td></tr>
<tr class="separator:a095fedd3ed5795e736055b367869fe07 inherit pro_methods_classarmnn__driver_1_1_armnn_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac11afef8d332ac244329d475522294ee inherit pro_methods_classarmnn__driver_1_1_armnn_device"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_device.xhtml#ac11afef8d332ac244329d475522294ee">~ArmnnDevice</a> ()</td></tr>
<tr class="separator:ac11afef8d332ac244329d475522294ee inherit pro_methods_classarmnn__driver_1_1_armnn_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classarmnn__driver_1_1_armnn_device"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classarmnn__driver_1_1_armnn_device')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="classarmnn__driver_1_1_armnn_device.xhtml">ArmnnDevice</a></td></tr>
<tr class="memitem:aefd699eb0838261fbe9770d511f63f24 inherit pro_attribs_classarmnn__driver_1_1_armnn_device"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a150468a02bd7b2d2d061c4aaaee939f0">armnn::IRuntimePtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_device.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a></td></tr>
<tr class="separator:aefd699eb0838261fbe9770d511f63f24 inherit pro_attribs_classarmnn__driver_1_1_armnn_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16977c5a21ac23ba6dfb783a98eb172c inherit pro_attribs_classarmnn__driver_1_1_armnn_device"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearmnn.xhtml#a2d3a708a26ac6d77bf8f15506e89a25a">armnn::IGpuAccTunedParametersPtr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_device.xhtml#a16977c5a21ac23ba6dfb783a98eb172c">m_ClTunedParameters</a></td></tr>
<tr class="separator:a16977c5a21ac23ba6dfb783a98eb172c inherit pro_attribs_classarmnn__driver_1_1_armnn_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33bc6665817301bb3bf1699189c23ae3 inherit pro_attribs_classarmnn__driver_1_1_armnn_device"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarmnn__driver_1_1_driver_options.xhtml">DriverOptions</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn__driver_1_1_armnn_device.xhtml#a33bc6665817301bb3bf1699189c23ae3">m_Options</a></td></tr>
<tr class="separator:a33bc6665817301bb3bf1699189c23ae3 inherit pro_attribs_classarmnn__driver_1_1_armnn_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="_armnn_driver_8hpp_source.xhtml#l00031">31</a> of file <a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a132d090eecfeb4e60b1aa5fe22de7324"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a132d090eecfeb4e60b1aa5fe22de7324">&#9670;&nbsp;</a></span>ArmnnDriver()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml">ArmnnDriver</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn__driver_1_1_driver_options.xhtml">DriverOptions</a>&#160;</td>
          <td class="paramname"><em>options</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_driver_8hpp_source.xhtml#l00035">35</a> of file <a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        : <a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#a095fedd3ed5795e736055b367869fe07">ArmnnDevice</a>(std::move(options))</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::ArmnnDriver()&quot;</span>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    }</div><div class="ttc" id="classarmnn__driver_1_1_armnn_device_xhtml_a095fedd3ed5795e736055b367869fe07"><div class="ttname"><a href="classarmnn__driver_1_1_armnn_device.xhtml#a095fedd3ed5795e736055b367869fe07">armnn_driver::ArmnnDevice::ArmnnDevice</a></div><div class="ttdeci">ArmnnDevice(DriverOptions options)</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_device_8cpp_source.xhtml#l00042">ArmnnDevice.cpp:42</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a628ca6072fff70434bad4d97f2dafdb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a628ca6072fff70434bad4d97f2dafdb0">&#9670;&nbsp;</a></span>~ArmnnDriver()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml">ArmnnDriver</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_driver_8hpp_source.xhtml#l00040">40</a> of file <a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::~ArmnnDriver()&quot;</span>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a754825c6b4ab3d717f56bbdbdce35526"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a754825c6b4ab3d717f56bbdbdce35526">&#9670;&nbsp;</a></span>allocate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GeneralResult&lt;SharedBuffer&gt; allocate </td>
          <td>(</td>
          <td class="paramtype">const BufferDesc &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; SharedPreparedModel &gt; &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; BufferRole &gt; &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; BufferRole &gt; &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_driver_8hpp_source.xhtml#l00232">232</a> of file <a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::allocate()&quot;</span>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::INVALID_ARGUMENT) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::allocate -- does not support allocate.&quot;</span>;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a6634f9b4231e8a530eb96fd02374e324"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6634f9b4231e8a530eb96fd02374e324">&#9670;&nbsp;</a></span>getCapabilities()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const Capabilities&amp; getCapabilities </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_driver_8hpp_source.xhtml#l00080">80</a> of file <a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>.</p>

<p class="reference">References <a class="el" href="_armnn_driver_impl_8cpp_source.xhtml#l00549">ArmnnDriverImpl::GetCapabilities()</a>, and <a class="el" href="_armnn_device_8hpp_source.xhtml#l00023">ArmnnDevice::m_Runtime</a>.</p>
<div class="fragment"><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::GetCapabilities()&quot;</span>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_armnn_driver_impl.xhtml#ae1de3914a6c5726a757ecd79ebb2e9fc">ArmnnDriverImpl::GetCapabilities</a>(<a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="ttc" id="classarmnn__driver_1_1_armnn_device_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="classarmnn__driver_1_1_armnn_device.xhtml#aefd699eb0838261fbe9770d511f63f24">armnn_driver::ArmnnDevice::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_device_8hpp_source.xhtml#l00023">ArmnnDevice.hpp:23</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_armnn_driver_impl_xhtml_ae1de3914a6c5726a757ecd79ebb2e9fc"><div class="ttname"><a href="classarmnn__driver_1_1_armnn_driver_impl.xhtml#ae1de3914a6c5726a757ecd79ebb2e9fc">armnn_driver::ArmnnDriverImpl::GetCapabilities</a></div><div class="ttdeci">static const Capabilities &amp; GetCapabilities(const armnn::IRuntimePtr &amp;runtime)</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_driver_impl_8cpp_source.xhtml#l00549">ArmnnDriverImpl.cpp:549</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9168242d0020713e55303e5ea24c67dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9168242d0020713e55303e5ea24c67dd">&#9670;&nbsp;</a></span>getFeatureLevel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Version getFeatureLevel </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_driver_8hpp_source.xhtml#l00061">61</a> of file <a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::getFeatureLevel()&quot;</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">return</span> kVersionFeatureLevel6;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a40d1d7e884e31b15ae29c80380df6af8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40d1d7e884e31b15ae29c80380df6af8">&#9670;&nbsp;</a></span>getName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::string&amp; getName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_driver_8hpp_source.xhtml#l00047">47</a> of file <a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::getName()&quot;</span>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> std::string name = <span class="stringliteral">&quot;arm-armnn-sl&quot;</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">return</span> name;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a6fc54539abe7641235bbc5e49c333bcc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6fc54539abe7641235bbc5e49c333bcc">&#9670;&nbsp;</a></span>getNumberOfCacheFilesNeeded()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;uint32_t, uint32_t&gt; getNumberOfCacheFilesNeeded </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_driver_8hpp_source.xhtml#l00086">86</a> of file <a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>.</p>

<p class="reference">References <a class="el" href="_driver_options_8hpp_source.xhtml#l00026">DriverOptions::GetBackends()</a>, <a class="el" href="_backend_helper_8cpp_source.xhtml#l00113">armnn::GetNumberOfCacheFiles()</a>, and <a class="el" href="_armnn_device_8hpp_source.xhtml#l00025">ArmnnDevice::m_Options</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::getNumberOfCacheFilesNeeded()&quot;</span>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numberOfCachedModelFiles = 0;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; backend : <a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#a33bc6665817301bb3bf1699189c23ae3">m_Options</a>.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">GetBackends</a>())</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            numberOfCachedModelFiles += <a class="code" href="namespacearmnn.xhtml#ae266ee8bf362cbf8a88ab6e6b389791a">GetNumberOfCacheFiles</a>(backend);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::getNumberOfCacheFilesNeeded() = &quot;</span> &lt;&lt; std::to_string(numberOfCachedModelFiles);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">return</span> std::make_pair(numberOfCachedModelFiles, 1ul);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="ttc" id="namespacearmnn_xhtml_ae266ee8bf362cbf8a88ab6e6b389791a"><div class="ttname"><a href="namespacearmnn.xhtml#ae266ee8bf362cbf8a88ab6e6b389791a">armnn::GetNumberOfCacheFiles</a></div><div class="ttdeci">unsigned int GetNumberOfCacheFiles(const armnn::BackendId &amp;backend)</div><div class="ttdoc">Returns the number of cached files if backend supports caching. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_helper_8cpp_source.xhtml#l00113">BackendHelper.cpp:113</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_ad95feca4087d8e42ecacc1950a3d3901"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">armnn_driver::DriverOptions::GetBackends</a></div><div class="ttdeci">const std::vector&lt; armnn::BackendId &gt; &amp; GetBackends() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00026">DriverOptions.hpp:26</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_armnn_device_xhtml_a33bc6665817301bb3bf1699189c23ae3"><div class="ttname"><a href="classarmnn__driver_1_1_armnn_device.xhtml#a33bc6665817301bb3bf1699189c23ae3">armnn_driver::ArmnnDevice::m_Options</a></div><div class="ttdeci">DriverOptions m_Options</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_device_8hpp_source.xhtml#l00025">ArmnnDevice.hpp:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad1803df318d399984db9707863cc393d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1803df318d399984db9707863cc393d">&#9670;&nbsp;</a></span>getSupportedExtensions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;Extension&gt;&amp; getSupportedExtensions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_driver_8hpp_source.xhtml#l00073">73</a> of file <a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::getSupportedExtensions()&quot;</span>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> std::vector&lt;Extension&gt; extensions = {};</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">return</span> extensions;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a002f1e6a2b0645c6cb7a39d41f28240b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a002f1e6a2b0645c6cb7a39d41f28240b">&#9670;&nbsp;</a></span>getSupportedOperations()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GeneralResult&lt;std::vector&lt;bool&gt; &gt; getSupportedOperations </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_driver_8hpp_source.xhtml#l00104">104</a> of file <a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>.</p>

<p class="reference">References <a class="el" href="_driver_options_8hpp_source.xhtml#l00026">DriverOptions::GetBackends()</a>, <a class="el" href="_driver_options_8hpp_source.xhtml#l00030">DriverOptions::GetForcedUnsupportedOperations()</a>, <a class="el" href="_driver_options_8hpp_source.xhtml#l00028">DriverOptions::GetRequestInputsAndOutputsDumpDir()</a>, <a class="el" href="_model_to_i_network_transformer_8cpp_source.xhtml#l00195">ModelToINetworkTransformer::IsOperationSupported()</a>, <a class="el" href="_armnn_device_8hpp_source.xhtml#l00025">ArmnnDevice::m_Options</a>, <a class="el" href="_armnn_device_8hpp_source.xhtml#l00023">ArmnnDevice::m_Runtime</a>, <a class="el" href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9a505a83f220c02df2f85c3810cd9ceb38">armnn_driver::Success</a>, and <a class="el" href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9a6dcca67f0df2a0038edf5a82b1399527">armnn_driver::UnsupportedFeature</a>.</p>
<div class="fragment"><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::getSupportedOperations()&quot;</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        std::stringstream ss;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        ss &lt;&lt; <span class="stringliteral">&quot;ArmnnDriverImpl::getSupportedOperations()&quot;</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        std::string fileName;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        std::string timestamp;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#a33bc6665817301bb3bf1699189c23ae3">m_Options</a>.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a052b5692df75f05d7f0710faca305bb8">GetRequestInputsAndOutputsDumpDir</a>().empty())</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            ss &lt;&lt; <span class="stringliteral">&quot; : &quot;</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;               &lt;&lt; <a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#a33bc6665817301bb3bf1699189c23ae3">m_Options</a>.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a052b5692df75f05d7f0710faca305bb8">GetRequestInputsAndOutputsDumpDir</a>()</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;               &lt;&lt; <span class="stringliteral">&quot;/&quot;</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;               <span class="comment">// &lt;&lt; GetFileTimestamp()</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;               &lt;&lt; <span class="stringliteral">&quot;_getSupportedOperations.txt&quot;</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        VLOG(DRIVER) &lt;&lt; ss.str().c_str();</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#a33bc6665817301bb3bf1699189c23ae3">m_Options</a>.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a052b5692df75f05d7f0710faca305bb8">GetRequestInputsAndOutputsDumpDir</a>().empty())</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="comment">//dump the marker file</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            std::ofstream fileStream;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            fileStream.open(fileName, std::ofstream::out | std::ofstream::trunc);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">if</span> (fileStream.good())</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                fileStream &lt;&lt; timestamp &lt;&lt; std::endl;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                fileStream &lt;&lt; timestamp &lt;&lt; std::endl;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            fileStream.close();</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        std::vector&lt;bool&gt; result;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::DEVICE_UNAVAILABLE) &lt;&lt; <span class="stringliteral">&quot;Device Unavailable!&quot;</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="comment">// Run general model validation, if this doesn&#39;t pass we shouldn&#39;t analyse the model anyway.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">if</span> (<span class="keyword">const</span> <span class="keyword">auto</span> result = validate(model); !result.ok())</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::INVALID_ARGUMENT) &lt;&lt; <span class="stringliteral">&quot;Invalid Model!&quot;</span>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="comment">// Attempt to convert the model to an ArmNN input network (INetwork).</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <a class="code" href="classarmnn__driver_1_1_model_to_i_network_transformer.xhtml">ModelToINetworkTransformer</a> modelConverter(<a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#a33bc6665817301bb3bf1699189c23ae3">m_Options</a>.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">GetBackends</a>(),</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                                  model,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                                  <a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#a33bc6665817301bb3bf1699189c23ae3">m_Options</a>.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#a92495dbd4f6193801f3bc97283b47efb">GetForcedUnsupportedOperations</a>());</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">if</span> (modelConverter.GetConversionResult() != <a class="code" href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9a505a83f220c02df2f85c3810cd9ceb38">ConversionResult::Success</a></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            &amp;&amp; modelConverter.GetConversionResult() != <a class="code" href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9a6dcca67f0df2a0038edf5a82b1399527">ConversionResult::UnsupportedFeature</a>)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::GENERAL_FAILURE) &lt;&lt; <span class="stringliteral">&quot;Conversion Error!&quot;</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="comment">// Check each operation if it was converted successfully and copy the flags</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="comment">// into the result (vector&lt;bool&gt;) that we need to return to Android.</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        result.reserve(model.main.operations.size());</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">for</span> (uint32_t operationIdx = 0; operationIdx &lt; model.main.operations.size(); ++operationIdx)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordtype">bool</span> operationSupported = modelConverter.<a class="code" href="classarmnn__driver_1_1_model_to_i_network_transformer.xhtml#a40b4ed2ba597213863c7b380f8fd2e8a">IsOperationSupported</a>(operationIdx);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            result.push_back(operationSupported);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div><div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_a92495dbd4f6193801f3bc97283b47efb"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#a92495dbd4f6193801f3bc97283b47efb">armnn_driver::DriverOptions::GetForcedUnsupportedOperations</a></div><div class="ttdeci">const std::set&lt; unsigned int &gt; &amp; GetForcedUnsupportedOperations() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00030">DriverOptions.hpp:30</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_armnn_device_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="classarmnn__driver_1_1_armnn_device.xhtml#aefd699eb0838261fbe9770d511f63f24">armnn_driver::ArmnnDevice::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_device_8hpp_source.xhtml#l00023">ArmnnDevice.hpp:23</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_afa2a6d5a1431289c92cea9cceeb174c9a6dcca67f0df2a0038edf5a82b1399527"><div class="ttname"><a href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9a6dcca67f0df2a0038edf5a82b1399527">armnn_driver::ConversionResult::UnsupportedFeature</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_a052b5692df75f05d7f0710faca305bb8"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#a052b5692df75f05d7f0710faca305bb8">armnn_driver::DriverOptions::GetRequestInputsAndOutputsDumpDir</a></div><div class="ttdeci">const std::string &amp; GetRequestInputsAndOutputsDumpDir() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00028">DriverOptions.hpp:28</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_model_to_i_network_transformer_xhtml_a40b4ed2ba597213863c7b380f8fd2e8a"><div class="ttname"><a href="classarmnn__driver_1_1_model_to_i_network_transformer.xhtml#a40b4ed2ba597213863c7b380f8fd2e8a">armnn_driver::ModelToINetworkTransformer::IsOperationSupported</a></div><div class="ttdeci">bool IsOperationSupported(uint32_t operationIndex) const</div><div class="ttdef"><b>Definition:</b> <a href="_model_to_i_network_transformer_8cpp_source.xhtml#l00195">ModelToINetworkTransformer.cpp:195</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_model_to_i_network_transformer_xhtml"><div class="ttname"><a href="classarmnn__driver_1_1_model_to_i_network_transformer.xhtml">armnn_driver::ModelToINetworkTransformer</a></div><div class="ttdef"><b>Definition:</b> <a href="_model_to_i_network_transformer_8hpp_source.xhtml#l00030">ModelToINetworkTransformer.hpp:30</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_ad95feca4087d8e42ecacc1950a3d3901"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#ad95feca4087d8e42ecacc1950a3d3901">armnn_driver::DriverOptions::GetBackends</a></div><div class="ttdeci">const std::vector&lt; armnn::BackendId &gt; &amp; GetBackends() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00026">DriverOptions.hpp:26</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_afa2a6d5a1431289c92cea9cceeb174c9a505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9a505a83f220c02df2f85c3810cd9ceb38">armnn_driver::ConversionResult::Success</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_armnn_device_xhtml_a33bc6665817301bb3bf1699189c23ae3"><div class="ttname"><a href="classarmnn__driver_1_1_armnn_device.xhtml#a33bc6665817301bb3bf1699189c23ae3">armnn_driver::ArmnnDevice::m_Options</a></div><div class="ttdeci">DriverOptions m_Options</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_device_8hpp_source.xhtml#l00025">ArmnnDevice.hpp:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1feb3ca53949b6ca799d5566585b0b1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1feb3ca53949b6ca799d5566585b0b1b">&#9670;&nbsp;</a></span>getType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">DeviceType getType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_driver_8hpp_source.xhtml#l00067">67</a> of file <a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::getType()&quot;</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">return</span> DeviceType::CPU;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="aa7b29ef934a8850143c5a602b4b4d862"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7b29ef934a8850143c5a602b4b4d862">&#9670;&nbsp;</a></span>getVersionString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::string&amp; getVersionString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_driver_8hpp_source.xhtml#l00054">54</a> of file <a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>.</p>

<p class="reference">References <a class="el" href="include_2armnn_2_version_8hpp_source.xhtml#l00022">ARMNN_VERSION</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::getVersionString()&quot;</span>;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> std::string versionString = <a class="code" href="include_2armnn_2_version_8hpp.xhtml#a50bf0553d5c4b76d18a3d37e155b4d11">ARMNN_VERSION</a>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">return</span> versionString;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="ttc" id="include_2armnn_2_version_8hpp_xhtml_a50bf0553d5c4b76d18a3d37e155b4d11"><div class="ttname"><a href="include_2armnn_2_version_8hpp.xhtml#a50bf0553d5c4b76d18a3d37e155b4d11">ARMNN_VERSION</a></div><div class="ttdeci">#define ARMNN_VERSION</div><div class="ttdoc">ARMNN_VERSION: &quot;X.Y.Z&quot; where: X = Major version number Y = Minor version number Z = Patch version num...</div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2_version_8hpp_source.xhtml#l00022">Version.hpp:22</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a65e479145a11af81821be4e09f61f5ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65e479145a11af81821be4e09f61f5ff">&#9670;&nbsp;</a></span>prepareModel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GeneralResult&lt;SharedPreparedModel&gt; prepareModel </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a> &amp;&#160;</td>
          <td class="paramname"><em>model</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ExecutionPreference&#160;</td>
          <td class="paramname"><em>preference</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Priority&#160;</td>
          <td class="paramname"><em>priority</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OptionalTimePoint&#160;</td>
          <td class="paramname"><em>deadline</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; SharedHandle &gt; &amp;&#160;</td>
          <td class="paramname"><em>modelCache</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; SharedHandle &gt; &amp;&#160;</td>
          <td class="paramname"><em>dataCache</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const CacheToken &amp;&#160;</td>
          <td class="paramname"><em>token</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; android::nn::TokenValuePair &gt; &amp;&#160;</td>
          <td class="paramname"><em>hints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; android::nn::ExtensionNameAndPrefix &gt; &amp;&#160;</td>
          <td class="paramname"><em>extensionNameToPrefix</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_driver_8hpp_source.xhtml#l00170">170</a> of file <a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>.</p>

<p class="reference">References <a class="el" href="_driver_options_8hpp_source.xhtml#l00037">DriverOptions::GetFp16Enabled()</a>, <a class="el" href="_armnn_device_8hpp_source.xhtml#l00024">ArmnnDevice::m_ClTunedParameters</a>, <a class="el" href="_armnn_device_8hpp_source.xhtml#l00025">ArmnnDevice::m_Options</a>, <a class="el" href="_armnn_device_8hpp_source.xhtml#l00023">ArmnnDevice::m_Runtime</a>, and <a class="el" href="_armnn_driver_impl_8cpp_source.xhtml#l00099">ArmnnDriverImpl::PrepareArmnnModel()</a>.</p>
<div class="fragment"><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::prepareModel()&quot;</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="comment">// Validate arguments.</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">if</span> (<span class="keyword">const</span> <span class="keyword">auto</span> result = validate(model); !result.ok()) {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::INVALID_ARGUMENT) &lt;&lt; <span class="stringliteral">&quot;Invalid Model: &quot;</span> &lt;&lt; result.error();</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordflow">if</span> (<span class="keyword">const</span> <span class="keyword">auto</span> result = validate(preference); !result.ok()) {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::INVALID_ARGUMENT)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;Invalid ExecutionPreference: &quot;</span> &lt;&lt; result.error();</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">if</span> (<span class="keyword">const</span> <span class="keyword">auto</span> result = validate(priority); !result.ok()) {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::INVALID_ARGUMENT) &lt;&lt; <span class="stringliteral">&quot;Invalid Priority: &quot;</span> &lt;&lt; result.error();</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="comment">// Check if deadline has passed.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">if</span> (hasDeadlinePassed(deadline)) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::MISSED_DEADLINE_PERSISTENT);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_armnn_driver_impl.xhtml#ad7f46e940507224fb741406dc216f370">ArmnnDriverImpl::PrepareArmnnModel</a>(<a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>,</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                                  <a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#a16977c5a21ac23ba6dfb783a98eb172c">m_ClTunedParameters</a>,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                                  <a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#a33bc6665817301bb3bf1699189c23ae3">m_Options</a>,</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                                  model,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                                  modelCache,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                                  dataCache,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                                  token,</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                                  model.relaxComputationFloat32toFloat16 &amp;&amp; <a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#a33bc6665817301bb3bf1699189c23ae3">m_Options</a>.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ab87efed59f4c326d62c9c558c1e70f83">GetFp16Enabled</a>(),</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                                  priority);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    }</div><div class="ttc" id="classarmnn__driver_1_1_armnn_device_xhtml_a16977c5a21ac23ba6dfb783a98eb172c"><div class="ttname"><a href="classarmnn__driver_1_1_armnn_device.xhtml#a16977c5a21ac23ba6dfb783a98eb172c">armnn_driver::ArmnnDevice::m_ClTunedParameters</a></div><div class="ttdeci">armnn::IGpuAccTunedParametersPtr m_ClTunedParameters</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_device_8hpp_source.xhtml#l00024">ArmnnDevice.hpp:24</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_ab87efed59f4c326d62c9c558c1e70f83"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#ab87efed59f4c326d62c9c558c1e70f83">armnn_driver::DriverOptions::GetFp16Enabled</a></div><div class="ttdeci">bool GetFp16Enabled() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00037">DriverOptions.hpp:37</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_armnn_device_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="classarmnn__driver_1_1_armnn_device.xhtml#aefd699eb0838261fbe9770d511f63f24">armnn_driver::ArmnnDevice::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_device_8hpp_source.xhtml#l00023">ArmnnDevice.hpp:23</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_armnn_driver_impl_xhtml_ad7f46e940507224fb741406dc216f370"><div class="ttname"><a href="classarmnn__driver_1_1_armnn_driver_impl.xhtml#ad7f46e940507224fb741406dc216f370">armnn_driver::ArmnnDriverImpl::PrepareArmnnModel</a></div><div class="ttdeci">static GeneralResult&lt; SharedPreparedModel &gt; PrepareArmnnModel(const armnn::IRuntimePtr &amp;runtime, const armnn::IGpuAccTunedParametersPtr &amp;clTunedParameters, const DriverOptions &amp;options, const Model &amp;model, const std::vector&lt; SharedHandle &gt; &amp;modelCacheHandle, const std::vector&lt; SharedHandle &gt; &amp;dataCacheHandle, const CacheToken &amp;token, bool float32ToFloat16=false, Priority priority=Priority::MEDIUM)</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_driver_impl_8cpp_source.xhtml#l00099">ArmnnDriverImpl.cpp:99</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_armnn_device_xhtml_a33bc6665817301bb3bf1699189c23ae3"><div class="ttname"><a href="classarmnn__driver_1_1_armnn_device.xhtml#a33bc6665817301bb3bf1699189c23ae3">armnn_driver::ArmnnDevice::m_Options</a></div><div class="ttdeci">DriverOptions m_Options</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_device_8hpp_source.xhtml#l00025">ArmnnDevice.hpp:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac2f9815f9601ed546fed1d3f7578419f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2f9815f9601ed546fed1d3f7578419f">&#9670;&nbsp;</a></span>prepareModelFromCache()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GeneralResult&lt;SharedPreparedModel&gt; prepareModelFromCache </td>
          <td>(</td>
          <td class="paramtype">OptionalTimePoint&#160;</td>
          <td class="paramname"><em>deadline</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; SharedHandle &gt; &amp;&#160;</td>
          <td class="paramname"><em>modelCache</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; SharedHandle &gt; &amp;&#160;</td>
          <td class="paramname"><em>dataCache</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const CacheToken &amp;&#160;</td>
          <td class="paramname"><em>token</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_driver_8hpp_source.xhtml#l00210">210</a> of file <a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>.</p>

<p class="reference">References <a class="el" href="_driver_options_8hpp_source.xhtml#l00037">DriverOptions::GetFp16Enabled()</a>, <a class="el" href="_armnn_device_8hpp_source.xhtml#l00024">ArmnnDevice::m_ClTunedParameters</a>, <a class="el" href="_armnn_device_8hpp_source.xhtml#l00025">ArmnnDevice::m_Options</a>, <a class="el" href="_armnn_device_8hpp_source.xhtml#l00023">ArmnnDevice::m_Runtime</a>, and <a class="el" href="_armnn_driver_impl_8cpp_source.xhtml#l00338">ArmnnDriverImpl::PrepareArmnnModelFromCache()</a>.</p>
<div class="fragment"><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::prepareModelFromCache()&quot;</span>;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="comment">// Check if deadline has passed.</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">if</span> (hasDeadlinePassed(deadline)) {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="keywordflow">return</span> NN_ERROR(ErrorStatus::MISSED_DEADLINE_PERSISTENT);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarmnn__driver_1_1_armnn_driver_impl.xhtml#a3f22b9cef4af3244aaed9c28f7674a1b">ArmnnDriverImpl::PrepareArmnnModelFromCache</a>(</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                     <a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#aefd699eb0838261fbe9770d511f63f24">m_Runtime</a>,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                     <a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#a16977c5a21ac23ba6dfb783a98eb172c">m_ClTunedParameters</a>,</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                     <a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#a33bc6665817301bb3bf1699189c23ae3">m_Options</a>,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                     modelCache,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                     dataCache,</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                     token,</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                     <a class="code" href="classarmnn__driver_1_1_armnn_device.xhtml#a33bc6665817301bb3bf1699189c23ae3">m_Options</a>.<a class="code" href="classarmnn__driver_1_1_driver_options.xhtml#ab87efed59f4c326d62c9c558c1e70f83">GetFp16Enabled</a>());</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    }</div><div class="ttc" id="classarmnn__driver_1_1_armnn_device_xhtml_a16977c5a21ac23ba6dfb783a98eb172c"><div class="ttname"><a href="classarmnn__driver_1_1_armnn_device.xhtml#a16977c5a21ac23ba6dfb783a98eb172c">armnn_driver::ArmnnDevice::m_ClTunedParameters</a></div><div class="ttdeci">armnn::IGpuAccTunedParametersPtr m_ClTunedParameters</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_device_8hpp_source.xhtml#l00024">ArmnnDevice.hpp:24</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_driver_options_xhtml_ab87efed59f4c326d62c9c558c1e70f83"><div class="ttname"><a href="classarmnn__driver_1_1_driver_options.xhtml#ab87efed59f4c326d62c9c558c1e70f83">armnn_driver::DriverOptions::GetFp16Enabled</a></div><div class="ttdeci">bool GetFp16Enabled() const</div><div class="ttdef"><b>Definition:</b> <a href="_driver_options_8hpp_source.xhtml#l00037">DriverOptions.hpp:37</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_armnn_device_xhtml_aefd699eb0838261fbe9770d511f63f24"><div class="ttname"><a href="classarmnn__driver_1_1_armnn_device.xhtml#aefd699eb0838261fbe9770d511f63f24">armnn_driver::ArmnnDevice::m_Runtime</a></div><div class="ttdeci">armnn::IRuntimePtr m_Runtime</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_device_8hpp_source.xhtml#l00023">ArmnnDevice.hpp:23</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_armnn_driver_impl_xhtml_a3f22b9cef4af3244aaed9c28f7674a1b"><div class="ttname"><a href="classarmnn__driver_1_1_armnn_driver_impl.xhtml#a3f22b9cef4af3244aaed9c28f7674a1b">armnn_driver::ArmnnDriverImpl::PrepareArmnnModelFromCache</a></div><div class="ttdeci">static GeneralResult&lt; SharedPreparedModel &gt; PrepareArmnnModelFromCache(const armnn::IRuntimePtr &amp;runtime, const armnn::IGpuAccTunedParametersPtr &amp;clTunedParameters, const DriverOptions &amp;options, const std::vector&lt; SharedHandle &gt; &amp;modelCacheHandle, const std::vector&lt; SharedHandle &gt; &amp;dataCacheHandle, const CacheToken &amp;token, bool float32ToFloat16=false)</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_driver_impl_8cpp_source.xhtml#l00338">ArmnnDriverImpl.cpp:338</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_armnn_device_xhtml_a33bc6665817301bb3bf1699189c23ae3"><div class="ttname"><a href="classarmnn__driver_1_1_armnn_device.xhtml#a33bc6665817301bb3bf1699189c23ae3">armnn_driver::ArmnnDevice::m_Options</a></div><div class="ttdeci">DriverOptions m_Options</div><div class="ttdef"><b>Definition:</b> <a href="_armnn_device_8hpp_source.xhtml#l00025">ArmnnDevice.hpp:25</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa46af6ba82452e5b3308e16bb907d3c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa46af6ba82452e5b3308e16bb907d3c6">&#9670;&nbsp;</a></span>wait()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">GeneralResult&lt;void&gt; wait </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_armnn_driver_8hpp_source.xhtml#l00098">98</a> of file <a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ArmnnDriver::wait()&quot;</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>shim/sl/canonical/<a class="el" href="_armnn_driver_8hpp_source.xhtml">ArmnnDriver.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn__driver.xhtml">armnn_driver</a></li><li class="navelem"><a class="el" href="classarmnn__driver_1_1_armnn_driver.xhtml">ArmnnDriver</a></li>
    <li class="footer">Generated on Wed Nov 23 2022 10:57:43 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
