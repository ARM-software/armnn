<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/InferenceModel.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_inference_model_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">InferenceModel.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_inference_model_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_arm_n_n_8hpp.xhtml">armnn/ArmNN.hpp</a>&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_threadpool_8hpp.xhtml">armnn/Threadpool.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_logging_8hpp.xhtml">armnn/Logging.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_timer_8hpp.xhtml">armnn/utility/Timer.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_backend_registry_8hpp.xhtml">armnn/BackendRegistry.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_assert_8hpp.xhtml">armnn/utility/Assert.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_numeric_cast_8hpp.xhtml">armnn/utility/NumericCast.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_t_container_8hpp.xhtml">armnnUtils/TContainer.hpp</a>&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;common/include/ProfilingGuid.hpp&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#if defined(ARMNN_SERIALIZER)</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_deserializer_8hpp.xhtml">armnnDeserializer/IDeserializer.hpp</a>&quot;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#if defined(ARMNN_TF_LITE_PARSER)</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_tf_lite_parser_8hpp.xhtml">armnnTfLiteParser/ITfLiteParser.hpp</a>&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#if defined(ARMNN_ONNX_PARSER)</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_onnx_parser_8hpp.xhtml">armnnOnnxParser/IOnnxParser.hpp</a>&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_filesystem_8hpp.xhtml">armnnUtils/Filesystem.hpp</a>&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_heap_profiling_8hpp.xhtml">HeapProfiling.hpp</a>&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_i_o_utils_8hpp.xhtml">TensorIOUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_string_utils_8hpp.xhtml">armnn/utility/StringUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;cxxopts/cxxopts.hpp&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cxxopts_utils_8hpp.xhtml">CxxoptsUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;fmt/format.h&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;mapbox/variant.hpp&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;iterator&gt;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> CheckRequestedBackendsAreValid(<span class="keyword">const</span> std::vector&lt;armnn::BackendId&gt;&amp; backendIds,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                                           <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&amp;&gt;</a> invalidBackendIds = <a class="code" href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a>())</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">if</span> (backendIds.empty())</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a> validBackendIds = <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a>().<a class="code" href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">GetBackendIds</a>();</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordtype">bool</span> allValid = <span class="keyword">true</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; backendId : backendIds)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">if</span> (std::find(validBackendIds.begin(), validBackendIds.end(), backendId) == validBackendIds.end())</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            allValid = <span class="keyword">false</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keywordflow">if</span> (invalidBackendIds)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <span class="keywordflow">if</span> (!invalidBackendIds.value().empty())</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                    invalidBackendIds.value() += <span class="stringliteral">&quot;, &quot;</span>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                invalidBackendIds.value() += backendId;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">return</span> allValid;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;} <span class="comment">// anonymous namespace</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="namespace_inference_model_internal.xhtml">   83</a></span>&#160;<span class="keyword">namespace </span><a class="code" href="namespace_inference_model_internal.xhtml">InferenceModelInternal</a></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="namespace_inference_model_internal.xhtml#a9084adbf804022c874039ad40d1939e9">   85</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespace_inference_model_internal.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> = <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="namespace_inference_model_internal.xhtml#a6e713a319588c57fc854bc478f5ee13a">   87</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespace_inference_model_internal.xhtml#a6e713a319588c57fc854bc478f5ee13a">QuantizationParams</a> = std::pair&lt;float,int32_t&gt;;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml">   89</a></span>&#160;<span class="keyword">struct </span><a class="code" href="struct_inference_model_internal_1_1_params.xhtml">Params</a></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">   91</a></span>&#160;    std::string                     <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a>;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">   92</a></span>&#160;    std::vector&lt;std::string&gt;        <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>;</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#ad69aa6b4967ce55ee4a915c52c71bf2e">   93</a></span>&#160;    std::vector&lt;armnn::TensorShape&gt; <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ad69aa6b4967ce55ee4a915c52c71bf2e">m_InputShapes</a>;</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">   94</a></span>&#160;    std::vector&lt;std::string&gt;        <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>;</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">   95</a></span>&#160;    std::vector&lt;armnn::BackendId&gt;   <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">m_ComputeDevices</a>;</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">   96</a></span>&#160;    std::string                     <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>;</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#a2d4582aa74998c397bd064ae73745b62">   97</a></span>&#160;    <span class="keywordtype">size_t</span>                          <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2d4582aa74998c397bd064ae73745b62">m_SubgraphId</a>;</div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">   98</a></span>&#160;    <span class="keywordtype">bool</span>                            <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">m_IsModelBinary</a>;</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#aaae50a6c0f73e4c210c2e4331c439482">   99</a></span>&#160;    <span class="keywordtype">bool</span>                            <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aaae50a6c0f73e4c210c2e4331c439482">m_VisualizePostOptimizationModel</a>;</div><div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#a513151623e8d448951a0b94ad1946fbe">  100</a></span>&#160;    <span class="keywordtype">bool</span>                            <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a513151623e8d448951a0b94ad1946fbe">m_EnableFp16TurboMode</a>;</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#a0b99050baebe1d169392461b3a9be08d">  101</a></span>&#160;    <span class="keywordtype">bool</span>                            <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a0b99050baebe1d169392461b3a9be08d">m_EnableBf16TurboMode</a>;</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#acde2af8cbbd224a9f94e509ca538a775">  102</a></span>&#160;    <span class="keywordtype">bool</span>                            <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#acde2af8cbbd224a9f94e509ca538a775">m_PrintIntermediateLayers</a>;</div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">  103</a></span>&#160;    <span class="keywordtype">bool</span>                            <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">m_ParseUnsupported</a>;</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#a2a245a63e87f363df491ad8c35be54c5">  104</a></span>&#160;    <span class="keywordtype">bool</span>                            <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2a245a63e87f363df491ad8c35be54c5">m_InferOutputShape</a>;</div><div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#a66f9597b152215daba3211379dad63d3">  105</a></span>&#160;    <span class="keywordtype">bool</span>                            <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a66f9597b152215daba3211379dad63d3">m_EnableFastMath</a>;</div><div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#a9a04b8c7f19a84f63125edec509b6d53">  106</a></span>&#160;    <span class="keywordtype">bool</span>                            <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a9a04b8c7f19a84f63125edec509b6d53">m_SaveCachedNetwork</a>;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#ae96fc745917a3a0c0de7a818c9a05012">  107</a></span>&#160;    <span class="keywordtype">bool</span>                            <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ae96fc745917a3a0c0de7a818c9a05012">m_OutputDetailsToStdOut</a>;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#ab17deb382179697b4702cc4f909e71f8">  108</a></span>&#160;    <span class="keywordtype">bool</span>                            <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ab17deb382179697b4702cc4f909e71f8">m_OutputDetailsOnlyToStdOut</a>;</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#a9f8881646a38f828f92d3354930c4165">  109</a></span>&#160;    std::string                     <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a9f8881646a38f828f92d3354930c4165">m_CachedNetworkFilePath</a>;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#adc650e032e7fce99f15e2bf903e7167b">  110</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                    <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#adc650e032e7fce99f15e2bf903e7167b">m_NumberOfThreads</a>;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#ac609a217f4de4c647422dbb358a5f2ef">  111</a></span>&#160;    std::string                     <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ac609a217f4de4c647422dbb358a5f2ef">m_MLGOTuningFilePath</a>;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#af5e88d9bb91dff85ad5a6f7e190aff4e">  112</a></span>&#160;    <span class="keywordtype">bool</span>                            <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#af5e88d9bb91dff85ad5a6f7e190aff4e">m_AsyncEnabled</a>;</div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#a7adc5dcfe3d76ac489f253c4d5f439c8">  113</a></span>&#160;    <span class="keywordtype">size_t</span>                          <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a7adc5dcfe3d76ac489f253c4d5f439c8">m_ThreadPoolSize</a>;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="struct_inference_model_internal_1_1_params.xhtml#a7974597e9d3c848fd265d9445f7cf8cb">  116</a></span>&#160;    <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a7974597e9d3c848fd265d9445f7cf8cb">Params</a>()</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        : m_ComputeDevices{}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2d4582aa74998c397bd064ae73745b62">m_SubgraphId</a>(0)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">m_IsModelBinary</a>(<span class="keyword">true</span>)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aaae50a6c0f73e4c210c2e4331c439482">m_VisualizePostOptimizationModel</a>(<span class="keyword">false</span>)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a513151623e8d448951a0b94ad1946fbe">m_EnableFp16TurboMode</a>(<span class="keyword">false</span>)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a0b99050baebe1d169392461b3a9be08d">m_EnableBf16TurboMode</a>(<span class="keyword">false</span>)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#acde2af8cbbd224a9f94e509ca538a775">m_PrintIntermediateLayers</a>(<span class="keyword">false</span>)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">m_ParseUnsupported</a>(<span class="keyword">false</span>)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2a245a63e87f363df491ad8c35be54c5">m_InferOutputShape</a>(<span class="keyword">false</span>)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a66f9597b152215daba3211379dad63d3">m_EnableFastMath</a>(<span class="keyword">false</span>)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a9a04b8c7f19a84f63125edec509b6d53">m_SaveCachedNetwork</a>(<span class="keyword">false</span>)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ae96fc745917a3a0c0de7a818c9a05012">m_OutputDetailsToStdOut</a>(<span class="keyword">false</span>)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ab17deb382179697b4702cc4f909e71f8">m_OutputDetailsOnlyToStdOut</a>(<span class="keyword">false</span>)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a9f8881646a38f828f92d3354930c4165">m_CachedNetworkFilePath</a>(<span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#adc650e032e7fce99f15e2bf903e7167b">m_NumberOfThreads</a>(0)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ac609a217f4de4c647422dbb358a5f2ef">m_MLGOTuningFilePath</a>(<span class="stringliteral">&quot;&quot;</span>)</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#af5e88d9bb91dff85ad5a6f7e190aff4e">m_AsyncEnabled</a>(<span class="keyword">false</span>)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a7adc5dcfe3d76ac489f253c4d5f439c8">m_ThreadPoolSize</a>(0)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    {}</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;};</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;} <span class="comment">// namespace InferenceModelInternal</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IParser&gt;</div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="struct_create_network_impl.xhtml">  141</a></span>&#160;<span class="keyword">struct </span><a class="code" href="struct_create_network_impl.xhtml">CreateNetworkImpl</a></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;{</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="struct_create_network_impl.xhtml#a2e61c7404108440828ef7a45f310e229">  144</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">Params</a> = <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">InferenceModelInternal::Params</a>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno"><a class="line" href="struct_create_network_impl.xhtml#a4cbece5e7793be85f9a1e8a0ab9e02f8">  146</a></span>&#160;    <span class="keyword">static</span> <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> <a class="code" href="struct_create_network_impl.xhtml#a4cbece5e7793be85f9a1e8a0ab9e02f8">Create</a>(<span class="keyword">const</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">Params</a>&amp; params,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                     std::vector&lt;armnn::BindingPointInfo&gt;&amp; inputBindings,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                                     std::vector&lt;armnn::BindingPointInfo&gt;&amp; outputBindings)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keyword">const</span> std::string&amp; modelPath = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a>;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="comment">// Create a network from a file on disk</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keyword">auto</span> parser(IParser::Create());</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        std::map&lt;std::string, armnn::TensorShape&gt; inputShapes;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">if</span> (!params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ad69aa6b4967ce55ee4a915c52c71bf2e">m_InputShapes</a>.empty())</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span> numInputShapes   = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ad69aa6b4967ce55ee4a915c52c71bf2e">m_InputShapes</a>.size();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span> numInputBindings = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>.size();</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">if</span> (numInputShapes &lt; numInputBindings)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(fmt::format(</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    <span class="stringliteral">&quot;Not every input has its tensor shape specified: expected={0}, got={1}&quot;</span>,</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    numInputBindings, numInputShapes));</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numInputShapes; i++)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                inputShapes[params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>[i]] = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ad69aa6b4967ce55ee4a915c52c71bf2e">m_InputShapes</a>[i];</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        std::vector&lt;std::string&gt; requestedOutputs = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network{<span class="keyword">nullptr</span>, [](<a class="code" href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a> *){}};</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <a class="code" href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a>(<span class="stringliteral">&quot;Parsing&quot;</span>);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="comment">// Handle text and binary input differently by calling the corresponding parser function</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            network = (params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">m_IsModelBinary</a> ?</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                parser-&gt;CreateNetworkFromBinaryFile(modelPath.c_str(), inputShapes, requestedOutputs) :</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                parser-&gt;CreateNetworkFromTextFile(modelPath.c_str(), inputShapes, requestedOutputs));</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; inputLayerName : params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            inputBindings.push_back(parser-&gt;GetNetworkInputBindingInfo(inputLayerName));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; outputLayerName : params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            outputBindings.push_back(parser-&gt;GetNetworkOutputBindingInfo(outputLayerName));</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">return</span> network;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;};</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="preprocessor">#if defined(ARMNN_SERIALIZER)</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="keyword">struct </span><a class="code" href="struct_create_network_impl.xhtml">CreateNetworkImpl</a>&lt;armnnDeserializer::IDeserializer&gt;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;{</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">using</span> IParser          = <a class="code" href="classarmnn_deserializer_1_1_i_deserializer.xhtml">armnnDeserializer::IDeserializer</a>;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">using</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">Params</a>           = <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">InferenceModelInternal::Params</a>;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">static</span> <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> Create(<span class="keyword">const</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">Params</a>&amp; params,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                     std::vector&lt;armnn::BindingPointInfo&gt;&amp; inputBindings,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                     std::vector&lt;armnn::BindingPointInfo&gt;&amp; outputBindings)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keyword">auto</span> parser(IParser::Create());</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(parser);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network{<span class="keyword">nullptr</span>, [](<a class="code" href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a> *){}};</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <a class="code" href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a>(<span class="stringliteral">&quot;Parsing&quot;</span>);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            std::error_code errorCode;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            fs::path pathToFile(params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a>);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">if</span> (!fs::exists(pathToFile, errorCode))</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_file_not_found_exception.xhtml">armnn::FileNotFoundException</a>(fmt::format(<span class="stringliteral">&quot;Cannot find the file ({0}) errorCode: {1} {2}&quot;</span>,</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                                   params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a>,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                                   errorCode.message(),</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                                   <a class="code" href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a>().AsString()));</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            std::ifstream file(params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a>, std::ios::binary);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            network = parser-&gt;CreateNetworkFromBinary(file);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        }</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> subgraphId = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2d4582aa74998c397bd064ae73745b62">m_SubgraphId</a>);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; inputLayerName : params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>)</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <a class="code" href="structarmnn_deserializer_1_1_binding_point_info.xhtml">armnnDeserializer::BindingPointInfo</a> inputBinding =</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                parser-&gt;GetNetworkInputBindingInfo(subgraphId, inputLayerName);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            inputBindings.push_back(std::make_pair(inputBinding.<a class="code" href="structarmnn_deserializer_1_1_binding_point_info.xhtml#a663b3104ec65e4e08b5e37fb42942087">m_BindingId</a>, inputBinding.<a class="code" href="structarmnn_deserializer_1_1_binding_point_info.xhtml#aa308d10e76e29f09e44a933a2d091a79">m_TensorInfo</a>));</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; outputLayerName : params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            <a class="code" href="structarmnn_deserializer_1_1_binding_point_info.xhtml">armnnDeserializer::BindingPointInfo</a> outputBinding =</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                parser-&gt;GetNetworkOutputBindingInfo(subgraphId, outputLayerName);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            outputBindings.push_back(std::make_pair(outputBinding.<a class="code" href="structarmnn_deserializer_1_1_binding_point_info.xhtml#a663b3104ec65e4e08b5e37fb42942087">m_BindingId</a>, outputBinding.<a class="code" href="structarmnn_deserializer_1_1_binding_point_info.xhtml#aa308d10e76e29f09e44a933a2d091a79">m_TensorInfo</a>));</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        }</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">return</span> network;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;};</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="preprocessor">#if defined(ARMNN_TF_LITE_PARSER)</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="keyword">struct </span><a class="code" href="struct_create_network_impl.xhtml">CreateNetworkImpl</a>&lt;armnnTfLiteParser::ITfLiteParser&gt;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;{</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">using</span> IParser = <a class="code" href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml">armnnTfLiteParser::ITfLiteParser</a>;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">using</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">Params</a> = <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">InferenceModelInternal::Params</a>;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">static</span> <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> Create(<span class="keyword">const</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">Params</a>&amp; params,</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                     std::vector&lt;armnn::BindingPointInfo&gt;&amp; inputBindings,</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                                     std::vector&lt;armnn::BindingPointInfo&gt;&amp; outputBindings)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="keyword">const</span> std::string&amp; modelPath = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a>;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="comment">// Create a network from a file on disk</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        IParser::TfLiteParserOptions options;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        options.m_StandInLayerForUnsupported = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">m_ParseUnsupported</a>;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        options.m_InferAndValidate           = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2a245a63e87f363df491ad8c35be54c5">m_InferOutputShape</a>;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keyword">auto</span> parser(IParser::Create(options));</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network{<span class="keyword">nullptr</span>, [](<a class="code" href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a> *){}};</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            <a class="code" href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a>(<span class="stringliteral">&quot;Parsing&quot;</span>);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            network = parser-&gt;CreateNetworkFromBinaryFile(modelPath.c_str());</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; inputLayerName : params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>)</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        {</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> inputBinding =</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                parser-&gt;GetNetworkInputBindingInfo(params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2d4582aa74998c397bd064ae73745b62">m_SubgraphId</a>, inputLayerName);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            inputBindings.push_back(inputBinding);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        }</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; outputLayerName : params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a> outputBinding =</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                parser-&gt;GetNetworkOutputBindingInfo(params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2d4582aa74998c397bd064ae73745b62">m_SubgraphId</a>, outputLayerName);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            outputBindings.push_back(outputBinding);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        }</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordflow">return</span> network;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;};</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="preprocessor">#if defined(ARMNN_ONNX_PARSER)</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="keyword">struct </span><a class="code" href="struct_create_network_impl.xhtml">CreateNetworkImpl</a>&lt;armnnOnnxParser::IOnnxParser&gt;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;{</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keyword">using</span> IParser = <a class="code" href="classarmnn_onnx_parser_1_1_i_onnx_parser.xhtml">armnnOnnxParser::IOnnxParser</a>;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keyword">using</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">Params</a> = <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">InferenceModelInternal::Params</a>;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keyword">using</span> <a class="code" href="namespace_inference_model_internal.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> = <a class="code" href="namespace_inference_model_internal.xhtml#a9084adbf804022c874039ad40d1939e9">InferenceModelInternal::BindingPointInfo</a>;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keyword">static</span> <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> Create(<span class="keyword">const</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">Params</a>&amp; params,</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                     std::vector&lt;BindingPointInfo&gt;&amp; inputBindings,</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                     std::vector&lt;BindingPointInfo&gt;&amp; outputBindings)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    {</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="keyword">const</span> std::string&amp; modelPath = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a>;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="comment">// Create a network from a file on disk</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keyword">auto</span> parser(IParser::Create());</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network{<span class="keyword">nullptr</span>, [](<a class="code" href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a> *){}};</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        std::map&lt;std::string, armnn::TensorShape&gt; inputShapes;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">if</span> (!params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ad69aa6b4967ce55ee4a915c52c71bf2e">m_InputShapes</a>.empty())</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        {</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span> numInputShapes   = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ad69aa6b4967ce55ee4a915c52c71bf2e">m_InputShapes</a>.size();</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span> numInputBindings = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>.size();</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            <span class="keywordflow">if</span> (numInputShapes &lt; numInputBindings)</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(fmt::format(</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                    <span class="stringliteral">&quot;Not every input has its tensor shape specified: expected={0}, got={1}&quot;</span>,</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                    numInputBindings, numInputShapes));</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            }</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numInputShapes; i++)</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            {</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                inputShapes[params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>[i]] = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ad69aa6b4967ce55ee4a915c52c71bf2e">m_InputShapes</a>[i];</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            }</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            {</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                <a class="code" href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a>(<span class="stringliteral">&quot;Parsing&quot;</span>);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                network = (params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">m_IsModelBinary</a> ?</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                    parser-&gt;CreateNetworkFromBinaryFile(modelPath.c_str(), inputShapes) :</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                    parser-&gt;CreateNetworkFromTextFile(modelPath.c_str(), inputShapes));</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            }</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        }</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        {</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <a class="code" href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a>(<span class="stringliteral">&quot;Parsing&quot;</span>);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            network = (params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">m_IsModelBinary</a> ?</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                parser-&gt;CreateNetworkFromBinaryFile(modelPath.c_str()) :</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                parser-&gt;CreateNetworkFromTextFile(modelPath.c_str()));</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        }</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; inputLayerName : params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>)</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        {</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <a class="code" href="namespace_inference_model_internal.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> inputBinding = parser-&gt;GetNetworkInputBindingInfo(inputLayerName);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            inputBindings.push_back(inputBinding);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        }</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> std::string&amp; outputLayerName : params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>)</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        {</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <a class="code" href="namespace_inference_model_internal.xhtml#a9084adbf804022c874039ad40d1939e9">BindingPointInfo</a> outputBinding = parser-&gt;GetNetworkOutputBindingInfo(outputLayerName);</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            outputBindings.push_back(outputBinding);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">return</span> network;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    }</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;};</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> IParser, <span class="keyword">typename</span> TDataType&gt;</div><div class="line"><a name="l00372"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml">  372</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_inference_model.xhtml">InferenceModel</a></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;{</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00375"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#af6964b8f91085191c5228d1a67db4523">  375</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="class_inference_model.xhtml#af6964b8f91085191c5228d1a67db4523">DataType</a>           = TDataType;</div><div class="line"><a name="l00376"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#a2e61c7404108440828ef7a45f310e229">  376</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">Params</a>             = <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">InferenceModelInternal::Params</a>;</div><div class="line"><a name="l00377"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#ae3ca0528045df8958ce5dcdf9d1af041">  377</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="class_inference_model.xhtml#ae3ca0528045df8958ce5dcdf9d1af041">QuantizationParams</a> = <a class="code" href="namespace_inference_model_internal.xhtml#a6e713a319588c57fc854bc478f5ee13a">InferenceModelInternal::QuantizationParams</a>;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno"><a class="line" href="struct_inference_model_1_1_command_line_options.xhtml">  380</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="struct_inference_model_1_1_command_line_options.xhtml">CommandLineOptions</a></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    {</div><div class="line"><a name="l00382"></a><span class="lineno"><a class="line" href="struct_inference_model_1_1_command_line_options.xhtml#a2c0d69e50a4269073a6ce52c55a1a9bb">  382</a></span>&#160;        std::string <a class="code" href="struct_inference_model_1_1_command_line_options.xhtml#a2c0d69e50a4269073a6ce52c55a1a9bb">m_ModelDir</a>;</div><div class="line"><a name="l00383"></a><span class="lineno"><a class="line" href="struct_inference_model_1_1_command_line_options.xhtml#a2b6e92b247e830ff78d04266ff130a92">  383</a></span>&#160;        std::vector&lt;std::string&gt; <a class="code" href="struct_inference_model_1_1_command_line_options.xhtml#a2b6e92b247e830ff78d04266ff130a92">m_ComputeDevices</a>;</div><div class="line"><a name="l00384"></a><span class="lineno"><a class="line" href="struct_inference_model_1_1_command_line_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">  384</a></span>&#160;        std::string <a class="code" href="struct_inference_model_1_1_command_line_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>;</div><div class="line"><a name="l00385"></a><span class="lineno"><a class="line" href="struct_inference_model_1_1_command_line_options.xhtml#aaae50a6c0f73e4c210c2e4331c439482">  385</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="struct_inference_model_1_1_command_line_options.xhtml#aaae50a6c0f73e4c210c2e4331c439482">m_VisualizePostOptimizationModel</a>;</div><div class="line"><a name="l00386"></a><span class="lineno"><a class="line" href="struct_inference_model_1_1_command_line_options.xhtml#a513151623e8d448951a0b94ad1946fbe">  386</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="struct_inference_model_1_1_command_line_options.xhtml#a513151623e8d448951a0b94ad1946fbe">m_EnableFp16TurboMode</a>;</div><div class="line"><a name="l00387"></a><span class="lineno"><a class="line" href="struct_inference_model_1_1_command_line_options.xhtml#a0b99050baebe1d169392461b3a9be08d">  387</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="struct_inference_model_1_1_command_line_options.xhtml#a0b99050baebe1d169392461b3a9be08d">m_EnableBf16TurboMode</a>;</div><div class="line"><a name="l00388"></a><span class="lineno"><a class="line" href="struct_inference_model_1_1_command_line_options.xhtml#a237e6ca9811ae2195fbe8f30aa696e5b">  388</a></span>&#160;        std::string <a class="code" href="struct_inference_model_1_1_command_line_options.xhtml#a237e6ca9811ae2195fbe8f30aa696e5b">m_Labels</a>;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno"><a class="line" href="struct_inference_model_1_1_command_line_options.xhtml#a56f7be77245196289f2bf0cce1dca31c">  390</a></span>&#160;        std::vector&lt;armnn::BackendId&gt; <a class="code" href="struct_inference_model_1_1_command_line_options.xhtml#a56f7be77245196289f2bf0cce1dca31c">GetComputeDevicesAsBackendIds</a>()</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        {</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            std::vector&lt;armnn::BackendId&gt; backendIds;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            std::copy(m_ComputeDevices.begin(), m_ComputeDevices.end(), std::back_inserter(backendIds));</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            <span class="keywordflow">return</span> backendIds;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        }</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    };</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#a22794efa5d496a49a33739dd99087841">  398</a></span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="class_inference_model.xhtml#a22794efa5d496a49a33739dd99087841">AddCommandLineOptions</a>(cxxopts::Options&amp; options,</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                      <a class="code" href="struct_inference_model_1_1_command_line_options.xhtml">CommandLineOptions</a>&amp; cLineOptions, std::vector&lt;std::string&gt;&amp; required)</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    {</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="keyword">const</span> std::vector&lt;std::string&gt; defaultComputes = { <span class="stringliteral">&quot;CpuAcc&quot;</span>, <span class="stringliteral">&quot;CpuRef&quot;</span> };</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keyword">const</span> std::string backendsMessage = <span class="stringliteral">&quot;Which device to run layers on by default. Possible choices: &quot;</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                          + <a class="code" href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a>().<a class="code" href="classarmnn_1_1_backend_registry.xhtml#ae1de2f7ca1db17f45f97155e239b8b45">GetBackendIdsAsString</a>();</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        options</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            .allow_unrecognised_options()</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            .add_options()</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                (<span class="stringliteral">&quot;m,model-dir&quot;</span>, <span class="stringliteral">&quot;Path to directory containing model files (.prototxt/.tflite)&quot;</span>,</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                 cxxopts::value&lt;std::string&gt;(cLineOptions.<a class="code" href="struct_inference_model_1_1_command_line_options.xhtml#a2c0d69e50a4269073a6ce52c55a1a9bb">m_ModelDir</a>))</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                (<span class="stringliteral">&quot;c,compute&quot;</span>, backendsMessage.c_str(),</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                 cxxopts::value&lt;std::vector&lt;std::string&gt;&gt;(cLineOptions.<a class="code" href="struct_inference_model_1_1_command_line_options.xhtml#a2b6e92b247e830ff78d04266ff130a92">m_ComputeDevices</a>)-&gt;default_value(<span class="stringliteral">&quot;CpuRef&quot;</span>))</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                (<span class="stringliteral">&quot;b,dynamic-backends-path&quot;</span>,</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                 <span class="stringliteral">&quot;Path where to load any available dynamic backend from. &quot;</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                 <span class="stringliteral">&quot;If left empty (the default), dynamic backends will not be used.&quot;</span>,</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                 cxxopts::value(cLineOptions.<a class="code" href="struct_inference_model_1_1_command_line_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>))</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                (<span class="stringliteral">&quot;l,labels&quot;</span>,</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                 <span class="stringliteral">&quot;Text file containing one image filename - correct label pair per line, &quot;</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                 <span class="stringliteral">&quot;used to test the accuracy of the network.&quot;</span>, cxxopts::value&lt;std::string&gt;(cLineOptions.<a class="code" href="struct_inference_model_1_1_command_line_options.xhtml#a237e6ca9811ae2195fbe8f30aa696e5b">m_Labels</a>))</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                (<span class="stringliteral">&quot;v,visualize-optimized-model&quot;</span>,</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                 <span class="stringliteral">&quot;Produce a dot file useful for visualizing the graph post optimization.&quot;</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                 <span class="stringliteral">&quot;The file will have the same name as the model with the .dot extention.&quot;</span>,</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                 cxxopts::value&lt;bool&gt;(cLineOptions.<a class="code" href="struct_inference_model_1_1_command_line_options.xhtml#aaae50a6c0f73e4c210c2e4331c439482">m_VisualizePostOptimizationModel</a>)-&gt;default_value(<span class="stringliteral">&quot;false&quot;</span>))</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                (<span class="stringliteral">&quot;fp16-turbo-mode&quot;</span>,</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                 <span class="stringliteral">&quot;If this option is enabled FP32 layers, weights and biases will be converted &quot;</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                 <span class="stringliteral">&quot;to FP16 where the backend supports it.&quot;</span>,</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                 cxxopts::value&lt;bool&gt;(cLineOptions.<a class="code" href="struct_inference_model_1_1_command_line_options.xhtml#a513151623e8d448951a0b94ad1946fbe">m_EnableFp16TurboMode</a>)-&gt;default_value(<span class="stringliteral">&quot;false&quot;</span>))</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                (<span class="stringliteral">&quot;bf16-turbo-mode&quot;</span>,</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                 <span class="stringliteral">&quot;If this option is enabled FP32 layers, weights and biases will be converted &quot;</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                 <span class="stringliteral">&quot;to BF16 where the backend supports it.&quot;</span>,</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                 cxxopts::value&lt;bool&gt;(cLineOptions.<a class="code" href="struct_inference_model_1_1_command_line_options.xhtml#a0b99050baebe1d169392461b3a9be08d">m_EnableBf16TurboMode</a>)-&gt;default_value(<span class="stringliteral">&quot;false&quot;</span>));</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        required.emplace_back(<span class="stringliteral">&quot;model-dir&quot;</span>);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    }</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#a5a211a676b879363f0c5001698a14c50">  436</a></span>&#160;    <a class="code" href="class_inference_model.xhtml#a5a211a676b879363f0c5001698a14c50">InferenceModel</a>(<span class="keyword">const</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml">Params</a>&amp; params,</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                   <span class="keywordtype">bool</span> enableProfiling,</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                   <span class="keyword">const</span> std::string&amp; dynamicBackendsPath,</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                   <span class="keyword">const</span> std::shared_ptr&lt;armnn::IRuntime&gt;&amp; runtime = <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        : m_EnableProfiling(enableProfiling),</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;          m_ProfilingDetailsMethod(<a class="code" href="namespacearmnn.xhtml">armnn</a>::<a class="code" href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1f">ProfilingDetailsMethod</a>::Undefined)</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        , <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>(dynamicBackendsPath)</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    {</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <span class="keywordflow">if</span> (runtime)</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        {</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            m_Runtime = runtime;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        }</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        {</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            <a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a> options;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a2fe8c3eadf4f4f9c0c664a24a2a298f9">m_EnableGpuProfiling</a> = m_EnableProfiling;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            options.<a class="code" href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a> = <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>;</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            m_Runtime = <a class="code" href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a>(options);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        }</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="comment">// Configure the Profiler if the the profiling details are opted for</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="keywordflow">if</span> (params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ab17deb382179697b4702cc4f909e71f8">m_OutputDetailsOnlyToStdOut</a>)</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            m_ProfilingDetailsMethod = <a class="code" href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa566666dfc3a9a82da0d7b0816b19f278">armnn::ProfilingDetailsMethod::DetailsOnly</a>;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ae96fc745917a3a0c0de7a818c9a05012">m_OutputDetailsToStdOut</a>)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            m_ProfilingDetailsMethod = <a class="code" href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa497ab261a562e316736c2cb59b839d32">armnn::ProfilingDetailsMethod::DetailsWithEvents</a>;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        std::string invalidBackends;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <span class="keywordflow">if</span> (!CheckRequestedBackendsAreValid(params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">m_ComputeDevices</a>, <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string&amp;&gt;</a>(invalidBackends)))</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        {</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;Some backend IDs are invalid: &quot;</span> + invalidBackends);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        }</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a> optNet{<span class="keyword">nullptr</span>, [](<a class="code" href="classarmnn_1_1_i_optimized_network.xhtml">armnn::IOptimizedNetwork</a>*){}};</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        {</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> parsing_start_time = <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>();</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            <a class="code" href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a> network = <a class="code" href="struct_create_network_impl.xhtml#a4cbece5e7793be85f9a1e8a0ab9e02f8">CreateNetworkImpl&lt;IParser&gt;::Create</a>(params, <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>, <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Network parsing time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                            &lt;&lt; std::fixed &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a>(parsing_start_time).count() &lt;&lt; <span class="stringliteral">&quot; ms.&quot;</span>;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <a class="code" href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a>(<span class="stringliteral">&quot;Optimizing&quot;</span>);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            <a class="code" href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a> options;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a6e1a42622ca43dafc7ba8e684c016eb4">m_ReduceFp32ToFp16</a> = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a513151623e8d448951a0b94ad1946fbe">m_EnableFp16TurboMode</a>;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a11f463726addcc1d2845266997d79e9c">m_ReduceFp32ToBf16</a> = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a0b99050baebe1d169392461b3a9be08d">m_EnableBf16TurboMode</a>;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a69eb14082d40fa0a3cff50457344a5e0">m_Debug</a> = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#acde2af8cbbd224a9f94e509ca538a775">m_PrintIntermediateLayers</a>;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a9416d94a8aad7cdfa47eb35e825cbda5">m_shapeInferenceMethod</a> = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2a245a63e87f363df491ad8c35be54c5">m_InferOutputShape</a> ?</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                    <a class="code" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb">armnn::ShapeInferenceMethod::InferAndValidate</a> : <a class="code" href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">armnn::ShapeInferenceMethod::ValidateOnly</a>;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a1b1892da2aaf7eaedaa38671d56b7f19">m_ProfilingEnabled</a> = m_EnableProfiling;</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> gpuAcc(<span class="stringliteral">&quot;GpuAcc&quot;</span>,</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            {</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                { <span class="stringliteral">&quot;FastMathEnabled&quot;</span>, params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a66f9597b152215daba3211379dad63d3">m_EnableFastMath</a> },</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                { <span class="stringliteral">&quot;SaveCachedNetwork&quot;</span>, params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a9a04b8c7f19a84f63125edec509b6d53">m_SaveCachedNetwork</a> },</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                { <span class="stringliteral">&quot;CachedNetworkFilePath&quot;</span>, params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a9f8881646a38f828f92d3354930c4165">m_CachedNetworkFilePath</a> },</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                { <span class="stringliteral">&quot;MLGOTuningFilePath&quot;</span>, params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ac609a217f4de4c647422dbb358a5f2ef">m_MLGOTuningFilePath</a> }</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            });</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> cpuAcc(<span class="stringliteral">&quot;CpuAcc&quot;</span>,</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            {</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                { <span class="stringliteral">&quot;FastMathEnabled&quot;</span>, params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a66f9597b152215daba3211379dad63d3">m_EnableFastMath</a> },</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                { <span class="stringliteral">&quot;NumberOfThreads&quot;</span>, params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#adc650e032e7fce99f15e2bf903e7167b">m_NumberOfThreads</a> }</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            });</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">m_ModelOptions</a>.push_back(gpuAcc);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            options.<a class="code" href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">m_ModelOptions</a>.push_back(cpuAcc);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> optimization_start_time = <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>();</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            optNet = <a class="code" href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a>(*network, params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">m_ComputeDevices</a>, m_Runtime-&gt;GetDeviceSpec(), options);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Optimization time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                            &lt;&lt; std::fixed &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a>(optimization_start_time).count() &lt;&lt; <span class="stringliteral">&quot; ms.&quot;</span>;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            <span class="keywordflow">if</span> (!optNet)</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            {</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;Optimize returned nullptr&quot;</span>);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            }</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        }</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        <span class="keywordflow">if</span> (params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aaae50a6c0f73e4c210c2e4331c439482">m_VisualizePostOptimizationModel</a>)</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        {</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;            fs::path filename = params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">m_ModelPath</a>;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            filename.replace_extension(<span class="stringliteral">&quot;dot&quot;</span>);</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;            std::fstream file(filename.c_str(), std::ios_base::out);</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            optNet-&gt;SerializeToDot(file);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        }</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a> ret;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        {</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            <a class="code" href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a>(<span class="stringliteral">&quot;LoadNetwork&quot;</span>);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> loading_start_time = <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>();</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            <a class="code" href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a> networkProperties(params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#af5e88d9bb91dff85ad5a6f7e190aff4e">m_AsyncEnabled</a>,</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                                                        <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::MemorySource::Undefined</a>,</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                                                        <a class="code" href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::MemorySource::Undefined</a>,</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                                                        enableProfiling,</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                                        m_ProfilingDetailsMethod);</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            std::string errorMessage;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            ret = m_Runtime-&gt;LoadNetwork(m_NetworkIdentifier, std::move(optNet), errorMessage, networkProperties);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(info) &lt;&lt; <span class="stringliteral">&quot;Network loading time: &quot;</span> &lt;&lt; std::setprecision(2)</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                            &lt;&lt; std::fixed &lt;&lt; <a class="code" href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a>(loading_start_time).count() &lt;&lt; <span class="stringliteral">&quot; ms.&quot;</span>;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;            <span class="keywordflow">if</span> (params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#af5e88d9bb91dff85ad5a6f7e190aff4e">m_AsyncEnabled</a> &amp;&amp; params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a7adc5dcfe3d76ac489f253c4d5f439c8">m_ThreadPoolSize</a> &gt; 0)</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;            {</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                std::vector&lt;std::shared_ptr&lt;armnn::IWorkingMemHandle&gt;&gt; memHandles;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a7adc5dcfe3d76ac489f253c4d5f439c8">m_ThreadPoolSize</a>; ++i)</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                {</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                    memHandles.emplace_back(m_Runtime-&gt;CreateWorkingMemHandle(m_NetworkIdentifier));</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                }</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                m_Threadpool = std::make_unique&lt;armnn::Threadpool&gt;(params.<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#a7adc5dcfe3d76ac489f253c4d5f439c8">m_ThreadPoolSize</a>,</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                                                                   m_Runtime.get(),</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                                                                   memHandles);</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            }</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        }</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        <span class="keywordflow">if</span> (ret == <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a>)</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        {</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;IRuntime::LoadNetwork failed&quot;</span>);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        }</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    }</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div><div class="line"><a name="l00560"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#a262185c43532d5728c4bd7890f3b2235">  560</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_inference_model.xhtml#a262185c43532d5728c4bd7890f3b2235">CheckInputIndexIsValid</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputIndex)<span class="keyword"> const</span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>.size() &lt; inputIndex + 1)</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        {</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(fmt::format(<span class="stringliteral">&quot;Input index out of range: {}&quot;</span>, inputIndex));</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        }</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    }</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div><div class="line"><a name="l00568"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#a72a6db08ffca660ece7c2d86e2a14daa">  568</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_inference_model.xhtml#a72a6db08ffca660ece7c2d86e2a14daa">CheckOutputIndexIsValid</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIndex)<span class="keyword"> const</span></div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>.size() &lt; outputIndex + 1)</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        {</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(fmt::format(<span class="stringliteral">&quot;Output index out of range: {}&quot;</span>, outputIndex));</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        }</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    }</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div><div class="line"><a name="l00576"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#a679e4b22a845c8d7f58f6ca6a5df625f">  576</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="class_inference_model.xhtml#a679e4b22a845c8d7f58f6ca6a5df625f">GetInputSize</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputIndex = 0u)<span class="keyword"> const</span></div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        CheckInputIndexIsValid(inputIndex);</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>[inputIndex].second.GetNumElements();</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    }</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div><div class="line"><a name="l00582"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#a8282dddf88e0deb3c414235e20a6cb2c">  582</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="class_inference_model.xhtml#a8282dddf88e0deb3c414235e20a6cb2c">GetOutputSize</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIndex = 0u)<span class="keyword"> const</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        CheckOutputIndexIsValid(outputIndex);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>[outputIndex].second.GetNumElements();</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    }</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div><div class="line"><a name="l00588"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#a25651303cbe4a971cdada990eb71bf21">  588</a></span>&#160;    std::chrono::duration&lt;double, std::milli&gt; <a class="code" href="class_inference_model.xhtml#a25651303cbe4a971cdada990eb71bf21">Run</a>(</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <span class="keyword">const</span> std::vector&lt;armnnUtils::TContainer&gt;&amp; inputContainers,</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            std::vector&lt;armnnUtils::TContainer&gt;&amp; outputContainers)</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    {</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputContainers.size(); ++i)</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        {</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> expectedOutputDataSize = GetOutputSize(i);</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            mapbox::util::apply_visitor([expectedOutputDataSize, i](<span class="keyword">auto</span>&amp;&amp; value)</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            {</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> actualOutputDataSize   = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(value.size());</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                <span class="keywordflow">if</span> (actualOutputDataSize &lt; expectedOutputDataSize)</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                {</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIndex = i;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                            fmt::format(<span class="stringliteral">&quot;Not enough data for output #{0}: expected &quot;</span></div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                            <span class="stringliteral">&quot;{1} elements, got {2}&quot;</span>, outputIndex, expectedOutputDataSize, actualOutputDataSize));</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                }</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            },</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            outputContainers[i]);</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        }</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        std::shared_ptr&lt;armnn::IProfiler&gt; profiler = m_Runtime-&gt;GetProfiler(m_NetworkIdentifier);</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        <span class="comment">// Start timer to record inference time in EnqueueWorkload (in milliseconds)</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> start_time = <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>();</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a> ret = m_Runtime-&gt;EnqueueWorkload(m_NetworkIdentifier,</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                                                       <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa5b4bf99dead35f1ed10ec2da962b5f8">MakeInputTensors</a>(inputContainers),</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                                                       <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a47e2cf3b998bc6a55711799ac97d6eee">MakeOutputTensors</a>(outputContainers));</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> duration = <a class="code" href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a>(start_time);</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        <span class="comment">// if profiling is enabled print out the results</span></div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <span class="keywordflow">if</span> (profiler &amp;&amp; profiler-&gt;IsProfilingEnabled())</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        {</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;            profiler-&gt;Print(std::cout);</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        }</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        <span class="keywordflow">if</span> (ret == <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a>)</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        {</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(<span class="stringliteral">&quot;IRuntime::EnqueueWorkload failed&quot;</span>);</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        }</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        {</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            <span class="keywordflow">return</span> duration;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        }</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    }</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div><div class="line"><a name="l00636"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#ab510347c552e6ff7fd6b702b688525b1">  636</a></span>&#160;    std::tuple&lt;unsigned int, std::chrono::duration&lt;double, std::milli&gt;&gt; <a class="code" href="class_inference_model.xhtml#ab510347c552e6ff7fd6b702b688525b1">RunAsync</a>(</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        <a class="code" href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">armnn::experimental::IWorkingMemHandle</a>&amp; workingMemHandleRef,</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        <span class="keyword">const</span> std::vector&lt;armnnUtils::TContainer&gt;&amp; inputContainers,</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        std::vector&lt;armnnUtils::TContainer&gt;&amp; outputContainers,</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inferenceID)</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    {</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputContainers.size(); ++i)</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        {</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> expectedOutputDataSize = GetOutputSize(i);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;            mapbox::util::apply_visitor([expectedOutputDataSize, i](<span class="keyword">auto</span>&amp;&amp; value)</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            {</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> actualOutputDataSize   = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(value.size());</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                <span class="keywordflow">if</span> (actualOutputDataSize &lt; expectedOutputDataSize)</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                {</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIndex = i;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                            fmt::format(<span class="stringliteral">&quot;Not enough data for output #{0}: expected &quot;</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                            <span class="stringliteral">&quot;{1} elements, got {2}&quot;</span>, outputIndex, expectedOutputDataSize, actualOutputDataSize));</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                }</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;            },</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;            outputContainers[i]);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        }</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        std::shared_ptr&lt;armnn::IProfiler&gt; profiler = m_Runtime-&gt;GetProfiler(m_NetworkIdentifier);</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        <span class="comment">// Start timer to record inference time in EnqueueWorkload (in milliseconds)</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> start_time = <a class="code" href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a>();</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a> ret = m_Runtime-&gt;Execute(workingMemHandleRef,</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                                               <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa5b4bf99dead35f1ed10ec2da962b5f8">MakeInputTensors</a>(inputContainers),</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                                               <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a47e2cf3b998bc6a55711799ac97d6eee">MakeOutputTensors</a>(outputContainers));</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> duration = <a class="code" href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a>(start_time);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        <span class="comment">// if profiling is enabled print out the results</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        <span class="keywordflow">if</span> (profiler &amp;&amp; profiler-&gt;IsProfilingEnabled())</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        {</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;            profiler-&gt;Print(std::cout);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        }</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        <span class="keywordflow">if</span> (ret == <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a>)</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        {</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                fmt::format(<span class="stringliteral">&quot;IRuntime::Execute asynchronously failed for network #{0} on inference #{1}&quot;</span>,</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                            m_NetworkIdentifier, inferenceID));</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        }</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        {</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;            <span class="keywordflow">return</span> std::make_tuple(inferenceID, duration);</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        }</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    }</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;</div><div class="line"><a name="l00689"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#a43b9b072a5aad953e50500b71bcbbef7">  689</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_inference_model.xhtml#a43b9b072a5aad953e50500b71bcbbef7">RunAsync</a>(<span class="keyword">const</span> std::vector&lt;armnnUtils::TContainer&gt;&amp; inputContainers,</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                  std::vector&lt;armnnUtils::TContainer&gt;&amp; outputContainers,</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                  std::shared_ptr&lt;armnn::IAsyncExecutionCallback&gt; cb)</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    {</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; outputContainers.size(); ++i)</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        {</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> expectedOutputDataSize = GetOutputSize(i);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;            mapbox::util::apply_visitor([expectedOutputDataSize, i](<span class="keyword">auto</span>&amp;&amp; value)</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;            {</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> actualOutputDataSize   = <a class="code" href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt;(value.size());</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                <span class="keywordflow">if</span> (actualOutputDataSize &lt; expectedOutputDataSize)</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                {</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIndex = i;</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_exception.xhtml">armnn::Exception</a>(</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                            fmt::format(<span class="stringliteral">&quot;Not enough data for output #{0}: expected &quot;</span></div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                            <span class="stringliteral">&quot;{1} elements, got {2}&quot;</span>, outputIndex, expectedOutputDataSize, actualOutputDataSize));</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                }</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;            },</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            outputContainers[i]);</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        }</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        std::shared_ptr&lt;armnn::IProfiler&gt; profiler = m_Runtime-&gt;GetProfiler(m_NetworkIdentifier);</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        m_Threadpool-&gt;Schedule(m_NetworkIdentifier,</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                               <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa5b4bf99dead35f1ed10ec2da962b5f8">MakeInputTensors</a>(inputContainers),</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                               <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a47e2cf3b998bc6a55711799ac97d6eee">MakeOutputTensors</a>(outputContainers),</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                               <a class="code" href="namespacearmnn.xhtml#a8e72227ebe5ac505cf44790f2e6eb488a87f8a6ab85c9ced3702b4ea641ad4bb5">armnn::QosExecPriority::Medium</a>,</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                               cb);</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        <span class="comment">// if profiling is enabled print out the results</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;        <span class="keywordflow">if</span> (profiler &amp;&amp; profiler-&gt;IsProfilingEnabled())</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        {</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;            profiler-&gt;Print(std::cout);</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        }</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    }</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div><div class="line"><a name="l00726"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#a9a28e0c17604e5a945409f994c020212">  726</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a>&amp; <a class="code" href="class_inference_model.xhtml#a9a28e0c17604e5a945409f994c020212">GetInputBindingInfo</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputIndex = 0u)<span class="keyword"> const</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        CheckInputIndexIsValid(inputIndex);</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>[inputIndex];</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    }</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;</div><div class="line"><a name="l00732"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#a0e0f3330fc1e6c1fa1d99d731490c483">  732</a></span>&#160;    <span class="keyword">const</span> std::vector&lt;armnn::BindingPointInfo&gt;&amp; <a class="code" href="class_inference_model.xhtml#a0e0f3330fc1e6c1fa1d99d731490c483">GetInputBindingInfos</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    }</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;</div><div class="line"><a name="l00737"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#a325f1c17b5ff2153cae944e3c62820a2">  737</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a>&amp; <a class="code" href="class_inference_model.xhtml#a325f1c17b5ff2153cae944e3c62820a2">GetOutputBindingInfo</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIndex = 0u)<span class="keyword"> const</span></div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        CheckOutputIndexIsValid(outputIndex);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>[outputIndex];</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    }</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div><div class="line"><a name="l00743"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#ac0b73049e00e7013f5cc6ae7fcaedcd4">  743</a></span>&#160;    <span class="keyword">const</span> std::vector&lt;armnn::BindingPointInfo&gt;&amp; <a class="code" href="class_inference_model.xhtml#ac0b73049e00e7013f5cc6ae7fcaedcd4">GetOutputBindingInfos</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    }</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div><div class="line"><a name="l00748"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#a1a09727b3f781272e702516fffb7d97f">  748</a></span>&#160;    <a class="code" href="class_inference_model.xhtml#ae3ca0528045df8958ce5dcdf9d1af041">QuantizationParams</a> <a class="code" href="class_inference_model.xhtml#a1a09727b3f781272e702516fffb7d97f">GetQuantizationParams</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outputIndex = 0u)<span class="keyword"> const</span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        CheckOutputIndexIsValid(outputIndex);</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;        <span class="keywordflow">return</span> std::make_pair(<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>[outputIndex].second.GetQuantizationScale(),</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                              <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>[outputIndex].second.GetQuantizationOffset());</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    }</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;</div><div class="line"><a name="l00755"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#a066580d185559e2efdcb6cedd1709b9c">  755</a></span>&#160;    <a class="code" href="class_inference_model.xhtml#ae3ca0528045df8958ce5dcdf9d1af041">QuantizationParams</a> <a class="code" href="class_inference_model.xhtml#a066580d185559e2efdcb6cedd1709b9c">GetInputQuantizationParams</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inputIndex = 0u)<span class="keyword"> const</span></div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;        CheckInputIndexIsValid(inputIndex);</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;        <span class="keywordflow">return</span> std::make_pair(<a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>[inputIndex].second.GetQuantizationScale(),</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                              <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>[inputIndex].second.GetQuantizationOffset());</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    }</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div><div class="line"><a name="l00762"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#ade1a8545be49b1c10e724ea8536907c7">  762</a></span>&#160;    std::vector&lt;QuantizationParams&gt; <a class="code" href="class_inference_model.xhtml#ade1a8545be49b1c10e724ea8536907c7">GetAllQuantizationParams</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        std::vector&lt;QuantizationParams&gt; quantizationParams;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0u; i &lt; <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>.size(); i++)</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        {</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            quantizationParams.push_back(GetQuantizationParams(i));</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        }</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        <span class="keywordflow">return</span> quantizationParams;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    }</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div><div class="line"><a name="l00772"></a><span class="lineno"><a class="line" href="class_inference_model.xhtml#a6d789a57513b4b26e31eaed316e45b7f">  772</a></span>&#160;    std::unique_ptr&lt;armnn::experimental::IWorkingMemHandle&gt; <a class="code" href="class_inference_model.xhtml#a6d789a57513b4b26e31eaed316e45b7f">CreateWorkingMemHandle</a>()</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    {</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        <span class="keywordflow">return</span> m_Runtime-&gt;CreateWorkingMemHandle(m_NetworkIdentifier);</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    }</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a> m_NetworkIdentifier;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    std::shared_ptr&lt;armnn::IRuntime&gt; m_Runtime;</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    std::unique_ptr&lt;armnn::Threadpool&gt; m_Threadpool;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    std::vector&lt;armnn::BindingPointInfo&gt; <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">m_InputBindings</a>;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    std::vector&lt;armnn::BindingPointInfo&gt; <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">m_OutputBindings</a>;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    <span class="keywordtype">bool</span> m_EnableProfiling;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    <a class="code" href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1f">armnn::ProfilingDetailsMethod</a> m_ProfilingDetailsMethod;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    std::string <a class="code" href="struct_inference_model_internal_1_1_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">m_DynamicBackendsPath</a>;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> TContainer&gt;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    <a class="code" href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a> <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa5b4bf99dead35f1ed10ec2da962b5f8">MakeInputTensors</a>(<span class="keyword">const</span> std::vector&lt;TContainer&gt;&amp; inputDataContainers)</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    {</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_utils.xhtml#ad5310a199d4969927169ed084b1f6c28">armnnUtils::MakeInputTensors</a>(m_InputBindings, inputDataContainers);</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    }</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> TContainer&gt;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a> <a class="code" href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a47e2cf3b998bc6a55711799ac97d6eee">MakeOutputTensors</a>(std::vector&lt;TContainer&gt;&amp; outputDataContainers)</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    {</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_utils.xhtml#ad4efd5a7fa660df5246466d83517220d">armnnUtils::MakeOutputTensors</a>(m_OutputBindings, outputDataContainers);</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    }</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;};</div><div class="ttc" id="class_inference_model_xhtml_a25651303cbe4a971cdada990eb71bf21"><div class="ttname"><a href="class_inference_model.xhtml#a25651303cbe4a971cdada990eb71bf21">InferenceModel::Run</a></div><div class="ttdeci">std::chrono::duration&lt; double, std::milli &gt; Run(const std::vector&lt; armnnUtils::TContainer &gt; &amp;inputContainers, std::vector&lt; armnnUtils::TContainer &gt; &amp;outputContainers)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00588">InferenceModel.hpp:588</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a71194277c60153a5f86539f5d39f01db"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a71194277c60153a5f86539f5d39f01db">armnn::OptimizerOptions::m_ModelOptions</a></div><div class="ttdeci">ModelOptions m_ModelOptions</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00233">INetwork.hpp:233</a></div></div>
<div class="ttc" id="_tensor_i_o_utils_8hpp_xhtml"><div class="ttname"><a href="_tensor_i_o_utils_8hpp.xhtml">TensorIOUtils.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_runtime_xhtml_ad44ecd3700748dc30dc4bbe34ba5bde7"><div class="ttname"><a href="classarmnn_1_1_i_runtime.xhtml#ad44ecd3700748dc30dc4bbe34ba5bde7">armnn::IRuntime::Create</a></div><div class="ttdeci">static IRuntimePtr Create(const CreationOptions &amp;options)</div><div class="ttdef"><b>Definition:</b> <a href="_runtime_8cpp_source.xhtml#l00040">Runtime.cpp:40</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_a570cb1835ec73000a7954ba75257904f"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#a570cb1835ec73000a7954ba75257904f">armnn::BackendRegistry::GetBackendIds</a></div><div class="ttdeci">BackendIdSet GetBackendIds() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00073">BackendRegistry.cpp:73</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a441621f00fd5665898c81a5ae3473c6b"><div class="ttname"><a href="namespacearmnn.xhtml#a441621f00fd5665898c81a5ae3473c6b">armnn::GetTimeDuration</a></div><div class="ttdeci">std::chrono::duration&lt; double, std::milli &gt; GetTimeDuration(std::chrono::high_resolution_clock::time_point start_time)</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00019">Timer.hpp:19</a></div></div>
<div class="ttc" id="_threadpool_8hpp_xhtml"><div class="ttname"><a href="_threadpool_8hpp.xhtml">Threadpool.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a9416d94a8aad7cdfa47eb35e825cbda5"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a9416d94a8aad7cdfa47eb35e825cbda5">armnn::OptimizerOptions::m_shapeInferenceMethod</a></div><div class="ttdeci">ShapeInferenceMethod m_shapeInferenceMethod</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00227">INetwork.hpp:227</a></div></div>
<div class="ttc" id="namespace_inference_model_internal_xhtml"><div class="ttname"><a href="namespace_inference_model_internal.xhtml">InferenceModelInternal</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00083">InferenceModel.hpp:83</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_af6964b8f91085191c5228d1a67db4523"><div class="ttname"><a href="class_inference_model.xhtml#af6964b8f91085191c5228d1a67db4523">InferenceModel::DataType</a></div><div class="ttdeci">TDataType DataType</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00375">InferenceModel.hpp:375</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1854d9cda81304325664363c1fd0fb27"><div class="ttname"><a href="namespacearmnn.xhtml#a1854d9cda81304325664363c1fd0fb27">armnn::BackendIdSet</a></div><div class="ttdeci">std::unordered_set&lt; BackendId &gt; BackendIdSet</div><div class="ttdef"><b>Definition:</b> <a href="_backend_id_8hpp_source.xhtml#l00193">BackendId.hpp:193</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a066580d185559e2efdcb6cedd1709b9c"><div class="ttname"><a href="class_inference_model.xhtml#a066580d185559e2efdcb6cedd1709b9c">InferenceModel::GetInputQuantizationParams</a></div><div class="ttdeci">QuantizationParams GetInputQuantizationParams(unsigned int inputIndex=0u) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00755">InferenceModel.hpp:755</a></div></div>
<div class="ttc" id="struct_inference_model_1_1_command_line_options_xhtml_a513151623e8d448951a0b94ad1946fbe"><div class="ttname"><a href="struct_inference_model_1_1_command_line_options.xhtml#a513151623e8d448951a0b94ad1946fbe">InferenceModel::CommandLineOptions::m_EnableFp16TurboMode</a></div><div class="ttdeci">bool m_EnableFp16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00386">InferenceModel.hpp:386</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_ac0b73049e00e7013f5cc6ae7fcaedcd4"><div class="ttname"><a href="class_inference_model.xhtml#ac0b73049e00e7013f5cc6ae7fcaedcd4">InferenceModel::GetOutputBindingInfos</a></div><div class="ttdeci">const std::vector&lt; armnn::BindingPointInfo &gt; &amp; GetOutputBindingInfos() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00743">InferenceModel.hpp:743</a></div></div>
<div class="ttc" id="_tf_lite_yolo_v3_big-_armnn_8cpp_xhtml_aa5b4bf99dead35f1ed10ec2da962b5f8"><div class="ttname"><a href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#aa5b4bf99dead35f1ed10ec2da962b5f8">MakeInputTensors</a></div><div class="ttdeci">armnn::InputTensors MakeInputTensors(const std::vector&lt; armnn::BindingPointInfo &gt; &amp;inputBindings, const std::vector&lt; std::reference_wrapper&lt; TContainer &gt;&gt; &amp;inputDataContainers)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00050">TfLiteYoloV3Big-Armnn.cpp:50</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae060224135f57f926cbda9d2732a2b1fa566666dfc3a9a82da0d7b0816b19f278"><div class="ttname"><a href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa566666dfc3a9a82da0d7b0816b19f278">armnn::ProfilingDetailsMethod::DetailsOnly</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a22794efa5d496a49a33739dd99087841"><div class="ttname"><a href="class_inference_model.xhtml#a22794efa5d496a49a33739dd99087841">InferenceModel::AddCommandLineOptions</a></div><div class="ttdeci">static void AddCommandLineOptions(cxxopts::Options &amp;options, CommandLineOptions &amp;cLineOptions, std::vector&lt; std::string &gt; &amp;required)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00398">InferenceModel.hpp:398</a></div></div>
<div class="ttc" id="struct_inference_model_1_1_command_line_options_xhtml"><div class="ttname"><a href="struct_inference_model_1_1_command_line_options.xhtml">InferenceModel::CommandLineOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00380">InferenceModel.hpp:380</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#ae43cf4b5df0068ee6a9151c98947248b">InferenceModelInternal::Params::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00096">InferenceModel.hpp:96</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a325f1c17b5ff2153cae944e3c62820a2"><div class="ttname"><a href="class_inference_model.xhtml#a325f1c17b5ff2153cae944e3c62820a2">InferenceModel::GetOutputBindingInfo</a></div><div class="ttdeci">const armnn::BindingPointInfo &amp; GetOutputBindingInfo(unsigned int outputIndex=0u) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00737">InferenceModel.hpp:737</a></div></div>
<div class="ttc" id="class_inference_model_xhtml"><div class="ttname"><a href="class_inference_model.xhtml">InferenceModel</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00372">InferenceModel.hpp:372</a></div></div>
<div class="ttc" id="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser_xhtml"><div class="ttname"><a href="classarmnn_tf_lite_parser_1_1_i_tf_lite_parser.xhtml">armnnTfLiteParser::ITfLiteParser</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_tf_lite_parser_8hpp_source.xhtml#l00026">ITfLiteParser.hpp:26</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="classarmnn_1_1_file_not_found_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_file_not_found_exception.xhtml">armnn::FileNotFoundException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00086">Exceptions.hpp:86</a></div></div>
<div class="ttc" id="_arm_n_n_8hpp_xhtml"><div class="ttname"><a href="_arm_n_n_8hpp.xhtml">ArmNN.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml">armnn::INetwork</a></div><div class="ttdoc">Main network class which provides the interface for building up a neural network. ...</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00249">INetwork.hpp:249</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_ab510347c552e6ff7fd6b702b688525b1"><div class="ttname"><a href="class_inference_model.xhtml#ab510347c552e6ff7fd6b702b688525b1">InferenceModel::RunAsync</a></div><div class="ttdeci">std::tuple&lt; unsigned int, std::chrono::duration&lt; double, std::milli &gt; &gt; RunAsync(armnn::experimental::IWorkingMemHandle &amp;workingMemHandleRef, const std::vector&lt; armnnUtils::TContainer &gt; &amp;inputContainers, std::vector&lt; armnnUtils::TContainer &gt; &amp;outputContainers, unsigned int inferenceID)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00636">InferenceModel.hpp:636</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac2807505b850738bc8a1991ce669dd47"><div class="ttname"><a href="namespacearmnn.xhtml#ac2807505b850738bc8a1991ce669dd47">armnn::BackendRegistryInstance</a></div><div class="ttdeci">BackendRegistry &amp; BackendRegistryInstance()</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00013">BackendRegistry.cpp:13</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a11f463726addcc1d2845266997d79e9c"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a11f463726addcc1d2845266997d79e9c">armnn::OptimizerOptions::m_ReduceFp32ToBf16</a></div><div class="ttdeci">bool m_ReduceFp32ToBf16</div><div class="ttdoc">Reduces all Fp32 operators in the model to Bf16 for faster processing. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00224">INetwork.hpp:224</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa01bce88f89975a5a031db4cc8861527"><div class="ttname"><a href="namespacearmnn.xhtml#aa01bce88f89975a5a031db4cc8861527">armnn::InputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class ConstTensor &gt; &gt; InputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00392">Tensor.hpp:392</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a9a28e0c17604e5a945409f994c020212"><div class="ttname"><a href="class_inference_model.xhtml#a9a28e0c17604e5a945409f994c020212">InferenceModel::GetInputBindingInfo</a></div><div class="ttdeci">const armnn::BindingPointInfo &amp; GetInputBindingInfo(unsigned int inputIndex=0u) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00726">InferenceModel.hpp:726</a></div></div>
<div class="ttc" id="namespace_inference_model_internal_xhtml_a9084adbf804022c874039ad40d1939e9"><div class="ttname"><a href="namespace_inference_model_internal.xhtml#a9084adbf804022c874039ad40d1939e9">InferenceModelInternal::BindingPointInfo</a></div><div class="ttdeci">armnn::BindingPointInfo BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00085">InferenceModel.hpp:85</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a513151623e8d448951a0b94ad1946fbe"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a513151623e8d448951a0b94ad1946fbe">InferenceModelInternal::Params::m_EnableFp16TurboMode</a></div><div class="ttdeci">bool m_EnableFp16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00100">InferenceModel.hpp:100</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac895f6f6897ce335b7b433201bae0b48"><div class="ttname"><a href="namespacearmnn.xhtml#ac895f6f6897ce335b7b433201bae0b48">armnn::GetTimeNow</a></div><div class="ttdeci">std::chrono::high_resolution_clock::time_point GetTimeNow()</div><div class="ttdef"><b>Definition:</b> <a href="_timer_8hpp_source.xhtml#l00014">Timer.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_ae3ca0528045df8958ce5dcdf9d1af041"><div class="ttname"><a href="class_inference_model.xhtml#ae3ca0528045df8958ce5dcdf9d1af041">InferenceModel::QuantizationParams</a></div><div class="ttdeci">InferenceModelInternal::QuantizationParams QuantizationParams</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00377">InferenceModel.hpp:377</a></div></div>
<div class="ttc" id="struct_inference_model_1_1_command_line_options_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="struct_inference_model_1_1_command_line_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">InferenceModel::CommandLineOptions::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00384">InferenceModel.hpp:384</a></div></div>
<div class="ttc" id="classarmnn_1_1_backend_registry_xhtml_ae1de2f7ca1db17f45f97155e239b8b45"><div class="ttname"><a href="classarmnn_1_1_backend_registry.xhtml#ae1de2f7ca1db17f45f97155e239b8b45">armnn::BackendRegistry::GetBackendIdsAsString</a></div><div class="ttdeci">std::string GetBackendIdsAsString() const</div><div class="ttdef"><b>Definition:</b> <a href="_backend_registry_8cpp_source.xhtml#l00083">BackendRegistry.cpp:83</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_aaae50a6c0f73e4c210c2e4331c439482"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#aaae50a6c0f73e4c210c2e4331c439482">InferenceModelInternal::Params::m_VisualizePostOptimizationModel</a></div><div class="ttdeci">bool m_VisualizePostOptimizationModel</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00099">InferenceModel.hpp:99</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a66f9597b152215daba3211379dad63d3"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a66f9597b152215daba3211379dad63d3">InferenceModelInternal::Params::m_EnableFastMath</a></div><div class="ttdeci">bool m_EnableFastMath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00105">InferenceModel.hpp:105</a></div></div>
<div class="ttc" id="struct_create_network_impl_xhtml"><div class="ttname"><a href="struct_create_network_impl.xhtml">CreateNetworkImpl</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00141">InferenceModel.hpp:141</a></div></div>
<div class="ttc" id="_filesystem_8hpp_xhtml"><div class="ttname"><a href="_filesystem_8hpp.xhtml">Filesystem.hpp</a></div></div>
<div class="ttc" id="_backend_registry_8hpp_xhtml"><div class="ttname"><a href="_backend_registry_8hpp.xhtml">BackendRegistry.hpp</a></div></div>
<div class="ttc" id="structarmnn_deserializer_1_1_binding_point_info_xhtml"><div class="ttname"><a href="structarmnn_deserializer_1_1_binding_point_info.xhtml">armnnDeserializer::BindingPointInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_deserializer_8hpp_source.xhtml#l00018">IDeserializer.hpp:18</a></div></div>
<div class="ttc" id="_timer_8hpp_xhtml"><div class="ttname"><a href="_timer_8hpp.xhtml">Timer.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae060224135f57f926cbda9d2732a2b1f"><div class="ttname"><a href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1f">armnn::ProfilingDetailsMethod</a></div><div class="ttdeci">ProfilingDetailsMethod</div><div class="ttdoc">Define the behaviour of the internal profiler when outputting network details. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00058">Types.hpp:58</a></div></div>
<div class="ttc" id="_numeric_cast_8hpp_xhtml"><div class="ttname"><a href="_numeric_cast_8hpp.xhtml">NumericCast.hpp</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a262185c43532d5728c4bd7890f3b2235"><div class="ttname"><a href="class_inference_model.xhtml#a262185c43532d5728c4bd7890f3b2235">InferenceModel::CheckInputIndexIsValid</a></div><div class="ttdeci">void CheckInputIndexIsValid(unsigned int inputIndex) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00560">InferenceModel.hpp:560</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a0b99050baebe1d169392461b3a9be08d"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a0b99050baebe1d169392461b3a9be08d">InferenceModelInternal::Params::m_EnableBf16TurboMode</a></div><div class="ttdeci">bool m_EnableBf16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00101">InferenceModel.hpp:101</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a8282dddf88e0deb3c414235e20a6cb2c"><div class="ttname"><a href="class_inference_model.xhtml#a8282dddf88e0deb3c414235e20a6cb2c">InferenceModel::GetOutputSize</a></div><div class="ttdeci">unsigned int GetOutputSize(unsigned int outputIndex=0u) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00582">InferenceModel.hpp:582</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_network_properties_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_network_properties.xhtml">armnn::INetworkProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00033">IRuntime.hpp:33</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a7974597e9d3c848fd265d9445f7cf8cb"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a7974597e9d3c848fd265d9445f7cf8cb">InferenceModelInternal::Params::Params</a></div><div class="ttdeci">Params()</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00116">InferenceModel.hpp:116</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_aad2ac35d4cb83ee4da9fad5fbcb907e0"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#aad2ac35d4cb83ee4da9fad5fbcb907e0">InferenceModelInternal::Params::m_InputBindings</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_InputBindings</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00092">InferenceModel.hpp:92</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a6e1a42622ca43dafc7ba8e684c016eb4"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a6e1a42622ca43dafc7ba8e684c016eb4">armnn::OptimizerOptions::m_ReduceFp32ToFp16</a></div><div class="ttdeci">bool m_ReduceFp32ToFp16</div><div class="ttdoc">Reduces all Fp32 operators in the model to Fp16 for faster processing. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00214">INetwork.hpp:214</a></div></div>
<div class="ttc" id="_i_tf_lite_parser_8hpp_xhtml"><div class="ttname"><a href="_i_tf_lite_parser_8hpp.xhtml">ITfLiteParser.hpp</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a5a211a676b879363f0c5001698a14c50"><div class="ttname"><a href="class_inference_model.xhtml#a5a211a676b879363f0c5001698a14c50">InferenceModel::InferenceModel</a></div><div class="ttdeci">InferenceModel(const Params &amp;params, bool enableProfiling, const std::string &amp;dynamicBackendsPath, const std::shared_ptr&lt; armnn::IRuntime &gt; &amp;runtime=nullptr)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00436">InferenceModel.hpp:436</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a69eb14082d40fa0a3cff50457344a5e0"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a69eb14082d40fa0a3cff50457344a5e0">armnn::OptimizerOptions::m_Debug</a></div><div class="ttdeci">bool m_Debug</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00217">INetwork.hpp:217</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_ad69aa6b4967ce55ee4a915c52c71bf2e"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#ad69aa6b4967ce55ee4a915c52c71bf2e">InferenceModelInternal::Params::m_InputShapes</a></div><div class="ttdeci">std::vector&lt; armnn::TensorShape &gt; m_InputShapes</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00093">InferenceModel.hpp:93</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae060224135f57f926cbda9d2732a2b1fa497ab261a562e316736c2cb59b839d32"><div class="ttname"><a href="namespacearmnn.xhtml#ae060224135f57f926cbda9d2732a2b1fa497ab261a562e316736c2cb59b839d32">armnn::ProfilingDetailsMethod::DetailsWithEvents</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a9a04b8c7f19a84f63125edec509b6d53"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a9a04b8c7f19a84f63125edec509b6d53">InferenceModelInternal::Params::m_SaveCachedNetwork</a></div><div class="ttdeci">bool m_SaveCachedNetwork</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00106">InferenceModel.hpp:106</a></div></div>
<div class="ttc" id="struct_inference_model_1_1_command_line_options_xhtml_a2c0d69e50a4269073a6ce52c55a1a9bb"><div class="ttname"><a href="struct_inference_model_1_1_command_line_options.xhtml#a2c0d69e50a4269073a6ce52c55a1a9bb">InferenceModel::CommandLineOptions::m_ModelDir</a></div><div class="ttdeci">std::string m_ModelDir</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00382">InferenceModel.hpp:382</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a7adc5dcfe3d76ac489f253c4d5f439c8"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a7adc5dcfe3d76ac489f253c4d5f439c8">InferenceModelInternal::Params::m_ThreadPoolSize</a></div><div class="ttdeci">size_t m_ThreadPoolSize</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00113">InferenceModel.hpp:113</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_af5e88d9bb91dff85ad5a6f7e190aff4e"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#af5e88d9bb91dff85ad5a6f7e190aff4e">InferenceModelInternal::Params::m_AsyncEnabled</a></div><div class="ttdeci">bool m_AsyncEnabled</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00112">InferenceModel.hpp:112</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_ad5310a199d4969927169ed084b1f6c28"><div class="ttname"><a href="namespacearmnn_utils.xhtml#ad5310a199d4969927169ed084b1f6c28">armnnUtils::MakeInputTensors</a></div><div class="ttdeci">armnn::InputTensors MakeInputTensors(const std::vector&lt; armnn::BindingPointInfo &gt; &amp;inputBindings, const std::vector&lt; TContainer &gt; &amp;inputDataContainers)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_i_o_utils_8hpp_source.xhtml#l00017">TensorIOUtils.hpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a82e98ef05fd67036d1195ba17174d685"><div class="ttname"><a href="namespacearmnn.xhtml#a82e98ef05fd67036d1195ba17174d685">armnn::Optimize</a></div><div class="ttdeci">IOptimizedNetworkPtr Optimize(const INetwork &amp;network, const std::vector&lt; BackendId &gt; &amp;backendPreferences, const IDeviceSpec &amp;deviceSpec, const OptimizerOptions &amp;options=OptimizerOptions(), Optional&lt; std::vector&lt; std::string &gt; &amp;&gt; messages=EmptyOptional())</div><div class="ttdoc">Create an optimized version of the network. </div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l01680">Network.cpp:1680</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_abeacb4ed1ca9256ee0e8aea73185a0cc"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#abeacb4ed1ca9256ee0e8aea73185a0cc">InferenceModelInternal::Params::m_OutputBindings</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_OutputBindings</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00094">InferenceModel.hpp:94</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a2d54e6252c1c9a0e29f7706ba03b2b74"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a2d54e6252c1c9a0e29f7706ba03b2b74">InferenceModelInternal::Params::m_ComputeDevices</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; m_ComputeDevices</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00095">InferenceModel.hpp:95</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_optimized_network_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_optimized_network.xhtml">armnn::IOptimizedNetwork</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00790">INetwork.hpp:790</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a43b9b072a5aad953e50500b71bcbbef7"><div class="ttname"><a href="class_inference_model.xhtml#a43b9b072a5aad953e50500b71bcbbef7">InferenceModel::RunAsync</a></div><div class="ttdeci">void RunAsync(const std::vector&lt; armnnUtils::TContainer &gt; &amp;inputContainers, std::vector&lt; armnnUtils::TContainer &gt; &amp;outputContainers, std::shared_ptr&lt; armnn::IAsyncExecutionCallback &gt; cb)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00689">InferenceModel.hpp:689</a></div></div>
<div class="ttc" id="_heap_profiling_8hpp_xhtml_aeeb927880fc4ffc2eea754a67d884a53"><div class="ttname"><a href="_heap_profiling_8hpp.xhtml#aeeb927880fc4ffc2eea754a67d884a53">ARMNN_SCOPED_HEAP_PROFILING</a></div><div class="ttdeci">#define ARMNN_SCOPED_HEAP_PROFILING(TAG)</div><div class="ttdef"><b>Definition:</b> <a href="_heap_profiling_8hpp_source.xhtml#l00045">HeapProfiling.hpp:45</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360"><div class="ttname"><a href="namespacearmnn.xhtml#ae2f04a162585c0a5222a537efd5456aeaec0fc0100c4fc1ce4eea230c3dc10360">armnn::Compute::Undefined</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0d8160388a127c1a23b37bc88dc6e2ec"><div class="ttname"><a href="namespacearmnn.xhtml#a0d8160388a127c1a23b37bc88dc6e2ec">armnn::NetworkId</a></div><div class="ttdeci">int NetworkId</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00025">IRuntime.hpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1"><div class="ttname"><a href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9af6486a22a9bb11959bfae60a3e5174b1">armnn::ShapeInferenceMethod::ValidateOnly</a></div><div class="ttdoc">Validate all output shapes. </div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8f091a512915d1cb29a4ebf13dfc53ea"><div class="ttname"><a href="namespacearmnn.xhtml#a8f091a512915d1cb29a4ebf13dfc53ea">armnn::OutputTensors</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; LayerBindingId, class Tensor &gt; &gt; OutputTensors</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00393">Tensor.hpp:393</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00029">Types.hpp:29</a></div></div>
<div class="ttc" id="classarmnn_onnx_parser_1_1_i_onnx_parser_xhtml"><div class="ttname"><a href="classarmnn_onnx_parser_1_1_i_onnx_parser.xhtml">armnnOnnxParser::IOnnxParser</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_onnx_parser_8hpp_source.xhtml#l00023">IOnnxParser.hpp:23</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a674efcf6cbdb9e831d653ff0e821fb38"><div class="ttname"><a href="namespacearmnn.xhtml#a674efcf6cbdb9e831d653ff0e821fb38">armnn::IOptimizedNetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; IOptimizedNetwork, void(*)(IOptimizedNetwork *network)&gt; IOptimizedNetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00242">INetwork.hpp:242</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a1a09727b3f781272e702516fffb7d97f"><div class="ttname"><a href="class_inference_model.xhtml#a1a09727b3f781272e702516fffb7d97f">InferenceModel::GetQuantizationParams</a></div><div class="ttdeci">QuantizationParams GetQuantizationParams(unsigned int outputIndex=0u) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00748">InferenceModel.hpp:748</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml_a1b1892da2aaf7eaedaa38671d56b7f19"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml#a1b1892da2aaf7eaedaa38671d56b7f19">armnn::OptimizerOptions::m_ProfilingEnabled</a></div><div class="ttdeci">bool m_ProfilingEnabled</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00236">INetwork.hpp:236</a></div></div>
<div class="ttc" id="classarmnn_1_1experimental_1_1_i_working_mem_handle_xhtml"><div class="ttname"><a href="classarmnn_1_1experimental_1_1_i_working_mem_handle.xhtml">armnn::experimental::IWorkingMemHandle</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_working_mem_handle_8hpp_source.xhtml#l00018">IWorkingMemHandle.hpp:18</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_ade1a8545be49b1c10e724ea8536907c7"><div class="ttname"><a href="class_inference_model.xhtml#ade1a8545be49b1c10e724ea8536907c7">InferenceModel::GetAllQuantizationParams</a></div><div class="ttdeci">std::vector&lt; QuantizationParams &gt; GetAllQuantizationParams() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00762">InferenceModel.hpp:762</a></div></div>
<div class="ttc" id="namespace_inference_model_internal_xhtml_a6e713a319588c57fc854bc478f5ee13a"><div class="ttname"><a href="namespace_inference_model_internal.xhtml#a6e713a319588c57fc854bc478f5ee13a">InferenceModelInternal::QuantizationParams</a></div><div class="ttdeci">std::pair&lt; float, int32_t &gt; QuantizationParams</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00087">InferenceModel.hpp:87</a></div></div>
<div class="ttc" id="structarmnn_1_1_optimizer_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_optimizer_options.xhtml">armnn::OptimizerOptions</a></div><div class="ttdoc">ArmNN performs an optimization on each model/network before it gets loaded for execution. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00137">INetwork.hpp:137</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a5c7f0c083da98e7b6e9ba79d2fcd985d"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a5c7f0c083da98e7b6e9ba79d2fcd985d">InferenceModelInternal::Params::m_ParseUnsupported</a></div><div class="ttdeci">bool m_ParseUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00103">InferenceModel.hpp:103</a></div></div>
<div class="ttc" id="_cxxopts_utils_8hpp_xhtml"><div class="ttname"><a href="_cxxopts_utils_8hpp.xhtml">CxxoptsUtils.hpp</a></div></div>
<div class="ttc" id="_i_onnx_parser_8hpp_xhtml"><div class="ttname"><a href="_i_onnx_parser_8hpp.xhtml">IOnnxParser.hpp</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml_aa3be76aec4ce713822a5ea1ecbb7bc61"><div class="ttname"><a href="_exceptions_8hpp.xhtml#aa3be76aec4ce713822a5ea1ecbb7bc61">CHECK_LOCATION</a></div><div class="ttdeci">#define CHECK_LOCATION()</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00209">Exceptions.hpp:209</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_ad4efd5a7fa660df5246466d83517220d"><div class="ttname"><a href="namespacearmnn_utils.xhtml#ad4efd5a7fa660df5246466d83517220d">armnnUtils::MakeOutputTensors</a></div><div class="ttdeci">armnn::OutputTensors MakeOutputTensors(const std::vector&lt; armnn::BindingPointInfo &gt; &amp;outputBindings, std::vector&lt; TContainer &gt; &amp;outputDataContainers)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_i_o_utils_8hpp_source.xhtml#l00056">TensorIOUtils.hpp:56</a></div></div>
<div class="ttc" id="struct_inference_model_1_1_command_line_options_xhtml_a0b99050baebe1d169392461b3a9be08d"><div class="ttname"><a href="struct_inference_model_1_1_command_line_options.xhtml#a0b99050baebe1d169392461b3a9be08d">InferenceModel::CommandLineOptions::m_EnableBf16TurboMode</a></div><div class="ttdeci">bool m_EnableBf16TurboMode</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00387">InferenceModel.hpp:387</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml"><div class="ttname"><a href="_logging_8hpp.xhtml">Logging.hpp</a></div></div>
<div class="ttc" id="_t_container_8hpp_xhtml"><div class="ttname"><a href="_t_container_8hpp.xhtml">TContainer.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml">armnn::IRuntime::CreationOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00075">IRuntime.hpp:75</a></div></div>
<div class="ttc" id="struct_inference_model_1_1_command_line_options_xhtml_aaae50a6c0f73e4c210c2e4331c439482"><div class="ttname"><a href="struct_inference_model_1_1_command_line_options.xhtml#aaae50a6c0f73e4c210c2e4331c439482">InferenceModel::CommandLineOptions::m_VisualizePostOptimizationModel</a></div><div class="ttdeci">bool m_VisualizePostOptimizationModel</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00385">InferenceModel.hpp:385</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a></div><div class="ttdoc">Struct for the users to pass backend specific options. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00022">BackendOptions.hpp:22</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a2a245a63e87f363df491ad8c35be54c5"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a2a245a63e87f363df491ad8c35be54c5">InferenceModelInternal::Params::m_InferOutputShape</a></div><div class="ttdeci">bool m_InferOutputShape</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00104">InferenceModel.hpp:104</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml_ae43cf4b5df0068ee6a9151c98947248b"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#ae43cf4b5df0068ee6a9151c98947248b">armnn::IRuntime::CreationOptions::m_DynamicBackendsPath</a></div><div class="ttdeci">std::string m_DynamicBackendsPath</div><div class="ttdoc">Setting this value will override the paths set by the DYNAMIC_BACKEND_PATHS compiler directive Only a...</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00096">IRuntime.hpp:96</a></div></div>
<div class="ttc" id="structarmnn_1_1_i_runtime_1_1_creation_options_xhtml_a2fe8c3eadf4f4f9c0c664a24a2a298f9"><div class="ttname"><a href="structarmnn_1_1_i_runtime_1_1_creation_options.xhtml#a2fe8c3eadf4f4f9c0c664a24a2a298f9">armnn::IRuntime::CreationOptions::m_EnableGpuProfiling</a></div><div class="ttdeci">bool m_EnableGpuProfiling</div><div class="ttdoc">Setting this flag will allow the user to obtain GPU profiling information from the runtime...</div><div class="ttdef"><b>Definition:</b> <a href="_i_runtime_8hpp_source.xhtml#l00091">IRuntime.hpp:91</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml"><div class="ttname"><a href="_assert_8hpp.xhtml">Assert.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_acde2af8cbbd224a9f94e509ca538a775"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#acde2af8cbbd224a9f94e509ca538a775">InferenceModelInternal::Params::m_PrintIntermediateLayers</a></div><div class="ttdeci">bool m_PrintIntermediateLayers</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00102">InferenceModel.hpp:102</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a9f8881646a38f828f92d3354930c4165"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a9f8881646a38f828f92d3354930c4165">InferenceModelInternal::Params::m_CachedNetworkFilePath</a></div><div class="ttdeci">std::string m_CachedNetworkFilePath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00109">InferenceModel.hpp:109</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a280670a263dc4fd40491f6d0a2737f44"><div class="ttname"><a href="namespacearmnn.xhtml#a280670a263dc4fd40491f6d0a2737f44">armnn::BindingPointInfo</a></div><div class="ttdeci">std::pair&lt; armnn::LayerBindingId, armnn::TensorInfo &gt; BindingPointInfo</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00274">Tensor.hpp:274</a></div></div>
<div class="ttc" id="struct_create_network_impl_xhtml_a4cbece5e7793be85f9a1e8a0ab9e02f8"><div class="ttname"><a href="struct_create_network_impl.xhtml#a4cbece5e7793be85f9a1e8a0ab9e02f8">CreateNetworkImpl::Create</a></div><div class="ttdeci">static armnn::INetworkPtr Create(const Params &amp;params, std::vector&lt; armnn::BindingPointInfo &gt; &amp;inputBindings, std::vector&lt; armnn::BindingPointInfo &gt; &amp;outputBindings)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00146">InferenceModel.hpp:146</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a6d789a57513b4b26e31eaed316e45b7f"><div class="ttname"><a href="class_inference_model.xhtml#a6d789a57513b4b26e31eaed316e45b7f">InferenceModel::CreateWorkingMemHandle</a></div><div class="ttdeci">std::unique_ptr&lt; armnn::experimental::IWorkingMemHandle &gt; CreateWorkingMemHandle()</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00772">InferenceModel.hpp:772</a></div></div>
<div class="ttc" id="_i_deserializer_8hpp_xhtml"><div class="ttname"><a href="_i_deserializer_8hpp.xhtml">IDeserializer.hpp</a></div></div>
<div class="ttc" id="struct_inference_model_1_1_command_line_options_xhtml_a56f7be77245196289f2bf0cce1dca31c"><div class="ttname"><a href="struct_inference_model_1_1_command_line_options.xhtml#a56f7be77245196289f2bf0cce1dca31c">InferenceModel::CommandLineOptions::GetComputeDevicesAsBackendIds</a></div><div class="ttdeci">std::vector&lt; armnn::BackendId &gt; GetComputeDevicesAsBackendIds()</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00390">InferenceModel.hpp:390</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70bae139a585510a502bbf1841cf589f5086">armnn::Status::Failure</a></div></div>
<div class="ttc" id="structarmnn_deserializer_1_1_binding_point_info_xhtml_aa308d10e76e29f09e44a933a2d091a79"><div class="ttname"><a href="structarmnn_deserializer_1_1_binding_point_info.xhtml#aa308d10e76e29f09e44a933a2d091a79">armnnDeserializer::BindingPointInfo::m_TensorInfo</a></div><div class="ttdeci">armnn::TensorInfo m_TensorInfo</div><div class="ttdef"><b>Definition:</b> <a href="_i_deserializer_8hpp_source.xhtml#l00021">IDeserializer.hpp:21</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml">armnn::Exception</a></div><div class="ttdoc">Base class for all ArmNN exceptions so that users can filter to just those. </div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00046">Exceptions.hpp:46</a></div></div>
<div class="ttc" id="struct_inference_model_1_1_command_line_options_xhtml_a2b6e92b247e830ff78d04266ff130a92"><div class="ttname"><a href="struct_inference_model_1_1_command_line_options.xhtml#a2b6e92b247e830ff78d04266ff130a92">InferenceModel::CommandLineOptions::m_ComputeDevices</a></div><div class="ttdeci">std::vector&lt; std::string &gt; m_ComputeDevices</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00383">InferenceModel.hpp:383</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a679e4b22a845c8d7f58f6ca6a5df625f"><div class="ttname"><a href="class_inference_model.xhtml#a679e4b22a845c8d7f58f6ca6a5df625f">InferenceModel::GetInputSize</a></div><div class="ttdeci">unsigned int GetInputSize(unsigned int inputIndex=0u) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00576">InferenceModel.hpp:576</a></div></div>
<div class="ttc" id="_tf_lite_yolo_v3_big-_armnn_8cpp_xhtml_a47e2cf3b998bc6a55711799ac97d6eee"><div class="ttname"><a href="_tf_lite_yolo_v3_big-_armnn_8cpp.xhtml#a47e2cf3b998bc6a55711799ac97d6eee">MakeOutputTensors</a></div><div class="ttdeci">armnn::OutputTensors MakeOutputTensors(const std::vector&lt; armnn::BindingPointInfo &gt; &amp;outputBindings, const std::vector&lt; std::reference_wrapper&lt; TContainer &gt;&gt; &amp;outputDataContainers)</div><div class="ttdef"><b>Definition:</b> <a href="_tf_lite_yolo_v3_big-_armnn_8cpp_source.xhtml#l00074">TfLiteYoloV3Big-Armnn.cpp:74</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_ae96fc745917a3a0c0de7a818c9a05012"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#ae96fc745917a3a0c0de7a818c9a05012">InferenceModelInternal::Params::m_OutputDetailsToStdOut</a></div><div class="ttdeci">bool m_OutputDetailsToStdOut</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00107">InferenceModel.hpp:107</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_ac609a217f4de4c647422dbb358a5f2ef"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#ac609a217f4de4c647422dbb358a5f2ef">InferenceModelInternal::Params::m_MLGOTuningFilePath</a></div><div class="ttdeci">std::string m_MLGOTuningFilePath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00111">InferenceModel.hpp:111</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_adc650e032e7fce99f15e2bf903e7167b"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#adc650e032e7fce99f15e2bf903e7167b">InferenceModelInternal::Params::m_NumberOfThreads</a></div><div class="ttdeci">unsigned int m_NumberOfThreads</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00110">InferenceModel.hpp:110</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_ab17deb382179697b4702cc4f909e71f8"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#ab17deb382179697b4702cc4f909e71f8">InferenceModelInternal::Params::m_OutputDetailsOnlyToStdOut</a></div><div class="ttdeci">bool m_OutputDetailsOnlyToStdOut</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00108">InferenceModel.hpp:108</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a4fa312cf0d60fbd3988a7c76ab8e2980"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a4fa312cf0d60fbd3988a7c76ab8e2980">InferenceModelInternal::Params::m_ModelPath</a></div><div class="ttdeci">std::string m_ModelPath</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00091">InferenceModel.hpp:91</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a375ca3cff9f1b005d1412dc5f3cf5b6e"><div class="ttname"><a href="namespacearmnn.xhtml#a375ca3cff9f1b005d1412dc5f3cf5b6e">armnn::numeric_cast</a></div><div class="ttdeci">std::enable_if_t&lt; std::is_unsigned&lt; Source &gt;::value &amp;&amp;std::is_unsigned&lt; Dest &gt;::value, Dest &gt; numeric_cast(Source source)</div><div class="ttdef"><b>Definition:</b> <a href="_numeric_cast_8hpp_source.xhtml#l00035">NumericCast.hpp:35</a></div></div>
<div class="ttc" id="_string_utils_8hpp_xhtml"><div class="ttname"><a href="_string_utils_8hpp.xhtml">StringUtils.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb"><div class="ttname"><a href="namespacearmnn.xhtml#adf57837d00e8352d9b5cc5ab1fb5fee9a5dd7c525cb1500a2181fd4cc079d7acb">armnn::ShapeInferenceMethod::InferAndValidate</a></div><div class="ttdoc">Infer missing output shapes and validate all output shapes. </div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a6bf2f586c403977d31c7d32d371918cf"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a6bf2f586c403977d31c7d32d371918cf">InferenceModelInternal::Params::m_IsModelBinary</a></div><div class="ttdeci">bool m_IsModelBinary</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00098">InferenceModel.hpp:98</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml_a2d4582aa74998c397bd064ae73745b62"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml#a2d4582aa74998c397bd064ae73745b62">InferenceModelInternal::Params::m_SubgraphId</a></div><div class="ttdeci">size_t m_SubgraphId</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00097">InferenceModel.hpp:97</a></div></div>
<div class="ttc" id="struct_inference_model_1_1_command_line_options_xhtml_a237e6ca9811ae2195fbe8f30aa696e5b"><div class="ttname"><a href="struct_inference_model_1_1_command_line_options.xhtml#a237e6ca9811ae2195fbe8f30aa696e5b">InferenceModel::CommandLineOptions::m_Labels</a></div><div class="ttdeci">std::string m_Labels</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00388">InferenceModel.hpp:388</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ace74f6f9feb95a964a49d79458232703"><div class="ttname"><a href="namespacearmnn.xhtml#ace74f6f9feb95a964a49d79458232703">armnn::INetworkPtr</a></div><div class="ttdeci">std::unique_ptr&lt; INetwork, void(*)(INetwork *network)&gt; INetworkPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00241">INetwork.hpp:241</a></div></div>
<div class="ttc" id="classarmnn_deserializer_1_1_i_deserializer_xhtml"><div class="ttname"><a href="classarmnn_deserializer_1_1_i_deserializer.xhtml">armnnDeserializer::IDeserializer</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_deserializer_8hpp_source.xhtml#l00027">IDeserializer.hpp:27</a></div></div>
<div class="ttc" id="structarmnn_deserializer_1_1_binding_point_info_xhtml_a663b3104ec65e4e08b5e37fb42942087"><div class="ttname"><a href="structarmnn_deserializer_1_1_binding_point_info.xhtml#a663b3104ec65e4e08b5e37fb42942087">armnnDeserializer::BindingPointInfo::m_BindingId</a></div><div class="ttdeci">armnn::LayerBindingId m_BindingId</div><div class="ttdef"><b>Definition:</b> <a href="_i_deserializer_8hpp_source.xhtml#l00020">IDeserializer.hpp:20</a></div></div>
<div class="ttc" id="_heap_profiling_8hpp_xhtml"><div class="ttname"><a href="_heap_profiling_8hpp.xhtml">HeapProfiling.hpp</a></div></div>
<div class="ttc" id="struct_inference_model_internal_1_1_params_xhtml"><div class="ttname"><a href="struct_inference_model_internal_1_1_params.xhtml">InferenceModelInternal::Params</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00089">InferenceModel.hpp:89</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a72a6db08ffca660ece7c2d86e2a14daa"><div class="ttname"><a href="class_inference_model.xhtml#a72a6db08ffca660ece7c2d86e2a14daa">InferenceModel::CheckOutputIndexIsValid</a></div><div class="ttdeci">void CheckOutputIndexIsValid(unsigned int outputIndex) const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00568">InferenceModel.hpp:568</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8e72227ebe5ac505cf44790f2e6eb488a87f8a6ab85c9ced3702b4ea641ad4bb5"><div class="ttname"><a href="namespacearmnn.xhtml#a8e72227ebe5ac505cf44790f2e6eb488a87f8a6ab85c9ced3702b4ea641ad4bb5">armnn::QosExecPriority::Medium</a></div></div>
<div class="ttc" id="class_inference_model_xhtml_a0e0f3330fc1e6c1fa1d99d731490c483"><div class="ttname"><a href="class_inference_model.xhtml#a0e0f3330fc1e6c1fa1d99d731490c483">InferenceModel::GetInputBindingInfos</a></div><div class="ttdeci">const std::vector&lt; armnn::BindingPointInfo &gt; &amp; GetInputBindingInfos() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_model_8hpp_source.xhtml#l00732">InferenceModel.hpp:732</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="_inference_model_8hpp.xhtml">InferenceModel.hpp</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:36 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
