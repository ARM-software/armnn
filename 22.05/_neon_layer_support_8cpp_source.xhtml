<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/neon/NeonLayerSupport.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_neon_layer_support_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NeonLayerSupport.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_neon_layer_support_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_layer_support_8hpp.xhtml">NeonLayerSupport.hpp</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_backend_id_8hpp.xhtml">NeonBackendId.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_backend_model_context_8hpp.xhtml">NeonBackendModelContext.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_exceptions_8hpp.xhtml">armnn/Exceptions.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_tensor_8hpp.xhtml">armnn/Tensor.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_types_8hpp.xhtml">armnn/Types.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_backend_registry_8hpp.xhtml">armnn/BackendRegistry.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_internal_types_8hpp.xhtml">InternalTypes.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_layer_support_common_8hpp.xhtml">LayerSupportCommon.hpp</a>&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_polymorphic_downcast_8hpp.xhtml">armnn/utility/PolymorphicDowncast.hpp</a>&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTENEON_ENABLED)</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_arm_compute_utils_8hpp.xhtml">aclCommon/ArmComputeUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_arm_compute_tensor_utils_8hpp.xhtml">aclCommon/ArmComputeTensorUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_abs_workload_8hpp.xhtml">workloads/NeonAbsWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_addition_workload_8hpp.xhtml">workloads/NeonAdditionWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_activation_workload_8hpp.xhtml">workloads/NeonActivationWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_arg_min_max_workload_8hpp.xhtml">workloads/NeonArgMinMaxWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_batch_normalization_workload_8hpp.xhtml">workloads/NeonBatchNormalizationWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_batch_to_space_nd_workload_8hpp.xhtml">workloads/NeonBatchToSpaceNdWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_cast_workload_8hpp.xhtml">workloads/NeonCastWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_channel_shuffle_workload_8hpp.xhtml">workloads/NeonChannelShuffleWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_comparison_workload_8hpp.xhtml">workloads/NeonComparisonWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_concat_workload_8hpp.xhtml">workloads/NeonConcatWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_constant_workload_8hpp.xhtml">workloads/NeonConstantWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_convolution2d_workload_8hpp.xhtml">workloads/NeonConvolution2dWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_convolution3d_workload_8hpp.xhtml">workloads/NeonConvolution3dWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_depth_to_space_workload_8hpp.xhtml">workloads/NeonDepthToSpaceWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_depthwise_convolution_workload_8hpp.xhtml">workloads/NeonDepthwiseConvolutionWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_dequantize_workload_8hpp.xhtml">workloads/NeonDequantizeWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_exp_workload_8hpp.xhtml">workloads/NeonExpWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_instance_normalization_workload_8hpp.xhtml">workloads/NeonInstanceNormalizationWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_l2_normalization_float_workload_8hpp.xhtml">workloads/NeonL2NormalizationFloatWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_log_workload_8hpp.xhtml">workloads/NeonLogWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_log_softmax_workload_8hpp.xhtml">workloads/NeonLogSoftmaxWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_logical_and_workload_8hpp.xhtml">workloads/NeonLogicalAndWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_logical_not_workload_8hpp.xhtml">workloads/NeonLogicalNotWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_logical_or_workload_8hpp.xhtml">workloads/NeonLogicalOrWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_lstm_float_workload_8hpp.xhtml">workloads/NeonLstmFloatWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_maximum_workload_8hpp.xhtml">workloads/NeonMaximumWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_mean_workload_8hpp.xhtml">workloads/NeonMeanWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_minimum_workload_8hpp.xhtml">workloads/NeonMinimumWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_multiplication_workload_8hpp.xhtml">workloads/NeonMultiplicationWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_division_workload_8hpp.xhtml">workloads/NeonDivisionWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_neg_workload_8hpp.xhtml">workloads/NeonNegWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_normalization_float_workload_8hpp.xhtml">workloads/NeonNormalizationFloatWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_fully_connected_workload_8hpp.xhtml">workloads/NeonFullyConnectedWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_gather_workload_8hpp.xhtml">workloads/NeonGatherWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_gather_nd_workload_8hpp.xhtml">workloads/NeonGatherNdWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_pad_workload_8hpp.xhtml">workloads/NeonPadWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_permute_workload_8hpp.xhtml">workloads/NeonPermuteWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_pooling2d_workload_8hpp.xhtml">workloads/NeonPooling2dWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_pooling3d_workload_8hpp.xhtml">workloads/NeonPooling3dWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_prelu_workload_8hpp.xhtml">workloads/NeonPreluWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_q_lstm_workload_8hpp.xhtml">workloads/NeonQLstmWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_quantize_workload_8hpp.xhtml">workloads/NeonQuantizeWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_quantized_lstm_workload_8hpp.xhtml">workloads/NeonQuantizedLstmWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_reduce_workload_8hpp.xhtml">workloads/NeonReduceWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_reshape_workload_8hpp.xhtml">workloads/NeonReshapeWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_resize_workload_8hpp.xhtml">workloads/NeonResizeWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_rsqrt_workload_8hpp.xhtml">workloads/NeonRsqrtWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_sin_workload_8hpp.xhtml">workloads/NeonSinWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_slice_workload_8hpp.xhtml">workloads/NeonSliceWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_softmax_workload_8hpp.xhtml">workloads/NeonSoftmaxWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_space_to_batch_nd_workload_8hpp.xhtml">workloads/NeonSpaceToBatchNdWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_space_to_depth_workload_8hpp.xhtml">workloads/NeonSpaceToDepthWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_splitter_workload_8hpp.xhtml">workloads/NeonSplitterWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_sqrt_workload_8hpp.xhtml">workloads/NeonSqrtWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_stack_workload_8hpp.xhtml">workloads/NeonStackWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_strided_slice_workload_8hpp.xhtml">workloads/NeonStridedSliceWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_subtraction_workload_8hpp.xhtml">workloads/NeonSubtractionWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_transpose_convolution2d_workload_8hpp.xhtml">workloads/NeonTransposeConvolution2dWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_transpose_workload_8hpp.xhtml">workloads/NeonTransposeWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_unidirectional_sequence_lstm_float_workload_8hpp.xhtml">workloads/NeonUnidirectionalSequenceLstmFloatWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_neon_unidirectional_sequence_lstm_workload_8hpp.xhtml">workloads/NeonUnidirectionalSequenceLstmWorkload.hpp</a>&quot;</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn.xhtml">armnn</a></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">typename</span> ... Args&gt;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keywordtype">bool</span> IsNeonBackendSupported(Optional&lt;std::string&amp;&gt; reasonIfUnsupported, Args... args)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(reasonIfUnsupported, (args)...);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTENEON_ENABLED)</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(reasonIfUnsupported, <span class="stringliteral">&quot;The armnn library has been built without NEON support&quot;</span>);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> FloatFunc, <span class="keyword">typename</span> Uint8Func, <span class="keyword">typename</span> ... Params&gt;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keywordtype">bool</span> IsSupportedForDataTypeNeon(Optional&lt;std::string&amp;&gt; reasonIfUnsupported,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dataType,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                FloatFunc floatFuncPtr,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                Uint8Func uint8FuncPtr,</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                Params&amp;&amp;... params)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">return</span> IsNeonBackendSupported(reasonIfUnsupported) &amp;&amp;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <a class="code" href="namespacearmnn.xhtml#af6dbe371ec651a8e0063624fdf32afc0">IsSupportedForDataTypeGeneric</a>(reasonIfUnsupported,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                         dataType,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                         floatFuncPtr,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                         floatFuncPtr,</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                         uint8FuncPtr,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                         &amp;FalseFunc&lt;&gt;,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                         &amp;FalseFunc&lt;&gt;,</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                         std::forward&lt;Params&gt;(params)...);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTENEON_ENABLED)</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">class </span>FuncType, <span class="keyword">class</span>... Args&gt;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> IsWorkloadSupported(FuncType&amp; func, Optional&lt;std::string&amp;&gt; reasonIfUnsupported, Args&amp;&amp;... args)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::Status</a> aclStatus = func(std::forward&lt;Args&gt;(args)...);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> supported = (aclStatus.error_code() == arm_compute::ErrorCode::OK);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">if</span> (!supported &amp;&amp; reasonIfUnsupported)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        reasonIfUnsupported.value() = aclStatus.error_description();</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">return</span> supported;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">  135</a></span>&#160;<span class="preprocessor">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported, ...) \</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="preprocessor">    return IsWorkloadSupported(func, reasonIfUnsupported, __VA_ARGS__);</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="preprocessor">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported, ...) \</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor">    return IsNeonBackendSupported(reasonIfUnsupported, __VA_ARGS__);</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;} <span class="comment">// anonymous namespace</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a45ecbb863cc8ef62d09bd7749089e0f8">  143</a></span>&#160;<a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0e8bdd2741997b0cdc329cbfcaeebf93">NeonLayerSupport::NeonLayerSupport</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">IBackendInternal::IBackendSpecificModelContextPtr</a>&amp; modelContextPtr)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    : m_ModelContextPtr(modelContextPtr)</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;{</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a0e8bdd2741997b0cdc329cbfcaeebf93">  148</a></span>&#160;<a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0e8bdd2741997b0cdc329cbfcaeebf93">NeonLayerSupport::NeonLayerSupport</a>()</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    : m_ModelContextPtr(nullptr)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a9365ac4251c03d9d6ec4802886bcbc4e">  153</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a9365ac4251c03d9d6ec4802886bcbc4e">NeonLayerSupport::IsLayerSupported</a>(<span class="keyword">const</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>&amp; type,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                        <span class="keyword">const</span> std::vector&lt;TensorInfo&gt;&amp; infos,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_base_descriptor.xhtml">BaseDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;LstmInputParamsInfo&gt;</a>&amp; lstmParamsInfo,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;QuantizedLstmInputParamsInfo&gt;</a>&amp; quantizedLstmParamsInfo,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">switch</span> (type)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">LayerType::Activation</a>:</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">IsActivationSupported</a>(infos[0],</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                         infos[1],</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                         *(PolymorphicDowncast&lt;const ActivationDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                                         reasonIfUnsupported);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a>:</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a48177e22e47448adb3d83e145dadf735">IsAdditionSupported</a>(infos[0], infos[1], infos[2], reasonIfUnsupported);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">LayerType::ArgMinMax</a>:</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0f4841f89f21fd794786b4c03c2425fd">IsArgMinMaxSupported</a>(infos[0],</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                        infos[1],</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                        *(PolymorphicDowncast&lt;const ArgMinMaxDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                        reasonIfUnsupported);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">LayerType::BatchNormalization</a>:</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a67c970dd054b991e14369de523ca3a5a">IsBatchNormalizationSupported</a>(infos[0],</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                                 infos[1],</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                                 infos[2],</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                                 infos[3],</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                                 infos[4],</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                                 infos[5],</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                                 *(PolymorphicDowncast&lt;const BatchNormalizationDescriptor*&gt;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                                     (&amp;descriptor)),</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                                 reasonIfUnsupported);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">LayerType::BatchToSpaceNd</a>:</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#adc5695cc25f4055c7ed54bdc8604a098">IsBatchToSpaceNdSupported</a>(infos[0],</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                             infos[1],</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                                             *(PolymorphicDowncast&lt;const BatchToSpaceNdDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                             reasonIfUnsupported);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c">LayerType::Cast</a>:</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ae18f598a589683c3094a7bb41dcd3a3e">IsCastSupported</a>(infos[0], infos[1], reasonIfUnsupported);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd">LayerType::ChannelShuffle</a>:</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a6f1cae30d95bbd28dbac2a570c26c5f7">IsChannelShuffleSupported</a>(infos[0],</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                             infos[1],</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                             *(PolymorphicDowncast&lt;const ChannelShuffleDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                             reasonIfUnsupported);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">LayerType::Comparison</a>:</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a7c52726a684dd76258c61af124012537">IsComparisonSupported</a>(infos[0],</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                                         infos[1],</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                         infos[2],</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                         *(PolymorphicDowncast&lt;const ComparisonDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                         reasonIfUnsupported);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">LayerType::Concat</a>:</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            std::vector&lt;const TensorInfo*&gt; inputInfos;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; (infos.size() - 1); i++)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                inputInfos.push_back(&amp;infos[i]);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            }</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a1542179a03961e3635bb5bef993c8e0e">IsConcatSupported</a>(inputInfos,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                     infos[infos.size() - 1],</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                     *(PolymorphicDowncast&lt;const OriginsDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                     <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        }</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">LayerType::Constant</a>:</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">IsConstantSupported</a>(infos[0], reasonIfUnsupported);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2ba4c46787312a2467153f40c542851a">LayerType::ConvertBf16ToFp32</a>:</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ad330b6e7dcf25410ea878af0557f2197">IsConvertBf16ToFp32Supported</a>(infos[0], infos[1], reasonIfUnsupported);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">LayerType::ConvertFp16ToFp32</a>:</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">IsConvertFp16ToFp32Supported</a>(infos[0], infos[1], reasonIfUnsupported);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6512859957de2cf2a5fe4dccb07bd9da">LayerType::ConvertFp32ToBf16</a>:</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0947498c6cc747db6219a22132a1b89a">IsConvertFp32ToBf16Supported</a>(infos[0], infos[1], reasonIfUnsupported);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">LayerType::ConvertFp32ToFp16</a>:</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">IsConvertFp32ToFp16Supported</a>(infos[0], infos[1], reasonIfUnsupported);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">LayerType::Convolution2d</a>:</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        {</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="keywordflow">if</span> (infos.size() != 4)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Invalid number of TransposeConvolution2d TensorInfos. &quot;</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                               <span class="stringliteral">&quot;TensorInfos should be of format: {input, output, weights, biases}.&quot;</span>);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            }</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            <span class="keyword">auto</span> desc = *(PolymorphicDowncast&lt;const Convolution2dDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>));</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="keywordflow">if</span> (infos[3] == <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>())</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">IsConvolution2dSupported</a>(infos[0],</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                                infos[1],</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                                desc,</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                                infos[2],</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                                <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                                reasonIfUnsupported);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">IsConvolution2dSupported</a>(infos[0],</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                                infos[1],</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                                desc,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                                infos[2],</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                                infos[3],</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                                reasonIfUnsupported);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953">LayerType::Convolution3d</a>:</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        {</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="keywordflow">if</span> (infos.size() != 4)</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            {</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Invalid number of Convolution3d TensorInfos. &quot;</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                               <span class="stringliteral">&quot;TensorInfos should be of format: {input, output, weights, biases}.&quot;</span>);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            }</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <span class="keyword">auto</span> desc = *(PolymorphicDowncast&lt;const Convolution3dDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>));</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <span class="keywordflow">if</span> (infos[3] == <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>())</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a052f289a5b4e48bb2b50c732753e2cfa">IsConvolution3dSupported</a>(infos[0],</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                                                infos[1],</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                                                desc,</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                                                infos[2],</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                                <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                                reasonIfUnsupported);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            }</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a052f289a5b4e48bb2b50c732753e2cfa">IsConvolution3dSupported</a>(infos[0],</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                                infos[1],</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                                desc,</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                                infos[2],</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                                infos[3],</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                                                reasonIfUnsupported);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">LayerType::DepthToSpace</a>:</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a128fb9890897e08251a3f621e570cd23">IsDepthToSpaceSupported</a>(infos[0],</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                           infos[1],</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                           *(PolymorphicDowncast&lt;const DepthToSpaceDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                                           reasonIfUnsupported);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">LayerType::DepthwiseConvolution2d</a>:</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        {</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keywordflow">if</span> (infos.size() != 4)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Invalid number of DepthwiseConvolution2d TensorInfos. &quot;</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                               <span class="stringliteral">&quot;TensorInfos should be of format: {input, output, weights, biases}.&quot;</span>);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            }</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="keyword">auto</span> desc = *(PolymorphicDowncast&lt;const DepthwiseConvolution2dDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>));</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            <span class="keywordflow">if</span> (infos[3] == <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>())</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            {</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">IsDepthwiseConvolutionSupported</a>(infos[0],</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                                       infos[1],</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                                       desc,</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                                       infos[2],</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                                       <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                                       reasonIfUnsupported);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            }</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            {</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">IsDepthwiseConvolutionSupported</a>(infos[0],</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                                       infos[1],</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                                       desc,</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                                       infos[2],</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                                       infos[3],</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                                       reasonIfUnsupported);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        }</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">LayerType::Dequantize</a>:</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">IsDequantizeSupported</a>(infos[0], infos[1], reasonIfUnsupported);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">LayerType::DetectionPostProcess</a>:</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keyword">auto</span> desc = *(PolymorphicDowncast&lt;const DetectionPostProcessDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>));</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml#a50af275d7755a5bb1be69736d7e4b02f">LayerSupportBase::IsDetectionPostProcessSupported</a>(infos[0],</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                                                     infos[1],</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                                                     infos[2],</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                                                                     infos[3],</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                                                                     infos[4],</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                                                                     infos[5],</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                                                     infos[6],</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                                                     desc,</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                                                                     reasonIfUnsupported);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">LayerType::Division</a>:</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a08f55136b1f0907e7083d70d719f697f">IsDivisionSupported</a>(infos[0], infos[1], infos[2], reasonIfUnsupported);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">LayerType::ElementwiseUnary</a>:</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a61c5b4e5dc224ef0c876e43353b34030">IsElementwiseUnarySupported</a>(infos[0],</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                                               infos[1],</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                                               *(PolymorphicDowncast&lt;const ElementwiseUnaryDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                                               reasonIfUnsupported);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed">LayerType::Fill</a>:</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#acc5d9a4c8f29984de3bbdca87684f317">IsFillSupported</a>(infos[0],</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                                   infos[1],</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                                   *(PolymorphicDowncast&lt;const FillDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                                   reasonIfUnsupported);</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">LayerType::Floor</a>:</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">IsFloorSupported</a>(infos[0], infos[1], reasonIfUnsupported);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">LayerType::FullyConnected</a>:</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">IsFullyConnectedSupported</a>(infos[0],</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                                             infos[1],</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                             infos[2],</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                                             infos[3],</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                             *(PolymorphicDowncast&lt;const FullyConnectedDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                             reasonIfUnsupported);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">LayerType::Gather</a>:</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a5e8fbdda1125eb5e22f14eacbe9fb351">IsGatherSupported</a>(infos[0],</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                                     infos[1],</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                                     infos[2],</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                                     *(PolymorphicDowncast&lt;const GatherDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                     reasonIfUnsupported);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3028cc42e40f9a1f4f8b35556d9715a4">LayerType::GatherNd</a>:</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a8b5ce3703be9c0f93b1b6eac5dcea602">IsGatherNdSupported</a>(infos[0],</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                       infos[1],</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                                       infos[2],</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                                       reasonIfUnsupported);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a>:</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">IsInputSupported</a>(infos[0], reasonIfUnsupported);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">LayerType::InstanceNormalization</a>:</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0813546a09bf2caba6794014d1960624">IsInstanceNormalizationSupported</a>(infos[0],</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                                    infos[1],</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                                                    *(PolymorphicDowncast&lt;const InstanceNormalizationDescriptor*&gt;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                                        (&amp;descriptor)),</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                                    reasonIfUnsupported);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">LayerType::L2Normalization</a>:</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#aca4acda7ab553edfda828658d8f3882b">IsL2NormalizationSupported</a>(infos[0],</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                              infos[1],</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                              *(PolymorphicDowncast&lt;const L2NormalizationDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                              reasonIfUnsupported);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30">LayerType::LogicalBinary</a>:</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a772790c60d70814e30b5bec70fd98776">IsLogicalBinarySupported</a>(infos[0],</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                            infos[1],</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                                            infos[2],</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                                            *(PolymorphicDowncast&lt;const LogicalBinaryDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                                            reasonIfUnsupported);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">LayerType::LogSoftmax</a>:</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#aa0380b797cb9932fb03067dbe2cdecfb">IsLogSoftmaxSupported</a>(infos[0],</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                                         infos[1],</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                                         *(PolymorphicDowncast&lt;const LogSoftmaxDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                                         reasonIfUnsupported);</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">LayerType::Lstm</a>:</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a862535721737220f62a49f14ff494dd5">IsLstmSupported</a>(infos[0],</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                                   infos[1],</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                                   infos[2],</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                   infos[3],</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                   infos[4],</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                                   infos[5],</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                   infos[6],</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                   *(PolymorphicDowncast&lt;const LstmDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                   lstmParamsInfo.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>(),</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                   <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a46f3ea056caa3126b91f3f70beea068c">LayerType::Map</a>:</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">LayerType::Maximum</a>:</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#afef9436c86b37b973471f2ae546ac00a">IsMaximumSupported</a>(infos[0], infos[1], infos[2], reasonIfUnsupported);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0a3d6c9ac08ada31c184094bbc67afe00d">LayerType::Mean</a>:</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">IsMeanSupported</a>(infos[0],</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                   infos[1],</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                                   *(PolymorphicDowncast&lt;const MeanDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                   reasonIfUnsupported);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">LayerType::MemCopy</a>:</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml#a9d25fabf725313fda40a41400155bafe">LayerSupportBase::IsMemCopySupported</a>(infos[0], infos[1], reasonIfUnsupported);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">LayerType::MemImport</a>:</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml#a334181d8098b943d03ccd820753ace75">LayerSupportBase::IsMemImportSupported</a>(infos[0], infos[1], reasonIfUnsupported);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00">LayerType::Merge</a>:</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml#aa9bbc383cac59d6f02d2ef7d2cc0076f">LayerSupportBase::IsMergeSupported</a>(infos[0],</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                                                      infos[1],</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                                                      infos[2],</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                                                      reasonIfUnsupported);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">LayerType::Minimum</a>:</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a3d0eafb3de560b3482f857b56b2b2116">IsMinimumSupported</a>(infos[0], infos[1], infos[2], reasonIfUnsupported);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">LayerType::Multiplication</a>:</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a421e1f3865d99d52613003048342c49a">IsMultiplicationSupported</a>(infos[0], infos[1], infos[2], reasonIfUnsupported);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">LayerType::Normalization</a>:</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">IsNormalizationSupported</a>(infos[0],</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                            infos[1],</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                                            *(PolymorphicDowncast&lt;const NormalizationDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                                            reasonIfUnsupported);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a>:</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">IsOutputSupported</a>(infos[0], reasonIfUnsupported);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">LayerType::Pad</a>:</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0534291adf9f3436ba331552eba29a43">IsPadSupported</a>(infos[0],</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                                  infos[1],</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                                  *(PolymorphicDowncast&lt;const PadDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                                  reasonIfUnsupported);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">LayerType::Permute</a>:</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a9d553495d9a94fa55588ae159d8bda30">IsPermuteSupported</a>(infos[0],</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                      infos[1],</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                      *(PolymorphicDowncast&lt;const PermuteDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                      reasonIfUnsupported);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">LayerType::Pooling2d</a>:</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">IsPooling2dSupported</a>(infos[0],</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                                        infos[1],</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                                        *(PolymorphicDowncast&lt;const Pooling2dDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                                        reasonIfUnsupported);</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c">LayerType::Pooling3d</a>:</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a5aec1c6fb4f73909a10f72f45815d2cb">IsPooling3dSupported</a>(infos[0],</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                                        infos[1],</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                        *(PolymorphicDowncast&lt;const Pooling3dDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                                        reasonIfUnsupported);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">LayerType::Prelu</a>:</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a4b36dcedd5edbd5142b3548967aadc2f">IsPreluSupported</a>(infos[0], infos[1], infos[2], reasonIfUnsupported);</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">LayerType::QLstm</a>:</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#adf54bcad228c0ac21f6735d31460cf31">IsQLstmSupported</a>(infos[0],</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                                    infos[1],</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                                    infos[2],</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                                    infos[3],</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                                    infos[4],</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                                    infos[5],</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                                    *(PolymorphicDowncast&lt;const QLstmDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                    lstmParamsInfo.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>(),</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                                    <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">LayerType::Quantize</a>:</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ad2c7be6b84b04444e514f52f593b3df7">IsQuantizeSupported</a>(infos[0], infos[1], reasonIfUnsupported);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3">LayerType::QuantizedLstm</a>:</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a281eb6ce87b6ca147e681dd3f6483a87">IsQuantizedLstmSupported</a>(infos[0],</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                                            infos[1],</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                                            infos[2],</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                                            infos[3],</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                                            infos[4],</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                                            quantizedLstmParamsInfo.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>(),</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                                            <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3">LayerType::Rank</a>:</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">LayerType::Reshape</a>:</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">IsReshapeSupported</a>(infos[0],</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                                      infos[1],</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                                      *(PolymorphicDowncast&lt;const ReshapeDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                                      reasonIfUnsupported);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">LayerType::Resize</a>:</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">IsResizeSupported</a>(infos[0],</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                                     infos[1],</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                                     *(PolymorphicDowncast&lt;const ResizeDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                                     reasonIfUnsupported);</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">LayerType::Reduce</a>:</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a917c126e64314263b8b5f7bca455ddfb">IsReduceSupported</a>(infos[0],</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                                     infos[1],</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                                     *(PolymorphicDowncast&lt;const ReduceDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                                     reasonIfUnsupported);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">LayerType::Shape</a>:</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_layer_support_base.xhtml#a3c6816950ad290155bde03b7fb31e160">LayerSupportBase::IsShapeSupported</a>(infos[0],</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                                                      infos[1],</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                                                      reasonIfUnsupported);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">LayerType::Slice</a>:</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">IsSliceSupported</a>(infos[0],</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                                    infos[1],</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                                    *(PolymorphicDowncast&lt;const SliceDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                                    reasonIfUnsupported);</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">LayerType::Softmax</a>:</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a8385cf8227907904a6a86fac318fc099">IsSoftmaxSupported</a>(infos[0],</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                                      infos[1],</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                                      *(PolymorphicDowncast&lt;const SoftmaxDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                                      reasonIfUnsupported);</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">LayerType::SpaceToBatchNd</a>:</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a3adfc31e079a970e028e537ec05fabf5">IsSpaceToBatchNdSupported</a>(infos[0],</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                                             infos[1],</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                                             *(PolymorphicDowncast&lt;const SpaceToBatchNdDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                                             reasonIfUnsupported);</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">LayerType::SpaceToDepth</a>:</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">IsSpaceToDepthSupported</a>(infos[0],</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                                           infos[1],</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                                           *(PolymorphicDowncast&lt;const SpaceToDepthDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                                           reasonIfUnsupported);</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">LayerType::Splitter</a>:</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        {</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            std::vector&lt;TensorInfo&gt; outputInfos;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            <span class="keywordflow">for</span> (uint32_t i = 1; i &lt; infos.size(); i++)</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            {</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                outputInfos.push_back(infos[i]);</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            }</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#aa746e752ce8874669ea549f8e50896da">IsSplitterSupported</a>(infos[0],</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                                       {outputInfos.begin(), outputInfos.end()},</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                                       *(PolymorphicDowncast&lt;const ViewsDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        }</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">LayerType::Stack</a>:</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        {</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            std::vector&lt;const TensorInfo*&gt; inputInfos;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;            <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; infos.size() - 1; i++)</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;            {</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                inputInfos.push_back(&amp;infos[i]);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;            }</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">IsStackSupported</a>(inputInfos,</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                                    infos[infos.size() - 1],</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                                    *(PolymorphicDowncast&lt;const StackDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>)),</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                                    <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        }</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">LayerType::StridedSlice</a>:</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ac054cb25099005eac854afb1511340f0">IsStridedSliceSupported</a>(infos[0],</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                           infos[1],</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                                           *(PolymorphicDowncast&lt;const StridedSliceDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                                           reasonIfUnsupported);</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">LayerType::Subtraction</a>:</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">IsSubtractionSupported</a>(infos[0], infos[1], infos[2], reasonIfUnsupported);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">LayerType::Transpose</a>:</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0189645f33641b280877a1b2f6ba9fee">IsTransposeSupported</a>(infos[0],</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                                        infos[1],</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                                        *(PolymorphicDowncast&lt;const TransposeDescriptor*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                                        reasonIfUnsupported);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">LayerType::TransposeConvolution2d</a>:</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        {</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;            <span class="keywordflow">if</span> (infos.size() != 4)</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;            {</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">InvalidArgumentException</a>(<span class="stringliteral">&quot;Invalid number of TransposeConvolution2d TensorInfos. &quot;</span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                                               <span class="stringliteral">&quot;TensorInfos should be of format: {input, output, weights, biases}.&quot;</span>);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;            }</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            <span class="keyword">auto</span> desc = *(PolymorphicDowncast&lt;const TransposeConvolution2dDescriptor*&gt;(&amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>));</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            <span class="keywordflow">if</span> (infos[3] == <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>())</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            {</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51">IsTransposeConvolution2dSupported</a>(infos[0],</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                                                         infos[1],</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                                                         desc,</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                                                         infos[2],</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                                                         <a class="code" href="structarmnn_1_1_empty_optional.xhtml">EmptyOptional</a>(),</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                                                         reasonIfUnsupported);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            }</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;            {</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51">IsTransposeConvolution2dSupported</a>(infos[0],</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                                                         infos[1],</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                                                         desc,</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                                                         infos[2],</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                                                         infos[3],</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                                                         reasonIfUnsupported);</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            }</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        }</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">LayerType::UnidirectionalSequenceLstm</a>:</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a6a650fac74b0c69ea0672b1e4c0706a2">IsUnidirectionalSequenceLstmSupported</a>(infos[0],</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                                                         infos[1],</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                                                         infos[2],</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                                                         infos[3],</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                                                         infos[4],</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                                                         infos[5],</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                                                         *(<a class="code" href="namespacearmnn.xhtml#aa4e89c644c511e255f6a7ecbd5d14686">PolymorphicDowncast</a>&lt;<span class="keyword">const</span></div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                                                            <a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">UnidirectionalSequenceLstmDescriptor</a>*&gt;(&amp;descriptor)),</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                                                         lstmParamsInfo.<a class="code" href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">value</a>(),</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                                                         <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">reasonIfUnsupported</a>);</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a48180ddd584de21589006d56a86d3410">LayerType::Unmap</a>:</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;            <span class="comment">// layers not supported in neon by default:</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            <span class="comment">// debug, fakequantization, precompiled,</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            <span class="comment">// standin, switch</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    }</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;}</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">  592</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">NeonLayerSupport::IsActivationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_activation_descriptor.xhtml">ActivationDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                                             <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a46495807633a01d826851e1cb498f071">NeonActivationWorkloadValidate</a>,</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                                   input,</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                                   output,</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                                   descriptor);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;}</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;</div><div class="line"><a name="l00605"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a48177e22e47448adb3d83e145dadf735">  605</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a48177e22e47448adb3d83e145dadf735">NeonLayerSupport::IsAdditionSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a1b03e82a1a53b686aedea3734b2fb957">NeonAdditionWorkloadValidate</a>,</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                                   input0,</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                                   input1,</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                                   output,</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;}</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div><div class="line"><a name="l00618"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a0f4841f89f21fd794786b4c03c2425fd">  618</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0f4841f89f21fd794786b4c03c2425fd">NeonLayerSupport::IsArgMinMaxSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_arg_min_max_descriptor.xhtml">ArgMinMaxDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                                            <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a61d1f39297fec6e3062e4047dc5f236e">NeonArgMinMaxWorkloadValidate</a>,</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                                   input,</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                                   output,</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                                   descriptor);</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;}</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00630"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a67c970dd054b991e14369de523ca3a5a">  630</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a67c970dd054b991e14369de523ca3a5a">NeonLayerSupport::IsBatchNormalizationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">mean</a>,</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">var</a>,</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">beta</a>,</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">gamma</a>,</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_normalization_descriptor.xhtml">BatchNormalizationDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                                                     <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ac1be1c9a317b23b5684c83af59fb2c96">NeonBatchNormalizationValidate</a>,</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                                   input,</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                                   output,</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                                   mean,</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                                   var,</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                                   beta,</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                                   gamma,</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                                   descriptor,</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;}</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#adc5695cc25f4055c7ed54bdc8604a098">  651</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#adc5695cc25f4055c7ed54bdc8604a098">NeonLayerSupport::IsBatchToSpaceNdSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">BatchToSpaceNdDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                                                 <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aad5f7f0fcd2dbb0aad7016ff984e7cc6">NeonBatchToSpaceNdWorkloadValidate</a>,</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                                   input,</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                                   output,</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                                   descriptor);</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;}</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;</div><div class="line"><a name="l00663"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#ae18f598a589683c3094a7bb41dcd3a3e">  663</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ae18f598a589683c3094a7bb41dcd3a3e">NeonLayerSupport::IsCastSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                                       <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a3ab69cec1cab301e096a2830f65a36ec">NeonCastValidate</a>,</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                                   input,</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                                   output);</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;}</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a6f1cae30d95bbd28dbac2a570c26c5f7">  673</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a6f1cae30d95bbd28dbac2a570c26c5f7">NeonLayerSupport::IsChannelShuffleSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">ChannelShuffleDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                                                 <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a2ee21869ffad00d6344afffb0a9baba1">NeonChannelShuffleValidate</a>,</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                                   input,</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                                   output,</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                                   descriptor);</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;}</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;</div><div class="line"><a name="l00685"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a7c52726a684dd76258c61af124012537">  685</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a7c52726a684dd76258c61af124012537">NeonLayerSupport::IsComparisonSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_comparison_descriptor.xhtml">ComparisonDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                                             <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae412e8e64d6a6dde3ace908b59c29c06">NeonComparisonWorkloadValidate</a>,</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                                   input0,</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                                   input1,</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                                   output,</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                                   descriptor);</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;}</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;</div><div class="line"><a name="l00700"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a1542179a03961e3635bb5bef993c8e0e">  700</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a1542179a03961e3635bb5bef993c8e0e">NeonLayerSupport::IsConcatSupported</a>(<span class="keyword">const</span> std::vector&lt;const TensorInfo*&gt; inputs,</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_origins_descriptor.xhtml">OriginsDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                                         <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">GetNumDimensions</a>() &lt;= descriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a379929e3b277f1ef94f3ce645870589d">GetConcatAxis</a>())</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    {</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(reasonIfUnsupported, <span class="stringliteral">&quot;Neon Concat: Concat axis &gt; Number of dimensions.&quot;</span>);</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    }</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> concatInnerAxis = (descriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">GetNumDimensions</a>() - descriptor.<a class="code" href="structarmnn_1_1_origins_descriptor.xhtml#a379929e3b277f1ef94f3ce645870589d">GetConcatAxis</a>()) - 1;</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keywordflow">if</span>(concatInnerAxis &lt; 3) <span class="comment">// Width, height, or channels</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    {</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8a219633e750d6daffcef3b641fa11f3">NeonConcatWorkloadValidate</a>,</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                                       reasonIfUnsupported,</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                                       inputs,</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                                       output,</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                                       descriptor);</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    }</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (concatInnerAxis == 3)</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    {</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; input : inputs)</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        {</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;            <span class="keywordflow">if</span> (input &amp;&amp; !output.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a22f377fc4e10dc1773a3f979061e85f1">IsTypeSpaceMatch</a>(*input)) <span class="comment">// Cannot use sub-tensors if the types are not same space</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            {</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(reasonIfUnsupported, <span class="stringliteral">&quot;Neon Concat: Types and quantization parameters must match.&quot;</span>);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;            }</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;        }</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>; <span class="comment">// Sub-tensors support concat along batch</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    }</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <span class="keywordflow">else</span> <span class="comment">// &gt; 4 dimensions not supported.</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    {</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(reasonIfUnsupported, <span class="stringliteral">&quot;Neon Concat: Maximum of 4 dimensions supported.&quot;</span>);</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    }</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;}</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;</div><div class="line"><a name="l00739"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">  739</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">NeonLayerSupport::IsConstantSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#afb681fd9b8afe0b236d51b6c868ae660">NeonConstantWorkloadValidate</a>,</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                                   output);</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;}</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;</div><div class="line"><a name="l00747"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#ad330b6e7dcf25410ea878af0557f2197">  747</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ad330b6e7dcf25410ea878af0557f2197">NeonLayerSupport::IsConvertBf16ToFp32Supported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                                                    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(input);</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(output);</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(reasonIfUnsupported);</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;}</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;</div><div class="line"><a name="l00757"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">  757</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">NeonLayerSupport::IsConvertFp16ToFp32Supported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                                                    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(input);</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(output);</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(reasonIfUnsupported);</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;}</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;</div><div class="line"><a name="l00767"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a0947498c6cc747db6219a22132a1b89a">  767</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0947498c6cc747db6219a22132a1b89a">NeonLayerSupport::IsConvertFp32ToBf16Supported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                                                    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(input);</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(output);</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(reasonIfUnsupported);</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;}</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;</div><div class="line"><a name="l00777"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">  777</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">NeonLayerSupport::IsConvertFp32ToFp16Supported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                                                    <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                                                    <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(input);</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(output);</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(reasonIfUnsupported);</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;}</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">  787</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">NeonLayerSupport::IsConvolution2dSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution2d_descriptor.xhtml">Convolution2dDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                                                <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTENEON_ENABLED)</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr)</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    {</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        <span class="keywordflow">if</span> (m_ModelContextPtr.get() != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        {</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;            <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_neon_backend_model_context.xhtml">NeonBackendModelContext</a>*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;            <span class="keywordflow">if</span> (modelOptions)</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            {</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                isFastMathEnabled = modelOptions-&gt;<a class="code" href="classarmnn_1_1_neon_backend_model_context.xhtml#abfe9aa4fa74aca0f9a925752bbbb0f79">IsFastMathEnabled</a>();</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;            }</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        }</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    }</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a45691b0c4a46c239b4986cfed95de13b">NeonConvolution2dWorkloadValidate</a>,</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                                   input,</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                                   output,</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                                   descriptor,</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                                   weights,</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                                   biases,</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;                                   isFastMathEnabled,</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;}</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div><div class="line"><a name="l00820"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a052f289a5b4e48bb2b50c732753e2cfa">  820</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a052f289a5b4e48bb2b50c732753e2cfa">NeonLayerSupport::IsConvolution3dSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_convolution3d_descriptor.xhtml">Convolution3dDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                                                <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    <span class="keywordtype">bool</span> isFastMathEnabled = <span class="keyword">false</span>;</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTENEON_ENABLED)</span></div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <span class="keywordflow">if</span> (m_ModelContextPtr)</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    {</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        <span class="keywordflow">if</span> (m_ModelContextPtr.get() != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        {</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;            <span class="keyword">auto</span> modelOptions = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classarmnn_1_1_neon_backend_model_context.xhtml">NeonBackendModelContext</a>*<span class="keyword">&gt;</span>(m_ModelContextPtr.get());</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;            <span class="keywordflow">if</span> (modelOptions)</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;            {</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;                isFastMathEnabled = modelOptions-&gt;<a class="code" href="classarmnn_1_1_neon_backend_model_context.xhtml#abfe9aa4fa74aca0f9a925752bbbb0f79">IsFastMathEnabled</a>();</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;            }</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;        }</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    }</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#acbb4d7b86eb01bb437230e1586b9aeb4">NeonConvolution3dWorkloadValidate</a>,</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                                   input,</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;                                   output,</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;                                   descriptor,</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;                                   weights,</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;                                   biases,</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;                                   isFastMathEnabled,</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;}</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;</div><div class="line"><a name="l00853"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a128fb9890897e08251a3f621e570cd23">  853</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a128fb9890897e08251a3f621e570cd23">NeonLayerSupport::IsDepthToSpaceSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">DepthToSpaceDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;                                               <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a116d88067bf98ce9858ab73e68f605f9">NeonDepthToSpaceWorkloadValidate</a>,</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                                   input,</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                                   output,</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;                                   descriptor);</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;}</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;</div><div class="line"><a name="l00865"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">  865</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">NeonLayerSupport::IsDepthwiseConvolutionSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;                                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;                                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;                                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;                                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;                                                       <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a63d684b26fb838b22123490d780bce08">NeonDepthwiseConvolutionWorkloadValidate</a>,</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                                   input,</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                                   output,</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                                   descriptor,</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                                   weights,</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                                   biases,</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;}</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;</div><div class="line"><a name="l00882"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">  882</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">NeonLayerSupport::IsDequantizeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                                             <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#acefede7cc57c71ea4cfe1c888bb413e0">NeonDequantizeWorkloadValidate</a>,</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;                                   input,</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;                                   output);</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;}</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;</div><div class="line"><a name="l00892"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a16c8cd49a7fa487b904b5c9cc83673e7">  892</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a16c8cd49a7fa487b904b5c9cc83673e7">NeonLayerSupport::IsDilatedDepthwiseConvolutionSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                                                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                                                              <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">DepthwiseConvolution2dDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;                                                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;                                                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;                                                              <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a63d684b26fb838b22123490d780bce08">NeonDepthwiseConvolutionWorkloadValidate</a>,</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;                                   input,</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;                                   output,</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;                                   descriptor,</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;                                   weights,</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;                                   biases,</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;}</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;</div><div class="line"><a name="l00909"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a61c5b4e5dc224ef0c876e43353b34030">  909</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a61c5b4e5dc224ef0c876e43353b34030">NeonLayerSupport::IsElementwiseUnarySupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;                                                   <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">ElementwiseUnaryDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;                                                   <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    <span class="keywordflow">switch</span>(descriptor.<a class="code" href="structarmnn_1_1_elementwise_unary_descriptor.xhtml#afe768be66897eb3d73284424e3239b23">m_Operation</a>)</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    {</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">UnaryOperation::Abs</a>:</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#afc773aec6f845adc0cc547ce475dfe3f">NeonAbsWorkloadValidate</a>,</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;                                           input,</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;                                           output);</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">UnaryOperation::Exp</a>:</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aec5669eb9285cbca1ee6c7e1dd7bcf6a">NeonExpWorkloadValidate</a>,</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;                                           input,</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;                                           output);</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">UnaryOperation::LogicalNot</a>:</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#af4f8e11ae5715973420a82d841dfa676">NeonLogicalNotWorkloadValidate</a>,</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;                                           input,</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;                                           output);</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;       <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">UnaryOperation::Log</a>:</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ad1991a3499a991b1fdd71d918f793f13">NeonLogWorkloadValidate</a>,</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                                           input,</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                                           output);</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">UnaryOperation::Neg</a>:</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7f955750d00cdcae6038f07cc73686ea">NeonNegWorkloadValidate</a>,</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                                           input,</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;                                           output);</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">UnaryOperation::Rsqrt</a>:</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aa7d1b5e38aa8cb731519ff12e2a73350">NeonRsqrtWorkloadValidate</a>,</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                                           input,</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                                           output);</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">UnaryOperation::Sin</a>:</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#af873a38f5251d348f37f0e94a2adc400">NeonSinWorkloadValidate</a>,</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;                                           input,</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;                                           output);</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054">UnaryOperation::Sqrt</a>:</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a5fadc539a1a3c35c4a6138bf6e970e4c">NeonSqrtWorkloadValidate</a>,</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                                           input,</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;                                           output);</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    }</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;}</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;</div><div class="line"><a name="l00961"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#acc5d9a4c8f29984de3bbdca87684f317">  961</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#acc5d9a4c8f29984de3bbdca87684f317">NeonLayerSupport::IsFillSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fill_descriptor.xhtml">FillDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                                       <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(input);</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(output);</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    <span class="keywordflow">return</span> IsNeonBackendSupported(reasonIfUnsupported);</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;}</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;</div><div class="line"><a name="l00973"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">  973</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">NeonLayerSupport::IsFloorSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;                                        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(output);</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    <span class="keywordflow">return</span> IsNeonBackendSupported(reasonIfUnsupported) &amp;&amp;</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;           <a class="code" href="namespacearmnn.xhtml#af6dbe371ec651a8e0063624fdf32afc0">IsSupportedForDataTypeGeneric</a>(reasonIfUnsupported,</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;                                         input.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>(),</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;                                         &amp;FalseFuncF16&lt;&gt;,</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                                         &amp;TrueFunc&lt;&gt;,</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                                         &amp;FalseFuncU8&lt;&gt;,</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                                         &amp;FalseFuncI32&lt;&gt;,</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;                                         &amp;FalseFuncU8&lt;&gt;);</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;}</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;</div><div class="line"><a name="l00988"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">  988</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">NeonLayerSupport::IsFullyConnectedSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_fully_connected_descriptor.xhtml">FullyConnectedDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;                                                 <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae455144d3472c502b636697f4775400c">NeonFullyConnectedWorkloadValidate</a>,</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;                                   input,</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;                                   output,</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;                                   weights,</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;                                   biases,</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;                                   descriptor,</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;}</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;</div><div class="line"><a name="l01005"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a5e8fbdda1125eb5e22f14eacbe9fb351"> 1005</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a5e8fbdda1125eb5e22f14eacbe9fb351">NeonLayerSupport::IsGatherSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_gather_descriptor.xhtml">GatherDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;                                         <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a6c354904637149b84767275e6f725741">NeonGatherWorkloadValidate</a>,</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;                                   input0,</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;                                   input1,</div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;                                   output,</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;                                   descriptor);</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;}</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;</div><div class="line"><a name="l01019"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a8b5ce3703be9c0f93b1b6eac5dcea602"> 1019</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a8b5ce3703be9c0f93b1b6eac5dcea602">NeonLayerSupport::IsGatherNdSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;                                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aec41b8c86e61ce02a07b8215bf8bc073">NeonGatherNdWorkloadValidate</a>,</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;                                   input0,</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;                                   input1,</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;                                   output);</div><div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;}</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;</div><div class="line"><a name="l01031"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5"> 1031</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">NeonLayerSupport::IsInputSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;                                        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;    <span class="keywordflow">return</span> IsNeonBackendSupported(reasonIfUnsupported, input);</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;}</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;</div><div class="line"><a name="l01037"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a0813546a09bf2caba6794014d1960624"> 1037</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0813546a09bf2caba6794014d1960624">NeonLayerSupport::IsInstanceNormalizationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;                                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;                                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_instance_normalization_descriptor.xhtml">InstanceNormalizationDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;                                                        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aea722abe239545030f4c6fe4e083816f">NeonInstanceNormalizationWorkloadValidate</a>,</div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;                                   input,</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;                                   output,</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;                                   descriptor);</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;}</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;</div><div class="line"><a name="l01049"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#aca4acda7ab553edfda828658d8f3882b"> 1049</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#aca4acda7ab553edfda828658d8f3882b">NeonLayerSupport::IsL2NormalizationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;                                                  <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_l2_normalization_descriptor.xhtml">L2NormalizationDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;                                                  <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae838df3960d2b5d18d73ed2a07aee917">NeonL2NormalizationWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;}</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;</div><div class="line"><a name="l01057"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a772790c60d70814e30b5bec70fd98776"> 1057</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a772790c60d70814e30b5bec70fd98776">NeonLayerSupport::IsLogicalBinarySupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_logical_binary_descriptor.xhtml">LogicalBinaryDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;                                                <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;    <span class="keywordflow">switch</span>(descriptor.<a class="code" href="structarmnn_1_1_logical_binary_descriptor.xhtml#a32c95d929d2e2e0fa7fc1a3a25865eb0">m_Operation</a>)</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;    {</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">LogicalBinaryOperation::LogicalAnd</a>:</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a7832b675e7efeb1315b31067e46ce705">NeonLogicalAndWorkloadValidate</a>,</div><div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;                                           input0,</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;                                           input1,</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                                           output);</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">LogicalBinaryOperation::LogicalOr</a>:</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;            <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a2de04fd10d0a2419e0a05f12741017dc">NeonLogicalOrWorkloadValidate</a>,</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;                                           reasonIfUnsupported,</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;                                           input0,</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;                                           input1,</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;                                           output);</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;    }</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;}</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;</div><div class="line"><a name="l01082"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#aa0380b797cb9932fb03067dbe2cdecfb"> 1082</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#aa0380b797cb9932fb03067dbe2cdecfb">NeonLayerSupport::IsLogSoftmaxSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">LogSoftmaxDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;                                             <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ac57d1e00cc24022c21aa7ff95eb618ba">NeonLogSoftmaxWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;}</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;</div><div class="line"><a name="l01090"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a862535721737220f62a49f14ff494dd5"> 1090</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a862535721737220f62a49f14ff494dd5">NeonLayerSupport::IsLstmSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>,</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>,</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">scratchBuffer</a>,</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>,</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>,</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">LstmDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>,</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;                                       <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a9e06cc2a2ac8b88fc72972695a17910f">NeonLstmFloatWorkloadValidate</a>,</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;                                   input,</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;                                   outputStateIn,</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;                                   cellStateIn,</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;                                   scratchBuffer,</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;                                   outputStateOut,</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;                                   cellStateOut,</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;                                   output,</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;                                   descriptor,</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;                                   paramsInfo);</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;}</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;</div><div class="line"><a name="l01114"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#afef9436c86b37b973471f2ae546ac00a"> 1114</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#afef9436c86b37b973471f2ae546ac00a">NeonLayerSupport::IsMaximumSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;                                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a8d2ea79addd8ef64be2ca0dad3408f00">NeonMaximumWorkloadValidate</a>,</div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;                                   input0,</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;                                   input1,</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;                                   output);</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;}</div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;</div><div class="line"><a name="l01126"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a"> 1126</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">NeonLayerSupport::IsMeanSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_mean_descriptor.xhtml">MeanDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;                                       <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae74e210a3f716c1f5f32663a8ec66345">NeonMeanWorkloadValidate</a>,</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;                                   input,</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;                                   output,</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;                                   descriptor);</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;}</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;</div><div class="line"><a name="l01138"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a3d0eafb3de560b3482f857b56b2b2116"> 1138</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a3d0eafb3de560b3482f857b56b2b2116">NeonLayerSupport::IsMinimumSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;                                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ab81159ebfa638af1b91fe1e8c5de1955">NeonMinimumWorkloadValidate</a>,</div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;                                   input0,</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;                                   input1,</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;                                   output);</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;}</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;</div><div class="line"><a name="l01150"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a421e1f3865d99d52613003048342c49a"> 1150</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a421e1f3865d99d52613003048342c49a">NeonLayerSupport::IsMultiplicationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;                                                 <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ad512520e809bfed4fbd3db9fbc241263">NeonMultiplicationWorkloadValidate</a>,</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;                                   input0,</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;                                   input1,</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;                                   output,</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;}</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;</div><div class="line"><a name="l01163"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a08f55136b1f0907e7083d70d719f697f"> 1163</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a08f55136b1f0907e7083d70d719f697f">NeonLayerSupport::IsDivisionSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;                                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a65c912bfcf02b3096f36caf21fa175d0">NeonDivisionWorkloadValidate</a>,</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;                                   input0,</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;                                   input1,</div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;                                   output,</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;}</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;</div><div class="line"><a name="l01176"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a994c2065561141bf37fcd2ff7bb4af4d"> 1176</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">NeonLayerSupport::IsNormalizationSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_normalization_descriptor.xhtml">NormalizationDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;                                                <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a2ec6297db90d1d4c258c13d2d72b13d9">NeonNormalizationWorkloadValidate</a>,</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;                                   input,</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;                                   output,</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;                                   descriptor);</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;}</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;</div><div class="line"><a name="l01188"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#aef3244c0ef64c8f2f352d21ce0c06985"> 1188</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">NeonLayerSupport::IsOutputSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;                                         <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    <span class="keywordflow">return</span> IsNeonBackendSupported(reasonIfUnsupported, output);</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;}</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;</div><div class="line"><a name="l01194"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a0534291adf9f3436ba331552eba29a43"> 1194</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0534291adf9f3436ba331552eba29a43">NeonLayerSupport::IsPadSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pad_descriptor.xhtml">PadDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;                                      <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a39209c0c078e83227222eb885317c2c5">NeonPadWorkloadValidate</a>,</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;                                   input,</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;                                   output,</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;                                   descriptor);</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;}</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;</div><div class="line"><a name="l01206"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a9d553495d9a94fa55588ae159d8bda30"> 1206</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a9d553495d9a94fa55588ae159d8bda30">NeonLayerSupport::IsPermuteSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_permute_descriptor.xhtml">PermuteDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;                                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a70650f6b1d3b8511fcdb989ca769cdbb">NeonPermuteWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;}</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;</div><div class="line"><a name="l01214"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#aa955675303d67b1d1fb51fb7f09d8c21"> 1214</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">NeonLayerSupport::IsPooling2dSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pooling2d_descriptor.xhtml">Pooling2dDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;                                            <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a1f07655db8ad7f2738bb0d3d9e2316cc">NeonPooling2dWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;}</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;</div><div class="line"><a name="l01222"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a5aec1c6fb4f73909a10f72f45815d2cb"> 1222</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a5aec1c6fb4f73909a10f72f45815d2cb">NeonLayerSupport::IsPooling3dSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_pooling3d_descriptor.xhtml">Pooling3dDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;                                            <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aa2b7034aa064d5ec7a9d07828edc48bc">NeonPooling3dWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;}</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;</div><div class="line"><a name="l01230"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a4b36dcedd5edbd5142b3548967aadc2f"> 1230</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a4b36dcedd5edbd5142b3548967aadc2f">NeonLayerSupport::IsPreluSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;input,</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">alpha</a>,</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> &amp;<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;                                        <a class="code" href="classarmnn_1_1_optional.xhtml">armnn::Optional&lt;std::string &amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a188adc104b16db3dc23ed2c5ff06cbb8">NeonPreluWorkloadValidate</a>, reasonIfUnsupported, input, alpha, output);</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;}</div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;</div><div class="line"><a name="l01238"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#adf54bcad228c0ac21f6735d31460cf31"> 1238</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#adf54bcad228c0ac21f6735d31460cf31">NeonLayerSupport::IsQLstmSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">previousOutputIn</a>,</div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">previousCellStateIn</a>,</div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>,</div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>,</div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_q_lstm_descriptor.xhtml">QLstmDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>,</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;                                        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    <span class="comment">// Check required here in order to pass IsLayerSupported for datatypes tests</span></div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;    <span class="keywordflow">if</span> (input.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()               == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;        previousOutputIn.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()    == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;        previousCellStateIn.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;        outputStateOut.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()      == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;        cellStateOut.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()        == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;        output.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>()              == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>)</div><div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;    {</div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;        <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a6e6f731864d33c0acd4140c7dfe17b0a">NeonQLstmWorkloadValidate</a>,</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;                                       reasonIfUnsupported,</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;                                       input,</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;                                       previousCellStateIn,</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;                                       previousOutputIn,</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;                                       cellStateOut,</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;                                       outputStateOut,</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;                                       output,</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;                                       descriptor,</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;                                       paramsInfo);</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    }</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;    {</div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    }</div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;}</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;</div><div class="line"><a name="l01273"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#ad2c7be6b84b04444e514f52f593b3df7"> 1273</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ad2c7be6b84b04444e514f52f593b3df7">NeonLayerSupport::IsQuantizeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;                                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a4d1e35c8bbe48e99dd522ac0f75f77d7">NeonQuantizeWorkloadValidate</a>,</div><div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;                                   input,</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;                                   output);</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;}</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;</div><div class="line"><a name="l01283"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a281eb6ce87b6ca147e681dd3f6483a87"> 1283</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a281eb6ce87b6ca147e681dd3f6483a87">NeonLayerSupport::IsQuantizedLstmSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>,</div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>,</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>,</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>,</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;                                                <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">QuantizedLstmInputParamsInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>,</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;                                                <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ae83632e641892ad2de78f316376f6bd0">NeonQuantizedLstmWorkloadValidate</a>,</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;                                   input,</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;                                   cellStateIn,</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;                                   outputStateIn,</div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;                                   cellStateOut,</div><div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;                                   outputStateOut,</div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;                                   paramsInfo);</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;}</div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;</div><div class="line"><a name="l01301"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a917c126e64314263b8b5f7bca455ddfb"> 1301</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a917c126e64314263b8b5f7bca455ddfb">NeonLayerSupport::IsReduceSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reduce_descriptor.xhtml">ReduceDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;                                         <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aceb6d218204c4e0e7b4c968d6266917c">NeonReduceWorkloadValidate</a>,</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;                                   input,</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;                                   output,</div><div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;                                   descriptor);</div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;}</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;</div><div class="line"><a name="l01313"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86"> 1313</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">NeonLayerSupport::IsReshapeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_reshape_descriptor.xhtml">ReshapeDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;                                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a430021076042c8157a926a3bb3a37152">NeonReshapeWorkloadValidate</a>,</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;                                   input,</div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;                                   output);</div><div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;}</div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;</div><div class="line"><a name="l01325"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c"> 1325</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">NeonLayerSupport::IsResizeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_resize_descriptor.xhtml">ResizeDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;                                         <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a552d65f4e0a6c9e7c7796e77590063e9">NeonResizeWorkloadValidate</a>,</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;                                   input,</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;                                   output,</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;                                   descriptor);</div><div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;}</div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;</div><div class="line"><a name="l01337"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63"> 1337</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">NeonLayerSupport::IsSliceSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_slice_descriptor.xhtml">SliceDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;                                        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a0a223c0997e3f7faa373ed55f954252b">NeonSliceWorkloadValidate</a>,</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;                                   input,</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;                                   output,</div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;                                   descriptor);</div><div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;}</div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;</div><div class="line"><a name="l01349"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a8385cf8227907904a6a86fac318fc099"> 1349</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a8385cf8227907904a6a86fac318fc099">NeonLayerSupport::IsSoftmaxSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_softmax_descriptor.xhtml">SoftmaxDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;                                          <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a4077a9771ba9c551f4ce61863f65e798">NeonSoftmaxWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;}</div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;</div><div class="line"><a name="l01357"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a3adfc31e079a970e028e537ec05fabf5"> 1357</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a3adfc31e079a970e028e537ec05fabf5">NeonLayerSupport::IsSpaceToBatchNdSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;                                                 <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">SpaceToBatchNdDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;                                                 <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ab29257da888af2c4971db1344d8a526c">NeonSpaceToBatchNdWorkloadValidate</a>,</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;                                   input,</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;                                   output,</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;                                   descriptor);</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;}</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;</div><div class="line"><a name="l01369"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#ab2af1e7da9490d29e569d271e16b0d5c"> 1369</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">NeonLayerSupport::IsSpaceToDepthSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_space_to_depth_descriptor.xhtml">SpaceToDepthDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;                                               <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#af6d2d40482240def4614deb694933d1e">NeonSpaceToDepthWorkloadValidate</a>,</div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;                                   input,</div><div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;                                   output,</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;                                   descriptor);</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;}</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;</div><div class="line"><a name="l01381"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#aa746e752ce8874669ea549f8e50896da"> 1381</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#aa746e752ce8874669ea549f8e50896da">NeonLayerSupport::IsSplitterSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;                                           <span class="keyword">const</span> std::vector&lt;std::reference_wrapper&lt;TensorInfo&gt;&gt;&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>,</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;                                           <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_views_descriptor.xhtml">ViewsDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;                                           <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;<span class="preprocessor">#if defined(ARMCOMPUTENEON_ENABLED)</span></div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    <span class="comment">// Split along the last dimension, cannot use sub-tensors</span></div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    <span class="comment">// as width and height of the sub-tensors do not match</span></div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;    <span class="comment">// the width and height of the parent tensor</span></div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;    <span class="comment">// in case of input with more than 2D.</span></div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;    std::set&lt;unsigned int&gt; splitAxis = <a class="code" href="namespacearmnn.xhtml#a8cbabc875597b3bed0ccdc0adb289fde">ComputeSplitAxis</a>(descriptor, input.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">GetShape</a>());</div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;    <span class="keywordflow">if</span> (descriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">GetNumDimensions</a>() &gt; 2 &amp;&amp; splitAxis.size() == 1 &amp;&amp;</div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;        *splitAxis.begin() == descriptor.<a class="code" href="structarmnn_1_1_views_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">GetNumDimensions</a>() - 1 )</div><div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;    {</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;        <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#aab5ea316b3decb05430323d847e3a773">NeonSplitterWorkloadValidate</a>,</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;                                       reasonIfUnsupported,</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;                                       input,</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;                                       <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>,</div><div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;                                       *splitAxis.begin());</div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;    }</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">IgnoreUnused</a>(descriptor);</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a> : <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">outputs</a>)</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;    {</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;        <span class="keywordflow">if</span> (!input.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a22f377fc4e10dc1773a3f979061e85f1">IsTypeSpaceMatch</a>(<a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>)) <span class="comment">// Cannot use sub-tensors if the types are not same space</span></div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;        {</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;            <a class="code" href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">SetValueChecked</a>(reasonIfUnsupported, <span class="stringliteral">&quot;Neon Splitter: Types and quantization parameters must match.&quot;</span>);</div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;        }</div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;    }</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;}</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;</div><div class="line"><a name="l01414"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#ab4609f1baf5fcd295951f3c8abdffd90"> 1414</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">NeonLayerSupport::IsStackSupported</a>(<span class="keyword">const</span> std::vector&lt;const TensorInfo*&gt;&amp; inputs,</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_stack_descriptor.xhtml">StackDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;                                        <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a65c83c74bdbd66cdd547d331998952eb">NeonStackWorkloadValidate</a>,</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;                                   inputs,</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;                                   output,</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;                                   descriptor);</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;}</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;</div><div class="line"><a name="l01426"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#ac054cb25099005eac854afb1511340f0"> 1426</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#ac054cb25099005eac854afb1511340f0">NeonLayerSupport::IsStridedSliceSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;                                               <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_strided_slice_descriptor.xhtml">StridedSliceDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;                                               <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#ac71d08bf1257807c112b4d019802acc3">NeonStridedSliceWorkloadValidate</a>,</div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;                                   input,</div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;                                   output,</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;                                   descriptor);</div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;}</div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;</div><div class="line"><a name="l01438"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#af6c947e4d4b25bc49d92d18d4ff26736"> 1438</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">NeonLayerSupport::IsSubtractionSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input0,</div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">input1</a>,</div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;                                              <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#abc968e1323027f9e42cbc7642800d5ce">NeonSubtractionWorkloadValidate</a>,</div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;                                   input0,</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;                                   input1,</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;                                   output,</div><div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;                                   <span class="keyword">nullptr</span>);</div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;}</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;</div><div class="line"><a name="l01451"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51"> 1451</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51">NeonLayerSupport::IsTransposeConvolution2dSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;                                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;                                                         <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">TransposeConvolution2dDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;                                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">weights</a>,</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;                                                         <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;TensorInfo&gt;</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">biases</a>,</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;                                                         <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#abc73c3c9a09f91c22c64d7c166e9be4d">NeonTransposeConvolution2dWorkloadValidate</a>,</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;                                   reasonIfUnsupported,</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;                                   input,</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;                                   output,</div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;                                   descriptor,</div><div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;                                   weights,</div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;                                   biases);</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;}</div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;</div><div class="line"><a name="l01467"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a0189645f33641b280877a1b2f6ba9fee"> 1467</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a0189645f33641b280877a1b2f6ba9fee">NeonLayerSupport::IsTransposeSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;                                            <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_transpose_descriptor.xhtml">TransposeDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;                                            <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;    <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a2b8555526752015115fa7fa00d88542b">NeonTransposeWorkloadValidate</a>, reasonIfUnsupported, input, output, descriptor);</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;}</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;</div><div class="line"><a name="l01475"></a><span class="lineno"><a class="line" href="classarmnn_1_1_neon_layer_support.xhtml#a6a650fac74b0c69ea0672b1e4c0706a2"> 1475</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn_1_1_neon_layer_support.xhtml#a6a650fac74b0c69ea0672b1e4c0706a2">NeonLayerSupport::IsUnidirectionalSequenceLstmSupported</a>(<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; input,</div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">outputStateIn</a>,</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">cellStateIn</a>,</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">outputStateOut</a>,</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">cellStateOut</a>,</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">output</a>,</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_descriptor.xhtml">UnidirectionalSequenceLstmDescriptor</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">descriptor</a>,</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_lstm_input_params_info.xhtml">LstmInputParamsInfo</a>&amp; <a class="code" href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">paramsInfo</a>,</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;                                                             <a class="code" href="classarmnn_1_1_optional.xhtml">Optional&lt;std::string&amp;&gt;</a> reasonIfUnsupported)<span class="keyword"> const</span></div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;    <span class="keywordflow">if</span> (input.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;        outputStateIn.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;        cellStateIn.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;        outputStateOut.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a> &amp;&amp;</div><div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;        cellStateOut.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a> &amp;&amp;</div><div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;        output.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">GetDataType</a>() == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a>)</div><div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;    {</div><div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;        <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a42561b8004ee341ac089d5f1657120db">NeonUnidirectionalSequenceLstmWorkloadValidate</a>,</div><div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;                                       reasonIfUnsupported,</div><div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;                                       input,</div><div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;                                       outputStateIn,</div><div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;                                       cellStateIn,</div><div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;                                       outputStateOut,</div><div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;                                       cellStateOut,</div><div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;                                       output,</div><div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;                                       descriptor,</div><div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;                                       paramsInfo);</div><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;    }</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;    {</div><div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;        <a class="code" href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a>(<a class="code" href="namespacearmnn.xhtml#a963622d85527f420f0b922ef27de4f6b">NeonUnidirectionalSequenceLstmFloatWorkloadValidate</a>,</div><div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;                                       reasonIfUnsupported,</div><div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;                                       input,</div><div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;                                       outputStateIn,</div><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;                                       cellStateIn,</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;                                       outputStateOut,</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;                                       cellStateOut,</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;                                       output,</div><div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;                                       descriptor,</div><div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;                                       paramsInfo);</div><div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    }</div><div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;}</div><div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;</div><div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;} <span class="comment">// namespace armnn</span></div><div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953">armnn::LayerType::Convolution3d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">armnn::LayerType::TransposeConvolution2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">armnn::LayerType::ElementwiseUnary</a></div></div>
<div class="ttc" id="_neon_logical_or_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_logical_or_workload_8hpp.xhtml">NeonLogicalOrWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a6c354904637149b84767275e6f725741"><div class="ttname"><a href="namespacearmnn.xhtml#a6c354904637149b84767275e6f725741">armnn::NeonGatherWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonGatherWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;indices, const TensorInfo &amp;output, const GatherDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_gather_workload_8cpp_source.xhtml#l00013">NeonGatherWorkload.cpp:13</a></div></div>
<div class="ttc" id="_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="_neon_unidirectional_sequence_lstm_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_unidirectional_sequence_lstm_workload_8hpp.xhtml">NeonUnidirectionalSequenceLstmWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7f955750d00cdcae6038f07cc73686ea"><div class="ttname"><a href="namespacearmnn.xhtml#a7f955750d00cdcae6038f07cc73686ea">armnn::NeonNegWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonNegWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_neg_workload_8cpp_source.xhtml#l00017">NeonNegWorkload.cpp:17</a></div></div>
<div class="ttc" id="_neon_q_lstm_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_q_lstm_workload_8hpp.xhtml">NeonQLstmWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a1542179a03961e3635bb5bef993c8e0e"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a1542179a03961e3635bb5bef993c8e0e">armnn::NeonLayerSupport::IsConcatSupported</a></div><div class="ttdeci">bool IsConcatSupported(const std::vector&lt; const TensorInfo *&gt; inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00700">NeonLayerSupport.cpp:700</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_unary_descriptor_xhtml_afe768be66897eb3d73284424e3239b23"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_descriptor.xhtml#afe768be66897eb3d73284424e3239b23">armnn::ElementwiseUnaryDescriptor::m_Operation</a></div><div class="ttdeci">UnaryOperation m_Operation</div><div class="ttdoc">Specifies the elementwiseUnary operation to execute. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00125">Descriptors.hpp:125</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a0e14dafa85cfcd4a6b6b752284b51e63"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a0e14dafa85cfcd4a6b6b752284b51e63">armnn::NeonLayerSupport::IsSliceSupported</a></div><div class="ttdeci">bool IsSliceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SliceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01337">NeonLayerSupport.cpp:1337</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a8385cf8227907904a6a86fac318fc099"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a8385cf8227907904a6a86fac318fc099">armnn::NeonLayerSupport::IsSoftmaxSupported</a></div><div class="ttdeci">bool IsSoftmaxSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01349">NeonLayerSupport.cpp:1349</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">armnn::LayerType::Concat</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_af7ff06bd8115a6a9cc6d41e5c762798e"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#af7ff06bd8115a6a9cc6d41e5c762798e">armnn::NeonLayerSupport::IsConvolution2dSupported</a></div><div class="ttdeci">bool IsConvolution2dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00787">NeonLayerSupport.cpp:787</a></div></div>
<div class="ttc" id="structarmnn_1_1_views_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml">armnn::ViewsDescriptor</a></div><div class="ttdoc">A ViewsDescriptor for the SplitterLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00217">Descriptors.hpp:217</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a22f377fc4e10dc1773a3f979061e85f1"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a22f377fc4e10dc1773a3f979061e85f1">armnn::TensorInfo::IsTypeSpaceMatch</a></div><div class="ttdeci">bool IsTypeSpaceMatch(const TensorInfo &amp;other) const</div><div class="ttdoc">Check that the types are the same and, if quantize, that the quantization parameters are the same...</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00432">Tensor.cpp:432</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a91fb5f44d8b9427dc45443aa9ebfe13e"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a91fb5f44d8b9427dc45443aa9ebfe13e">armnn::NeonLayerSupport::IsConvertFp32ToFp16Supported</a></div><div class="ttdeci">bool IsConvertFp32ToFp16Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00777">NeonLayerSupport.cpp:777</a></div></div>
<div class="ttc" id="_neon_batch_to_space_nd_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_batch_to_space_nd_workload_8hpp.xhtml">NeonBatchToSpaceNdWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_af6d2d40482240def4614deb694933d1e"><div class="ttname"><a href="namespacearmnn.xhtml#af6d2d40482240def4614deb694933d1e">armnn::NeonSpaceToDepthWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSpaceToDepthWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToDepthDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_space_to_depth_workload_8cpp_source.xhtml#l00019">NeonSpaceToDepthWorkload.cpp:19</a></div></div>
<div class="ttc" id="_neon_layer_support_8hpp_xhtml"><div class="ttname"><a href="_neon_layer_support_8hpp.xhtml">NeonLayerSupport.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aab5ea316b3decb05430323d847e3a773"><div class="ttname"><a href="namespacearmnn.xhtml#aab5ea316b3decb05430323d847e3a773">armnn::NeonSplitterWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSplitterWorkloadValidate(const TensorInfo &amp;input, const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt;&gt; &amp;outputs, unsigned int splitAxis)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_splitter_workload_8cpp_source.xhtml#l00032">NeonSplitterWorkload.cpp:32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">armnn::LayerType::Comparison</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_convolution2d_descriptor.xhtml">armnn::TransposeConvolution2dDescriptor</a></div><div class="ttdoc">A TransposeConvolution2dDescriptor for the TransposeConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01421">Descriptors.hpp:1421</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aca7a974c8803242968a8d6540275264a"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aca7a974c8803242968a8d6540275264a">armnn::ILayerSupport::paramsInfo</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo const LstmDescriptor const LstmInputParamsInfo &amp; paramsInfo</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
<div class="ttc" id="_tensor_8hpp_xhtml"><div class="ttname"><a href="_tensor_8hpp.xhtml">Tensor.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a8b5d0f8a24e9d9238f412260a552acf8"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a8b5d0f8a24e9d9238f412260a552acf8">armnn::TensorInfo::GetShape</a></div><div class="ttdeci">const TensorShape &amp; GetShape() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00191">Tensor.hpp:191</a></div></div>
<div class="ttc" id="_neon_softmax_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_softmax_workload_8hpp.xhtml">NeonSoftmaxWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8ace0be71e33226e4c1db2bcea5959f16b">armnn::UnaryOperation::Log</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_xhtml"><div class="ttname"><a href="classarmnn_1_1_optional.xhtml">armnn::Optional</a></div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00270">Optional.hpp:270</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a4e25e081529b7e99e5e454d916ed83fb"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a4e25e081529b7e99e5e454d916ed83fb">armnn::ILayerSupport::output</a></div><div class="ttdeci">const TensorInfo &amp; output</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="_arm_compute_utils_8hpp_xhtml"><div class="ttname"><a href="_arm_compute_utils_8hpp.xhtml">ArmComputeUtils.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac57d1e00cc24022c21aa7ff95eb618ba"><div class="ttname"><a href="namespacearmnn.xhtml#ac57d1e00cc24022c21aa7ff95eb618ba">armnn::NeonLogSoftmaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLogSoftmaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const LogSoftmaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_log_softmax_workload_8cpp_source.xhtml#l00019">NeonLogSoftmaxWorkload.cpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3"><div class="ttname"><a href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::OutputShapeRounding::Floor</a></div></div>
<div class="ttc" id="structarmnn_1_1_reshape_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reshape_descriptor.xhtml">armnn::ReshapeDescriptor</a></div><div class="ttdoc">A ReshapeDescriptor for the ReshapeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01004">Descriptors.hpp:1004</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a5e8fbdda1125eb5e22f14eacbe9fb351"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a5e8fbdda1125eb5e22f14eacbe9fb351">armnn::NeonLayerSupport::IsGatherSupported</a></div><div class="ttdeci">bool IsGatherSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const GatherDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01005">NeonLayerSupport.cpp:1005</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac1be1c9a317b23b5684c83af59fb2c96"><div class="ttname"><a href="namespacearmnn.xhtml#ac1be1c9a317b23b5684c83af59fb2c96">armnn::NeonBatchNormalizationValidate</a></div><div class="ttdeci">arm_compute::Status NeonBatchNormalizationValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_batch_normalization_workload_8cpp_source.xhtml#l00024">NeonBatchNormalizationWorkload.cpp:24</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_support_base_xhtml_a50af275d7755a5bb1be69736d7e4b02f"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml#a50af275d7755a5bb1be69736d7e4b02f">armnn::LayerSupportBase::IsDetectionPostProcessSupported</a></div><div class="ttdeci">bool IsDetectionPostProcessSupported(const TensorInfo &amp;boxEncodings, const TensorInfo &amp;scores, const TensorInfo &amp;anchors, const TensorInfo &amp;detectionBoxes, const TensorInfo &amp;detectionClasses, const TensorInfo &amp;detectionScores, const TensorInfo &amp;numDetections, const DetectionPostProcessDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8cpp_source.xhtml#l00248">LayerSupportBase.cpp:248</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_support_base_xhtml_a334181d8098b943d03ccd820753ace75"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml#a334181d8098b943d03ccd820753ace75">armnn::LayerSupportBase::IsMemImportSupported</a></div><div class="ttdeci">bool IsMemImportSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8cpp_source.xhtml#l00412">LayerSupportBase.cpp:412</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a16c8cd49a7fa487b904b5c9cc83673e7"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a16c8cd49a7fa487b904b5c9cc83673e7">armnn::NeonLayerSupport::IsDilatedDepthwiseConvolutionSupported</a></div><div class="ttdeci">bool IsDilatedDepthwiseConvolutionSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reason=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00892">NeonLayerSupport.cpp:892</a></div></div>
<div class="ttc" id="_neon_abs_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_abs_workload_8hpp.xhtml">NeonAbsWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a281eb6ce87b6ca147e681dd3f6483a87"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a281eb6ce87b6ca147e681dd3f6483a87">armnn::NeonLayerSupport::IsQuantizedLstmSupported</a></div><div class="ttdeci">bool IsQuantizedLstmSupported(const TensorInfo &amp;input, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;outputStateOut, const QuantizedLstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01283">NeonLayerSupport.cpp:1283</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">armnn::LayerType::BatchToSpaceNd</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="structarmnn_1_1_views_descriptor_xhtml_a78e8266be865fdd92cadd04d6e25ae1f"><div class="ttname"><a href="structarmnn_1_1_views_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">armnn::ViewsDescriptor::GetNumDimensions</a></div><div class="ttdeci">uint32_t GetNumDimensions() const</div><div class="ttdoc">Get the number of dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00300">Descriptors.cpp:300</a></div></div>
<div class="ttc" id="structarmnn_1_1_comparison_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_comparison_descriptor.xhtml">armnn::ComparisonDescriptor</a></div><div class="ttdoc">A ComparisonDescriptor for the ComparisonLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00089">Descriptors.hpp:89</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a128fb9890897e08251a3f621e570cd23"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a128fb9890897e08251a3f621e570cd23">armnn::NeonLayerSupport::IsDepthToSpaceSupported</a></div><div class="ttdeci">bool IsDepthToSpaceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthToSpaceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00853">NeonLayerSupport.cpp:853</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ab5cccb3233f5eff2119e8acc80cec209"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab5cccb3233f5eff2119e8acc80cec209">armnn::ILayerSupport::gamma</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; gamma</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00062">ILayerSupport.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_aca4acda7ab553edfda828658d8f3882b"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#aca4acda7ab553edfda828658d8f3882b">armnn::NeonLayerSupport::IsL2NormalizationSupported</a></div><div class="ttdeci">bool IsL2NormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const L2NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01049">NeonLayerSupport.cpp:1049</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_ae18f598a589683c3094a7bb41dcd3a3e"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#ae18f598a589683c3094a7bb41dcd3a3e">armnn::NeonLayerSupport::IsCastSupported</a></div><div class="ttdeci">bool IsCastSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00663">NeonLayerSupport.cpp:663</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_ac054cb25099005eac854afb1511340f0"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#ac054cb25099005eac854afb1511340f0">armnn::NeonLayerSupport::IsStridedSliceSupported</a></div><div class="ttdeci">bool IsStridedSliceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const StridedSliceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01426">NeonLayerSupport.cpp:1426</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55"><div class="ttname"><a href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea103aa83df42877d5f9baeafdbf620b55">armnn::LogicalBinaryOperation::LogicalAnd</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a311602de6b1e53b4feb3b8a37a433f44"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a311602de6b1e53b4feb3b8a37a433f44">armnn::ILayerSupport::outputs</a></div><div class="ttdeci">const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt; &gt; &amp; outputs</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00500">ILayerSupport.hpp:500</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a0e8bdd2741997b0cdc329cbfcaeebf93"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a0e8bdd2741997b0cdc329cbfcaeebf93">armnn::NeonLayerSupport::NeonLayerSupport</a></div><div class="ttdeci">NeonLayerSupport()</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00148">NeonLayerSupport.cpp:148</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a9365ac4251c03d9d6ec4802886bcbc4e"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a9365ac4251c03d9d6ec4802886bcbc4e">armnn::NeonLayerSupport::IsLayerSupported</a></div><div class="ttdeci">bool IsLayerSupported(const LayerType &amp;type, const std::vector&lt; TensorInfo &gt; &amp;infos, const BaseDescriptor &amp;descriptor, const Optional&lt; LstmInputParamsInfo &gt; &amp;lstmParamsInfo, const Optional&lt; QuantizedLstmInputParamsInfo &gt; &amp;quantizedLstmParamsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00153">NeonLayerSupport.cpp:153</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aec41b8c86e61ce02a07b8215bf8bc073"><div class="ttname"><a href="namespacearmnn.xhtml#aec41b8c86e61ce02a07b8215bf8bc073">armnn::NeonGatherNdWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonGatherNdWorkloadValidate(const TensorInfo &amp;paramsInfo, const TensorInfo &amp;indicesInfo, const TensorInfo &amp;outputInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_gather_nd_workload_8cpp_source.xhtml#l00014">NeonGatherNdWorkload.cpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a0947498c6cc747db6219a22132a1b89a"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a0947498c6cc747db6219a22132a1b89a">armnn::NeonLayerSupport::IsConvertFp32ToBf16Supported</a></div><div class="ttdeci">bool IsConvertFp32ToBf16Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00767">NeonLayerSupport.cpp:767</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaaae77f3ad25595e35b327334d89410054">armnn::ActivationFunction::Sqrt</a></div></div>
<div class="ttc" id="_neon_constant_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_constant_workload_8hpp.xhtml">NeonConstantWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a48177e22e47448adb3d83e145dadf735"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a48177e22e47448adb3d83e145dadf735">armnn::NeonLayerSupport::IsAdditionSupported</a></div><div class="ttdeci">bool IsAdditionSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00605">NeonLayerSupport.cpp:605</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution2d_descriptor.xhtml">armnn::Convolution2dDescriptor</a></div><div class="ttdoc">A Convolution2dDescriptor for the Convolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00499">Descriptors.hpp:499</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">armnn::LayerType::Stack</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a8b5ce3703be9c0f93b1b6eac5dcea602"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a8b5ce3703be9c0f93b1b6eac5dcea602">armnn::NeonLayerSupport::IsGatherNdSupported</a></div><div class="ttdeci">bool IsGatherNdSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported) const</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01019">NeonLayerSupport.cpp:1019</a></div></div>
<div class="ttc" id="_neon_quantized_lstm_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_quantized_lstm_workload_8hpp.xhtml">NeonQuantizedLstmWorkload.hpp</a></div></div>
<div class="ttc" id="_neon_pooling2d_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_pooling2d_workload_8hpp.xhtml">NeonPooling2dWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">armnn::LayerType::StridedSlice</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a63d684b26fb838b22123490d780bce08"><div class="ttname"><a href="namespacearmnn.xhtml#a63d684b26fb838b22123490d780bce08">armnn::NeonDepthwiseConvolutionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonDepthwiseConvolutionWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_depthwise_convolution_workload_8cpp_source.xhtml#l00029">NeonDepthwiseConvolutionWorkload.cpp:29</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::LayerType::Activation</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c">armnn::LayerType::Cast</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div></div>
<div class="ttc" id="_neon_concat_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_concat_workload_8hpp.xhtml">NeonConcatWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a46495807633a01d826851e1cb498f071"><div class="ttname"><a href="namespacearmnn.xhtml#a46495807633a01d826851e1cb498f071">armnn::NeonActivationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonActivationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_activation_workload_8cpp_source.xhtml#l00017">NeonActivationWorkload.cpp:17</a></div></div>
<div class="ttc" id="_neon_exp_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_exp_workload_8hpp.xhtml">NeonExpWorkload.hpp</a></div></div>
<div class="ttc" id="_neon_stack_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_stack_workload_8hpp.xhtml">NeonStackWorkload.hpp</a></div></div>
<div class="ttc" id="_neon_multiplication_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_multiplication_workload_8hpp.xhtml">NeonMultiplicationWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab81159ebfa638af1b91fe1e8c5de1955"><div class="ttname"><a href="namespacearmnn.xhtml#ab81159ebfa638af1b91fe1e8c5de1955">armnn::NeonMinimumWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonMinimumWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdoc">Validate function for validating the inputs and output. </div><div class="ttdef"><b>Definition:</b> <a href="_neon_minimum_workload_8cpp_source.xhtml#l00015">NeonMinimumWorkload.cpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ac71d08bf1257807c112b4d019802acc3"><div class="ttname"><a href="namespacearmnn.xhtml#ac71d08bf1257807c112b4d019802acc3">armnn::NeonStridedSliceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonStridedSliceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const StridedSliceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_strided_slice_workload_8cpp_source.xhtml#l00019">NeonStridedSliceWorkload.cpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ac75f9a02b051716a0cc1cc0818dfe454"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ac75f9a02b051716a0cc1cc0818dfe454">armnn::ILayerSupport::reasonIfUnsupported</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor Optional&lt; std::string &amp; &gt; reasonIfUnsupported</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00043">ILayerSupport.hpp:43</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abc73c3c9a09f91c22c64d7c166e9be4d"><div class="ttname"><a href="namespacearmnn.xhtml#abc73c3c9a09f91c22c64d7c166e9be4d">armnn::NeonTransposeConvolution2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonTransposeConvolution2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_transpose_convolution2d_workload_8cpp_source.xhtml#l00025">NeonTransposeConvolution2dWorkload.cpp:25</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa2b7034aa064d5ec7a9d07828edc48bc"><div class="ttname"><a href="namespacearmnn.xhtml#aa2b7034aa064d5ec7a9d07828edc48bc">armnn::NeonPooling3dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonPooling3dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling3dDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_pooling3d_workload_8cpp_source.xhtml#l00015">NeonPooling3dWorkload.cpp:15</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">armnn::LayerType::ConvertFp32ToFp16</a></div></div>
<div class="ttc" id="_neon_arg_min_max_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_arg_min_max_workload_8hpp.xhtml">NeonArgMinMaxWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a9e06cc2a2ac8b88fc72972695a17910f"><div class="ttname"><a href="namespacearmnn.xhtml#a9e06cc2a2ac8b88fc72972695a17910f">armnn::NeonLstmFloatWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLstmFloatWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;scratchBuffer, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_lstm_float_workload_8cpp_source.xhtml#l00253">NeonLstmFloatWorkload.cpp:253</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6"><div class="ttname"><a href="namespacearmnn.xhtml#a56297e0f7b215eea46c818cb7528d9eaa1e34af023adeb7d5f484f8eb4b9826b6">armnn::ActivationFunction::Abs</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_support_base_xhtml_a3c6816950ad290155bde03b7fb31e160"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml#a3c6816950ad290155bde03b7fb31e160">armnn::LayerSupportBase::IsShapeSupported</a></div><div class="ttdeci">bool IsShapeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8cpp_source.xhtml#l00566">LayerSupportBase.cpp:566</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a6e6f731864d33c0acd4140c7dfe17b0a"><div class="ttname"><a href="namespacearmnn.xhtml#a6e6f731864d33c0acd4140c7dfe17b0a">armnn::NeonQLstmWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonQLstmWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;output, const QLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_q_lstm_workload_8cpp_source.xhtml#l00243">NeonQLstmWorkload.cpp:243</a></div></div>
<div class="ttc" id="_arm_compute_tensor_utils_8hpp_xhtml"><div class="ttname"><a href="_arm_compute_tensor_utils_8hpp.xhtml">ArmComputeTensorUtils.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0a223c0997e3f7faa373ed55f954252b"><div class="ttname"><a href="namespacearmnn.xhtml#a0a223c0997e3f7faa373ed55f954252b">armnn::NeonSliceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSliceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SliceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_slice_workload_8cpp_source.xhtml#l00021">NeonSliceWorkload.cpp:21</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae455144d3472c502b636697f4775400c"><div class="ttname"><a href="namespacearmnn.xhtml#ae455144d3472c502b636697f4775400c">armnn::NeonFullyConnectedWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonFullyConnectedWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, const FullyConnectedDescriptor &amp;descriptor, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_fully_connected_workload_8cpp_source.xhtml#l00024">NeonFullyConnectedWorkload.cpp:24</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">armnn::LayerType::Normalization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">armnn::LayerType::SpaceToBatchNd</a></div></div>
<div class="ttc" id="_neon_depthwise_convolution_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_depthwise_convolution_workload_8hpp.xhtml">NeonDepthwiseConvolutionWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::LayerType::FullyConnected</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a9d02ea768c081d4bdb2b7cab0b3f510d">armnn::DataType::QAsymmS8</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_backend_model_context_xhtml_abfe9aa4fa74aca0f9a925752bbbb0f79"><div class="ttname"><a href="classarmnn_1_1_neon_backend_model_context.xhtml#abfe9aa4fa74aca0f9a925752bbbb0f79">armnn::NeonBackendModelContext::IsFastMathEnabled</a></div><div class="ttdeci">bool IsFastMathEnabled() const</div><div class="ttdef"><b>Definition:</b> <a href="_neon_backend_model_context_8cpp_source.xhtml#l00053">NeonBackendModelContext.cpp:53</a></div></div>
<div class="ttc" id="structarmnn_1_1_logical_binary_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_logical_binary_descriptor.xhtml">armnn::LogicalBinaryDescriptor</a></div><div class="ttdoc">A LogicalBinaryDescriptor for the LogicalBinaryLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01492">Descriptors.hpp:1492</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">armnn::LayerType::Reduce</a></div></div>
<div class="ttc" id="_neon_space_to_batch_nd_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_space_to_batch_nd_workload_8hpp.xhtml">NeonSpaceToBatchNdWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a053c769dcf82d66ef326c86980c02ba7">armnn::DataType::QSymmS16</a></div></div>
<div class="ttc" id="_neon_strided_slice_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_strided_slice_workload_8hpp.xhtml">NeonStridedSliceWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_adf18c4fa8fc9e0cdae1967990aa90fe8"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#adf18c4fa8fc9e0cdae1967990aa90fe8">armnn::NeonLayerSupport::IsConstantSupported</a></div><div class="ttdeci">bool IsConstantSupported(const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00739">NeonLayerSupport.cpp:739</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml"><div class="ttname"><a href="namespacearmnn.xhtml">armnn</a></div><div class="ttdoc">Copyright (c) 2021 ARM Limited and Contributors. </div><div class="ttdef"><b>Definition:</b> <a href="01__00__quick__start_8dox_source.xhtml#l00006">01_00_quick_start.dox:6</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4d1e35c8bbe48e99dd522ac0f75f77d7"><div class="ttname"><a href="namespacearmnn.xhtml#a4d1e35c8bbe48e99dd522ac0f75f77d7">armnn::NeonQuantizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonQuantizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_quantize_workload_8cpp_source.xhtml#l00018">NeonQuantizeWorkload.cpp:18</a></div></div>
<div class="ttc" id="_neon_division_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_division_workload_8hpp.xhtml">NeonDivisionWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a0534291adf9f3436ba331552eba29a43"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a0534291adf9f3436ba331552eba29a43">armnn::NeonLayerSupport::IsPadSupported</a></div><div class="ttdeci">bool IsPadSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const PadDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01194">NeonLayerSupport.cpp:1194</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="_neon_subtraction_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_subtraction_workload_8hpp.xhtml">NeonSubtractionWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a859feaa966620ae0ea88abf5226f2d04"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a859feaa966620ae0ea88abf5226f2d04">armnn::ILayerSupport::descriptor</a></div><div class="ttdeci">const TensorInfo const ActivationDescriptor &amp; descriptor</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00041">ILayerSupport.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::LayerType::Multiplication</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">armnn::LayerType::InstanceNormalization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8cbabc875597b3bed0ccdc0adb289fde"><div class="ttname"><a href="namespacearmnn.xhtml#a8cbabc875597b3bed0ccdc0adb289fde">armnn::ComputeSplitAxis</a></div><div class="ttdeci">std::set&lt; unsigned int &gt; ComputeSplitAxis(const armnn::SplitterDescriptor &amp;desc, const TensorShape &amp;input)</div><div class="ttdef"><b>Definition:</b> <a href="_arm_compute_utils_8hpp_source.xhtml#l00244">ArmComputeUtils.hpp:244</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1b03e82a1a53b686aedea3734b2fb957"><div class="ttname"><a href="namespacearmnn.xhtml#a1b03e82a1a53b686aedea3734b2fb957">armnn::NeonAdditionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonAdditionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_addition_workload_8cpp_source.xhtml#l00020">NeonAdditionWorkload.cpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8afb278fa5defd7e699fcbc930c3e76ccd">armnn::UnaryOperation::Neg</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_depth_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_depth_descriptor.xhtml">armnn::SpaceToDepthDescriptor</a></div><div class="ttdoc">A SpaceToDepthDescriptor for the SpaceToDepthLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01056">Descriptors.hpp:1056</a></div></div>
<div class="ttc" id="classarmnn_1_1_optional_reference_switch_xhtml_a77c7d528ac063d870b8c8426ec81c1c3"><div class="ttname"><a href="classarmnn_1_1_optional_reference_switch.xhtml#a77c7d528ac063d870b8c8426ec81c1c3">armnn::OptionalReferenceSwitch&lt; std::is_reference&lt; T &gt;::value, T &gt;::value</a></div><div class="ttdeci">const T &amp; value() const</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00146">Optional.hpp:146</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad1991a3499a991b1fdd71d918f793f13"><div class="ttname"><a href="namespacearmnn.xhtml#ad1991a3499a991b1fdd71d918f793f13">armnn::NeonLogWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLogWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_log_workload_8cpp_source.xhtml#l00017">NeonLogWorkload.cpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a68be4837f6c739877233e527a996dd00">armnn::LayerType::Merge</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a7832b675e7efeb1315b31067e46ce705"><div class="ttname"><a href="namespacearmnn.xhtml#a7832b675e7efeb1315b31067e46ce705">armnn::NeonLogicalAndWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLogicalAndWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_logical_and_workload_8cpp_source.xhtml#l00018">NeonLogicalAndWorkload.cpp:18</a></div></div>
<div class="ttc" id="_internal_types_8hpp_xhtml"><div class="ttname"><a href="_internal_types_8hpp.xhtml">InternalTypes.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aea722abe239545030f4c6fe4e083816f"><div class="ttname"><a href="namespacearmnn.xhtml#aea722abe239545030f4c6fe4e083816f">armnn::NeonInstanceNormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonInstanceNormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const InstanceNormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_instance_normalization_workload_8cpp_source.xhtml#l00019">NeonInstanceNormalizationWorkload.cpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_aa955675303d67b1d1fb51fb7f09d8c21"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#aa955675303d67b1d1fb51fb7f09d8c21">armnn::NeonLayerSupport::IsPooling2dSupported</a></div><div class="ttdeci">bool IsPooling2dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling2dDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01214">NeonLayerSupport.cpp:1214</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2de04fd10d0a2419e0a05f12741017dc"><div class="ttname"><a href="namespacearmnn.xhtml#a2de04fd10d0a2419e0a05f12741017dc">armnn::NeonLogicalOrWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLogicalOrWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_logical_or_workload_8cpp_source.xhtml#l00018">NeonLogicalOrWorkload.cpp:18</a></div></div>
<div class="ttc" id="structarmnn_1_1_logical_binary_descriptor_xhtml_a32c95d929d2e2e0fa7fc1a3a25865eb0"><div class="ttname"><a href="structarmnn_1_1_logical_binary_descriptor.xhtml#a32c95d929d2e2e0fa7fc1a3a25865eb0">armnn::LogicalBinaryDescriptor::m_Operation</a></div><div class="ttdeci">LogicalBinaryOperation m_Operation</div><div class="ttdoc">Specifies the logical operation to execute. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01508">Descriptors.hpp:1508</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_to_space_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_to_space_nd_descriptor.xhtml">armnn::BatchToSpaceNdDescriptor</a></div><div class="ttdoc">A BatchToSpaceNdDescriptor for the BatchToSpaceNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00840">Descriptors.hpp:840</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_ab3adb3a28736529682e4ff0ea976dcd3"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#ab3adb3a28736529682e4ff0ea976dcd3">armnn::NeonLayerSupport::IsActivationSupported</a></div><div class="ttdeci">bool IsActivationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ActivationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00592">NeonLayerSupport.cpp:592</a></div></div>
<div class="ttc" id="_neon_comparison_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_comparison_workload_8hpp.xhtml">NeonComparisonWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">armnn::LayerType::L2Normalization</a></div></div>
<div class="ttc" id="_backend_registry_8hpp_xhtml"><div class="ttname"><a href="_backend_registry_8hpp.xhtml">BackendRegistry.hpp</a></div></div>
<div class="ttc" id="_neon_activation_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_activation_workload_8hpp.xhtml">NeonActivationWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_backend_model_context_xhtml"><div class="ttname"><a href="classarmnn_1_1_neon_backend_model_context.xhtml">armnn::NeonBackendModelContext</a></div><div class="ttdoc">The NeonBackendModelContext is used to pass in Neon specific backend ModelOptions. </div><div class="ttdef"><b>Definition:</b> <a href="_neon_backend_model_context_8hpp_source.xhtml#l00019">NeonBackendModelContext.hpp:19</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a421e1f3865d99d52613003048342c49a"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a421e1f3865d99d52613003048342c49a">armnn::NeonLayerSupport::IsMultiplicationSupported</a></div><div class="ttdeci">bool IsMultiplicationSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01150">NeonLayerSupport.cpp:1150</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">armnn::LayerType::Prelu</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a5a01de4e3851a25f2df77897fb8f7083"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a5a01de4e3851a25f2df77897fb8f7083">armnn::ILayerSupport::outputStateIn</a></div><div class="ttdeci">const TensorInfo &amp; outputStateIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abc05539fc6e7907f32ef0fb242e3b3b0a3d6c9ac08ada31c184094bbc67afe00d"><div class="ttname"><a href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0a3d6c9ac08ada31c184094bbc67afe00d">armnn::ReduceOperation::Mean</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ad5e0e3fb8a59107ac3366028a057db12"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ad5e0e3fb8a59107ac3366028a057db12">armnn::ILayerSupport::previousCellStateIn</a></div><div class="ttdeci">const TensorInfo const TensorInfo &amp; previousCellStateIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00417">ILayerSupport.hpp:417</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a2a25ebd8c909241e3f7818389b804ecc">armnn::UnaryOperation::LogicalNot</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30">armnn::LayerType::LogicalBinary</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a7c52726a684dd76258c61af124012537"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a7c52726a684dd76258c61af124012537">armnn::NeonLayerSupport::IsComparisonSupported</a></div><div class="ttdeci">bool IsComparisonSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ComparisonDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00685">NeonLayerSupport.cpp:685</a></div></div>
<div class="ttc" id="_neon_resize_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_resize_workload_8hpp.xhtml">NeonResizeWorkload.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_resize_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_resize_descriptor.xhtml">armnn::ResizeDescriptor</a></div><div class="ttdoc">A ResizeBilinearDescriptor for the ResizeBilinearLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00966">Descriptors.hpp:966</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a218e2ebb5babb8323688906b8997eafb"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a218e2ebb5babb8323688906b8997eafb">armnn::ILayerSupport::alpha</a></div><div class="ttdeci">const TensorInfo &amp; alpha</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00404">ILayerSupport.hpp:404</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae838df3960d2b5d18d73ed2a07aee917"><div class="ttname"><a href="namespacearmnn.xhtml#ae838df3960d2b5d18d73ed2a07aee917">armnn::NeonL2NormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonL2NormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const L2NormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_l2_normalization_float_workload_8cpp_source.xhtml#l00019">NeonL2NormalizationFloatWorkload.cpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_afc773aec6f845adc0cc547ce475dfe3f"><div class="ttname"><a href="namespacearmnn.xhtml#afc773aec6f845adc0cc547ce475dfe3f">armnn::NeonAbsWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonAbsWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_abs_workload_8cpp_source.xhtml#l00017">NeonAbsWorkload.cpp:17</a></div></div>
<div class="ttc" id="structarmnn_1_1_base_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_base_descriptor.xhtml">armnn::BaseDescriptor</a></div><div class="ttdoc">Base class for all descriptors. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00022">Descriptors.hpp:22</a></div></div>
<div class="ttc" id="structarmnn_1_1_stack_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_stack_descriptor.xhtml">armnn::StackDescriptor</a></div><div class="ttdoc">A StackDescriptor for the StackLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01232">Descriptors.hpp:1232</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">armnn::LayerType::Quantize</a></div></div>
<div class="ttc" id="_layer_support_common_8hpp_xhtml"><div class="ttname"><a href="_layer_support_common_8hpp.xhtml">LayerSupportCommon.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae83632e641892ad2de78f316376f6bd0"><div class="ttname"><a href="namespacearmnn.xhtml#ae83632e641892ad2de78f316376f6bd0">armnn::NeonQuantizedLstmWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonQuantizedLstmWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;outputStateOut, const QuantizedLstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_quantized_lstm_workload_8cpp_source.xhtml#l00131">NeonQuantizedLstmWorkload.cpp:131</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a0986d137604183312e6d3599578bc6cd">armnn::UnaryOperation::Sin</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a65c83c74bdbd66cdd547d331998952eb"><div class="ttname"><a href="namespacearmnn.xhtml#a65c83c74bdbd66cdd547d331998952eb">armnn::NeonStackWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonStackWorkloadValidate(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const TensorInfo &amp;output, const StackDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_stack_workload_8cpp_source.xhtml#l00027">NeonStackWorkload.cpp:27</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae74e210a3f716c1f5f32663a8ec66345"><div class="ttname"><a href="namespacearmnn.xhtml#ae74e210a3f716c1f5f32663a8ec66345">armnn::NeonMeanWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonMeanWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const MeanDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_mean_workload_8cpp_source.xhtml#l00018">NeonMeanWorkload.cpp:18</a></div></div>
<div class="ttc" id="_neon_neg_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_neg_workload_8hpp.xhtml">NeonNegWorkload.hpp</a></div></div>
<div class="ttc" id="_polymorphic_downcast_8hpp_xhtml"><div class="ttname"><a href="_polymorphic_downcast_8hpp.xhtml">PolymorphicDowncast.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aceb6d218204c4e0e7b4c968d6266917c"><div class="ttname"><a href="namespacearmnn.xhtml#aceb6d218204c4e0e7b4c968d6266917c">armnn::NeonReduceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonReduceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReduceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_reduce_workload_8cpp_source.xhtml#l00019">NeonReduceWorkload.cpp:19</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ab29257da888af2c4971db1344d8a526c"><div class="ttname"><a href="namespacearmnn.xhtml#ab29257da888af2c4971db1344d8a526c">armnn::NeonSpaceToBatchNdWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSpaceToBatchNdWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToBatchNdDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_space_to_batch_nd_workload_8cpp_source.xhtml#l00020">NeonSpaceToBatchNdWorkload.cpp:20</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abc968e1323027f9e42cbc7642800d5ce"><div class="ttname"><a href="namespacearmnn.xhtml#abc968e1323027f9e42cbc7642800d5ce">armnn::NeonSubtractionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSubtractionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_subtraction_workload_8cpp_source.xhtml#l00022">NeonSubtractionWorkload.cpp:22</a></div></div>
<div class="ttc" id="structarmnn_1_1_pad_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pad_descriptor.xhtml">armnn::PadDescriptor</a></div><div class="ttdoc">A PadDescriptor for the PadLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01177">Descriptors.hpp:1177</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">armnn::LayerType::ConvertFp16ToFp32</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_input_params_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_input_params_info.xhtml">armnn::LstmInputParamsInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_lstm_params_8hpp_source.xhtml#l00063">LstmParams.hpp:63</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a772790c60d70814e30b5bec70fd98776"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a772790c60d70814e30b5bec70fd98776">armnn::NeonLayerSupport::IsLogicalBinarySupported</a></div><div class="ttdeci">bool IsLogicalBinarySupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const LogicalBinaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01057">NeonLayerSupport.cpp:1057</a></div></div>
<div class="ttc" id="_neon_backend_model_context_8hpp_xhtml"><div class="ttname"><a href="_neon_backend_model_context_8hpp.xhtml">NeonBackendModelContext.hpp</a></div></div>
<div class="ttc" id="_neon_instance_normalization_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_instance_normalization_workload_8hpp.xhtml">NeonInstanceNormalizationWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::LayerType::Subtraction</a></div></div>
<div class="ttc" id="_neon_quantize_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_quantize_workload_8hpp.xhtml">NeonQuantizeWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a052f289a5b4e48bb2b50c732753e2cfa"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a052f289a5b4e48bb2b50c732753e2cfa">armnn::NeonLayerSupport::IsConvolution3dSupported</a></div><div class="ttdeci">bool IsConvolution3dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution3dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00820">NeonLayerSupport.cpp:820</a></div></div>
<div class="ttc" id="_neon_l2_normalization_float_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_l2_normalization_float_workload_8hpp.xhtml">NeonL2NormalizationFloatWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6512859957de2cf2a5fe4dccb07bd9da"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6512859957de2cf2a5fe4dccb07bd9da">armnn::LayerType::ConvertFp32ToBf16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">armnn::LayerType::DetectionPostProcess</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00048">Types.hpp:48</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_aec04a02758804219fb461623464a8e96"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#aec04a02758804219fb461623464a8e96">armnn::ILayerSupport::cellStateIn</a></div><div class="ttdeci">const TensorInfo const TensorInfo &amp; cellStateIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_acc5d9a4c8f29984de3bbdca87684f317"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#acc5d9a4c8f29984de3bbdca87684f317">armnn::NeonLayerSupport::IsFillSupported</a></div><div class="ttdeci">bool IsFillSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const FillDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00961">NeonLayerSupport.cpp:961</a></div></div>
<div class="ttc" id="structarmnn_1_1_lstm_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_lstm_descriptor.xhtml">armnn::LstmDescriptor</a></div><div class="ttdoc">An LstmDescriptor for the LstmLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01083">Descriptors.hpp:1083</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aec5669eb9285cbca1ee6c7e1dd7bcf6a"><div class="ttname"><a href="namespacearmnn.xhtml#aec5669eb9285cbca1ee6c7e1dd7bcf6a">armnn::NeonExpWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonExpWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_exp_workload_8cpp_source.xhtml#l00017">NeonExpWorkload.cpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a430021076042c8157a926a3bb3a37152"><div class="ttname"><a href="namespacearmnn.xhtml#a430021076042c8157a926a3bb3a37152">armnn::NeonReshapeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonReshapeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_reshape_workload_8cpp_source.xhtml#l00017">NeonReshapeWorkload.cpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_ad29d99ecd719c640ed22dcf5c688c6a5"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#ad29d99ecd719c640ed22dcf5c688c6a5">armnn::NeonLayerSupport::IsInputSupported</a></div><div class="ttdeci">bool IsInputSupported(const TensorInfo &amp;input, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01031">NeonLayerSupport.cpp:1031</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aad5f7f0fcd2dbb0aad7016ff984e7cc6"><div class="ttname"><a href="namespacearmnn.xhtml#aad5f7f0fcd2dbb0aad7016ff984e7cc6">armnn::NeonBatchToSpaceNdWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonBatchToSpaceNdWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const BatchToSpaceNdDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_batch_to_space_nd_workload_8cpp_source.xhtml#l00020">NeonBatchToSpaceNdWorkload.cpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_ab4609f1baf5fcd295951f3c8abdffd90"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#ab4609f1baf5fcd295951f3c8abdffd90">armnn::NeonLayerSupport::IsStackSupported</a></div><div class="ttdeci">bool IsStackSupported(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const TensorInfo &amp;output, const StackDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01414">NeonLayerSupport.cpp:1414</a></div></div>
<div class="ttc" id="structarmnn_1_1_quantized_lstm_input_params_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_quantized_lstm_input_params_info.xhtml">armnn::QuantizedLstmInputParamsInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_quantized_lstm_params_8hpp_source.xhtml#l00119">QuantizedLstmParams.hpp:119</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a4d0238968a7643dbb170547dd22bba54"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a4d0238968a7643dbb170547dd22bba54">armnn::IBackendInternal::IBackendSpecificModelContextPtr</a></div><div class="ttdeci">std::shared_ptr&lt; IBackendModelContext &gt; IBackendSpecificModelContextPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00094">IBackendInternal.hpp:94</a></div></div>
<div class="ttc" id="structarmnn_1_1_l2_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_l2_normalization_descriptor.xhtml">armnn::L2NormalizationDescriptor</a></div><div class="ttdoc">A L2NormalizationDescriptor for the L2NormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00774">Descriptors.hpp:774</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a903053b422754682265fba0c03d94a52"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a903053b422754682265fba0c03d94a52">armnn::ILayerSupport::var</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo &amp; var</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00062">ILayerSupport.hpp:62</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a3d0eafb3de560b3482f857b56b2b2116"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a3d0eafb3de560b3482f857b56b2b2116">armnn::NeonLayerSupport::IsMinimumSupported</a></div><div class="ttdeci">bool IsMinimumSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01138">NeonLayerSupport.cpp:1138</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a4b36dcedd5edbd5142b3548967aadc2f"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a4b36dcedd5edbd5142b3548967aadc2f">armnn::NeonLayerSupport::IsPreluSupported</a></div><div class="ttdeci">bool IsPreluSupported(const TensorInfo &amp;input, const TensorInfo &amp;alpha, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01230">NeonLayerSupport.cpp:1230</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_aef3244c0ef64c8f2f352d21ce0c06985"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#aef3244c0ef64c8f2f352d21ce0c06985">armnn::NeonLayerSupport::IsOutputSupported</a></div><div class="ttdeci">bool IsOutputSupported(const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01188">NeonLayerSupport.cpp:1188</a></div></div>
<div class="ttc" id="_neon_mean_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_mean_workload_8hpp.xhtml">NeonMeanWorkload.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_arg_min_max_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_arg_min_max_descriptor.xhtml">armnn::ArgMinMaxDescriptor</a></div><div class="ttdoc">An ArgMinMaxDescriptor for ArgMinMaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00067">Descriptors.hpp:67</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a0813546a09bf2caba6794014d1960624"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a0813546a09bf2caba6794014d1960624">armnn::NeonLayerSupport::IsInstanceNormalizationSupported</a></div><div class="ttdeci">bool IsInstanceNormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const InstanceNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01037">NeonLayerSupport.cpp:1037</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_aea909c7327109228ef618d459015def3"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#aea909c7327109228ef618d459015def3">armnn::TensorInfo::GetDataType</a></div><div class="ttdeci">DataType GetDataType() const</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00198">Tensor.hpp:198</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml">armnn::OriginsDescriptor</a></div><div class="ttdoc">An OriginsDescriptor for the ConcatLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00174">Descriptors.hpp:174</a></div></div>
<div class="ttc" id="structarmnn_1_1_reduce_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_reduce_descriptor.xhtml">armnn::ReduceDescriptor</a></div><div class="ttdoc">A ReduceDescriptor for the REDUCE operators. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01512">Descriptors.hpp:1512</a></div></div>
<div class="ttc" id="_neon_sqrt_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_sqrt_workload_8hpp.xhtml">NeonSqrtWorkload.hpp</a></div></div>
<div class="ttc" id="_types_8hpp_xhtml"><div class="ttname"><a href="_types_8hpp.xhtml">Types.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_fully_connected_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fully_connected_descriptor.xhtml">armnn::FullyConnectedDescriptor</a></div><div class="ttdoc">A FullyConnectedDescriptor for the FullyConnectedLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00468">Descriptors.hpp:468</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">armnn::LayerType::Gather</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_af4f8e11ae5715973420a82d841dfa676"><div class="ttname"><a href="namespacearmnn.xhtml#af4f8e11ae5715973420a82d841dfa676">armnn::NeonLogicalNotWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonLogicalNotWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_logical_not_workload_8cpp_source.xhtml#l00019">NeonLogicalNotWorkload.cpp:19</a></div></div>
<div class="ttc" id="_neon_logical_not_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_logical_not_workload_8hpp.xhtml">NeonLogicalNotWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">armnn::LayerType::Permute</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">armnn::LayerType::Resize</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a44eb2a514bddb31fe20f9e4f04159c9f"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a44eb2a514bddb31fe20f9e4f04159c9f">armnn::ILayerSupport::outputStateOut</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; outputStateOut</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a994c2065561141bf37fcd2ff7bb4af4d"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a994c2065561141bf37fcd2ff7bb4af4d">armnn::NeonLayerSupport::IsNormalizationSupported</a></div><div class="ttdeci">bool IsNormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const NormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01176">NeonLayerSupport.cpp:1176</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a61c5b4e5dc224ef0c876e43353b34030"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a61c5b4e5dc224ef0c876e43353b34030">armnn::NeonLayerSupport::IsElementwiseUnarySupported</a></div><div class="ttdeci">bool IsElementwiseUnarySupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ElementwiseUnaryDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00909">NeonLayerSupport.cpp:909</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ae1ee2d524d4252bffc0ed67e75882952"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ae1ee2d524d4252bffc0ed67e75882952">armnn::ILayerSupport::cellStateOut</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; cellStateOut</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a3ab69cec1cab301e096a2830f65a36ec"><div class="ttname"><a href="namespacearmnn.xhtml#a3ab69cec1cab301e096a2830f65a36ec">armnn::NeonCastValidate</a></div><div class="ttdeci">arm_compute::Status NeonCastValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_cast_workload_8cpp_source.xhtml#l00019">NeonCastWorkload.cpp:19</a></div></div>
<div class="ttc" id="structarmnn_1_1_gather_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_gather_descriptor.xhtml">armnn::GatherDescriptor</a></div><div class="ttdoc">A GatherDescriptor for the GatherLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00909">Descriptors.hpp:909</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::LayerType::Convolution2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">armnn::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">enumeration </div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00042">Types.hpp:42</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::LayerType::MemCopy</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2ee21869ffad00d6344afffb0a9baba1"><div class="ttname"><a href="namespacearmnn.xhtml#a2ee21869ffad00d6344afffb0a9baba1">armnn::NeonChannelShuffleValidate</a></div><div class="ttdeci">arm_compute::Status NeonChannelShuffleValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ChannelShuffleDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_channel_shuffle_workload_8cpp_source.xhtml#l00017">NeonChannelShuffleWorkload.cpp:17</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">armnn::LayerType::Pad</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ae412e8e64d6a6dde3ace908b59c29c06"><div class="ttname"><a href="namespacearmnn.xhtml#ae412e8e64d6a6dde3ace908b59c29c06">armnn::NeonComparisonWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonComparisonWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ComparisonDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_comparison_workload_8cpp_source.xhtml#l00016">NeonComparisonWorkload.cpp:16</a></div></div>
<div class="ttc" id="_neon_splitter_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_splitter_workload_8hpp.xhtml">NeonSplitterWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a08f55136b1f0907e7083d70d719f697f"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a08f55136b1f0907e7083d70d719f697f">armnn::NeonLayerSupport::IsDivisionSupported</a></div><div class="ttdeci">bool IsDivisionSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01163">NeonLayerSupport.cpp:1163</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">armnn::LayerType::Maximum</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a42561b8004ee341ac089d5f1657120db"><div class="ttname"><a href="namespacearmnn.xhtml#a42561b8004ee341ac089d5f1657120db">armnn::NeonUnidirectionalSequenceLstmWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonUnidirectionalSequenceLstmWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const UnidirectionalSequenceLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_unidirectional_sequence_lstm_workload_8cpp_source.xhtml#l00491">NeonUnidirectionalSequenceLstmWorkload.cpp:491</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a83a99de40f6bffaa36f0333d04690b2a"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a83a99de40f6bffaa36f0333d04690b2a">armnn::ILayerSupport::beta</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo const TensorInfo &amp; beta</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00062">ILayerSupport.hpp:62</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8a219633e750d6daffcef3b641fa11f3"><div class="ttname"><a href="namespacearmnn.xhtml#a8a219633e750d6daffcef3b641fa11f3">armnn::NeonConcatWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonConcatWorkloadValidate(const std::vector&lt; const TensorInfo *&gt; &amp;inputs, const TensorInfo &amp;output, const OriginsDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_concat_workload_8cpp_source.xhtml#l00027">NeonConcatWorkload.cpp:27</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::LayerType::Softmax</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a70650f6b1d3b8511fcdb989ca769cdbb"><div class="ttname"><a href="namespacearmnn.xhtml#a70650f6b1d3b8511fcdb989ca769cdbb">armnn::NeonPermuteWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonPermuteWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const PermuteDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_permute_workload_8cpp_source.xhtml#l00015">NeonPermuteWorkload.cpp:15</a></div></div>
<div class="ttc" id="_neon_reshape_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_reshape_workload_8hpp.xhtml">NeonReshapeWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a53c7593d1aa26207eac5d5814a9d56dc"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a53c7593d1aa26207eac5d5814a9d56dc">armnn::NeonLayerSupport::IsFloorSupported</a></div><div class="ttdeci">bool IsFloorSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00973">NeonLayerSupport.cpp:973</a></div></div>
<div class="ttc" id="_neon_maximum_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_maximum_workload_8hpp.xhtml">NeonMaximumWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">armnn::LayerType::Reshape</a></div></div>
<div class="ttc" id="structarmnn_1_1_q_lstm_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_q_lstm_descriptor.xhtml">armnn::QLstmDescriptor</a></div><div class="ttdoc">A QLstmDescriptor for the QLstmLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01361">Descriptors.hpp:1361</a></div></div>
<div class="ttc" id="_neon_sin_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_sin_workload_8hpp.xhtml">NeonSinWorkload.hpp</a></div></div>
<div class="ttc" id="_neon_batch_normalization_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_batch_normalization_workload_8hpp.xhtml">NeonBatchNormalizationWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_support_base_xhtml_aa9bbc383cac59d6f02d2ef7d2cc0076f"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml#aa9bbc383cac59d6f02d2ef7d2cc0076f">armnn::LayerSupportBase::IsMergeSupported</a></div><div class="ttdeci">bool IsMergeSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8cpp_source.xhtml#l00419">LayerSupportBase.cpp:419</a></div></div>
<div class="ttc" id="_neon_fully_connected_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_fully_connected_workload_8hpp.xhtml">NeonFullyConnectedWorkload.hpp</a></div></div>
<div class="ttc" id="_neon_slice_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_slice_workload_8hpp.xhtml">NeonSliceWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">armnn::LayerType::Pooling2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa4e89c644c511e255f6a7ecbd5d14686"><div class="ttname"><a href="namespacearmnn.xhtml#aa4e89c644c511e255f6a7ecbd5d14686">armnn::PolymorphicDowncast</a></div><div class="ttdeci">DestType PolymorphicDowncast(SourceType *value)</div><div class="ttdoc">Polymorphic downcast for build in pointers only. </div><div class="ttdef"><b>Definition:</b> <a href="_polymorphic_downcast_8hpp_source.xhtml#l00074">PolymorphicDowncast.hpp:74</a></div></div>
<div class="ttc" id="_neon_depth_to_space_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_depth_to_space_workload_8hpp.xhtml">NeonDepthToSpaceWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a45691b0c4a46c239b4986cfed95de13b"><div class="ttname"><a href="namespacearmnn.xhtml#a45691b0c4a46c239b4986cfed95de13b">armnn::NeonConvolution2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonConvolution2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, bool isFastMathEnabled, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_convolution2d_workload_8cpp_source.xhtml#l00024">NeonConvolution2dWorkload.cpp:24</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_aa0380b797cb9932fb03067dbe2cdecfb"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#aa0380b797cb9932fb03067dbe2cdecfb">armnn::NeonLayerSupport::IsLogSoftmaxSupported</a></div><div class="ttdeci">bool IsLogSoftmaxSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const LogSoftmaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01082">NeonLayerSupport.cpp:1082</a></div></div>
<div class="ttc" id="structarmnn_1_1_activation_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_activation_descriptor.xhtml">armnn::ActivationDescriptor</a></div><div class="ttdoc">An ActivationDescriptor for the ActivationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00036">Descriptors.hpp:36</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">armnn::LayerType::Dequantize</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a3d27a3fc6a7df0b68d80cb113aff8b6c"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a3d27a3fc6a7df0b68d80cb113aff8b6c">armnn::NeonLayerSupport::IsResizeSupported</a></div><div class="ttdeci">bool IsResizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01325">NeonLayerSupport.cpp:1325</a></div></div>
<div class="ttc" id="_neon_gather_nd_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_gather_nd_workload_8hpp.xhtml">NeonGatherNdWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c">armnn::LayerType::Pooling3d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a></div></div>
<div class="ttc" id="classarmnn_1_1_layer_support_base_xhtml_a9d25fabf725313fda40a41400155bafe"><div class="ttname"><a href="classarmnn_1_1_layer_support_base.xhtml#a9d25fabf725313fda40a41400155bafe">armnn::LayerSupportBase::IsMemCopySupported</a></div><div class="ttdeci">bool IsMemCopySupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_base_8cpp_source.xhtml#l00405">LayerSupportBase.cpp:405</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a0c69484f19ed650ad48b716719114e51"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a0c69484f19ed650ad48b716719114e51">armnn::NeonLayerSupport::IsTransposeConvolution2dSupported</a></div><div class="ttdeci">bool IsTransposeConvolution2dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01451">NeonLayerSupport.cpp:1451</a></div></div>
<div class="ttc" id="structarmnn_1_1_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_slice_descriptor.xhtml">armnn::SliceDescriptor</a></div><div class="ttdoc">A SliceDescriptor for the SliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01209">Descriptors.hpp:1209</a></div></div>
<div class="ttc" id="structarmnn_1_1_convolution3d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_convolution3d_descriptor.xhtml">armnn::Convolution3dDescriptor</a></div><div class="ttdoc">A Convolution3dDescriptor for the Convolution3dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00553">Descriptors.hpp:553</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_acefede7cc57c71ea4cfe1c888bb413e0"><div class="ttname"><a href="namespacearmnn.xhtml#acefede7cc57c71ea4cfe1c888bb413e0">armnn::NeonDequantizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonDequantizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_dequantize_workload_8cpp_source.xhtml#l00022">NeonDequantizeWorkload.cpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_aa746e752ce8874669ea549f8e50896da"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#aa746e752ce8874669ea549f8e50896da">armnn::NeonLayerSupport::IsSplitterSupported</a></div><div class="ttdeci">bool IsSplitterSupported(const TensorInfo &amp;input, const std::vector&lt; std::reference_wrapper&lt; TensorInfo &gt;&gt; &amp;outputs, const ViewsDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01381">NeonLayerSupport.cpp:1381</a></div></div>
<div class="ttc" id="_neon_logical_and_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_logical_and_workload_8hpp.xhtml">NeonLogicalAndWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd">armnn::LayerType::ChannelShuffle</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a5b09834cc88bb4156e291c37bd2434ff"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a5b09834cc88bb4156e291c37bd2434ff">armnn::ILayerSupport::previousOutputIn</a></div><div class="ttdeci">const TensorInfo &amp; previousOutputIn</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00417">ILayerSupport.hpp:417</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_aa02f01bbcb48c67f5b2efc4132ec5e86"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#aa02f01bbcb48c67f5b2efc4132ec5e86">armnn::NeonLayerSupport::IsReshapeSupported</a></div><div class="ttdeci">bool IsReshapeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReshapeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01313">NeonLayerSupport.cpp:1313</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a65c912bfcf02b3096f36caf21fa175d0"><div class="ttname"><a href="namespacearmnn.xhtml#a65c912bfcf02b3096f36caf21fa175d0">armnn::NeonDivisionWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonDivisionWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_division_workload_8cpp_source.xhtml#l00018">NeonDivisionWorkload.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">armnn::LayerType::SpaceToDepth</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a67c970dd054b991e14369de523ca3a5a"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a67c970dd054b991e14369de523ca3a5a">armnn::NeonLayerSupport::IsBatchNormalizationSupported</a></div><div class="ttdeci">bool IsBatchNormalizationSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;mean, const TensorInfo &amp;var, const TensorInfo &amp;beta, const TensorInfo &amp;gamma, const BatchNormalizationDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00630">NeonLayerSupport.cpp:630</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a48180ddd584de21589006d56a86d3410"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a48180ddd584de21589006d56a86d3410">armnn::LayerType::Unmap</a></div></div>
<div class="ttc" id="_neon_unidirectional_sequence_lstm_float_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_unidirectional_sequence_lstm_float_workload_8hpp.xhtml">NeonUnidirectionalSequenceLstmFloatWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::LayerType::DepthwiseConvolution2d</a></div></div>
<div class="ttc" id="_neon_prelu_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_prelu_workload_8hpp.xhtml">NeonPreluWorkload.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling3d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling3d_descriptor.xhtml">armnn::Pooling3dDescriptor</a></div><div class="ttdoc">A Pooling3dDescriptor for the Pooling3dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00392">Descriptors.hpp:392</a></div></div>
<div class="ttc" id="_neon_minimum_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_minimum_workload_8hpp.xhtml">NeonMinimumWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_acbb4d7b86eb01bb437230e1586b9aeb4"><div class="ttname"><a href="namespacearmnn.xhtml#acbb4d7b86eb01bb437230e1586b9aeb4">armnn::NeonConvolution3dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonConvolution3dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Convolution3dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, bool isFastMathEnabled, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_convolution3d_workload_8cpp_source.xhtml#l00024">NeonConvolution3dWorkload.cpp:24</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a13c7d751e4d37f65a6d40c3c6e50d2b8"><div class="ttname"><a href="namespacearmnn.xhtml#a13c7d751e4d37f65a6d40c3c6e50d2b8">armnn::SetValueChecked</a></div><div class="ttdeci">void SetValueChecked(Optional&lt; T &amp;&gt; optionalRef, V &amp;&amp;val)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_common_8hpp_source.xhtml#l00017">LayerSupportCommon.hpp:17</a></div></div>
<div class="ttc" id="_neon_backend_id_8hpp_xhtml"><div class="ttname"><a href="_neon_backend_id_8hpp.xhtml">NeonBackendId.hpp</a></div></div>
<div class="ttc" id="structarmnn_1_1_space_to_batch_nd_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_space_to_batch_nd_descriptor.xhtml">armnn::SpaceToBatchNdDescriptor</a></div><div class="ttdoc">A SpaceToBatchNdDescriptor for the SpaceToBatchNdLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01024">Descriptors.hpp:1024</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2ec6297db90d1d4c258c13d2d72b13d9"><div class="ttname"><a href="namespacearmnn.xhtml#a2ec6297db90d1d4c258c13d2d72b13d9">armnn::NeonNormalizationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonNormalizationWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const NormalizationDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_normalization_float_workload_8cpp_source.xhtml#l00049">NeonNormalizationFloatWorkload.cpp:49</a></div></div>
<div class="ttc" id="_neon_reduce_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_reduce_workload_8hpp.xhtml">NeonReduceWorkload.hpp</a></div></div>
<div class="ttc" id="_neon_normalization_float_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_normalization_float_workload_8hpp.xhtml">NeonNormalizationFloatWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a963622d85527f420f0b922ef27de4f6b"><div class="ttname"><a href="namespacearmnn.xhtml#a963622d85527f420f0b922ef27de4f6b">armnn::NeonUnidirectionalSequenceLstmFloatWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonUnidirectionalSequenceLstmFloatWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const UnidirectionalSequenceLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_unidirectional_sequence_lstm_float_workload_8cpp_source.xhtml#l00510">NeonUnidirectionalSequenceLstmFloatWorkload.cpp:510</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_ad2c7be6b84b04444e514f52f593b3df7"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#ad2c7be6b84b04444e514f52f593b3df7">armnn::NeonLayerSupport::IsQuantizeSupported</a></div><div class="ttdeci">bool IsQuantizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01273">NeonLayerSupport.cpp:1273</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3">armnn::LayerType::Rank</a></div></div>
<div class="ttc" id="structarmnn_1_1_empty_optional_xhtml"><div class="ttname"><a href="structarmnn_1_1_empty_optional.xhtml">armnn::EmptyOptional</a></div><div class="ttdoc">EmptyOptional is used to initialize the Optional class in case we want to have default value for an O...</div><div class="ttdef"><b>Definition:</b> <a href="_optional_8hpp_source.xhtml#l00032">Optional.hpp:32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::LayerType::MemImport</a></div></div>
<div class="ttc" id="_neon_addition_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_addition_workload_8hpp.xhtml">NeonAdditionWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3028cc42e40f9a1f4f8b35556d9715a4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3028cc42e40f9a1f4f8b35556d9715a4">armnn::LayerType::GatherNd</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_aa7d1b5e38aa8cb731519ff12e2a73350"><div class="ttname"><a href="namespacearmnn.xhtml#aa7d1b5e38aa8cb731519ff12e2a73350">armnn::NeonRsqrtWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonRsqrtWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_rsqrt_workload_8cpp_source.xhtml#l00018">NeonRsqrtWorkload.cpp:18</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">armnn::LayerType::Splitter</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a1efcaf6f02892442fefca09f49ea3d7c"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a1efcaf6f02892442fefca09f49ea3d7c">armnn::NeonLayerSupport::IsConvertFp16ToFp32Supported</a></div><div class="ttdeci">bool IsConvertFp16ToFp32Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00757">NeonLayerSupport.cpp:757</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a39209c0c078e83227222eb885317c2c5"><div class="ttname"><a href="namespacearmnn.xhtml#a39209c0c078e83227222eb885317c2c5">armnn::NeonPadWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonPadWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const PadDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_pad_workload_8cpp_source.xhtml#l00059">NeonPadWorkload.cpp:59</a></div></div>
<div class="ttc" id="structarmnn_1_1_elementwise_unary_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_elementwise_unary_descriptor.xhtml">armnn::ElementwiseUnaryDescriptor</a></div><div class="ttdoc">A ElementwiseUnaryDescriptor for the ElementwiseUnaryLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00109">Descriptors.hpp:109</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a46f3ea056caa3126b91f3f70beea068c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a46f3ea056caa3126b91f3f70beea068c">armnn::LayerType::Map</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_af6c947e4d4b25bc49d92d18d4ff26736"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#af6c947e4d4b25bc49d92d18d4ff26736">armnn::NeonLayerSupport::IsSubtractionSupported</a></div><div class="ttdeci">bool IsSubtractionSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01438">NeonLayerSupport.cpp:1438</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a862535721737220f62a49f14ff494dd5"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a862535721737220f62a49f14ff494dd5">armnn::NeonLayerSupport::IsLstmSupported</a></div><div class="ttdeci">bool IsLstmSupported(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;scratchBuffer, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const LstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01090">NeonLayerSupport.cpp:1090</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">armnn::LayerType::Shape</a></div></div>
<div class="ttc" id="_neon_transpose_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_transpose_workload_8hpp.xhtml">NeonTransposeWorkload.hpp</a></div></div>
<div class="ttc" id="_neon_log_softmax_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_log_softmax_workload_8hpp.xhtml">NeonLogSoftmaxWorkload.hpp</a></div></div>
<div class="ttc" id="_neon_permute_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_permute_workload_8hpp.xhtml">NeonPermuteWorkload.hpp</a></div></div>
<div class="ttc" id="_neon_cast_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_cast_workload_8hpp.xhtml">NeonCastWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a61d1f39297fec6e3062e4047dc5f236e"><div class="ttname"><a href="namespacearmnn.xhtml#a61d1f39297fec6e3062e4047dc5f236e">armnn::NeonArgMinMaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonArgMinMaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ArgMinMaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_arg_min_max_workload_8cpp_source.xhtml#l00031">NeonArgMinMaxWorkload.cpp:31</a></div></div>
<div class="ttc" id="_neon_convolution2d_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_convolution2d_workload_8hpp.xhtml">NeonConvolution2dWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4077a9771ba9c551f4ce61863f65e798"><div class="ttname"><a href="namespacearmnn.xhtml#a4077a9771ba9c551f4ce61863f65e798">armnn::NeonSoftmaxWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSoftmaxWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const SoftmaxDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_softmax_workload_8cpp_source.xhtml#l00019">NeonSoftmaxWorkload.cpp:19</a></div></div>
<div class="ttc" id="_neon_rsqrt_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_rsqrt_workload_8hpp.xhtml">NeonRsqrtWorkload.hpp</a></div></div>
<div class="ttc" id="_exceptions_8hpp_xhtml"><div class="ttname"><a href="_exceptions_8hpp.xhtml">Exceptions.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a3adfc31e079a970e028e537ec05fabf5"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a3adfc31e079a970e028e537ec05fabf5">armnn::NeonLayerSupport::IsSpaceToBatchNdSupported</a></div><div class="ttdeci">bool IsSpaceToBatchNdSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToBatchNdDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01357">NeonLayerSupport.cpp:1357</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2b8555526752015115fa7fa00d88542b"><div class="ttname"><a href="namespacearmnn.xhtml#a2b8555526752015115fa7fa00d88542b">armnn::NeonTransposeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonTransposeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_transpose_workload_8cpp_source.xhtml#l00015">NeonTransposeWorkload.cpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a71cf13fc7f7aeac054919e0c6dcab52e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a71cf13fc7f7aeac054919e0c6dcab52e">armnn::ILayerSupport::biases</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo const Optional&lt; TensorInfo &gt; &amp; biases</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport.hpp:137</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a5aec1c6fb4f73909a10f72f45815d2cb"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a5aec1c6fb4f73909a10f72f45815d2cb">armnn::NeonLayerSupport::IsPooling3dSupported</a></div><div class="ttdeci">bool IsPooling3dSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling3dDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01222">NeonLayerSupport.cpp:1222</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a890a37ff3bfe123414ba7e6f052b49f3">armnn::LayerType::QuantizedLstm</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">armnn::LayerType::ArgMinMax</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml_a78e8266be865fdd92cadd04d6e25ae1f"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml#a78e8266be865fdd92cadd04d6e25ae1f">armnn::OriginsDescriptor::GetNumDimensions</a></div><div class="ttdeci">uint32_t GetNumDimensions() const</div><div class="ttdoc">Get the number of dimensions. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00192">Descriptors.cpp:192</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a5fadc539a1a3c35c4a6138bf6e970e4c"><div class="ttname"><a href="namespacearmnn.xhtml#a5fadc539a1a3c35c4a6138bf6e970e4c">armnn::NeonSqrtWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSqrtWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_sqrt_workload_8cpp_source.xhtml#l00018">NeonSqrtWorkload.cpp:18</a></div></div>
<div class="ttc" id="structarmnn_1_1_mean_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_mean_descriptor.xhtml">armnn::MeanDescriptor</a></div><div class="ttdoc">A MeanDescriptor for the MeanLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01153">Descriptors.hpp:1153</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_adc84390751f227fe03a115b5fa10b0fc"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#adc84390751f227fe03a115b5fa10b0fc">armnn::NeonLayerSupport::IsDepthwiseConvolutionSupported</a></div><div class="ttdeci">bool IsDepthwiseConvolutionSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthwiseConvolution2dDescriptor &amp;descriptor, const TensorInfo &amp;weights, const Optional&lt; TensorInfo &gt; &amp;biases, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00865">NeonLayerSupport.cpp:865</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">armnn::LayerType::Lstm</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a8d2ea79addd8ef64be2ca0dad3408f00"><div class="ttname"><a href="namespacearmnn.xhtml#a8d2ea79addd8ef64be2ca0dad3408f00">armnn::NeonMaximumWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonMaximumWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_maximum_workload_8cpp_source.xhtml#l00014">NeonMaximumWorkload.cpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::LayerType::BatchNormalization</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a0f4841f89f21fd794786b4c03c2425fd"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a0f4841f89f21fd794786b4c03c2425fd">armnn::NeonLayerSupport::IsArgMinMaxSupported</a></div><div class="ttdeci">bool IsArgMinMaxSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ArgMinMaxDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00618">NeonLayerSupport.cpp:618</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_ab2af1e7da9490d29e569d271e16b0d5c"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#ab2af1e7da9490d29e569d271e16b0d5c">armnn::NeonLayerSupport::IsSpaceToDepthSupported</a></div><div class="ttdeci">bool IsSpaceToDepthSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const SpaceToDepthDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01369">NeonLayerSupport.cpp:1369</a></div></div>
<div class="ttc" id="structarmnn_1_1_transpose_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_transpose_descriptor.xhtml">armnn::TransposeDescriptor</a></div><div class="ttdoc">A TransposeDescriptor for the TransposeLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01471">Descriptors.hpp:1471</a></div></div>
<div class="ttc" id="structarmnn_1_1_strided_slice_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_strided_slice_descriptor.xhtml">armnn::StridedSliceDescriptor</a></div><div class="ttdoc">A StridedSliceDescriptor for the StridedSliceLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01284">Descriptors.hpp:1284</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a0189645f33641b280877a1b2f6ba9fee"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a0189645f33641b280877a1b2f6ba9fee">armnn::NeonLayerSupport::IsTransposeSupported</a></div><div class="ttdeci">bool IsTransposeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TransposeDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01467">NeonLayerSupport.cpp:1467</a></div></div>
<div class="ttc" id="_neon_space_to_depth_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_space_to_depth_workload_8hpp.xhtml">NeonSpaceToDepthWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">armnn::LayerType::LogSoftmax</a></div></div>
<div class="ttc" id="_neon_transpose_convolution2d_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_transpose_convolution2d_workload_8hpp.xhtml">NeonTransposeConvolution2dWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_afef9436c86b37b973471f2ae546ac00a"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#afef9436c86b37b973471f2ae546ac00a">armnn::NeonLayerSupport::IsMaximumSupported</a></div><div class="ttdeci">bool IsMaximumSupported(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01114">NeonLayerSupport.cpp:1114</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">armnn::LayerType::DepthToSpace</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247"><div class="ttname"><a href="namespacearmnn.xhtml#a2da4db0140d1a6dc69c9c82e9ef5379ea74ce78827b02c650a20b149765388247">armnn::LogicalBinaryOperation::LogicalOr</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_afb681fd9b8afe0b236d51b6c868ae660"><div class="ttname"><a href="namespacearmnn.xhtml#afb681fd9b8afe0b236d51b6c868ae660">armnn::NeonConstantWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonConstantWorkloadValidate(const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_constant_workload_8cpp_source.xhtml#l00020">NeonConstantWorkload.cpp:20</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_ab82416560ced17268c6ba4443a3aac5e"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#ab82416560ced17268c6ba4443a3aac5e">armnn::ILayerSupport::input1</a></div><div class="ttdeci">const TensorInfo &amp; input1</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00048">ILayerSupport.hpp:48</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::LayerType::Minimum</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_aeaf971dd9dffd6f6bc7e5a1ae6b6af5c"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#aeaf971dd9dffd6f6bc7e5a1ae6b6af5c">armnn::NeonLayerSupport::IsFullyConnectedSupported</a></div><div class="ttdeci">bool IsFullyConnectedSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const TensorInfo &amp;weights, const TensorInfo &amp;biases, const FullyConnectedDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00988">NeonLayerSupport.cpp:988</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_ab268618580d4f53bf5e9b5a47dee3f6a"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#ab268618580d4f53bf5e9b5a47dee3f6a">armnn::NeonLayerSupport::IsMeanSupported</a></div><div class="ttdeci">bool IsMeanSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const MeanDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01126">NeonLayerSupport.cpp:1126</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_adc5695cc25f4055c7ed54bdc8604a098"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#adc5695cc25f4055c7ed54bdc8604a098">armnn::NeonLayerSupport::IsBatchToSpaceNdSupported</a></div><div class="ttdeci">bool IsBatchToSpaceNdSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const BatchToSpaceNdDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00651">NeonLayerSupport.cpp:651</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed">armnn::LayerType::Fill</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a188adc104b16db3dc23ed2c5ff06cbb8"><div class="ttname"><a href="namespacearmnn.xhtml#a188adc104b16db3dc23ed2c5ff06cbb8">armnn::NeonPreluWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonPreluWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;alpha, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_prelu_workload_8cpp_source.xhtml#l00017">NeonPreluWorkload.cpp:17</a></div></div>
<div class="ttc" id="_neon_pad_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_pad_workload_8hpp.xhtml">NeonPadWorkload.hpp</a></div></div>
<div class="ttc" id="_neon_lstm_float_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_lstm_float_workload_8hpp.xhtml">NeonLstmFloatWorkload.hpp</a></div></div>
<div class="ttc" id="_neon_layer_support_8cpp_xhtml_af0383f6bb43d6d5df6f3265367b6ebf9"><div class="ttname"><a href="_neon_layer_support_8cpp.xhtml#af0383f6bb43d6d5df6f3265367b6ebf9">FORWARD_WORKLOAD_VALIDATE_FUNC</a></div><div class="ttdeci">#define FORWARD_WORKLOAD_VALIDATE_FUNC(func, reasonIfUnsupported,...)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00135">NeonLayerSupport.cpp:135</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a116d88067bf98ce9858ab73e68f605f9"><div class="ttname"><a href="namespacearmnn.xhtml#a116d88067bf98ce9858ab73e68f605f9">armnn::NeonDepthToSpaceWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonDepthToSpaceWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const DepthToSpaceDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_depth_to_space_workload_8cpp_source.xhtml#l00019">NeonDepthToSpaceWorkload.cpp:19</a></div></div>
<div class="ttc" id="structarmnn_1_1_pooling2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_pooling2d_descriptor.xhtml">armnn::Pooling2dDescriptor</a></div><div class="ttdoc">A Pooling2dDescriptor for the Pooling2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00332">Descriptors.hpp:332</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8acad39a154bffb61175f674d6eefaf6d0">armnn::UnaryOperation::Exp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a552d65f4e0a6c9e7c7796e77590063e9"><div class="ttname"><a href="namespacearmnn.xhtml#a552d65f4e0a6c9e7c7796e77590063e9">armnn::NeonResizeWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonResizeWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const ResizeDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_resize_workload_8cpp_source.xhtml#l00022">NeonResizeWorkload.cpp:22</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a6a650fac74b0c69ea0672b1e4c0706a2"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a6a650fac74b0c69ea0672b1e4c0706a2">armnn::NeonLayerSupport::IsUnidirectionalSequenceLstmSupported</a></div><div class="ttdeci">bool IsUnidirectionalSequenceLstmSupported(const TensorInfo &amp;input, const TensorInfo &amp;outputStateIn, const TensorInfo &amp;cellStateIn, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const UnidirectionalSequenceLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01475">NeonLayerSupport.cpp:1475</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4"><div class="ttname"><a href="namespacearmnn.xhtml#a1cfaa710db2a54673b21d2ea2da757c8a09bb7f6e2118c85a6a55bd4bf2beeca4">armnn::UnaryOperation::Rsqrt</a></div></div>
<div class="ttc" id="structarmnn_1_1_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_normalization_descriptor.xhtml">armnn::NormalizationDescriptor</a></div><div class="ttdoc">A NormalizationDescriptor for the NormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00734">Descriptors.hpp:734</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">armnn::LayerType::Transpose</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_adf54bcad228c0ac21f6735d31460cf31"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#adf54bcad228c0ac21f6735d31460cf31">armnn::NeonLayerSupport::IsQLstmSupported</a></div><div class="ttdeci">bool IsQLstmSupported(const TensorInfo &amp;input, const TensorInfo &amp;previousOutputIn, const TensorInfo &amp;previousCellStateIn, const TensorInfo &amp;outputStateOut, const TensorInfo &amp;cellStateOut, const TensorInfo &amp;output, const QLstmDescriptor &amp;descriptor, const LstmInputParamsInfo &amp;paramsInfo, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01238">NeonLayerSupport.cpp:1238</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_ad330b6e7dcf25410ea878af0557f2197"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#ad330b6e7dcf25410ea878af0557f2197">armnn::NeonLayerSupport::IsConvertBf16ToFp32Supported</a></div><div class="ttdeci">bool IsConvertBf16ToFp32Supported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00747">NeonLayerSupport.cpp:747</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a4f6f59c4e91c7c37d9a119d615093ed3"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a4f6f59c4e91c7c37d9a119d615093ed3">armnn::ILayerSupport::scratchBuffer</a></div><div class="ttdeci">const TensorInfo const TensorInfo const TensorInfo &amp; scratchBuffer</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00298">ILayerSupport.hpp:298</a></div></div>
<div class="ttc" id="structarmnn_1_1_instance_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_instance_normalization_descriptor.xhtml">armnn::InstanceNormalizationDescriptor</a></div><div class="ttdoc">An InstanceNormalizationDescriptor for InstanceNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00812">Descriptors.hpp:812</a></div></div>
<div class="ttc" id="structarmnn_1_1_origins_descriptor_xhtml_a379929e3b277f1ef94f3ce645870589d"><div class="ttname"><a href="structarmnn_1_1_origins_descriptor.xhtml#a379929e3b277f1ef94f3ce645870589d">armnn::OriginsDescriptor::GetConcatAxis</a></div><div class="ttdeci">unsigned int GetConcatAxis() const</div><div class="ttdoc">Get the concatenation axis value. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8cpp_source.xhtml#l00162">Descriptors.cpp:162</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255"><div class="ttname"><a href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::PaddingMode::Constant</a></div></div>
<div class="ttc" id="structarmnn_1_1_channel_shuffle_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_channel_shuffle_descriptor.xhtml">armnn::ChannelShuffleDescriptor</a></div><div class="ttdoc">A ChannelShuffleDescriptor for the ChannelShuffle operator. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l01536">Descriptors.hpp:1536</a></div></div>
<div class="ttc" id="_neon_dequantize_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_dequantize_workload_8hpp.xhtml">NeonDequantizeWorkload.hpp</a></div></div>
<div class="ttc" id="_neon_log_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_log_workload_8hpp.xhtml">NeonLogWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">armnn::LayerType::Slice</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::LayerType::Division</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_af6dbe371ec651a8e0063624fdf32afc0"><div class="ttname"><a href="namespacearmnn.xhtml#af6dbe371ec651a8e0063624fdf32afc0">armnn::IsSupportedForDataTypeGeneric</a></div><div class="ttdeci">bool IsSupportedForDataTypeGeneric(Optional&lt; std::string &amp;&gt; reasonIfUnsupported, DataType dataType, Float16Func float16FuncPtr, Float32Func float32FuncPtr, Uint8Func uint8FuncPtr, Int32Func int32FuncPtr, BooleanFunc booleanFuncPtr, Params &amp;&amp;... params)</div><div class="ttdef"><b>Definition:</b> <a href="_layer_support_common_8hpp_source.xhtml#l00027">LayerSupportCommon.hpp:27</a></div></div>
<div class="ttc" id="structarmnn_1_1_softmax_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_softmax_descriptor.xhtml">armnn::SoftmaxDescriptor</a></div><div class="ttdoc">A SoftmaxDescriptor for the SoftmaxLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00150">Descriptors.hpp:150</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a917c126e64314263b8b5f7bca455ddfb"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a917c126e64314263b8b5f7bca455ddfb">armnn::NeonLayerSupport::IsReduceSupported</a></div><div class="ttdeci">bool IsReduceSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ReduceDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01301">NeonLayerSupport.cpp:1301</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a631f893f44415523924016ed3f54a661"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a631f893f44415523924016ed3f54a661">armnn::ILayerSupport::weights</a></div><div class="ttdeci">const TensorInfo const Convolution2dDescriptor const TensorInfo &amp; weights</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00137">ILayerSupport.hpp:137</a></div></div>
<div class="ttc" id="_neon_pooling3d_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_pooling3d_workload_8hpp.xhtml">NeonPooling3dWorkload.hpp</a></div></div>
<div class="ttc" id="_neon_channel_shuffle_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_channel_shuffle_workload_8hpp.xhtml">NeonChannelShuffleWorkload.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a1f07655db8ad7f2738bb0d3d9e2316cc"><div class="ttname"><a href="namespacearmnn.xhtml#a1f07655db8ad7f2738bb0d3d9e2316cc">armnn::NeonPooling2dWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonPooling2dWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output, const Pooling2dDescriptor &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_pooling2d_workload_8cpp_source.xhtml#l00022">NeonPooling2dWorkload.cpp:22</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_af873a38f5251d348f37f0e94a2adc400"><div class="ttname"><a href="namespacearmnn.xhtml#af873a38f5251d348f37f0e94a2adc400">armnn::NeonSinWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonSinWorkloadValidate(const TensorInfo &amp;input, const TensorInfo &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_sin_workload_8cpp_source.xhtml#l00017">NeonSinWorkload.cpp:17</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a2e89c72cf60df7c2d2d7e5d98822b672"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a2e89c72cf60df7c2d2d7e5d98822b672">armnn::NeonLayerSupport::IsDequantizeSupported</a></div><div class="ttdeci">bool IsDequantizeSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00882">NeonLayerSupport.cpp:882</a></div></div>
<div class="ttc" id="structarmnn_1_1_depthwise_convolution2d_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_depthwise_convolution2d_descriptor.xhtml">armnn::DepthwiseConvolution2dDescriptor</a></div><div class="ttdoc">A DepthwiseConvolution2dDescriptor for the DepthwiseConvolution2dLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00624">Descriptors.hpp:624</a></div></div>
<div class="ttc" id="structarmnn_1_1_fill_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_fill_descriptor.xhtml">armnn::FillDescriptor</a></div><div class="ttdoc">A FillDescriptor for the FillLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00890">Descriptors.hpp:890</a></div></div>
<div class="ttc" id="structarmnn_1_1_batch_normalization_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_batch_normalization_descriptor.xhtml">armnn::BatchNormalizationDescriptor</a></div><div class="ttdoc">A BatchNormalizationDescriptor for the BatchNormalizationLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00793">Descriptors.hpp:793</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2ba4c46787312a2467153f40c542851a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2ba4c46787312a2467153f40c542851a">armnn::LayerType::ConvertBf16ToFp32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad512520e809bfed4fbd3db9fbc241263"><div class="ttname"><a href="namespacearmnn.xhtml#ad512520e809bfed4fbd3db9fbc241263">armnn::NeonMultiplicationWorkloadValidate</a></div><div class="ttdeci">arm_compute::Status NeonMultiplicationWorkloadValidate(const TensorInfo &amp;input0, const TensorInfo &amp;input1, const TensorInfo &amp;output, const ActivationDescriptor *activationDescriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_neon_multiplication_workload_8cpp_source.xhtml#l00019">NeonMultiplicationWorkload.cpp:19</a></div></div>
<div class="ttc" id="_neon_gather_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_gather_workload_8hpp.xhtml">NeonGatherWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a6f1cae30d95bbd28dbac2a570c26c5f7"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a6f1cae30d95bbd28dbac2a570c26c5f7">armnn::NeonLayerSupport::IsChannelShuffleSupported</a></div><div class="ttdeci">bool IsChannelShuffleSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const ChannelShuffleDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l00673">NeonLayerSupport.cpp:673</a></div></div>
<div class="ttc" id="_neon_convolution3d_workload_8hpp_xhtml"><div class="ttname"><a href="_neon_convolution3d_workload_8hpp.xhtml">NeonConvolution3dWorkload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_layer_support_xhtml_a895a8451e0799b95d65caf7ffe0a32d7"><div class="ttname"><a href="classarmnn_1_1_i_layer_support.xhtml#a895a8451e0799b95d65caf7ffe0a32d7">armnn::ILayerSupport::mean</a></div><div class="ttdeci">const TensorInfo const TensorInfo &amp; mean</div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_support_8hpp_source.xhtml#l00062">ILayerSupport.hpp:62</a></div></div>
<div class="ttc" id="structarmnn_1_1_permute_descriptor_xhtml"><div class="ttname"><a href="structarmnn_1_1_permute_descriptor.xhtml">armnn::PermuteDescriptor</a></div><div class="ttdoc">A PermuteDescriptor for the PermuteLayer. </div><div class="ttdef"><b>Definition:</b> <a href="_descriptors_8hpp_source.xhtml#l00129">Descriptors.hpp:129</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">armnn::LayerType</a></div><div class="ttdeci">LayerType</div><div class="ttdoc">When adding a new layer, adapt also the LastLayer enum value in the enum class LayerType below...</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00467">Types.hpp:467</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">armnn::LayerType::QLstm</a></div></div>
<div class="ttc" id="classarmnn_1_1_neon_layer_support_xhtml_a9d553495d9a94fa55588ae159d8bda30"><div class="ttname"><a href="classarmnn_1_1_neon_layer_support.xhtml#a9d553495d9a94fa55588ae159d8bda30">armnn::NeonLayerSupport::IsPermuteSupported</a></div><div class="ttdeci">bool IsPermuteSupported(const TensorInfo &amp;input, const TensorInfo &amp;output, const PermuteDescriptor &amp;descriptor, Optional&lt; std::string &amp;&gt; reasonIfUnsupported=EmptyOptional()) const override</div><div class="ttdef"><b>Definition:</b> <a href="_neon_layer_support_8cpp_source.xhtml#l01206">NeonLayerSupport.cpp:1206</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_d86eb514662c7c08e168285f21d00ea1.xhtml">neon</a></li><li class="navelem"><a class="el" href="_neon_layer_support_8cpp.xhtml">NeonLayerSupport.cpp</a></li>
    <li class="footer">Generated on Tue May 24 2022 11:27:13 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
