<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: tests/DeepSpeechV1InferenceTest.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_deep_speech_v1_inference_test_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DeepSpeechV1InferenceTest.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_deep_speech_v1_inference_test_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_inference_test_8hpp.xhtml">InferenceTest.hpp</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_deep_speech_v1_database_8hpp.xhtml">DeepSpeechV1Database.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_assert_8hpp.xhtml">armnn/utility/Assert.hpp</a>&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_ignore_unused_8hpp.xhtml">armnn/utility/IgnoreUnused.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_floating_point_comparison_8hpp.xhtml">armnnUtils/FloatingPointComparison.hpp</a>&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> Model&gt;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">class </span>DeepSpeechV1TestCase : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml">InferenceModelTestCase</a>&lt;Model&gt;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    DeepSpeechV1TestCase(Model&amp; model,</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;                         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> testCaseId,</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;                         <span class="keyword">const</span> DeepSpeechV1TestCaseData&amp; testCaseData)</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        : <a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml">InferenceModelTestCase</a>&lt;Model&gt;(model,</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                                        testCaseId,</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                                        { testCaseData.m_InputData.m_InputSeq,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                                          testCaseData.m_InputData.m_StateH,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                                          testCaseData.m_InputData.m_StateC},</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                                        { k_OutputSize1, k_OutputSize2, k_OutputSize3 })</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        , m_ExpectedOutputs({testCaseData.m_ExpectedOutputData.m_InputSeq, testCaseData.m_ExpectedOutputData.m_StateH,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                             testCaseData.m_ExpectedOutputData.m_StateC})</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {}</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67b">TestCaseResult</a> <a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case.xhtml#a1b6e7a22d06d146f1da514a186dcdc02">ProcessResult</a>(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a>&amp; options)<span class="keyword"> override</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <a class="code" href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a>(options);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keyword">const</span> std::vector&lt;float&gt;&amp; output1 = mapbox::util::get&lt;std::vector&lt;float&gt;&gt;(this-&gt;<a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#ab0e1b0a762f51bb13f98060927214629">GetOutputs</a>()[0]); <span class="comment">// logits</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(output1.size() == k_OutputSize1);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keyword">const</span> std::vector&lt;float&gt;&amp; output2 = mapbox::util::get&lt;std::vector&lt;float&gt;&gt;(this-&gt;<a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#ab0e1b0a762f51bb13f98060927214629">GetOutputs</a>()[1]); <span class="comment">// new_state_c</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(output2.size() == k_OutputSize2);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keyword">const</span> std::vector&lt;float&gt;&amp; output3 = mapbox::util::get&lt;std::vector&lt;float&gt;&gt;(this-&gt;<a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#ab0e1b0a762f51bb13f98060927214629">GetOutputs</a>()[2]); <span class="comment">// new_state_h</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <a class="code" href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a>(output3.size() == k_OutputSize3);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="comment">// Check each output to see whether it is the expected value</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0u; j &lt; output1.size(); j++)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn_utils.xhtml#a56b0e17341e000fa1d4561890294520c">armnnUtils::within_percentage_tolerance</a>(output1[j], m_ExpectedOutputs.m_InputSeq[j]))</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;InputSeq for Lstm &quot;</span> &lt;&lt; this-&gt;<a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#a4ab19ef735b92c4d4f688f0659e5565e">GetTestCaseId</a>() &lt;&lt;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                                         <span class="stringliteral">&quot; is incorrect at&quot;</span> &lt;&lt; j;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67bad7c8c85bf79bbe1b7188497c32c3b0ca">TestCaseResult::Failed</a>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0u; j &lt; output2.size(); j++)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn_utils.xhtml#a56b0e17341e000fa1d4561890294520c">armnnUtils::within_percentage_tolerance</a>(output2[j], m_ExpectedOutputs.m_StateH[j]))</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;StateH for Lstm &quot;</span> &lt;&lt; this-&gt;<a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#a4ab19ef735b92c4d4f688f0659e5565e">GetTestCaseId</a>() &lt;&lt;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                         <span class="stringliteral">&quot; is incorrect&quot;</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67bad7c8c85bf79bbe1b7188497c32c3b0ca">TestCaseResult::Failed</a>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0u; j &lt; output3.size(); j++)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">if</span>(!<a class="code" href="namespacearmnn_utils.xhtml#a56b0e17341e000fa1d4561890294520c">armnnUtils::within_percentage_tolerance</a>(output3[j], m_ExpectedOutputs.m_StateC[j]))</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <a class="code" href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a>(error) &lt;&lt; <span class="stringliteral">&quot;StateC for Lstm &quot;</span> &lt;&lt; this-&gt;<a class="code" href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#a4ab19ef735b92c4d4f688f0659e5565e">GetTestCaseId</a>() &lt;&lt;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                         <span class="stringliteral">&quot; is incorrect&quot;</span>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67bad7c8c85bf79bbe1b7188497c32c3b0ca">TestCaseResult::Failed</a>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67baa60852f204ed8028c1c58808b746d115">TestCaseResult::Ok</a>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_OutputSize1 = 464u;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_OutputSize2 = 2048u;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_OutputSize3 = 2048u;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    LstmInput m_ExpectedOutputs;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;};</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Model&gt;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">class </span>DeepSpeechV1TestCaseProvider : <span class="keyword">public</span> <a class="code" href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">IInferenceTestCaseProvider</a></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> TConstructModelCallable&gt;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">explicit</span> DeepSpeechV1TestCaseProvider(TConstructModelCallable constructModel)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        : m_ConstructModel(constructModel)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    {}</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> AddCommandLineOptions(cxxopts::Options&amp; options, std::vector&lt;std::string&gt;&amp; required)<span class="keyword"> override</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        options</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            .allow_unrecognised_options()</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            .add_options()</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                (<span class="stringliteral">&quot;s,input-seq-dir&quot;</span>, <span class="stringliteral">&quot;Path to directory containing test data for m_InputSeq&quot;</span>,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                 cxxopts::value&lt;std::string&gt;(m_InputSeqDir))</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                (<span class="stringliteral">&quot;h,prev-state-h-dir&quot;</span>, <span class="stringliteral">&quot;Path to directory containing test data for m_PrevStateH&quot;</span>,</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                 cxxopts::value&lt;std::string&gt;(m_PrevStateHDir))</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                (<span class="stringliteral">&quot;c,prev-state-c-dir&quot;</span>, <span class="stringliteral">&quot;Path to directory containing test data for m_PrevStateC&quot;</span>,</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                 cxxopts::value&lt;std::string&gt;(m_PrevStateCDir))</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                (<span class="stringliteral">&quot;l,logits-dir&quot;</span>, <span class="stringliteral">&quot;Path to directory containing test data for m_Logits&quot;</span>,</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                 cxxopts::value&lt;std::string&gt;(m_LogitsDir))</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                (<span class="stringliteral">&quot;H,new-state-h-dir&quot;</span>, <span class="stringliteral">&quot;Path to directory containing test data for m_NewStateH&quot;</span>,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                 cxxopts::value&lt;std::string&gt;(m_NewStateHDir))</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                (<span class="stringliteral">&quot;C,new-state-c-dir&quot;</span>, <span class="stringliteral">&quot;Path to directory containing test data for m_NewStateC&quot;</span>,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                 cxxopts::value&lt;std::string&gt;(m_NewStateCDir));</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        required.insert(required.end(), {<span class="stringliteral">&quot;input-seq-dir&quot;</span>, <span class="stringliteral">&quot;prev-state-h-dir&quot;</span>, <span class="stringliteral">&quot;prev-state-c-dir&quot;</span>, <span class="stringliteral">&quot;logits-dir&quot;</span>,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                         <span class="stringliteral">&quot;new-state-h-dir&quot;</span>, <span class="stringliteral">&quot;new-state-c-dir&quot;</span>});</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        Model::AddCommandLineOptions(options, m_ModelCommandLineOptions, required);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ProcessCommandLineOptions(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a> &amp;commonOptions)<span class="keyword"> override</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">ValidateDirectory</a>(m_InputSeqDir))</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">ValidateDirectory</a>(m_PrevStateCDir))</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">ValidateDirectory</a>(m_PrevStateHDir))</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">ValidateDirectory</a>(m_LogitsDir))</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">ValidateDirectory</a>(m_NewStateCDir))</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">ValidateDirectory</a>(m_NewStateHDir))</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        m_Model = m_ConstructModel(commonOptions, m_ModelCommandLineOptions);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">if</span> (!m_Model)</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        m_Database = std::make_unique&lt;DeepSpeechV1Database&gt;(m_InputSeqDir.c_str(), m_PrevStateHDir.c_str(),</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                                            m_PrevStateCDir.c_str(), m_LogitsDir.c_str(),</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                                                            m_NewStateHDir.c_str(), m_NewStateCDir.c_str());</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">if</span> (!m_Database)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    std::unique_ptr&lt;IInferenceTestCase&gt; GetTestCase(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> testCaseId)<span class="keyword"> override</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        std::unique_ptr&lt;DeepSpeechV1TestCaseData&gt; testCaseData = m_Database-&gt;GetTestCaseData(testCaseId);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">if</span> (!testCaseData)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">return</span> std::make_unique&lt;DeepSpeechV1TestCase&lt;Model&gt;&gt;(*m_Model, testCaseId, *testCaseData);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">typename</span> Model::CommandLineOptions m_ModelCommandLineOptions;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    std::function&lt;std::unique_ptr&lt;Model&gt;(<span class="keyword">const</span> <a class="code" href="structarmnn_1_1test_1_1_inference_test_options.xhtml">InferenceTestOptions</a>&amp;,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                                         <span class="keyword">typename</span> Model::CommandLineOptions)&gt; m_ConstructModel;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    std::unique_ptr&lt;Model&gt; m_Model;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    std::string m_InputSeqDir;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    std::string m_PrevStateCDir;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    std::string m_PrevStateHDir;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    std::string m_LogitsDir;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    std::string m_NewStateCDir;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    std::string m_NewStateHDir;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    std::unique_ptr&lt;DeepSpeechV1Database&gt; m_Database;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;};</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;} <span class="comment">// anonymous namespace</span></div><div class="ttc" id="_ignore_unused_8hpp_xhtml"><div class="ttname"><a href="_ignore_unused_8hpp.xhtml">IgnoreUnused.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a05b3d6105613d2d14099667a6b8ca67b"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67b">armnn::test::TestCaseResult</a></div><div class="ttdeci">TestCaseResult</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00073">InferenceTest.hpp:73</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_provider_xhtml"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case_provider.xhtml">armnn::test::IInferenceTestCaseProvider</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00093">InferenceTest.hpp:93</a></div></div>
<div class="ttc" id="structarmnn_1_1test_1_1_inference_test_options_xhtml"><div class="ttname"><a href="structarmnn_1_1test_1_1_inference_test_options.xhtml">armnn::test::InferenceTestOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00059">InferenceTest.hpp:59</a></div></div>
<div class="ttc" id="_floating_point_comparison_8hpp_xhtml"><div class="ttname"><a href="_floating_point_comparison_8hpp.xhtml">FloatingPointComparison.hpp</a></div></div>
<div class="ttc" id="_logging_8hpp_xhtml_a7b6ad073975f437ec38ca7d20154727f"><div class="ttname"><a href="_logging_8hpp.xhtml#a7b6ad073975f437ec38ca7d20154727f">ARMNN_LOG</a></div><div class="ttdeci">#define ARMNN_LOG(severity)</div><div class="ttdef"><b>Definition:</b> <a href="_logging_8hpp_source.xhtml#l00205">Logging.hpp:205</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_i_inference_test_case_xhtml_a1b6e7a22d06d146f1da514a186dcdc02"><div class="ttname"><a href="classarmnn_1_1test_1_1_i_inference_test_case.xhtml#a1b6e7a22d06d146f1da514a186dcdc02">armnn::test::IInferenceTestCase::ProcessResult</a></div><div class="ttdeci">virtual TestCaseResult ProcessResult(const InferenceTestOptions &amp;options)=0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a44affeeb090c3c6a3062830562672e84"><div class="ttname"><a href="namespacearmnn.xhtml#a44affeeb090c3c6a3062830562672e84">armnn::IgnoreUnused</a></div><div class="ttdeci">void IgnoreUnused(Ts &amp;&amp;...)</div><div class="ttdef"><b>Definition:</b> <a href="_ignore_unused_8hpp_source.xhtml#l00014">IgnoreUnused.hpp:14</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_inference_model_test_case_xhtml_ab0e1b0a762f51bb13f98060927214629"><div class="ttname"><a href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#ab0e1b0a762f51bb13f98060927214629">armnn::test::InferenceModelTestCase::GetOutputs</a></div><div class="ttdeci">const std::vector&lt; armnnUtils::TContainer &gt; &amp; GetOutputs() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00141">InferenceTest.hpp:141</a></div></div>
<div class="ttc" id="_inference_test_8hpp_xhtml"><div class="ttname"><a href="_inference_test_8hpp.xhtml">InferenceTest.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_inference_model_test_case_xhtml_a4ab19ef735b92c4d4f688f0659e5565e"><div class="ttname"><a href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml#a4ab19ef735b92c4d4f688f0659e5565e">armnn::test::InferenceModelTestCase::GetTestCaseId</a></div><div class="ttdeci">unsigned int GetTestCaseId() const</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00140">InferenceTest.hpp:140</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml_a5698be69cbd5dfe6c28fcd9867e8cbed"><div class="ttname"><a href="_assert_8hpp.xhtml#a5698be69cbd5dfe6c28fcd9867e8cbed">ARMNN_ASSERT</a></div><div class="ttdeci">#define ARMNN_ASSERT(COND)</div><div class="ttdef"><b>Definition:</b> <a href="_assert_8hpp_source.xhtml#l00014">Assert.hpp:14</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a05b3d6105613d2d14099667a6b8ca67bad7c8c85bf79bbe1b7188497c32c3b0ca"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67bad7c8c85bf79bbe1b7188497c32c3b0ca">armnn::test::TestCaseResult::Failed</a></div><div class="ttdoc">The test failed (e.g. </div></div>
<div class="ttc" id="classarmnn_1_1test_1_1_inference_model_test_case_xhtml"><div class="ttname"><a href="classarmnn_1_1test_1_1_inference_model_test_case.xhtml">armnn::test::InferenceModelTestCase</a></div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8hpp_source.xhtml#l00112">InferenceTest.hpp:112</a></div></div>
<div class="ttc" id="_assert_8hpp_xhtml"><div class="ttname"><a href="_assert_8hpp.xhtml">Assert.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a8a678fb3a8864e31aeb77f857ae6fc43"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a8a678fb3a8864e31aeb77f857ae6fc43">armnn::test::ValidateDirectory</a></div><div class="ttdeci">bool ValidateDirectory(std::string &amp;dir)</div><div class="ttdef"><b>Definition:</b> <a href="_inference_test_8cpp_source.xhtml#l00084">InferenceTest.cpp:84</a></div></div>
<div class="ttc" id="namespacearmnn_utils_xhtml_a56b0e17341e000fa1d4561890294520c"><div class="ttname"><a href="namespacearmnn_utils.xhtml#a56b0e17341e000fa1d4561890294520c">armnnUtils::within_percentage_tolerance</a></div><div class="ttdeci">bool within_percentage_tolerance(float a, float b, float tolerancePercent=1.0f)</div><div class="ttdoc">Compare two floats and return true if their values are within a specified tolerance of each other...</div><div class="ttdef"><b>Definition:</b> <a href="_floating_point_comparison_8hpp_source.xhtml#l00020">FloatingPointComparison.hpp:20</a></div></div>
<div class="ttc" id="_deep_speech_v1_database_8hpp_xhtml"><div class="ttname"><a href="_deep_speech_v1_database_8hpp.xhtml">DeepSpeechV1Database.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_1_1test_xhtml_a05b3d6105613d2d14099667a6b8ca67baa60852f204ed8028c1c58808b746d115"><div class="ttname"><a href="namespacearmnn_1_1test.xhtml#a05b3d6105613d2d14099667a6b8ca67baa60852f204ed8028c1c58808b746d115">armnn::test::TestCaseResult::Ok</a></div><div class="ttdoc">The test completed without any errors. </div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="_deep_speech_v1_inference_test_8hpp.xhtml">DeepSpeechV1InferenceTest.hpp</a></li>
    <li class="footer">Generated on Wed Mar 9 2022 12:01:00 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
