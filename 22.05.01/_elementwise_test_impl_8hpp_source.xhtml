<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: src/backends/backendsCommon/test/layerTests/ElementwiseTestImpl.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.05.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_elementwise_test_impl_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ElementwiseTestImpl.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_elementwise_test_impl_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2017 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_test_utils_2_layer_test_result_8hpp.xhtml">armnnTestUtils/LayerTestResult.hpp</a>&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_resolve_type_8hpp.xhtml">ResolveType.hpp</a>&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="_i_backend_internal_8hpp.xhtml">armnn/backends/IBackendInternal.hpp</a>&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_workload_8hpp.xhtml">armnn/backends/Workload.hpp</a>&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_workload_data_8hpp.xhtml">armnn/backends/WorkloadData.hpp</a>&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_2backends_2_workload_factory_8hpp.xhtml">armnn/backends/WorkloadFactory.hpp</a>&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;DataTypeUtils.hpp&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml">armnnTestUtils/TensorCopyUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_test_utils_2_workload_test_utils_8hpp.xhtml">armnnTestUtils/WorkloadTestUtils.hpp</a>&gt;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="include_2armnn_test_utils_2_tensor_helpers_8hpp.xhtml">armnnTestUtils/TensorHelpers.hpp</a>&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> DescriptorType&gt;</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="_elementwise_test_impl_8hpp.xhtml#ab6921db5d86507f5b126af1cc516adb9">   27</a></span>&#160;std::unique_ptr&lt;armnn::IWorkload&gt; <a class="code" href="_elementwise_test_impl_8hpp.xhtml#ab6921db5d86507f5b126af1cc516adb9">CreateWorkload</a>(</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a>&amp; info,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keyword">const</span> DescriptorType&amp; descriptor) {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="_elementwise_test_impl_8hpp.xhtml#ab6921db5d86507f5b126af1cc516adb9">CreateWorkload</a>(workloadFactory, info, descriptor);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">template</span>&lt;std::size_t NumDims,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keyword">typename</span> Descriptor,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnTypeInput,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnTypeOutput,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keyword">typename</span> TInput  = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnTypeInput&gt;</a>,</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keyword">typename</span> TOutput = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnTypeOutput&gt;</a>&gt;</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="_elementwise_test_impl_8hpp.xhtml#ab8471a27ed381e0bbd7e88b5bbcbc80f">   40</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;TOutput, NumDims&gt;</a> <a class="code" href="_elementwise_test_impl_8hpp.xhtml#ab8471a27ed381e0bbd7e88b5bbcbc80f">ElementwiseTestHelper</a>(</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[NumDims],</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        std::vector&lt;TInput&gt; values0,</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordtype">float</span> quantScale0,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordtype">int</span> quantOffset0,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[NumDims],</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        std::vector&lt;TInput&gt; values1,</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordtype">float</span> quantScale1,</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordtype">int</span> quantOffset1,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outShape[NumDims],</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        std::vector&lt;TOutput&gt; outValues,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordtype">float</span> outQuantScale,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordtype">int</span> outQuantOffset) {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo0{NumDims, shape0, ArmnnTypeInput};</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> inputTensorInfo1{NumDims, shape1, ArmnnTypeInput};</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a> outputTensorInfo{NumDims, outShape, ArmnnTypeOutput};</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    inputTensorInfo0.<a class="code" href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">SetQuantizationScale</a>(quantScale0);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    inputTensorInfo0.SetQuantizationOffset(quantOffset0);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    inputTensorInfo1.SetQuantizationScale(quantScale1);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    inputTensorInfo1.SetQuantizationOffset(quantOffset1);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    outputTensorInfo.SetQuantizationScale(outQuantScale);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    outputTensorInfo.SetQuantizationOffset(outQuantOffset);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    std::vector&lt;TOutput&gt; actualOutput(outputTensorInfo.GetNumElements());</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordtype">bool</span> isBoolean = <span class="keyword">false</span>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">if</span> (ArmnnTypeOutput == <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a>)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        isBoolean = <span class="keyword">true</span>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle0 = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo0);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; inputHandle1 = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(inputTensorInfo1);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    std::unique_ptr&lt;armnn::ITensorHandle&gt; outputHandle = tensorHandleFactory.<a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">CreateTensorHandle</a>(outputTensorInfo);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    Descriptor data;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a> info;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo0, inputHandle0.get());</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    AddInputToWorkload(data, info, inputTensorInfo1, inputHandle1.get());</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    AddOutputToWorkload(data, info, outputTensorInfo, outputHandle.get());</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">auto</span> workload = CreateWorkload&lt;Descriptor&gt;(workloadFactory, info, data);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    inputHandle0-&gt;Allocate();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    inputHandle1-&gt;Allocate();</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    outputHandle-&gt;Allocate();</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle0.get(), values0.data());</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a>(inputHandle1.get(), values1.data());</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    workload-&gt;PostAllocationConfigure();</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    ExecuteWorkload(*workload, memoryManager);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a>(actualOutput.data(), outputHandle.get());</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;TOutput, NumDims&gt;</a>(actualOutput,</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                             outValues,</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                                             outputHandle-&gt;GetShape(),</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                                             outputTensorInfo.GetShape(),</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                             isBoolean);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keyword">template</span>&lt;std::size_t NumDims,</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keyword">typename</span> Descriptor,</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnType,</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keyword">typename</span> T = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnType&gt;</a>&gt;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="_elementwise_test_impl_8hpp.xhtml#a210d3cf8e719075f40446990509ee897">  111</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, NumDims&gt;</a> <a class="code" href="_elementwise_test_impl_8hpp.xhtml#ab8471a27ed381e0bbd7e88b5bbcbc80f">ElementwiseTestHelper</a>(</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[NumDims],</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        std::vector&lt;T&gt; values0,</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordtype">float</span> quantScale0,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordtype">int</span> quantOffset0,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[NumDims],</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        std::vector&lt;T&gt; values1,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordtype">float</span> quantScale1,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordtype">int</span> quantOffset1,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outShape[NumDims],</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        std::vector&lt;T&gt; outValues,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordtype">float</span> outQuantScale,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordtype">int</span> outQuantOffset) {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;NumDims, Descriptor, ArmnnType, ArmnnType&gt;(</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            workloadFactory,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            memoryManager,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            shape0,</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            values0,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            quantScale0,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            quantOffset0,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            shape1,</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            values1,</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            quantScale1,</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            quantOffset1,</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            outShape,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            outValues,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            tensorHandleFactory,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            outQuantScale,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            outQuantOffset);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keyword">template</span>&lt;std::size_t NumDims,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keyword">typename</span> Descriptor,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnTypeInput,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnTypeOutput,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keyword">typename</span> TInput  = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnTypeInput&gt;</a>,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keyword">typename</span> TOutput = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnTypeOutput&gt;</a>&gt;</div><div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="_elementwise_test_impl_8hpp.xhtml#a30ab10ed3fa6f6727aa1b739d4db188f">  151</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;TOutput, NumDims&gt;</a> <a class="code" href="_elementwise_test_impl_8hpp.xhtml#ab8471a27ed381e0bbd7e88b5bbcbc80f">ElementwiseTestHelper</a>(</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[NumDims],</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        std::vector&lt;TInput&gt; values0,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[NumDims],</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        std::vector&lt;TInput&gt; values1,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outShape[NumDims],</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        std::vector&lt;TOutput&gt; outValues,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordtype">float</span> quantScale = 1.0f,</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordtype">int</span> quantOffset = 0) {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;NumDims, Descriptor, ArmnnTypeInput, ArmnnTypeOutput&gt;(</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            workloadFactory,</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            memoryManager,</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            shape0,</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            values0,</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            quantScale,</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            quantOffset,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            shape1,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            values1,</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            quantScale,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            quantOffset,</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            outShape,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            outValues,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            tensorHandleFactory,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            quantScale,</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            quantOffset);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keyword">template</span>&lt;std::size_t NumDims,</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keyword">typename</span> Descriptor,</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <a class="code" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a> ArmnnType,</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keyword">typename</span> T = <a class="code" href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType&lt;ArmnnType&gt;</a>&gt;</div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="_elementwise_test_impl_8hpp.xhtml#a9d5c8b4217cf310c9f9c8e64036ef0c1">  185</a></span>&#160;<a class="code" href="struct_layer_test_result.xhtml">LayerTestResult&lt;T, NumDims&gt;</a> <a class="code" href="_elementwise_test_impl_8hpp.xhtml#ab8471a27ed381e0bbd7e88b5bbcbc80f">ElementwiseTestHelper</a>(</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a>&amp; workloadFactory,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a>&amp; memoryManager,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape0[NumDims],</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        std::vector&lt;T&gt; values0,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> shape1[NumDims],</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        std::vector&lt;T&gt; values1,</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> outShape[NumDims],</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        std::vector&lt;T&gt; outValues,</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a>&amp; tensorHandleFactory,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordtype">float</span> quantScale = 1.0f,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordtype">int</span> quantOffset = 0) {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">return</span> ElementwiseTestHelper&lt;NumDims, Descriptor, ArmnnType, ArmnnType&gt;(</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            workloadFactory,</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            memoryManager,</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            shape0,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            values0,</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            shape1,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            values1,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            outShape,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            outValues,</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            tensorHandleFactory,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            quantScale,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            quantOffset);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a27226c864bac7454a8504f8edb15d95b">armnn::DataType::Boolean</a></div></div>
<div class="ttc" id="_elementwise_test_impl_8hpp_xhtml_ab6921db5d86507f5b126af1cc516adb9"><div class="ttname"><a href="_elementwise_test_impl_8hpp.xhtml#ab6921db5d86507f5b126af1cc516adb9">CreateWorkload</a></div><div class="ttdeci">std::unique_ptr&lt; armnn::IWorkload &gt; CreateWorkload(const armnn::IWorkloadFactory &amp;workloadFactory, const armnn::WorkloadInfo &amp;info, const DescriptorType &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="_elementwise_test_impl_8hpp_source.xhtml#l00027">ElementwiseTestImpl.hpp:27</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_layer_test_result_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_test_utils_2_layer_test_result_8hpp.xhtml">LayerTestResult.hpp</a></div></div>
<div class="ttc" id="_i_backend_internal_8hpp_xhtml"><div class="ttname"><a href="_i_backend_internal_8hpp.xhtml">IBackendInternal.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml">armnn::IWorkloadFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml#l00022">WorkloadFactory.hpp:22</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a0743ed5e860c316a20b68ca96301b411"><div class="ttname"><a href="namespacearmnn.xhtml#a0743ed5e860c316a20b68ca96301b411">armnn::ResolveType</a></div><div class="ttdeci">typename ResolveTypeImpl&lt; DT &gt;::Type ResolveType</div><div class="ttdef"><b>Definition:</b> <a href="_resolve_type_8hpp_source.xhtml#l00079">ResolveType.hpp:79</a></div></div>
<div class="ttc" id="_resolve_type_8hpp_xhtml"><div class="ttname"><a href="_resolve_type_8hpp.xhtml">ResolveType.hpp</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_workload_factory_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_workload_factory_8hpp.xhtml">WorkloadFactory.hpp</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">armnn::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_types_8hpp_source.xhtml#l00048">Types.hpp:48</a></div></div>
<div class="ttc" id="_elementwise_test_impl_8hpp_xhtml_ab8471a27ed381e0bbd7e88b5bbcbc80f"><div class="ttname"><a href="_elementwise_test_impl_8hpp.xhtml#ab8471a27ed381e0bbd7e88b5bbcbc80f">ElementwiseTestHelper</a></div><div class="ttdeci">LayerTestResult&lt; TOutput, NumDims &gt; ElementwiseTestHelper(armnn::IWorkloadFactory &amp;workloadFactory, const armnn::IBackendInternal::IMemoryManagerSharedPtr &amp;memoryManager, const unsigned int shape0[NumDims], std::vector&lt; TInput &gt; values0, float quantScale0, int quantOffset0, const unsigned int shape1[NumDims], std::vector&lt; TInput &gt; values1, float quantScale1, int quantOffset1, const unsigned int outShape[NumDims], std::vector&lt; TOutput &gt; outValues, const armnn::ITensorHandleFactory &amp;tensorHandleFactory, float outQuantScale, int outQuantOffset)</div><div class="ttdef"><b>Definition:</b> <a href="_elementwise_test_impl_8hpp_source.xhtml#l00040">ElementwiseTestImpl.hpp:40</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_backend_internal_xhtml_a693b40e6b94e958836aeb0410ca186bd"><div class="ttname"><a href="classarmnn_1_1_i_backend_internal.xhtml#a693b40e6b94e958836aeb0410ca186bd">armnn::IBackendInternal::IMemoryManagerSharedPtr</a></div><div class="ttdeci">std::shared_ptr&lt; IMemoryManager &gt; IMemoryManagerSharedPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_backend_internal_8hpp_source.xhtml#l00097">IBackendInternal.hpp:97</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_copy_utils_8hpp_xhtml_ab5dfed8358e500ed523d78090ec78e88"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ab5dfed8358e500ed523d78090ec78e88">CopyDataFromITensorHandle</a></div><div class="ttdeci">void CopyDataFromITensorHandle(void *mem, const armnn::ITensorHandle *tensorHandle)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00014">TensorCopyUtils.cpp:14</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_workload_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_workload_8hpp.xhtml">Workload.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml_a685739c4eb65a580e075282cfe6787d6"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml#a685739c4eb65a580e075282cfe6787d6">armnn::TensorInfo::SetQuantizationScale</a></div><div class="ttdeci">void SetQuantizationScale(float scale)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8cpp_source.xhtml#l00473">Tensor.cpp:473</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_helpers_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_helpers_8hpp.xhtml">TensorHelpers.hpp</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_copy_utils_8hpp_xhtml_ae15f1a3c55d2db87683577de9fa4437c"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml#ae15f1a3c55d2db87683577de9fa4437c">CopyDataToITensorHandle</a></div><div class="ttdeci">void CopyDataToITensorHandle(armnn::ITensorHandle *tensorHandle, const void *memory)</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_copy_utils_8cpp_source.xhtml#l00009">TensorCopyUtils.cpp:9</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_factory_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml">armnn::ITensorHandleFactory</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_i_tensor_handle_factory_8hpp_source.xhtml#l00042">ITensorHandleFactory.hpp:42</a></div></div>
<div class="ttc" id="structarmnn_1_1_workload_info_xhtml"><div class="ttname"><a href="structarmnn_1_1_workload_info.xhtml">armnn::WorkloadInfo</a></div><div class="ttdoc">Contains information about TensorInfos of a layer. </div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_2backends_2_workload_info_8hpp_source.xhtml#l00016">WorkloadInfo.hpp:16</a></div></div>
<div class="ttc" id="struct_layer_test_result_xhtml"><div class="ttname"><a href="struct_layer_test_result.xhtml">LayerTestResult</a></div><div class="ttdef"><b>Definition:</b> <a href="include_2armnn_test_utils_2_layer_test_result_8hpp_source.xhtml#l00015">LayerTestResult.hpp:15</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_tensor_handle_factory_xhtml_a375f11dd42ff042435e8771cf287b20c"><div class="ttname"><a href="classarmnn_1_1_i_tensor_handle_factory.xhtml#a375f11dd42ff042435e8771cf287b20c">armnn::ITensorHandleFactory::CreateTensorHandle</a></div><div class="ttdeci">virtual std::unique_ptr&lt; ITensorHandle &gt; CreateTensorHandle(const TensorInfo &amp;tensorInfo) const =0</div></div>
<div class="ttc" id="include_2armnn_test_utils_2_tensor_copy_utils_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_test_utils_2_tensor_copy_utils_8hpp.xhtml">TensorCopyUtils.hpp</a></div></div>
<div class="ttc" id="include_2armnn_2backends_2_workload_data_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_2backends_2_workload_data_8hpp.xhtml">WorkloadData.hpp</a></div></div>
<div class="ttc" id="include_2armnn_test_utils_2_workload_test_utils_8hpp_xhtml"><div class="ttname"><a href="include_2armnn_test_utils_2_workload_test_utils_8hpp.xhtml">WorkloadTestUtils.hpp</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0f3cdec46afbc61a1ded8e1687c9c9a0.xhtml">backends</a></li><li class="navelem"><a class="el" href="dir_797a213d7d01b98ef12d53b0820ea64e.xhtml">backendsCommon</a></li><li class="navelem"><a class="el" href="dir_28bfe507f7e135bdae07c2a6b7f66696.xhtml">test</a></li><li class="navelem"><a class="el" href="dir_99a30439342d160875b21dac3498ad7f.xhtml">layerTests</a></li><li class="navelem"><a class="el" href="_elementwise_test_impl_8hpp.xhtml">ElementwiseTestImpl.hpp</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 13:20:21 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
