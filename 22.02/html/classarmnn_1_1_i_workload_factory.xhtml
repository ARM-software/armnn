<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: IWorkloadFactory Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">22.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarmnn_1_1_i_workload_factory.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classarmnn_1_1_i_workload_factory-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">IWorkloadFactory Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml">WorkloadFactory.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for IWorkloadFactory:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classarmnn_1_1_i_workload_factory.png" usemap="#IWorkloadFactory_map" alt=""/>
  <map id="IWorkloadFactory_map" name="IWorkloadFactory_map">
<area href="classarmnn_1_1_mock_workload_factory.xhtml" alt="MockWorkloadFactory" shape="rect" coords="0,56,199,80"/>
<area href="classarmnn_1_1_ref_workload_factory.xhtml" alt="RefWorkloadFactory" shape="rect" coords="209,56,408,80"/>
<area href="classarmnn_1_1_workload_factory_base.xhtml" alt="WorkloadFactoryBase" shape="rect" coords="418,56,617,80"/>
<area href="classsdb_1_1_sample_dynamic_workload_factory.xhtml" alt="SampleDynamicWorkloadFactory" shape="rect" coords="627,56,826,80"/>
<area href="classarmnn_1_1_cl_workload_factory.xhtml" alt="ClWorkloadFactory" shape="rect" coords="313,112,512,136"/>
<area href="classarmnn_1_1_neon_workload_factory.xhtml" alt="NeonWorkloadFactory" shape="rect" coords="522,112,721,136"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aab62208f96483015c29ad58549efedd8"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aab62208f96483015c29ad58549efedd8">~IWorkloadFactory</a> ()</td></tr>
<tr class="separator:aab62208f96483015c29ad58549efedd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54a596adc0162c80f33a6cda4f33a6ef"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a54a596adc0162c80f33a6cda4f33a6ef">AfterWorkloadsCreated</a> ()</td></tr>
<tr class="separator:a54a596adc0162c80f33a6cda4f33a6ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f7e4296485d2812e7996089149c96d1"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9f7e4296485d2812e7996089149c96d1">GetBackendId</a> () const =0</td></tr>
<tr class="separator:a9f7e4296485d2812e7996089149c96d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37f4eba7877deb34f4d8d64c9bcb9ab5"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a37f4eba7877deb34f4d8d64c9bcb9ab5">SupportsSubTensors</a> () const =0</td></tr>
<tr class="separator:a37f4eba7877deb34f4d8d64c9bcb9ab5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac043991b839903b2ba9da884e4020848"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac043991b839903b2ba9da884e4020848">CreateSubTensorHandle</a> (<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &amp;parent, <a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> const &amp;subTensorShape, unsigned int const *subTensorOrigin) const =0</td></tr>
<tr class="separator:ac043991b839903b2ba9da884e4020848"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa83593035de93eb4b6dddb9dc8f5ced6"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa83593035de93eb4b6dddb9dc8f5ced6">CreateInput</a> (const <a class="el" href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">InputQueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const =0</td></tr>
<tr class="separator:aa83593035de93eb4b6dddb9dc8f5ced6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15c140be4ddceffee16436f009d3ed94"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">CreateTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, const bool IsMemoryManaged=true) const =0</td></tr>
<tr class="separator:a15c140be4ddceffee16436f009d3ed94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0b0226f767fd570877710b84c7caa2a"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#af0b0226f767fd570877710b84c7caa2a">CreateTensorHandle</a> (const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;tensorInfo, <a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> dataLayout, const bool IsMemoryManaged=true) const =0</td></tr>
<tr class="separator:af0b0226f767fd570877710b84c7caa2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13060ebb89d2c21a7a5d897e99cccf72"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a13060ebb89d2c21a7a5d897e99cccf72">CreateWorkload</a> (<a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a> type, const <a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;descriptor, const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;<a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>) const</td></tr>
<tr class="separator:a13060ebb89d2c21a7a5d897e99cccf72"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a74dc9ec1a223eab8b072368b2dacee87"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a74dc9ec1a223eab8b072368b2dacee87">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;backendId, const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a74dc9ec1a223eab8b072368b2dacee87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d94ea841143b76fe08ccb308839bfd7"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a7d94ea841143b76fe08ccb308839bfd7">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported)</td></tr>
<tr class="separator:a7d94ea841143b76fe08ccb308839bfd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaff50773427132e1066a7de56a53db1"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aeaff50773427132e1066a7de56a53db1">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions)</td></tr>
<tr class="separator:aeaff50773427132e1066a7de56a53db1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52ba8d60c6582a847ef7bc914116d394"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a52ba8d60c6582a847ef7bc914116d394">IsLayerSupported</a> (const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;backendId, const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;layer, <a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt; dataType, std::string &amp;outReasonIfUnsupported, const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;modelOptions)</td></tr>
<tr class="separator:a52ba8d60c6582a847ef7bc914116d394"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p class="definition">Definition at line <a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml#l00022">22</a> of file <a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml">WorkloadFactory.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aab62208f96483015c29ad58549efedd8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab62208f96483015c29ad58549efedd8">&#9670;&nbsp;</a></span>~IWorkloadFactory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml#l00025">25</a> of file <a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml">WorkloadFactory.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{ }</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a54a596adc0162c80f33a6cda4f33a6ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54a596adc0162c80f33a6cda4f33a6ef">&#9670;&nbsp;</a></span>AfterWorkloadsCreated()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void AfterWorkloadsCreated </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aff048f2bbb6e714f3309f5f34b2b6c3f">ClWorkloadFactory</a>.</p>

<p class="definition">Definition at line <a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml#l00027">27</a> of file <a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml">WorkloadFactory.hpp</a>.</p>

<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00043">ARMNN_DEPRECATED_MSG</a>, <a class="el" href="include_2armnn_2backends_2_workload_data_8hpp_source.xhtml#l00346">armnn::ARMNN_DEPRECATED_MSG_REMOVAL_DATE()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa83593035de93eb4b6dddb9dc8f5ced6">IWorkloadFactory::CreateInput()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#ac043991b839903b2ba9da884e4020848">IWorkloadFactory::CreateSubTensorHandle()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a15c140be4ddceffee16436f009d3ed94">IWorkloadFactory::CreateTensorHandle()</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01541">IWorkloadFactory::CreateWorkload()</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a9f7e4296485d2812e7996089149c96d1">IWorkloadFactory::GetBackendId()</a>, <a class="el" href="namespacearmnn.xhtml#a93a3ba385cad27c4774e5fe64c025d3da4059b0251f66a18cb56f544728796875">armnn::Info</a>, <a class="el" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::info</a>, <a class="el" href="_workload_factory_8cpp_source.xhtml#l01498">IWorkloadFactory::IsLayerSupported()</a>, and <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#a37f4eba7877deb34f4d8d64c9bcb9ab5">IWorkloadFactory::SupportsSubTensors()</a>.</p>
<div class="fragment"><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{};</div></div><!-- fragment -->
</div>
</div>
<a id="aa83593035de93eb4b6dddb9dc8f5ced6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa83593035de93eb4b6dddb9dc8f5ced6">&#9670;&nbsp;</a></span>CreateInput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a>&gt; CreateInput </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a2231ac018fe2c465f2d42fef597d67e7">InputQueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a3e7b63e791ca559838c81aec0e18fb46">SampleDynamicWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a3dcc96078130874f1be15a7148868539">WorkloadFactoryBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_ref_workload_factory_8hpp_source.xhtml#l00052">RefWorkloadFactory::CreateSubTensorHandle()</a>, <a class="el" href="_ref_workload_factory_8cpp_source.xhtml#l00144">RefWorkloadFactory::CreateWorkload()</a>, and <a class="el" href="_workload_factory_8cpp_source.xhtml#l01541">IWorkloadFactory::CreateWorkload()</a>.</p>

</div>
</div>
<a id="ac043991b839903b2ba9da884e4020848"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac043991b839903b2ba9da884e4020848">&#9670;&nbsp;</a></span>CreateSubTensorHandle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>&gt; CreateSubTensorHandle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a> &amp;&#160;</td>
          <td class="paramname"><em>parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_tensor_shape.xhtml">TensorShape</a> const &amp;&#160;</td>
          <td class="paramname"><em>subTensorShape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int const *&#160;</td>
          <td class="paramname"><em>subTensorOrigin</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_mock_workload_factory.xhtml#a99251f9711c087d7c1b5a08236ef0201">MockWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#af7ed41b965e30999ff8250e09d7b5abe">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#abefb9df9d7a54cf2f82047ea350d0388">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#abefb9df9d7a54cf2f82047ea350d0388">NeonWorkloadFactory</a>, <a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a803d8d97e76968a19caa6ca110af8bb7">SampleDynamicWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a99251f9711c087d7c1b5a08236ef0201">WorkloadFactoryBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>.</p>

</div>
</div>
<a id="a15c140be4ddceffee16436f009d3ed94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15c140be4ddceffee16436f009d3ed94">&#9670;&nbsp;</a></span>CreateTensorHandle() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>&gt; CreateTensorHandle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>IsMemoryManaged</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_mock_workload_factory.xhtml#a7c3e7ce5582e4f815faefa91440b46e7">MockWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a7239477811c44d4398f0c2d291d9ea76">NeonWorkloadFactory</a>, <a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#afeebce3ac305675b16d1065d0cb5a362">SampleDynamicWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a526eaec84398bc8067f407769b31f4a9">WorkloadFactoryBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, and <a class="el" href="_output_handler_8cpp_source.xhtml#l00021">OutputHandler::CreateTensorHandles()</a>.</p>

</div>
</div>
<a id="af0b0226f767fd570877710b84c7caa2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0b0226f767fd570877710b84c7caa2a">&#9670;&nbsp;</a></span>CreateTensorHandle() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classarmnn_1_1_i_tensor_handle.xhtml">ITensorHandle</a>&gt; CreateTensorHandle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensorInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>dataLayout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>IsMemoryManaged</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_mock_workload_factory.xhtml#a876bf6eff38691febe052578c337ebfe">MockWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aaed323bbcbaded57334783e4732ee3ed">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aaed323bbcbaded57334783e4732ee3ed">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aaed323bbcbaded57334783e4732ee3ed">NeonWorkloadFactory</a>, <a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#a729d5c6a0304731cb12830c69d25ec6a">SampleDynamicWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a68f34fb8ec9a7921a1f6c17b4f5312e6">WorkloadFactoryBase</a>.</p>

</div>
</div>
<a id="a13060ebb89d2c21a7a5d897e99cccf72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a13060ebb89d2c21a7a5d897e99cccf72">&#9670;&nbsp;</a></span>CreateWorkload()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="_deprecated_8hpp.xhtml#ab66a241a0ed3ee89c866e777b035d0ed">ARMNN_NO_DEPRECATE_WARN_BEGIN</a> std::unique_ptr&lt; <a class="el" href="classarmnn_1_1_i_workload.xhtml">IWorkload</a> &gt; CreateWorkload </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4">LayerType</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_queue_descriptor.xhtml">QueueDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarmnn_1_1_workload_info.xhtml">WorkloadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#a739bcc341b89c98a5d38717370ebcaa6">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#a739bcc341b89c98a5d38717370ebcaa6">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#a739bcc341b89c98a5d38717370ebcaa6">NeonWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#a30b9965b6bce898c027235de615e2331">WorkloadFactoryBase</a>.</p>

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01541">1541</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::Activation</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::Addition</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">armnn::ArgMinMax</a>, <a class="el" href="_deprecated_8hpp_source.xhtml#l00034">ARMNN_NO_DEPRECATE_WARN_END</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::BatchNormalization</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">armnn::BatchToSpaceNd</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c">armnn::Cast</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd">armnn::ChannelShuffle</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">armnn::Comparison</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">armnn::Concat</a>, <a class="el" href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::Constant</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2ba4c46787312a2467153f40c542851a">armnn::ConvertBf16ToFp32</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">armnn::ConvertFp16ToFp32</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6512859957de2cf2a5fe4dccb07bd9da">armnn::ConvertFp32ToBf16</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">armnn::ConvertFp32ToFp16</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::Convolution2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953">armnn::Convolution3d</a>, <a class="el" href="classarmnn_1_1_i_workload_factory.xhtml#aa83593035de93eb4b6dddb9dc8f5ced6">IWorkloadFactory::CreateInput()</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">armnn::Debug</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">armnn::DepthToSpace</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::DepthwiseConvolution2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">armnn::Dequantize</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">armnn::DetectionPostProcess</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::Division</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">armnn::ElementwiseUnary</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3489c7b05e180496cb2ce8ac73887f48">armnn::FakeQuantization</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed">armnn::Fill</a>, <a class="el" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::Floor</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::FullyConnected</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">armnn::Gather</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::Input</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">armnn::InstanceNormalization</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">armnn::L2Normalization</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30">armnn::LogicalBinary</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">armnn::LogSoftmax</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">armnn::Lstm</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">armnn::Maximum</a>, <a class="el" href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0a3d6c9ac08ada31c184094bbc67afe00d">armnn::Mean</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::MemCopy</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::MemImport</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::Minimum</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::Multiplication</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">armnn::Normalization</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::Output</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">armnn::Pad</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">armnn::Permute</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">armnn::Pooling2d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c">armnn::Pooling3d</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1ba143ebe524d46181a4b53470693278">armnn::PreCompiled</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">armnn::Prelu</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">armnn::QLstm</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">armnn::Quantize</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3">armnn::Rank</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">armnn::Reduce</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">armnn::Reshape</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">armnn::Resize</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">armnn::Shape</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">armnn::Slice</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::Softmax</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">armnn::SpaceToBatchNd</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">armnn::SpaceToDepth</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">armnn::Splitter</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">armnn::Stack</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">armnn::StridedSlice</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::Subtraction</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">armnn::Transpose</a>, <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">armnn::TransposeConvolution2d</a>, and <a class="el" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::UnidirectionalSequenceLstm</a>.</p>

<p class="reference">Referenced by <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00543">AdditionAfterMaxPoolTest()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00256">AdditionBroadcast1ElementTestImpl()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00167">AdditionBroadcastTestImpl()</a>, <a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00023">BoundedReLuTestCommon()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00188">BoundedReLuUint8UpperAndLowerBoundTest()</a>, <a class="el" href="_cast_test_impl_8cpp_source.xhtml#l00011">CastTest()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l01221">CompareActivationTestImpl()</a>, <a class="el" href="_addition_test_impl_8cpp_source.xhtml#l00645">CompareAdditionTest()</a>, <a class="el" href="_batch_normalization_test_impl_8cpp_source.xhtml#l00612">CompareBatchNormTest()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01319">CompareConvolution2dTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l02905">CompareDepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_multiplication_test_impl_8cpp_source.xhtml#l00525">CompareMultiplicationTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l01955">ConcatDifferentInputOutputQParamTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00278">Concatenate()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02117">ConcatTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02713">ConcatUint16Test()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02429">ConcatUint8DifferentQParamsTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02575">ConcatUint8Test()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00315">ConstantLinearActivationTestCommon()</a>, <a class="el" href="_convert_bf16_to_fp32_test_impl_8cpp_source.xhtml#l00013">ConvertBf16ToFp32Test()</a>, <a class="el" href="_convert_fp32_to_bf16_test_impl_8cpp_source.xhtml#l00013">ConvertFp32ToBf16Test()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00468">Convolution1dTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l03411">Convolution2dPerAxisQuantTest()</a>, <a class="el" href="_convert_fp32_to_fp16_layer_8cpp_source.xhtml#l00021">ConvertFp32ToFp16Layer::CreateWorkload()</a>, <a class="el" href="_activation_layer_8cpp_source.xhtml#l00020">ActivationLayer::CreateWorkload()</a>, <a class="el" href="_rank_layer_8cpp_source.xhtml#l00020">RankLayer::CreateWorkload()</a>, <a class="el" href="_fill_layer_8cpp_source.xhtml#l00021">FillLayer::CreateWorkload()</a>, <a class="el" href="_cast_layer_8cpp_source.xhtml#l00021">CastLayer::CreateWorkload()</a>, <a class="el" href="_l2_normalization_layer_8cpp_source.xhtml#l00021">L2NormalizationLayer::CreateWorkload()</a>, <a class="el" href="_switch_layer_8cpp_source.xhtml#l00019">SwitchLayer::CreateWorkload()</a>, <a class="el" href="_addition_layer_8cpp_source.xhtml#l00022">AdditionLayer::CreateWorkload()</a>, <a class="el" href="_abs_layer_8cpp_source.xhtml#l00022">AbsLayer::CreateWorkload()</a>, <a class="el" href="_debug_layer_8cpp_source.xhtml#l00020">DebugLayer::CreateWorkload()</a>, <a class="el" href="_concat_layer_8cpp_source.xhtml#l00023">ConcatLayer::CreateWorkload()</a>, <a class="el" href="_normalization_layer_8cpp_source.xhtml#l00021">NormalizationLayer::CreateWorkload()</a>, <a class="el" href="_pooling2d_layer_8cpp_source.xhtml#l00027">Pooling2dLayer::CreateWorkload()</a>, <a class="el" href="_shape_layer_8cpp_source.xhtml#l00024">ShapeLayer::CreateWorkload()</a>, <a class="el" href="_pooling3d_layer_8cpp_source.xhtml#l00027">Pooling3dLayer::CreateWorkload()</a>, <a class="el" href="_dequantize_layer_8cpp_source.xhtml#l00019">DequantizeLayer::CreateWorkload()</a>, <a class="el" href="_quantize_layer_8cpp_source.xhtml#l00019">QuantizeLayer::CreateWorkload()</a>, <a class="el" href="_reduce_layer_8cpp_source.xhtml#l00022">ReduceLayer::CreateWorkload()</a>, <a class="el" href="_resize_layer_8cpp_source.xhtml#l00026">ResizeLayer::CreateWorkload()</a>, <a class="el" href="_convert_bf16_to_fp32_layer_8cpp_source.xhtml#l00022">ConvertBf16ToFp32Layer::CreateWorkload()</a>, <a class="el" href="_rsqrt_layer_8cpp_source.xhtml#l00022">RsqrtLayer::CreateWorkload()</a>, <a class="el" href="_fake_quantization_layer_8cpp_source.xhtml#l00021">FakeQuantizationLayer::CreateWorkload()</a>, <a class="el" href="_batch_to_space_nd_layer_8cpp_source.xhtml#l00031">BatchToSpaceNdLayer::CreateWorkload()</a>, <a class="el" href="_convert_fp16_to_fp32_layer_8cpp_source.xhtml#l00022">ConvertFp16ToFp32Layer::CreateWorkload()</a>, <a class="el" href="_floor_layer_8cpp_source.xhtml#l00021">FloorLayer::CreateWorkload()</a>, <a class="el" href="_slice_layer_8cpp_source.xhtml#l00024">SliceLayer::CreateWorkload()</a>, <a class="el" href="_softmax_layer_8cpp_source.xhtml#l00021">SoftmaxLayer::CreateWorkload()</a>, <a class="el" href="_convert_fp32_to_bf16_layer_8cpp_source.xhtml#l00022">ConvertFp32ToBf16Layer::CreateWorkload()</a>, <a class="el" href="_splitter_layer_8cpp_source.xhtml#l00021">SplitterLayer::CreateWorkload()</a>, <a class="el" href="_stack_layer_8cpp_source.xhtml#l00022">StackLayer::CreateWorkload()</a>, <a class="el" href="_instance_normalization_layer_8cpp_source.xhtml#l00021">InstanceNormalizationLayer::CreateWorkload()</a>, <a class="el" href="_strided_slice_layer_8cpp_source.xhtml#l00022">StridedSliceLayer::CreateWorkload()</a>, <a class="el" href="_logical_binary_layer_8cpp_source.xhtml#l00023">LogicalBinaryLayer::CreateWorkload()</a>, <a class="el" href="_transpose_layer_8cpp_source.xhtml#l00025">TransposeLayer::CreateWorkload()</a>, <a class="el" href="_log_softmax_layer_8cpp_source.xhtml#l00021">LogSoftmaxLayer::CreateWorkload()</a>, <a class="el" href="_maximum_layer_8cpp_source.xhtml#l00021">MaximumLayer::CreateWorkload()</a>, <a class="el" href="_mean_layer_8cpp_source.xhtml#l00024">MeanLayer::CreateWorkload()</a>, <a class="el" href="_minimum_layer_8cpp_source.xhtml#l00022">MinimumLayer::CreateWorkload()</a>, <a class="el" href="_multiplication_layer_8cpp_source.xhtml#l00022">MultiplicationLayer::CreateWorkload()</a>, <a class="el" href="_comparison_layer_8cpp_source.xhtml#l00023">ComparisonLayer::CreateWorkload()</a>, <a class="el" href="_depth_to_space_layer_8cpp_source.xhtml#l00025">DepthToSpaceLayer::CreateWorkload()</a>, <a class="el" href="_pad_layer_8cpp_source.xhtml#l00022">PadLayer::CreateWorkload()</a>, <a class="el" href="_arg_min_max_layer_8cpp_source.xhtml#l00024">ArgMinMaxLayer::CreateWorkload()</a>, <a class="el" href="_prelu_layer_8cpp_source.xhtml#l00023">PreluLayer::CreateWorkload()</a>, <a class="el" href="_division_layer_8cpp_source.xhtml#l00022">DivisionLayer::CreateWorkload()</a>, <a class="el" href="_elementwise_unary_layer_8cpp_source.xhtml#l00023">ElementwiseUnaryLayer::CreateWorkload()</a>, <a class="el" href="_space_to_batch_nd_layer_8cpp_source.xhtml#l00027">SpaceToBatchNdLayer::CreateWorkload()</a>, <a class="el" href="_space_to_depth_layer_8cpp_source.xhtml#l00027">SpaceToDepthLayer::CreateWorkload()</a>, <a class="el" href="_gather_layer_8cpp_source.xhtml#l00021">GatherLayer::CreateWorkload()</a>, <a class="el" href="_subtraction_layer_8cpp_source.xhtml#l00022">SubtractionLayer::CreateWorkload()</a>, <a class="el" href="_permute_layer_8cpp_source.xhtml#l00025">PermuteLayer::CreateWorkload()</a>, <a class="el" href="_reshape_layer_8cpp_source.xhtml#l00022">ReshapeLayer::CreateWorkload()</a>, <a class="el" href="_constant_layer_8cpp_source.xhtml#l00021">ConstantLayer::CreateWorkload()</a>, <a class="el" href="_convolution3d_layer_8cpp_source.xhtml#l00048">Convolution3dLayer::CreateWorkload()</a>, <a class="el" href="_channel_shuffle_layer_8cpp_source.xhtml#l00022">ChannelShuffleLayer::CreateWorkload()</a>, <a class="el" href="_detection_post_process_layer_8cpp_source.xhtml#l00023">DetectionPostProcessLayer::CreateWorkload()</a>, <a class="el" href="_transpose_convolution2d_layer_8cpp_source.xhtml#l00025">TransposeConvolution2dLayer::CreateWorkload()</a>, <a class="el" href="_depthwise_convolution2d_layer_8cpp_source.xhtml#l00051">DepthwiseConvolution2dLayer::CreateWorkload()</a>, <a class="el" href="_elementwise_unary_test_impl_8cpp_source.xhtml#l00008">CreateWorkload()</a>, <a class="el" href="_convolution2d_layer_8cpp_source.xhtml#l00049">Convolution2dLayer::CreateWorkload()</a>, <a class="el" href="_pre_compiled_layer_8cpp_source.xhtml#l00031">PreCompiledLayer::CreateWorkload()</a>, <a class="el" href="_fully_connected_layer_8cpp_source.xhtml#l00022">FullyConnectedLayer::CreateWorkload()</a>, <a class="el" href="_unidirectional_sequence_lstm_layer_8cpp_source.xhtml#l00022">UnidirectionalSequenceLstmLayer::CreateWorkload()</a>, <a class="el" href="_lstm_layer_8cpp_source.xhtml#l00022">LstmLayer::CreateWorkload()</a>, <a class="el" href="_batch_normalization_layer_8cpp_source.xhtml#l00021">BatchNormalizationLayer::CreateWorkload()</a>, <a class="el" href="_quantized_lstm_layer_8cpp_source.xhtml#l00022">QuantizedLstmLayer::CreateWorkload()</a>, <a class="el" href="_q_lstm_layer_8cpp_source.xhtml#l00022">QLstmLayer::CreateWorkload()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01645">DepthwiseConvolution2dAsymmetricTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01785">DepthwiseConvolution2dDepthMul1TestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l03664">DepthwiseConvolution2dPerAxisQuantTest()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l01935">DepthwiseConvolution2dTestImpl()</a>, <a class="el" href="_fake_quantization_test_impl_8cpp_source.xhtml#l00016">FakeQuantizationTest()</a>, <a class="el" href="_l2_normalization_test_impl_8cpp_source.xhtml#l00703">L2Normalization2dShapeTest()</a>, <a class="el" href="_mirror_pad_test_impl_8cpp_source.xhtml#l00020">MirrorPad2dTestCommon()</a>, <a class="el" href="_mirror_pad_test_impl_8cpp_source.xhtml#l00066">MirrorPad3dTestCommon()</a>, <a class="el" href="_mirror_pad_test_impl_8cpp_source.xhtml#l00111">MirrorPad4dTestCommon()</a>, <a class="el" href="_pad_test_impl_8cpp_source.xhtml#l00020">Pad2dTestCommon()</a>, <a class="el" href="_pad_test_impl_8cpp_source.xhtml#l00096">Pad3dTestCommon()</a>, <a class="el" href="_pad_test_impl_8cpp_source.xhtml#l00183">Pad4dTestCommon()</a>, <a class="el" href="_pad_test_impl_8cpp_source.xhtml#l00425">PadQAsymmTestCommon()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00121">PermuteTensorData()</a>, <a class="el" href="_prelu_test_impl_8hpp_source.xhtml#l00024">PreluTest()</a>, <a class="el" href="_rank_test_impl_8cpp_source.xhtml#l00015">RankTest()</a>, <a class="el" href="_shape_test_impl_8cpp_source.xhtml#l00015">ShapeTest()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00408">SimpleActivationTest()</a>, <a class="el" href="_convert_fp16_to_fp32_test_impl_8cpp_source.xhtml#l00016">SimpleConvertFp16ToFp32Test()</a>, <a class="el" href="_convert_fp32_to_fp16_test_impl_8cpp_source.xhtml#l00014">SimpleConvertFp32ToFp16Test()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00368">SimpleConvolution2dNhwcTestImpl()</a>, <a class="el" href="_conv2d_test_impl_8cpp_source.xhtml#l00194">SimpleConvolution2dTestImpl()</a>, <a class="el" href="_conv3d_test_impl_8cpp_source.xhtml#l00150">SimpleConvolution3dTestImpl()</a>, <a class="el" href="_fill_test_impl_8cpp_source.xhtml#l00015">SimpleFillTest()</a>, <a class="el" href="_floor_test_impl_8cpp_source.xhtml#l00015">SimpleFloorTest()</a>, <a class="el" href="_fully_connected_test_impl_8cpp_source.xhtml#l00024">SimpleFullyConnectedTestImpl()</a>, <a class="el" href="_permute_test_impl_8hpp_source.xhtml#l00019">SimplePermuteTestImpl()</a>, <a class="el" href="_transpose_test_impl_8hpp_source.xhtml#l00020">SimpleTransposeTestImpl()</a>, <a class="el" href="_activation_test_impl_8cpp_source.xhtml#l00844">SqrtNNTest()</a>, <a class="el" href="_transpose_convolution2d_test_impl_8cpp_source.xhtml#l00571">TransposeConvolution2dPerAxisQuantTest()</a>, <a class="el" href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l01672">UnidirectionalSequenceLstmInt8WithCifgWithPeepholeNoProjectionTest()</a>, <a class="el" href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l01317">UnidirectionalSequenceLstmLayerInt8NoCifgWithPeepholeWithProjectionTest()</a>, <a class="el" href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l01480">UnidirectionalSequenceLstmLayerInt8NoCifgWithPeepholeWithProjectionWithLayerNormTest()</a>, <a class="el" href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l01037">UnidirectionalSequenceLstmLayerInt8Test()</a>, <a class="el" href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l01177">UnidirectionalSequenceLstmLayerInt8TimeMajorTest()</a>, <a class="el" href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l00414">UnidirectionalSequenceLstmLayerNoCifgWithPeepholeWithProjectionTest()</a>, <a class="el" href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l00650">UnidirectionalSequenceLstmLayerNoCifgWithPeepholeWithProjectionWithLayerNormTest()</a>, and <a class="el" href="_unidirectional_sequence_lstm_test_impl_8cpp_source.xhtml#l00875">UnidirectionalSequenceLstmWithCifgWithPeepholeNoProjectionTest()</a>.</p>
<div class="fragment"><div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;{</div><div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;    <span class="keywordflow">switch</span>(type)</div><div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;    {</div><div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">LayerType::Activation</a> :</div><div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;        {</div><div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;            <span class="keyword">auto</span> activationQueueDescriptor = PolymorphicDowncast&lt;const ActivationQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;            <span class="keywordflow">return</span> CreateActivation(*activationQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;        }</div><div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">LayerType::Addition</a> :</div><div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;        {</div><div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;            <span class="keyword">auto</span> additionQueueDescriptor = PolymorphicDowncast&lt;const AdditionQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;            <span class="keywordflow">return</span> CreateAddition(*additionQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;        }</div><div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">LayerType::ArgMinMax</a> :</div><div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;        {</div><div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;            <span class="keyword">auto</span> argMinMaxQueueDescriptor = PolymorphicDowncast&lt;const ArgMinMaxQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;            <span class="keywordflow">return</span> CreateArgMinMax(*argMinMaxQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;        }</div><div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">LayerType::BatchNormalization</a> :</div><div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;        {</div><div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;            <span class="keyword">auto</span> batchNormQueueDescriptor = PolymorphicDowncast&lt;const BatchNormalizationQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;            <span class="keywordflow">return</span> CreateBatchNormalization(*batchNormQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;        }</div><div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">LayerType::BatchToSpaceNd</a> :</div><div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;        {</div><div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;            <span class="keyword">auto</span> batchToSpaceNdQueueDescriptor</div><div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;                    = PolymorphicDowncast&lt;const BatchToSpaceNdQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;            <span class="keywordflow">return</span> CreateBatchToSpaceNd(*batchToSpaceNdQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;        }</div><div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c">LayerType::Cast</a> :</div><div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;        {</div><div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;            <span class="keyword">auto</span> castQueueDescriptor = PolymorphicDowncast&lt;const CastQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;            <span class="keywordflow">return</span> CreateCast(*castQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;        }</div><div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd">LayerType::ChannelShuffle</a> :</div><div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;        {</div><div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;            <span class="keyword">auto</span> channelShuffleQueueDescriptor</div><div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;                    = PolymorphicDowncast&lt;const ChannelShuffleQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;            <span class="keywordflow">return</span> CreateChannelShuffle(*channelShuffleQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;        }</div><div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">LayerType::Comparison</a> :</div><div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;        {</div><div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;            <span class="keyword">auto</span> comparisonQueueDescriptor = PolymorphicDowncast&lt;const ComparisonQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;            <span class="keywordflow">return</span> CreateComparison(*comparisonQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;        }</div><div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">LayerType::Concat</a> :</div><div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;        {</div><div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;            <span class="keyword">auto</span> concatQueueDescriptor = PolymorphicDowncast&lt;const ConcatQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;            <span class="keywordflow">return</span> CreateConcat(*concatQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;        }</div><div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">LayerType::Constant</a> :</div><div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;        {</div><div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;            <span class="keyword">auto</span> constantQueueDescriptor = PolymorphicDowncast&lt;const ConstantQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;            <span class="keywordflow">return</span> CreateConstant(*constantQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;        }</div><div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2ba4c46787312a2467153f40c542851a">LayerType::ConvertBf16ToFp32</a> :</div><div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;        {</div><div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;            <span class="keyword">auto</span> convertBf16ToFp32QueueDescriptor</div><div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;                    = PolymorphicDowncast&lt;const ConvertBf16ToFp32QueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;            <span class="keywordflow">return</span> CreateConvertBf16ToFp32(*convertBf16ToFp32QueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;        }</div><div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">LayerType::ConvertFp16ToFp32</a>:</div><div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;        {</div><div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;            <span class="keyword">auto</span> convertFp16ToFp32QueueDescriptor</div><div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;                    = PolymorphicDowncast&lt;const ConvertFp16ToFp32QueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;            <span class="keywordflow">return</span> CreateConvertFp16ToFp32(*convertFp16ToFp32QueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;        }</div><div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6512859957de2cf2a5fe4dccb07bd9da">LayerType::ConvertFp32ToBf16</a>:</div><div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;        {</div><div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;            <span class="keyword">auto</span> convertFp32ToBf16QueueDescriptor</div><div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;                    = PolymorphicDowncast&lt;const ConvertFp32ToBf16QueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;            <span class="keywordflow">return</span> CreateConvertFp32ToBf16(*convertFp32ToBf16QueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;        }</div><div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">LayerType::ConvertFp32ToFp16</a>:</div><div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;        {</div><div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;            <span class="keyword">auto</span> convertFp32ToFp16QueueDescriptor</div><div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;                    = PolymorphicDowncast&lt;const ConvertFp32ToFp16QueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;            <span class="keywordflow">return</span> CreateConvertFp32ToFp16(*convertFp32ToFp16QueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;        }</div><div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">LayerType::Convolution2d</a>:</div><div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;        {</div><div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;            <span class="keyword">auto</span> convolution2dQueueDescriptor = PolymorphicDowncast&lt;const Convolution2dQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;            <span class="keywordflow">return</span> CreateConvolution2d(*convolution2dQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;        }</div><div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953">LayerType::Convolution3d</a>:</div><div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;        {</div><div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;            <span class="keyword">auto</span> convolution3dQueueDescriptor = PolymorphicDowncast&lt;const Convolution3dQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;            <span class="keywordflow">return</span> CreateConvolution3d(*convolution3dQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;        }</div><div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">LayerType::Debug</a>:</div><div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;        {</div><div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;            <span class="keyword">auto</span> debugQueueDescriptor = PolymorphicDowncast&lt;const DebugQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;            <span class="keywordflow">return</span> CreateDebug(*debugQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;        }</div><div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">LayerType::DepthToSpace</a>:</div><div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;        {</div><div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;            <span class="keyword">auto</span> depthToSpaceQueueDescriptor = PolymorphicDowncast&lt;const DepthToSpaceQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;            <span class="keywordflow">return</span> CreateDepthToSpace(*depthToSpaceQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;        }</div><div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">LayerType::DepthwiseConvolution2d</a>:</div><div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;        {</div><div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;            <span class="keyword">auto</span> depthwiseConvolution2DQueueDescriptor</div><div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;                    = PolymorphicDowncast&lt;const DepthwiseConvolution2dQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;            <span class="keywordflow">return</span> CreateDepthwiseConvolution2d(*depthwiseConvolution2DQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;        }</div><div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">LayerType::Dequantize</a>:</div><div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;        {</div><div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;            <span class="keyword">auto</span> dequantizeQueueDescriptor = PolymorphicDowncast&lt;const DequantizeQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;            <span class="keywordflow">return</span> CreateDequantize(*dequantizeQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;        }</div><div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">LayerType::DetectionPostProcess</a>:</div><div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;        {</div><div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;            <span class="keyword">auto</span> detectionPostProcessQueueDescriptor</div><div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;                    = PolymorphicDowncast&lt;const DetectionPostProcessQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;            <span class="keywordflow">return</span> CreateDetectionPostProcess(*detectionPostProcessQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;        }</div><div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">LayerType::Division</a>:</div><div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;        {</div><div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;            <span class="keyword">auto</span> divisionQueueDescriptor = PolymorphicDowncast&lt;const DivisionQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;            <span class="keywordflow">return</span> CreateDivision(*divisionQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;        }</div><div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">LayerType::ElementwiseUnary</a>:</div><div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;        {</div><div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;            <span class="keyword">auto</span> elementwiseUnaryQueueDescriptor</div><div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;                    = PolymorphicDowncast&lt;const ElementwiseUnaryQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;            <span class="keywordflow">return</span> CreateElementwiseUnary(*elementwiseUnaryQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;</div><div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;        }</div><div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3489c7b05e180496cb2ce8ac73887f48">LayerType::FakeQuantization</a>:</div><div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;        {</div><div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;            <span class="keyword">auto</span> fakeQuantizationQueueDescriptor</div><div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;                    = PolymorphicDowncast&lt;const FakeQuantizationQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;            <span class="keywordflow">return</span> CreateFakeQuantization(*fakeQuantizationQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;        }</div><div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed">LayerType::Fill</a>:</div><div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;        {</div><div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;            <span class="keyword">auto</span> fillQueueDescriptor = PolymorphicDowncast&lt;const FillQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;            <span class="keywordflow">return</span> CreateFill(*fillQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;        }</div><div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">LayerType::Floor</a>:</div><div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;        {</div><div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;            <span class="keyword">auto</span> floorQueueDescriptor = PolymorphicDowncast&lt;const FloorQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;            <span class="keywordflow">return</span> CreateFloor(*floorQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;        }</div><div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">LayerType::FullyConnected</a>:</div><div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;        {</div><div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;            <span class="keyword">auto</span> fullyConnectedQueueDescriptor</div><div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;                    = PolymorphicDowncast&lt;const FullyConnectedQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;            <span class="keywordflow">return</span> CreateFullyConnected(*fullyConnectedQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;        }</div><div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">LayerType::Gather</a>:</div><div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;        {</div><div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;            <span class="keyword">auto</span> gatherQueueDescriptor = PolymorphicDowncast&lt;const GatherQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;            <span class="keywordflow">return</span> CreateGather(*gatherQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;        }</div><div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">LayerType::Input</a>:</div><div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;        {</div><div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;            <span class="keyword">auto</span> inputQueueDescriptor = PolymorphicDowncast&lt;const InputQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarmnn_1_1_i_workload_factory.xhtml#aa83593035de93eb4b6dddb9dc8f5ced6">CreateInput</a>(*inputQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;        }</div><div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">LayerType::InstanceNormalization</a>:</div><div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;        {</div><div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;            <span class="keyword">auto</span> instanceNormalizationQueueDescriptor</div><div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;                    = PolymorphicDowncast&lt;const InstanceNormalizationQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;            <span class="keywordflow">return</span> CreateInstanceNormalization(*instanceNormalizationQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;        }</div><div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">LayerType::L2Normalization</a>:</div><div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;        {</div><div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;            <span class="keyword">auto</span> l2NormalizationQueueDescriptor</div><div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;                    = PolymorphicDowncast&lt;const L2NormalizationQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;            <span class="keywordflow">return</span> CreateL2Normalization(*l2NormalizationQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;        }</div><div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30">LayerType::LogicalBinary</a>:</div><div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;        {</div><div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;            <span class="keyword">auto</span> logicalBinaryQueueDescriptor = PolymorphicDowncast&lt;const LogicalBinaryQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;            <span class="keywordflow">return</span> CreateLogicalBinary(*logicalBinaryQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;        }</div><div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">LayerType::LogSoftmax</a>:</div><div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;        {</div><div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;            <span class="keyword">auto</span> logSoftmaxQueueDescriptor = PolymorphicDowncast&lt;const LogSoftmaxQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;            <span class="keywordflow">return</span> CreateLogSoftmax(*logSoftmaxQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;        }</div><div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">LayerType::Lstm</a>:</div><div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;        {</div><div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;            <span class="keyword">auto</span> lstmQueueDescriptor = PolymorphicDowncast&lt;const LstmQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;            <span class="keywordflow">return</span> CreateLstm(*lstmQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;        }</div><div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">LayerType::Maximum</a>:</div><div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;        {</div><div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;            <span class="keyword">auto</span> maximumQueueDescriptor = PolymorphicDowncast&lt;const MaximumQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;            <span class="keywordflow">return</span> CreateMaximum(*maximumQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;        }</div><div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0a3d6c9ac08ada31c184094bbc67afe00d">LayerType::Mean</a>:</div><div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;        {</div><div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;            <span class="keyword">auto</span> meanQueueDescriptor = PolymorphicDowncast&lt;const MeanQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;            <span class="keywordflow">return</span> CreateMean(*meanQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;        }</div><div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">LayerType::MemCopy</a>:</div><div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;        {</div><div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;            <span class="keyword">auto</span> memCopyQueueDescriptor = PolymorphicDowncast&lt;const MemCopyQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;            <span class="keywordflow">return</span> CreateMemCopy(*memCopyQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;        }</div><div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">LayerType::MemImport</a>:</div><div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;        {</div><div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;            <span class="keyword">auto</span> memImportQueueDescriptor = PolymorphicDowncast&lt;const MemImportQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;            <span class="keywordflow">return</span> CreateMemImport(*memImportQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;        }</div><div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">LayerType::Minimum</a>:</div><div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;        {</div><div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;            <span class="keyword">auto</span> minimumQueueDescriptor = PolymorphicDowncast&lt;const MinimumQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;            <span class="keywordflow">return</span> CreateMinimum(*minimumQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;        }</div><div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">LayerType::Multiplication</a>:</div><div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;        {</div><div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;            <span class="keyword">auto</span> multiplicationQueueDescriptor</div><div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;                    = PolymorphicDowncast&lt;const MultiplicationQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;            <span class="keywordflow">return</span> CreateMultiplication(*multiplicationQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;        }</div><div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">LayerType::Normalization</a>:</div><div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;        {</div><div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;            <span class="keyword">auto</span> normalizationQueueDescriptor = PolymorphicDowncast&lt;const NormalizationQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;            <span class="keywordflow">return</span> CreateNormalization(*normalizationQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;        }</div><div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">LayerType::Output</a>:</div><div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;        {</div><div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;            <span class="keyword">auto</span> outputQueueDescriptor = PolymorphicDowncast&lt;const OutputQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;            <span class="keywordflow">return</span> CreateOutput(*outputQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;        }</div><div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">LayerType::Pad</a>:</div><div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;        {</div><div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;            <span class="keyword">auto</span> padQueueDescriptor = PolymorphicDowncast&lt;const PadQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;            <span class="keywordflow">return</span> CreatePad(*padQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;        }</div><div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">LayerType::Permute</a>:</div><div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;        {</div><div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;            <span class="keyword">auto</span> permuteQueueDescriptor = PolymorphicDowncast&lt;const PermuteQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;            <span class="keywordflow">return</span> CreatePermute(*permuteQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;        }</div><div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">LayerType::Pooling2d</a>:</div><div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;        {</div><div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;            <span class="keyword">auto</span> pooling2dQueueDescriptor = PolymorphicDowncast&lt;const Pooling2dQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;            <span class="keywordflow">return</span> CreatePooling2d(*pooling2dQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;        }</div><div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c">LayerType::Pooling3d</a>:</div><div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;        {</div><div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;            <span class="keyword">auto</span> pooling3dQueueDescriptor = PolymorphicDowncast&lt;const Pooling3dQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;            <span class="keywordflow">return</span> CreatePooling3d(*pooling3dQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;        }</div><div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1ba143ebe524d46181a4b53470693278">LayerType::PreCompiled</a>:</div><div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;        {</div><div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;            <span class="keyword">auto</span> preCompiledQueueDescriptor = PolymorphicDowncast&lt;const PreCompiledQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;            <span class="keywordflow">return</span> CreatePreCompiled(*preCompiledQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;        }</div><div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">LayerType::Prelu</a>:</div><div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;        {</div><div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;            <span class="keyword">auto</span> preluQueueDescriptor = PolymorphicDowncast&lt;const PreluQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;            <span class="keywordflow">return</span> CreatePrelu(*preluQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;        }</div><div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">LayerType::QLstm</a>:</div><div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;        {</div><div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;            <span class="keyword">auto</span> qlstmQueueDescriptor = PolymorphicDowncast&lt;const QLstmQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;            <span class="keywordflow">return</span> CreateQLstm(*qlstmQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;        }</div><div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">LayerType::Quantize</a>:</div><div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;        {</div><div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;            <span class="keyword">auto</span> quantizeQueueDescriptor = PolymorphicDowncast&lt;const QuantizeQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;            <span class="keywordflow">return</span> CreateQuantize(*quantizeQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;        }</div><div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3">LayerType::Rank</a>:</div><div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;        {</div><div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;            <span class="keyword">auto</span> rankQueueDescriptor = PolymorphicDowncast&lt;const RankQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;            <span class="keywordflow">return</span> CreateRank(*rankQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;        }</div><div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">LayerType::Reduce</a>:</div><div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;        {</div><div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;            <span class="keyword">auto</span> reduceQueueDescriptor = PolymorphicDowncast&lt;const ReduceQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;            <span class="keywordflow">return</span> CreateReduce(*reduceQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;        }</div><div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">LayerType::Reshape</a>:</div><div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;        {</div><div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;            <span class="keyword">auto</span> reshapeQueueDescriptor = PolymorphicDowncast&lt;const ReshapeQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;            <span class="keywordflow">return</span> CreateReshape(*reshapeQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;        }</div><div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">LayerType::Resize</a>:</div><div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;        {</div><div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;            <span class="keyword">auto</span> resizeQueueDescriptor = PolymorphicDowncast&lt;const ResizeQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;            <span class="keywordflow">return</span> CreateResize(*resizeQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;        }</div><div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">LayerType::Shape</a>:</div><div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;        {</div><div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;            <span class="keyword">auto</span> shapeQueueDescriptor = PolymorphicDowncast&lt;const ShapeQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;            <span class="keywordflow">return</span> CreateShape(*shapeQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;        }</div><div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">LayerType::Slice</a>:</div><div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;        {</div><div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;            <span class="keyword">auto</span> sliceQueueDescriptor = PolymorphicDowncast&lt;const SliceQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;            <span class="keywordflow">return</span> CreateSlice(*sliceQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;        }</div><div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">LayerType::Softmax</a>:</div><div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;        {</div><div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;            <span class="keyword">auto</span> softmaxQueueDescriptor = PolymorphicDowncast&lt;const SoftmaxQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;            <span class="keywordflow">return</span> CreateSoftmax(*softmaxQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;        }</div><div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">LayerType::SpaceToBatchNd</a>:</div><div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;        {</div><div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;            <span class="keyword">auto</span> spaceToBatchNdQueueDescriptor</div><div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;                    = PolymorphicDowncast&lt;const SpaceToBatchNdQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;            <span class="keywordflow">return</span> CreateSpaceToBatchNd(*spaceToBatchNdQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;        }</div><div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">LayerType::SpaceToDepth</a>:</div><div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;        {</div><div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;            <span class="keyword">auto</span> spaceToDepthQueueDescriptor = PolymorphicDowncast&lt;const SpaceToDepthQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;            <span class="keywordflow">return</span> CreateSpaceToDepth(*spaceToDepthQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;        }</div><div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">LayerType::Splitter</a>:</div><div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;        {</div><div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;            <span class="keyword">auto</span> splitterQueueDescriptor = PolymorphicDowncast&lt;const SplitterQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;            <span class="keywordflow">return</span> CreateSplitter(*splitterQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;        }</div><div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">LayerType::Stack</a>:</div><div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;        {</div><div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;            <span class="keyword">auto</span> stackQueueDescriptor = PolymorphicDowncast&lt;const StackQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;            <span class="keywordflow">return</span> CreateStack(*stackQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;        }</div><div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">LayerType::StridedSlice</a>:</div><div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;        {</div><div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;            <span class="keyword">auto</span> stridedSliceQueueDescriptor = PolymorphicDowncast&lt;const StridedSliceQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;            <span class="keywordflow">return</span> CreateStridedSlice(*stridedSliceQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;        }</div><div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">LayerType::Subtraction</a>:</div><div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;        {</div><div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;            <span class="keyword">auto</span> subtractionQueueDescriptor = PolymorphicDowncast&lt;const SubtractionQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;            <span class="keywordflow">return</span> CreateSubtraction(*subtractionQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;        }</div><div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">LayerType::Transpose</a>:</div><div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;        {</div><div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;            <span class="keyword">auto</span> transposeQueueDescriptor = PolymorphicDowncast&lt;const TransposeQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;            <span class="keywordflow">return</span> CreateTranspose(*transposeQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;        }</div><div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">LayerType::TransposeConvolution2d</a>:</div><div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;        {</div><div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;            <span class="keyword">auto</span> transposeConvolution2dQueueDescriptor</div><div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;                    = PolymorphicDowncast&lt;const TransposeConvolution2dQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;            <span class="keywordflow">return</span> CreateTransposeConvolution2d(*transposeConvolution2dQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;        }</div><div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">LayerType::UnidirectionalSequenceLstm</a>:</div><div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;        {</div><div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;            <span class="keyword">auto</span> unidirectionalSequenceLstmQueueDescriptor</div><div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;                    = PolymorphicDowncast&lt;const UnidirectionalSequenceLstmQueueDescriptor*&gt;(&amp;descriptor);</div><div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;            <span class="keywordflow">return</span> CreateUnidirectionalSequenceLstm(*unidirectionalSequenceLstmQueueDescriptor, <a class="code" href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">info</a>);</div><div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;        }</div><div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;    }</div><div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;}</div><div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a583550d0f265fd3756f7de0e42c51953">armnn::LayerType::Convolution3d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a71b23d26c0f5d20416d6c77754f9806a">armnn::LayerType::TransposeConvolution2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4abcd30d7ea97ad20c2cddc0f47e6b70c7">armnn::LayerType::ElementwiseUnary</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae20f0f2826a6549809f050b86274567f">armnn::LayerType::Concat</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af6c0e3a1c3cfabd32ae8d3ae741fcf0a">armnn::LayerType::Comparison</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3"><div class="ttname"><a href="namespacearmnn.xhtml#adf2e5515c4c36a3e7e46bb8b83c6754eaf3f6d0343d56ce88ce7958170ed05cb3">armnn::OutputShapeRounding::Floor</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6ee06c6045d0c5b6565a247955ef0fc2">armnn::LayerType::BatchToSpaceNd</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2187e1021a911b3807cc1bea2eb1a9ca">armnn::LayerType::Stack</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa31904f2b3479b5a00137fd985974b4d">armnn::LayerType::StridedSlice</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa9a62e70841c4d06dd16306a85700d36">armnn::LayerType::Activation</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4cd9f3996d60790cd11c04f842ebc43c">armnn::LayerType::Cast</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a29c2c02a361c9d7028472e5d92cd4a54">armnn::LayerType::Output</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4addf4f83b056acd5549949fc0350e9aad">armnn::LayerType::ConvertFp32ToFp16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aac61f2e17250a818dee4d12b112aa88f">armnn::LayerType::Normalization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a337c392144dca0d18290c6b4711a2279">armnn::LayerType::SpaceToBatchNd</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4acab78faff25393e9defd1911cb58133e">armnn::LayerType::FullyConnected</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aec4875f03ff0bb0b26cf76ac7f41e3c8">armnn::LayerType::Reduce</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a27d1a1f7b7c2180e5b20ce9e3d00e2dd">armnn::LayerType::Multiplication</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a21baa4498161d195f5bb2e3627344ba4">armnn::LayerType::InstanceNormalization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1189467870bc421ae59277e750263eb2">armnn::LayerType::L2Normalization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0c5967f09e0669c840ebb1ed0da85e32">armnn::LayerType::Prelu</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_abc05539fc6e7907f32ef0fb242e3b3b0a3d6c9ac08ada31c184094bbc67afe00d"><div class="ttname"><a href="namespacearmnn.xhtml#abc05539fc6e7907f32ef0fb242e3b3b0a3d6c9ac08ada31c184094bbc67afe00d">armnn::ReduceOperation::Mean</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af4f53c8297dc1cb53d4e6f8151070a30">armnn::LayerType::LogicalBinary</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aca39930e22f40d10155a57dba32240bb">armnn::LayerType::Quantize</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_workload_factory_xhtml_aa83593035de93eb4b6dddb9dc8f5ced6"><div class="ttname"><a href="classarmnn_1_1_i_workload_factory.xhtml#aa83593035de93eb4b6dddb9dc8f5ced6">armnn::IWorkloadFactory::CreateInput</a></div><div class="ttdeci">virtual std::unique_ptr&lt; IWorkload &gt; CreateInput(const InputQueueDescriptor &amp;descriptor, const WorkloadInfo &amp;info) const =0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a912a4b4d73726c282e3f79aa2c390d6c">armnn::LayerType::ConvertFp16ToFp32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6eb8b8b560161603402c0238b3a7d8b0">armnn::LayerType::Subtraction</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a6512859957de2cf2a5fe4dccb07bd9da"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a6512859957de2cf2a5fe4dccb07bd9da">armnn::LayerType::ConvertFp32ToBf16</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1db19222ac424bd7162142ddf929fd2a">armnn::LayerType::DetectionPostProcess</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aad22c799930d644e8468fe44c0312d53">armnn::LayerType::Gather</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4afa662c6eb71caef475b2b981ce8eccd7">armnn::LayerType::Permute</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9d723d04c40bfd81835c0766a698cf63">armnn::LayerType::Resize</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb033d2f81b68f9a17e8f62de69fed4a">armnn::LayerType::Convolution2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a4dd48794eb3305a0f5aece88b111a97b">armnn::LayerType::MemCopy</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ade43468adaf6acb2c38ebc0c1176f82f">armnn::LayerType::Pad</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a8321e79c278ec510f63675c040594892">armnn::LayerType::Maximum</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a1ba143ebe524d46181a4b53470693278"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a1ba143ebe524d46181a4b53470693278">armnn::LayerType::PreCompiled</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a31d953b9d49a6b4378f45097047976d0">armnn::LayerType::Softmax</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa7c59ccedc6a3bd90c17f3b990afefad">armnn::LayerType::Reshape</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad662867a41bfb30b9f75dda2b5849001">armnn::LayerType::Pooling2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a9bc35e069257a508e14ed82965a8661d">armnn::LayerType::Dequantize</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2b3140dc366b9fcd25ed786a79d1817c">armnn::LayerType::Pooling3d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a7c5531bbefed0945814f874baf9e0e0f">armnn::LayerType::Addition</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a0ca5f33c1d35fd4105d3a26a2823f9dd">armnn::LayerType::ChannelShuffle</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a5e7ff12da912dc79e7e547281823fa4a">armnn::LayerType::SpaceToDepth</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4af97adbfc88b7012a0243215b1076e7e7">armnn::LayerType::DepthwiseConvolution2d</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a021da1b20f73dc252361a54d80497ef3">armnn::LayerType::Rank</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a115bfc5d633eae55c67f9588acdd2bf9">armnn::LayerType::MemImport</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a41cb9b797ebc6f6f6314e3ded935f4cf">armnn::LayerType::Splitter</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a880c1273b27d27cfc82004c3a4b205c9">armnn::LayerType::Shape</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c"><div class="ttname"><a href="namespacearmnn.xhtml#a4dc0adc6737b5944e7671bee71788407acaf9b6b99962bf5c2264824231d7a40c">armnn::BoostLogSeverityMapping::info</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2139684546b147c106b329f41547640c">armnn::LayerType::ArgMinMax</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a324118a6721dd6b8a9b9f4e327df2bf5">armnn::LayerType::Input</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a06b091bc9aea697ba473c71f0bb55925">armnn::LayerType::Lstm</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ae4743c3ec15d1d84169b17264634692e">armnn::LayerType::BatchNormalization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ac21dbda57d88c21ec9857f5d1522c488">armnn::LayerType::LogSoftmax</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3489c7b05e180496cb2ce8ac73887f48"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3489c7b05e180496cb2ce8ac73887f48">armnn::LayerType::FakeQuantization</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a731729ad1b2c0eb9399b62c770b3482d">armnn::LayerType::DepthToSpace</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa1d0ec6d56f8833a078b5a7ac4caf2d4">armnn::LayerType::Minimum</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4adb3e3f51c9107e26c9bccf9a188ce2ed">armnn::LayerType::Fill</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aaf70b1ac863830a4e1ce6268c8399f54">armnn::LayerType::Transpose</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255"><div class="ttname"><a href="namespacearmnn.xhtml#a14d24d90ab4ba2956e92e27890ba4c91acb17869fe51048b5a5c4c6106551a255">armnn::PaddingMode::Constant</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4ad140d37ad98c12ccd8e1c432f548bcdb">armnn::LayerType::Slice</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a3025cdaab2deb0bb2cd642449e570833">armnn::LayerType::Division</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a300124b2433e0376ec4b19251ac3a9e5">armnn::LayerType::UnidirectionalSequenceLstm</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a2ba4c46787312a2467153f40c542851a"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a2ba4c46787312a2467153f40c542851a">armnn::LayerType::ConvertBf16ToFp32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4aa603905470e2a5b8c13e96b579ef0dba">armnn::LayerType::Debug</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25"><div class="ttname"><a href="namespacearmnn.xhtml#a56943a0946e5f15e5e58054b8e7a04a4a91880b71ea6d007439b7bc7c320b5c25">armnn::LayerType::QLstm</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9f7e4296485d2812e7996089149c96d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f7e4296485d2812e7996089149c96d1">&#9670;&nbsp;</a></span>GetBackendId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a>&amp; GetBackendId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_mock_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">MockWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#ae2cd7e29596b68884bfaade25f8f0dc0">NeonWorkloadFactory</a>, and <a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#ae5dac93c38aa9f9108f89b7f4acc2beb">SampleDynamicWorkloadFactory</a>.</p>

<p class="reference">Referenced by <a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>.</p>

</div>
</div>
<a id="a74dc9ec1a223eab8b072368b2dacee87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74dc9ec1a223eab8b072368b2dacee87">&#9670;&nbsp;</a></span>IsLayerSupported() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td>
          <td class="paramname"><em>backendId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt;&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>outReasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01498">1498</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_network_8cpp_source.xhtml#l00670">armnn::AttemptBackendAssignment()</a>, <a class="el" href="_loaded_network_8cpp_source.xhtml#l00602">LoadedNetwork::GetOutputTensorInfo()</a>, <a class="el" href="_neon_workload_factory_8cpp_source.xhtml#l00034">NeonWorkloadFactory::IsLayerSupported()</a>, <a class="el" href="_cl_workload_factory_8cpp_source.xhtml#l00046">ClWorkloadFactory::IsLayerSupported()</a>, and <a class="el" href="_ref_workload_factory_8cpp_source.xhtml#l00098">RefWorkloadFactory::IsLayerSupported()</a>.</p>
<div class="fragment"><div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;{</div><div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;    <span class="keywordflow">return</span> IsLayerConfigurationSupported(backendId, connectableLayer, dataType, outReasonIfUnsupported);</div><div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a7d94ea841143b76fe08ccb308839bfd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d94ea841143b76fe08ccb308839bfd7">&#9670;&nbsp;</a></span>IsLayerSupported() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt;&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>outReasonIfUnsupported</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01506">1506</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;{</div><div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    <span class="keyword">auto</span> layer = PolymorphicDowncast&lt;const Layer*&gt;(&amp;connectableLayer);</div><div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    <span class="keywordflow">return</span> IsLayerConfigurationSupported(layer-&gt;GetBackendId(), connectableLayer, dataType, outReasonIfUnsupported);</div><div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aeaff50773427132e1066a7de56a53db1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeaff50773427132e1066a7de56a53db1">&#9670;&nbsp;</a></span>IsLayerSupported() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt;&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>outReasonIfUnsupported</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>modelOptions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01515">1515</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;{</div><div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    <span class="keyword">auto</span> layer = PolymorphicDowncast&lt;const Layer*&gt;(&amp;connectableLayer);</div><div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;    <span class="keywordflow">return</span> IsLayerConfigurationSupported(layer-&gt;GetBackendId(),</div><div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;                                         connectableLayer,</div><div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;                                         dataType,</div><div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;                                         outReasonIfUnsupported,</div><div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;                                         modelOptions);</div><div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a52ba8d60c6582a847ef7bc914116d394"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52ba8d60c6582a847ef7bc914116d394">&#9670;&nbsp;</a></span>IsLayerSupported() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLayerSupported </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_backend_id.xhtml">BackendId</a> &amp;&#160;</td>
          <td class="paramname"><em>backendId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarmnn_1_1_i_connectable_layer.xhtml">IConnectableLayer</a> &amp;&#160;</td>
          <td class="paramname"><em>layer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarmnn_1_1_optional.xhtml">Optional</a>&lt; <a class="el" href="namespacearmnn.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> &gt;&#160;</td>
          <td class="paramname"><em>dataType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>outReasonIfUnsupported</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearmnn.xhtml#a5b6893cda5b69359a4244c06054da18f">ModelOptions</a> &amp;&#160;</td>
          <td class="paramname"><em>modelOptions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_workload_factory_8cpp_source.xhtml#l01528">1528</a> of file <a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a>.</p>

<p class="reference">References <a class="el" href="_deprecated_8hpp_source.xhtml#l00033">ARMNN_NO_DEPRECATE_WARN_BEGIN</a>.</p>
<div class="fragment"><div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;{</div><div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;    <span class="keywordflow">return</span> IsLayerConfigurationSupported(backendId,</div><div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;                                         connectableLayer,</div><div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;                                         dataType,</div><div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;                                         outReasonIfUnsupported,</div><div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;                                         modelOptions);</div><div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a37f4eba7877deb34f4d8d64c9bcb9ab5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37f4eba7877deb34f4d8d64c9bcb9ab5">&#9670;&nbsp;</a></span>SupportsSubTensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool SupportsSubTensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classarmnn_1_1_mock_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">MockWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_ref_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">RefWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_cl_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">ClWorkloadFactory</a>, <a class="el" href="classarmnn_1_1_neon_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">NeonWorkloadFactory</a>, <a class="el" href="classsdb_1_1_sample_dynamic_workload_factory.xhtml#aed0a782f32856bde72bc10d9381dc11e">SampleDynamicWorkloadFactory</a>, and <a class="el" href="classarmnn_1_1_workload_factory_base.xhtml#aed0a782f32856bde72bc10d9381dc11e">WorkloadFactoryBase</a>.</p>

<p class="reference">Referenced by <a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml#l00027">IWorkloadFactory::AfterWorkloadsCreated()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l01955">ConcatDifferentInputOutputQParamTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l00278">Concatenate()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02117">ConcatTest()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02713">ConcatUint16Test()</a>, <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02429">ConcatUint8DifferentQParamsTest()</a>, and <a class="el" href="_concat_test_impl_8cpp_source.xhtml#l02575">ConcatUint8Test()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>include/armnn/backends/<a class="el" href="include_2armnn_2backends_2_workload_factory_8hpp_source.xhtml">WorkloadFactory.hpp</a></li>
<li>src/backends/backendsCommon/<a class="el" href="_workload_factory_8cpp_source.xhtml">WorkloadFactory.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearmnn.xhtml">armnn</a></li><li class="navelem"><a class="el" href="classarmnn_1_1_i_workload_factory.xhtml">IWorkloadFactory</a></li>
    <li class="footer">Generated on Tue Feb 22 2022 11:39:47 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
