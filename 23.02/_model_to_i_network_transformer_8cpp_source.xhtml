<!-- Copyright (c) 2020 ARM Limited. -->
<!--                                 -->
<!-- SPDX-License-Identifier: MIT    -->
<!--                                 -->
<!-- HTML header for doxygen 1.8.13-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" />
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArmNN: shim/sl/canonical/ModelToINetworkTransformer.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="ArmNN" src="Arm_NN_horizontal_blue.png" style="max-width: 10rem; margin-top: .5rem; margin-left 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_model_to_i_network_transformer_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ModelToINetworkTransformer.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_model_to_i_network_transformer_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">// Copyright Â© 2022 Arm Ltd and Contributors. All rights reserved.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno"><a class="line" href="_model_to_i_network_transformer_8cpp.xhtml#a7ce0df38eb467e59f209470c8f5ac4e6">    6</a></span>&#160;<span class="preprocessor">#define LOG_TAG &quot;arm-armnn-sl&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_model_to_i_network_transformer_8hpp.xhtml">ModelToINetworkTransformer.hpp</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_canonical_utils_8hpp.xhtml">CanonicalUtils.hpp</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_converter_8hpp.xhtml">Converter.hpp</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;log/log.h&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearmnn__driver.xhtml">armnn_driver</a></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;{</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_model_to_i_network_transformer.xhtml#ab4cafc079ba2dc8700c2f92b81dc410b">   18</a></span>&#160;<a class="code" href="classarmnn__driver_1_1_model_to_i_network_transformer.xhtml#ab4cafc079ba2dc8700c2f92b81dc410b">ModelToINetworkTransformer::ModelToINetworkTransformer</a>(</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keyword">const</span> std::vector&lt;armnn::BackendId&gt;&amp; backends,</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">Model</a>&amp; model,</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keyword">const</span> std::set&lt;unsigned int&gt;&amp; forcedUnsupportedOperations)</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    : m_Data(backends)</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    , m_Model(model)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    , m_ForcedUnsupportedOperations(forcedUnsupportedOperations)</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    , m_ConversionResult(<a class="code" href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9">ConversionResult</a>::<a class="code" href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">Success</a>)</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        Convert();</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    }</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">catch</span> (std::exception&amp; e)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        m_ConversionResult = <a class="code" href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9a6dcca67f0df2a0038edf5a82b1399527">ConversionResult::UnsupportedFeature</a>;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ModelToINetworkTransformer: Unexpected exception: &quot;</span> &lt;&lt; e.what();</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        assert(<span class="keyword">false</span>);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    }</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keywordtype">void</span> ModelToINetworkTransformer::Convert()</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ModelToINetworkTransformer: Convert()&quot;</span>;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="comment">//VLOG(DRIVER) &lt;&lt; &quot;ModelToINetworkTransformer: Convert(): &quot; &lt;&lt; GetModelSummary(m_Model).c_str();</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="comment">// map the memory pool into shared pointers</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    m_Data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#acb740de896710dbc576f5eaf7a9cfeaa">m_MemPools</a>.clear();</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">if</span> (!setRunTimePoolInfosFromCanonicalMemories(&amp;m_Data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#acb740de896710dbc576f5eaf7a9cfeaa">m_MemPools</a>, m_Model.pools))</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;Setting of run time pool infos from Hidl Memories has failed.&quot;</span> &lt;&lt; __func__;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        m_ConversionResult = <a class="code" href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9ab7d6155514def6898ba4432a82efd28b">ConversionResult::ErrorMappingPools</a>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">using</span> <a class="code" href="namespacearmnn.xhtml#a4de71c3661093e5c4ae7775114f43413">NetworkOptions</a> = std::vector&lt;armnn::BackendOptions&gt;;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="namespacearmnn.xhtml#a4de71c3661093e5c4ae7775114f43413">NetworkOptions</a> networkOptions;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a> shapeInferenceMethodOption(<span class="stringliteral">&quot;ShapeInferenceMethod&quot;</span>,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                                                    {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                                                            { <span class="stringliteral">&quot;InferAndValidate&quot;</span>, <span class="keyword">true</span> }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                                                    });</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    networkOptions.push_back(shapeInferenceMethodOption);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="comment">// Create armnn::INetwork</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    m_Data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a> = <a class="code" href="classarmnn_1_1_i_network.xhtml#a41ce159095e95f7cd4174ce5d4662697">armnn::INetwork::Create</a>(networkOptions);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// add operations to it</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// track which layer outputs each operand</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ModelToINetworkTransformer::Convert(): m_OutputSlotForOperand&quot;</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    m_Data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a4df0c61eb897ecc9271a4a85604066ea">m_OutputSlotForOperand</a> = std::vector&lt;armnn::IOutputSlot*&gt;(m_Model.main.operands.size(), <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ModelToINetworkTransformer::Convert(): for m_Model.inputIndexes.size()&quot;</span>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; m_Model.main.inputIndexes.size(); i++)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ModelToINetworkTransformer::Convert(): m_Model.inputIndexes[i]&quot;</span>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="comment">// inputs in android nn are represented by operands</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            uint32_t inputIndex = m_Model.main.inputIndexes[i];</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ModelToINetworkTransformer::Convert(): m_Model.operands[inputIndex]&quot;</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">Operand</a>&amp; operand = m_Model.main.operands[inputIndex];</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ModelToINetworkTransformer::Convert(): GetTensorInfoForOperand(operand)&quot;</span>;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; tensor = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(operand);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keyword">const</span> std::string layerName = <span class="stringliteral">&quot;Input_&quot;</span> + std::to_string(i);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ModelToINetworkTransformer::Convert(): m_Data.m_Network-&gt;AddInputLayer(...)&quot;</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer = m_Data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddInputLayer(i, layerName.c_str());</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ModelToINetworkTransformer::Convert(): layer-&gt;GetOutputSlot(0)&quot;</span>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <a class="code" href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a>&amp; outputSlot = layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">GetOutputSlot</a>(0);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ModelToINetworkTransformer::Convert(): outputSlot.SetTensorInfo(...)&quot;</span>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            outputSlot.<a class="code" href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">SetTensorInfo</a>(<a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(operand));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            VLOG(DRIVER) &lt;&lt; <span class="stringliteral">&quot;ModelToINetworkTransformer::Convert(): store for later layers&quot;</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="comment">// store for later layers</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            m_Data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a4df0c61eb897ecc9271a4a85604066ea">m_OutputSlotForOperand</a>[inputIndex] = &amp;outputSlot;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">catch</span> (<a class="code" href="classarmnn__driver_1_1_unsupported_operand.xhtml">UnsupportedOperand&lt;OperandType&gt;</a>&amp; e)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        VLOG(DRIVER) &lt;&lt;  __func__ &lt;&lt; <span class="stringliteral">&quot;Operand type: &quot;</span> &lt;&lt;  e.<a class="code" href="classarmnn__driver_1_1_unsupported_operand.xhtml#adbccd9c087443cf759711a3e62da9a84">m_type</a> &lt;&lt; <span class="stringliteral">&quot; is not supported in ArmnnDriver&quot;</span>;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        m_ConversionResult = <a class="code" href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9a6dcca67f0df2a0038edf5a82b1399527">ConversionResult::UnsupportedFeature</a>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>&amp; e)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        Fail(<span class="stringliteral">&quot;%s: Failed to convert input operand to TensorShape: %s&quot;</span>, __func__, e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>());</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        m_ConversionResult = <a class="code" href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9a6dcca67f0df2a0038edf5a82b1399527">ConversionResult::UnsupportedFeature</a>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordtype">bool</span> UnsupportedDynamicOperation = <span class="keyword">false</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">for</span> (uint32_t operationIdx = 0; operationIdx &lt; m_Model.main.operations.size(); operationIdx++)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>&amp; operation = m_Model.main.operations[operationIdx];</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordtype">bool</span> ok = <span class="keyword">true</span>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">if</span> (m_ForcedUnsupportedOperations.find(operationIdx) != m_ForcedUnsupportedOperations.end())</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            Fail(<span class="stringliteral">&quot;%s: Operation at index %i has been forced to be unsupported.&quot;</span>, __func__, operationIdx);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            ok = <span class="keyword">false</span>;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">if</span> (ok)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">try</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                ok = <a class="code" href="classarmnn__driver_1_1_converter.xhtml#a066acd78f531b709b725a730bfbee887">Converter::ConvertOperation</a>(operation, m_Model, m_Data);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">catch</span> (<a class="code" href="classarmnn__driver_1_1_unsupported_operand.xhtml">UnsupportedOperand&lt;OperandType&gt;</a>&amp; e)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                VLOG(DRIVER) &lt;&lt; __func__ &lt;&lt; <span class="stringliteral">&quot;Operation type: &quot;</span> &lt;&lt; e.<a class="code" href="classarmnn__driver_1_1_unsupported_operand.xhtml#adbccd9c087443cf759711a3e62da9a84">m_type</a> &lt;&lt; <span class="stringliteral">&quot;is not supported in ArmnnDriver&quot;</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                ok = <span class="keyword">false</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>&amp; e)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                Fail(<span class="stringliteral">&quot;%s: Failed to convert operation in %s&quot;</span>, __func__, e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>());</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                ok = <span class="keyword">false</span>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="comment">// Store whether this operation was successfully converted.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        m_OperationSupported.emplace(operationIdx, ok);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="comment">// Any single operation failing will fail the entire conversion.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="comment">// We still need to continue and check the other ones.</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">if</span> (!ok)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">if</span> (m_Data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a094e06eb84b3b80533c0f961f0f472de">m_DynamicInputsEncountered</a>)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                Fail(<span class="stringliteral">&quot;%s: The unsupported operation at index %i has dynamic inputs.&quot;</span>, __func__, operationIdx);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                UnsupportedDynamicOperation = <span class="keyword">true</span>;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            m_ConversionResult = <a class="code" href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9a6dcca67f0df2a0038edf5a82b1399527">ConversionResult::UnsupportedFeature</a>;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        m_Data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a094e06eb84b3b80533c0f961f0f472de">m_DynamicInputsEncountered</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">// Due to the NNAPI partitioner not supporting partition boundaries of unknown size,</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// any operations who&#39;s outputs connect to an unsupported operation with with dynamic inputs</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="comment">// will cause a failure.</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// The simplest solution to this problem is to not support any operations in a model containing</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// an unsupported operation with with dynamic inputs.</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">if</span> (UnsupportedDynamicOperation)</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        Fail(<span class="stringliteral">&quot;%s: Unsupported operation with dynamic inputs found. Retroactively setting all operations to unsupported&quot;</span>,</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;             __func__);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; operation : m_OperationSupported)</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            operation.second = <span class="keyword">false</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">if</span> (m_ConversionResult == <a class="code" href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9a505a83f220c02df2f85c3810cd9ceb38">ConversionResult::Success</a>)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">for</span> (uint32_t i = 0; i &lt; m_Model.main.outputIndexes.size(); i++)</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                <span class="comment">// outputs in android nn are represented by operands</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                uint32_t outputIndex = m_Model.main.outputIndexes[i];</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>&amp; operand = m_Model.main.operands[outputIndex];</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                <span class="keyword">const</span> <a class="code" href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a>&amp; tensor = <a class="code" href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">GetTensorInfoForOperand</a>(operand);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                <span class="keyword">const</span> std::string layerName = <span class="stringliteral">&quot;Output_&quot;</span> + std::to_string(i);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a>* layer = m_Data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">m_Network</a>-&gt;AddOutputLayer(i, layerName.c_str());</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                assert(m_Data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a4df0c61eb897ecc9271a4a85604066ea">m_OutputSlotForOperand</a>[outputIndex]);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                m_Data.<a class="code" href="structarmnn__driver_1_1_conversion_data.xhtml#a4df0c61eb897ecc9271a4a85604066ea">m_OutputSlotForOperand</a>[outputIndex]-&gt;Connect(layer-&gt;<a class="code" href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">GetInputSlot</a>(0));</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        }</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a>&amp; e)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        Fail(<span class="stringliteral">&quot;%s: Failed to convert output operand to TensorShape: %s&quot;</span>, __func__, e.<a class="code" href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">what</a>());</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        m_ConversionResult = <a class="code" href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9a6dcca67f0df2a0038edf5a82b1399527">ConversionResult::UnsupportedFeature</a>;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="classarmnn__driver_1_1_model_to_i_network_transformer.xhtml#a40b4ed2ba597213863c7b380f8fd2e8a">  195</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarmnn__driver_1_1_model_to_i_network_transformer.xhtml#a40b4ed2ba597213863c7b380f8fd2e8a">ModelToINetworkTransformer::IsOperationSupported</a>(uint32_t operationIndex)<span class="keyword"> const</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    std::map&lt;uint32_t, bool&gt;::const_iterator it = m_OperationSupported.find(operationIndex);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    assert(it != m_OperationSupported.end());</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">return</span> it-&gt;second;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;}</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;} <span class="comment">// armnn_driver</span></div><div class="ttc" id="structarmnn__driver_1_1_conversion_data_xhtml_acb740de896710dbc576f5eaf7a9cfeaa"><div class="ttname"><a href="structarmnn__driver_1_1_conversion_data.xhtml#acb740de896710dbc576f5eaf7a9cfeaa">armnn_driver::ConversionData::m_MemPools</a></div><div class="ttdeci">std::vector&lt;::android::nn::RunTimePoolInfo &gt; m_MemPools</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00062">ConversionUtils.hpp:62</a></div></div>
<div class="ttc" id="_canonical_utils_8hpp_xhtml"><div class="ttname"><a href="_canonical_utils_8hpp.xhtml">CanonicalUtils.hpp</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_afa2a6d5a1431289c92cea9cceeb174c9ab7d6155514def6898ba4432a82efd28b"><div class="ttname"><a href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9ab7d6155514def6898ba4432a82efd28b">armnn_driver::ConversionResult::ErrorMappingPools</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml">armnn::IConnectableLayer</a></div><div class="ttdoc">Interface for a layer that is connectable to other layers via InputSlots and OutputSlots. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00068">INetwork.hpp:68</a></div></div>
<div class="ttc" id="structarmnn__driver_1_1_conversion_data_xhtml_a4df0c61eb897ecc9271a4a85604066ea"><div class="ttname"><a href="structarmnn__driver_1_1_conversion_data.xhtml#a4df0c61eb897ecc9271a4a85604066ea">armnn_driver::ConversionData::m_OutputSlotForOperand</a></div><div class="ttdeci">std::vector&lt; armnn::IOutputSlot * &gt; m_OutputSlotForOperand</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00061">ConversionUtils.hpp:61</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_network_xhtml_a41ce159095e95f7cd4174ce5d4662697"><div class="ttname"><a href="classarmnn_1_1_i_network.xhtml#a41ce159095e95f7cd4174ce5d4662697">armnn::INetwork::Create</a></div><div class="ttdeci">static INetworkPtr Create(const NetworkOptions &amp;networkOptions={})</div><div class="ttdef"><b>Definition:</b> <a href="_network_8cpp_source.xhtml#l00452">Network.cpp:452</a></div></div>
<div class="ttc" id="classarmnn_1_1_tensor_info_xhtml"><div class="ttname"><a href="classarmnn_1_1_tensor_info.xhtml">armnn::TensorInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_8hpp_source.xhtml#l00152">Tensor.hpp:152</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_converter_xhtml_a066acd78f531b709b725a730bfbee887"><div class="ttname"><a href="classarmnn__driver_1_1_converter.xhtml#a066acd78f531b709b725a730bfbee887">armnn_driver::Converter::ConvertOperation</a></div><div class="ttdeci">static bool ConvertOperation(const Operation &amp;operation, const Model &amp;model, ConversionData &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="_converter_8cpp_source.xhtml#l00021">Converter.cpp:21</a></div></div>
<div class="ttc" id="classarmnn_1_1_exception_xhtml_abf843cbb29dec939d0731e491bab6f70"><div class="ttname"><a href="classarmnn_1_1_exception.xhtml#abf843cbb29dec939d0731e491bab6f70">armnn::Exception::what</a></div><div class="ttdeci">virtual const char * what() const noexcept override</div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8cpp_source.xhtml#l00032">Exceptions.cpp:32</a></div></div>
<div class="ttc" id="namespacearmnn_xhtml_a4de71c3661093e5c4ae7775114f43413"><div class="ttname"><a href="namespacearmnn.xhtml#a4de71c3661093e5c4ae7775114f43413">armnn::NetworkOptions</a></div><div class="ttdeci">std::vector&lt; BackendOptions &gt; NetworkOptions</div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00016">BackendOptions.hpp:16</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_unsupported_operand_xhtml_adbccd9c087443cf759711a3e62da9a84"><div class="ttname"><a href="classarmnn__driver_1_1_unsupported_operand.xhtml#adbccd9c087443cf759711a3e62da9a84">armnn_driver::UnsupportedOperand::m_type</a></div><div class="ttdeci">OperandType m_type</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8hpp_source.xhtml#l00035">CanonicalUtils.hpp:35</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_unsupported_operand_xhtml"><div class="ttname"><a href="classarmnn__driver_1_1_unsupported_operand.xhtml">armnn_driver::UnsupportedOperand</a></div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8hpp_source.xhtml#l00027">CanonicalUtils.hpp:27</a></div></div>
<div class="ttc" id="structarmnn__driver_1_1_conversion_data_xhtml_a094e06eb84b3b80533c0f961f0f472de"><div class="ttname"><a href="structarmnn__driver_1_1_conversion_data.xhtml#a094e06eb84b3b80533c0f961f0f472de">armnn_driver::ConversionData::m_DynamicInputsEncountered</a></div><div class="ttdeci">bool m_DynamicInputsEncountered</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00063">ConversionUtils.hpp:63</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml_a5ee4a6c9a2481245487b1b1a70d20fd0"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml#a5ee4a6c9a2481245487b1b1a70d20fd0">armnn::IOutputSlot::SetTensorInfo</a></div><div class="ttdeci">virtual void SetTensorInfo(const TensorInfo &amp;tensorInfo)=0</div></div>
<div class="ttc" id="namespacearmnn_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba505a83f220c02df2f85c3810cd9ceb38">armnn::Status::Success</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a923b39ec5f83672f50289cbaf5de6798"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a923b39ec5f83672f50289cbaf5de6798">armnn_driver::Model</a></div><div class="ttdeci">::android::nn::Model Model</div><div class="ttdoc">Helper classes. </div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00043">ConversionUtils.hpp:43</a></div></div>
<div class="ttc" id="structarmnn__driver_1_1_conversion_data_xhtml_a2db3ae8d422f17d455e0ba0cb6291d2a"><div class="ttname"><a href="structarmnn__driver_1_1_conversion_data.xhtml#a2db3ae8d422f17d455e0ba0cb6291d2a">armnn_driver::ConversionData::m_Network</a></div><div class="ttdeci">armnn::INetworkPtr m_Network</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00060">ConversionUtils.hpp:60</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_output_slot_xhtml"><div class="ttname"><a href="classarmnn_1_1_i_output_slot.xhtml">armnn::IOutputSlot</a></div><div class="ttdoc">An output connection slot for a layer. </div><div class="ttdef"><b>Definition:</b> <a href="_i_network_8hpp_source.xhtml#l00041">INetwork.hpp:41</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_afa2a6d5a1431289c92cea9cceeb174c9a6dcca67f0df2a0038edf5a82b1399527"><div class="ttname"><a href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9a6dcca67f0df2a0038edf5a82b1399527">armnn_driver::ConversionResult::UnsupportedFeature</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_a93f4874062e34819806d36b74c73dc61"><div class="ttname"><a href="namespacearmnn__driver.xhtml#a93f4874062e34819806d36b74c73dc61">armnn_driver::GetTensorInfoForOperand</a></div><div class="ttdeci">armnn::TensorInfo GetTensorInfoForOperand(const Operand &amp;operand)</div><div class="ttdef"><b>Definition:</b> <a href="_canonical_utils_8cpp_source.xhtml#l00097">CanonicalUtils.cpp:97</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_model_to_i_network_transformer_xhtml_a40b4ed2ba597213863c7b380f8fd2e8a"><div class="ttname"><a href="classarmnn__driver_1_1_model_to_i_network_transformer.xhtml#a40b4ed2ba597213863c7b380f8fd2e8a">armnn_driver::ModelToINetworkTransformer::IsOperationSupported</a></div><div class="ttdeci">bool IsOperationSupported(uint32_t operationIndex) const</div><div class="ttdef"><b>Definition:</b> <a href="_model_to_i_network_transformer_8cpp_source.xhtml#l00195">ModelToINetworkTransformer.cpp:195</a></div></div>
<div class="ttc" id="classarmnn_1_1_invalid_argument_exception_xhtml"><div class="ttname"><a href="classarmnn_1_1_invalid_argument_exception.xhtml">armnn::InvalidArgumentException</a></div><div class="ttdef"><b>Definition:</b> <a href="_exceptions_8hpp_source.xhtml#l00080">Exceptions.hpp:80</a></div></div>
<div class="ttc" id="structarmnn_1_1_backend_options_xhtml"><div class="ttname"><a href="structarmnn_1_1_backend_options.xhtml">armnn::BackendOptions</a></div><div class="ttdoc">Struct for the users to pass backend specific options. </div><div class="ttdef"><b>Definition:</b> <a href="_backend_options_8hpp_source.xhtml#l00022">BackendOptions.hpp:22</a></div></div>
<div class="ttc" id="_converter_8hpp_xhtml"><div class="ttname"><a href="_converter_8hpp.xhtml">Converter.hpp</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_aa9b4bc8d4cfb04be14771dbb1bc1a1ac"><div class="ttname"><a href="namespacearmnn__driver.xhtml#aa9b4bc8d4cfb04be14771dbb1bc1a1ac">armnn_driver::Operand</a></div><div class="ttdeci">::android::nn::Operand Operand</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00044">ConversionUtils.hpp:44</a></div></div>
<div class="ttc" id="classarmnn__driver_1_1_model_to_i_network_transformer_xhtml_ab4cafc079ba2dc8700c2f92b81dc410b"><div class="ttname"><a href="classarmnn__driver_1_1_model_to_i_network_transformer.xhtml#ab4cafc079ba2dc8700c2f92b81dc410b">armnn_driver::ModelToINetworkTransformer::ModelToINetworkTransformer</a></div><div class="ttdeci">ModelToINetworkTransformer(const std::vector&lt; armnn::BackendId &gt; &amp;backends, const Model &amp;model, const std::set&lt; unsigned int &gt; &amp;forcedUnsupportedOperations)</div><div class="ttdef"><b>Definition:</b> <a href="_model_to_i_network_transformer_8cpp_source.xhtml#l00018">ModelToINetworkTransformer.cpp:18</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a6ec9e0eb66d7d6a01240492a0b18104c"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a6ec9e0eb66d7d6a01240492a0b18104c">armnn::IConnectableLayer::GetInputSlot</a></div><div class="ttdeci">virtual const IInputSlot &amp; GetInputSlot(unsigned int index) const =0</div><div class="ttdoc">Get a const input slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_afa2a6d5a1431289c92cea9cceeb174c9a505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9a505a83f220c02df2f85c3810cd9ceb38">armnn_driver::ConversionResult::Success</a></div></div>
<div class="ttc" id="_model_to_i_network_transformer_8hpp_xhtml"><div class="ttname"><a href="_model_to_i_network_transformer_8hpp.xhtml">ModelToINetworkTransformer.hpp</a></div></div>
<div class="ttc" id="classarmnn_1_1_i_connectable_layer_xhtml_a80ac4eda2e7f2757ec9dd96fc96dbd16"><div class="ttname"><a href="classarmnn_1_1_i_connectable_layer.xhtml#a80ac4eda2e7f2757ec9dd96fc96dbd16">armnn::IConnectableLayer::GetOutputSlot</a></div><div class="ttdeci">virtual const IOutputSlot &amp; GetOutputSlot(unsigned int index) const =0</div><div class="ttdoc">Get the const output slot handle by slot index. </div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml_afa2a6d5a1431289c92cea9cceeb174c9"><div class="ttname"><a href="namespacearmnn__driver.xhtml#afa2a6d5a1431289c92cea9cceeb174c9">armnn_driver::ConversionResult</a></div><div class="ttdeci">ConversionResult</div><div class="ttdef"><b>Definition:</b> <a href="_conversion_utils_8hpp_source.xhtml#l00125">ConversionUtils.hpp:125</a></div></div>
<div class="ttc" id="namespacearmnn__driver_xhtml"><div class="ttname"><a href="namespacearmnn__driver.xhtml">armnn_driver</a></div><div class="ttdoc">Helper classes. </div><div class="ttdef"><b>Definition:</b> <a href="_armnn_device_8cpp_source.xhtml#l00037">ArmnnDevice.cpp:37</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_b4dbf96392bc72a402a7206cbda88a03.xhtml">shim</a></li><li class="navelem"><a class="el" href="dir_09eea26cf0279feb9fcfb9b796a3e57e.xhtml">sl</a></li><li class="navelem"><a class="el" href="dir_6de13b49022bb7cfc6557e28050d5cbe.xhtml">canonical</a></li><li class="navelem"><a class="el" href="_model_to_i_network_transformer_8cpp.xhtml">ModelToINetworkTransformer.cpp</a></li>
    <li class="footer">Generated on Fri Feb 24 2023 10:24:24 for ArmNN by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
